Command:
python test_script.py -s constant_subclass -d 7 -n 100 --seed 34 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 7.

Computed total variation: 0.72
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:39 PM: Your problem has 65 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:39 PM: Finished problem compilation (took 6.052e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 65
  constraints   = 115
  nnz(P)        = 0
  nnz(A)        = 515
  cones (total) = 1
    : Nonnegative = 1,  numel = 115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9728e-01  +5.1145e+01  5.06e+01  8.68e-01  9.47e+00  1.00e+00  1.04e+00   ------   
  1  +5.8132e-01  +1.0919e+01  1.03e+01  3.53e-01  5.53e+00  3.84e-03  5.64e-01  6.15e-01  
  2  +5.1554e-01  +1.6456e+00  1.13e+00  7.97e-02  1.53e+00  1.54e-02  2.03e-01  9.90e-01  
  3  +4.8651e-01  +1.0264e+00  5.40e-01  2.49e-02  4.99e-01  1.25e-02  7.22e-02  7.17e-01  
  4  +4.5433e-01  +7.2013e-01  2.66e-01  9.04e-03  1.81e-01  6.23e-03  2.94e-02  6.30e-01  
  5  +4.3562e-01  +5.6304e-01  1.27e-01  3.84e-03  7.61e-02  2.86e-03  1.41e-02  5.98e-01  
  6  +4.1448e-01  +4.7423e-01  5.98e-02  1.24e-03  2.46e-02  1.14e-03  5.51e-03  7.48e-01  
  7  +4.0264e-01  +4.1039e-01  7.74e-03  1.64e-04  3.26e-03  2.46e-05  7.91e-04  9.90e-01  
  8  +4.0013e-01  +4.0022e-01  9.29e-05  1.94e-06  3.85e-05  2.71e-07  9.51e-06  9.88e-01  
  9  +4.0010e-01  +4.0010e-01  9.29e-07  1.94e-08  3.85e-07  2.71e-09  9.51e-08  9.90e-01  
 10  +4.0010e-01  +4.0010e-01  9.29e-09  1.94e-10  3.85e-09  2.71e-11  9.51e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 544.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:39 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:39 PM: Optimal value: 4.001e-01
(CVXPY) Sep 20 07:38:39 PM: Compilation took 6.052e-03 seconds
(CVXPY) Sep 20 07:38:39 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:39 PM: Your problem has 75 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:39 PM: Finished problem compilation (took 4.022e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 125
  nnz(P)        = 0
  nnz(A)        = 602
  cones (total) = 1
    : Nonnegative = 1,  numel = 125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9516e-01  +5.1428e+01  5.09e+01  8.74e-01  9.42e+00  1.00e+00  1.05e+00   ------   
  1  +5.6715e-01  +1.0970e+01  1.04e+01  3.64e-01  5.37e+00  3.84e-03  5.70e-01  6.14e-01  
  2  +5.0353e-01  +1.7268e+00  1.22e+00  7.92e-02  1.52e+00  1.67e-02  1.99e-01  9.90e-01  
  3  +4.5758e-01  +1.1364e+00  6.79e-01  2.52e-02  5.09e-01  1.54e-02  7.02e-02  7.02e-01  
  4  +4.1573e-01  +6.2553e-01  2.10e-01  6.74e-03  1.35e-01  3.99e-03  2.11e-02  7.39e-01  
  5  +3.8937e-01  +5.0123e-01  1.12e-01  2.83e-03  5.99e-02  1.95e-03  9.18e-03  6.95e-01  
  6  +3.7365e-01  +4.4295e-01  6.93e-02  1.51e-03  3.42e-02  1.00e-03  5.10e-03  5.77e-01  
  7  +3.5588e-01  +3.6848e-01  1.26e-02  2.68e-04  6.25e-03  9.48e-06  9.94e-04  9.87e-01  
  8  +3.5063e-01  +3.5114e-01  5.05e-04  1.03e-05  2.46e-04  9.13e-07  4.12e-05  9.69e-01  
  9  +3.5041e-01  +3.5042e-01  1.22e-05  2.53e-07  5.94e-06  1.84e-08  1.02e-06  9.75e-01  
 10  +3.5040e-01  +3.5040e-01  1.22e-07  2.53e-09  5.94e-08  1.84e-10  1.02e-08  9.90e-01  
 11  +3.5040e-01  +3.5040e-01  1.22e-09  2.53e-11  5.94e-10  1.84e-12  1.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 612.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:39 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:39 PM: Optimal value: 3.504e-01
(CVXPY) Sep 20 07:38:39 PM: Compilation took 4.022e-03 seconds
(CVXPY) Sep 20 07:38:39 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3504
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:39 PM: Your problem has 85 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:39 PM: Finished problem compilation (took 4.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 85
  constraints   = 135
  nnz(P)        = 0
  nnz(A)        = 704
  cones (total) = 1
    : Nonnegative = 1,  numel = 135

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9329e-01  +5.1564e+01  5.11e+01  8.79e-01  9.49e+00  1.00e+00  1.06e+00   ------   
  1  +5.5354e-01  +1.1077e+01  1.05e+01  3.77e-01  5.39e+00  3.82e-03  5.82e-01  6.07e-01  
  2  +4.9146e-01  +1.8223e+00  1.33e+00  8.10e-02  1.56e+00  1.83e-02  2.03e-01  9.90e-01  
  3  +4.2455e-01  +1.1131e+00  6.89e-01  2.23e-02  4.51e-01  1.68e-02  6.32e-02  7.44e-01  
  4  +3.6842e-01  +7.2757e-01  3.59e-01  8.55e-03  1.72e-01  9.58e-03  2.63e-02  6.45e-01  
  5  +3.2471e-01  +4.7719e-01  1.52e-01  3.47e-03  6.91e-02  2.52e-03  1.19e-02  6.83e-01  
  6  +3.0408e-01  +3.8533e-01  8.13e-02  1.76e-03  3.59e-02  1.25e-03  6.34e-03  5.24e-01  
  7  +2.8240e-01  +2.8722e-01  4.82e-03  1.04e-04  2.10e-03  2.59e-05  4.10e-04  9.63e-01  
  8  +2.8071e-01  +2.8120e-01  4.93e-04  1.06e-05  2.13e-04  2.42e-06  4.33e-05  8.97e-01  
  9  +2.8052e-01  +2.8055e-01  3.56e-05  7.59e-07  1.50e-05  1.59e-07  3.27e-06  9.43e-01  
 10  +2.8050e-01  +2.8050e-01  3.66e-07  7.79e-09  1.54e-07  1.63e-09  3.37e-08  9.90e-01  
 11  +2.8050e-01  +2.8050e-01  3.67e-09  7.81e-11  1.55e-09  1.64e-11  3.38e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 832.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:39 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:39 PM: Optimal value: 2.805e-01
(CVXPY) Sep 20 07:38:39 PM: Compilation took 4.005e-03 seconds
(CVXPY) Sep 20 07:38:39 PM: Solver (including time spent in interface) took 1.999e-03 seconds
Iteration: 3, Objective: 0.2805
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:40 PM: Your problem has 95 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:40 PM: Finished problem compilation (took 4.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 95
  constraints   = 145
  nnz(P)        = 0
  nnz(A)        = 766
  cones (total) = 1
    : Nonnegative = 1,  numel = 145

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9076e-01  +5.1773e+01  5.13e+01  8.83e-01  9.32e+00  1.00e+00  1.06e+00   ------   
  1  +5.3348e-01  +1.1340e+01  1.08e+01  3.91e-01  5.36e+00  3.82e-03  5.98e-01  5.93e-01  
  2  +4.6839e-01  +1.9404e+00  1.47e+00  8.47e-02  1.57e+00  2.07e-02  2.15e-01  9.90e-01  
  3  +3.8909e-01  +1.1544e+00  7.65e-01  2.69e-02  5.16e-01  1.50e-02  7.77e-02  7.10e-01  
  4  +3.4074e-01  +8.1818e-01  4.77e-01  1.33e-02  2.56e-01  9.33e-03  4.13e-02  5.50e-01  
  5  +2.8663e-01  +4.2849e-01  1.42e-01  3.72e-03  7.04e-02  1.64e-03  1.35e-02  7.61e-01  
  6  +2.6836e-01  +3.5690e-01  8.85e-02  2.16e-03  4.28e-02  1.01e-03  8.23e-03  4.52e-01  
  7  +2.4383e-01  +2.5278e-01  8.95e-03  2.12e-04  4.19e-03  4.91e-05  9.25e-04  9.29e-01  
  8  +2.4075e-01  +2.4091e-01  1.52e-04  3.60e-06  7.10e-05  6.43e-07  1.62e-05  9.84e-01  
  9  +2.4070e-01  +2.4070e-01  3.09e-06  7.39e-08  1.44e-06  1.23e-08  3.36e-07  9.79e-01  
 10  +2.4070e-01  +2.4070e-01  3.09e-08  7.39e-10  1.44e-08  1.23e-10  3.36e-09  9.90e-01  
 11  +2.4070e-01  +2.4070e-01  3.09e-10  7.39e-12  1.44e-10  1.23e-12  3.36e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 832.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:40 PM: Optimal value: 2.407e-01
(CVXPY) Sep 20 07:38:40 PM: Compilation took 4.508e-03 seconds
(CVXPY) Sep 20 07:38:40 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Iteration: 4, Objective: 0.2407
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:40 PM: Your problem has 105 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:40 PM: Finished problem compilation (took 4.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 105
  constraints   = 155
  nnz(P)        = 0
  nnz(A)        = 818
  cones (total) = 1
    : Nonnegative = 1,  numel = 155

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8865e-01  +5.1949e+01  5.15e+01  8.87e-01  9.14e+00  1.00e+00  1.07e+00   ------   
  1  +5.1193e-01  +1.1512e+01  1.10e+01  3.97e-01  5.23e+00  3.87e-03  6.01e-01  5.87e-01  
  2  +4.3540e-01  +2.2011e+00  1.77e+00  9.11e-02  1.62e+00  2.22e-02  2.30e-01  9.47e-01  
  3  +3.3815e-01  +1.0701e+00  7.32e-01  2.46e-02  4.53e-01  1.29e-02  7.19e-02  7.70e-01  
  4  +2.7686e-01  +5.3010e-01  2.53e-01  7.59e-03  1.40e-01  3.07e-03  2.48e-02  7.30e-01  
  5  +2.3877e-01  +3.3698e-01  9.82e-02  2.73e-03  5.08e-02  1.03e-03  1.00e-02  6.89e-01  
  6  +2.2085e-01  +2.5614e-01  3.53e-02  9.22e-04  1.77e-02  3.27e-04  3.68e-03  7.01e-01  
  7  +2.1132e-01  +2.1249e-01  1.17e-03  3.06e-05  5.86e-04  3.91e-06  1.29e-04  9.88e-01  
  8  +2.1096e-01  +2.1112e-01  1.61e-04  4.19e-06  7.96e-05  5.23e-07  1.82e-05  8.74e-01  
  9  +2.1090e-01  +2.1090e-01  2.68e-06  6.94e-08  1.32e-06  9.20e-09  3.06e-07  9.90e-01  
 10  +2.1090e-01  +2.1090e-01  2.68e-08  6.94e-10  1.32e-08  9.20e-11  3.06e-09  9.90e-01  
 11  +2.1090e-01  +2.1090e-01  2.68e-10  6.94e-12  1.32e-10  9.20e-13  3.07e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0088ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:40 PM: Optimal value: 2.109e-01
(CVXPY) Sep 20 07:38:40 PM: Compilation took 4.002e-03 seconds
(CVXPY) Sep 20 07:38:40 PM: Solver (including time spent in interface) took 1.998e-03 seconds
Iteration: 5, Objective: 0.2109
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:40 PM: Your problem has 115 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:40 PM: Finished problem compilation (took 4.513e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 115
  constraints   = 165
  nnz(P)        = 0
  nnz(A)        = 853
  cones (total) = 1
    : Nonnegative = 1,  numel = 165

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8739e-01  +5.2087e+01  5.16e+01  8.90e-01  8.93e+00  1.00e+00  1.07e+00   ------   
  1  +4.9085e-01  +1.1582e+01  1.11e+01  3.97e-01  5.03e+00  3.92e-03  5.99e-01  5.86e-01  
  2  +4.0390e-01  +2.2663e+00  1.86e+00  8.80e-02  1.53e+00  2.32e-02  2.20e-01  9.46e-01  
  3  +3.0707e-01  +1.1033e+00  7.96e-01  2.64e-02  4.73e-01  1.28e-02  7.49e-02  7.26e-01  
  4  +2.5154e-01  +5.2233e-01  2.71e-01  8.56e-03  1.51e-01  3.29e-03  2.76e-02  6.86e-01  
  5  +2.1754e-01  +3.3167e-01  1.14e-01  3.36e-03  5.96e-02  1.03e-03  1.23e-02  7.38e-01  
  6  +1.9416e-01  +2.0511e-01  1.10e-02  3.12e-04  5.46e-03  5.85e-05  1.30e-03  9.25e-01  
  7  +1.9122e-01  +1.9164e-01  4.23e-04  1.21e-05  2.10e-04  1.92e-06  5.22e-05  9.60e-01  
  8  +1.9110e-01  +1.9111e-01  5.68e-06  1.63e-07  2.83e-06  2.03e-08  7.22e-07  9.88e-01  
  9  +1.9110e-01  +1.9110e-01  5.67e-08  1.63e-09  2.83e-08  2.03e-10  7.22e-09  9.90e-01  
 10  +1.9110e-01  +1.9110e-01  5.68e-10  1.64e-11  2.83e-10  2.03e-12  7.22e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 995.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:40 PM: Optimal value: 1.911e-01
(CVXPY) Sep 20 07:38:40 PM: Compilation took 4.513e-03 seconds
(CVXPY) Sep 20 07:38:40 PM: Solver (including time spent in interface) took 2.000e-03 seconds
Iteration: 6, Objective: 0.1911
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:40 PM: Your problem has 125 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:40 PM: Finished problem compilation (took 5.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 125
  constraints   = 175
  nnz(P)        = 0
  nnz(A)        = 886
  cones (total) = 1
    : Nonnegative = 1,  numel = 175

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8597e-01  +5.2079e+01  5.16e+01  8.93e-01  8.73e+00  1.00e+00  1.07e+00   ------   
  1  +4.6623e-01  +1.1657e+01  1.12e+01  3.95e-01  4.86e+00  3.98e-03  5.94e-01  5.84e-01  
  2  +3.6085e-01  +2.6562e+00  2.30e+00  9.35e-02  1.56e+00  2.41e-02  2.29e-01  8.90e-01  
  3  +2.8384e-01  +1.2215e+00  9.38e-01  3.23e-02  5.56e-01  1.12e-02  8.83e-02  6.80e-01  
  4  +2.3433e-01  +5.4688e-01  3.13e-01  1.07e-02  1.80e-01  3.24e-03  3.31e-02  6.70e-01  
  5  +2.0048e-01  +3.3195e-01  1.31e-01  4.25e-03  7.15e-02  1.16e-03  1.47e-02  6.84e-01  
  6  +1.8031e-01  +2.1946e-01  3.92e-02  1.20e-03  2.04e-02  2.69e-04  4.54e-03  8.01e-01  
  7  +1.7170e-01  +1.7327e-01  1.57e-03  4.80e-05  8.10e-04  8.29e-06  1.92e-04  9.60e-01  
  8  +1.7135e-01  +1.7155e-01  1.96e-04  6.09e-06  1.02e-04  8.35e-07  2.56e-05  9.00e-01  
  9  +1.7130e-01  +1.7130e-01  2.53e-06  7.89e-08  1.32e-06  1.01e-08  3.35e-07  9.87e-01  
 10  +1.7130e-01  +1.7130e-01  2.53e-08  7.89e-10  1.32e-08  1.01e-10  3.35e-09  9.90e-01  
 11  +1.7130e-01  +1.7130e-01  2.53e-10  7.89e-12  1.32e-10  1.01e-12  3.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0405ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:40 PM: Optimal value: 1.713e-01
(CVXPY) Sep 20 07:38:40 PM: Compilation took 5.510e-03 seconds
(CVXPY) Sep 20 07:38:40 PM: Solver (including time spent in interface) took 9.980e-04 seconds
Iteration: 7, Objective: 0.1713
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:40 PM: Your problem has 135 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:40 PM: Finished problem compilation (took 4.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 135
  constraints   = 185
  nnz(P)        = 0
  nnz(A)        = 913
  cones (total) = 1
    : Nonnegative = 1,  numel = 185

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8412e-01  +5.2294e+01  5.18e+01  8.96e-01  8.53e+00  1.00e+00  1.07e+00   ------   
  1  +4.3269e-01  +1.1845e+01  1.14e+01  3.92e-01  4.70e+00  4.08e-03  5.92e-01  5.80e-01  
  2  +3.0972e-01  +2.2846e+00  1.97e+00  7.67e-02  1.26e+00  2.52e-02  1.93e-01  9.59e-01  
  3  +2.7319e-01  +1.5346e+00  1.26e+00  4.87e-02  8.04e-01  1.49e-02  1.28e-01  4.24e-01  
  4  +2.2148e-01  +4.9357e-01  2.72e-01  1.00e-02  1.64e-01  2.36e-03  3.02e-02  8.55e-01  
  5  +1.9211e-01  +3.4171e-01  1.50e-01  5.23e-03  8.52e-02  1.10e-03  1.74e-02  6.15e-01  
  6  +1.6934e-01  +2.0713e-01  3.78e-02  1.26e-03  2.05e-02  2.48e-04  4.65e-03  7.66e-01  
  7  +1.6175e-01  +1.6345e-01  1.70e-03  5.67e-05  9.14e-04  8.31e-06  2.21e-04  9.56e-01  
  8  +1.6145e-01  +1.6198e-01  5.31e-04  1.73e-05  2.76e-04  2.15e-06  7.61e-05  7.77e-01  
  9  +1.6131e-01  +1.6134e-01  3.33e-05  1.06e-06  1.69e-05  1.13e-07  4.99e-06  9.54e-01  
 10  +1.6130e-01  +1.6130e-01  3.39e-07  1.08e-08  1.72e-07  1.13e-09  5.10e-08  9.90e-01  
 11  +1.6130e-01  +1.6130e-01  3.39e-09  1.08e-10  1.72e-09  1.13e-11  5.10e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0706ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:40 PM: Optimal value: 1.613e-01
(CVXPY) Sep 20 07:38:40 PM: Compilation took 4.509e-03 seconds
(CVXPY) Sep 20 07:38:40 PM: Solver (including time spent in interface) took 9.992e-04 seconds
Iteration: 8, Objective: 0.1613
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:40 PM: Your problem has 142 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:40 PM: Finished problem compilation (took 4.138e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 142
  constraints   = 192
  nnz(P)        = 0
  nnz(A)        = 936
  cones (total) = 1
    : Nonnegative = 1,  numel = 192

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8368e-01  +5.2355e+01  5.19e+01  8.98e-01  8.41e+00  1.00e+00  1.08e+00   ------   
  1  +4.2422e-01  +1.1873e+01  1.14e+01  3.93e-01  4.62e+00  4.08e-03  5.94e-01  5.79e-01  
  2  +2.8880e-01  +2.5170e+00  2.23e+00  8.29e-02  1.33e+00  2.51e-02  2.09e-01  9.19e-01  
  3  +2.5283e-01  +1.4159e+00  1.16e+00  4.43e-02  7.18e-01  1.28e-02  1.19e-01  4.86e-01  
  4  +2.1588e-01  +5.0419e-01  2.88e-01  1.10e-02  1.76e-01  2.15e-03  3.32e-02  8.98e-01  
  5  +1.8261e-01  +2.8989e-01  1.07e-01  3.91e-03  6.24e-02  7.14e-04  1.31e-02  7.13e-01  
  6  +1.6628e-01  +1.9057e-01  2.43e-02  8.58e-04  1.37e-02  1.27e-04  3.08e-03  8.49e-01  
  7  +1.6176e-01  +1.6348e-01  1.72e-03  6.14e-05  9.72e-04  7.24e-06  2.29e-04  9.26e-01  
  8  +1.6145e-01  +1.6200e-01  5.54e-04  1.91e-05  2.99e-04  2.03e-06  8.18e-05  7.55e-01  
  9  +1.6131e-01  +1.6136e-01  4.86e-05  1.64e-06  2.57e-05  1.55e-07  7.55e-06  9.38e-01  
 10  +1.6130e-01  +1.6130e-01  5.07e-07  1.71e-08  2.68e-07  1.59e-09  7.94e-08  9.90e-01  
 11  +1.6130e-01  +1.6130e-01  5.07e-09  1.71e-10  2.68e-09  1.59e-11  7.95e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0934ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:40 PM: Optimal value: 1.613e-01
(CVXPY) Sep 20 07:38:40 PM: Compilation took 4.138e-03 seconds
(CVXPY) Sep 20 07:38:40 PM: Solver (including time spent in interface) took 2.000e-03 seconds
Iteration: 9, Objective: 0.1613
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:40 PM: Your problem has 143 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:40 PM: Finished problem compilation (took 4.505e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 143
  constraints   = 193
  nnz(P)        = 0
  nnz(A)        = 942
  cones (total) = 1
    : Nonnegative = 1,  numel = 193

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8353e-01  +5.2366e+01  5.19e+01  8.98e-01  8.40e+00  1.00e+00  1.08e+00   ------   
  1  +4.2255e-01  +1.1905e+01  1.15e+01  3.95e-01  4.62e+00  4.08e-03  5.96e-01  5.77e-01  
  2  +2.8468e-01  +2.5661e+00  2.28e+00  8.46e-02  1.35e+00  2.54e-02  2.13e-01  9.13e-01  
  3  +2.4925e-01  +1.4137e+00  1.16e+00  4.45e-02  7.18e-01  1.28e-02  1.19e-01  4.94e-01  
  4  +2.1549e-01  +5.1214e-01  2.97e-01  1.14e-02  1.82e-01  2.25e-03  3.45e-02  8.96e-01  
  5  +1.8243e-01  +2.9140e-01  1.09e-01  4.03e-03  6.39e-02  7.20e-04  1.35e-02  7.27e-01  
  6  +1.6635e-01  +1.9155e-01  2.52e-02  9.01e-04  1.43e-02  1.34e-04  3.24e-03  8.39e-01  
  7  +1.6179e-01  +1.6372e-01  1.94e-03  6.97e-05  1.10e-03  8.41e-06  2.61e-04  9.20e-01  
  8  +1.6145e-01  +1.6203e-01  5.80e-04  2.01e-05  3.14e-04  2.12e-06  8.70e-05  7.79e-01  
  9  +1.6132e-01  +1.6138e-01  6.31e-05  2.13e-06  3.32e-05  2.09e-07  9.88e-06  9.20e-01  
 10  +1.6130e-01  +1.6130e-01  6.67e-07  2.25e-08  3.51e-07  2.14e-09  1.05e-07  9.89e-01  
 11  +1.6130e-01  +1.6130e-01  6.67e-09  2.25e-10  3.51e-09  2.14e-11  1.05e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2261ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:40 PM: Optimal value: 1.613e-01
(CVXPY) Sep 20 07:38:40 PM: Compilation took 4.505e-03 seconds
(CVXPY) Sep 20 07:38:40 PM: Solver (including time spent in interface) took 2.009e-03 seconds
FULL MODEL:
  Accruacy: 0.81
  Our objective: 0.62

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x6 = 1)                       <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0)                                             <-- (term's our objective: 0.1)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 1)                                  <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0)            <-- (term's our objective: 0.04)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1)                       <-- (term's our objective: 0.06)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 0)                                  <-- (term's our objective: 0.06)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1)                                  <-- (term's our objective: 0.1)
 OR (x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1)                                  <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.5585484504699707
Best over terms:
  Our final objective: 0.12
    Its accruacy: 0.56
    Its hamming distance: 5
  Shortest hamming distance: 4
    Its our objective: 0.020000000000000018
  Highest accruacy: 0.56
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

