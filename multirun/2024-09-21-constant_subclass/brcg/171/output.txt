Command:
python test_script.py -s constant_subclass -d 5 -n 100 --seed 56 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.039999999999999994
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 5.

Computed total variation: 0.43999999999999995
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:42 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:42 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 411
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9727e-01  +5.0684e+01  5.02e+01  8.62e-01  8.46e+00  1.00e+00  1.03e+00   ------   
  1  +5.9572e-01  +1.0431e+01  9.84e+00  3.19e-01  4.66e+00  3.98e-03  5.18e-01  6.45e-01  
  2  +5.3132e-01  +1.6095e+00  1.08e+00  7.35e-02  1.27e+00  1.12e-02  1.84e-01  9.23e-01  
  3  +4.9944e-01  +7.1040e-01  2.11e-01  1.68e-02  2.91e-01  4.12e-03  7.63e-02  9.90e-01  
  4  +4.9280e-01  +5.8809e-01  9.53e-02  4.58e-03  8.18e-02  4.17e-03  1.70e-02  8.21e-01  
  5  +4.7596e-01  +5.3152e-01  5.56e-02  1.18e-03  2.15e-02  5.23e-03  4.37e-03  7.74e-01  
  6  +4.6570e-01  +4.8542e-01  1.97e-02  3.43e-04  6.26e-03  1.67e-03  1.42e-03  7.12e-01  
  7  +4.6099e-01  +4.6311e-01  2.13e-03  3.91e-05  7.12e-04  1.67e-05  1.66e-04  9.84e-01  
  8  +4.6011e-01  +4.6013e-01  2.28e-05  4.16e-07  7.57e-06  1.74e-07  1.78e-06  9.89e-01  
  9  +4.6010e-01  +4.6010e-01  2.28e-07  4.16e-09  7.57e-08  1.74e-09  1.78e-08  9.90e-01  
 10  +4.6010e-01  +4.6010e-01  2.28e-09  4.16e-11  7.57e-10  1.75e-11  1.78e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 332.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:42 PM: Optimal value: 4.601e-01
(CVXPY) Sep 20 07:30:42 PM: Compilation took 3.000e-03 seconds
(CVXPY) Sep 20 07:30:42 PM: Solver (including time spent in interface) took 1.018e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4601
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:42 PM: Your problem has 71 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:42 PM: Finished problem compilation (took 2.994e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 533
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9050e-01  +5.1537e+01  5.10e+01  8.70e-01  8.82e+00  1.00e+00  1.07e+00   ------   
  1  +5.6937e-01  +1.0590e+01  1.00e+01  3.33e-01  4.75e+00  3.94e-03  5.41e-01  6.42e-01  
  2  +5.0776e-01  +1.9238e+00  1.42e+00  7.98e-02  1.44e+00  1.30e-02  1.96e-01  8.83e-01  
  3  +4.5244e-01  +1.4630e+00  1.01e+00  3.20e-02  5.95e-01  1.40e-02  9.02e-02  6.35e-01  
  4  +3.8417e-01  +7.7482e-01  3.91e-01  9.22e-03  1.70e-01  6.04e-03  3.10e-02  7.08e-01  
  5  +3.3534e-01  +4.3886e-01  1.04e-01  2.71e-03  4.84e-02  4.17e-05  1.21e-02  8.16e-01  
  6  +3.1215e-01  +3.1945e-01  7.30e-03  1.84e-04  3.28e-03  5.54e-06  1.01e-03  9.32e-01  
  7  +3.1029e-01  +3.1064e-01  3.41e-04  8.57e-06  1.52e-04  2.76e-07  4.92e-05  9.53e-01  
  8  +3.1020e-01  +3.1020e-01  3.64e-06  9.12e-08  1.62e-06  3.46e-09  5.29e-07  9.90e-01  
  9  +3.1020e-01  +3.1020e-01  3.64e-08  9.12e-10  1.62e-08  3.46e-11  5.29e-09  9.90e-01  
 10  +3.1020e-01  +3.1020e-01  3.64e-10  9.12e-12  1.62e-10  3.46e-13  5.30e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 353µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:42 PM: Optimal value: 3.102e-01
(CVXPY) Sep 20 07:30:42 PM: Compilation took 2.994e-03 seconds
(CVXPY) Sep 20 07:30:42 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Iteration: 2, Objective: 0.3102
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:42 PM: Your problem has 81 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:42 PM: Finished problem compilation (took 2.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 131
  nnz(P)        = 0
  nnz(A)        = 586
  cones (total) = 1
    : Nonnegative = 1,  numel = 131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8704e-01  +5.1577e+01  5.11e+01  8.75e-01  8.64e+00  1.00e+00  1.07e+00   ------   
  1  +5.4208e-01  +1.0743e+01  1.02e+01  3.43e-01  4.66e+00  3.95e-03  5.51e-01  6.33e-01  
  2  +4.8278e-01  +2.1192e+00  1.64e+00  8.19e-02  1.44e+00  1.45e-02  2.00e-01  8.71e-01  
  3  +3.9381e-01  +1.2986e+00  9.05e-01  2.56e-02  4.61e-01  1.21e-02  7.26e-02  7.55e-01  
  4  +3.3503e-01  +6.6184e-01  3.27e-01  8.94e-03  1.57e-01  3.20e-03  3.05e-02  6.15e-01  
  5  +3.0854e-01  +4.7047e-01  1.62e-01  4.47e-03  7.71e-02  1.49e-03  1.77e-02  4.77e-01  
  6  +2.8598e-01  +3.1467e-01  2.87e-02  8.04e-04  1.37e-02  2.14e-04  3.86e-03  8.12e-01  
  7  +2.8076e-01  +2.8235e-01  1.58e-03  4.47e-05  7.58e-04  9.70e-06  2.33e-04  9.44e-01  
  8  +2.8044e-01  +2.8063e-01  1.81e-04  5.01e-06  8.51e-05  8.84e-07  2.81e-05  9.06e-01  
  9  +2.8040e-01  +2.8040e-01  3.49e-06  9.64e-08  1.64e-06  1.41e-08  5.48e-07  9.88e-01  
 10  +2.8040e-01  +2.8040e-01  3.49e-08  9.64e-10  1.64e-08  1.41e-10  5.48e-09  9.90e-01  
 11  +2.8040e-01  +2.8040e-01  3.49e-10  9.64e-12  1.64e-10  1.41e-12  5.48e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 449.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:42 PM: Optimal value: 2.804e-01
(CVXPY) Sep 20 07:30:42 PM: Compilation took 2.003e-03 seconds
(CVXPY) Sep 20 07:30:42 PM: Solver (including time spent in interface) took 1.641e-03 seconds
Iteration: 3, Objective: 0.2804
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:42 PM: Your problem has 85 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:42 PM: Finished problem compilation (took 1.932e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 85
  constraints   = 135
  nnz(P)        = 0
  nnz(A)        = 617
  cones (total) = 1
    : Nonnegative = 1,  numel = 135

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8611e-01  +5.1572e+01  5.11e+01  8.77e-01  8.61e+00  1.00e+00  1.07e+00   ------   
  1  +5.3511e-01  +1.0834e+01  1.03e+01  3.50e-01  4.65e+00  3.95e-03  5.58e-01  6.27e-01  
  2  +4.7024e-01  +2.0680e+00  1.60e+00  7.98e-02  1.38e+00  1.52e-02  1.99e-01  8.88e-01  
  3  +3.8802e-01  +1.2649e+00  8.77e-01  2.64e-02  4.68e-01  1.11e-02  7.72e-02  7.51e-01  
  4  +3.3237e-01  +6.5679e-01  3.24e-01  9.08e-03  1.58e-01  3.27e-03  3.15e-02  6.15e-01  
  5  +3.0866e-01  +4.8085e-01  1.72e-01  4.82e-03  8.26e-02  1.65e-03  1.90e-02  4.58e-01  
  6  +2.8590e-01  +3.1576e-01  2.99e-02  8.54e-04  1.44e-02  2.36e-04  3.99e-03  8.15e-01  
  7  +2.8105e-01  +2.8411e-01  3.06e-03  8.84e-05  1.49e-03  2.17e-05  4.39e-04  8.97e-01  
  8  +2.8051e-01  +2.8093e-01  4.12e-04  1.18e-05  1.98e-04  1.05e-06  6.49e-05  9.78e-01  
  9  +2.8041e-01  +2.8044e-01  2.95e-05  8.30e-07  1.40e-05  7.58e-08  4.80e-06  9.40e-01  
 10  +2.8040e-01  +2.8040e-01  2.98e-07  8.39e-09  1.41e-07  7.65e-10  4.86e-08  9.90e-01  
 11  +2.8040e-01  +2.8040e-01  2.98e-09  8.39e-11  1.42e-09  7.65e-12  4.86e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 482.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:42 PM: Optimal value: 2.804e-01
(CVXPY) Sep 20 07:30:42 PM: Compilation took 1.932e-03 seconds
(CVXPY) Sep 20 07:30:42 PM: Solver (including time spent in interface) took 1.612e-03 seconds
FULL MODEL:
  Accruacy: 0.72
  Our objective: 0.43999999999999995

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x2 = 0 AND x4 = 0)                       <-- (term's our objective: 0.16)
 OR (x0 = 1 AND x1 = 0 AND x4 = 1)                       <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1)                       <-- (term's our objective: 0.12)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.04)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.2695586681365967
Best over terms:
  Our final objective: 0.15999999999999998
    Its accruacy: 0.58
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.15999999999999998
  Highest accruacy: 0.58
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

