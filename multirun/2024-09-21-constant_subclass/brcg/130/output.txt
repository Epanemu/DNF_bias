Command:
python test_script.py -s constant_subclass -d 4 -n 100 --seed 43 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.060000000000000005
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 4.

Computed total variation: 0.26
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:35 PM: Your problem has 59 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:35 PM: Finished problem compilation (took 5.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 59
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 359
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9684e-01  +5.0748e+01  5.03e+01  8.58e-01  7.84e+00  1.00e+00  1.03e+00   ------   
  1  +6.0355e-01  +1.0113e+01  9.51e+00  2.95e-01  4.13e+00  4.09e-03  4.87e-01  6.68e-01  
  2  +5.3527e-01  +1.6642e+00  1.13e+00  7.13e-02  1.16e+00  9.39e-03  1.75e-01  8.71e-01  
  3  +4.9880e-01  +7.1993e-01  2.21e-01  1.65e-02  2.67e-01  5.03e-03  7.03e-02  9.90e-01  
  4  +4.8767e-01  +6.1106e-01  1.23e-01  4.48e-03  7.54e-02  7.12e-03  1.58e-02  8.06e-01  
  5  +4.6664e-01  +5.2948e-01  6.28e-02  1.22e-03  2.07e-02  5.38e-03  4.67e-03  7.65e-01  
  6  +4.5372e-01  +4.6357e-01  9.84e-03  1.92e-04  3.26e-03  5.11e-05  8.39e-04  9.35e-01  
  7  +4.5017e-01  +4.5037e-01  1.98e-04  3.75e-06  6.36e-05  9.03e-07  1.68e-05  9.80e-01  
  8  +4.5010e-01  +4.5010e-01  1.98e-06  3.75e-08  6.36e-07  9.03e-09  1.68e-07  9.90e-01  
  9  +4.5010e-01  +4.5010e-01  1.98e-08  3.75e-10  6.36e-09  9.03e-11  1.68e-09  9.90e-01  
 10  +4.5010e-01  +4.5010e-01  1.98e-10  3.75e-12  6.36e-11  9.03e-13  1.68e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 379.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:35 PM: Optimal value: 4.501e-01
(CVXPY) Sep 20 07:28:35 PM: Compilation took 5.007e-03 seconds
(CVXPY) Sep 20 07:28:35 PM: Solver (including time spent in interface) took 1.514e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:35 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:35 PM: Finished problem compilation (took 3.955e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 455
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9293e-01  +5.1422e+01  5.09e+01  8.65e-01  8.02e+00  1.00e+00  1.06e+00   ------   
  1  +5.8394e-01  +1.0307e+01  9.72e+00  3.11e-01  4.15e+00  4.04e-03  5.10e-01  6.62e-01  
  2  +5.2158e-01  +1.6631e+00  1.14e+00  6.56e-02  1.10e+00  1.08e-02  1.64e-01  9.09e-01  
  3  +4.9997e-01  +1.6978e+00  1.20e+00  4.28e-02  7.30e-01  1.45e-02  1.13e-01  4.53e-01  
  4  +4.5150e-01  +1.0307e+00  5.79e-01  1.60e-02  2.75e-01  7.76e-03  5.10e-02  5.84e-01  
  5  +4.1194e-01  +5.9314e-01  1.81e-01  5.26e-03  8.83e-02  1.93e-03  2.14e-02  6.72e-01  
  6  +3.9471e-01  +4.3595e-01  4.12e-02  1.18e-03  1.98e-02  4.55e-04  5.27e-03  7.97e-01  
  7  +3.9351e-01  +4.4247e-01  4.90e-02  9.53e-04  1.62e-02  6.41e-04  3.77e-03  4.92e-01  
  8  +3.9005e-01  +4.1941e-01  2.94e-02  6.74e-04  1.14e-02  1.61e-04  2.76e-03  6.74e-01  
  9  +3.8220e-01  +3.8887e-01  6.67e-03  1.30e-04  2.21e-03  3.64e-05  5.54e-04  8.14e-01  
 10  +3.8036e-01  +3.8084e-01  4.75e-04  9.29e-06  1.57e-04  2.31e-06  4.06e-05  9.28e-01  
 11  +3.8021e-01  +3.8022e-01  1.27e-05  2.48e-07  4.19e-06  4.10e-08  1.14e-06  9.82e-01  
 12  +3.8020e-01  +3.8020e-01  1.27e-07  2.48e-09  4.19e-08  4.10e-10  1.15e-08  9.90e-01  
 13  +3.8020e-01  +3.8020e-01  1.27e-09  2.48e-11  4.19e-10  4.10e-12  1.15e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 501µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:35 PM: Optimal value: 3.802e-01
(CVXPY) Sep 20 07:28:35 PM: Compilation took 3.955e-03 seconds
(CVXPY) Sep 20 07:28:35 PM: Solver (including time spent in interface) took 9.696e-04 seconds
Iteration: 2, Objective: 0.3802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:35 PM: Your problem has 70 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:35 PM: Finished problem compilation (took 3.476e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 70
  constraints   = 120
  nnz(P)        = 0
  nnz(A)        = 470
  cones (total) = 1
    : Nonnegative = 1,  numel = 120

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9269e-01  +5.1397e+01  5.09e+01  8.67e-01  8.09e+00  1.00e+00  1.07e+00   ------   
  1  +5.8218e-01  +1.0358e+01  9.78e+00  3.17e-01  4.22e+00  4.01e-03  5.21e-01  6.57e-01  
  2  +5.2100e-01  +1.7062e+00  1.19e+00  6.89e-02  1.15e+00  1.12e-02  1.72e-01  9.04e-01  
  3  +4.9578e-01  +1.6122e+00  1.12e+00  4.08e-02  6.93e-01  1.41e-02  1.10e-01  4.80e-01  
  4  +4.4580e-01  +9.6628e-01  5.20e-01  1.44e-02  2.47e-01  7.30e-03  4.71e-02  6.07e-01  
  5  +4.0957e-01  +5.8585e-01  1.76e-01  5.08e-03  8.52e-02  2.14e-03  2.02e-02  6.39e-01  
  6  +3.9815e-01  +5.1886e-01  1.21e-01  2.68e-03  4.54e-02  1.82e-03  1.07e-02  5.81e-01  
  7  +3.8639e-01  +4.3866e-01  5.23e-02  1.33e-03  2.23e-02  2.34e-05  5.92e-03  9.90e-01  
  8  +3.7310e-01  +3.8302e-01  9.92e-03  2.22e-04  3.72e-03  7.83e-06  1.07e-03  8.37e-01  
  9  +3.7035e-01  +3.7052e-01  1.66e-04  3.69e-06  6.19e-05  1.02e-07  1.86e-05  9.83e-01  
 10  +3.7030e-01  +3.7030e-01  2.25e-06  5.01e-08  8.37e-07  1.03e-09  2.63e-07  9.86e-01  
 11  +3.7030e-01  +3.7030e-01  2.25e-08  5.00e-10  8.36e-09  1.03e-11  2.63e-09  9.90e-01  
 12  +3.7030e-01  +3.7030e-01  2.25e-10  5.00e-12  8.36e-11  1.03e-13  2.63e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 483.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:35 PM: Optimal value: 3.703e-01
(CVXPY) Sep 20 07:28:35 PM: Compilation took 3.476e-03 seconds
(CVXPY) Sep 20 07:28:35 PM: Solver (including time spent in interface) took 9.921e-04 seconds
Iteration: 3, Objective: 0.3703
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:35 PM: Your problem has 73 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:35 PM: Finished problem compilation (took 3.991e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 73
  constraints   = 123
  nnz(P)        = 0
  nnz(A)        = 491
  cones (total) = 1
    : Nonnegative = 1,  numel = 123

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9227e-01  +5.1468e+01  5.10e+01  8.69e-01  8.06e+00  1.00e+00  1.07e+00   ------   
  1  +5.7884e-01  +1.0433e+01  9.85e+00  3.22e-01  4.21e+00  4.00e-03  5.29e-01  6.53e-01  
  2  +5.1935e-01  +1.7336e+00  1.21e+00  7.03e-02  1.17e+00  1.15e-02  1.77e-01  9.03e-01  
  3  +4.9074e-01  +1.5752e+00  1.08e+00  3.94e-02  6.66e-01  1.39e-02  1.08e-01  5.23e-01  
  4  +4.4191e-01  +9.3360e-01  4.92e-01  1.39e-02  2.37e-01  6.84e-03  4.56e-02  6.06e-01  
  5  +4.1099e-01  +6.1527e-01  2.04e-01  5.75e-03  9.61e-02  2.65e-03  2.20e-02  5.93e-01  
  6  +3.9973e-01  +5.4690e-01  1.47e-01  3.45e-03  5.80e-02  2.14e-03  1.34e-02  4.60e-01  
  7  +3.8380e-01  +4.3478e-01  5.10e-02  1.28e-03  2.12e-02  1.62e-04  5.50e-03  9.90e-01  
  8  +3.7149e-01  +3.7594e-01  4.45e-03  1.07e-04  1.77e-03  1.05e-05  4.96e-04  9.17e-01  
  9  +3.7046e-01  +3.7101e-01  5.46e-04  1.32e-05  2.18e-04  1.21e-06  6.30e-05  8.78e-01  
 10  +3.7031e-01  +3.7033e-01  2.32e-05  5.61e-07  9.30e-06  5.87e-08  2.82e-06  9.77e-01  
 11  +3.7030e-01  +3.7030e-01  2.34e-07  5.67e-09  9.38e-08  5.88e-10  2.87e-08  9.90e-01  
 12  +3.7030e-01  +3.7030e-01  2.34e-09  5.67e-11  9.38e-10  5.88e-12  2.87e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 503µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:35 PM: Optimal value: 3.703e-01
(CVXPY) Sep 20 07:28:35 PM: Compilation took 3.991e-03 seconds
(CVXPY) Sep 20 07:28:35 PM: Solver (including time spent in interface) took 1.009e-03 seconds
Iteration: 4, Objective: 0.3703
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:36 PM: Your problem has 75 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:36 PM: Finished problem compilation (took 2.989e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 125
  nnz(P)        = 0
  nnz(A)        = 505
  cones (total) = 1
    : Nonnegative = 1,  numel = 125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9208e-01  +5.1480e+01  5.10e+01  8.70e-01  8.05e+00  1.00e+00  1.08e+00   ------   
  1  +5.7634e-01  +1.0485e+01  9.91e+00  3.26e-01  4.21e+00  3.99e-03  5.33e-01  6.50e-01  
  2  +5.1690e-01  +1.7550e+00  1.24e+00  7.14e-02  1.18e+00  1.18e-02  1.81e-01  9.02e-01  
  3  +4.8495e-01  +1.5343e+00  1.05e+00  3.82e-02  6.42e-01  1.34e-02  1.06e-01  5.54e-01  
  4  +4.3667e-01  +8.6578e-01  4.29e-01  1.27e-02  2.14e-01  5.59e-03  4.28e-02  6.27e-01  
  5  +4.1234e-01  +6.4107e-01  2.29e-01  6.35e-03  1.06e-01  3.13e-03  2.39e-02  5.00e-01  
  6  +3.9825e-01  +5.4307e-01  1.45e-01  3.39e-03  5.67e-02  2.24e-03  1.32e-02  5.05e-01  
  7  +3.8302e-01  +4.3184e-01  4.88e-02  1.23e-03  2.04e-02  1.71e-04  5.33e-03  9.90e-01  
  8  +3.7135e-01  +3.7523e-01  3.88e-03  9.40e-05  1.56e-03  1.00e-05  4.37e-04  9.24e-01  
  9  +3.7054e-01  +3.7134e-01  7.98e-04  1.94e-05  3.21e-04  2.04e-06  9.30e-05  8.06e-01  
 10  +3.7032e-01  +3.7039e-01  6.96e-05  1.70e-06  2.80e-05  2.33e-07  8.60e-06  9.85e-01  
 11  +3.7030e-01  +3.7030e-01  7.47e-07  1.83e-08  3.01e-07  2.38e-09  9.35e-08  9.89e-01  
 12  +3.7030e-01  +3.7030e-01  7.47e-09  1.83e-10  3.01e-09  2.38e-11  9.35e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 509.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:36 PM: Optimal value: 3.703e-01
(CVXPY) Sep 20 07:28:36 PM: Compilation took 2.989e-03 seconds
(CVXPY) Sep 20 07:28:36 PM: Solver (including time spent in interface) took 1.194e-03 seconds
FULL MODEL:
  Accruacy: 0.62
  Our objective: 0.24

IF 
    (x0 = 0 AND x1 = 0)            <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1) <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.1411921977996826
Best over terms:
  Our final objective: 0.12000000000000005
    Its accruacy: 0.56
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.12000000000000005
  Highest accruacy: 0.56
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

