Command:
python test_script.py -s constant_subclass -d 7 -n 1000 --seed 73 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.022
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 7.

Computed total variation: 0.258
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:33 PM: Your problem has 515 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:33 PM: Finished problem compilation (took 6.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 515
  constraints   = 1015
  nnz(P)        = 0
  nnz(A)        = 5015
  cones (total) = 1
    : Nonnegative = 1,  numel = 1015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9992e-01  +5.0076e+02  5.00e+02  9.54e-01  3.25e+01  1.00e+00  1.00e+00   ------   
  1  +5.8782e-01  +1.0547e+02  1.05e+02  3.89e-01  2.00e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3670e-01  +1.3245e+01  1.27e+01  1.34e-01  8.71e+00  1.33e-02  2.49e-01  8.81e-01  
  3  +5.0622e-01  +3.0860e+00  2.58e+00  5.28e-02  3.29e+00  2.93e-05  2.30e-01  3.21e-01  
  4  +5.0047e-01  +7.2982e-01  2.29e-01  5.04e-03  3.30e-01  9.37e-06  6.56e-02  8.66e-01  
  5  +4.9999e-01  +6.4483e-01  1.45e-01  3.00e-03  1.97e-01  1.24e-05  2.01e-02  7.62e-01  
  6  +4.9396e-01  +6.1967e-01  1.26e-01  4.49e-04  3.00e-02  1.23e-04  1.42e-03  9.44e-01  
  7  +4.8157e-01  +5.3805e-01  5.65e-02  1.54e-04  1.03e-02  3.96e-05  5.35e-04  7.49e-01  
  8  +4.7326e-01  +5.0242e-01  2.92e-02  6.79e-05  4.52e-03  1.83e-05  2.62e-04  5.60e-01  
  9  +4.6605e-01  +4.7201e-01  5.96e-03  1.24e-05  8.27e-04  2.22e-06  5.30e-05  9.90e-01  
 10  +4.6414e-01  +4.6427e-01  1.28e-04  2.64e-07  1.75e-05  4.55e-08  1.15e-06  9.83e-01  
 11  +4.6410e-01  +4.6410e-01  1.28e-06  2.64e-09  1.75e-07  4.55e-10  1.15e-08  9.90e-01  
 12  +4.6410e-01  +4.6410e-01  1.28e-08  2.64e-11  1.75e-09  4.55e-12  1.15e-10  9.90e-01  
 13  +4.6410e-01  +4.6410e-01  1.28e-10  2.64e-13  1.76e-11  4.56e-14  1.16e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.0655ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:33 PM: Optimal value: 4.641e-01
(CVXPY) Sep 20 07:39:33 PM: Compilation took 6.510e-03 seconds
(CVXPY) Sep 20 07:39:33 PM: Solver (including time spent in interface) took 6.007e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4641
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:33 PM: Your problem has 525 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:33 PM: Finished problem compilation (took 4.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 525
  constraints   = 1025
  nnz(P)        = 0
  nnz(A)        = 5752
  cones (total) = 1
    : Nonnegative = 1,  numel = 1025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9979e-01  +5.0125e+02  5.01e+02  9.55e-01  3.32e+01  1.00e+00  1.01e+00   ------   
  1  +5.8698e-01  +1.0567e+02  1.05e+02  3.91e-01  2.04e+01  3.86e-03  5.49e-01  6.10e-01  
  2  +5.3564e-01  +1.3037e+01  1.25e+01  1.33e-01  8.71e+00  1.35e-02  2.47e-01  8.92e-01  
  3  +5.0583e-01  +3.0060e+00  2.50e+00  5.15e-02  3.27e+00  2.97e-05  2.25e-01  3.60e-01  
  4  +5.0141e-01  +1.1359e+00  6.34e-01  1.39e-02  9.19e-01  1.28e-05  1.21e-01  5.40e-01  
  5  +5.0050e-01  +8.3584e-01  3.35e-01  7.26e-03  4.83e-01  1.12e-05  5.57e-02  6.57e-01  
  6  +4.9909e-01  +7.2111e-01  2.22e-01  3.25e-03  2.20e-01  2.26e-05  1.24e-02  8.11e-01  
  7  +4.9227e-01  +6.5780e-01  1.66e-01  7.24e-04  4.97e-02  7.53e-05  2.27e-03  8.24e-01  
  8  +4.8463e-01  +5.9752e-01  1.13e-01  3.63e-04  2.48e-02  5.94e-05  1.13e-03  6.17e-01  
  9  +4.8271e-01  +5.9741e-01  1.15e-01  2.91e-04  2.01e-02  5.69e-05  8.87e-04  6.74e-01  
 10  +4.7280e-01  +5.5599e-01  8.32e-02  1.61e-04  1.11e-02  4.64e-05  5.00e-04  6.60e-01  
 11  +4.6001e-01  +4.9728e-01  3.73e-02  7.00e-05  4.81e-03  1.82e-05  2.27e-04  9.90e-01  
 12  +4.4722e-01  +4.4969e-01  2.47e-03  4.33e-06  2.98e-04  8.37e-07  1.47e-05  9.85e-01  
 13  +4.4621e-01  +4.4624e-01  2.60e-05  4.53e-08  3.11e-06  8.62e-09  1.54e-07  9.90e-01  
 14  +4.4620e-01  +4.4620e-01  2.60e-07  4.53e-10  3.11e-08  8.62e-11  1.54e-09  9.90e-01  
 15  +4.4620e-01  +4.4620e-01  2.60e-09  4.53e-12  3.11e-10  8.63e-13  1.55e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.0271ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:33 PM: Optimal value: 4.462e-01
(CVXPY) Sep 20 07:39:33 PM: Compilation took 4.003e-03 seconds
(CVXPY) Sep 20 07:39:33 PM: Solver (including time spent in interface) took 7.509e-03 seconds
Iteration: 2, Objective: 0.4462
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:33 PM: Your problem has 535 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:33 PM: Finished problem compilation (took 5.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 535
  constraints   = 1035
  nnz(P)        = 0
  nnz(A)        = 6248
  cones (total) = 1
    : Nonnegative = 1,  numel = 1035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9970e-01  +5.0133e+02  5.01e+02  9.55e-01  3.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.8560e-01  +1.0581e+02  1.05e+02  3.93e-01  2.04e+01  3.85e-03  5.50e-01  6.09e-01  
  2  +5.3459e-01  +1.2828e+01  1.23e+01  1.31e-01  8.58e+00  1.37e-02  2.44e-01  9.05e-01  
  3  +5.0551e-01  +2.9444e+00  2.44e+00  5.04e-02  3.23e+00  3.04e-05  2.18e-01  3.99e-01  
  4  +5.0145e-01  +1.1902e+00  6.89e-01  1.51e-02  1.00e+00  1.36e-05  1.16e-01  5.31e-01  
  5  +4.9981e-01  +7.8170e-01  2.82e-01  5.52e-03  3.72e-01  1.84e-05  2.69e-02  9.58e-01  
  6  +4.9272e-01  +7.4765e-01  2.55e-01  1.29e-03  8.93e-02  9.62e-05  3.91e-03  8.73e-01  
  7  +4.8938e-01  +7.3118e-01  2.42e-01  9.54e-04  6.60e-02  1.06e-04  2.84e-03  3.81e-01  
  8  +4.8452e-01  +7.0453e-01  2.20e-01  6.88e-04  4.76e-02  1.11e-04  2.06e-03  3.45e-01  
  9  +4.7392e-01  +6.3299e-01  1.59e-01  4.36e-04  3.01e-02  4.99e-05  1.36e-03  9.90e-01  
 10  +4.6107e-01  +5.7285e-01  1.12e-01  2.64e-04  1.82e-02  3.74e-05  8.56e-04  4.59e-01  
 11  +4.4073e-01  +4.7764e-01  3.69e-02  7.85e-05  5.39e-03  1.35e-05  2.74e-04  8.74e-01  
 12  +4.3494e-01  +4.5333e-01  1.84e-02  3.58e-05  2.46e-03  9.65e-06  1.27e-04  8.57e-01  
 13  +4.3342e-01  +4.4652e-01  1.31e-02  2.67e-05  1.84e-03  6.90e-06  9.96e-05  9.90e-01  
 14  +4.3195e-01  +4.4123e-01  9.28e-03  1.84e-05  1.26e-03  5.30e-06  6.70e-05  5.81e-01  
 15  +4.2942e-01  +4.3225e-01  2.84e-03  5.43e-06  3.72e-04  1.61e-06  2.01e-05  7.53e-01  
 16  +4.2851e-01  +4.2880e-01  2.88e-04  5.49e-07  3.76e-05  1.51e-07  2.09e-06  9.02e-01  
 17  +4.2840e-01  +4.2841e-01  6.00e-06  1.13e-08  7.75e-07  2.54e-09  4.49e-08  9.86e-01  
 18  +4.2840e-01  +4.2840e-01  5.99e-08  1.13e-10  7.74e-09  2.54e-11  4.49e-10  9.90e-01  
 19  +4.2840e-01  +4.2840e-01  5.99e-10  1.13e-12  7.74e-11  2.54e-13  4.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.4706ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:33 PM: Optimal value: 4.284e-01
(CVXPY) Sep 20 07:39:33 PM: Compilation took 5.004e-03 seconds
(CVXPY) Sep 20 07:39:33 PM: Solver (including time spent in interface) took 8.512e-03 seconds
Iteration: 3, Objective: 0.4284
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:33 PM: Your problem has 545 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:33 PM: Finished problem compilation (took 5.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 545
  constraints   = 1045
  nnz(P)        = 0
  nnz(A)        = 6510
  cones (total) = 1
    : Nonnegative = 1,  numel = 1045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9968e-01  +5.0140e+02  5.01e+02  9.55e-01  3.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.8472e-01  +1.0591e+02  1.05e+02  3.95e-01  2.04e+01  3.85e-03  5.51e-01  6.09e-01  
  2  +5.3391e-01  +1.2687e+01  1.22e+01  1.30e-01  8.44e+00  1.38e-02  2.41e-01  9.12e-01  
  3  +5.0535e-01  +2.9136e+00  2.41e+00  4.99e-02  3.19e+00  3.10e-05  2.14e-01  4.23e-01  
  4  +5.0159e-01  +1.2819e+00  7.80e-01  1.71e-02  1.13e+00  1.50e-05  1.19e-01  4.96e-01  
  5  +5.0037e-01  +1.1116e+00  6.11e-01  1.17e-02  7.85e-01  2.55e-05  5.15e-02  7.36e-01  
  6  +4.9152e-01  +9.9060e-01  4.99e-01  2.25e-03  1.55e-01  1.17e-04  6.90e-03  9.62e-01  
  7  +4.8632e-01  +8.9738e-01  4.11e-01  1.53e-03  1.05e-01  1.10e-04  4.66e-03  4.78e-01  
  8  +4.7850e-01  +8.0501e-01  3.27e-01  9.25e-04  6.38e-02  1.10e-04  2.82e-03  5.82e-01  
  9  +4.7361e-01  +7.3391e-01  2.60e-01  8.00e-04  5.50e-02  7.83e-05  2.53e-03  4.42e-01  
 10  +4.5260e-01  +6.0424e-01  1.52e-01  3.63e-04  2.49e-02  5.12e-05  1.21e-03  5.65e-01  
 11  +4.4891e-01  +5.8227e-01  1.33e-01  3.11e-04  2.13e-02  5.01e-05  1.06e-03  3.65e-01  
 12  +4.3063e-01  +4.8589e-01  5.53e-02  1.22e-04  8.31e-03  1.95e-05  4.58e-04  6.79e-01  
 13  +4.1885e-01  +4.2871e-01  9.86e-03  2.10e-05  1.43e-03  4.34e-06  8.75e-05  9.90e-01  
 14  +4.1566e-01  +4.1584e-01  1.77e-04  3.73e-07  2.54e-05  6.18e-08  1.64e-06  9.84e-01  
 15  +4.1560e-01  +4.1560e-01  1.77e-06  3.72e-09  2.54e-07  6.17e-10  1.64e-08  9.90e-01  
 16  +4.1560e-01  +4.1560e-01  1.77e-08  3.72e-11  2.54e-09  6.17e-12  1.64e-10  9.90e-01  
 17  +4.1560e-01  +4.1560e-01  1.77e-10  3.72e-13  2.54e-11  6.18e-14  1.64e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.1352ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:33 PM: Optimal value: 4.156e-01
(CVXPY) Sep 20 07:39:33 PM: Compilation took 5.001e-03 seconds
(CVXPY) Sep 20 07:39:33 PM: Solver (including time spent in interface) took 8.101e-03 seconds
Iteration: 4, Objective: 0.4156
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:34 PM: Your problem has 555 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:34 PM: Finished problem compilation (took 5.263e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 555
  constraints   = 1055
  nnz(P)        = 0
  nnz(A)        = 6715
  cones (total) = 1
    : Nonnegative = 1,  numel = 1055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9963e-01  +5.0128e+02  5.01e+02  9.55e-01  3.33e+01  1.00e+00  1.01e+00   ------   
  1  +5.8363e-01  +1.0608e+02  1.06e+02  3.97e-01  2.03e+01  3.85e-03  5.52e-01  6.08e-01  
  2  +5.3323e-01  +1.2563e+01  1.20e+01  1.28e-01  8.32e+00  1.40e-02  2.40e-01  9.21e-01  
  3  +5.0523e-01  +2.8945e+00  2.39e+00  4.97e-02  3.17e+00  3.18e-05  2.10e-01  4.46e-01  
  4  +5.0149e-01  +1.2629e+00  7.61e-01  1.68e-02  1.11e+00  1.52e-05  1.11e-01  5.19e-01  
  5  +4.9965e-01  +1.1904e+00  6.91e-01  1.03e-02  6.97e-01  4.12e-05  3.60e-02  9.01e-01  
  6  +4.8728e-01  +9.4355e-01  4.56e-01  1.66e-03  1.15e-01  1.46e-04  4.96e-03  8.96e-01  
  7  +4.8024e-01  +8.9514e-01  4.15e-01  1.21e-03  8.32e-02  1.56e-04  3.60e-03  3.38e-01  
  8  +4.7038e-01  +7.4707e-01  2.77e-01  8.57e-04  5.87e-02  7.83e-05  2.73e-03  7.37e-01  
  9  +4.4317e-01  +5.6713e-01  1.24e-01  3.09e-04  2.10e-02  3.57e-05  1.08e-03  7.04e-01  
 10  +4.3832e-01  +5.4411e-01  1.06e-01  2.52e-04  1.72e-02  3.20e-05  9.05e-04  2.18e-01  
 11  +4.3002e-01  +5.0028e-01  7.03e-02  1.64e-04  1.12e-02  2.55e-05  6.24e-04  5.78e-01  
 12  +4.1475e-01  +4.2465e-01  9.90e-03  2.23e-05  1.52e-03  3.28e-06  9.65e-05  9.55e-01  
 13  +4.1190e-01  +4.1221e-01  3.11e-04  6.94e-07  4.72e-05  1.01e-07  3.19e-06  9.90e-01  
 14  +4.1180e-01  +4.1180e-01  3.11e-06  6.95e-09  4.73e-07  1.01e-09  3.21e-08  9.90e-01  
 15  +4.1180e-01  +4.1180e-01  3.12e-08  6.96e-11  4.73e-09  1.01e-11  3.21e-10  9.90e-01  
 16  +4.1180e-01  +4.1180e-01  3.12e-10  6.96e-13  4.73e-11  1.01e-13  3.22e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.3757ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:34 PM: Optimal value: 4.118e-01
(CVXPY) Sep 20 07:39:34 PM: Compilation took 5.263e-03 seconds
(CVXPY) Sep 20 07:39:34 PM: Solver (including time spent in interface) took 8.507e-03 seconds
Iteration: 5, Objective: 0.4118
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:34 PM: Your problem has 565 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:34 PM: Finished problem compilation (took 5.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 565
  constraints   = 1065
  nnz(P)        = 0
  nnz(A)        = 7044
  cones (total) = 1
    : Nonnegative = 1,  numel = 1065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0130e+02  5.01e+02  9.55e-01  3.33e+01  1.00e+00  1.01e+00   ------   
  1  +5.8294e-01  +1.0611e+02  1.06e+02  3.98e-01  2.02e+01  3.86e-03  5.52e-01  6.08e-01  
  2  +5.3275e-01  +1.2461e+01  1.19e+01  1.27e-01  8.17e+00  1.41e-02  2.37e-01  9.26e-01  
  3  +5.0505e-01  +2.8561e+00  2.35e+00  4.90e-02  3.13e+00  3.21e-05  2.05e-01  4.71e-01  
  4  +5.0094e-01  +1.0603e+00  5.59e-01  1.24e-02  8.21e-01  1.35e-05  8.31e-02  6.48e-01  
  5  +4.9431e-01  +1.3144e+00  8.20e-01  4.79e-03  3.30e-01  9.75e-05  1.41e-02  9.44e-01  
  6  +4.8073e-01  +1.0036e+00  5.23e-01  1.79e-03  1.24e-01  1.08e-04  5.35e-03  6.53e-01  
  7  +4.7455e-01  +9.4993e-01  4.75e-01  1.36e-03  9.34e-02  1.19e-04  4.05e-03  3.23e-01  
  8  +4.7320e-01  +8.4333e-01  3.70e-01  1.24e-03  8.56e-02  8.59e-05  3.92e-03  2.95e-01  
  9  +4.5038e-01  +6.4936e-01  1.99e-01  5.20e-04  3.55e-02  5.96e-05  1.72e-03  7.18e-01  
 10  +4.3827e-01  +5.6947e-01  1.31e-01  3.22e-04  2.20e-02  4.92e-05  1.13e-03  7.22e-01  
 11  +4.2464e-01  +4.9749e-01  7.29e-02  1.69e-04  1.15e-02  2.78e-05  6.31e-04  6.31e-01  
 12  +4.1019e-01  +4.2598e-01  1.58e-02  3.47e-05  2.37e-03  5.91e-06  1.42e-04  8.44e-01  
 13  +4.0786e-01  +4.1528e-01  7.42e-03  1.62e-05  1.11e-03  3.02e-06  6.77e-05  8.11e-01  
 14  +4.0567e-01  +4.0604e-01  3.73e-04  8.10e-07  5.52e-05  1.60e-07  3.43e-06  9.56e-01  
 15  +4.0555e-01  +4.0555e-01  3.74e-06  8.12e-09  5.54e-07  1.60e-09  3.44e-08  9.90e-01  
 16  +4.0555e-01  +4.0555e-01  3.74e-08  8.12e-11  5.54e-09  1.60e-11  3.44e-10  9.90e-01  
 17  +4.0555e-01  +4.0555e-01  3.74e-10  8.12e-13  5.54e-11  1.60e-13  3.44e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.372ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:34 PM: Optimal value: 4.056e-01
(CVXPY) Sep 20 07:39:34 PM: Compilation took 5.508e-03 seconds
(CVXPY) Sep 20 07:39:34 PM: Solver (including time spent in interface) took 9.507e-03 seconds
Iteration: 6, Objective: 0.4056
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:34 PM: Your problem has 575 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:34 PM: Finished problem compilation (took 5.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 575
  constraints   = 1075
  nnz(P)        = 0
  nnz(A)        = 7213
  cones (total) = 1
    : Nonnegative = 1,  numel = 1075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0132e+02  5.01e+02  9.56e-01  3.32e+01  1.00e+00  1.01e+00   ------   
  1  +5.8225e-01  +1.0611e+02  1.06e+02  3.99e-01  2.01e+01  3.86e-03  5.51e-01  6.08e-01  
  2  +5.3236e-01  +1.2373e+01  1.18e+01  1.26e-01  8.03e+00  1.41e-02  2.35e-01  9.30e-01  
  3  +5.0492e-01  +2.8308e+00  2.33e+00  4.86e-02  3.09e+00  3.24e-05  2.02e-01  4.87e-01  
  4  +5.0080e-01  +1.0299e+00  5.29e-01  1.17e-02  7.74e-01  1.35e-05  7.54e-02  6.76e-01  
  5  +4.9264e-01  +1.4090e+00  9.16e-01  4.57e-03  3.15e-01  1.15e-04  1.31e-02  9.33e-01  
  6  +4.7757e-01  +1.0389e+00  5.61e-01  1.84e-03  1.27e-01  1.06e-04  5.44e-03  6.16e-01  
  7  +4.6993e-01  +9.7993e-01  5.10e-01  1.39e-03  9.51e-02  1.15e-04  4.12e-03  2.86e-01  
  8  +4.6746e-01  +8.5936e-01  3.92e-01  1.13e-03  7.71e-02  1.13e-04  3.42e-03  5.05e-01  
  9  +4.3658e-01  +6.0120e-01  1.65e-01  3.91e-04  2.66e-02  4.67e-05  1.32e-03  7.19e-01  
 10  +4.2316e-01  +5.2421e-01  1.01e-01  2.31e-04  1.56e-02  3.46e-05  8.37e-04  5.45e-01  
 11  +4.1491e-01  +4.8066e-01  6.58e-02  1.45e-04  9.81e-03  2.58e-05  5.53e-04  5.43e-01  
 12  +4.0099e-01  +4.1289e-01  1.19e-02  2.52e-05  1.70e-03  5.37e-06  1.07e-04  9.80e-01  
 13  +3.9737e-01  +3.9790e-01  5.24e-04  1.10e-06  7.41e-05  2.28e-07  4.85e-06  9.66e-01  
 14  +3.9720e-01  +3.9721e-01  5.26e-06  1.10e-08  7.43e-07  2.29e-09  4.88e-08  9.90e-01  
 15  +3.9720e-01  +3.9720e-01  5.26e-08  1.10e-10  7.43e-09  2.29e-11  4.88e-10  9.90e-01  
 16  +3.9720e-01  +3.9720e-01  5.26e-10  1.10e-12  7.43e-11  2.29e-13  4.88e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.6575ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:34 PM: Optimal value: 3.972e-01
(CVXPY) Sep 20 07:39:34 PM: Compilation took 5.509e-03 seconds
(CVXPY) Sep 20 07:39:34 PM: Solver (including time spent in interface) took 9.506e-03 seconds
Iteration: 7, Objective: 0.3972
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:34 PM: Your problem has 585 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:34 PM: Finished problem compilation (took 6.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 585
  constraints   = 1085
  nnz(P)        = 0
  nnz(A)        = 7359
  cones (total) = 1
    : Nonnegative = 1,  numel = 1085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0126e+02  5.01e+02  9.56e-01  3.31e+01  1.00e+00  1.01e+00   ------   
  1  +5.8163e-01  +1.0607e+02  1.05e+02  3.99e-01  1.99e+01  3.86e-03  5.51e-01  6.08e-01  
  2  +5.3188e-01  +1.2267e+01  1.17e+01  1.25e-01  7.86e+00  1.42e-02  2.32e-01  9.36e-01  
  3  +5.0476e-01  +2.7969e+00  2.29e+00  4.80e-02  3.04e+00  3.27e-05  1.97e-01  5.12e-01  
  4  +5.0089e-01  +1.1135e+00  6.13e-01  1.34e-02  8.85e-01  1.49e-05  7.90e-02  6.38e-01  
  5  +4.9187e-01  +1.6298e+00  1.14e+00  5.23e-03  3.59e-01  1.32e-04  1.48e-02  9.48e-01  
  6  +4.7122e-01  +1.0294e+00  5.58e-01  1.60e-03  1.10e-01  1.09e-04  4.72e-03  7.08e-01  
  7  +4.6435e-01  +9.5500e-01  4.91e-01  1.27e-03  8.67e-02  1.18e-04  3.78e-03  3.13e-01  
  8  +4.5864e-01  +8.7988e-01  4.21e-01  1.09e-03  7.43e-02  1.08e-04  3.33e-03  2.12e-01  
  9  +4.3155e-01  +6.0928e-01  1.78e-01  4.41e-04  2.98e-02  4.89e-05  1.51e-03  7.25e-01  
 10  +4.1506e-01  +5.0742e-01  9.24e-02  2.18e-04  1.47e-02  2.92e-05  8.14e-04  6.00e-01  
 11  +4.0846e-01  +4.7234e-01  6.39e-02  1.46e-04  9.82e-03  2.16e-05  5.67e-04  3.97e-01  
 12  +3.9816e-01  +4.1757e-01  1.94e-02  4.25e-05  2.85e-03  8.96e-06  1.80e-04  9.90e-01  
 13  +3.9416e-01  +4.0043e-01  6.27e-03  1.35e-05  9.06e-04  2.89e-06  5.95e-05  7.19e-01  
 14  +3.9253e-01  +3.9356e-01  1.03e-03  2.20e-06  1.48e-04  4.68e-07  9.89e-06  8.63e-01  
 15  +3.9220e-01  +3.9222e-01  1.17e-05  2.51e-08  1.68e-06  5.32e-09  1.13e-07  9.89e-01  
 16  +3.9220e-01  +3.9220e-01  1.17e-07  2.51e-10  1.68e-08  5.32e-11  1.13e-09  9.90e-01  
 17  +3.9220e-01  +3.9220e-01  1.17e-09  2.51e-12  1.68e-10  5.32e-13  1.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.4498ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:34 PM: Optimal value: 3.922e-01
(CVXPY) Sep 20 07:39:34 PM: Compilation took 6.006e-03 seconds
(CVXPY) Sep 20 07:39:34 PM: Solver (including time spent in interface) took 1.051e-02 seconds
Iteration: 8, Objective: 0.3922
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:34 PM: Your problem has 587 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:34 PM: Finished problem compilation (took 5.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 587
  constraints   = 1087
  nnz(P)        = 0
  nnz(A)        = 7397
  cones (total) = 1
    : Nonnegative = 1,  numel = 1087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9961e-01  +5.0125e+02  5.01e+02  9.56e-01  3.31e+01  1.00e+00  1.01e+00   ------   
  1  +5.8133e-01  +1.0609e+02  1.06e+02  4.00e-01  1.99e+01  3.86e-03  5.51e-01  6.08e-01  
  2  +5.3176e-01  +1.2244e+01  1.17e+01  1.24e-01  7.82e+00  1.42e-02  2.32e-01  9.38e-01  
  3  +5.0473e-01  +2.7906e+00  2.29e+00  4.79e-02  3.03e+00  3.29e-05  1.96e-01  5.17e-01  
  4  +5.0074e-01  +1.0588e+00  5.58e-01  1.22e-02  8.07e-01  1.44e-05  7.22e-02  6.72e-01  
  5  +4.9171e-01  +1.6532e+00  1.16e+00  5.23e-03  3.59e-01  1.34e-04  1.47e-02  9.38e-01  
  6  +4.7106e-01  +1.0425e+00  5.71e-01  1.64e-03  1.12e-01  1.09e-04  4.83e-03  7.02e-01  
  7  +4.6207e-01  +9.2452e-01  4.62e-01  1.20e-03  8.18e-02  1.16e-04  3.61e-03  4.16e-01  
  8  +4.5032e-01  +8.0158e-01  3.51e-01  8.92e-04  6.06e-02  9.09e-05  2.81e-03  2.93e-01  
  9  +4.2658e-01  +5.9374e-01  1.67e-01  4.09e-04  2.76e-02  4.25e-05  1.43e-03  5.67e-01  
 10  +4.1173e-01  +4.9310e-01  8.14e-02  1.89e-04  1.27e-02  2.65e-05  7.17e-04  6.59e-01  
 11  +4.0645e-01  +4.6311e-01  5.67e-02  1.28e-04  8.62e-03  2.03e-05  5.04e-04  4.52e-01  
 12  +3.9659e-01  +4.1271e-01  1.61e-02  3.53e-05  2.37e-03  5.95e-06  1.51e-04  7.70e-01  
 13  +3.9357e-01  +3.9839e-01  4.82e-03  1.04e-05  6.96e-04  1.84e-06  4.59e-05  7.47e-01  
 14  +3.9239e-01  +3.9306e-01  6.65e-04  1.43e-06  9.55e-05  2.55e-07  6.41e-06  8.71e-01  
 15  +3.9220e-01  +3.9221e-01  7.98e-06  1.71e-08  1.15e-06  3.03e-09  7.71e-08  9.88e-01  
 16  +3.9220e-01  +3.9220e-01  7.98e-08  1.71e-10  1.15e-08  3.03e-11  7.71e-10  9.90e-01  
 17  +3.9220e-01  +3.9220e-01  7.98e-10  1.71e-12  1.15e-10  3.04e-13  7.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.3443ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:34 PM: Optimal value: 3.922e-01
(CVXPY) Sep 20 07:39:34 PM: Compilation took 5.002e-03 seconds
(CVXPY) Sep 20 07:39:34 PM: Solver (including time spent in interface) took 1.201e-02 seconds
FULL MODEL:
  Accruacy: 0.572
  Our objective: 0.14400000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 0)                                  <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.018)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 1)                       <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.006)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.01)
 OR (x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1)                                  <-- (term's our objective: 0.02)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.954808473587036
Best over terms:
  Our final objective: 0.05999999999999997
    Its accruacy: 0.53
    Its hamming distance: 3
  Shortest hamming distance: 3
    Its our objective: 0.05999999999999997
  Highest accruacy: 0.53
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

