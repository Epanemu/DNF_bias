Command:
python test_script.py -s constant_subclass -d 2 -n 50000 --seed 21 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29264
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 2.

Computed total variation: 0.29264
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:34 PM: Your problem has 25005 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:34 PM: Finished problem compilation (took 4.681e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25005
  constraints   = 50005
  nnz(P)        = 0
  nnz(A)        = 125005
  cones (total) = 1
    : Nonnegative = 1,  numel = 50005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5003e+04  2.50e+04  9.92e-01  1.59e+02  1.00e+00  1.00e+00   ------   
  1  +6.3758e-01  +4.3682e+03  4.37e+03  2.69e-01  7.51e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5927e-01  +8.1613e+02  8.16e+02  1.36e-01  4.39e+01  5.28e-03  2.16e-01  5.86e-01  
  3  +5.0729e-01  +1.0099e+02  1.00e+02  1.15e-01  3.67e+01  6.54e-06  2.15e-01  4.36e-02  
  4  +5.0016e-01  +3.5003e+00  3.00e+00  8.91e-03  2.80e+00  9.43e-07  2.03e-01  2.52e-01  
  5  +5.0000e-01  +9.2564e-01  4.26e-01  1.27e-03  4.03e-01  3.84e-07  7.50e-02  9.03e-01  
  6  +4.9782e-01  +2.8851e+00  2.39e+00  1.54e-03  4.98e-01  2.83e-05  4.53e-03  9.85e-01  
  7  +4.6919e-01  +1.4139e+00  9.45e-01  4.93e-05  1.60e-02  3.25e-04  1.35e-04  9.70e-01  
  8  +4.4153e-01  +6.5534e-01  2.14e-01  1.08e-05  3.46e-03  3.00e-06  3.31e-05  8.33e-01  
  9  +4.0893e-01  +4.2896e-01  2.00e-02  1.02e-06  3.26e-04  2.43e-08  3.83e-06  9.56e-01  
 10  +4.0310e-01  +4.0445e-01  1.36e-03  6.21e-08  1.98e-05  6.42e-09  2.68e-07  9.65e-01  
 11  +4.0262e-01  +4.0264e-01  1.44e-05  6.38e-10  2.03e-07  7.00e-11  2.86e-09  9.90e-01  
 12  +4.0262e-01  +4.0262e-01  1.44e-07  6.38e-12  2.03e-09  7.00e-13  2.86e-11  9.90e-01  
 13  +4.0262e-01  +4.0262e-01  1.46e-09  6.45e-14  2.06e-11  1.13e-14  4.52e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 148.6202ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:34 PM: Optimal value: 4.026e-01
(CVXPY) Sep 20 07:26:34 PM: Compilation took 4.681e-02 seconds
(CVXPY) Sep 20 07:26:34 PM: Solver (including time spent in interface) took 1.663e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4026
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:35 PM: Your problem has 25006 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:35 PM: Finished problem compilation (took 4.182e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25006
  constraints   = 50006
  nnz(P)        = 0
  nnz(A)        = 134907
  cones (total) = 1
    : Nonnegative = 1,  numel = 50006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5003e+04  2.50e+04  9.92e-01  1.65e+02  1.00e+00  1.00e+00   ------   
  1  +6.3755e-01  +4.3684e+03  4.37e+03  2.69e-01  7.79e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5924e-01  +8.1581e+02  8.15e+02  1.36e-01  4.55e+01  5.28e-03  2.16e-01  5.87e-01  
  3  +5.0723e-01  +1.0029e+02  9.98e+01  1.15e-01  3.80e+01  6.50e-06  2.15e-01  4.42e-02  
  4  +5.0033e-01  +5.9649e+00  5.46e+00  1.61e-02  5.19e+00  1.16e-06  2.08e-01  1.45e-01  
  5  +5.0006e-01  +1.9708e+00  1.47e+00  4.38e-03  1.44e+00  6.25e-07  1.54e-01  3.78e-01  
  6  +5.0003e-01  +1.3692e+00  8.69e-01  2.59e-03  8.51e-01  4.83e-07  8.76e-02  5.02e-01  
  7  +4.9991e-01  +7.7801e-01  2.78e-01  7.81e-04  2.58e-01  1.25e-06  6.62e-03  9.50e-01  
  8  +4.9547e-01  +7.6498e-01  2.70e-01  6.14e-05  2.08e-02  5.06e-05  1.57e-04  9.76e-01  
  9  +4.9480e-01  +8.0295e-01  3.08e-01  5.61e-05  1.90e-02  4.69e-05  1.47e-04  4.20e-01  
 10  +4.9107e-01  +8.1710e-01  3.26e-01  3.64e-05  1.23e-02  6.73e-05  9.24e-05  5.23e-01  
 11  +4.7023e-01  +7.8175e-01  3.12e-01  1.34e-05  4.54e-03  1.26e-04  3.42e-05  8.25e-01  
 12  +4.2581e-01  +6.0962e-01  1.84e-01  6.78e-06  2.27e-03  5.00e-05  1.90e-05  5.51e-01  
 13  +3.7296e-01  +4.1834e-01  4.54e-02  1.69e-06  5.59e-04  4.14e-07  5.68e-06  7.88e-01  
 14  +3.5439e-01  +3.5569e-01  1.30e-03  4.72e-08  1.56e-05  3.92e-09  1.72e-07  9.74e-01  
 15  +3.5379e-01  +3.5380e-01  1.30e-05  4.72e-10  1.56e-07  3.91e-11  1.72e-09  9.90e-01  
 16  +3.5378e-01  +3.5378e-01  1.30e-07  4.72e-12  1.56e-09  3.98e-13  1.75e-11  9.90e-01  
 17  +3.5378e-01  +3.5378e-01  1.30e-09  4.72e-14  1.56e-11  4.05e-15  1.78e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 213.4835ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:35 PM: Optimal value: 3.538e-01
(CVXPY) Sep 20 07:26:35 PM: Compilation took 4.182e-02 seconds
(CVXPY) Sep 20 07:26:35 PM: Solver (including time spent in interface) took 2.304e-01 seconds
FULL MODEL:
  Accruacy: 0.64632
  Our objective: 0.29263999999999996

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.29264)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4996697902679443
Best over terms:
  Our final objective: 0.29263999999999996
    Its accruacy: 0.64632
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29263999999999996
  Highest accruacy: 0.64632
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

