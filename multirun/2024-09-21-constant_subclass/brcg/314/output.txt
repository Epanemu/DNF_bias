Command:
python test_script.py -s constant_subclass -d 8 -n 10000 --seed 21 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.005600000000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 8.

Computed total variation: 0.11499999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:40 PM: Your problem has 5017 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:40 PM: Finished problem compilation (took 3.271e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5017
  constraints   = 10017
  nnz(P)        = 0
  nnz(A)        = 55017
  cones (total) = 1
    : Nonnegative = 1,  numel = 10017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.11e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +1.0695e+03  1.07e+03  4.19e-01  7.07e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3486e-01  +1.2656e+02  1.26e+02  1.63e-01  3.53e+01  1.47e-02  2.66e-01  9.00e-01  
  3  +5.0935e-01  +3.2825e+01  3.23e+01  1.22e-01  2.62e+01  3.96e-05  2.53e-01  2.13e-01  
  4  +5.0088e-01  +2.7307e+00  2.23e+00  1.51e-02  3.29e+00  5.38e-06  1.66e-01  6.32e-01  
  5  +5.0008e-01  +8.3616e-01  3.36e-01  2.25e-03  4.99e-01  2.83e-05  9.15e-02  9.90e-01  
  6  +5.0001e-01  +5.4261e-01  4.26e-02  2.84e-04  6.32e-02  4.69e-06  1.58e-02  8.45e-01  
  7  +5.0001e-01  +5.3246e-01  3.25e-02  2.16e-04  4.81e-02  3.75e-06  9.02e-03  5.71e-01  
  8  +5.0000e-01  +5.2842e-01  2.84e-02  1.88e-04  4.18e-02  4.34e-06  3.94e-03  7.44e-01  
  9  +4.9990e-01  +5.1681e-01  1.69e-02  3.74e-05  8.36e-03  5.62e-05  1.39e-04  9.76e-01  
 10  +4.9900e-01  +5.1507e-01  1.61e-02  4.24e-06  9.47e-04  5.05e-04  1.40e-05  9.00e-01  
 11  +4.9811e-01  +5.1106e-01  1.29e-02  3.61e-06  8.06e-04  2.93e-04  1.24e-05  2.24e-01  
 12  +4.9728e-01  +5.0771e-01  1.04e-02  2.77e-06  6.19e-04  1.44e-04  9.89e-06  4.31e-01  
 13  +4.9656e-01  +5.0497e-01  8.41e-03  2.07e-06  4.63e-04  5.27e-05  7.62e-06  5.77e-01  
 14  +4.9560e-01  +5.0131e-01  5.70e-03  1.27e-06  2.83e-04  5.73e-07  4.78e-06  9.13e-01  
 15  +4.9450e-01  +4.9705e-01  2.55e-03  5.27e-07  1.18e-04  1.74e-07  2.06e-06  7.75e-01  
 16  +4.9420e-01  +4.9585e-01  1.65e-03  3.33e-07  7.43e-05  8.23e-08  1.31e-06  9.90e-01  
 17  +4.9363e-01  +4.9371e-01  7.91e-05  1.58e-08  3.52e-06  3.68e-09  6.39e-08  9.59e-01  
 18  +4.9360e-01  +4.9360e-01  8.10e-07  1.61e-10  3.60e-08  3.77e-11  6.54e-10  9.90e-01  
 19  +4.9360e-01  +4.9360e-01  8.10e-09  1.61e-12  3.60e-10  3.87e-13  6.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 91.492ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:40 PM: Optimal value: 4.936e-01
(CVXPY) Sep 20 07:48:40 PM: Compilation took 3.271e-02 seconds
(CVXPY) Sep 20 07:48:40 PM: Solver (including time spent in interface) took 1.009e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4936
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:40 PM: Your problem has 5027 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:40 PM: Finished problem compilation (took 3.372e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5027
  constraints   = 10027
  nnz(P)        = 0
  nnz(A)        = 61662
  cones (total) = 1
    : Nonnegative = 1,  numel = 10027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.13e+02  1.00e+00  1.00e+00   ------   
  1  +5.8410e-01  +1.0697e+03  1.07e+03  4.19e-01  7.21e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3477e-01  +1.2639e+02  1.26e+02  1.63e-01  3.59e+01  1.47e-02  2.65e-01  9.01e-01  
  3  +5.0933e-01  +3.2762e+01  3.23e+01  1.22e-01  2.67e+01  3.97e-05  2.53e-01  2.14e-01  
  4  +5.0088e-01  +2.7162e+00  2.22e+00  1.50e-02  3.34e+00  5.40e-06  1.64e-01  6.38e-01  
  5  +5.0009e-01  +8.5079e-01  3.51e-01  2.35e-03  5.31e-01  2.85e-05  8.89e-02  9.90e-01  
  6  +5.0002e-01  +5.9448e-01  9.45e-02  6.31e-04  1.43e-01  1.04e-05  2.63e-02  7.68e-01  
  7  +4.9999e-01  +6.1747e-01  1.17e-01  7.44e-04  1.69e-01  3.10e-05  7.68e-03  8.53e-01  
  8  +4.9840e-01  +5.9088e-01  9.25e-02  5.16e-05  1.18e-02  8.96e-04  1.78e-04  9.80e-01  
  9  +4.9618e-01  +5.7151e-01  7.53e-02  2.56e-05  5.83e-03  1.10e-03  8.88e-05  5.71e-01  
 10  +4.9504e-01  +5.6107e-01  6.60e-02  2.12e-05  4.82e-03  8.44e-04  7.43e-05  2.51e-01  
 11  +4.9499e-01  +5.6000e-01  6.50e-02  2.11e-05  4.81e-03  7.95e-04  7.42e-05  2.57e-02  
 12  +4.9461e-01  +5.5261e-01  5.80e-02  1.89e-05  4.30e-03  4.34e-04  6.62e-05  3.70e-01  
 13  +4.9337e-01  +5.4182e-01  4.85e-02  1.52e-05  3.47e-03  2.28e-04  5.39e-05  4.15e-01  
 14  +4.9187e-01  +5.2848e-01  3.66e-02  1.12e-05  2.55e-03  2.33e-06  4.01e-05  8.31e-01  
 15  +4.8576e-01  +4.9389e-01  8.12e-03  2.11e-06  4.80e-04  2.16e-07  7.71e-06  9.56e-01  
 16  +4.8448e-01  +4.8725e-01  2.76e-03  6.32e-07  1.44e-04  1.16e-07  2.14e-06  8.19e-01  
 17  +4.8415e-01  +4.8650e-01  2.36e-03  4.12e-07  9.41e-05  1.22e-07  1.38e-06  4.14e-01  
 18  +4.8400e-01  +4.8603e-01  2.03e-03  4.00e-07  9.14e-05  9.80e-08  1.35e-06  3.03e-01  
 19  +4.8318e-01  +4.8340e-01  2.29e-04  3.94e-08  8.99e-06  8.95e-09  1.35e-07  9.36e-01  
 20  +4.8310e-01  +4.8310e-01  2.45e-06  4.19e-10  9.57e-08  9.47e-11  1.45e-09  9.89e-01  
 21  +4.8310e-01  +4.8310e-01  2.45e-08  4.19e-12  9.57e-10  9.47e-13  1.45e-11  9.90e-01  
 22  +4.8310e-01  +4.8310e-01  2.46e-10  4.21e-14  9.60e-12  1.12e-14  1.71e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 121.4752ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:40 PM: Optimal value: 4.831e-01
(CVXPY) Sep 20 07:48:40 PM: Compilation took 3.372e-02 seconds
(CVXPY) Sep 20 07:48:40 PM: Solver (including time spent in interface) took 1.306e-01 seconds
Iteration: 2, Objective: 0.4831
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:40 PM: Your problem has 5037 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:40 PM: Finished problem compilation (took 3.307e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5037
  constraints   = 10037
  nnz(P)        = 0
  nnz(A)        = 67033
  cones (total) = 1
    : Nonnegative = 1,  numel = 10037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.14e+02  1.00e+00  1.00e+00   ------   
  1  +5.8410e-01  +1.0697e+03  1.07e+03  4.19e-01  7.31e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3475e-01  +1.2635e+02  1.26e+02  1.63e-01  3.64e+01  1.47e-02  2.66e-01  9.01e-01  
  3  +5.0932e-01  +3.2745e+01  3.22e+01  1.22e-01  2.70e+01  3.97e-05  2.53e-01  2.15e-01  
  4  +5.0088e-01  +2.7148e+00  2.21e+00  1.50e-02  3.38e+00  5.41e-06  1.64e-01  6.39e-01  
  5  +5.0009e-01  +8.5213e-01  3.52e-01  2.36e-03  5.41e-01  2.85e-05  8.86e-02  9.90e-01  
  6  +5.0003e-01  +6.2992e-01  1.30e-01  8.69e-04  2.00e-01  1.29e-05  3.52e-02  6.59e-01  
  7  +5.0002e-01  +6.0610e-01  1.06e-01  7.07e-04  1.62e-01  1.48e-05  1.75e-02  5.77e-01  
  8  +4.9984e-01  +5.9203e-01  9.22e-02  3.41e-04  7.86e-02  1.11e-04  1.49e-03  9.51e-01  
  9  +4.9838e-01  +5.8672e-01  8.83e-02  5.15e-05  1.19e-02  8.61e-04  1.76e-04  8.82e-01  
 10  +4.9854e-01  +5.8417e-01  8.56e-02  5.01e-05  1.16e-02  7.07e-04  1.71e-04  1.66e-01  
 11  +4.9791e-01  +5.7582e-01  7.79e-02  3.54e-05  8.19e-03  6.59e-04  1.21e-04  4.63e-01  
 12  +4.9689e-01  +5.6048e-01  6.36e-02  2.50e-05  5.78e-03  2.10e-04  8.56e-05  7.47e-01  
 13  +4.9590e-01  +5.5365e-01  5.77e-02  2.05e-05  4.73e-03  1.28e-04  6.96e-05  4.66e-01  
 14  +4.9505e-01  +5.4739e-01  5.23e-02  1.82e-05  4.21e-03  3.35e-05  6.13e-05  6.31e-01  
 15  +4.9081e-01  +5.2410e-01  3.33e-02  8.94e-06  2.06e-03  1.27e-05  2.97e-05  7.70e-01  
 16  +4.9019e-01  +5.2186e-01  3.17e-02  7.51e-06  1.73e-03  1.27e-05  2.46e-05  2.14e-01  
 17  +4.8821e-01  +5.1483e-01  2.66e-02  6.93e-06  1.60e-03  8.34e-06  2.46e-05  2.75e-02  
 18  +4.8812e-01  +5.1492e-01  2.68e-02  6.57e-06  1.52e-03  6.79e-06  2.24e-05  3.28e-01  
 19  +4.8487e-01  +5.0120e-01  1.63e-02  3.39e-06  7.84e-04  4.37e-06  1.14e-05  5.43e-01  
 20  +4.8077e-01  +4.8481e-01  4.04e-03  7.45e-07  1.72e-04  8.45e-07  2.53e-06  8.47e-01  
 21  +4.8000e-01  +4.8229e-01  2.30e-03  3.98e-07  9.19e-05  4.01e-07  1.35e-06  5.89e-01  
 22  +4.7921e-01  +4.7946e-01  2.49e-04  4.29e-08  9.90e-06  2.80e-08  1.49e-07  9.41e-01  
 23  +4.7910e-01  +4.7910e-01  3.08e-06  5.30e-10  1.22e-07  2.99e-10  1.85e-09  9.89e-01  
 24  +4.7910e-01  +4.7910e-01  3.08e-08  5.29e-12  1.22e-09  2.99e-12  1.85e-11  9.90e-01  
 25  +4.7910e-01  +4.7910e-01  3.08e-10  5.31e-14  1.22e-11  3.05e-14  1.89e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 141.1706ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:41 PM: Optimal value: 4.791e-01
(CVXPY) Sep 20 07:48:41 PM: Compilation took 3.307e-02 seconds
(CVXPY) Sep 20 07:48:41 PM: Solver (including time spent in interface) took 1.507e-01 seconds
Iteration: 3, Objective: 0.4791
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:41 PM: Your problem has 5047 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:41 PM: Finished problem compilation (took 3.278e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5047
  constraints   = 10047
  nnz(P)        = 0
  nnz(A)        = 70046
  cones (total) = 1
    : Nonnegative = 1,  numel = 10047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8406e-01  +1.0698e+03  1.07e+03  4.20e-01  7.33e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3471e-01  +1.2628e+02  1.26e+02  1.63e-01  3.65e+01  1.47e-02  2.66e-01  9.01e-01  
  3  +5.0931e-01  +3.2722e+01  3.22e+01  1.22e-01  2.71e+01  3.97e-05  2.53e-01  2.16e-01  
  4  +5.0088e-01  +2.7143e+00  2.21e+00  1.51e-02  3.40e+00  5.42e-06  1.64e-01  6.40e-01  
  5  +5.0009e-01  +8.5619e-01  3.56e-01  2.39e-03  5.50e-01  2.86e-05  8.80e-02  9.90e-01  
  6  +5.0003e-01  +6.3775e-01  1.38e-01  9.22e-04  2.12e-01  1.40e-05  3.57e-02  6.38e-01  
  7  +5.0001e-01  +6.0966e-01  1.10e-01  7.30e-04  1.68e-01  1.70e-05  1.56e-02  6.42e-01  
  8  +4.9985e-01  +6.0825e-01  1.08e-01  4.07e-04  9.42e-02  1.07e-04  1.72e-03  9.78e-01  
  9  +4.9745e-01  +5.9851e-01  1.01e-01  3.72e-05  8.62e-03  1.35e-03  1.21e-04  9.30e-01  
 10  +4.9656e-01  +5.8830e-01  9.17e-02  3.19e-05  7.39e-03  1.18e-03  1.04e-04  1.96e-01  
 11  +4.9568e-01  +5.7175e-01  7.61e-02  2.53e-05  5.86e-03  6.48e-04  8.14e-05  4.44e-01  
 12  +4.9587e-01  +5.6873e-01  7.29e-02  2.45e-05  5.68e-03  4.56e-04  7.82e-05  2.40e-01  
 13  +4.9602e-01  +5.5937e-01  6.33e-02  2.02e-05  4.69e-03  4.93e-06  6.33e-05  8.73e-01  
 14  +4.9455e-01  +5.5202e-01  5.75e-02  1.60e-05  3.72e-03  4.72e-06  5.01e-05  2.62e-01  
 15  +4.9372e-01  +5.4932e-01  5.56e-02  1.57e-05  3.64e-03  4.20e-06  4.98e-05  7.74e-02  
 16  +4.8833e-01  +5.2464e-01  3.63e-02  8.13e-06  1.88e-03  2.73e-06  2.59e-05  6.12e-01  
 17  +4.8647e-01  +5.1732e-01  3.09e-02  6.57e-06  1.52e-03  2.13e-06  2.11e-05  3.43e-01  
 18  +4.8236e-01  +5.0122e-01  1.89e-02  3.64e-06  8.44e-04  1.12e-06  1.20e-05  7.04e-01  
 19  +4.8217e-01  +5.0054e-01  1.84e-02  3.55e-06  8.23e-04  1.08e-06  1.17e-05  7.91e-02  
 20  +4.8223e-01  +5.0067e-01  1.84e-02  3.48e-06  8.07e-04  1.11e-06  1.14e-05  2.38e-01  
 21  +4.7693e-01  +4.8148e-01  4.56e-03  7.98e-07  1.85e-04  2.63e-07  2.72e-06  9.90e-01  
 22  +4.7504e-01  +4.7515e-01  1.03e-04  1.76e-08  4.08e-06  5.71e-09  6.13e-08  9.86e-01  
 23  +4.7500e-01  +4.7500e-01  1.03e-06  1.76e-10  4.09e-08  5.71e-11  6.14e-10  9.90e-01  
 24  +4.7500e-01  +4.7500e-01  1.03e-08  1.76e-12  4.09e-10  5.71e-13  6.14e-12  9.90e-01  
 25  +4.7500e-01  +4.7500e-01  1.03e-10  1.76e-14  4.09e-12  5.86e-15  6.29e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 143.2976ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:41 PM: Optimal value: 4.750e-01
(CVXPY) Sep 20 07:48:41 PM: Compilation took 3.278e-02 seconds
(CVXPY) Sep 20 07:48:41 PM: Solver (including time spent in interface) took 1.528e-01 seconds
Iteration: 4, Objective: 0.4750
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:41 PM: Your problem has 5057 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:41 PM: Finished problem compilation (took 3.470e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5057
  constraints   = 10057
  nnz(P)        = 0
  nnz(A)        = 72214
  cones (total) = 1
    : Nonnegative = 1,  numel = 10057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8402e-01  +1.0699e+03  1.07e+03  4.20e-01  7.34e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3467e-01  +1.2620e+02  1.26e+02  1.63e-01  3.65e+01  1.48e-02  2.66e-01  9.02e-01  
  3  +5.0930e-01  +3.2697e+01  3.22e+01  1.22e-01  2.71e+01  3.97e-05  2.53e-01  2.17e-01  
  4  +5.0088e-01  +2.7141e+00  2.21e+00  1.51e-02  3.40e+00  5.42e-06  1.63e-01  6.41e-01  
  5  +5.0009e-01  +8.6060e-01  3.61e-01  2.42e-03  5.58e-01  2.87e-05  8.74e-02  9.90e-01  
  6  +5.0003e-01  +6.2985e-01  1.30e-01  8.70e-04  2.01e-01  1.39e-05  3.21e-02  6.75e-01  
  7  +5.0001e-01  +6.1170e-01  1.12e-01  7.41e-04  1.71e-01  2.04e-05  1.32e-02  6.59e-01  
  8  +4.9971e-01  +6.0129e-01  1.02e-01  2.86e-04  6.64e-02  1.80e-04  1.07e-03  9.51e-01  
  9  +4.9737e-01  +5.9344e-01  9.61e-02  4.03e-05  9.37e-03  1.36e-03  1.28e-04  8.81e-01  
 10  +4.9710e-01  +5.7979e-01  8.27e-02  3.06e-05  7.10e-03  6.89e-04  9.64e-05  6.21e-01  
 11  +4.9648e-01  +5.7337e-01  7.69e-02  2.59e-05  6.01e-03  4.72e-04  8.13e-05  4.13e-01  
 12  +4.9610e-01  +5.7103e-01  7.49e-02  2.53e-05  5.88e-03  3.74e-04  8.03e-05  1.60e-01  
 13  +4.9350e-01  +5.5780e-01  6.43e-02  1.82e-05  4.24e-03  3.02e-04  5.80e-05  3.98e-01  
 14  +4.8830e-01  +5.3412e-01  4.58e-02  1.11e-05  2.57e-03  1.08e-04  3.60e-05  6.61e-01  
 15  +4.8605e-01  +5.2467e-01  3.86e-02  8.93e-06  2.07e-03  7.72e-05  2.93e-05  2.85e-01  
 16  +4.8141e-01  +5.0496e-01  2.35e-02  4.92e-06  1.14e-03  8.40e-07  1.64e-05  9.20e-01  
 17  +4.8006e-01  +4.9972e-01  1.97e-02  4.02e-06  9.33e-04  7.15e-07  1.35e-05  2.10e-01  
 18  +4.7845e-01  +4.9332e-01  1.49e-02  2.88e-06  6.69e-04  8.48e-07  9.74e-06  9.90e-01  
 19  +4.7556e-01  +4.8251e-01  6.95e-03  1.32e-06  3.06e-04  3.97e-07  4.54e-06  5.84e-01  
 20  +4.7357e-01  +4.7523e-01  1.66e-03  3.06e-07  7.09e-05  9.57e-08  1.09e-06  8.16e-01  
 21  +4.7294e-01  +4.7302e-01  8.78e-05  1.58e-08  3.66e-06  5.27e-09  5.77e-08  9.90e-01  
 22  +4.7290e-01  +4.7290e-01  8.90e-07  1.60e-10  3.71e-08  5.34e-11  5.85e-10  9.90e-01  
 23  +4.7290e-01  +4.7290e-01  8.90e-09  1.60e-12  3.71e-10  5.34e-13  5.85e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 133.3408ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:41 PM: Optimal value: 4.729e-01
(CVXPY) Sep 20 07:48:41 PM: Compilation took 3.470e-02 seconds
(CVXPY) Sep 20 07:48:41 PM: Solver (including time spent in interface) took 1.433e-01 seconds
Iteration: 5, Objective: 0.4729
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:41 PM: Your problem has 5067 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:41 PM: Finished problem compilation (took 3.504e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5067
  constraints   = 10067
  nnz(P)        = 0
  nnz(A)        = 73942
  cones (total) = 1
    : Nonnegative = 1,  numel = 10067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8400e-01  +1.0699e+03  1.07e+03  4.20e-01  7.35e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3465e-01  +1.2614e+02  1.26e+02  1.63e-01  3.64e+01  1.48e-02  2.65e-01  9.02e-01  
  3  +5.0929e-01  +3.2681e+01  3.22e+01  1.22e-01  2.71e+01  3.97e-05  2.52e-01  2.17e-01  
  4  +5.0088e-01  +2.7149e+00  2.21e+00  1.51e-02  3.41e+00  5.42e-06  1.63e-01  6.41e-01  
  5  +5.0009e-01  +8.6262e-01  3.63e-01  2.44e-03  5.62e-01  2.88e-05  8.72e-02  9.90e-01  
  6  +5.0002e-01  +6.1845e-01  1.18e-01  7.94e-04  1.83e-01  1.34e-05  2.87e-02  7.17e-01  
  7  +5.0000e-01  +6.1490e-01  1.15e-01  7.59e-04  1.75e-01  2.32e-05  1.20e-02  6.61e-01  
  8  +4.9962e-01  +6.1234e-01  1.13e-01  2.58e-04  5.99e-02  2.33e-04  9.13e-04  9.81e-01  
  9  +4.9644e-01  +6.0102e-01  1.05e-01  3.33e-05  7.74e-03  1.79e-03  1.05e-04  8.86e-01  
 10  +4.9588e-01  +5.8916e-01  9.33e-02  2.79e-05  6.50e-03  1.21e-03  8.78e-05  3.74e-01  
 11  +4.9568e-01  +5.8578e-01  9.01e-02  2.76e-05  6.42e-03  1.03e-03  8.73e-05  8.28e-02  
 12  +4.9317e-01  +5.6831e-01  7.51e-02  2.03e-05  4.73e-03  6.79e-04  6.48e-05  4.40e-01  
 13  +4.9036e-01  +5.5183e-01  6.15e-02  1.60e-05  3.72e-03  3.44e-04  5.17e-05  4.31e-01  
 14  +4.8461e-01  +5.2398e-01  3.94e-02  9.15e-06  2.13e-03  7.17e-05  3.03e-05  7.24e-01  
 15  +4.7747e-01  +4.9438e-01  1.69e-02  3.41e-06  7.93e-04  7.99e-07  1.17e-05  9.41e-01  
 16  +4.7707e-01  +4.9300e-01  1.59e-02  3.17e-06  7.37e-04  7.68e-07  1.09e-05  1.52e-01  
 17  +4.7422e-01  +4.8263e-01  8.40e-03  1.57e-06  3.64e-04  4.86e-07  5.56e-06  9.90e-01  
 18  +4.7219e-01  +4.7526e-01  3.07e-03  5.65e-07  1.31e-04  1.76e-07  2.05e-06  6.53e-01  
 19  +4.7107e-01  +4.7123e-01  1.65e-04  3.00e-08  6.98e-06  9.34e-09  1.11e-07  9.83e-01  
 20  +4.7100e-01  +4.7100e-01  1.66e-06  3.03e-10  7.03e-08  9.35e-11  1.12e-09  9.90e-01  
 21  +4.7100e-01  +4.7100e-01  1.66e-08  3.03e-12  7.03e-10  9.35e-13  1.12e-11  9.90e-01  
 22  +4.7100e-01  +4.7100e-01  1.66e-10  3.02e-14  7.03e-12  9.58e-15  1.15e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 129.8962ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:42 PM: Optimal value: 4.710e-01
(CVXPY) Sep 20 07:48:42 PM: Compilation took 3.504e-02 seconds
(CVXPY) Sep 20 07:48:42 PM: Solver (including time spent in interface) took 1.391e-01 seconds
Iteration: 6, Objective: 0.4710
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:42 PM: Your problem has 5077 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:42 PM: Finished problem compilation (took 3.597e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5077
  constraints   = 10077
  nnz(P)        = 0
  nnz(A)        = 75440
  cones (total) = 1
    : Nonnegative = 1,  numel = 10077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8394e-01  +1.0700e+03  1.07e+03  4.20e-01  7.35e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3458e-01  +1.2602e+02  1.25e+02  1.63e-01  3.64e+01  1.48e-02  2.65e-01  9.02e-01  
  3  +5.0928e-01  +3.2646e+01  3.21e+01  1.22e-01  2.70e+01  3.98e-05  2.52e-01  2.18e-01  
  4  +5.0088e-01  +2.7139e+00  2.21e+00  1.51e-02  3.41e+00  5.44e-06  1.63e-01  6.43e-01  
  5  +5.0010e-01  +8.6811e-01  3.68e-01  2.48e-03  5.71e-01  2.89e-05  8.63e-02  9.90e-01  
  6  +5.0003e-01  +6.6142e-01  1.61e-01  1.08e-03  2.50e-01  1.65e-05  3.65e-02  6.31e-01  
  7  +5.0001e-01  +6.2097e-01  1.21e-01  8.01e-04  1.85e-01  2.32e-05  1.27e-02  7.19e-01  
  8  +4.9964e-01  +6.1836e-01  1.19e-01  2.79e-04  6.48e-02  2.25e-04  9.76e-04  9.90e-01  
  9  +4.9645e-01  +6.0533e-01  1.09e-01  3.49e-05  8.13e-03  1.77e-03  1.08e-04  8.90e-01  
 10  +4.9650e-01  +5.9839e-01  1.02e-01  2.98e-05  6.93e-03  1.22e-03  9.13e-05  4.10e-01  
 11  +4.9610e-01  +5.9295e-01  9.69e-02  2.93e-05  6.82e-03  9.81e-04  9.01e-05  1.12e-01  
 12  +4.9373e-01  +5.7617e-01  8.24e-02  2.24e-05  5.22e-03  6.63e-04  6.96e-05  4.08e-01  
 13  +4.8805e-01  +5.4421e-01  5.62e-02  1.40e-05  3.25e-03  1.92e-04  4.44e-05  6.40e-01  
 14  +4.8633e-01  +5.3625e-01  4.99e-02  1.19e-05  2.76e-03  1.29e-04  3.79e-05  3.27e-01  
 15  +4.8179e-01  +5.1632e-01  3.45e-02  7.43e-06  1.73e-03  3.25e-05  2.41e-05  7.11e-01  
 16  +4.7603e-01  +4.9389e-01  1.79e-02  3.48e-06  8.08e-04  1.37e-05  1.15e-05  6.03e-01  
 17  +4.7515e-01  +4.9018e-01  1.50e-02  2.87e-06  6.66e-04  6.11e-06  9.59e-06  5.62e-01  
 18  +4.7385e-01  +4.8508e-01  1.12e-02  2.09e-06  4.86e-04  2.32e-06  7.00e-06  6.96e-01  
 19  +4.7183e-01  +4.7776e-01  5.94e-03  1.08e-06  2.50e-04  9.87e-07  3.62e-06  6.44e-01  
 20  +4.7024e-01  +4.7218e-01  1.94e-03  3.40e-07  7.91e-05  1.39e-07  1.16e-06  9.90e-01  
 21  +4.6948e-01  +4.6967e-01  1.89e-04  3.23e-08  7.51e-06  1.35e-08  1.12e-07  9.40e-01  
 22  +4.6941e-01  +4.6943e-01  2.02e-05  3.45e-09  8.02e-07  1.42e-09  1.20e-08  9.12e-01  
 23  +4.6940e-01  +4.6940e-01  2.44e-07  4.16e-11  9.67e-09  1.71e-11  1.45e-10  9.90e-01  
 24  +4.6940e-01  +4.6940e-01  2.44e-09  4.17e-13  9.68e-11  1.78e-13  1.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 146.6205ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:42 PM: Optimal value: 4.694e-01
(CVXPY) Sep 20 07:48:42 PM: Compilation took 3.597e-02 seconds
(CVXPY) Sep 20 07:48:42 PM: Solver (including time spent in interface) took 1.570e-01 seconds
Iteration: 7, Objective: 0.4694
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:42 PM: Your problem has 5087 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:42 PM: Finished problem compilation (took 3.880e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5087
  constraints   = 10087
  nnz(P)        = 0
  nnz(A)        = 77087
  cones (total) = 1
    : Nonnegative = 1,  numel = 10087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8386e-01  +1.0701e+03  1.07e+03  4.20e-01  7.35e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3452e-01  +1.2589e+02  1.25e+02  1.63e-01  3.63e+01  1.48e-02  2.65e-01  9.03e-01  
  3  +5.0926e-01  +3.2611e+01  3.21e+01  1.22e-01  2.70e+01  3.98e-05  2.52e-01  2.20e-01  
  4  +5.0088e-01  +2.7153e+00  2.21e+00  1.51e-02  3.41e+00  5.45e-06  1.62e-01  6.44e-01  
  5  +5.0010e-01  +8.7585e-01  3.76e-01  2.53e-03  5.84e-01  2.92e-05  8.55e-02  9.90e-01  
  6  +5.0004e-01  +6.6966e-01  1.70e-01  1.14e-03  2.63e-01  1.79e-05  3.48e-02  6.70e-01  
  7  +5.0000e-01  +6.4644e-01  1.46e-01  9.53e-04  2.20e-01  3.18e-05  1.12e-02  7.74e-01  
  8  +4.9918e-01  +6.2946e-01  1.30e-01  1.69e-04  3.94e-02  4.77e-04  5.57e-04  9.62e-01  
  9  +4.9833e-01  +6.1222e-01  1.14e-01  7.05e-05  1.64e-02  7.33e-04  2.23e-04  8.07e-01  
 10  +4.9643e-01  +5.9757e-01  1.01e-01  3.82e-05  8.90e-03  9.12e-04  1.19e-04  5.97e-01  
 11  +4.9607e-01  +5.9365e-01  9.76e-02  3.36e-05  7.83e-03  6.79e-04  1.04e-04  3.67e-01  
 12  +4.9576e-01  +5.9066e-01  9.49e-02  3.25e-05  7.57e-03  5.35e-04  1.01e-04  1.92e-01  
 13  +4.9446e-01  +5.8336e-01  8.89e-02  2.81e-05  6.55e-03  3.66e-04  8.74e-05  3.71e-01  
 14  +4.8825e-01  +5.5324e-01  6.50e-02  1.60e-05  3.72e-03  2.75e-04  5.06e-05  4.99e-01  
 15  +4.8580e-01  +5.4180e-01  5.60e-02  1.33e-05  3.09e-03  1.77e-04  4.24e-05  3.30e-01  
 16  +4.8266e-01  +5.2682e-01  4.42e-02  9.99e-06  2.32e-03  1.84e-06  3.24e-05  8.66e-01  
 17  +4.7824e-01  +5.0869e-01  3.05e-02  6.39e-06  1.48e-03  1.35e-06  2.10e-05  6.09e-01  
 18  +4.7620e-01  +5.0064e-01  2.44e-02  4.89e-06  1.14e-03  1.19e-06  1.62e-05  5.29e-01  
 19  +4.7117e-01  +4.8118e-01  1.00e-02  1.85e-06  4.30e-04  5.82e-07  6.30e-06  9.90e-01  
 20  +4.7085e-01  +4.8001e-01  9.16e-03  1.68e-06  3.90e-04  5.37e-07  5.73e-06  1.24e-01  
 21  +4.7036e-01  +4.7788e-01  7.52e-03  1.38e-06  3.21e-04  4.72e-07  4.78e-06  9.90e-01  
 22  +4.6906e-01  +4.7331e-01  4.25e-03  7.71e-07  1.79e-04  2.69e-07  2.69e-06  6.00e-01  
 23  +4.6846e-01  +4.7131e-01  2.85e-03  5.10e-07  1.18e-04  1.82e-07  1.79e-06  4.48e-01  
 24  +4.6743e-01  +4.6775e-01  3.16e-04  5.61e-08  1.30e-05  1.98e-08  2.00e-07  9.02e-01  
 25  +4.6730e-01  +4.6731e-01  4.06e-06  7.18e-10  1.67e-07  2.53e-10  2.57e-09  9.90e-01  
 26  +4.6730e-01  +4.6730e-01  4.06e-08  7.18e-12  1.67e-09  2.53e-12  2.58e-11  9.90e-01  
 27  +4.6730e-01  +4.6730e-01  4.07e-10  7.19e-14  1.67e-11  2.67e-14  2.72e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 162.9716ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:42 PM: Optimal value: 4.673e-01
(CVXPY) Sep 20 07:48:42 PM: Compilation took 3.880e-02 seconds
(CVXPY) Sep 20 07:48:42 PM: Solver (including time spent in interface) took 1.741e-01 seconds
Iteration: 8, Objective: 0.4673
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:42 PM: Your problem has 5097 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:42 PM: Finished problem compilation (took 3.747e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5097
  constraints   = 10097
  nnz(P)        = 0
  nnz(A)        = 78434
  cones (total) = 1
    : Nonnegative = 1,  numel = 10097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8376e-01  +1.0702e+03  1.07e+03  4.21e-01  7.35e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3444e-01  +1.2575e+02  1.25e+02  1.63e-01  3.63e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0924e-01  +3.2578e+01  3.21e+01  1.22e-01  2.70e+01  3.99e-05  2.52e-01  2.21e-01  
  4  +5.0088e-01  +2.7173e+00  2.22e+00  1.51e-02  3.42e+00  5.46e-06  1.62e-01  6.45e-01  
  5  +5.0010e-01  +8.8530e-01  3.85e-01  2.60e-03  5.99e-01  2.95e-05  8.46e-02  9.90e-01  
  6  +5.0004e-01  +6.7902e-01  1.79e-01  1.20e-03  2.78e-01  2.02e-05  3.23e-02  7.11e-01  
  7  +4.9998e-01  +6.7295e-01  1.73e-01  1.08e-03  2.50e-01  5.04e-05  9.10e-03  7.87e-01  
  8  +4.9787e-01  +6.4970e-01  1.52e-01  9.20e-05  2.14e-02  1.18e-03  2.95e-04  9.82e-01  
  9  +4.9516e-01  +6.2583e-01  1.31e-01  4.76e-05  1.11e-02  1.56e-03  1.51e-04  5.62e-01  
 10  +4.9526e-01  +6.2105e-01  1.26e-01  4.58e-05  1.07e-02  1.19e-03  1.44e-04  2.16e-01  
 11  +4.9405e-01  +6.1356e-01  1.20e-01  3.81e-05  8.88e-03  1.16e-03  1.20e-04  2.30e-01  
 12  +4.9370e-01  +6.0567e-01  1.12e-01  3.68e-05  8.57e-03  7.55e-04  1.16e-04  2.54e-01  
 13  +4.9254e-01  +5.9897e-01  1.06e-01  3.24e-05  7.54e-03  6.82e-04  1.02e-04  1.93e-01  
 14  +4.9158e-01  +5.8980e-01  9.82e-02  3.06e-05  7.12e-03  3.56e-04  9.70e-05  3.53e-01  
 15  +4.8384e-01  +5.5162e-01  6.78e-02  1.65e-05  3.83e-03  2.54e-04  5.34e-05  5.07e-01  
 16  +4.8046e-01  +5.3453e-01  5.41e-02  1.25e-05  2.92e-03  1.37e-04  4.11e-05  4.39e-01  
 17  +4.7836e-01  +5.2401e-01  4.56e-02  1.01e-05  2.35e-03  6.76e-05  3.32e-05  5.00e-01  
 18  +4.7490e-01  +5.0848e-01  3.36e-02  7.04e-06  1.64e-03  2.86e-05  2.34e-05  5.77e-01  
 19  +4.7300e-01  +5.0033e-01  2.73e-02  5.52e-06  1.28e-03  1.65e-05  1.84e-05  4.53e-01  
 20  +4.7050e-01  +4.8971e-01  1.92e-02  3.69e-06  8.58e-04  1.04e-06  1.24e-05  9.90e-01  
 21  +4.6645e-01  +4.7444e-01  7.99e-03  1.46e-06  3.40e-04  4.47e-07  5.04e-06  6.51e-01  
 22  +4.6636e-01  +4.7404e-01  7.68e-03  1.42e-06  3.30e-04  4.24e-07  4.96e-06  1.16e-01  
 23  +4.6623e-01  +4.7348e-01  7.25e-03  1.34e-06  3.11e-04  4.11e-07  4.66e-06  2.32e-01  
 24  +4.6508e-01  +4.6930e-01  4.22e-03  7.66e-07  1.78e-04  2.47e-07  2.68e-06  5.48e-01  
 25  +4.6374e-01  +4.6459e-01  8.47e-04  1.51e-07  3.51e-05  5.00e-08  5.36e-07  9.87e-01  
 26  +4.6341e-01  +4.6342e-01  1.61e-05  2.86e-09  6.66e-07  9.60e-10  1.02e-08  9.82e-01  
 27  +4.6340e-01  +4.6340e-01  1.61e-07  2.86e-11  6.66e-09  9.61e-12  1.02e-10  9.90e-01  
 28  +4.6340e-01  +4.6340e-01  1.62e-09  2.86e-13  6.67e-11  1.00e-13  1.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 174.6388ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:43 PM: Optimal value: 4.634e-01
(CVXPY) Sep 20 07:48:43 PM: Compilation took 3.747e-02 seconds
(CVXPY) Sep 20 07:48:43 PM: Solver (including time spent in interface) took 1.859e-01 seconds
Iteration: 9, Objective: 0.4634
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:43 PM: Your problem has 5107 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:43 PM: Finished problem compilation (took 3.857e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5107
  constraints   = 10107
  nnz(P)        = 0
  nnz(A)        = 79839
  cones (total) = 1
    : Nonnegative = 1,  numel = 10107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8371e-01  +1.0703e+03  1.07e+03  4.21e-01  7.35e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3440e-01  +1.2566e+02  1.25e+02  1.63e-01  3.62e+01  1.48e-02  2.65e-01  9.05e-01  
  3  +5.0923e-01  +3.2554e+01  3.20e+01  1.22e-01  2.69e+01  4.00e-05  2.51e-01  2.22e-01  
  4  +5.0088e-01  +2.7174e+00  2.22e+00  1.51e-02  3.42e+00  5.47e-06  1.61e-01  6.46e-01  
  5  +5.0010e-01  +8.9068e-01  3.91e-01  2.63e-03  6.07e-01  2.97e-05  8.40e-02  9.90e-01  
  6  +5.0005e-01  +7.1706e-01  2.17e-01  1.46e-03  3.37e-01  2.27e-05  3.81e-02  6.26e-01  
  7  +4.9999e-01  +7.0045e-01  2.00e-01  1.23e-03  2.85e-01  5.12e-05  9.57e-03  8.92e-01  
  8  +4.9873e-01  +6.8017e-01  1.81e-01  1.65e-04  3.85e-02  7.23e-04  5.35e-04  9.50e-01  
  9  +4.9623e-01  +6.5361e-01  1.57e-01  6.43e-05  1.50e-02  1.40e-03  2.04e-04  6.67e-01  
 10  +4.9575e-01  +6.3901e-01  1.43e-01  5.42e-05  1.26e-02  9.76e-04  1.70e-04  3.80e-01  
 11  +4.9455e-01  +6.2727e-01  1.33e-01  4.38e-05  1.02e-02  8.43e-04  1.37e-04  3.20e-01  
 12  +4.9439e-01  +6.2207e-01  1.28e-01  4.32e-05  1.01e-02  6.60e-04  1.35e-04  1.47e-01  
 13  +4.9320e-01  +6.1320e-01  1.20e-01  3.80e-05  8.87e-03  5.53e-04  1.19e-04  2.29e-01  
 14  +4.9200e-01  +5.9883e-01  1.07e-01  3.48e-05  8.12e-03  1.72e-04  1.11e-04  5.23e-01  
 15  +4.8330e-01  +5.5439e-01  7.11e-02  1.74e-05  4.05e-03  1.05e-04  5.67e-05  6.14e-01  
 16  +4.7973e-01  +5.3700e-01  5.73e-02  1.34e-05  3.12e-03  5.46e-05  4.44e-05  4.49e-01  
 17  +4.7356e-01  +5.0969e-01  3.61e-02  7.85e-06  1.83e-03  2.77e-05  2.66e-05  4.97e-01  
 18  +4.7327e-01  +5.0813e-01  3.49e-02  7.57e-06  1.76e-03  2.30e-05  2.58e-05  1.54e-01  
 19  +4.7198e-01  +5.0230e-01  3.03e-02  6.44e-06  1.50e-03  1.64e-05  2.20e-05  3.10e-01  
 20  +4.7044e-01  +4.9567e-01  2.52e-02  5.11e-06  1.19e-03  6.66e-06  1.74e-05  6.65e-01  
 21  +4.6471e-01  +4.7274e-01  8.02e-03  1.54e-06  3.58e-04  1.78e-06  5.41e-06  7.54e-01  
 22  +4.6463e-01  +4.7245e-01  7.82e-03  1.49e-06  3.46e-04  1.70e-06  5.23e-06  6.76e-02  
 23  +4.6416e-01  +4.7060e-01  6.45e-03  1.22e-06  2.83e-04  3.98e-07  4.34e-06  9.56e-01  
 24  +4.6301e-01  +4.6654e-01  3.53e-03  6.52e-07  1.52e-04  2.20e-07  2.34e-06  6.38e-01  
 25  +4.6188e-01  +4.6257e-01  6.93e-04  1.26e-07  2.93e-05  4.07e-08  4.58e-07  9.90e-01  
 26  +4.6161e-01  +4.6162e-01  1.28e-05  2.31e-09  5.36e-07  7.47e-10  8.43e-09  9.82e-01  
 27  +4.6160e-01  +4.6160e-01  1.28e-07  2.31e-11  5.36e-09  7.48e-12  8.43e-11  9.90e-01  
 28  +4.6160e-01  +4.6160e-01  1.28e-09  2.31e-13  5.37e-11  7.71e-14  8.68e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 181.2619ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:43 PM: Optimal value: 4.616e-01
(CVXPY) Sep 20 07:48:43 PM: Compilation took 3.857e-02 seconds
(CVXPY) Sep 20 07:48:43 PM: Solver (including time spent in interface) took 1.922e-01 seconds
Iteration: 10, Objective: 0.4616
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:43 PM: Your problem has 5117 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:43 PM: Finished problem compilation (took 4.132e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5117
  constraints   = 10117
  nnz(P)        = 0
  nnz(A)        = 80867
  cones (total) = 1
    : Nonnegative = 1,  numel = 10117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8373e-01  +1.0702e+03  1.07e+03  4.21e-01  7.34e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3440e-01  +1.2564e+02  1.25e+02  1.63e-01  3.61e+01  1.48e-02  2.65e-01  9.05e-01  
  3  +5.0923e-01  +3.2545e+01  3.20e+01  1.22e-01  2.69e+01  3.99e-05  2.51e-01  2.22e-01  
  4  +5.0088e-01  +2.7148e+00  2.21e+00  1.51e-02  3.42e+00  5.47e-06  1.61e-01  6.46e-01  
  5  +5.0010e-01  +8.9110e-01  3.91e-01  2.64e-03  6.08e-01  2.97e-05  8.38e-02  9.90e-01  
  6  +5.0004e-01  +7.0893e-01  2.09e-01  1.40e-03  3.24e-01  2.25e-05  3.60e-02  6.55e-01  
  7  +4.9998e-01  +7.0191e-01  2.02e-01  1.21e-03  2.80e-01  5.81e-05  8.57e-03  8.94e-01  
  8  +4.9796e-01  +6.6093e-01  1.63e-01  9.62e-05  2.24e-02  1.13e-03  3.07e-04  9.84e-01  
  9  +4.9571e-01  +6.3868e-01  1.43e-01  5.69e-05  1.33e-02  1.35e-03  1.80e-04  4.80e-01  
 10  +4.9573e-01  +6.3090e-01  1.35e-01  5.18e-05  1.21e-02  9.19e-04  1.62e-04  3.43e-01  
 11  +4.9441e-01  +6.2253e-01  1.28e-01  4.18e-05  9.74e-03  9.13e-04  1.31e-04  2.60e-01  
 12  +4.9418e-01  +6.1692e-01  1.23e-01  4.06e-05  9.48e-03  6.48e-04  1.27e-04  2.26e-01  
 13  +4.9123e-01  +5.9794e-01  1.07e-01  3.06e-05  7.13e-03  3.67e-04  9.64e-05  5.30e-01  
 14  +4.8742e-01  +5.7558e-01  8.82e-02  2.43e-05  5.66e-03  1.22e-04  7.81e-05  5.62e-01  
 15  +4.8070e-01  +5.4323e-01  6.25e-02  1.53e-05  3.55e-03  2.05e-05  5.05e-05  7.62e-01  
 16  +4.7362e-01  +5.1322e-01  3.96e-02  8.62e-06  2.01e-03  8.72e-06  2.93e-05  6.04e-01  
 17  +4.7309e-01  +5.1110e-01  3.80e-02  8.17e-06  1.90e-03  7.89e-06  2.79e-05  1.18e-01  
 18  +4.6996e-01  +4.9779e-01  2.78e-02  5.62e-06  1.31e-03  1.55e-06  1.95e-05  9.37e-01  
 19  +4.6644e-01  +4.8424e-01  1.78e-02  3.50e-06  8.14e-04  9.81e-07  1.24e-05  5.16e-01  
 20  +4.6223e-01  +4.6810e-01  5.88e-03  1.11e-06  2.58e-04  3.31e-07  4.06e-06  8.16e-01  
 21  +4.6220e-01  +4.6791e-01  5.71e-03  1.09e-06  2.54e-04  3.13e-07  4.05e-06  1.78e-02  
 22  +4.6220e-01  +4.6793e-01  5.73e-03  1.10e-06  2.55e-04  3.15e-07  4.05e-06  1.03e-02  
 23  +4.6219e-01  +4.6796e-01  5.77e-03  1.09e-06  2.53e-04  3.25e-07  3.98e-06  6.37e-02  
 24  +4.6114e-01  +4.6399e-01  2.85e-03  5.35e-07  1.24e-04  1.67e-07  1.98e-06  9.90e-01  
 25  +4.6005e-01  +4.6019e-01  1.38e-04  2.57e-08  5.97e-06  7.68e-09  9.65e-08  9.71e-01  
 26  +4.6000e-01  +4.6000e-01  1.42e-06  2.65e-10  6.15e-08  7.92e-11  9.95e-10  9.90e-01  
 27  +4.6000e-01  +4.6000e-01  1.42e-08  2.65e-12  6.15e-10  7.92e-13  9.95e-12  9.90e-01  
 28  +4.6000e-01  +4.6000e-01  1.42e-10  2.64e-14  6.16e-12  8.10e-15  1.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 181.2092ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:43 PM: Optimal value: 4.600e-01
(CVXPY) Sep 20 07:48:43 PM: Compilation took 4.132e-02 seconds
(CVXPY) Sep 20 07:48:43 PM: Solver (including time spent in interface) took 1.925e-01 seconds
Iteration: 11, Objective: 0.4600
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:44 PM: Your problem has 5127 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:44 PM: Finished problem compilation (took 4.078e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5127
  constraints   = 10127
  nnz(P)        = 0
  nnz(A)        = 81826
  cones (total) = 1
    : Nonnegative = 1,  numel = 10127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8373e-01  +1.0701e+03  1.07e+03  4.21e-01  7.34e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3438e-01  +1.2559e+02  1.25e+02  1.63e-01  3.61e+01  1.48e-02  2.65e-01  9.05e-01  
  3  +5.0922e-01  +3.2524e+01  3.20e+01  1.22e-01  2.69e+01  3.99e-05  2.51e-01  2.22e-01  
  4  +5.0088e-01  +2.7131e+00  2.21e+00  1.51e-02  3.42e+00  5.47e-06  1.61e-01  6.47e-01  
  5  +5.0010e-01  +8.9365e-01  3.94e-01  2.66e-03  6.13e-01  2.98e-05  8.34e-02  9.90e-01  
  6  +5.0003e-01  +6.7228e-01  1.72e-01  1.16e-03  2.67e-01  2.17e-05  2.71e-02  7.84e-01  
  7  +4.9988e-01  +6.9510e-01  1.95e-01  9.52e-04  2.21e-01  1.10e-04  4.65e-03  8.89e-01  
  8  +4.9702e-01  +6.7987e-01  1.83e-01  8.82e-05  2.06e-02  1.60e-03  2.80e-04  9.40e-01  
  9  +4.9490e-01  +6.5364e-01  1.59e-01  6.12e-05  1.43e-02  1.54e-03  1.94e-04  3.86e-01  
 10  +4.9498e-01  +6.4397e-01  1.49e-01  5.14e-05  1.20e-02  1.09e-03  1.61e-04  4.18e-01  
 11  +4.9480e-01  +6.2917e-01  1.34e-01  4.63e-05  1.08e-02  5.13e-04  1.45e-04  4.58e-01  
 12  +4.9385e-01  +6.1825e-01  1.24e-01  4.25e-05  9.92e-03  2.83e-04  1.34e-04  3.84e-01  
 13  +4.8484e-01  +5.7170e-01  8.69e-02  2.09e-05  4.86e-03  2.20e-04  6.75e-05  5.89e-01  
 14  +4.8275e-01  +5.6173e-01  7.90e-02  1.87e-05  4.35e-03  1.64e-04  6.12e-05  2.20e-01  
 15  +4.7730e-01  +5.3679e-01  5.95e-02  1.35e-05  3.13e-03  7.29e-05  4.54e-05  4.94e-01  
 16  +4.7252e-01  +5.1612e-01  4.36e-02  9.31e-06  2.17e-03  3.29e-05  3.21e-05  5.34e-01  
 17  +4.7169e-01  +5.1210e-01  4.04e-02  8.45e-06  1.97e-03  1.98e-05  2.92e-05  4.16e-01  
 18  +4.6846e-01  +4.9835e-01  2.99e-02  5.99e-06  1.39e-03  1.11e-06  2.11e-05  9.90e-01  
 19  +4.6359e-01  +4.7966e-01  1.61e-02  3.13e-06  7.28e-04  6.12e-07  1.13e-05  5.02e-01  
 20  +4.6014e-01  +4.6643e-01  6.29e-03  1.19e-06  2.78e-04  2.66e-07  4.43e-06  6.87e-01  
 21  +4.6010e-01  +4.6614e-01  6.05e-03  1.16e-06  2.70e-04  2.62e-07  4.38e-06  1.64e-01  
 22  +4.6008e-01  +4.6607e-01  5.99e-03  1.15e-06  2.68e-04  2.66e-07  4.32e-06  7.79e-02  
 23  +4.5980e-01  +4.6510e-01  5.30e-03  1.00e-06  2.33e-04  2.50e-07  3.73e-06  2.73e-01  
 24  +4.5834e-01  +4.5968e-01  1.35e-03  2.53e-07  5.88e-05  7.68e-08  9.55e-07  9.90e-01  
 25  +4.5781e-01  +4.5785e-01  3.26e-05  6.12e-09  1.42e-06  1.84e-09  2.32e-08  9.79e-01  
 26  +4.5780e-01  +4.5780e-01  3.26e-07  6.13e-11  1.42e-08  1.84e-11  2.33e-10  9.90e-01  
 27  +4.5780e-01  +4.5780e-01  3.26e-09  6.13e-13  1.42e-10  1.86e-13  2.35e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 168.9951ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:44 PM: Optimal value: 4.578e-01
(CVXPY) Sep 20 07:48:44 PM: Compilation took 4.078e-02 seconds
(CVXPY) Sep 20 07:48:44 PM: Solver (including time spent in interface) took 1.791e-01 seconds
Iteration: 12, Objective: 0.4578
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:44 PM: Your problem has 5128 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:44 PM: Finished problem compilation (took 4.494e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5128
  constraints   = 10128
  nnz(P)        = 0
  nnz(A)        = 82155
  cones (total) = 1
    : Nonnegative = 1,  numel = 10128

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8373e-01  +1.0701e+03  1.07e+03  4.21e-01  7.34e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3437e-01  +1.2557e+02  1.25e+02  1.63e-01  3.61e+01  1.48e-02  2.65e-01  9.05e-01  
  3  +5.0922e-01  +3.2519e+01  3.20e+01  1.22e-01  2.69e+01  3.99e-05  2.51e-01  2.23e-01  
  4  +5.0088e-01  +2.7125e+00  2.21e+00  1.51e-02  3.42e+00  5.48e-06  1.61e-01  6.47e-01  
  5  +5.0010e-01  +8.9488e-01  3.95e-01  2.67e-03  6.15e-01  2.98e-05  8.32e-02  9.90e-01  
  6  +5.0003e-01  +6.6251e-01  1.62e-01  1.09e-03  2.52e-01  2.16e-05  2.52e-02  7.99e-01  
  7  +4.9983e-01  +7.0292e-01  2.03e-01  8.70e-04  2.02e-01  1.40e-04  3.80e-03  9.14e-01  
  8  +4.9680e-01  +6.8608e-01  1.89e-01  8.65e-05  2.02e-02  1.70e-03  2.74e-04  9.28e-01  
  9  +4.9569e-01  +6.4441e-01  1.49e-01  6.24e-05  1.45e-02  8.04e-04  1.96e-04  5.78e-01  
 10  +4.9479e-01  +6.3694e-01  1.42e-01  5.22e-05  1.22e-02  7.67e-04  1.64e-04  2.54e-01  
 11  +4.9477e-01  +6.2636e-01  1.32e-01  4.64e-05  1.08e-02  3.79e-04  1.45e-04  4.89e-01  
 12  +4.9439e-01  +6.2143e-01  1.27e-01  4.47e-05  1.04e-02  2.82e-04  1.40e-04  2.21e-01  
 13  +4.9097e-01  +6.0215e-01  1.11e-01  3.33e-05  7.76e-03  1.99e-04  1.05e-04  4.48e-01  
 14  +4.8315e-01  +5.6406e-01  8.09e-02  2.02e-05  4.70e-03  1.39e-04  6.59e-05  4.34e-01  
 15  +4.8062e-01  +5.5244e-01  7.18e-02  1.73e-05  4.03e-03  1.05e-04  5.71e-05  2.37e-01  
 16  +4.7446e-01  +5.2486e-01  5.04e-02  1.12e-05  2.61e-03  4.64e-05  3.81e-05  5.38e-01  
 17  +4.7139e-01  +5.1184e-01  4.05e-02  8.62e-06  2.00e-03  2.98e-05  2.97e-05  3.68e-01  
 18  +4.6992e-01  +5.0568e-01  3.58e-02  7.46e-06  1.74e-03  2.33e-05  2.59e-05  2.31e-01  
 19  +4.6650e-01  +4.9082e-01  2.43e-02  4.85e-06  1.13e-03  4.51e-06  1.71e-05  8.32e-01  
 20  +4.6127e-01  +4.7066e-01  9.40e-03  1.82e-06  4.23e-04  1.27e-06  6.64e-06  7.44e-01  
 21  +4.6100e-01  +4.6969e-01  8.69e-03  1.67e-06  3.87e-04  1.16e-06  6.09e-06  1.15e-01  
 22  +4.6068e-01  +4.6815e-01  7.47e-03  1.44e-06  3.34e-04  5.29e-07  5.33e-06  8.25e-01  
 23  +4.6016e-01  +4.6620e-01  6.04e-03  1.16e-06  2.69e-04  4.13e-07  4.32e-06  3.50e-01  
 24  +4.5961e-01  +4.6421e-01  4.61e-03  8.78e-07  2.04e-04  3.08e-07  3.27e-06  4.10e-01  
 25  +4.5882e-01  +4.6144e-01  2.62e-03  4.94e-07  1.15e-04  1.73e-07  1.85e-06  5.13e-01  
 26  +4.5783e-01  +4.5791e-01  7.65e-05  1.44e-08  3.34e-06  4.85e-09  5.45e-08  9.74e-01  
 27  +4.5780e-01  +4.5780e-01  7.68e-07  1.44e-10  3.35e-08  4.86e-11  5.47e-10  9.90e-01  
 28  +4.5780e-01  +4.5780e-01  7.68e-09  1.44e-12  3.35e-10  4.86e-13  5.47e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 188.1701ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:44 PM: Optimal value: 4.578e-01
(CVXPY) Sep 20 07:48:44 PM: Compilation took 4.494e-02 seconds
(CVXPY) Sep 20 07:48:44 PM: Solver (including time spent in interface) took 1.991e-01 seconds
Iteration: 13, Objective: 0.4578
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:44 PM: Your problem has 5138 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:44 PM: Finished problem compilation (took 4.436e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5138
  constraints   = 10138
  nnz(P)        = 0
  nnz(A)        = 82772
  cones (total) = 1
    : Nonnegative = 1,  numel = 10138

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8370e-01  +1.0701e+03  1.07e+03  4.21e-01  7.33e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3433e-01  +1.2549e+02  1.25e+02  1.63e-01  3.60e+01  1.48e-02  2.65e-01  9.05e-01  
  3  +5.0922e-01  +3.2503e+01  3.20e+01  1.22e-01  2.68e+01  4.00e-05  2.51e-01  2.23e-01  
  4  +5.0088e-01  +2.7137e+00  2.21e+00  1.51e-02  3.42e+00  5.48e-06  1.61e-01  6.48e-01  
  5  +5.0011e-01  +8.9796e-01  3.98e-01  2.69e-03  6.19e-01  2.98e-05  8.32e-02  9.88e-01  
  6  +5.0003e-01  +6.7872e-01  1.79e-01  1.20e-03  2.77e-01  2.22e-05  2.79e-02  7.59e-01  
  7  +4.9987e-01  +6.9645e-01  1.97e-01  9.55e-04  2.21e-01  1.12e-04  4.62e-03  8.93e-01  
  8  +4.9701e-01  +6.8116e-01  1.84e-01  8.96e-05  2.09e-02  1.60e-03  2.83e-04  9.39e-01  
  9  +4.9495e-01  +6.5631e-01  1.61e-01  6.28e-05  1.46e-02  1.56e-03  1.98e-04  3.77e-01  
 10  +4.9400e-01  +6.4545e-01  1.51e-01  4.97e-05  1.16e-02  1.39e-03  1.56e-04  3.51e-01  
 11  +4.9404e-01  +6.4140e-01  1.47e-01  4.91e-05  1.15e-02  1.19e-03  1.54e-04  1.03e-01  
 12  +4.9308e-01  +6.3105e-01  1.38e-01  4.28e-05  9.98e-03  9.51e-04  1.34e-04  2.75e-01  
 13  +4.9149e-01  +6.1214e-01  1.21e-01  3.81e-05  8.89e-03  4.43e-04  1.21e-04  4.10e-01  
 14  +4.8542e-01  +5.7981e-01  9.44e-02  2.50e-05  5.82e-03  3.07e-04  8.09e-05  4.44e-01  
 15  +4.7922e-01  +5.4929e-01  7.01e-02  1.69e-05  3.93e-03  1.67e-04  5.62e-05  4.53e-01  
 16  +4.7156e-01  +5.1320e-01  4.16e-02  8.98e-06  2.09e-03  2.44e-05  3.07e-05  8.07e-01  
 17  +4.7028e-01  +5.0765e-01  3.74e-02  7.85e-06  1.83e-03  1.35e-05  2.70e-05  4.62e-01  
 18  +4.6775e-01  +4.9676e-01  2.90e-02  5.81e-06  1.35e-03  1.28e-06  2.03e-05  9.90e-01  
 19  +4.6347e-01  +4.7970e-01  1.62e-02  3.19e-06  7.41e-04  7.95e-07  1.14e-05  6.58e-01  
 20  +4.6138e-01  +4.7187e-01  1.05e-02  2.00e-06  4.66e-04  5.58e-07  7.20e-06  5.60e-01  
 21  +4.6114e-01  +4.7088e-01  9.74e-03  1.88e-06  4.36e-04  5.25e-07  6.82e-06  3.49e-01  
 22  +4.5986e-01  +4.6602e-01  6.16e-03  1.18e-06  2.75e-04  3.37e-07  4.35e-06  4.77e-01  
 23  +4.5971e-01  +4.6548e-01  5.78e-03  1.10e-06  2.55e-04  3.25e-07  4.01e-06  3.19e-01  
 24  +4.5821e-01  +4.6005e-01  1.84e-03  3.46e-07  8.04e-05  1.03e-07  1.29e-06  6.99e-01  
 25  +4.5752e-01  +4.5757e-01  5.12e-05  9.56e-09  2.22e-06  2.79e-09  3.61e-08  9.74e-01  
 26  +4.5750e-01  +4.5750e-01  5.36e-07  1.00e-10  2.33e-08  2.92e-11  3.78e-10  9.90e-01  
 27  +4.5750e-01  +4.5750e-01  5.36e-09  1.00e-12  2.33e-10  2.92e-13  3.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 191.8358ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:45 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:45 PM: Optimal value: 4.575e-01
(CVXPY) Sep 20 07:48:45 PM: Compilation took 4.436e-02 seconds
(CVXPY) Sep 20 07:48:45 PM: Solver (including time spent in interface) took 2.049e-01 seconds
Iteration: 14, Objective: 0.4575
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:45 PM: Your problem has 5148 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:45 PM: Finished problem compilation (took 4.372e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5148
  constraints   = 10148
  nnz(P)        = 0
  nnz(A)        = 83549
  cones (total) = 1
    : Nonnegative = 1,  numel = 10148

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8361e-01  +1.0703e+03  1.07e+03  4.21e-01  7.33e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3431e-01  +1.2549e+02  1.25e+02  1.63e-01  3.60e+01  1.48e-02  2.65e-01  9.06e-01  
  3  +5.0921e-01  +3.2507e+01  3.20e+01  1.22e-01  2.68e+01  4.00e-05  2.51e-01  2.24e-01  
  4  +5.0088e-01  +2.7201e+00  2.22e+00  1.52e-02  3.43e+00  5.49e-06  1.61e-01  6.47e-01  
  5  +5.0011e-01  +9.1680e-01  4.17e-01  2.82e-03  6.49e-01  2.99e-05  8.50e-02  9.64e-01  
  6  +5.0004e-01  +6.9549e-01  1.95e-01  1.31e-03  3.03e-01  2.29e-05  3.01e-02  7.41e-01  
  7  +4.9990e-01  +7.1113e-01  2.11e-01  1.07e-03  2.48e-01  1.01e-04  5.45e-03  8.91e-01  
  8  +4.9724e-01  +6.9423e-01  1.97e-01  1.01e-04  2.35e-02  1.48e-03  3.20e-04  9.43e-01  
  9  +4.9483e-01  +6.6135e-01  1.67e-01  6.56e-05  1.53e-02  1.43e-03  2.07e-04  4.36e-01  
 10  +4.9506e-01  +6.5282e-01  1.58e-01  5.77e-05  1.34e-02  1.01e-03  1.81e-04  3.68e-01  
 11  +4.9433e-01  +6.4067e-01  1.46e-01  4.80e-05  1.12e-02  7.30e-04  1.50e-04  3.98e-01  
 12  +4.9293e-01  +6.2256e-01  1.30e-01  4.40e-05  1.03e-02  3.38e-04  1.39e-04  3.98e-01  
 13  +4.8631e-01  +5.8709e-01  1.01e-01  2.69e-05  6.26e-03  2.87e-04  8.66e-05  4.20e-01  
 14  +4.8199e-01  +5.6436e-01  8.24e-02  2.09e-05  4.86e-03  1.66e-04  6.84e-05  3.86e-01  
 15  +4.7898e-01  +5.5002e-01  7.10e-02  1.72e-05  4.01e-03  1.25e-04  5.71e-05  2.50e-01  
 16  +4.7443e-01  +5.2879e-01  5.44e-02  1.23e-05  2.87e-03  6.49e-05  4.17e-05  4.76e-01  
 17  +4.6812e-01  +5.0105e-01  3.29e-02  6.86e-06  1.59e-03  2.02e-05  2.38e-05  6.87e-01  
 18  +4.6726e-01  +4.9744e-01  3.02e-02  6.19e-06  1.44e-03  1.63e-05  2.15e-05  2.09e-01  
 19  +4.6245e-01  +4.7756e-01  1.51e-02  2.97e-06  6.90e-04  4.26e-06  1.06e-05  7.56e-01  
 20  +4.6120e-01  +4.7258e-01  1.14e-02  2.20e-06  5.12e-04  2.69e-06  7.95e-06  4.08e-01  
 21  +4.6058e-01  +4.7014e-01  9.56e-03  1.84e-06  4.28e-04  1.84e-06  6.67e-06  3.68e-01  
 22  +4.5847e-01  +4.6214e-01  3.68e-03  7.00e-07  1.63e-04  5.85e-07  2.59e-06  7.05e-01  
 23  +4.5749e-01  +4.5849e-01  9.94e-04  1.88e-07  4.36e-05  6.17e-08  7.05e-07  9.90e-01  
 24  +4.5711e-01  +4.5713e-01  2.02e-05  3.81e-09  8.85e-07  1.22e-09  1.44e-08  9.83e-01  
 25  +4.5710e-01  +4.5710e-01  2.03e-07  3.83e-11  8.90e-09  1.23e-11  1.45e-10  9.90e-01  
 26  +4.5710e-01  +4.5710e-01  2.03e-09  3.83e-13  8.91e-11  1.25e-13  1.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 187.5447ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:45 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:45 PM: Optimal value: 4.571e-01
(CVXPY) Sep 20 07:48:45 PM: Compilation took 4.372e-02 seconds
(CVXPY) Sep 20 07:48:45 PM: Solver (including time spent in interface) took 1.999e-01 seconds
Iteration: 15, Objective: 0.4571
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:45 PM: Your problem has 5158 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:45 PM: Finished problem compilation (took 4.378e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5158
  constraints   = 10158
  nnz(P)        = 0
  nnz(A)        = 84308
  cones (total) = 1
    : Nonnegative = 1,  numel = 10158

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8359e-01  +1.0704e+03  1.07e+03  4.22e-01  7.33e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3428e-01  +1.2542e+02  1.25e+02  1.63e-01  3.59e+01  1.48e-02  2.64e-01  9.06e-01  
  3  +5.0921e-01  +3.2491e+01  3.20e+01  1.22e-01  2.67e+01  4.00e-05  2.51e-01  2.24e-01  
  4  +5.0088e-01  +2.7216e+00  2.22e+00  1.52e-02  3.43e+00  5.49e-06  1.60e-01  6.48e-01  
  5  +5.0012e-01  +9.3237e-01  4.32e-01  2.92e-03  6.73e-01  2.98e-05  8.63e-02  9.45e-01  
  6  +5.0004e-01  +6.9272e-01  1.93e-01  1.30e-03  2.99e-01  2.23e-05  2.94e-02  7.59e-01  
  7  +4.9992e-01  +7.1356e-01  2.14e-01  1.13e-03  2.63e-01  8.97e-05  6.09e-03  8.70e-01  
  8  +4.9737e-01  +6.9720e-01  2.00e-01  1.04e-04  2.43e-02  1.42e-03  3.30e-04  9.47e-01  
  9  +4.9467e-01  +6.6289e-01  1.68e-01  6.32e-05  1.47e-02  1.48e-03  1.99e-04  4.76e-01  
 10  +4.9368e-01  +6.5242e-01  1.59e-01  5.14e-05  1.20e-02  1.33e-03  1.61e-04  3.18e-01  
 11  +4.9324e-01  +6.4028e-01  1.47e-01  4.82e-05  1.12e-02  8.84e-04  1.52e-04  2.67e-01  
 12  +4.8944e-01  +6.1446e-01  1.25e-01  3.65e-05  8.51e-03  6.81e-04  1.16e-04  3.31e-01  
 13  +4.8717e-01  +5.9680e-01  1.10e-01  3.13e-05  7.29e-03  3.80e-04  1.01e-04  3.73e-01  
 14  +4.8172e-01  +5.6821e-01  8.65e-02  2.23e-05  5.20e-03  2.66e-04  7.34e-05  3.46e-01  
 15  +4.7849e-01  +5.5206e-01  7.36e-02  1.81e-05  4.20e-03  2.02e-04  6.00e-05  2.58e-01  
 16  +4.7415e-01  +5.3105e-01  5.69e-02  1.30e-05  3.03e-03  1.21e-04  4.39e-05  4.12e-01  
 17  +4.6883e-01  +5.0603e-01  3.72e-02  7.81e-06  1.82e-03  2.87e-05  2.69e-05  7.50e-01  
 18  +4.6802e-01  +5.0261e-01  3.46e-02  7.16e-06  1.66e-03  2.36e-05  2.47e-05  1.92e-01  
 19  +4.6473e-01  +4.8833e-01  2.36e-02  4.65e-06  1.08e-03  5.22e-06  1.62e-05  8.15e-01  
 20  +4.6162e-01  +4.7627e-01  1.47e-02  2.82e-06  6.55e-04  2.82e-06  1.00e-05  4.86e-01  
 21  +4.6048e-01  +4.7126e-01  1.08e-02  2.05e-06  4.75e-04  6.59e-07  7.33e-06  9.90e-01  
 22  +4.5734e-01  +4.6000e-01  2.67e-03  4.94e-07  1.15e-04  1.62e-07  1.82e-06  7.99e-01  
 23  +4.5632e-01  +4.5638e-01  5.83e-05  1.07e-08  2.49e-06  3.44e-09  3.99e-08  9.88e-01  
 24  +4.5630e-01  +4.5630e-01  5.84e-07  1.08e-10  2.50e-08  3.44e-11  4.00e-10  9.90e-01  
 25  +4.5630e-01  +4.5630e-01  5.84e-09  1.08e-12  2.50e-10  3.48e-13  4.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 176.6837ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:45 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:45 PM: Optimal value: 4.563e-01
(CVXPY) Sep 20 07:48:45 PM: Compilation took 4.378e-02 seconds
(CVXPY) Sep 20 07:48:45 PM: Solver (including time spent in interface) took 1.894e-01 seconds
Iteration: 16, Objective: 0.4563
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:46 PM: Your problem has 5168 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:46 PM: Finished problem compilation (took 4.264e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5168
  constraints   = 10168
  nnz(P)        = 0
  nnz(A)        = 84928
  cones (total) = 1
    : Nonnegative = 1,  numel = 10168

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8360e-01  +1.0703e+03  1.07e+03  4.22e-01  7.32e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3427e-01  +1.2539e+02  1.25e+02  1.63e-01  3.58e+01  1.48e-02  2.64e-01  9.06e-01  
  3  +5.0920e-01  +3.2480e+01  3.20e+01  1.22e-01  2.67e+01  4.00e-05  2.51e-01  2.24e-01  
  4  +5.0088e-01  +2.7198e+00  2.22e+00  1.52e-02  3.43e+00  5.49e-06  1.60e-01  6.48e-01  
  5  +5.0011e-01  +9.0895e-01  4.09e-01  2.77e-03  6.37e-01  3.01e-05  8.32e-02  9.82e-01  
  6  +5.0005e-01  +7.2899e-01  2.29e-01  1.54e-03  3.55e-01  2.50e-05  3.45e-02  6.88e-01  
  7  +4.9994e-01  +7.1577e-01  2.16e-01  1.19e-03  2.76e-01  8.23e-05  6.85e-03  8.82e-01  
  8  +4.9747e-01  +6.9466e-01  1.97e-01  1.07e-04  2.49e-02  1.38e-03  3.38e-04  9.58e-01  
  9  +4.9422e-01  +6.5830e-01  1.64e-01  5.76e-05  1.34e-02  1.60e-03  1.82e-04  5.43e-01  
 10  +4.9383e-01  +6.5098e-01  1.57e-01  5.00e-05  1.16e-02  1.31e-03  1.57e-04  3.11e-01  
 11  +4.9228e-01  +6.3163e-01  1.39e-01  4.34e-05  1.01e-02  7.60e-04  1.37e-04  3.82e-01  
 12  +4.8969e-01  +6.1641e-01  1.27e-01  3.70e-05  8.63e-03  6.66e-04  1.18e-04  1.79e-01  
 13  +4.8297e-01  +5.7770e-01  9.47e-02  2.47e-05  5.75e-03  3.77e-04  8.07e-05  4.54e-01  
 14  +4.7845e-01  +5.5390e-01  7.55e-02  1.85e-05  4.30e-03  2.13e-04  6.14e-05  4.17e-01  
 15  +4.7432e-01  +5.3375e-01  5.94e-02  1.36e-05  3.16e-03  1.11e-04  4.59e-05  4.76e-01  
 16  +4.7127e-01  +5.1964e-01  4.84e-02  1.05e-05  2.43e-03  5.35e-05  3.58e-05  5.16e-01  
 17  +4.6739e-01  +5.0344e-01  3.60e-02  7.46e-06  1.73e-03  3.46e-05  2.59e-05  3.66e-01  
 18  +4.6636e-01  +4.9818e-01  3.18e-02  6.45e-06  1.50e-03  1.71e-05  2.25e-05  5.22e-01  
 19  +4.6210e-01  +4.8155e-01  1.95e-02  3.80e-06  8.83e-04  9.66e-06  1.36e-05  4.39e-01  
 20  +4.5881e-01  +4.6803e-01  9.22e-03  1.75e-06  4.06e-04  6.29e-07  6.38e-06  9.90e-01  
 21  +4.5574e-01  +4.5688e-01  1.14e-03  2.13e-07  4.95e-05  7.22e-08  7.99e-07  9.15e-01  
 22  +4.5531e-01  +4.5532e-01  1.75e-05  3.28e-09  7.61e-07  1.09e-09  1.23e-08  9.87e-01  
 23  +4.5530e-01  +4.5530e-01  1.75e-07  3.28e-11  7.61e-09  1.09e-11  1.23e-10  9.90e-01  
 24  +4.5530e-01  +4.5530e-01  1.75e-09  3.28e-13  7.61e-11  1.10e-13  1.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 170.1078ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:46 PM: Optimal value: 4.553e-01
(CVXPY) Sep 20 07:48:46 PM: Compilation took 4.264e-02 seconds
(CVXPY) Sep 20 07:48:46 PM: Solver (including time spent in interface) took 1.824e-01 seconds
Iteration: 17, Objective: 0.4553
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:46 PM: Your problem has 5178 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:46 PM: Finished problem compilation (took 4.365e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5178
  constraints   = 10178
  nnz(P)        = 0
  nnz(A)        = 85446
  cones (total) = 1
    : Nonnegative = 1,  numel = 10178

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8359e-01  +1.0703e+03  1.07e+03  4.22e-01  7.31e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3425e-01  +1.2536e+02  1.25e+02  1.63e-01  3.58e+01  1.48e-02  2.64e-01  9.06e-01  
  3  +5.0920e-01  +3.2464e+01  3.20e+01  1.22e-01  2.67e+01  4.00e-05  2.51e-01  2.25e-01  
  4  +5.0088e-01  +2.7207e+00  2.22e+00  1.52e-02  3.43e+00  5.49e-06  1.60e-01  6.48e-01  
  5  +5.0011e-01  +9.1363e-01  4.14e-01  2.80e-03  6.44e-01  3.01e-05  8.36e-02  9.76e-01  
  6  +5.0004e-01  +7.2246e-01  2.22e-01  1.50e-03  3.45e-01  2.51e-05  3.31e-02  7.00e-01  
  7  +4.9992e-01  +7.2605e-01  2.26e-01  1.19e-03  2.76e-01  9.35e-05  6.33e-03  8.96e-01  
  8  +4.9738e-01  +7.0443e-01  2.07e-01  1.09e-04  2.55e-02  1.42e-03  3.48e-04  9.51e-01  
  9  +4.9425e-01  +6.6400e-01  1.70e-01  6.18e-05  1.44e-02  1.51e-03  1.95e-04  5.25e-01  
 10  +4.9366e-01  +6.5561e-01  1.62e-01  5.29e-05  1.23e-02  1.28e-03  1.67e-04  2.95e-01  
 11  +4.9270e-01  +6.4067e-01  1.48e-01  4.66e-05  1.08e-02  8.51e-04  1.47e-04  3.38e-01  
 12  +4.9043e-01  +6.2110e-01  1.31e-01  4.08e-05  9.50e-03  5.44e-04  1.30e-04  2.91e-01  
 13  +4.8559e-01  +5.9460e-01  1.09e-01  3.01e-05  6.99e-03  4.35e-04  9.74e-05  3.08e-01  
 14  +4.8031e-01  +5.6706e-01  8.68e-02  2.20e-05  5.11e-03  2.95e-04  7.28e-05  3.44e-01  
 15  +4.7529e-01  +5.4284e-01  6.75e-02  1.59e-05  3.70e-03  1.95e-04  5.38e-05  3.51e-01  
 16  +4.6918e-01  +5.1406e-01  4.49e-02  9.68e-06  2.25e-03  7.38e-05  3.36e-05  6.14e-01  
 17  +4.6685e-01  +5.0345e-01  3.66e-02  7.60e-06  1.76e-03  4.18e-05  2.66e-05  4.47e-01  
 18  +4.6472e-01  +4.9392e-01  2.92e-02  5.93e-06  1.38e-03  1.51e-05  2.11e-05  6.30e-01  
 19  +4.6056e-01  +4.7726e-01  1.67e-02  3.31e-06  7.68e-04  7.58e-06  1.21e-05  5.01e-01  
 20  +4.5742e-01  +4.6486e-01  7.44e-03  1.43e-06  3.32e-04  1.79e-06  5.30e-06  8.06e-01  
 21  +4.5494e-01  +4.5556e-01  6.22e-04  1.19e-07  2.75e-05  1.01e-07  4.49e-07  9.49e-01  
 22  +4.5470e-01  +4.5471e-01  7.60e-06  1.45e-09  3.36e-07  1.21e-09  5.50e-09  9.88e-01  
 23  +4.5470e-01  +4.5470e-01  7.86e-08  1.50e-11  3.47e-09  1.25e-11  5.69e-11  9.90e-01  
 24  +4.5470e-01  +4.5470e-01  9.59e-10  1.82e-13  4.24e-11  1.54e-13  6.99e-13  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 169.261ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:46 PM: Optimal value: 4.547e-01
(CVXPY) Sep 20 07:48:46 PM: Compilation took 4.365e-02 seconds
(CVXPY) Sep 20 07:48:46 PM: Solver (including time spent in interface) took 1.811e-01 seconds
Iteration: 18, Objective: 0.4547
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:46 PM: Your problem has 5188 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:46 PM: Finished problem compilation (took 4.600e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5188
  constraints   = 10188
  nnz(P)        = 0
  nnz(A)        = 86298
  cones (total) = 1
    : Nonnegative = 1,  numel = 10188

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8357e-01  +1.0702e+03  1.07e+03  4.22e-01  7.31e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3426e-01  +1.2537e+02  1.25e+02  1.63e-01  3.57e+01  1.48e-02  2.64e-01  9.06e-01  
  3  +5.0920e-01  +3.2464e+01  3.20e+01  1.22e-01  2.66e+01  4.00e-05  2.51e-01  2.25e-01  
  4  +5.0088e-01  +2.7173e+00  2.22e+00  1.52e-02  3.42e+00  5.49e-06  1.60e-01  6.49e-01  
  5  +5.0011e-01  +9.1982e-01  4.20e-01  2.84e-03  6.54e-01  3.01e-05  8.39e-02  9.68e-01  
  6  +5.0005e-01  +7.4739e-01  2.47e-01  1.67e-03  3.84e-01  2.59e-05  3.72e-02  6.44e-01  
  7  +4.9994e-01  +7.4576e-01  2.46e-01  1.29e-03  2.99e-01  8.78e-05  6.82e-03  9.54e-01  
  8  +4.9763e-01  +7.2220e-01  2.25e-01  1.21e-04  2.81e-02  1.29e-03  3.84e-04  9.48e-01  
  9  +4.9462e-01  +6.7464e-01  1.80e-01  6.76e-05  1.57e-02  1.30e-03  2.14e-04  5.41e-01  
 10  +4.9428e-01  +6.6546e-01  1.71e-01  5.80e-05  1.35e-02  1.05e-03  1.82e-04  3.22e-01  
 11  +4.9351e-01  +6.5646e-01  1.63e-01  5.06e-05  1.18e-02  9.08e-04  1.59e-04  2.50e-01  
 12  +4.9279e-01  +6.4729e-01  1.55e-01  4.93e-05  1.15e-02  7.38e-04  1.56e-04  1.07e-01  
 13  +4.8840e-01  +6.1271e-01  1.24e-01  3.61e-05  8.40e-03  3.64e-04  1.16e-04  5.07e-01  
 14  +4.8016e-01  +5.6824e-01  8.81e-02  2.21e-05  5.14e-03  2.11e-04  7.34e-05  4.72e-01  
 15  +4.7669e-01  +5.5137e-01  7.47e-02  1.78e-05  4.15e-03  1.44e-04  6.01e-05  3.17e-01  
 16  +4.7168e-01  +5.2705e-01  5.54e-02  1.23e-05  2.85e-03  4.93e-05  4.23e-05  6.30e-01  
 17  +4.6683e-01  +5.0617e-01  3.93e-02  8.28e-06  1.92e-03  2.69e-05  2.92e-05  4.58e-01  
 18  +4.6543e-01  +5.0029e-01  3.49e-02  7.21e-06  1.67e-03  2.23e-05  2.56e-05  1.85e-01  
 19  +4.6354e-01  +4.9052e-01  2.70e-02  5.39e-06  1.25e-03  2.66e-06  1.92e-05  9.30e-01  
 20  +4.5972e-01  +4.7602e-01  1.63e-02  3.19e-06  7.41e-04  1.55e-06  1.17e-05  4.28e-01  
 21  +4.5657e-01  +4.6365e-01  7.07e-03  1.36e-06  3.17e-04  4.14e-07  5.10e-06  9.90e-01  
 22  +4.5408e-01  +4.5455e-01  4.66e-04  8.93e-08  2.07e-05  2.55e-08  3.43e-07  9.83e-01  
 23  +4.5391e-01  +4.5392e-01  1.60e-05  3.06e-09  7.11e-07  8.76e-10  1.18e-08  9.90e-01  
 24  +4.5390e-01  +4.5390e-01  1.63e-07  3.11e-11  7.21e-09  8.89e-12  1.20e-10  9.90e-01  
 25  +4.5390e-01  +4.5390e-01  1.90e-09  3.64e-13  8.44e-11  1.05e-13  1.41e-12  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 188.4785ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:47 PM: Optimal value: 4.539e-01
(CVXPY) Sep 20 07:48:47 PM: Compilation took 4.600e-02 seconds
(CVXPY) Sep 20 07:48:47 PM: Solver (including time spent in interface) took 2.014e-01 seconds
Iteration: 19, Objective: 0.4539
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:47 PM: Your problem has 5198 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:47 PM: Finished problem compilation (took 5.127e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5198
  constraints   = 10198
  nnz(P)        = 0
  nnz(A)        = 87116
  cones (total) = 1
    : Nonnegative = 1,  numel = 10198

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8354e-01  +1.0702e+03  1.07e+03  4.22e-01  7.31e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3424e-01  +1.2533e+02  1.25e+02  1.63e-01  3.56e+01  1.48e-02  2.64e-01  9.07e-01  
  3  +5.0919e-01  +3.2453e+01  3.19e+01  1.22e-01  2.66e+01  4.01e-05  2.51e-01  2.25e-01  
  4  +5.0088e-01  +2.7195e+00  2.22e+00  1.52e-02  3.43e+00  5.50e-06  1.60e-01  6.48e-01  
  5  +5.0012e-01  +9.3955e-01  4.39e-01  2.98e-03  6.85e-01  2.99e-05  8.59e-02  9.42e-01  
  6  +5.0006e-01  +7.5791e-01  2.58e-01  1.74e-03  4.01e-01  2.54e-05  3.95e-02  6.18e-01  
  7  +4.9997e-01  +7.5051e-01  2.51e-01  1.40e-03  3.23e-01  7.42e-05  8.09e-03  9.40e-01  
  8  +4.9786e-01  +7.2684e-01  2.29e-01  1.31e-04  3.06e-02  1.18e-03  4.18e-04  9.52e-01  
  9  +4.9527e-01  +6.8316e-01  1.88e-01  7.55e-05  1.76e-02  1.23e-03  2.40e-04  5.18e-01  
 10  +4.9425e-01  +6.6452e-01  1.70e-01  5.90e-05  1.37e-02  9.05e-04  1.86e-04  4.32e-01  
 11  +4.9367e-01  +6.5598e-01  1.62e-01  5.18e-05  1.21e-02  7.60e-04  1.63e-04  2.61e-01  
 12  +4.9308e-01  +6.4808e-01  1.55e-01  5.08e-05  1.18e-02  6.28e-04  1.60e-04  1.01e-01  
 13  +4.8869e-01  +6.1264e-01  1.24e-01  3.64e-05  8.47e-03  2.80e-04  1.17e-04  5.64e-01  
 14  +4.8136e-01  +5.7342e-01  9.21e-02  2.35e-05  5.47e-03  1.58e-04  7.79e-05  4.81e-01  
 15  +4.7680e-01  +5.5155e-01  7.47e-02  1.78e-05  4.13e-03  9.04e-05  5.99e-05  4.23e-01  
 16  +4.7194e-01  +5.2935e-01  5.74e-02  1.29e-05  2.99e-03  4.29e-05  4.44e-05  5.00e-01  
 17  +4.6533e-01  +5.0131e-01  3.60e-02  7.53e-06  1.75e-03  1.93e-05  2.68e-05  5.47e-01  
 18  +4.6417e-01  +4.9663e-01  3.25e-02  6.68e-06  1.55e-03  1.68e-05  2.39e-05  1.46e-01  
 19  +4.6274e-01  +4.8893e-01  2.62e-02  5.19e-06  1.20e-03  2.70e-06  1.86e-05  9.15e-01  
 20  +4.5899e-01  +4.7489e-01  1.59e-02  3.09e-06  7.17e-04  1.53e-06  1.14e-05  4.75e-01  
 21  +4.5445e-01  +4.5785e-01  3.39e-03  6.49e-07  1.51e-04  2.96e-07  2.47e-06  8.14e-01  
 22  +4.5352e-01  +4.5432e-01  8.03e-04  1.53e-07  3.55e-05  4.59e-08  5.88e-07  9.90e-01  
 23  +4.5321e-01  +4.5322e-01  1.40e-05  2.67e-09  6.19e-07  7.98e-10  1.03e-08  9.83e-01  
 24  +4.5320e-01  +4.5320e-01  1.40e-07  2.67e-11  6.19e-09  7.99e-12  1.03e-10  9.90e-01  
 25  +4.5320e-01  +4.5320e-01  1.41e-09  2.68e-13  6.21e-11  8.04e-14  1.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 201.1141ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:47 PM: Optimal value: 4.532e-01
(CVXPY) Sep 20 07:48:47 PM: Compilation took 5.127e-02 seconds
(CVXPY) Sep 20 07:48:47 PM: Solver (including time spent in interface) took 2.140e-01 seconds
Iteration: 20, Objective: 0.4532
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:47 PM: Your problem has 5201 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:47 PM: Finished problem compilation (took 4.860e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5201
  constraints   = 10201
  nnz(P)        = 0
  nnz(A)        = 87360
  cones (total) = 1
    : Nonnegative = 1,  numel = 10201

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8348e-01  +1.0704e+03  1.07e+03  4.22e-01  7.31e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3423e-01  +1.2533e+02  1.25e+02  1.63e-01  3.56e+01  1.48e-02  2.64e-01  9.07e-01  
  3  +5.0919e-01  +3.2457e+01  3.19e+01  1.22e-01  2.66e+01  4.01e-05  2.51e-01  2.26e-01  
  4  +5.0088e-01  +2.7236e+00  2.22e+00  1.52e-02  3.43e+00  5.50e-06  1.60e-01  6.48e-01  
  5  +5.0012e-01  +9.4254e-01  4.42e-01  3.00e-03  6.89e-01  3.01e-05  8.60e-02  9.41e-01  
  6  +5.0006e-01  +7.7241e-01  2.72e-01  1.84e-03  4.23e-01  2.61e-05  4.17e-02  5.91e-01  
  7  +5.0000e-01  +7.5876e-01  2.59e-01  1.58e-03  3.65e-01  5.72e-05  1.16e-02  8.51e-01  
  8  +4.9819e-01  +6.9679e-01  1.99e-01  1.32e-04  3.07e-02  1.00e-03  4.24e-04  9.90e-01  
  9  +4.9517e-01  +6.6053e-01  1.65e-01  6.44e-05  1.50e-02  1.32e-03  2.05e-04  6.00e-01  
 10  +4.9488e-01  +6.5636e-01  1.61e-01  5.49e-05  1.28e-02  1.03e-03  1.72e-04  3.95e-01  
 11  +4.9417e-01  +6.4870e-01  1.55e-01  4.83e-05  1.12e-02  8.15e-04  1.51e-04  3.08e-01  
 12  +4.9228e-01  +6.2961e-01  1.37e-01  4.54e-05  1.06e-02  3.83e-04  1.44e-04  3.54e-01  
 13  +4.8931e-01  +6.1301e-01  1.24e-01  3.70e-05  8.61e-03  2.92e-04  1.18e-04  3.18e-01  
 14  +4.8289e-01  +5.8056e-01  9.77e-02  2.54e-05  5.89e-03  2.04e-04  8.32e-05  3.93e-01  
 15  +4.7773e-01  +5.5547e-01  7.77e-02  1.88e-05  4.36e-03  1.07e-04  6.30e-05  4.56e-01  
 16  +4.7390e-01  +5.3769e-01  6.38e-02  1.46e-05  3.39e-03  5.07e-05  4.98e-05  4.96e-01  
 17  +4.6739e-01  +5.1006e-01  4.27e-02  9.11e-06  2.11e-03  2.67e-05  3.21e-05  4.70e-01  
 18  +4.6527e-01  +5.0106e-01  3.58e-02  7.42e-06  1.72e-03  1.94e-05  2.64e-05  2.93e-01  
 19  +4.6420e-01  +4.9451e-01  3.03e-02  6.06e-06  1.41e-03  1.42e-06  2.17e-05  9.90e-01  
 20  +4.5816e-01  +4.7147e-01  1.33e-02  2.61e-06  6.05e-04  6.44e-07  9.67e-06  6.71e-01  
 21  +4.5516e-01  +4.6050e-01  5.34e-03  1.02e-06  2.37e-04  2.75e-07  3.87e-06  8.25e-01  
 22  +4.5340e-01  +4.5391e-01  5.11e-04  9.74e-08  2.26e-05  2.82e-08  3.75e-07  9.90e-01  
 23  +4.5320e-01  +4.5321e-01  5.79e-06  1.10e-09  2.56e-07  3.18e-10  4.25e-09  9.89e-01  
 24  +4.5320e-01  +4.5320e-01  5.80e-08  1.11e-11  2.56e-09  3.19e-12  4.27e-11  9.90e-01  
 25  +4.5320e-01  +4.5320e-01  5.84e-10  1.11e-13  2.58e-11  3.22e-14  4.31e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 193.675ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:47 PM: Optimal value: 4.532e-01
(CVXPY) Sep 20 07:48:47 PM: Compilation took 4.860e-02 seconds
(CVXPY) Sep 20 07:48:47 PM: Solver (including time spent in interface) took 2.068e-01 seconds
Iteration: 21, Objective: 0.4532
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:48 PM: Your problem has 5202 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:48 PM: Finished problem compilation (took 4.973e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5202
  constraints   = 10202
  nnz(P)        = 0
  nnz(A)        = 87442
  cones (total) = 1
    : Nonnegative = 1,  numel = 10202

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8348e-01  +1.0704e+03  1.07e+03  4.22e-01  7.31e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3423e-01  +1.2533e+02  1.25e+02  1.63e-01  3.56e+01  1.49e-02  2.64e-01  9.07e-01  
  3  +5.0919e-01  +3.2456e+01  3.19e+01  1.22e-01  2.66e+01  4.01e-05  2.51e-01  2.26e-01  
  4  +5.0088e-01  +2.7240e+00  2.22e+00  1.52e-02  3.43e+00  5.50e-06  1.60e-01  6.48e-01  
  5  +5.0012e-01  +9.4397e-01  4.44e-01  3.01e-03  6.92e-01  3.01e-05  8.62e-02  9.39e-01  
  6  +5.0006e-01  +7.7265e-01  2.73e-01  1.84e-03  4.24e-01  2.61e-05  4.18e-02  5.89e-01  
  7  +5.0000e-01  +7.5899e-01  2.59e-01  1.58e-03  3.65e-01  5.76e-05  1.15e-02  8.55e-01  
  8  +4.9814e-01  +6.9855e-01  2.00e-01  1.29e-04  3.01e-02  1.03e-03  4.16e-04  9.88e-01  
  9  +4.9489e-01  +6.5842e-01  1.64e-01  6.20e-05  1.44e-02  1.32e-03  1.97e-04  6.17e-01  
 10  +4.9507e-01  +6.5844e-01  1.63e-01  5.39e-05  1.26e-02  1.02e-03  1.68e-04  4.07e-01  
 11  +4.9405e-01  +6.4695e-01  1.53e-01  4.74e-05  1.10e-02  7.01e-04  1.48e-04  3.58e-01  
 12  +4.9032e-01  +6.1253e-01  1.22e-01  4.01e-05  9.32e-03  6.39e-05  1.28e-04  6.76e-01  
 13  +4.8490e-01  +5.8657e-01  1.02e-01  2.82e-05  6.56e-03  4.99e-05  9.21e-05  3.79e-01  
 14  +4.7992e-01  +5.6370e-01  8.38e-02  2.13e-05  4.95e-03  3.07e-05  7.13e-05  4.01e-01  
 15  +4.7386e-01  +5.3722e-01  6.34e-02  1.48e-05  3.43e-03  1.74e-05  5.08e-05  4.47e-01  
 16  +4.6766e-01  +5.1059e-01  4.29e-02  9.28e-06  2.15e-03  7.35e-06  3.28e-05  6.00e-01  
 17  +4.6520e-01  +5.0043e-01  3.52e-02  7.38e-06  1.71e-03  5.43e-06  2.64e-05  3.05e-01  
 18  +4.6434e-01  +4.9559e-01  3.12e-02  6.35e-06  1.47e-03  2.22e-06  2.29e-05  8.21e-01  
 19  +4.5977e-01  +4.7769e-01  1.79e-02  3.56e-06  8.26e-04  1.12e-06  1.31e-05  7.22e-01  
 20  +4.5775e-01  +4.7019e-01  1.24e-02  2.43e-06  5.63e-04  7.75e-07  9.02e-06  4.00e-01  
 21  +4.5524e-01  +4.6075e-01  5.50e-03  1.06e-06  2.45e-04  3.38e-07  4.00e-06  6.39e-01  
 22  +4.5494e-01  +4.5951e-01  4.57e-03  8.77e-07  2.03e-04  2.71e-07  3.33e-06  4.77e-01  
 23  +4.5362e-01  +4.5471e-01  1.09e-03  2.08e-07  4.83e-05  6.22e-08  7.99e-07  8.91e-01  
 24  +4.5321e-01  +4.5322e-01  1.74e-05  3.32e-09  7.70e-07  9.80e-10  1.28e-08  9.86e-01  
 25  +4.5320e-01  +4.5320e-01  1.75e-07  3.33e-11  7.72e-09  9.82e-12  1.28e-10  9.90e-01  
 26  +4.5320e-01  +4.5320e-01  1.76e-09  3.35e-13  7.77e-11  9.95e-14  1.30e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 202.3983ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:48 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:48 PM: Optimal value: 4.532e-01
(CVXPY) Sep 20 07:48:48 PM: Compilation took 4.973e-02 seconds
(CVXPY) Sep 20 07:48:48 PM: Solver (including time spent in interface) took 2.145e-01 seconds
Iteration: 22, Objective: 0.4532
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:48 PM: Your problem has 5209 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:48 PM: Finished problem compilation (took 5.020e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:48 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5209
  constraints   = 10209
  nnz(P)        = 0
  nnz(A)        = 87888
  cones (total) = 1
    : Nonnegative = 1,  numel = 10209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8345e-01  +1.0705e+03  1.07e+03  4.22e-01  7.30e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3421e-01  +1.2532e+02  1.25e+02  1.63e-01  3.56e+01  1.49e-02  2.64e-01  9.07e-01  
  3  +5.0919e-01  +3.2449e+01  3.19e+01  1.22e-01  2.65e+01  4.01e-05  2.50e-01  2.26e-01  
  4  +5.0088e-01  +2.7259e+00  2.23e+00  1.53e-02  3.44e+00  5.50e-06  1.60e-01  6.48e-01  
  5  +5.0013e-01  +9.5265e-01  4.53e-01  3.07e-03  7.05e-01  3.00e-05  8.70e-02  9.28e-01  
  6  +5.0006e-01  +7.7285e-01  2.73e-01  1.84e-03  4.24e-01  2.58e-05  4.17e-02  5.97e-01  
  7  +5.0000e-01  +7.6025e-01  2.60e-01  1.58e-03  3.65e-01  5.78e-05  1.13e-02  8.61e-01  
  8  +4.9816e-01  +7.0237e-01  2.04e-01  1.31e-04  3.06e-02  1.02e-03  4.23e-04  9.85e-01  
  9  +4.9518e-01  +6.6391e-01  1.69e-01  6.62e-05  1.54e-02  1.27e-03  2.11e-04  5.91e-01  
 10  +4.9483e-01  +6.5860e-01  1.64e-01  5.56e-05  1.29e-02  9.95e-04  1.74e-04  4.04e-01  
 11  +4.9412e-01  +6.5249e-01  1.58e-01  4.91e-05  1.14e-02  8.80e-04  1.54e-04  2.41e-01  
 12  +4.9212e-01  +6.3193e-01  1.40e-01  4.51e-05  1.05e-02  4.55e-04  1.43e-04  3.38e-01  
 13  +4.8656e-01  +6.0125e-01  1.15e-01  3.15e-05  7.31e-03  3.49e-04  1.02e-04  3.79e-01  
 14  +4.8282e-01  +5.8037e-01  9.76e-02  2.57e-05  5.97e-03  1.78e-04  8.47e-05  4.24e-01  
 15  +4.7618e-01  +5.4976e-01  7.36e-02  1.76e-05  4.08e-03  1.20e-04  5.96e-05  3.58e-01  
 16  +4.6977e-01  +5.1989e-01  5.01e-02  1.10e-05  2.56e-03  2.68e-05  3.86e-05  7.27e-01  
 17  +4.6724e-01  +5.0909e-01  4.19e-02  8.92e-06  2.07e-03  1.77e-05  3.15e-05  3.58e-01  
 18  +4.6549e-01  +5.0202e-01  3.65e-02  7.63e-06  1.77e-03  1.48e-05  2.72e-05  1.77e-01  
 19  +4.6321e-01  +4.9123e-01  2.80e-02  5.60e-06  1.30e-03  1.42e-06  2.01e-05  9.90e-01  
 20  +4.5919e-01  +4.7597e-01  1.68e-02  3.29e-06  7.64e-04  8.46e-07  1.21e-05  4.33e-01  
 21  +4.5406e-01  +4.5643e-01  2.36e-03  4.56e-07  1.06e-04  1.16e-07  1.74e-06  8.95e-01  
 22  +4.5322e-01  +4.5327e-01  5.37e-05  1.03e-08  2.40e-06  2.77e-09  3.99e-08  9.90e-01  
 23  +4.5320e-01  +4.5320e-01  5.43e-07  1.05e-10  2.43e-08  2.80e-11  4.03e-10  9.90e-01  
 24  +4.5320e-01  +4.5320e-01  5.59e-09  1.08e-12  2.50e-10  2.89e-13  4.16e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 179.5463ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:48 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:48 PM: Optimal value: 4.532e-01
(CVXPY) Sep 20 07:48:48 PM: Compilation took 5.020e-02 seconds
(CVXPY) Sep 20 07:48:48 PM: Solver (including time spent in interface) took 1.923e-01 seconds
Iteration: 23, Objective: 0.4532
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:48 PM: Your problem has 5213 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:48 PM: Finished problem compilation (took 4.754e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5213
  constraints   = 10213
  nnz(P)        = 0
  nnz(A)        = 88221
  cones (total) = 1
    : Nonnegative = 1,  numel = 10213

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8343e-01  +1.0706e+03  1.07e+03  4.23e-01  7.30e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3420e-01  +1.2529e+02  1.25e+02  1.63e-01  3.56e+01  1.49e-02  2.64e-01  9.07e-01  
  3  +5.0919e-01  +3.2447e+01  3.19e+01  1.22e-01  2.65e+01  4.01e-05  2.50e-01  2.26e-01  
  4  +5.0088e-01  +2.7292e+00  2.23e+00  1.53e-02  3.44e+00  5.50e-06  1.60e-01  6.48e-01  
  5  +5.0013e-01  +9.6213e-01  4.62e-01  3.13e-03  7.20e-01  3.00e-05  8.80e-02  9.16e-01  
  6  +5.0006e-01  +7.7438e-01  2.74e-01  1.85e-03  4.27e-01  2.55e-05  4.24e-02  5.87e-01  
  7  +5.0000e-01  +7.6236e-01  2.62e-01  1.59e-03  3.67e-01  5.76e-05  1.13e-02  8.70e-01  
  8  +4.9818e-01  +7.0681e-01  2.09e-01  1.35e-04  3.13e-02  1.01e-03  4.33e-04  9.82e-01  
  9  +4.9556e-01  +6.7159e-01  1.76e-01  7.25e-05  1.69e-02  1.23e-03  2.31e-04  5.51e-01  
 10  +4.9460e-01  +6.6026e-01  1.66e-01  5.86e-05  1.36e-02  1.00e-03  1.84e-04  3.83e-01  
 11  +4.9418e-01  +6.5608e-01  1.62e-01  5.24e-05  1.22e-02  9.16e-04  1.65e-04  2.18e-01  
 12  +4.9269e-01  +6.3471e-01  1.42e-01  4.84e-05  1.13e-02  3.67e-04  1.53e-04  4.36e-01  
 13  +4.9010e-01  +6.1954e-01  1.29e-01  4.01e-05  9.32e-03  2.90e-04  1.28e-04  2.94e-01  
 14  +4.8939e-01  +6.1404e-01  1.25e-01  3.83e-05  8.91e-03  2.02e-04  1.23e-04  2.51e-01  
 15  +4.8230e-01  +5.7901e-01  9.67e-02  2.50e-05  5.80e-03  1.57e-04  8.24e-05  3.74e-01  
 16  +4.7717e-01  +5.5418e-01  7.70e-02  1.86e-05  4.31e-03  7.85e-05  6.28e-05  4.68e-01  
 17  +4.7083e-01  +5.2506e-01  5.42e-02  1.21e-05  2.82e-03  2.53e-05  4.23e-05  6.38e-01  
 18  +4.6445e-01  +4.9809e-01  3.36e-02  7.05e-06  1.64e-03  1.20e-05  2.53e-05  5.33e-01  
 19  +4.6384e-01  +4.9554e-01  3.17e-02  6.57e-06  1.52e-03  1.06e-05  2.36e-05  1.39e-01  
 20  +4.6022e-01  +4.7976e-01  1.95e-02  3.86e-06  8.96e-04  1.27e-06  1.41e-05  9.70e-01  
 21  +4.5457e-01  +4.5827e-01  3.70e-03  7.20e-07  1.67e-04  1.97e-07  2.73e-06  9.90e-01  
 22  +4.5327e-01  +4.5345e-01  1.84e-04  3.56e-08  8.25e-06  9.80e-09  1.37e-07  9.70e-01  
 23  +4.5320e-01  +4.5320e-01  1.85e-06  3.58e-10  8.31e-08  9.86e-11  1.38e-09  9.90e-01  
 24  +4.5320e-01  +4.5320e-01  1.87e-08  3.63e-12  8.41e-10  1.00e-12  1.40e-11  9.90e-01  
 25  +4.5320e-01  +4.5320e-01  1.96e-10  3.81e-14  8.81e-12  1.05e-14  1.47e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 176.6491ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:49 PM: Optimal value: 4.532e-01
(CVXPY) Sep 20 07:48:49 PM: Compilation took 4.754e-02 seconds
(CVXPY) Sep 20 07:48:49 PM: Solver (including time spent in interface) took 1.889e-01 seconds
Iteration: 24, Objective: 0.4532
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:49 PM: Your problem has 5219 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:49 PM: Finished problem compilation (took 4.735e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5219
  constraints   = 10219
  nnz(P)        = 0
  nnz(A)        = 88572
  cones (total) = 1
    : Nonnegative = 1,  numel = 10219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8342e-01  +1.0706e+03  1.07e+03  4.23e-01  7.30e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3419e-01  +1.2528e+02  1.25e+02  1.63e-01  3.55e+01  1.49e-02  2.64e-01  9.07e-01  
  3  +5.0919e-01  +3.2446e+01  3.19e+01  1.22e-01  2.65e+01  4.02e-05  2.50e-01  2.27e-01  
  4  +5.0088e-01  +2.7310e+00  2.23e+00  1.53e-02  3.44e+00  5.51e-06  1.60e-01  6.47e-01  
  5  +5.0013e-01  +9.5554e-01  4.55e-01  3.09e-03  7.10e-01  3.01e-05  8.72e-02  9.26e-01  
  6  +5.0006e-01  +7.7372e-01  2.74e-01  1.85e-03  4.26e-01  2.58e-05  4.20e-02  5.87e-01  
  7  +5.0000e-01  +7.6146e-01  2.61e-01  1.58e-03  3.64e-01  5.95e-05  1.11e-02  8.70e-01  
  8  +4.9811e-01  +7.0942e-01  2.11e-01  1.35e-04  3.13e-02  1.05e-03  4.32e-04  9.80e-01  
  9  +4.9542e-01  +6.7413e-01  1.79e-01  7.19e-05  1.67e-02  1.29e-03  2.29e-04  5.52e-01  
 10  +4.9475e-01  +6.6370e-01  1.69e-01  5.86e-05  1.36e-02  1.01e-03  1.85e-04  4.04e-01  
 11  +4.9447e-01  +6.5833e-01  1.64e-01  5.37e-05  1.25e-02  8.47e-04  1.69e-04  2.34e-01  
 12  +4.9157e-01  +6.2128e-01  1.30e-01  4.38e-05  1.02e-02  4.14e-05  1.40e-04  7.62e-01  
 13  +4.8771e-01  +6.0162e-01  1.14e-01  3.39e-05  7.89e-03  2.59e-05  1.10e-04  4.65e-01  
 14  +4.8178e-01  +5.7373e-01  9.20e-02  2.43e-05  5.65e-03  1.76e-05  8.09e-05  3.95e-01  
 15  +4.7622e-01  +5.4914e-01  7.29e-02  1.78e-05  4.12e-03  1.25e-05  6.06e-05  3.28e-01  
 16  +4.7122e-01  +5.2701e-01  5.58e-02  1.27e-05  2.96e-03  6.29e-06  4.45e-05  5.40e-01  
 17  +4.6420e-01  +4.9739e-01  3.32e-02  7.03e-06  1.63e-03  2.85e-06  2.53e-05  6.21e-01  
 18  +4.6365e-01  +4.9517e-01  3.15e-02  6.60e-06  1.53e-03  2.63e-06  2.38e-05  1.27e-01  
 19  +4.6047e-01  +4.8151e-01  2.10e-02  4.20e-06  9.74e-04  1.17e-06  1.54e-05  9.40e-01  
 20  +4.5523e-01  +4.6144e-01  6.20e-03  1.22e-06  2.83e-04  3.31e-07  4.63e-06  8.86e-01  
 21  +4.5330e-01  +4.5412e-01  8.14e-04  1.59e-07  3.68e-05  4.38e-08  6.12e-07  9.56e-01  
 22  +4.5300e-01  +4.5301e-01  8.61e-06  1.68e-09  3.90e-07  4.63e-10  6.50e-09  9.90e-01  
 23  +4.5300e-01  +4.5300e-01  8.70e-08  1.70e-11  3.94e-09  4.67e-12  6.56e-11  9.90e-01  
 24  +4.5300e-01  +4.5300e-01  8.92e-10  1.74e-13  4.04e-11  4.80e-14  6.74e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 173.9894ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:49 PM: Optimal value: 4.530e-01
(CVXPY) Sep 20 07:48:49 PM: Compilation took 4.735e-02 seconds
(CVXPY) Sep 20 07:48:49 PM: Solver (including time spent in interface) took 1.854e-01 seconds
Iteration: 25, Objective: 0.4530
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:48:49 PM: Your problem has 5222 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:48:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:48:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:48:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:48:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:48:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:48:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:48:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:48:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:48:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:48:49 PM: Finished problem compilation (took 4.482e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5222
  constraints   = 10222
  nnz(P)        = 0
  nnz(A)        = 88703
  cones (total) = 1
    : Nonnegative = 1,  numel = 10222

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8341e-01  +1.0707e+03  1.07e+03  4.23e-01  7.30e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3418e-01  +1.2526e+02  1.25e+02  1.63e-01  3.55e+01  1.49e-02  2.64e-01  9.08e-01  
  3  +5.0918e-01  +3.2440e+01  3.19e+01  1.22e-01  2.65e+01  4.02e-05  2.50e-01  2.27e-01  
  4  +5.0088e-01  +2.7322e+00  2.23e+00  1.53e-02  3.44e+00  5.51e-06  1.60e-01  6.47e-01  
  5  +5.0012e-01  +9.4897e-01  4.49e-01  3.05e-03  7.00e-01  3.02e-05  8.64e-02  9.36e-01  
  6  +5.0006e-01  +7.7634e-01  2.76e-01  1.87e-03  4.30e-01  2.64e-05  4.19e-02  5.91e-01  
  7  +4.9999e-01  +7.6438e-01  2.64e-01  1.57e-03  3.63e-01  6.21e-05  1.06e-02  8.93e-01  
  8  +4.9809e-01  +7.1769e-01  2.20e-01  1.38e-04  3.21e-02  1.06e-03  4.43e-04  9.73e-01  
  9  +4.9545e-01  +6.7927e-01  1.84e-01  7.46e-05  1.74e-02  1.25e-03  2.37e-04  5.49e-01  
 10  +4.9452e-01  +6.6445e-01  1.70e-01  5.69e-05  1.32e-02  9.25e-04  1.79e-04  4.89e-01  
 11  +4.9409e-01  +6.5572e-01  1.62e-01  5.57e-05  1.30e-02  6.90e-04  1.76e-04  1.73e-01  
 12  +4.9298e-01  +6.4677e-01  1.54e-01  5.16e-05  1.20e-02  6.05e-04  1.64e-04  1.38e-01  
 13  +4.8858e-01  +6.0929e-01  1.21e-01  3.67e-05  8.52e-03  1.18e-04  1.18e-04  7.39e-01  
 14  +4.8141e-01  +5.7412e-01  9.27e-02  2.41e-05  5.60e-03  7.87e-05  8.01e-05  4.31e-01  
 15  +4.7668e-01  +5.5229e-01  7.56e-02  1.84e-05  4.27e-03  4.36e-05  6.25e-05  4.30e-01  
 16  +4.7082e-01  +5.2589e-01  5.51e-02  1.25e-05  2.90e-03  1.82e-05  4.37e-05  5.64e-01  
 17  +4.6388e-01  +4.9634e-01  3.25e-02  6.85e-06  1.59e-03  7.31e-06  2.48e-05  6.14e-01  
 18  +4.6339e-01  +4.9435e-01  3.10e-02  6.46e-06  1.50e-03  6.69e-06  2.34e-05  1.08e-01  
 19  +4.6125e-01  +4.8439e-01  2.31e-02  4.63e-06  1.07e-03  1.28e-06  1.69e-05  9.90e-01  
 20  +4.5566e-01  +4.6319e-01  7.53e-03  1.48e-06  3.43e-04  4.04e-07  5.59e-06  7.70e-01  
 21  +4.5330e-01  +4.5408e-01  7.85e-04  1.53e-07  3.55e-05  4.26e-08  5.91e-07  9.90e-01  
 22  +4.5300e-01  +4.5301e-01  8.30e-06  1.62e-09  3.76e-07  4.49e-10  6.27e-09  9.90e-01  
 23  +4.5300e-01  +4.5300e-01  8.39e-08  1.64e-11  3.80e-09  4.54e-12  6.34e-11  9.90e-01  
 24  +4.5300e-01  +4.5300e-01  8.56e-10  1.67e-13  3.87e-11  4.63e-14  6.46e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 166.5872ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:48:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:48:49 PM: Optimal value: 4.530e-01
(CVXPY) Sep 20 07:48:49 PM: Compilation took 4.482e-02 seconds
(CVXPY) Sep 20 07:48:49 PM: Solver (including time spent in interface) took 1.779e-01 seconds
FULL MODEL:
  Accruacy: 0.5229
  Our objective: 0.045799999999999993

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0)                                  <-- (term's our objective: 0.0112)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0018)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0026)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0026)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.0042)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0022)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.0036)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.0038)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 17.837024450302124
Best over terms:
  Our final objective: 0.011200000000000009
    Its accruacy: 0.5056
    Its hamming distance: 3
  Shortest hamming distance: 3
    Its our objective: 0.011200000000000009
  Highest accruacy: 0.5056
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

