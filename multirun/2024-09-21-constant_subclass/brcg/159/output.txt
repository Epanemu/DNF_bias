Command:
python test_script.py -s constant_subclass -d 4 -n 50000 --seed 21 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.07368000000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 4.

Computed total variation: 0.07368000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:13 PM: Your problem has 25009 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:13 PM: Finished problem compilation (took 8.552e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25009
  constraints   = 50009
  nnz(P)        = 0
  nnz(A)        = 175009
  cones (total) = 1
    : Nonnegative = 1,  numel = 50009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5004e+04  2.50e+04  9.93e-01  1.93e+02  1.00e+00  1.00e+00   ------   
  1  +6.0822e-01  +4.8427e+03  4.84e+03  3.41e-01  1.08e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5118e-01  +7.5402e+02  7.53e+02  1.44e-01  5.58e+01  8.21e-03  2.28e-01  7.23e-01  
  3  +5.1149e-01  +1.6849e+02  1.68e+02  1.31e-01  5.06e+01  1.85e-05  2.26e-01  5.77e-02  
  4  +5.0022e-01  +3.3170e+00  2.82e+00  8.41e-03  3.21e+00  1.57e-06  1.71e-01  7.77e-01  
  5  +5.0002e-01  +8.9392e-01  3.94e-01  1.19e-03  4.60e-01  9.90e-06  1.00e-01  9.90e-01  
  6  +5.0000e-01  +5.6220e-01  6.22e-02  1.86e-04  7.19e-02  2.79e-06  1.68e-02  8.43e-01  
  7  +4.9990e-01  +6.8228e-01  1.82e-01  3.13e-04  1.21e-01  9.05e-05  1.27e-03  9.68e-01  
  8  +4.9918e-01  +6.7686e-01  1.78e-01  5.70e-05  2.21e-02  5.98e-04  1.80e-04  8.60e-01  
  9  +4.9710e-01  +5.7824e-01  8.11e-02  7.23e-06  2.80e-03  1.55e-03  2.22e-05  9.90e-01  
 10  +4.9284e-01  +5.5434e-01  6.15e-02  3.16e-06  1.22e-03  1.82e-03  9.74e-06  6.50e-01  
 11  +4.8684e-01  +5.1229e-01  2.55e-02  1.49e-06  5.78e-04  1.56e-05  4.84e-06  7.29e-01  
 12  +4.8091e-01  +4.8395e-01  3.04e-03  1.49e-07  5.77e-05  1.55e-06  5.10e-07  9.01e-01  
 13  +4.7997e-01  +4.8015e-01  1.77e-04  8.29e-09  3.21e-06  8.16e-08  2.95e-08  9.47e-01  
 14  +4.7991e-01  +4.7992e-01  7.34e-06  3.12e-10  1.21e-07  4.41e-09  2.89e-09  9.90e-01  
 15  +4.7990e-01  +4.7990e-01  1.06e-07  4.28e-12  1.68e-09  7.97e-10  2.53e-10  9.90e-01  
 16  +4.7990e-01  +4.7990e-01  1.10e-09  4.43e-14  1.74e-11  8.19e-12  2.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 286.5653ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:13 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:13 PM: Optimal value: 4.799e-01
(CVXPY) Sep 20 07:30:13 PM: Compilation took 8.552e-02 seconds
(CVXPY) Sep 20 07:30:13 PM: Solver (including time spent in interface) took 3.140e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4799
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:13 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:13 PM: Finished problem compilation (took 1.126e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 228242
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5004e+04  2.50e+04  9.93e-01  2.08e+02  1.00e+00  1.00e+00   ------   
  1  +6.0818e-01  +4.8447e+03  4.84e+03  3.42e-01  1.16e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5110e-01  +7.5329e+02  7.53e+02  1.44e-01  6.02e+01  8.23e-03  2.28e-01  7.24e-01  
  3  +5.1146e-01  +1.6824e+02  1.68e+02  1.31e-01  5.46e+01  1.85e-05  2.26e-01  5.81e-02  
  4  +5.0021e-01  +3.0882e+00  2.59e+00  7.74e-03  3.19e+00  1.59e-06  1.67e-01  8.35e-01  
  5  +5.0002e-01  +8.9926e-01  3.99e-01  1.21e-03  5.02e-01  8.75e-06  8.93e-02  9.90e-01  
  6  +5.0001e-01  +7.5230e-01  2.52e-01  7.58e-04  3.16e-01  5.61e-06  5.40e-02  5.47e-01  
  7  +5.0000e-01  +5.9983e-01  9.98e-02  2.99e-04  1.25e-01  3.91e-06  1.47e-02  7.71e-01  
  8  +4.9996e-01  +6.2840e-01  1.28e-01  2.85e-04  1.19e-01  4.17e-05  1.33e-03  9.90e-01  
  9  +4.9943e-01  +6.2701e-01  1.28e-01  4.10e-05  1.72e-02  4.40e-04  1.21e-04  9.09e-01  
 10  +4.9833e-01  +5.9496e-01  9.66e-02  1.14e-05  4.76e-03  8.91e-04  3.27e-05  9.00e-01  
 11  +4.9705e-01  +5.8902e-01  9.20e-02  7.07e-06  2.96e-03  1.26e-03  2.01e-05  4.04e-01  
 12  +4.9740e-01  +5.8375e-01  8.64e-02  5.79e-06  2.42e-03  7.28e-04  1.62e-05  5.93e-01  
 13  +4.9749e-01  +5.7780e-01  8.03e-02  4.77e-06  2.00e-03  1.98e-04  1.33e-05  8.08e-01  
 14  +4.9561e-01  +5.7066e-01  7.50e-02  3.47e-06  1.45e-03  1.84e-04  9.71e-06  4.42e-01  
 15  +4.9097e-01  +5.5385e-01  6.29e-02  2.61e-06  1.09e-03  8.66e-05  7.40e-06  5.61e-01  
 16  +4.8351e-01  +5.2801e-01  4.45e-02  1.62e-06  6.78e-04  4.50e-05  4.65e-06  5.21e-01  
 17  +4.8265e-01  +5.2527e-01  4.26e-02  1.55e-06  6.48e-04  2.93e-05  4.60e-06  2.49e-01  
 18  +4.8136e-01  +5.2071e-01  3.94e-02  1.38e-06  5.78e-04  3.09e-07  4.03e-06  8.98e-01  
 19  +4.7161e-01  +4.8897e-01  1.74e-02  5.60e-07  2.34e-04  1.43e-07  1.65e-06  6.45e-01  
 20  +4.6469e-01  +4.6787e-01  3.18e-03  9.51e-08  3.98e-05  3.45e-08  2.84e-07  8.95e-01  
 21  +4.6328e-01  +4.6331e-01  3.33e-05  9.91e-10  4.14e-07  3.50e-10  2.97e-09  9.90e-01  
 22  +4.6326e-01  +4.6326e-01  3.33e-07  9.91e-12  4.14e-09  3.50e-12  2.97e-11  9.90e-01  
 23  +4.6326e-01  +4.6326e-01  3.34e-09  9.93e-14  4.15e-11  3.72e-14  3.14e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 572.5287ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:14 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:14 PM: Optimal value: 4.633e-01
(CVXPY) Sep 20 07:30:14 PM: Compilation took 1.126e-01 seconds
(CVXPY) Sep 20 07:30:14 PM: Solver (including time spent in interface) took 6.071e-01 seconds
FULL MODEL:
  Accruacy: 0.53684
  Our objective: 0.07367999999999997

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.07368)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.5820860862731934
Best over terms:
  Our final objective: 0.07367999999999997
    Its accruacy: 0.53684
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.07367999999999997
  Highest accruacy: 0.53684
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

