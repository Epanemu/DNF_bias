Command:
python test_script.py -s constant_subclass -d 7 -n 100 --seed 73 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 7.

Computed total variation: 0.72
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:35 PM: Your problem has 65 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:35 PM: Finished problem compilation (took 7.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 65
  constraints   = 115
  nnz(P)        = 0
  nnz(A)        = 515
  cones (total) = 1
    : Nonnegative = 1,  numel = 115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9706e-01  +5.1322e+01  5.08e+01  8.68e-01  9.53e+00  1.00e+00  1.04e+00   ------   
  1  +5.8145e-01  +1.0948e+01  1.04e+01  3.54e-01  5.57e+00  3.83e-03  5.67e-01  6.15e-01  
  2  +5.1590e-01  +1.6488e+00  1.13e+00  7.99e-02  1.55e+00  1.54e-02  2.04e-01  9.90e-01  
  3  +4.8608e-01  +1.0094e+00  5.23e-01  2.33e-02  4.72e-01  1.26e-02  6.85e-02  7.54e-01  
  4  +4.4978e-01  +7.4734e-01  2.98e-01  8.72e-03  1.77e-01  8.61e-03  2.85e-02  6.17e-01  
  5  +4.2039e-01  +4.9896e-01  7.86e-02  2.28e-03  4.54e-02  1.10e-03  8.83e-03  8.00e-01  
  6  +4.1233e-01  +4.4887e-01  3.65e-02  9.72e-04  1.93e-02  4.73e-04  3.91e-03  6.61e-01  
  7  +4.0598e-01  +4.2617e-01  2.02e-02  4.08e-04  8.17e-03  2.59e-04  1.81e-03  6.40e-01  
  8  +4.0082e-01  +4.0280e-01  1.98e-03  3.93e-05  7.88e-04  9.07e-06  1.81e-04  9.90e-01  
  9  +4.0011e-01  +4.0013e-01  2.05e-05  4.02e-07  8.05e-06  9.20e-08  1.87e-06  9.90e-01  
 10  +4.0010e-01  +4.0010e-01  2.05e-07  4.02e-09  8.05e-08  9.20e-10  1.87e-08  9.90e-01  
 11  +4.0010e-01  +4.0010e-01  2.05e-09  4.02e-11  8.05e-10  9.20e-12  1.87e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 651.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:35 PM: Optimal value: 4.001e-01
(CVXPY) Sep 20 07:38:35 PM: Compilation took 7.510e-03 seconds
(CVXPY) Sep 20 07:38:35 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:35 PM: Your problem has 75 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:35 PM: Finished problem compilation (took 4.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 125
  nnz(P)        = 0
  nnz(A)        = 614
  cones (total) = 1
    : Nonnegative = 1,  numel = 125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9204e-01  +5.1938e+01  5.14e+01  8.75e-01  9.60e+00  1.00e+00  1.07e+00   ------   
  1  +5.5284e-01  +1.1095e+01  1.05e+01  3.64e-01  5.50e+00  3.84e-03  5.82e-01  6.12e-01  
  2  +4.8403e-01  +2.1218e+00  1.64e+00  9.51e-02  1.84e+00  1.76e-02  2.33e-01  9.00e-01  
  3  +4.1865e-01  +1.4852e+00  1.07e+00  3.96e-02  7.91e-01  1.39e-02  1.09e-01  6.93e-01  
  4  +3.7199e-01  +6.8385e-01  3.12e-01  1.05e-02  2.08e-01  3.92e-03  3.38e-02  7.02e-01  
  5  +3.4627e-01  +4.6006e-01  1.14e-01  3.40e-03  6.72e-02  1.55e-03  1.19e-02  7.12e-01  
  6  +3.3067e-01  +3.5786e-01  2.72e-02  7.93e-04  1.56e-02  6.41e-05  2.95e-03  9.29e-01  
  7  +3.2561e-01  +3.2710e-01  1.49e-03  4.46e-05  8.72e-04  2.25e-06  1.73e-04  9.43e-01  
  8  +3.2533e-01  +3.2546e-01  1.26e-04  3.87e-06  7.47e-05  1.57e-07  1.58e-05  9.12e-01  
  9  +3.2530e-01  +3.2530e-01  2.69e-06  8.33e-08  1.61e-06  5.40e-09  3.51e-07  9.86e-01  
 10  +3.2530e-01  +3.2530e-01  2.69e-08  8.33e-10  1.60e-08  5.40e-11  3.51e-09  9.90e-01  
 11  +3.2530e-01  +3.2530e-01  2.69e-10  8.34e-12  1.61e-10  5.40e-13  3.52e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 674µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:35 PM: Optimal value: 3.253e-01
(CVXPY) Sep 20 07:38:35 PM: Compilation took 4.510e-03 seconds
(CVXPY) Sep 20 07:38:35 PM: Solver (including time spent in interface) took 1.006e-03 seconds
Iteration: 2, Objective: 0.3253
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:35 PM: Your problem has 85 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:35 PM: Finished problem compilation (took 4.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 85
  constraints   = 135
  nnz(P)        = 0
  nnz(A)        = 701
  cones (total) = 1
    : Nonnegative = 1,  numel = 135

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9001e-01  +5.2001e+01  5.15e+01  8.80e-01  9.58e+00  1.00e+00  1.07e+00   ------   
  1  +5.4009e-01  +1.1251e+01  1.07e+01  3.77e-01  5.47e+00  3.85e-03  5.90e-01  6.03e-01  
  2  +4.7325e-01  +2.0485e+00  1.58e+00  9.18e-02  1.77e+00  1.91e-02  2.27e-01  9.40e-01  
  3  +3.9131e-01  +1.3986e+00  1.01e+00  3.44e-02  6.80e-01  1.30e-02  9.53e-02  8.66e-01  
  4  +3.4132e-01  +7.3371e-01  3.92e-01  9.98e-03  2.01e-01  7.12e-03  3.07e-02  7.17e-01  
  5  +3.0801e-01  +5.4698e-01  2.39e-01  5.23e-03  1.06e-01  3.63e-03  1.71e-02  5.40e-01  
  6  +2.6596e-01  +3.1280e-01  4.68e-02  1.05e-03  2.11e-02  8.88e-05  3.89e-03  9.66e-01  
  7  +2.5139e-01  +2.5388e-01  2.50e-03  5.53e-05  1.10e-03  4.39e-06  2.15e-04  9.51e-01  
  8  +2.5067e-01  +2.5113e-01  4.57e-04  1.03e-05  2.02e-04  7.91e-07  4.18e-05  8.15e-01  
  9  +2.5052e-01  +2.5059e-01  6.44e-05  1.45e-06  2.85e-05  2.97e-07  6.21e-06  9.90e-01  
 10  +2.5050e-01  +2.5050e-01  7.25e-07  1.64e-08  3.21e-07  3.25e-09  7.03e-08  9.89e-01  
 11  +2.5050e-01  +2.5050e-01  7.25e-09  1.64e-10  3.21e-09  3.25e-11  7.03e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 918.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:35 PM: Optimal value: 2.505e-01
(CVXPY) Sep 20 07:38:35 PM: Compilation took 4.002e-03 seconds
(CVXPY) Sep 20 07:38:35 PM: Solver (including time spent in interface) took 1.999e-03 seconds
Iteration: 3, Objective: 0.2505
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:35 PM: Your problem has 95 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:35 PM: Finished problem compilation (took 4.995e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 95
  constraints   = 145
  nnz(P)        = 0
  nnz(A)        = 770
  cones (total) = 1
    : Nonnegative = 1,  numel = 145

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8813e-01  +5.2067e+01  5.16e+01  8.84e-01  9.44e+00  1.00e+00  1.07e+00   ------   
  1  +5.2157e-01  +1.1217e+01  1.07e+01  3.79e-01  5.26e+00  3.88e-03  5.83e-01  6.07e-01  
  2  +4.3985e-01  +2.0223e+00  1.58e+00  7.72e-02  1.48e+00  2.07e-02  1.95e-01  9.73e-01  
  3  +3.4177e-01  +1.1538e+00  8.12e-01  2.50e-02  4.87e-01  1.20e-02  7.12e-02  7.99e-01  
  4  +2.8812e-01  +6.3912e-01  3.51e-01  9.67e-03  1.88e-01  4.35e-03  3.07e-02  6.30e-01  
  5  +2.4398e-01  +3.3499e-01  9.10e-02  2.44e-03  4.75e-02  8.73e-04  8.95e-03  7.83e-01  
  6  +2.2880e-01  +2.6154e-01  3.27e-02  8.47e-04  1.64e-02  2.65e-04  3.36e-03  7.08e-01  
  7  +2.2133e-01  +2.2387e-01  2.54e-03  6.56e-05  1.26e-03  1.77e-05  2.74e-04  9.25e-01  
  8  +2.2078e-01  +2.2129e-01  5.12e-04  1.30e-05  2.48e-04  1.90e-06  5.98e-05  9.64e-01  
  9  +2.2061e-01  +2.2064e-01  2.89e-05  7.26e-07  1.38e-05  8.26e-08  3.59e-06  9.42e-01  
 10  +2.2060e-01  +2.2060e-01  2.94e-07  7.39e-09  1.41e-07  8.34e-10  3.69e-08  9.90e-01  
 11  +2.2060e-01  +2.2060e-01  2.94e-09  7.39e-11  1.41e-09  8.34e-12  3.70e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 921µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:35 PM: Optimal value: 2.206e-01
(CVXPY) Sep 20 07:38:35 PM: Compilation took 4.995e-03 seconds
(CVXPY) Sep 20 07:38:35 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Iteration: 4, Objective: 0.2206
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:35 PM: Your problem has 105 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:35 PM: Finished problem compilation (took 4.012e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 105
  constraints   = 155
  nnz(P)        = 0
  nnz(A)        = 820
  cones (total) = 1
    : Nonnegative = 1,  numel = 155

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8716e-01  +5.2114e+01  5.16e+01  8.88e-01  9.25e+00  1.00e+00  1.07e+00   ------   
  1  +5.0973e-01  +1.1244e+01  1.07e+01  3.84e-01  5.08e+00  3.90e-03  5.83e-01  6.06e-01  
  2  +4.2059e-01  +2.1302e+00  1.71e+00  7.88e-02  1.45e+00  2.11e-02  1.99e-01  9.54e-01  
  3  +3.1880e-01  +1.0740e+00  7.55e-01  2.24e-02  4.29e-01  1.31e-02  6.42e-02  7.32e-01  
  4  +2.5592e-01  +5.3849e-01  2.83e-01  7.70e-03  1.47e-01  3.89e-03  2.48e-02  6.68e-01  
  5  +2.1500e-01  +3.1771e-01  1.03e-01  2.68e-03  5.13e-02  1.17e-03  9.86e-03  6.64e-01  
  6  +1.9475e-01  +2.1049e-01  1.57e-02  4.07e-04  7.72e-03  1.48e-04  1.64e-03  8.55e-01  
  7  +1.9122e-01  +1.9269e-01  1.47e-03  3.83e-05  7.20e-04  1.23e-05  1.60e-04  9.04e-01  
  8  +1.9098e-01  +1.9157e-01  5.84e-04  1.52e-05  2.85e-04  3.06e-06  6.84e-05  8.51e-01  
  9  +1.9081e-01  +1.9085e-01  3.72e-05  9.73e-07  1.82e-05  1.76e-07  4.49e-06  9.37e-01  
 10  +1.9080e-01  +1.9080e-01  3.94e-07  1.03e-08  1.93e-07  1.84e-09  4.77e-08  9.90e-01  
 11  +1.9080e-01  +1.9080e-01  3.94e-09  1.03e-10  1.93e-09  1.84e-11  4.77e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 948.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:35 PM: Optimal value: 1.908e-01
(CVXPY) Sep 20 07:38:35 PM: Compilation took 4.012e-03 seconds
(CVXPY) Sep 20 07:38:35 PM: Solver (including time spent in interface) took 1.513e-03 seconds
Iteration: 5, Objective: 0.1908
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:35 PM: Your problem has 106 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:35 PM: Finished problem compilation (took 4.142e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 106
  constraints   = 156
  nnz(P)        = 0
  nnz(A)        = 832
  cones (total) = 1
    : Nonnegative = 1,  numel = 156

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8670e-01  +5.2106e+01  5.16e+01  8.88e-01  9.26e+00  1.00e+00  1.07e+00   ------   
  1  +5.0593e-01  +1.1264e+01  1.08e+01  3.85e-01  5.09e+00  3.91e-03  5.84e-01  6.05e-01  
  2  +4.1562e-01  +2.1624e+00  1.75e+00  8.05e-02  1.48e+00  2.12e-02  2.02e-01  9.47e-01  
  3  +3.1471e-01  +1.0796e+00  7.65e-01  2.29e-02  4.38e-01  1.30e-02  6.57e-02  7.36e-01  
  4  +2.5453e-01  +5.4772e-01  2.93e-01  8.14e-03  1.54e-01  3.87e-03  2.61e-02  6.67e-01  
  5  +2.1391e-01  +3.1024e-01  9.63e-02  2.57e-03  4.88e-02  1.01e-03  9.37e-03  7.23e-01  
  6  +1.9709e-01  +2.2260e-01  2.55e-02  6.67e-04  1.27e-02  2.46e-04  2.64e-03  7.34e-01  
  7  +1.9127e-01  +1.9260e-01  1.33e-03  3.50e-05  6.59e-04  4.87e-06  1.46e-04  9.90e-01  
  8  +1.9097e-01  +1.9149e-01  5.14e-04  1.35e-05  2.53e-04  1.92e-06  6.09e-05  8.17e-01  
  9  +1.9081e-01  +1.9085e-01  3.52e-05  9.29e-07  1.74e-05  1.22e-07  4.30e-06  9.34e-01  
 10  +1.9080e-01  +1.9080e-01  3.70e-07  9.75e-09  1.82e-07  1.28e-09  4.52e-08  9.90e-01  
 11  +1.9080e-01  +1.9080e-01  3.70e-09  9.75e-11  1.82e-09  1.28e-11  4.53e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 936µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:35 PM: Optimal value: 1.908e-01
(CVXPY) Sep 20 07:38:35 PM: Compilation took 4.142e-03 seconds
(CVXPY) Sep 20 07:38:35 PM: Solver (including time spent in interface) took 2.004e-03 seconds
Iteration: 6, Objective: 0.1908
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:36 PM: Your problem has 116 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:36 PM: Finished problem compilation (took 3.507e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 116
  constraints   = 166
  nnz(P)        = 0
  nnz(A)        = 861
  cones (total) = 1
    : Nonnegative = 1,  numel = 166

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8443e-01  +5.2257e+01  5.18e+01  8.91e-01  9.03e+00  1.00e+00  1.07e+00   ------   
  1  +4.7635e-01  +1.1621e+01  1.11e+01  3.91e-01  5.02e+00  3.98e-03  5.92e-01  5.89e-01  
  2  +3.8000e-01  +2.1862e+00  1.81e+00  8.05e-02  1.43e+00  2.38e-02  2.02e-01  9.67e-01  
  3  +2.7307e-01  +9.7850e-01  7.05e-01  2.18e-02  3.98e-01  1.10e-02  6.26e-02  8.05e-01  
  4  +2.1974e-01  +4.2279e-01  2.03e-01  6.09e-03  1.10e-01  2.30e-03  1.98e-02  7.63e-01  
  5  +1.9359e-01  +2.7866e-01  8.51e-02  2.33e-03  4.38e-02  8.95e-04  8.05e-03  7.42e-01  
  6  +1.7598e-01  +1.9380e-01  1.78e-02  4.72e-04  8.89e-03  1.12e-04  1.75e-03  8.71e-01  
  7  +1.7140e-01  +1.7272e-01  1.32e-03  3.51e-05  6.56e-04  6.87e-06  1.35e-04  9.24e-01  
  8  +1.7112e-01  +1.7149e-01  3.68e-04  9.91e-06  1.84e-04  1.64e-06  4.05e-05  8.97e-01  
  9  +1.7100e-01  +1.7101e-01  6.80e-06  1.84e-07  3.40e-06  2.63e-08  7.62e-07  9.81e-01  
 10  +1.7100e-01  +1.7100e-01  6.80e-08  1.84e-09  3.40e-08  2.63e-10  7.62e-09  9.90e-01  
 11  +1.7100e-01  +1.7100e-01  6.80e-10  1.84e-11  3.40e-10  2.63e-12  7.63e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1023ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:36 PM: Optimal value: 1.710e-01
(CVXPY) Sep 20 07:38:36 PM: Compilation took 3.507e-03 seconds
(CVXPY) Sep 20 07:38:36 PM: Solver (including time spent in interface) took 2.506e-03 seconds
Iteration: 7, Objective: 0.1710
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:36 PM: Your problem has 126 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:36 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 126
  constraints   = 176
  nnz(P)        = 0
  nnz(A)        = 889
  cones (total) = 1
    : Nonnegative = 1,  numel = 176

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8407e-01  +5.2298e+01  5.18e+01  8.94e-01  8.82e+00  1.00e+00  1.07e+00   ------   
  1  +4.6539e-01  +1.1657e+01  1.12e+01  3.92e-01  4.84e+00  4.02e-03  5.89e-01  5.89e-01  
  2  +3.6181e-01  +2.3655e+00  2.00e+00  8.46e-02  1.45e+00  2.39e-02  2.12e-01  9.32e-01  
  3  +2.6431e-01  +1.0609e+00  7.97e-01  2.52e-02  4.46e-01  1.09e-02  7.25e-02  7.56e-01  
  4  +2.0994e-01  +4.0535e-01  1.95e-01  6.06e-03  1.05e-01  2.02e-03  1.97e-02  8.00e-01  
  5  +1.9752e-01  +3.6454e-01  1.67e-01  4.73e-03  8.65e-02  1.66e-03  1.53e-02  3.89e-01  
  6  +1.6936e-01  +2.0441e-01  3.51e-02  9.70e-04  1.77e-02  1.36e-04  3.41e-03  9.90e-01  
  7  +1.6157e-01  +1.6319e-01  1.62e-03  4.52e-05  8.17e-04  4.38e-06  1.65e-04  9.53e-01  
  8  +1.6123e-01  +1.6168e-01  4.49e-04  1.29e-05  2.29e-04  1.42e-06  5.04e-05  8.09e-01  
  9  +1.6110e-01  +1.6112e-01  1.20e-05  3.44e-07  6.12e-06  3.42e-08  1.39e-06  9.77e-01  
 10  +1.6110e-01  +1.6110e-01  1.20e-07  3.45e-09  6.13e-08  3.42e-10  1.39e-08  9.90e-01  
 11  +1.6110e-01  +1.6110e-01  1.20e-09  3.45e-11  6.13e-10  3.42e-12  1.39e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0256ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:36 PM: Optimal value: 1.611e-01
(CVXPY) Sep 20 07:38:36 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:38:36 PM: Solver (including time spent in interface) took 2.148e-03 seconds
Iteration: 8, Objective: 0.1611
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:36 PM: Your problem has 129 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:36 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 129
  constraints   = 179
  nnz(P)        = 0
  nnz(A)        = 899
  cones (total) = 1
    : Nonnegative = 1,  numel = 179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8319e-01  +5.2414e+01  5.19e+01  8.95e-01  8.76e+00  1.00e+00  1.08e+00   ------   
  1  +4.5461e-01  +1.1609e+01  1.12e+01  3.88e-01  4.77e+00  4.03e-03  5.86e-01  5.93e-01  
  2  +3.2752e-01  +2.4450e+00  2.12e+00  7.95e-02  1.35e+00  2.43e-02  2.02e-01  9.27e-01  
  3  +2.4461e-01  +8.6410e-01  6.19e-01  2.01e-02  3.49e-01  7.87e-03  5.84e-02  7.74e-01  
  4  +1.9851e-01  +4.2666e-01  2.28e-01  7.21e-03  1.23e-01  2.56e-03  2.33e-02  6.82e-01  
  5  +1.8731e-01  +3.6731e-01  1.80e-01  5.33e-03  9.43e-02  1.98e-03  1.73e-02  3.71e-01  
  6  +1.6602e-01  +2.3842e-01  7.24e-02  2.01e-03  3.64e-02  6.34e-04  6.97e-03  7.34e-01  
  7  +1.5250e-01  +1.5788e-01  5.38e-03  1.49e-04  2.67e-03  3.39e-05  5.45e-04  9.34e-01  
  8  +1.5141e-01  +1.5211e-01  7.05e-04  2.01e-05  3.56e-04  3.52e-06  7.72e-05  8.63e-01  
  9  +1.5125e-01  +1.5139e-01  1.48e-04  4.28e-06  7.54e-05  6.18e-07  1.73e-05  9.59e-01  
 10  +1.5120e-01  +1.5120e-01  1.83e-06  5.30e-08  9.33e-07  7.30e-09  2.15e-07  9.88e-01  
 11  +1.5120e-01  +1.5120e-01  1.83e-08  5.30e-10  9.33e-09  7.30e-11  2.16e-09  9.90e-01  
 12  +1.5120e-01  +1.5120e-01  1.83e-10  5.30e-12  9.34e-11  7.30e-13  2.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2066ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:36 PM: Optimal value: 1.512e-01
(CVXPY) Sep 20 07:38:36 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:38:36 PM: Solver (including time spent in interface) took 9.999e-04 seconds
FULL MODEL:
  Accruacy: 0.83
  Our objective: 0.66

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 0 AND x6 = 0)                                             <-- (term's our objective: 0.2)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 1)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 1)                       <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.02)
 OR (x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1)                                  <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1)                       <-- (term's our objective: 0.08)
 OR (x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.08)
 OR (x3 = 1 AND x5 = 0 AND x6 = 0)                                             <-- (term's our objective: 0.18)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.4822263717651367
Best over terms:
  Our final objective: 0.19999999999999998
    Its accruacy: 0.6
    Its hamming distance: 4
  Shortest hamming distance: 4
    Its our objective: 0.19999999999999998
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

