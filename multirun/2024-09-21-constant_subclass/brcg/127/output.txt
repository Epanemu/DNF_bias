Command:
python test_script.py -s constant_subclass -d 4 -n 50 --seed 73 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.12
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 4.

Computed total variation: 0.44
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:25 PM: Your problem has 34 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:25 PM: Finished problem compilation (took 6.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 59
  nnz(P)        = 0
  nnz(A)        = 184
  cones (total) = 1
    : Nonnegative = 1,  numel = 59

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9330e-01  +2.5815e+01  2.53e+01  8.13e-01  5.41e+00  1.00e+00  1.07e+00   ------   
  1  +5.9670e-01  +5.2574e+00  4.66e+00  2.81e-01  2.75e+00  4.07e-03  5.03e-01  6.71e-01  
  2  +5.1566e-01  +9.3497e-01  4.19e-01  4.38e-02  4.97e-01  1.06e-02  1.24e-01  9.90e-01  
  3  +4.9670e-01  +9.0507e-01  4.08e-01  2.44e-02  2.87e-01  1.45e-02  7.35e-02  4.57e-01  
  4  +4.4475e-01  +6.8693e-01  2.42e-01  8.83e-03  1.05e-01  1.04e-02  3.12e-02  6.39e-01  
  5  +3.9970e-01  +4.6147e-01  6.18e-02  2.40e-03  2.80e-02  1.28e-03  1.03e-02  7.60e-01  
  6  +3.8078e-01  +3.8255e-01  1.77e-03  6.90e-05  8.03e-04  1.19e-05  3.23e-04  9.80e-01  
  7  +3.8011e-01  +3.8012e-01  1.77e-05  6.89e-07  8.01e-06  1.18e-07  3.23e-06  9.90e-01  
  8  +3.8010e-01  +3.8010e-01  1.77e-07  6.89e-09  8.01e-08  1.18e-09  3.23e-08  9.90e-01  
  9  +3.8010e-01  +3.8010e-01  1.77e-09  6.89e-11  8.01e-10  1.18e-11  3.23e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 261.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:25 PM: Optimal value: 3.801e-01
(CVXPY) Sep 20 07:28:25 PM: Compilation took 6.009e-03 seconds
(CVXPY) Sep 20 07:28:25 PM: Solver (including time spent in interface) took 9.918e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:25 PM: Your problem has 42 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:25 PM: Finished problem compilation (took 4.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 42
  constraints   = 67
  nnz(P)        = 0
  nnz(A)        = 243
  cones (total) = 1
    : Nonnegative = 1,  numel = 67

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8299e-01  +2.6624e+01  2.61e+01  8.26e-01  5.67e+00  1.00e+00  1.11e+00   ------   
  1  +5.5639e-01  +5.4446e+00  4.89e+00  3.02e-01  2.90e+00  4.00e-03  5.40e-01  6.60e-01  
  2  +4.8589e-01  +1.3716e+00  8.86e-01  7.66e-02  9.02e-01  1.19e-02  2.03e-01  8.07e-01  
  3  +4.0747e-01  +8.0874e-01  4.01e-01  2.20e-02  2.68e-01  7.48e-03  7.00e-02  7.86e-01  
  4  +3.6203e-01  +4.8013e-01  1.18e-01  6.20e-03  7.43e-02  1.88e-03  2.35e-02  6.97e-01  
  5  +3.4234e-01  +3.5272e-01  1.04e-02  5.53e-04  6.57e-03  1.45e-04  2.34e-03  9.06e-01  
  6  +3.4042e-01  +3.4120e-01  7.78e-04  4.17e-05  4.93e-04  1.02e-05  1.80e-04  9.23e-01  
  7  +3.4029e-01  +3.4060e-01  3.11e-04  1.54e-05  1.82e-04  3.67e-06  7.55e-05  6.87e-01  
  8  +3.4021e-01  +3.4022e-01  1.76e-05  8.42e-07  9.98e-06  1.22e-07  4.42e-06  9.88e-01  
  9  +3.4020e-01  +3.4020e-01  1.81e-07  8.63e-09  1.02e-07  1.25e-09  4.56e-08  9.90e-01  
 10  +3.4020e-01  +3.4020e-01  1.81e-09  8.63e-11  1.02e-09  1.25e-11  4.56e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 283.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:25 PM: Optimal value: 3.402e-01
(CVXPY) Sep 20 07:28:25 PM: Compilation took 4.006e-03 seconds
(CVXPY) Sep 20 07:28:25 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3402
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:25 PM: Your problem has 52 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:25 PM: Finished problem compilation (took 4.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 52
  constraints   = 77
  nnz(P)        = 0
  nnz(A)        = 293
  cones (total) = 1
    : Nonnegative = 1,  numel = 77

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7502e-01  +2.6685e+01  2.62e+01  8.39e-01  5.61e+00  1.00e+00  1.12e+00   ------   
  1  +5.2263e-01  +5.6133e+00  5.09e+00  3.34e-01  2.94e+00  3.92e-03  5.79e-01  6.35e-01  
  2  +4.4657e-01  +1.4084e+00  9.62e-01  8.11e-02  9.19e-01  1.45e-02  2.20e-01  8.25e-01  
  3  +3.5299e-01  +6.8627e-01  3.33e-01  1.85e-02  2.14e-01  6.61e-03  6.39e-02  8.11e-01  
  4  +3.0280e-01  +4.0072e-01  9.79e-02  5.10e-03  5.81e-02  1.44e-03  2.13e-02  7.53e-01  
  5  +2.8194e-01  +2.8798e-01  6.04e-03  3.16e-04  3.57e-03  6.85e-05  1.49e-03  9.39e-01  
  6  +2.8050e-01  +2.8088e-01  3.74e-04  1.97e-05  2.22e-04  3.50e-06  9.56e-05  9.36e-01  
  7  +2.8041e-01  +2.8042e-01  1.90e-05  1.01e-06  1.13e-05  1.29e-07  5.21e-06  9.69e-01  
  8  +2.8040e-01  +2.8040e-01  1.92e-07  1.02e-08  1.15e-07  1.30e-09  5.31e-08  9.90e-01  
  9  +2.8040e-01  +2.8040e-01  1.92e-09  1.02e-10  1.15e-09  1.30e-11  5.31e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 302.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:25 PM: Optimal value: 2.804e-01
(CVXPY) Sep 20 07:28:25 PM: Compilation took 4.005e-03 seconds
(CVXPY) Sep 20 07:28:25 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2804
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:25 PM: Your problem has 53 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:25 PM: Finished problem compilation (took 3.703e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 53
  constraints   = 78
  nnz(P)        = 0
  nnz(A)        = 297
  cones (total) = 1
    : Nonnegative = 1,  numel = 78

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7477e-01  +2.6670e+01  2.62e+01  8.40e-01  5.59e+00  1.00e+00  1.12e+00   ------   
  1  +5.2034e-01  +5.6194e+00  5.10e+00  3.36e-01  2.94e+00  3.91e-03  5.82e-01  6.33e-01  
  2  +4.4637e-01  +1.4637e+00  1.02e+00  8.58e-02  9.61e-01  1.45e-02  2.31e-01  8.05e-01  
  3  +3.5302e-01  +6.8715e-01  3.34e-01  1.88e-02  2.17e-01  6.51e-03  6.46e-02  8.23e-01  
  4  +3.0409e-01  +4.1038e-01  1.06e-01  5.59e-03  6.34e-02  1.60e-03  2.32e-02  7.37e-01  
  5  +2.8222e-01  +2.8931e-01  7.10e-03  3.74e-04  4.20e-03  8.27e-05  1.77e-03  9.31e-01  
  6  +2.8053e-01  +2.8100e-01  4.74e-04  2.51e-05  2.81e-04  4.72e-06  1.23e-04  9.32e-01  
  7  +2.8041e-01  +2.8042e-01  1.84e-05  9.88e-07  1.10e-05  1.05e-07  5.12e-06  9.78e-01  
  8  +2.8040e-01  +2.8040e-01  1.89e-07  1.01e-08  1.13e-07  1.07e-09  5.29e-08  9.90e-01  
  9  +2.8040e-01  +2.8040e-01  1.89e-09  1.01e-10  1.13e-09  1.07e-11  5.29e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 313.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:25 PM: Optimal value: 2.804e-01
(CVXPY) Sep 20 07:28:25 PM: Compilation took 3.703e-03 seconds
(CVXPY) Sep 20 07:28:25 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.2804
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:25 PM: Your problem has 54 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:25 PM: Finished problem compilation (took 4.010e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 54
  constraints   = 79
  nnz(P)        = 0
  nnz(A)        = 301
  cones (total) = 1
    : Nonnegative = 1,  numel = 79

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7400e-01  +2.6506e+01  2.60e+01  8.42e-01  5.57e+00  1.00e+00  1.12e+00   ------   
  1  +5.1510e-01  +5.5940e+00  5.08e+00  3.36e-01  2.92e+00  3.92e-03  5.79e-01  6.33e-01  
  2  +4.3840e-01  +1.4634e+00  1.02e+00  8.41e-02  9.31e-01  1.46e-02  2.28e-01  8.05e-01  
  3  +3.5260e-01  +6.9392e-01  3.41e-01  2.01e-02  2.28e-01  6.18e-03  6.83e-02  7.98e-01  
  4  +3.0584e-01  +4.2353e-01  1.18e-01  6.41e-03  7.17e-02  1.80e-03  2.59e-02  7.04e-01  
  5  +2.8265e-01  +2.9174e-01  9.09e-03  4.96e-04  5.49e-03  1.07e-04  2.28e-03  9.20e-01  
  6  +2.8066e-01  +2.8160e-01  9.42e-04  5.16e-05  5.69e-04  1.01e-05  2.44e-04  8.94e-01  
  7  +2.8045e-01  +2.8059e-01  1.46e-04  7.93e-06  8.74e-05  1.04e-06  4.05e-05  9.67e-01  
  8  +2.8040e-01  +2.8040e-01  2.48e-06  1.35e-07  1.48e-06  1.56e-08  7.00e-07  9.83e-01  
  9  +2.8040e-01  +2.8040e-01  2.48e-08  1.35e-09  1.48e-08  1.56e-10  7.00e-09  9.90e-01  
 10  +2.8040e-01  +2.8040e-01  2.48e-10  1.35e-11  1.48e-10  1.56e-12  7.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 321µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:25 PM: Optimal value: 2.804e-01
(CVXPY) Sep 20 07:28:25 PM: Compilation took 4.010e-03 seconds
(CVXPY) Sep 20 07:28:25 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.7
  Our objective: 0.4

IF 
    (x0 = 0 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0) <-- (term's our objective: 0.12)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.8340423107147217
Best over terms:
  Our final objective: 0.19999999999999998
    Its accruacy: 0.6
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.19999999999999998
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

