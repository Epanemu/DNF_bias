Command:
python test_script.py -s constant_subclass -d 7 -n 10000 --seed 21 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0104
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 7.

Computed total variation: 0.08399999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:19 PM: Your problem has 5015 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:19 PM: Finished problem compilation (took 2.454e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5015
  constraints   = 10015
  nnz(P)        = 0
  nnz(A)        = 50015
  cones (total) = 1
    : Nonnegative = 1,  numel = 10015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.85e-01  1.05e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +1.0510e+03  1.05e+03  4.04e-01  6.56e+01  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3818e-01  +1.3093e+02  1.30e+02  1.57e-01  3.24e+01  1.31e-02  2.55e-01  8.65e-01  
  3  +5.0993e-01  +3.3569e+01  3.31e+01  1.21e-01  2.47e+01  3.44e-05  2.46e-01  1.61e-01  
  4  +5.0062e-01  +2.0646e+00  1.56e+00  1.06e-02  2.20e+00  4.89e-06  1.53e-01  7.43e-01  
  5  +5.0007e-01  +7.3326e-01  2.33e-01  1.56e-03  3.29e-01  1.61e-05  6.78e-02  9.90e-01  
  6  +5.0001e-01  +5.3258e-01  3.26e-02  2.17e-04  4.59e-02  3.46e-06  1.14e-02  8.41e-01  
  7  +5.0000e-01  +5.3126e-01  3.13e-02  2.06e-04  4.35e-02  6.82e-06  3.81e-03  7.71e-01  
  8  +4.9979e-01  +5.2998e-01  3.02e-02  4.40e-05  9.32e-03  1.42e-04  1.49e-04  9.68e-01  
  9  +4.9856e-01  +5.2699e-01  2.84e-02  7.38e-06  1.57e-03  8.02e-04  2.35e-05  8.45e-01  
 10  +4.9663e-01  +5.1215e-01  1.55e-02  5.33e-06  1.13e-03  5.91e-06  1.79e-05  5.08e-01  
 11  +4.9458e-01  +5.0275e-01  8.17e-03  2.15e-06  4.55e-04  3.08e-06  7.39e-06  6.52e-01  
 12  +4.9306e-01  +4.9615e-01  3.09e-03  6.88e-07  1.46e-04  8.04e-08  2.51e-06  9.90e-01  
 13  +4.9211e-01  +4.9240e-01  2.94e-04  5.96e-08  1.26e-05  1.34e-08  2.38e-07  9.90e-01  
 14  +4.9200e-01  +4.9200e-01  3.47e-06  6.93e-10  1.47e-07  1.58e-10  2.82e-09  9.88e-01  
 15  +4.9200e-01  +4.9200e-01  3.47e-08  6.93e-12  1.47e-09  1.58e-12  2.82e-11  9.90e-01  
 16  +4.9200e-01  +4.9200e-01  3.49e-10  6.96e-14  1.48e-11  2.02e-14  3.57e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 63.4838ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:19 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:19 PM: Optimal value: 4.920e-01
(CVXPY) Sep 20 07:41:19 PM: Compilation took 2.454e-02 seconds
(CVXPY) Sep 20 07:41:19 PM: Solver (including time spent in interface) took 7.116e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4920
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:19 PM: Your problem has 5025 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:19 PM: Finished problem compilation (took 2.419e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5025
  constraints   = 10025
  nnz(P)        = 0
  nnz(A)        = 54456
  cones (total) = 1
    : Nonnegative = 1,  numel = 10025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.06e+02  1.00e+00  1.00e+00   ------   
  1  +5.8809e-01  +1.0511e+03  1.05e+03  4.04e-01  6.62e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3811e-01  +1.3079e+02  1.30e+02  1.57e-01  3.27e+01  1.31e-02  2.55e-01  8.65e-01  
  3  +5.0990e-01  +3.3512e+01  3.30e+01  1.21e-01  2.49e+01  3.44e-05  2.46e-01  1.63e-01  
  4  +5.0061e-01  +2.0454e+00  1.54e+00  1.05e-02  2.20e+00  4.92e-06  1.52e-01  7.52e-01  
  5  +5.0007e-01  +7.3668e-01  2.37e-01  1.59e-03  3.37e-01  1.58e-05  6.48e-02  9.90e-01  
  6  +5.0003e-01  +5.9842e-01  9.84e-02  6.58e-04  1.40e-01  7.99e-06  2.67e-02  6.43e-01  
  7  +5.0001e-01  +5.6552e-01  6.55e-02  4.36e-04  9.28e-02  8.84e-06  9.86e-03  6.87e-01  
  8  +4.9991e-01  +5.5743e-01  5.75e-02  2.05e-04  4.38e-02  7.29e-05  8.24e-04  9.35e-01  
  9  +4.9871e-01  +5.5414e-01  5.54e-02  2.25e-05  4.83e-03  7.80e-04  7.13e-05  9.14e-01  
 10  +4.9781e-01  +5.4410e-01  4.63e-02  1.89e-05  4.05e-03  4.10e-04  6.05e-05  3.96e-01  
 11  +4.9762e-01  +5.4128e-01  4.37e-02  1.82e-05  3.90e-03  2.61e-04  5.85e-05  2.68e-01  
 12  +4.9637e-01  +5.3338e-01  3.70e-02  1.35e-05  2.89e-03  2.22e-04  4.36e-05  3.03e-01  
 13  +4.9616e-01  +5.3131e-01  3.52e-02  1.24e-05  2.66e-03  1.32e-04  4.00e-05  3.71e-01  
 14  +4.9541e-01  +5.2688e-01  3.15e-02  1.03e-05  2.20e-03  9.15e-05  3.30e-05  3.54e-01  
 15  +4.9377e-01  +5.1747e-01  2.37e-02  6.84e-06  1.46e-03  4.80e-05  2.19e-05  5.30e-01  
 16  +4.9372e-01  +5.1711e-01  2.34e-02  6.78e-06  1.45e-03  4.16e-05  2.17e-05  1.09e-01  
 17  +4.9022e-01  +4.9877e-01  8.55e-03  1.91e-06  4.09e-04  1.53e-05  6.03e-06  7.94e-01  
 18  +4.9000e-01  +4.9843e-01  8.43e-03  1.69e-06  3.62e-04  1.43e-05  5.23e-06  2.45e-01  
 19  +4.8919e-01  +4.9667e-01  7.48e-03  1.31e-06  2.82e-04  1.37e-06  4.06e-06  8.58e-01  
 20  +4.8896e-01  +4.9586e-01  6.89e-03  1.29e-06  2.76e-04  1.05e-06  4.01e-06  1.44e-01  
 21  +4.8841e-01  +4.9385e-01  5.44e-03  9.74e-07  2.09e-04  7.85e-07  3.05e-06  3.09e-01  
 22  +4.8668e-01  +4.8761e-01  9.31e-04  1.50e-07  3.24e-05  6.28e-08  4.82e-07  9.80e-01  
 23  +4.8631e-01  +4.8634e-01  2.72e-05  4.39e-09  9.45e-07  1.85e-09  1.42e-08  9.79e-01  
 24  +4.8630e-01  +4.8630e-01  2.72e-07  4.39e-11  9.45e-09  1.85e-11  1.42e-10  9.90e-01  
 25  +4.8630e-01  +4.8630e-01  2.73e-09  4.39e-13  9.45e-11  1.88e-13  1.44e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 114.4669ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:19 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:19 PM: Optimal value: 4.863e-01
(CVXPY) Sep 20 07:41:19 PM: Compilation took 2.419e-02 seconds
(CVXPY) Sep 20 07:41:19 PM: Solver (including time spent in interface) took 1.236e-01 seconds
Iteration: 2, Objective: 0.4863
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:19 PM: Your problem has 5035 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:19 PM: Finished problem compilation (took 2.853e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5035
  constraints   = 10035
  nnz(P)        = 0
  nnz(A)        = 59452
  cones (total) = 1
    : Nonnegative = 1,  numel = 10035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.07e+02  1.00e+00  1.00e+00   ------   
  1  +5.8805e-01  +1.0512e+03  1.05e+03  4.04e-01  6.69e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3807e-01  +1.3070e+02  1.30e+02  1.57e-01  3.30e+01  1.31e-02  2.54e-01  8.66e-01  
  3  +5.0989e-01  +3.3488e+01  3.30e+01  1.21e-01  2.51e+01  3.44e-05  2.46e-01  1.63e-01  
  4  +5.0061e-01  +2.0435e+00  1.54e+00  1.05e-02  2.22e+00  4.93e-06  1.51e-01  7.54e-01  
  5  +5.0007e-01  +7.3850e-01  2.38e-01  1.60e-03  3.44e-01  1.58e-05  6.40e-02  9.90e-01  
  6  +5.0003e-01  +6.1387e-01  1.14e-01  7.62e-04  1.64e-01  9.12e-06  2.89e-02  6.11e-01  
  7  +5.0001e-01  +5.7781e-01  7.78e-02  5.16e-04  1.11e-01  1.07e-05  9.80e-03  7.59e-01  
  8  +4.9995e-01  +5.7448e-01  7.45e-02  3.57e-04  7.71e-02  4.77e-05  1.74e-03  8.36e-01  
  9  +4.9889e-01  +5.6979e-01  7.09e-02  3.39e-05  7.34e-03  6.93e-04  1.07e-04  9.45e-01  
 10  +4.9752e-01  +5.5383e-01  5.63e-02  2.29e-05  4.96e-03  4.91e-04  7.27e-05  4.82e-01  
 11  +4.9689e-01  +5.4854e-01  5.17e-02  1.94e-05  4.20e-03  4.24e-04  6.13e-05  2.34e-01  
 12  +4.9693e-01  +5.4810e-01  5.12e-02  1.83e-05  3.96e-03  3.62e-04  5.70e-05  2.09e-01  
 13  +4.9703e-01  +5.4572e-01  4.87e-02  1.73e-05  3.75e-03  1.89e-04  5.32e-05  4.17e-01  
 14  +4.9617e-01  +5.4111e-01  4.49e-02  1.33e-05  2.88e-03  1.91e-04  4.06e-05  2.75e-01  
 15  +4.9598e-01  +5.4019e-01  4.42e-02  1.33e-05  2.88e-03  1.78e-04  4.05e-05  3.41e-02  
 16  +4.9581e-01  +5.3925e-01  4.34e-02  1.19e-05  2.58e-03  1.46e-04  3.62e-05  2.78e-01  
 17  +4.9547e-01  +5.3697e-01  4.15e-02  1.07e-05  2.32e-03  7.91e-05  3.26e-05  4.49e-01  
 18  +4.9474e-01  +5.3375e-01  3.90e-02  1.02e-05  2.21e-03  4.65e-05  3.12e-05  3.14e-01  
 19  +4.9222e-01  +5.2310e-01  3.09e-02  6.65e-06  1.44e-03  2.43e-05  2.04e-05  6.01e-01  
 20  +4.9001e-01  +5.1368e-01  2.37e-02  4.80e-06  1.04e-03  1.32e-05  1.49e-05  4.54e-01  
 21  +4.8999e-01  +5.1346e-01  2.35e-02  4.77e-06  1.03e-03  1.23e-05  1.48e-05  5.43e-02  
 22  +4.8697e-01  +5.0152e-01  1.46e-02  2.75e-06  5.95e-04  5.52e-06  8.62e-06  5.60e-01  
 23  +4.8613e-01  +4.9719e-01  1.11e-02  1.95e-06  4.23e-04  5.83e-07  6.15e-06  9.90e-01  
 24  +4.8408e-01  +4.9002e-01  5.94e-03  1.02e-06  2.21e-04  3.75e-07  3.25e-06  8.01e-01  
 25  +4.8191e-01  +4.8260e-01  6.93e-04  1.16e-07  2.50e-05  4.35e-08  3.77e-07  9.01e-01  
 26  +4.8161e-01  +4.8162e-01  1.17e-05  1.94e-09  4.21e-07  7.66e-10  6.37e-09  9.87e-01  
 27  +4.8160e-01  +4.8160e-01  1.18e-07  1.96e-11  4.24e-09  7.72e-12  6.41e-11  9.90e-01  
 28  +4.8160e-01  +4.8160e-01  1.18e-09  1.96e-13  4.24e-11  8.02e-14  6.65e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 148.1914ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:19 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:19 PM: Optimal value: 4.816e-01
(CVXPY) Sep 20 07:41:19 PM: Compilation took 2.853e-02 seconds
(CVXPY) Sep 20 07:41:19 PM: Solver (including time spent in interface) took 1.569e-01 seconds
Iteration: 3, Objective: 0.4816
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:20 PM: Your problem has 5045 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:20 PM: Finished problem compilation (took 3.276e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5045
  constraints   = 10045
  nnz(P)        = 0
  nnz(A)        = 62877
  cones (total) = 1
    : Nonnegative = 1,  numel = 10045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.08e+02  1.00e+00  1.00e+00   ------   
  1  +5.8802e-01  +1.0513e+03  1.05e+03  4.04e-01  6.73e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3804e-01  +1.3063e+02  1.30e+02  1.57e-01  3.31e+01  1.31e-02  2.54e-01  8.66e-01  
  3  +5.0988e-01  +3.3468e+01  3.30e+01  1.21e-01  2.52e+01  3.44e-05  2.46e-01  1.64e-01  
  4  +5.0061e-01  +2.0407e+00  1.54e+00  1.05e-02  2.23e+00  4.94e-06  1.51e-01  7.56e-01  
  5  +5.0008e-01  +7.6105e-01  2.61e-01  1.75e-03  3.78e-01  1.57e-05  6.69e-02  9.50e-01  
  6  +5.0005e-01  +6.8635e-01  1.86e-01  1.25e-03  2.70e-01  1.25e-05  4.45e-02  3.84e-01  
  7  +5.0004e-01  +6.4194e-01  1.42e-01  9.47e-04  2.05e-01  1.04e-05  2.24e-02  7.05e-01  
  8  +5.0000e-01  +5.9565e-01  9.57e-02  5.72e-04  1.24e-01  2.50e-05  4.18e-03  8.45e-01  
  9  +4.9910e-01  +5.9341e-01  9.43e-02  5.10e-05  1.11e-02  5.80e-04  1.64e-04  9.62e-01  
 10  +4.9861e-01  +5.8630e-01  8.77e-02  3.98e-05  8.68e-03  5.60e-04  1.27e-04  3.35e-01  
 11  +4.9811e-01  +5.7946e-01  8.13e-02  3.39e-05  7.40e-03  4.55e-04  1.08e-04  3.03e-01  
 12  +4.9672e-01  +5.6622e-01  6.95e-02  2.59e-05  5.65e-03  3.00e-04  8.27e-05  4.45e-01  
 13  +4.9657e-01  +5.6329e-01  6.67e-02  2.43e-05  5.30e-03  1.71e-04  7.69e-05  4.01e-01  
 14  +4.9581e-01  +5.5561e-01  5.98e-02  1.85e-05  4.04e-03  2.98e-05  5.78e-05  8.47e-01  
 15  +4.9563e-01  +5.5518e-01  5.95e-02  1.85e-05  4.02e-03  2.81e-05  5.76e-05  4.75e-02  
 16  +4.9506e-01  +5.5295e-01  5.79e-02  1.64e-05  3.56e-03  2.40e-05  5.10e-05  2.67e-01  
 17  +4.9247e-01  +5.4316e-01  5.07e-02  1.41e-05  3.06e-03  3.77e-06  4.80e-05  6.65e-01  
 18  +4.8755e-01  +5.1755e-01  3.00e-02  7.33e-06  1.60e-03  1.68e-06  2.41e-05  7.59e-01  
 19  +4.8359e-01  +5.0479e-01  2.12e-02  4.44e-06  9.66e-04  1.22e-06  1.47e-05  4.83e-01  
 20  +4.7833e-01  +4.8611e-01  7.78e-03  1.44e-06  3.13e-04  4.09e-07  4.95e-06  8.89e-01  
 21  +4.7847e-01  +4.8650e-01  8.02e-03  1.44e-06  3.14e-04  4.48e-07  4.90e-06  1.27e-01  
 22  +4.7842e-01  +4.8629e-01  7.87e-03  1.41e-06  3.07e-04  4.47e-07  4.79e-06  1.29e-01  
 23  +4.7800e-01  +4.8475e-01  6.75e-03  1.19e-06  2.59e-04  4.15e-07  4.06e-06  6.12e-01  
 24  +4.7666e-01  +4.8018e-01  3.52e-03  6.11e-07  1.33e-04  2.17e-07  2.11e-06  5.02e-01  
 25  +4.7527e-01  +4.7544e-01  1.69e-04  2.91e-08  6.33e-06  1.10e-08  1.02e-07  9.90e-01  
 26  +4.7520e-01  +4.7520e-01  1.70e-06  2.92e-10  6.35e-08  1.10e-10  1.02e-09  9.90e-01  
 27  +4.7520e-01  +4.7520e-01  1.70e-08  2.92e-12  6.35e-10  1.10e-12  1.02e-11  9.90e-01  
 28  +4.7520e-01  +4.7520e-01  1.70e-10  2.93e-14  6.36e-12  1.11e-14  1.03e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 162.4907ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:20 PM: Optimal value: 4.752e-01
(CVXPY) Sep 20 07:41:20 PM: Compilation took 3.276e-02 seconds
(CVXPY) Sep 20 07:41:20 PM: Solver (including time spent in interface) took 1.724e-01 seconds
Iteration: 4, Objective: 0.4752
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:20 PM: Your problem has 5055 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:20 PM: Finished problem compilation (took 3.694e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5055
  constraints   = 10055
  nnz(P)        = 0
  nnz(A)        = 64689
  cones (total) = 1
    : Nonnegative = 1,  numel = 10055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.08e+02  1.00e+00  1.00e+00   ------   
  1  +5.8801e-01  +1.0513e+03  1.05e+03  4.05e-01  6.73e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3801e-01  +1.3059e+02  1.30e+02  1.57e-01  3.31e+01  1.31e-02  2.54e-01  8.66e-01  
  3  +5.0987e-01  +3.3448e+01  3.29e+01  1.21e-01  2.52e+01  3.45e-05  2.46e-01  1.64e-01  
  4  +5.0061e-01  +2.0402e+00  1.54e+00  1.05e-02  2.23e+00  4.94e-06  1.51e-01  7.56e-01  
  5  +5.0008e-01  +7.7071e-01  2.71e-01  1.82e-03  3.93e-01  1.57e-05  6.79e-02  9.34e-01  
  6  +5.0006e-01  +6.8713e-01  1.87e-01  1.25e-03  2.71e-01  1.21e-05  4.29e-02  4.50e-01  
  7  +5.0004e-01  +6.3687e-01  1.37e-01  9.09e-04  1.97e-01  9.43e-06  1.73e-02  8.89e-01  
  8  +4.9999e-01  +6.0245e-01  1.02e-01  5.00e-04  1.09e-01  3.54e-05  2.47e-03  8.86e-01  
  9  +4.9907e-01  +5.9964e-01  1.01e-01  4.38e-05  9.54e-03  5.94e-04  1.38e-04  9.45e-01  
 10  +4.9791e-01  +5.8598e-01  8.81e-02  2.97e-05  6.47e-03  5.69e-04  9.28e-05  4.59e-01  
 11  +4.9698e-01  +5.7670e-01  7.97e-02  2.66e-05  5.80e-03  4.06e-04  8.31e-05  2.60e-01  
 12  +4.9474e-01  +5.6193e-01  6.72e-02  1.90e-05  4.14e-03  3.01e-04  5.94e-05  4.36e-01  
 13  +4.9420e-01  +5.5934e-01  6.51e-02  1.86e-05  4.06e-03  2.62e-04  5.92e-05  6.32e-02  
 14  +4.9396e-01  +5.5772e-01  6.38e-02  1.83e-05  3.99e-03  2.28e-04  5.81e-05  1.03e-01  
 15  +4.9202e-01  +5.4737e-01  5.53e-02  1.45e-05  3.17e-03  8.44e-05  4.60e-05  6.07e-01  
 16  +4.8704e-01  +5.2588e-01  3.88e-02  8.81e-06  1.92e-03  5.36e-05  2.84e-05  4.53e-01  
 17  +4.8445e-01  +5.1440e-01  3.00e-02  6.39e-06  1.39e-03  2.61e-05  2.08e-05  5.04e-01  
 18  +4.7949e-01  +4.9405e-01  1.46e-02  2.87e-06  6.26e-04  6.91e-06  9.55e-06  7.25e-01  
 19  +4.7709e-01  +4.8462e-01  7.53e-03  1.41e-06  3.07e-04  6.72e-07  4.78e-06  9.55e-01  
 20  +4.7710e-01  +4.8463e-01  7.53e-03  1.37e-06  2.98e-04  6.53e-07  4.61e-06  2.27e-01  
 21  +4.7694e-01  +4.8411e-01  7.17e-03  1.32e-06  2.87e-04  5.74e-07  4.47e-06  2.51e-01  
 22  +4.7501e-01  +4.7715e-01  2.14e-03  3.84e-07  8.37e-05  1.69e-07  1.33e-06  7.51e-01  
 23  +4.7424e-01  +4.7457e-01  3.29e-04  5.81e-08  1.27e-05  1.88e-08  2.05e-07  9.76e-01  
 24  +4.7411e-01  +4.7412e-01  1.42e-05  2.48e-09  5.40e-07  8.42e-10  8.80e-09  9.65e-01  
 25  +4.7410e-01  +4.7410e-01  1.42e-07  2.48e-11  5.40e-09  8.43e-12  8.80e-11  9.90e-01  
 26  +4.7410e-01  +4.7410e-01  1.42e-09  2.48e-13  5.41e-11  9.16e-14  9.54e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 155.0921ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:20 PM: Optimal value: 4.741e-01
(CVXPY) Sep 20 07:41:20 PM: Compilation took 3.694e-02 seconds
(CVXPY) Sep 20 07:41:20 PM: Solver (including time spent in interface) took 1.652e-01 seconds
Iteration: 5, Objective: 0.4741
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:20 PM: Your problem has 5065 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:20 PM: Finished problem compilation (took 3.971e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5065
  constraints   = 10065
  nnz(P)        = 0
  nnz(A)        = 66848
  cones (total) = 1
    : Nonnegative = 1,  numel = 10065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.08e+02  1.00e+00  1.00e+00   ------   
  1  +5.8793e-01  +1.0515e+03  1.05e+03  4.05e-01  6.74e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3794e-01  +1.3046e+02  1.30e+02  1.57e-01  3.31e+01  1.32e-02  2.54e-01  8.67e-01  
  3  +5.0986e-01  +3.3415e+01  3.29e+01  1.21e-01  2.52e+01  3.45e-05  2.46e-01  1.65e-01  
  4  +5.0061e-01  +2.0416e+00  1.54e+00  1.05e-02  2.24e+00  4.96e-06  1.50e-01  7.58e-01  
  5  +5.0008e-01  +7.5801e-01  2.58e-01  1.73e-03  3.75e-01  1.61e-05  6.38e-02  9.70e-01  
  6  +5.0005e-01  +6.7923e-01  1.79e-01  1.20e-03  2.60e-01  1.37e-05  3.45e-02  5.65e-01  
  7  +5.0004e-01  +6.7091e-01  1.71e-01  1.09e-03  2.37e-01  1.79e-05  1.10e-02  9.90e-01  
  8  +4.9963e-01  +6.1517e-01  1.16e-01  1.27e-04  2.78e-02  2.58e-04  4.16e-04  9.72e-01  
  9  +4.9822e-01  +6.0732e-01  1.09e-01  3.45e-05  7.54e-03  8.81e-04  1.08e-04  7.61e-01  
 10  +4.9723e-01  +5.9887e-01  1.02e-01  3.17e-05  6.92e-03  7.17e-04  9.93e-05  1.82e-01  
 11  +4.9624e-01  +5.9044e-01  9.42e-02  2.83e-05  6.19e-03  5.29e-04  8.88e-05  2.73e-01  
 12  +4.9593e-01  +5.8745e-01  9.15e-02  2.80e-05  6.12e-03  4.49e-04  8.79e-05  9.71e-02  
 13  +4.9363e-01  +5.7457e-01  8.09e-02  2.18e-05  4.77e-03  3.71e-04  6.91e-05  3.13e-01  
 14  +4.9284e-01  +5.6984e-01  7.70e-02  2.01e-05  4.38e-03  2.74e-04  6.37e-05  2.56e-01  
 15  +4.9214e-01  +5.6579e-01  7.36e-02  1.98e-05  4.33e-03  2.23e-04  6.31e-05  9.67e-02  
 16  +4.8558e-01  +5.3539e-01  4.98e-02  1.17e-05  2.55e-03  1.16e-04  3.82e-05  5.15e-01  
 17  +4.7823e-01  +5.0278e-01  2.45e-02  5.30e-06  1.16e-03  4.44e-05  1.81e-05  5.78e-01  
 18  +4.7734e-01  +4.9789e-01  2.06e-02  4.24e-06  9.26e-04  1.54e-05  1.45e-05  6.77e-01  
 19  +4.7545e-01  +4.8966e-01  1.42e-02  2.85e-06  6.21e-04  9.15e-07  9.83e-06  9.90e-01  
 20  +4.7274e-01  +4.7907e-01  6.33e-03  1.25e-06  2.73e-04  4.04e-07  4.41e-06  5.98e-01  
 21  +4.7225e-01  +4.7707e-01  4.82e-03  9.52e-07  2.08e-04  2.80e-07  3.37e-06  9.90e-01  
 22  +4.7118e-01  +4.7303e-01  1.85e-03  3.64e-07  7.95e-05  1.08e-07  1.30e-06  6.46e-01  
 23  +4.7052e-01  +4.7057e-01  4.88e-05  9.59e-09  2.09e-06  2.72e-09  3.46e-08  9.90e-01  
 24  +4.7050e-01  +4.7050e-01  4.88e-07  9.59e-11  2.09e-08  2.72e-11  3.46e-10  9.90e-01  
 25  +4.7050e-01  +4.7050e-01  4.88e-09  9.59e-13  2.09e-10  2.72e-13  3.46e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 160.5771ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:20 PM: Optimal value: 4.705e-01
(CVXPY) Sep 20 07:41:20 PM: Compilation took 3.971e-02 seconds
(CVXPY) Sep 20 07:41:20 PM: Solver (including time spent in interface) took 1.718e-01 seconds
Iteration: 6, Objective: 0.4705
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:21 PM: Your problem has 5075 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:21 PM: Finished problem compilation (took 4.183e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5075
  constraints   = 10075
  nnz(P)        = 0
  nnz(A)        = 68661
  cones (total) = 1
    : Nonnegative = 1,  numel = 10075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.08e+02  1.00e+00  1.00e+00   ------   
  1  +5.8790e-01  +1.0515e+03  1.05e+03  4.05e-01  6.75e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3790e-01  +1.3036e+02  1.30e+02  1.57e-01  3.30e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0985e-01  +3.3385e+01  3.29e+01  1.21e-01  2.52e+01  3.45e-05  2.46e-01  1.66e-01  
  4  +5.0061e-01  +2.0429e+00  1.54e+00  1.05e-02  2.25e+00  4.96e-06  1.50e-01  7.58e-01  
  5  +5.0010e-01  +8.0357e-01  3.03e-01  2.04e-03  4.43e-01  1.58e-05  7.04e-02  8.92e-01  
  6  +5.0006e-01  +7.1388e-01  2.14e-01  1.44e-03  3.11e-01  1.34e-05  4.15e-02  5.01e-01  
  7  +5.0004e-01  +6.5812e-01  1.58e-01  1.04e-03  2.25e-01  1.76e-05  1.38e-02  7.92e-01  
  8  +4.9977e-01  +6.3645e-01  1.37e-01  2.69e-04  5.87e-02  1.79e-04  9.29e-04  9.60e-01  
  9  +4.9832e-01  +6.2913e-01  1.31e-01  5.14e-05  1.12e-02  9.42e-04  1.63e-04  8.30e-01  
 10  +4.9749e-01  +6.1775e-01  1.20e-01  4.61e-05  1.01e-02  7.75e-04  1.46e-04  1.91e-01  
 11  +4.9719e-01  +6.0219e-01  1.05e-01  3.80e-05  8.33e-03  2.73e-04  1.20e-04  6.43e-01  
 12  +4.9592e-01  +5.9286e-01  9.69e-02  3.14e-05  6.86e-03  2.14e-04  9.91e-05  3.50e-01  
 13  +4.9555e-01  +5.9017e-01  9.46e-02  3.07e-05  6.73e-03  1.85e-04  9.74e-05  1.04e-01  
 14  +4.9445e-01  +5.8427e-01  8.98e-02  2.70e-05  5.92e-03  1.54e-04  8.62e-05  2.42e-01  
 15  +4.9100e-01  +5.6392e-01  7.29e-02  2.13e-05  4.67e-03  4.03e-05  6.94e-05  6.15e-01  
 16  +4.8571e-01  +5.4000e-01  5.43e-02  1.38e-05  3.02e-03  2.67e-05  4.61e-05  4.18e-01  
 17  +4.8283e-01  +5.2635e-01  4.35e-02  1.04e-05  2.28e-03  4.93e-06  3.53e-05  7.66e-01  
 18  +4.7832e-01  +5.0716e-01  2.88e-02  6.48e-06  1.42e-03  2.74e-06  2.25e-05  4.84e-01  
 19  +4.7826e-01  +5.0676e-01  2.85e-02  6.35e-06  1.39e-03  2.53e-06  2.20e-05  1.53e-01  
 20  +4.7174e-01  +4.7957e-01  7.83e-03  1.61e-06  3.51e-04  4.25e-07  5.79e-06  9.18e-01  
 21  +4.7099e-01  +4.7655e-01  5.56e-03  1.11e-06  2.43e-04  3.07e-07  4.01e-06  6.62e-01  
 22  +4.7058e-01  +4.7491e-01  4.33e-03  8.71e-07  1.90e-04  2.35e-07  3.19e-06  9.88e-01  
 23  +4.6963e-01  +4.7123e-01  1.60e-03  3.20e-07  6.98e-05  8.93e-08  1.18e-06  7.05e-01  
 24  +4.6938e-01  +4.7034e-01  9.68e-04  1.89e-07  4.14e-05  5.28e-08  7.02e-07  6.40e-01  
 25  +4.6904e-01  +4.6915e-01  1.09e-04  2.06e-08  4.49e-06  6.10e-09  7.81e-08  9.43e-01  
 26  +4.6900e-01  +4.6900e-01  1.25e-06  2.33e-10  5.10e-08  6.98e-11  8.91e-10  9.89e-01  
 27  +4.6900e-01  +4.6900e-01  1.25e-08  2.33e-12  5.10e-10  6.98e-13  8.91e-12  9.90e-01  
 28  +4.6900e-01  +4.6900e-01  1.25e-10  2.35e-14  5.12e-12  8.62e-15  1.09e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 192.6047ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:21 PM: Optimal value: 4.690e-01
(CVXPY) Sep 20 07:41:21 PM: Compilation took 4.183e-02 seconds
(CVXPY) Sep 20 07:41:21 PM: Solver (including time spent in interface) took 2.047e-01 seconds
Iteration: 7, Objective: 0.4690
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:21 PM: Your problem has 5085 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:21 PM: Finished problem compilation (took 4.223e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5085
  constraints   = 10085
  nnz(P)        = 0
  nnz(A)        = 69845
  cones (total) = 1
    : Nonnegative = 1,  numel = 10085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.08e+02  1.00e+00  1.00e+00   ------   
  1  +5.8789e-01  +1.0516e+03  1.05e+03  4.05e-01  6.75e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3788e-01  +1.3033e+02  1.30e+02  1.57e-01  3.30e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0984e-01  +3.3376e+01  3.29e+01  1.21e-01  2.52e+01  3.45e-05  2.45e-01  1.66e-01  
  4  +5.0061e-01  +2.0430e+00  1.54e+00  1.05e-02  2.25e+00  4.97e-06  1.50e-01  7.59e-01  
  5  +5.0009e-01  +7.9827e-01  2.98e-01  2.01e-03  4.35e-01  1.58e-05  6.93e-02  9.03e-01  
  6  +5.0006e-01  +7.0637e-01  2.06e-01  1.38e-03  3.00e-01  1.36e-05  3.79e-02  5.72e-01  
  7  +5.0003e-01  +6.6566e-01  1.66e-01  1.08e-03  2.35e-01  2.05e-05  1.32e-02  7.36e-01  
  8  +4.9971e-01  +6.4193e-01  1.42e-01  2.48e-04  5.43e-02  2.20e-04  8.47e-04  9.62e-01  
  9  +4.9791e-01  +6.3365e-01  1.36e-01  4.67e-05  1.02e-02  1.15e-03  1.48e-04  8.31e-01  
 10  +4.9694e-01  +6.1889e-01  1.22e-01  4.13e-05  9.05e-03  8.28e-04  1.31e-04  2.75e-01  
 11  +4.9577e-01  +6.0558e-01  1.10e-01  3.50e-05  7.67e-03  5.80e-04  1.11e-04  3.45e-01  
 12  +4.9488e-01  +5.9852e-01  1.04e-01  3.19e-05  6.98e-03  4.65e-04  1.01e-04  2.15e-01  
 13  +4.9357e-01  +5.8645e-01  9.29e-02  3.00e-05  6.57e-03  2.33e-04  9.65e-05  3.35e-01  
 14  +4.8644e-01  +5.5047e-01  6.40e-02  1.61e-05  3.51e-03  1.44e-04  5.31e-05  5.74e-01  
 15  +4.8300e-01  +5.3416e-01  5.12e-02  1.23e-05  2.69e-03  7.97e-05  4.14e-05  4.08e-01  
 16  +4.8005e-01  +5.2071e-01  4.07e-02  9.40e-06  2.06e-03  5.20e-05  3.22e-05  3.38e-01  
 17  +4.7317e-01  +4.9043e-01  1.73e-02  3.70e-06  8.07e-04  1.47e-05  1.31e-05  6.95e-01  
 18  +4.7203e-01  +4.8527e-01  1.32e-02  2.74e-06  5.99e-04  4.60e-06  9.83e-06  7.26e-01  
 19  +4.6880e-01  +4.7233e-01  3.53e-03  7.08e-07  1.55e-04  1.01e-06  2.64e-06  7.84e-01  
 20  +4.6786e-01  +4.6883e-01  9.74e-04  1.89e-07  4.13e-05  2.19e-07  7.28e-07  7.96e-01  
 21  +4.6752e-01  +4.6758e-01  5.68e-05  1.09e-08  2.38e-06  4.65e-09  4.26e-08  9.90e-01  
 22  +4.6750e-01  +4.6750e-01  5.70e-07  1.09e-10  2.39e-08  4.66e-11  4.28e-10  9.90e-01  
 23  +4.6750e-01  +4.6750e-01  5.70e-09  1.09e-12  2.39e-10  4.66e-13  4.28e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 158.3845ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:21 PM: Optimal value: 4.675e-01
(CVXPY) Sep 20 07:41:21 PM: Compilation took 4.223e-02 seconds
(CVXPY) Sep 20 07:41:21 PM: Solver (including time spent in interface) took 1.707e-01 seconds
Iteration: 8, Objective: 0.4675
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:21 PM: Your problem has 5095 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:21 PM: Finished problem compilation (took 4.456e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5095
  constraints   = 10095
  nnz(P)        = 0
  nnz(A)        = 70846
  cones (total) = 1
    : Nonnegative = 1,  numel = 10095

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.08e+02  1.00e+00  1.00e+00   ------   
  1  +5.8789e-01  +1.0515e+03  1.05e+03  4.05e-01  6.74e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3786e-01  +1.3028e+02  1.30e+02  1.57e-01  3.29e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0984e-01  +3.3364e+01  3.29e+01  1.21e-01  2.51e+01  3.45e-05  2.45e-01  1.66e-01  
  4  +5.0061e-01  +2.0436e+00  1.54e+00  1.05e-02  2.25e+00  4.97e-06  1.50e-01  7.59e-01  
  5  +5.0009e-01  +7.8875e-01  2.89e-01  1.94e-03  4.22e-01  1.60e-05  6.76e-02  9.21e-01  
  6  +5.0006e-01  +7.0507e-01  2.05e-01  1.38e-03  2.99e-01  1.40e-05  3.70e-02  5.71e-01  
  7  +5.0003e-01  +6.6288e-01  1.63e-01  1.03e-03  2.24e-01  2.50e-05  9.60e-03  8.81e-01  
  8  +4.9905e-01  +6.3648e-01  1.37e-01  8.48e-05  1.86e-02  6.30e-04  2.73e-04  9.89e-01  
  9  +4.9749e-01  +6.2302e-01  1.26e-01  4.22e-05  9.25e-03  9.95e-04  1.34e-04  5.83e-01  
 10  +4.9733e-01  +6.1801e-01  1.21e-01  4.14e-05  9.06e-03  7.82e-04  1.31e-04  1.67e-01  
 11  +4.9643e-01  +6.0891e-01  1.12e-01  3.69e-05  8.07e-03  6.11e-04  1.17e-04  2.59e-01  
 12  +4.9582e-01  +6.0290e-01  1.07e-01  3.46e-05  7.58e-03  4.63e-04  1.10e-04  2.22e-01  
 13  +4.9382e-01  +5.8610e-01  9.23e-02  3.07e-05  6.73e-03  1.35e-04  9.91e-05  5.48e-01  
 14  +4.8842e-01  +5.5980e-01  7.14e-02  1.93e-05  4.22e-03  1.07e-04  6.35e-05  4.17e-01  
 15  +4.8569e-01  +5.4723e-01  6.15e-02  1.58e-05  3.46e-03  8.19e-05  5.28e-05  2.43e-01  
 16  +4.8113e-01  +5.2610e-01  4.50e-02  1.07e-05  2.35e-03  2.43e-05  3.67e-05  6.48e-01  
 17  +4.7879e-01  +5.1614e-01  3.73e-02  8.49e-06  1.86e-03  1.38e-05  2.94e-05  4.42e-01  
 18  +4.7431e-01  +4.9732e-01  2.30e-02  4.95e-06  1.08e-03  7.78e-06  1.76e-05  4.41e-01  
 19  +4.7166e-01  +4.8562e-01  1.40e-02  2.84e-06  6.21e-04  7.40e-07  1.03e-05  9.90e-01  
 20  +4.6796e-01  +4.7115e-01  3.18e-03  6.34e-07  1.38e-04  1.63e-07  2.39e-06  8.00e-01  
 21  +4.6688e-01  +4.6711e-01  2.22e-04  4.31e-08  9.42e-06  1.14e-08  1.69e-07  9.90e-01  
 22  +4.6680e-01  +4.6681e-01  4.13e-06  7.99e-10  1.75e-07  2.12e-10  3.15e-09  9.82e-01  
 23  +4.6680e-01  +4.6680e-01  4.13e-08  8.00e-12  1.75e-09  2.12e-12  3.15e-11  9.90e-01  
 24  +4.6680e-01  +4.6680e-01  4.14e-10  8.01e-14  1.75e-11  2.26e-14  3.34e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 166.0993ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:22 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:22 PM: Optimal value: 4.668e-01
(CVXPY) Sep 20 07:41:22 PM: Compilation took 4.456e-02 seconds
(CVXPY) Sep 20 07:41:22 PM: Solver (including time spent in interface) took 1.775e-01 seconds
Iteration: 9, Objective: 0.4668
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:22 PM: Your problem has 5105 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:22 PM: Finished problem compilation (took 4.483e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5105
  constraints   = 10105
  nnz(P)        = 0
  nnz(A)        = 72262
  cones (total) = 1
    : Nonnegative = 1,  numel = 10105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.08e+02  1.00e+00  1.00e+00   ------   
  1  +5.8775e-01  +1.0519e+03  1.05e+03  4.06e-01  6.75e+01  3.86e-03  5.45e-01  6.10e-01  
  2  +5.3778e-01  +1.3014e+02  1.30e+02  1.57e-01  3.29e+01  1.32e-02  2.54e-01  8.69e-01  
  3  +5.0982e-01  +3.3343e+01  3.28e+01  1.21e-01  2.51e+01  3.46e-05  2.45e-01  1.68e-01  
  4  +5.0061e-01  +2.0548e+00  1.55e+00  1.06e-02  2.27e+00  4.98e-06  1.50e-01  7.57e-01  
  5  +5.0012e-01  +8.5525e-01  3.55e-01  2.40e-03  5.19e-01  1.58e-05  7.59e-02  8.25e-01  
  6  +5.0006e-01  +7.0990e-01  2.10e-01  1.41e-03  3.06e-01  1.32e-05  3.62e-02  6.27e-01  
  7  +5.0005e-01  +7.0376e-01  2.04e-01  1.32e-03  2.86e-01  2.20e-05  1.38e-02  7.61e-01  
  8  +4.9981e-01  +6.8006e-01  1.80e-01  3.77e-04  8.25e-02  1.65e-04  1.32e-03  9.23e-01  
  9  +4.9839e-01  +6.7149e-01  1.73e-01  6.95e-05  1.52e-02  9.10e-04  2.22e-04  8.36e-01  
 10  +4.9671e-01  +6.4258e-01  1.46e-01  5.32e-05  1.17e-02  6.60e-04  1.71e-04  3.78e-01  
 11  +4.9590e-01  +6.3098e-01  1.35e-01  4.44e-05  9.73e-03  5.41e-04  1.43e-04  3.17e-01  
 12  +4.9437e-01  +6.1581e-01  1.21e-01  3.79e-05  8.31e-03  3.83e-04  1.23e-04  3.12e-01  
 13  +4.9040e-01  +5.8805e-01  9.76e-02  2.90e-05  6.35e-03  2.13e-04  9.61e-05  3.95e-01  
 14  +4.8217e-01  +5.4055e-01  5.84e-02  1.51e-05  3.31e-03  4.62e-05  5.25e-05  7.16e-01  
 15  +4.8188e-01  +5.3875e-01  5.69e-02  1.45e-05  3.18e-03  3.61e-05  5.04e-05  2.17e-01  
 16  +4.7947e-01  +5.2756e-01  4.81e-02  1.16e-05  2.54e-03  2.24e-05  4.08e-05  3.95e-01  
 17  +4.7644e-01  +5.1392e-01  3.75e-02  8.54e-06  1.87e-03  1.09e-05  3.06e-05  5.27e-01  
 18  +4.7483e-01  +5.0697e-01  3.21e-02  7.13e-06  1.56e-03  7.68e-06  2.59e-05  3.25e-01  
 19  +4.6868e-01  +4.8067e-01  1.20e-02  2.48e-06  5.42e-04  1.28e-06  9.50e-06  8.55e-01  
 20  +4.6634e-01  +4.7119e-01  4.85e-03  9.83e-07  2.15e-04  4.45e-07  3.89e-06  6.91e-01  
 21  +4.6514e-01  +4.6633e-01  1.20e-03  2.41e-07  5.26e-05  6.34e-08  9.71e-07  9.90e-01  
 22  +4.6471e-01  +4.6472e-01  1.83e-05  3.67e-09  8.01e-07  9.43e-10  1.49e-08  9.87e-01  
 23  +4.6470e-01  +4.6470e-01  1.83e-07  3.67e-11  8.01e-09  9.44e-12  1.49e-10  9.90e-01  
 24  +4.6470e-01  +4.6470e-01  1.83e-09  3.67e-13  8.02e-11  9.52e-14  1.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 161.5299ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:22 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:22 PM: Optimal value: 4.647e-01
(CVXPY) Sep 20 07:41:22 PM: Compilation took 4.483e-02 seconds
(CVXPY) Sep 20 07:41:22 PM: Solver (including time spent in interface) took 1.741e-01 seconds
Iteration: 10, Objective: 0.4647
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:22 PM: Your problem has 5115 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:22 PM: Finished problem compilation (took 3.956e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5115
  constraints   = 10115
  nnz(P)        = 0
  nnz(A)        = 73500
  cones (total) = 1
    : Nonnegative = 1,  numel = 10115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.08e+02  1.00e+00  1.00e+00   ------   
  1  +5.8775e-01  +1.0519e+03  1.05e+03  4.06e-01  6.74e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3776e-01  +1.3010e+02  1.30e+02  1.57e-01  3.29e+01  1.32e-02  2.54e-01  8.69e-01  
  3  +5.0982e-01  +3.3329e+01  3.28e+01  1.21e-01  2.51e+01  3.46e-05  2.45e-01  1.68e-01  
  4  +5.0061e-01  +2.0544e+00  1.55e+00  1.06e-02  2.27e+00  4.99e-06  1.50e-01  7.57e-01  
  5  +5.0012e-01  +8.5278e-01  3.53e-01  2.38e-03  5.16e-01  1.58e-05  7.52e-02  8.30e-01  
  6  +5.0006e-01  +7.1378e-01  2.14e-01  1.44e-03  3.12e-01  1.37e-05  3.56e-02  6.30e-01  
  7  +5.0002e-01  +6.9816e-01  1.98e-01  1.14e-03  2.48e-01  3.78e-05  7.27e-03  9.39e-01  
  8  +4.9898e-01  +6.8649e-01  1.88e-01  1.08e-04  2.37e-02  6.70e-04  3.49e-04  9.56e-01  
  9  +4.9750e-01  +6.5817e-01  1.61e-01  5.88e-05  1.29e-02  8.15e-04  1.88e-04  5.74e-01  
 10  +4.9636e-01  +6.4509e-01  1.49e-01  4.96e-05  1.09e-02  7.22e-04  1.59e-04  2.43e-01  
 11  +4.9555e-01  +6.3309e-01  1.38e-01  4.50e-05  9.87e-03  5.38e-04  1.44e-04  2.45e-01  
 12  +4.9388e-01  +6.1058e-01  1.17e-01  4.06e-05  8.89e-03  1.90e-04  1.32e-04  4.53e-01  
 13  +4.8804e-01  +5.7779e-01  8.97e-02  2.53e-05  5.53e-03  1.54e-04  8.43e-05  4.05e-01  
 14  +4.8585e-01  +5.6513e-01  7.93e-02  2.16e-05  4.73e-03  9.51e-05  7.32e-05  3.37e-01  
 15  +4.8189e-01  +5.4466e-01  6.28e-02  1.61e-05  3.52e-03  4.88e-05  5.60e-05  4.51e-01  
 16  +4.7962e-01  +5.3338e-01  5.38e-02  1.33e-05  2.90e-03  3.04e-05  4.69e-05  3.63e-01  
 17  +4.7376e-01  +5.0664e-01  3.29e-02  7.40e-06  1.62e-03  1.40e-05  2.72e-05  5.48e-01  
 18  +4.7368e-01  +5.0627e-01  3.26e-02  7.28e-06  1.59e-03  1.34e-05  2.67e-05  6.14e-02  
 19  +4.7084e-01  +4.9385e-01  2.30e-02  4.92e-06  1.08e-03  4.90e-06  1.84e-05  6.55e-01  
 20  +4.6677e-01  +4.7662e-01  9.85e-03  2.04e-06  4.46e-04  1.66e-06  7.92e-06  6.71e-01  
 21  +4.6389e-01  +4.6473e-01  8.35e-04  1.70e-07  3.72e-05  6.66e-08  6.87e-07  9.65e-01  
 22  +4.6361e-01  +4.6363e-01  2.46e-05  4.99e-09  1.09e-06  1.62e-09  2.06e-08  9.77e-01  
 23  +4.6360e-01  +4.6360e-01  2.46e-07  4.99e-11  1.09e-08  1.62e-11  2.06e-10  9.90e-01  
 24  +4.6360e-01  +4.6360e-01  2.46e-09  4.99e-13  1.09e-10  1.62e-13  2.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 156.0404ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:22 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:22 PM: Optimal value: 4.636e-01
(CVXPY) Sep 20 07:41:22 PM: Compilation took 3.956e-02 seconds
(CVXPY) Sep 20 07:41:22 PM: Solver (including time spent in interface) took 1.671e-01 seconds
Iteration: 11, Objective: 0.4636
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:23 PM: Your problem has 5120 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:23 PM: Finished problem compilation (took 4.267e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5120
  constraints   = 10120
  nnz(P)        = 0
  nnz(A)        = 74249
  cones (total) = 1
    : Nonnegative = 1,  numel = 10120

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8781e-01  +1.0517e+03  1.05e+03  4.06e-01  6.74e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3776e-01  +1.3009e+02  1.30e+02  1.57e-01  3.28e+01  1.32e-02  2.54e-01  8.69e-01  
  3  +5.0981e-01  +3.3313e+01  3.28e+01  1.21e-01  2.51e+01  3.46e-05  2.45e-01  1.68e-01  
  4  +5.0061e-01  +2.0489e+00  1.55e+00  1.06e-02  2.26e+00  4.98e-06  1.50e-01  7.59e-01  
  5  +5.0011e-01  +8.4574e-01  3.46e-01  2.33e-03  5.06e-01  1.58e-05  7.42e-02  8.40e-01  
  6  +5.0007e-01  +7.2026e-01  2.20e-01  1.48e-03  3.21e-01  1.41e-05  3.63e-02  6.18e-01  
  7  +5.0005e-01  +7.2822e-01  2.28e-01  1.40e-03  3.04e-01  2.83e-05  1.08e-02  9.10e-01  
  8  +4.9914e-01  +6.7387e-01  1.75e-01  1.06e-04  2.31e-02  5.74e-04  3.41e-04  9.79e-01  
  9  +4.9786e-01  +6.5483e-01  1.57e-01  5.79e-05  1.27e-02  7.76e-04  1.85e-04  5.54e-01  
 10  +4.9668e-01  +6.4247e-01  1.46e-01  4.88e-05  1.07e-02  7.00e-04  1.56e-04  2.42e-01  
 11  +4.9573e-01  +6.3081e-01  1.35e-01  4.45e-05  9.75e-03  5.17e-04  1.43e-04  2.46e-01  
 12  +4.9443e-01  +6.1567e-01  1.21e-01  4.20e-05  9.21e-03  2.68e-04  1.37e-04  3.19e-01  
 13  +4.8944e-01  +5.8702e-01  9.76e-02  2.81e-05  6.16e-03  2.06e-04  9.40e-05  4.05e-01  
 14  +4.8616e-01  +5.6627e-01  8.01e-02  2.29e-05  5.01e-03  5.85e-05  7.86e-05  5.64e-01  
 15  +4.7994e-01  +5.3630e-01  5.64e-02  1.44e-05  3.15e-03  3.62e-05  5.15e-05  4.04e-01  
 16  +4.7965e-01  +5.3453e-01  5.49e-02  1.39e-05  3.03e-03  2.91e-05  4.96e-05  2.00e-01  
 17  +4.7606e-01  +5.1804e-01  4.20e-02  1.00e-05  2.19e-03  1.87e-05  3.67e-05  3.66e-01  
 18  +4.7399e-01  +5.0874e-01  3.48e-02  7.94e-06  1.74e-03  1.36e-05  2.95e-05  3.02e-01  
 19  +4.7370e-01  +5.0713e-01  3.34e-02  7.61e-06  1.66e-03  1.03e-05  2.83e-05  2.54e-01  
 20  +4.7056e-01  +4.9351e-01  2.30e-02  5.02e-06  1.10e-03  5.60e-06  1.91e-05  4.78e-01  
 21  +4.6542e-01  +4.7141e-01  5.99e-03  1.26e-06  2.75e-04  8.38e-07  5.03e-06  8.54e-01  
 22  +4.6369e-01  +4.6423e-01  5.47e-04  1.14e-07  2.50e-05  4.96e-08  4.73e-07  9.46e-01  
 23  +4.6350e-01  +4.6351e-01  1.00e-05  2.08e-09  4.55e-07  7.54e-10  8.76e-09  9.85e-01  
 24  +4.6350e-01  +4.6350e-01  1.00e-07  2.08e-11  4.56e-09  7.55e-12  8.77e-11  9.90e-01  
 25  +4.6350e-01  +4.6350e-01  1.00e-09  2.08e-13  4.56e-11  7.55e-14  8.77e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 163.6637ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:23 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:23 PM: Optimal value: 4.635e-01
(CVXPY) Sep 20 07:41:23 PM: Compilation took 4.267e-02 seconds
(CVXPY) Sep 20 07:41:23 PM: Solver (including time spent in interface) took 1.748e-01 seconds
Iteration: 12, Objective: 0.4635
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:23 PM: Your problem has 5121 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:23 PM: Finished problem compilation (took 4.323e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5121
  constraints   = 10121
  nnz(P)        = 0
  nnz(A)        = 74335
  cones (total) = 1
    : Nonnegative = 1,  numel = 10121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8781e-01  +1.0517e+03  1.05e+03  4.06e-01  6.74e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3776e-01  +1.3008e+02  1.30e+02  1.57e-01  3.28e+01  1.32e-02  2.54e-01  8.69e-01  
  3  +5.0981e-01  +3.3311e+01  3.28e+01  1.21e-01  2.51e+01  3.46e-05  2.45e-01  1.68e-01  
  4  +5.0061e-01  +2.0487e+00  1.55e+00  1.06e-02  2.26e+00  4.98e-06  1.50e-01  7.59e-01  
  5  +5.0011e-01  +8.4514e-01  3.45e-01  2.33e-03  5.05e-01  1.58e-05  7.41e-02  8.41e-01  
  6  +5.0007e-01  +7.1973e-01  2.20e-01  1.48e-03  3.21e-01  1.41e-05  3.61e-02  6.22e-01  
  7  +5.0005e-01  +7.2881e-01  2.29e-01  1.40e-03  3.04e-01  2.86e-05  1.06e-02  9.15e-01  
  8  +4.9914e-01  +6.7621e-01  1.77e-01  1.06e-04  2.33e-02  5.76e-04  3.44e-04  9.78e-01  
  9  +4.9787e-01  +6.5634e-01  1.58e-01  5.85e-05  1.28e-02  7.69e-04  1.87e-04  5.53e-01  
 10  +4.9667e-01  +6.4352e-01  1.47e-01  4.92e-05  1.08e-02  6.91e-04  1.58e-04  2.44e-01  
 11  +4.9572e-01  +6.3138e-01  1.36e-01  4.48e-05  9.82e-03  5.04e-04  1.44e-04  2.53e-01  
 12  +4.9445e-01  +6.1618e-01  1.22e-01  4.23e-05  9.27e-03  2.61e-04  1.38e-04  3.18e-01  
 13  +4.8967e-01  +5.8854e-01  9.89e-02  2.87e-05  6.29e-03  2.02e-04  9.59e-05  3.95e-01  
 14  +4.8633e-01  +5.6713e-01  8.08e-02  2.32e-05  5.09e-03  5.47e-05  7.98e-05  5.77e-01  
 15  +4.7988e-01  +5.3598e-01  5.61e-02  1.43e-05  3.14e-03  3.34e-05  5.13e-05  4.17e-01  
 16  +4.7965e-01  +5.3459e-01  5.49e-02  1.39e-05  3.04e-03  2.78e-05  4.97e-05  1.69e-01  
 17  +4.7637e-01  +5.1944e-01  4.31e-02  1.03e-05  2.26e-03  1.81e-05  3.77e-05  3.60e-01  
 18  +4.7388e-01  +5.0825e-01  3.44e-02  7.85e-06  1.72e-03  1.25e-05  2.92e-05  3.37e-01  
 19  +4.7363e-01  +5.0687e-01  3.32e-02  7.58e-06  1.66e-03  9.91e-06  2.82e-05  2.17e-01  
 20  +4.7100e-01  +4.9546e-01  2.45e-02  5.39e-06  1.18e-03  6.41e-06  2.05e-05  3.71e-01  
 21  +4.6556e-01  +4.7203e-01  6.47e-03  1.36e-06  2.98e-04  9.50e-07  5.44e-06  8.50e-01  
 22  +4.6376e-01  +4.6453e-01  7.65e-04  1.60e-07  3.49e-05  6.03e-08  6.60e-07  9.53e-01  
 23  +4.6351e-01  +4.6353e-01  2.22e-05  4.62e-09  1.01e-06  1.54e-09  1.94e-08  9.74e-01  
 24  +4.6350e-01  +4.6350e-01  2.24e-07  4.66e-11  1.02e-08  1.55e-11  1.96e-10  9.90e-01  
 25  +4.6350e-01  +4.6350e-01  2.24e-09  4.67e-13  1.02e-10  1.55e-13  1.96e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 156.3485ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:23 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:23 PM: Optimal value: 4.635e-01
(CVXPY) Sep 20 07:41:23 PM: Compilation took 4.323e-02 seconds
(CVXPY) Sep 20 07:41:23 PM: Solver (including time spent in interface) took 1.677e-01 seconds
FULL MODEL:
  Accruacy: 0.5204
  Our objective: 0.040799999999999975

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0018)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0026)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0018)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0018)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0024)
 OR (x3 = 0 AND x4 = 0 AND x6 = 0)                                             <-- (term's our objective: 0.0226)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 10.367101430892944
Best over terms:
  Our final objective: 0.02259999999999998
    Its accruacy: 0.5113
    Its hamming distance: 4
  Shortest hamming distance: 2
    Its our objective: 0.0017999999999999848
  Highest accruacy: 0.5113
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

