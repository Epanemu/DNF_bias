Command:
python test_script.py -s constant_subclass -d 6 -n 1000 --seed 73 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.028
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 6.

Computed total variation: 0.19999999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:42 PM: Your problem has 513 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:42 PM: Finished problem compilation (took 7.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 513
  constraints   = 1013
  nnz(P)        = 0
  nnz(A)        = 4513
  cones (total) = 1
    : Nonnegative = 1,  numel = 1013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9989e-01  +5.0075e+02  5.00e+02  9.53e-01  3.06e+01  1.00e+00  1.00e+00   ------   
  1  +5.9280e-01  +1.0326e+02  1.03e+02  3.71e-01  1.83e+01  3.92e-03  5.27e-01  6.27e-01  
  2  +5.4049e-01  +1.3784e+01  1.32e+01  1.30e-01  8.03e+00  1.16e-02  2.39e-01  8.40e-01  
  3  +5.0605e-01  +2.9737e+00  2.47e+00  5.02e-02  2.96e+00  2.31e-05  2.25e-01  2.71e-01  
  4  +5.0041e-01  +7.2385e-01  2.23e-01  4.87e-03  3.01e-01  8.60e-06  6.47e-02  8.64e-01  
  5  +4.9983e-01  +6.4048e-01  1.41e-01  2.80e-03  1.74e-01  1.30e-05  1.71e-02  8.07e-01  
  6  +4.9211e-01  +6.2722e-01  1.35e-01  4.27e-04  2.70e-02  1.32e-04  1.35e-03  9.46e-01  
  7  +4.7980e-01  +5.4217e-01  6.24e-02  1.67e-04  1.05e-02  3.43e-05  5.84e-04  7.09e-01  
  8  +4.6820e-01  +4.8680e-01  1.86e-02  4.15e-05  2.61e-03  4.68e-06  1.67e-04  9.90e-01  
  9  +4.6247e-01  +4.6357e-01  1.10e-03  2.27e-06  1.43e-04  2.78e-07  9.91e-06  9.59e-01  
 10  +4.6210e-01  +4.6212e-01  1.14e-05  2.35e-08  1.47e-06  2.90e-09  1.03e-07  9.90e-01  
 11  +4.6210e-01  +4.6210e-01  1.14e-07  2.35e-10  1.47e-08  2.90e-11  1.03e-09  9.90e-01  
 12  +4.6210e-01  +4.6210e-01  1.14e-09  2.35e-12  1.47e-10  2.91e-13  1.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.6787ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:42 PM: Optimal value: 4.621e-01
(CVXPY) Sep 20 07:34:42 PM: Compilation took 7.510e-03 seconds
(CVXPY) Sep 20 07:34:42 PM: Solver (including time spent in interface) took 5.000e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4621
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:42 PM: Your problem has 523 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:42 PM: Finished problem compilation (took 5.507e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 523
  constraints   = 1023
  nnz(P)        = 0
  nnz(A)        = 5309
  cones (total) = 1
    : Nonnegative = 1,  numel = 1023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9970e-01  +5.0122e+02  5.01e+02  9.54e-01  3.16e+01  1.00e+00  1.01e+00   ------   
  1  +5.9173e-01  +1.0352e+02  1.03e+02  3.74e-01  1.89e+01  3.91e-03  5.31e-01  6.25e-01  
  2  +5.3928e-01  +1.3547e+01  1.30e+01  1.29e-01  8.09e+00  1.19e-02  2.38e-01  8.52e-01  
  3  +5.0560e-01  +2.8878e+00  2.38e+00  4.88e-02  2.96e+00  2.35e-05  2.21e-01  3.08e-01  
  4  +5.0123e-01  +1.0759e+00  5.75e-01  1.25e-02  7.88e-01  1.07e-05  1.13e-01  5.68e-01  
  5  +5.0025e-01  +7.9171e-01  2.91e-01  6.15e-03  3.89e-01  1.05e-05  4.22e-02  7.29e-01  
  6  +4.9419e-01  +9.3355e-01  4.39e-01  1.97e-03  1.28e-01  8.42e-05  6.41e-03  9.65e-01  
  7  +4.8272e-01  +6.3490e-01  1.52e-01  5.77e-04  3.74e-02  2.48e-05  2.03e-03  8.08e-01  
  8  +4.7959e-01  +6.0178e-01  1.22e-01  3.98e-04  2.58e-02  2.72e-05  1.34e-03  5.48e-01  
  9  +4.7364e-01  +5.5118e-01  7.75e-02  2.05e-04  1.33e-02  2.35e-05  6.66e-04  6.06e-01  
 10  +4.7237e-01  +5.4784e-01  7.55e-02  1.56e-04  1.01e-02  2.97e-05  4.96e-04  4.20e-01  
 11  +4.6838e-01  +5.2615e-01  5.78e-02  1.34e-04  8.67e-03  1.97e-05  4.46e-04  3.52e-01  
 12  +4.6241e-01  +5.0162e-01  3.92e-02  7.13e-05  4.61e-03  1.87e-05  2.34e-04  7.53e-01  
 13  +4.5517e-01  +4.7153e-01  1.64e-02  2.81e-05  1.82e-03  8.31e-06  9.51e-05  7.70e-01  
 14  +4.4962e-01  +4.5073e-01  1.11e-03  1.84e-06  1.19e-04  4.81e-07  6.39e-06  9.43e-01  
 15  +4.4920e-01  +4.4922e-01  1.17e-05  1.93e-08  1.25e-06  5.01e-09  6.72e-08  9.89e-01  
 16  +4.4920e-01  +4.4920e-01  1.17e-07  1.93e-10  1.25e-08  5.01e-11  6.72e-10  9.90e-01  
 17  +4.4920e-01  +4.4920e-01  1.17e-09  1.93e-12  1.25e-10  5.02e-13  6.73e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.5819ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:42 PM: Optimal value: 4.492e-01
(CVXPY) Sep 20 07:34:42 PM: Compilation took 5.507e-03 seconds
(CVXPY) Sep 20 07:34:42 PM: Solver (including time spent in interface) took 8.003e-03 seconds
Iteration: 2, Objective: 0.4492
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:42 PM: Your problem has 533 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:42 PM: Finished problem compilation (took 5.514e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 533
  constraints   = 1033
  nnz(P)        = 0
  nnz(A)        = 5946
  cones (total) = 1
    : Nonnegative = 1,  numel = 1033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9964e-01  +5.0112e+02  5.01e+02  9.54e-01  3.22e+01  1.00e+00  1.01e+00   ------   
  1  +5.9083e-01  +1.0372e+02  1.03e+02  3.77e-01  1.92e+01  3.91e-03  5.32e-01  6.24e-01  
  2  +5.3867e-01  +1.3434e+01  1.29e+01  1.29e-01  8.13e+00  1.20e-02  2.37e-01  8.59e-01  
  3  +5.0549e-01  +2.8747e+00  2.37e+00  4.88e-02  3.00e+00  2.40e-05  2.19e-01  3.24e-01  
  4  +5.0109e-01  +1.0222e+00  5.21e-01  1.14e-02  7.33e-01  1.04e-05  1.02e-01  6.13e-01  
  5  +5.0005e-01  +8.1546e-01  3.15e-01  6.26e-03  4.04e-01  1.46e-05  3.31e-02  8.05e-01  
  6  +4.9201e-01  +7.9498e-01  3.03e-01  1.21e-03  8.02e-02  9.79e-05  3.77e-03  9.48e-01  
  7  +4.8264e-01  +7.0201e-01  2.19e-01  6.41e-04  4.24e-02  8.72e-05  2.00e-03  5.79e-01  
  8  +4.8075e-01  +6.8037e-01  2.00e-01  5.66e-04  3.74e-02  7.62e-05  1.78e-03  3.34e-01  
  9  +4.7177e-01  +6.0308e-01  1.31e-01  3.52e-04  2.33e-02  4.23e-05  1.16e-03  9.28e-01  
 10  +4.5948e-01  +5.4201e-01  8.25e-02  1.80e-04  1.19e-02  3.61e-05  6.07e-04  9.90e-01  
 11  +4.5710e-01  +5.3364e-01  7.65e-02  1.57e-04  1.04e-02  3.49e-05  5.31e-04  1.99e-01  
 12  +4.4776e-01  +4.9294e-01  4.52e-02  8.84e-05  5.82e-03  2.37e-05  3.11e-04  9.90e-01  
 13  +4.3664e-01  +4.5109e-01  1.44e-02  2.68e-05  1.76e-03  6.92e-06  9.98e-05  7.45e-01  
 14  +4.3176e-01  +4.3266e-01  8.98e-04  1.63e-06  1.07e-04  4.78e-07  6.24e-06  9.90e-01  
 15  +4.3140e-01  +4.3141e-01  9.21e-06  1.67e-08  1.10e-06  4.89e-09  6.42e-08  9.90e-01  
 16  +4.3140e-01  +4.3140e-01  9.21e-08  1.67e-10  1.10e-08  4.89e-11  6.42e-10  9.90e-01  
 17  +4.3140e-01  +4.3140e-01  9.21e-10  1.67e-12  1.10e-10  4.89e-13  6.42e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.3589ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:42 PM: Optimal value: 4.314e-01
(CVXPY) Sep 20 07:34:42 PM: Compilation took 5.514e-03 seconds
(CVXPY) Sep 20 07:34:42 PM: Solver (including time spent in interface) took 8.509e-03 seconds
Iteration: 3, Objective: 0.4314
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:42 PM: Your problem has 543 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:42 PM: Finished problem compilation (took 6.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 543
  constraints   = 1043
  nnz(P)        = 0
  nnz(A)        = 6277
  cones (total) = 1
    : Nonnegative = 1,  numel = 1043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9963e-01  +5.0117e+02  5.01e+02  9.54e-01  3.23e+01  1.00e+00  1.01e+00   ------   
  1  +5.8989e-01  +1.0385e+02  1.03e+02  3.79e-01  1.92e+01  3.91e-03  5.33e-01  6.23e-01  
  2  +5.3779e-01  +1.3243e+01  1.27e+01  1.27e-01  8.03e+00  1.22e-02  2.35e-01  8.67e-01  
  3  +5.0532e-01  +2.8456e+00  2.34e+00  4.84e-02  2.99e+00  2.45e-05  2.15e-01  3.44e-01  
  4  +5.0124e-01  +1.1078e+00  6.07e-01  1.33e-02  8.53e-01  1.12e-05  1.07e-01  5.70e-01  
  5  +5.0020e-01  +9.5439e-01  4.54e-01  8.83e-03  5.73e-01  1.79e-05  4.26e-02  7.30e-01  
  6  +4.9506e-01  +8.7279e-01  3.78e-01  2.52e-03  1.67e-01  6.09e-05  8.03e-03  8.35e-01  
  7  +4.9510e-01  +8.5588e-01  3.61e-01  2.05e-03  1.36e-01  6.75e-05  6.34e-03  5.20e-01  
  8  +4.8709e-01  +7.7261e-01  2.86e-01  1.03e-03  6.87e-02  8.17e-05  3.20e-03  5.21e-01  
  9  +4.8181e-01  +7.3781e-01  2.56e-01  7.63e-04  5.07e-02  8.42e-05  2.38e-03  3.53e-01  
 10  +4.6637e-01  +6.2305e-01  1.57e-01  3.95e-04  2.61e-02  5.30e-05  1.30e-03  7.23e-01  
 11  +4.5083e-01  +5.3735e-01  8.65e-02  2.01e-04  1.33e-02  3.25e-05  7.09e-04  8.50e-01  
 12  +4.4721e-01  +5.2232e-01  7.51e-02  1.65e-04  1.09e-02  2.91e-05  5.90e-04  2.03e-01  
 13  +4.3877e-01  +4.8350e-01  4.47e-02  9.21e-05  6.07e-03  2.21e-05  3.39e-04  9.90e-01  
 14  +4.3076e-01  +4.5204e-01  2.13e-02  4.25e-05  2.80e-03  1.03e-05  1.64e-04  8.58e-01  
 15  +4.2440e-01  +4.2663e-01  2.22e-03  4.30e-06  2.83e-04  1.06e-06  1.74e-05  9.08e-01  
 16  +4.2361e-01  +4.2364e-01  2.83e-05  5.47e-08  3.60e-06  1.30e-08  2.24e-07  9.88e-01  
 17  +4.2360e-01  +4.2360e-01  2.83e-07  5.47e-10  3.60e-08  1.30e-10  2.24e-09  9.90e-01  
 18  +4.2360e-01  +4.2360e-01  2.83e-09  5.47e-12  3.60e-10  1.30e-12  2.24e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.2673ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:42 PM: Optimal value: 4.236e-01
(CVXPY) Sep 20 07:34:42 PM: Compilation took 6.007e-03 seconds
(CVXPY) Sep 20 07:34:42 PM: Solver (including time spent in interface) took 9.508e-03 seconds
Iteration: 4, Objective: 0.4236
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:43 PM: Your problem has 545 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:43 PM: Finished problem compilation (took 5.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 545
  constraints   = 1045
  nnz(P)        = 0
  nnz(A)        = 6356
  cones (total) = 1
    : Nonnegative = 1,  numel = 1045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0115e+02  5.01e+02  9.54e-01  3.23e+01  1.00e+00  1.01e+00   ------   
  1  +5.8933e-01  +1.0393e+02  1.03e+02  3.79e-01  1.92e+01  3.91e-03  5.34e-01  6.23e-01  
  2  +5.3747e-01  +1.3183e+01  1.26e+01  1.27e-01  8.00e+00  1.22e-02  2.34e-01  8.71e-01  
  3  +5.0525e-01  +2.8351e+00  2.33e+00  4.82e-02  2.98e+00  2.47e-05  2.13e-01  3.54e-01  
  4  +5.0122e-01  +1.1175e+00  6.16e-01  1.35e-02  8.67e-01  1.15e-05  1.05e-01  5.71e-01  
  5  +4.9905e-01  +9.2819e-01  4.29e-01  6.23e-03  4.09e-01  3.07e-05  2.30e-02  9.52e-01  
  6  +4.8945e-01  +8.1482e-01  3.25e-01  1.38e-03  9.22e-02  9.90e-05  4.29e-03  8.38e-01  
  7  +4.8470e-01  +7.5936e-01  2.75e-01  9.62e-04  6.40e-02  7.91e-05  3.06e-03  8.15e-01  
  8  +4.8093e-01  +7.3337e-01  2.52e-01  8.05e-04  5.35e-02  7.83e-05  2.56e-03  4.48e-01  
  9  +4.6898e-01  +6.5833e-01  1.89e-01  5.20e-04  3.44e-02  6.18e-05  1.71e-03  5.42e-01  
 10  +4.4899e-01  +5.4571e-01  9.67e-02  2.32e-04  1.53e-02  3.00e-05  8.24e-04  6.12e-01  
 11  +4.4337e-01  +5.1978e-01  7.64e-02  1.70e-04  1.12e-02  2.61e-05  6.09e-04  3.48e-01  
 12  +4.3922e-01  +4.9874e-01  5.95e-02  1.34e-04  8.84e-03  2.14e-05  5.10e-04  4.87e-01  
 13  +4.3683e-01  +4.8611e-01  4.93e-02  1.08e-04  7.11e-03  1.96e-05  4.11e-04  3.99e-01  
 14  +4.3213e-01  +4.6566e-01  3.35e-02  7.26e-05  4.78e-03  1.48e-05  2.77e-04  6.81e-01  
 15  +4.2561e-01  +4.4068e-01  1.51e-02  3.05e-05  2.01e-03  6.96e-06  1.20e-04  6.93e-01  
 16  +4.2160e-01  +4.2435e-01  2.75e-03  5.42e-06  3.56e-04  1.26e-06  2.21e-05  8.36e-01  
 17  +4.2079e-01  +4.2106e-01  2.70e-04  5.27e-07  3.47e-05  1.22e-07  2.18e-06  9.01e-01  
 18  +4.2070e-01  +4.2071e-01  4.17e-06  8.15e-09  5.36e-07  1.95e-09  3.38e-08  9.89e-01  
 19  +4.2070e-01  +4.2070e-01  4.17e-08  8.15e-11  5.36e-09  1.95e-11  3.38e-10  9.90e-01  
 20  +4.2070e-01  +4.2070e-01  4.17e-10  8.15e-13  5.36e-11  1.96e-13  3.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.5054ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:43 PM: Optimal value: 4.207e-01
(CVXPY) Sep 20 07:34:43 PM: Compilation took 5.001e-03 seconds
(CVXPY) Sep 20 07:34:43 PM: Solver (including time spent in interface) took 1.151e-02 seconds
Iteration: 5, Objective: 0.4207
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:43 PM: Your problem has 546 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:43 PM: Finished problem compilation (took 6.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 546
  constraints   = 1046
  nnz(P)        = 0
  nnz(A)        = 6386
  cones (total) = 1
    : Nonnegative = 1,  numel = 1046

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0117e+02  5.01e+02  9.54e-01  3.23e+01  1.00e+00  1.01e+00   ------   
  1  +5.8918e-01  +1.0396e+02  1.03e+02  3.79e-01  1.92e+01  3.91e-03  5.34e-01  6.23e-01  
  2  +5.3740e-01  +1.3168e+01  1.26e+01  1.26e-01  7.99e+00  1.22e-02  2.34e-01  8.72e-01  
  3  +5.0523e-01  +2.8328e+00  2.33e+00  4.81e-02  2.97e+00  2.48e-05  2.13e-01  3.56e-01  
  4  +5.0118e-01  +1.1031e+00  6.02e-01  1.32e-02  8.48e-01  1.14e-05  1.03e-01  5.83e-01  
  5  +4.9899e-01  +9.6107e-01  4.62e-01  6.52e-03  4.28e-01  3.17e-05  2.36e-02  9.20e-01  
  6  +4.8863e-01  +8.2525e-01  3.37e-01  1.39e-03  9.26e-02  9.93e-05  4.29e-03  8.27e-01  
  7  +4.8475e-01  +7.8353e-01  2.99e-01  1.06e-03  7.03e-02  8.87e-05  3.34e-03  6.18e-01  
  8  +4.7733e-01  +7.3746e-01  2.60e-01  7.26e-04  4.82e-02  9.12e-05  2.32e-03  5.18e-01  
  9  +4.6530e-01  +6.4974e-01  1.84e-01  5.00e-04  3.31e-02  5.91e-05  1.67e-03  5.62e-01  
 10  +4.4732e-01  +5.4720e-01  9.99e-02  2.42e-04  1.60e-02  3.08e-05  8.73e-04  5.70e-01  
 11  +4.4144e-01  +5.1911e-01  7.77e-02  1.73e-04  1.14e-02  2.67e-05  6.34e-04  3.78e-01  
 12  +4.3501e-01  +4.8622e-01  5.12e-02  1.13e-04  7.47e-03  1.99e-05  4.48e-04  7.67e-01  
 13  +4.3372e-01  +4.7947e-01  4.58e-02  9.86e-05  6.49e-03  1.90e-05  3.88e-04  2.97e-01  
 14  +4.3011e-01  +4.6199e-01  3.19e-02  6.78e-05  4.46e-03  1.55e-05  2.64e-04  8.10e-01  
 15  +4.2412e-01  +4.4073e-01  1.66e-02  3.33e-05  2.19e-03  8.16e-06  1.32e-04  6.25e-01  
 16  +4.1906e-01  +4.1986e-01  8.01e-04  1.59e-06  1.04e-04  3.60e-07  6.55e-06  9.57e-01  
 17  +4.1880e-01  +4.1881e-01  8.29e-06  1.64e-08  1.08e-06  3.73e-09  6.79e-08  9.90e-01  
 18  +4.1880e-01  +4.1880e-01  8.29e-08  1.64e-10  1.08e-08  3.73e-11  6.79e-10  9.90e-01  
 19  +4.1880e-01  +4.1880e-01  8.29e-10  1.64e-12  1.08e-10  3.73e-13  6.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.2268ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:43 PM: Optimal value: 4.188e-01
(CVXPY) Sep 20 07:34:43 PM: Compilation took 6.004e-03 seconds
(CVXPY) Sep 20 07:34:43 PM: Solver (including time spent in interface) took 1.051e-02 seconds
Iteration: 6, Objective: 0.4188
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:43 PM: Your problem has 548 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:43 PM: Finished problem compilation (took 6.512e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 548
  constraints   = 1048
  nnz(P)        = 0
  nnz(A)        = 6425
  cones (total) = 1
    : Nonnegative = 1,  numel = 1048

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9961e-01  +5.0115e+02  5.01e+02  9.54e-01  3.23e+01  1.00e+00  1.01e+00   ------   
  1  +5.8886e-01  +1.0410e+02  1.04e+02  3.81e-01  1.92e+01  3.91e-03  5.35e-01  6.22e-01  
  2  +5.3717e-01  +1.3130e+01  1.26e+01  1.26e-01  7.98e+00  1.23e-02  2.34e-01  8.74e-01  
  3  +5.0524e-01  +2.8394e+00  2.33e+00  4.83e-02  2.98e+00  2.51e-05  2.13e-01  3.59e-01  
  4  +5.0119e-01  +1.1065e+00  6.05e-01  1.33e-02  8.53e-01  1.15e-05  1.03e-01  5.82e-01  
  5  +4.9871e-01  +1.0272e+00  5.28e-01  6.56e-03  4.31e-01  4.01e-05  2.25e-02  9.74e-01  
  6  +4.8825e-01  +8.4898e-01  3.61e-01  1.46e-03  9.75e-02  1.02e-04  4.53e-03  8.15e-01  
  7  +4.8438e-01  +7.9487e-01  3.10e-01  1.14e-03  7.59e-02  8.76e-05  3.61e-03  4.58e-01  
  8  +4.8194e-01  +7.8559e-01  3.04e-01  9.68e-04  6.43e-02  9.55e-05  3.06e-03  2.33e-01  
  9  +4.7860e-01  +7.3832e-01  2.60e-01  8.18e-04  5.43e-02  8.00e-05  2.61e-03  6.47e-01  
 10  +4.6743e-01  +6.6570e-01  1.98e-01  5.54e-04  3.67e-02  6.27e-05  1.84e-03  5.13e-01  
 11  +4.4336e-01  +5.2467e-01  8.13e-02  1.93e-04  1.27e-02  2.32e-05  7.08e-04  6.88e-01  
 12  +4.4079e-01  +5.1481e-01  7.40e-02  1.63e-04  1.07e-02  2.39e-05  5.95e-04  2.57e-01  
 13  +4.3486e-01  +4.8436e-01  4.95e-02  1.06e-04  6.96e-03  2.45e-05  3.97e-04  9.90e-01  
 14  +4.3148e-01  +4.7113e-01  3.97e-02  8.20e-05  5.39e-03  1.97e-05  3.13e-04  3.34e-01  
 15  +4.2198e-01  +4.3169e-01  9.71e-03  1.93e-05  1.27e-03  4.76e-06  7.80e-05  9.22e-01  
 16  +4.1898e-01  +4.1953e-01  5.47e-04  1.08e-06  7.13e-05  2.63e-07  4.48e-06  9.53e-01  
 17  +4.1880e-01  +4.1881e-01  5.64e-06  1.12e-08  7.35e-07  2.71e-09  4.62e-08  9.90e-01  
 18  +4.1880e-01  +4.1880e-01  5.64e-08  1.12e-10  7.35e-09  2.71e-11  4.62e-10  9.90e-01  
 19  +4.1880e-01  +4.1880e-01  5.64e-10  1.12e-12  7.35e-11  2.72e-13  4.62e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.1516ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:43 PM: Optimal value: 4.188e-01
(CVXPY) Sep 20 07:34:43 PM: Compilation took 6.512e-03 seconds
(CVXPY) Sep 20 07:34:43 PM: Solver (including time spent in interface) took 1.051e-02 seconds
FULL MODEL:
  Accruacy: 0.566
  Our objective: 0.13200000000000006

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 0)                       <-- (term's our objective: 0.048)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1)            <-- (term's our objective: 0.018)
 OR (x1 = 0 AND x2 = 0 AND x5 = 1)                                  <-- (term's our objective: 0.05)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.379120349884033
Best over terms:
  Our final objective: 0.05000000000000002
    Its accruacy: 0.525
    Its hamming distance: 5
  Shortest hamming distance: 2
    Its our objective: 0.04799999999999996
  Highest accruacy: 0.525
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

