Command:
python test_script.py -s constant_subclass -d 5 -n 1000 --seed 73 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.056
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 5.

Computed total variation: 0.178
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:31:18 PM: Your problem has 511 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:31:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:31:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:31:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:31:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:31:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:31:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:31:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:31:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:31:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:31:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:31:18 PM: Finished problem compilation (took 6.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:31:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 1011
  nnz(P)        = 0
  nnz(A)        = 4011
  cones (total) = 1
    : Nonnegative = 1,  numel = 1011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9984e-01  +5.0075e+02  5.00e+02  9.52e-01  2.87e+01  1.00e+00  1.00e+00   ------   
  1  +5.9921e-01  +1.0059e+02  1.00e+02  3.51e-01  1.66e+01  3.99e-03  5.04e-01  6.45e-01  
  2  +5.4475e-01  +1.4439e+01  1.39e+01  1.26e-01  7.36e+00  9.98e-03  2.30e-01  7.93e-01  
  3  +5.0523e-01  +2.6845e+00  2.18e+00  4.44e-02  2.46e+00  1.65e-05  2.19e-01  2.46e-01  
  4  +5.0038e-01  +7.1894e-01  2.19e-01  4.72e-03  2.73e-01  6.61e-06  6.17e-02  8.48e-01  
  5  +4.9976e-01  +6.6746e-01  1.68e-01  3.20e-03  1.86e-01  1.23e-05  1.77e-02  7.76e-01  
  6  +4.9056e-01  +6.2844e-01  1.38e-01  4.01e-04  2.37e-02  1.19e-04  1.25e-03  9.42e-01  
  7  +4.7521e-01  +5.3215e-01  5.69e-02  1.51e-04  8.89e-03  1.56e-05  5.37e-04  7.55e-01  
  8  +4.6124e-01  +4.7009e-01  8.85e-03  1.90e-05  1.12e-03  2.55e-06  7.90e-05  9.82e-01  
  9  +4.5820e-01  +4.5847e-01  2.71e-04  5.61e-07  3.30e-05  7.41e-08  2.46e-06  9.72e-01  
 10  +4.5810e-01  +4.5810e-01  2.72e-06  5.61e-09  3.30e-07  7.42e-10  2.47e-08  9.90e-01  
 11  +4.5810e-01  +4.5810e-01  2.72e-08  5.61e-11  3.30e-09  7.43e-12  2.47e-10  9.90e-01  
 12  +4.5810e-01  +4.5810e-01  2.72e-10  5.61e-13  3.30e-11  7.44e-14  2.47e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9652ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:31:18 PM: Problem status: optimal
(CVXPY) Sep 20 07:31:18 PM: Optimal value: 4.581e-01
(CVXPY) Sep 20 07:31:18 PM: Compilation took 6.005e-03 seconds
(CVXPY) Sep 20 07:31:18 PM: Solver (including time spent in interface) took 4.513e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4581
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:31:18 PM: Your problem has 521 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:31:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:31:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:31:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:31:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:31:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:31:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:31:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:31:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:31:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:31:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:31:18 PM: Finished problem compilation (took 5.036e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:31:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 1021
  nnz(P)        = 0
  nnz(A)        = 4928
  cones (total) = 1
    : Nonnegative = 1,  numel = 1021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9963e-01  +5.0134e+02  5.01e+02  9.53e-01  3.00e+01  1.00e+00  1.01e+00   ------   
  1  +5.9776e-01  +1.0097e+02  1.00e+02  3.55e-01  1.73e+01  3.98e-03  5.10e-01  6.43e-01  
  2  +5.4309e-01  +1.4107e+01  1.36e+01  1.25e-01  7.49e+00  1.03e-02  2.29e-01  8.09e-01  
  3  +5.0443e-01  +2.5313e+00  2.03e+00  4.18e-02  2.41e+00  1.65e-05  2.13e-01  3.06e-01  
  4  +5.0093e-01  +9.8235e-01  4.81e-01  1.04e-02  6.22e-01  7.31e-06  9.37e-02  6.22e-01  
  5  +4.9939e-01  +7.9005e-01  2.91e-01  4.91e-03  2.98e-01  1.51e-05  2.08e-02  8.81e-01  
  6  +4.8777e-01  +7.1457e-01  2.27e-01  7.65e-04  4.74e-02  8.89e-05  2.33e-03  9.01e-01  
  7  +4.8218e-01  +6.9393e-01  2.12e-01  5.37e-04  3.32e-02  9.74e-05  1.64e-03  5.20e-01  
  8  +4.7743e-01  +6.7106e-01  1.94e-01  4.29e-04  2.65e-02  9.53e-05  1.33e-03  2.84e-01  
  9  +4.6901e-01  +6.2319e-01  1.54e-01  3.38e-04  2.08e-02  6.92e-05  1.07e-03  4.67e-01  
 10  +4.4410e-01  +5.0496e-01  6.09e-02  1.20e-04  7.36e-03  2.14e-05  4.19e-04  7.48e-01  
 11  +4.2766e-01  +4.3456e-01  6.91e-03  1.31e-05  8.04e-04  1.67e-06  5.07e-05  9.02e-01  
 12  +4.2524e-01  +4.2533e-01  9.52e-05  1.80e-07  1.10e-05  2.11e-08  7.24e-07  9.88e-01  
 13  +4.2520e-01  +4.2520e-01  9.51e-07  1.80e-09  1.10e-07  2.11e-10  7.24e-09  9.90e-01  
 14  +4.2520e-01  +4.2520e-01  9.51e-09  1.80e-11  1.10e-09  2.11e-12  7.24e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.2415ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:31:18 PM: Problem status: optimal
(CVXPY) Sep 20 07:31:18 PM: Optimal value: 4.252e-01
(CVXPY) Sep 20 07:31:18 PM: Compilation took 5.036e-03 seconds
(CVXPY) Sep 20 07:31:18 PM: Solver (including time spent in interface) took 6.505e-03 seconds
Iteration: 2, Objective: 0.4252
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:31:18 PM: Your problem has 531 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:31:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:31:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:31:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:31:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:31:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:31:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:31:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:31:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:31:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:31:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:31:18 PM: Finished problem compilation (took 4.507e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:31:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 531
  constraints   = 1031
  nnz(P)        = 0
  nnz(A)        = 5415
  cones (total) = 1
    : Nonnegative = 1,  numel = 1031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0128e+02  5.01e+02  9.53e-01  3.03e+01  1.00e+00  1.01e+00   ------   
  1  +5.9728e-01  +1.0110e+02  1.00e+02  3.57e-01  1.74e+01  3.98e-03  5.12e-01  6.42e-01  
  2  +5.4267e-01  +1.4030e+01  1.35e+01  1.25e-01  7.43e+00  1.04e-02  2.28e-01  8.14e-01  
  3  +5.0435e-01  +2.5175e+00  2.01e+00  4.17e-02  2.42e+00  1.67e-05  2.12e-01  3.19e-01  
  4  +5.0098e-01  +1.0136e+00  5.13e-01  1.11e-02  6.69e-01  7.51e-06  9.56e-02  6.04e-01  
  5  +4.9945e-01  +8.2886e-01  3.29e-01  5.58e-03  3.41e-01  1.54e-05  2.35e-02  8.54e-01  
  6  +4.8469e-01  +7.4717e-01  2.62e-01  7.20e-04  4.50e-02  1.13e-04  2.14e-03  9.23e-01  
  7  +4.7807e-01  +7.1728e-01  2.39e-01  5.68e-04  3.54e-02  1.11e-04  1.72e-03  3.23e-01  
  8  +4.6336e-01  +6.1749e-01  1.54e-01  4.05e-04  2.51e-02  4.80e-05  1.34e-03  8.08e-01  
  9  +4.3681e-01  +5.0001e-01  6.32e-02  1.30e-04  8.05e-03  2.23e-05  4.66e-04  7.45e-01  
 10  +4.2950e-01  +4.6996e-01  4.05e-02  8.23e-05  5.07e-03  1.67e-05  3.09e-04  6.60e-01  
 11  +4.2368e-01  +4.4513e-01  2.14e-02  4.25e-05  2.62e-03  9.69e-06  1.60e-04  5.54e-01  
 12  +4.2339e-01  +4.4410e-01  2.07e-02  4.09e-05  2.52e-03  9.41e-06  1.54e-04  4.69e-02  
 13  +4.1985e-01  +4.3215e-01  1.23e-02  2.26e-05  1.39e-03  6.35e-06  8.45e-05  6.48e-01  
 14  +4.1664e-01  +4.2002e-01  3.39e-03  6.15e-06  3.79e-04  1.77e-06  2.34e-05  7.63e-01  
 15  +4.1566e-01  +4.1627e-01  6.12e-04  1.11e-06  6.84e-05  3.62e-07  4.26e-06  9.90e-01  
 16  +4.1540e-01  +4.1541e-01  6.21e-06  1.13e-08  6.94e-07  3.66e-09  4.33e-08  9.90e-01  
 17  +4.1540e-01  +4.1540e-01  6.21e-08  1.13e-10  6.94e-09  3.66e-11  4.33e-10  9.90e-01  
 18  +4.1540e-01  +4.1540e-01  6.21e-10  1.13e-12  6.94e-11  3.66e-13  4.33e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.7583ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:31:18 PM: Problem status: optimal
(CVXPY) Sep 20 07:31:18 PM: Optimal value: 4.154e-01
(CVXPY) Sep 20 07:31:18 PM: Compilation took 4.507e-03 seconds
(CVXPY) Sep 20 07:31:18 PM: Solver (including time spent in interface) took 8.517e-03 seconds
Iteration: 3, Objective: 0.4154
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:31:19 PM: Your problem has 539 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:31:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:31:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:31:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:31:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:31:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:31:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:31:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:31:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:31:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:31:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:31:19 PM: Finished problem compilation (took 5.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:31:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 539
  constraints   = 1039
  nnz(P)        = 0
  nnz(A)        = 5743
  cones (total) = 1
    : Nonnegative = 1,  numel = 1039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0122e+02  5.01e+02  9.53e-01  3.04e+01  1.00e+00  1.01e+00   ------   
  1  +5.9722e-01  +1.0114e+02  1.01e+02  3.58e-01  1.74e+01  3.98e-03  5.11e-01  6.42e-01  
  2  +5.4250e-01  +1.3988e+01  1.34e+01  1.25e-01  7.40e+00  1.04e-02  2.28e-01  8.15e-01  
  3  +5.0437e-01  +2.5244e+00  2.02e+00  4.20e-02  2.44e+00  1.69e-05  2.11e-01  3.19e-01  
  4  +5.0098e-01  +1.0172e+00  5.16e-01  1.12e-02  6.78e-01  7.60e-06  9.57e-02  6.04e-01  
  5  +4.9998e-01  +9.2039e-01  4.20e-01  7.78e-03  4.76e-01  1.39e-05  3.61e-02  7.17e-01  
  6  +4.8780e-01  +8.2204e-01  3.34e-01  1.06e-03  6.66e-02  9.88e-05  3.21e-03  9.48e-01  
  7  +4.7771e-01  +7.4494e-01  2.67e-01  6.65e-04  4.17e-02  9.65e-05  2.02e-03  4.72e-01  
  8  +4.6915e-01  +6.5286e-01  1.84e-01  5.10e-04  3.18e-02  5.85e-05  1.69e-03  7.84e-01  
  9  +4.5198e-01  +5.6878e-01  1.17e-01  2.69e-04  1.68e-02  4.25e-05  9.14e-04  5.96e-01  
 10  +4.4123e-01  +5.2331e-01  8.21e-02  1.74e-04  1.08e-02  3.12e-05  6.11e-04  4.20e-01  
 11  +4.2104e-01  +4.3974e-01  1.87e-02  3.63e-05  2.25e-03  8.28e-06  1.39e-04  9.90e-01  
 12  +4.1516e-01  +4.1701e-01  1.85e-03  3.56e-06  2.21e-04  8.20e-07  1.42e-05  9.19e-01  
 13  +4.1451e-01  +4.1455e-01  3.59e-05  6.90e-08  4.27e-06  1.68e-08  2.77e-07  9.86e-01  
 14  +4.1450e-01  +4.1450e-01  3.59e-07  6.91e-10  4.28e-08  1.68e-10  2.77e-09  9.90e-01  
 15  +4.1450e-01  +4.1450e-01  3.59e-09  6.91e-12  4.28e-10  1.68e-12  2.77e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.0157ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:31:19 PM: Problem status: optimal
(CVXPY) Sep 20 07:31:19 PM: Optimal value: 4.145e-01
(CVXPY) Sep 20 07:31:19 PM: Compilation took 5.001e-03 seconds
(CVXPY) Sep 20 07:31:19 PM: Solver (including time spent in interface) took 7.006e-03 seconds
Iteration: 4, Objective: 0.4145
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:31:19 PM: Your problem has 540 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:31:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:31:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:31:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:31:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:31:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:31:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:31:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:31:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:31:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:31:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:31:19 PM: Finished problem compilation (took 5.504e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:31:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 540
  constraints   = 1040
  nnz(P)        = 0
  nnz(A)        = 5835
  cones (total) = 1
    : Nonnegative = 1,  numel = 1040

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0123e+02  5.01e+02  9.53e-01  3.06e+01  1.00e+00  1.01e+00   ------   
  1  +5.9709e-01  +1.0117e+02  1.01e+02  3.58e-01  1.75e+01  3.98e-03  5.11e-01  6.42e-01  
  2  +5.4238e-01  +1.3961e+01  1.34e+01  1.25e-01  7.41e+00  1.04e-02  2.28e-01  8.16e-01  
  3  +5.0437e-01  +2.5259e+00  2.02e+00  4.20e-02  2.45e+00  1.69e-05  2.11e-01  3.21e-01  
  4  +5.0095e-01  +1.0030e+00  5.02e-01  1.09e-02  6.63e-01  7.53e-06  9.33e-02  6.15e-01  
  5  +4.9988e-01  +9.1526e-01  4.15e-01  7.52e-03  4.63e-01  1.44e-05  3.38e-02  7.26e-01  
  6  +4.8829e-01  +8.1862e-01  3.30e-01  1.11e-03  6.98e-02  9.27e-05  3.35e-03  9.30e-01  
  7  +4.8058e-01  +7.6139e-01  2.81e-01  7.29e-04  4.59e-02  9.96e-05  2.21e-03  4.91e-01  
  8  +4.7104e-01  +6.5958e-01  1.89e-01  5.48e-04  3.44e-02  5.61e-05  1.81e-03  7.97e-01  
  9  +4.5411e-01  +5.7783e-01  1.24e-01  2.92e-04  1.82e-02  4.30e-05  9.88e-04  5.96e-01  
 10  +4.3669e-01  +5.0366e-01  6.70e-02  1.40e-04  8.69e-03  2.35e-05  5.01e-04  5.45e-01  
 11  +4.2402e-01  +4.5123e-01  2.72e-02  5.34e-05  3.32e-03  1.41e-05  2.02e-04  9.90e-01  
 12  +4.1582e-01  +4.1967e-01  3.85e-03  7.46e-06  4.63e-04  1.88e-06  2.97e-05  8.86e-01  
 13  +4.1453e-01  +4.1486e-01  3.29e-04  6.36e-07  3.95e-05  1.60e-07  2.58e-06  9.51e-01  
 14  +4.1440e-01  +4.1441e-01  3.86e-06  7.45e-09  4.63e-07  1.77e-09  3.05e-08  9.89e-01  
 15  +4.1440e-01  +4.1440e-01  3.85e-08  7.45e-11  4.63e-09  1.77e-11  3.05e-10  9.90e-01  
 16  +4.1440e-01  +4.1440e-01  3.85e-10  7.45e-13  4.63e-11  1.78e-13  3.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.1655ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:31:19 PM: Problem status: optimal
(CVXPY) Sep 20 07:31:19 PM: Optimal value: 4.144e-01
(CVXPY) Sep 20 07:31:19 PM: Compilation took 5.504e-03 seconds
(CVXPY) Sep 20 07:31:19 PM: Solver (including time spent in interface) took 7.003e-03 seconds
FULL MODEL:
  Accruacy: 0.58
  Our objective: 0.15999999999999998

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.076)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1) <-- (term's our objective: 0.018)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1)                       <-- (term's our objective: 0.052)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.3923022747039795
Best over terms:
  Our final objective: 0.07599999999999998
    Its accruacy: 0.538
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.07599999999999998
  Highest accruacy: 0.538
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

