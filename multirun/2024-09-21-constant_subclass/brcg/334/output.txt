Command:
python test_script.py -s constant_subclass -d 9 -n 100 --seed 21 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 9.

Computed total variation: 0.8800000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:20 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:20 PM: Finished problem compilation (took 5.511e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 619
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9753e-01  +5.1294e+01  5.08e+01  8.73e-01  1.04e+01  1.00e+00  1.04e+00   ------   
  1  +5.7573e-01  +1.1296e+01  1.07e+01  3.82e-01  6.31e+00  3.75e-03  5.98e-01  5.88e-01  
  2  +5.1362e-01  +1.7727e+00  1.26e+00  9.82e-02  2.02e+00  1.88e-02  2.54e-01  9.90e-01  
  3  +4.9242e-01  +8.5320e-01  3.61e-01  2.27e-02  4.91e-01  8.68e-03  7.20e-02  8.03e-01  
  4  +4.6314e-01  +6.8845e-01  2.25e-01  7.67e-03  1.70e-01  8.31e-03  2.64e-02  6.71e-01  
  5  +4.4313e-01  +5.8940e-01  1.46e-01  3.67e-03  8.05e-02  5.07e-03  1.48e-02  5.69e-01  
  6  +4.1993e-01  +4.5980e-01  3.99e-02  8.78e-04  1.91e-02  9.84e-04  4.22e-03  7.51e-01  
  7  +4.1054e-01  +4.1198e-01  1.44e-03  3.18e-05  6.91e-04  9.28e-06  1.65e-04  9.83e-01  
  8  +4.1010e-01  +4.1012e-01  1.44e-05  3.18e-07  6.91e-06  9.27e-08  1.65e-06  9.90e-01  
  9  +4.1010e-01  +4.1010e-01  1.44e-07  3.18e-09  6.91e-08  9.27e-10  1.65e-08  9.90e-01  
 10  +4.1010e-01  +4.1010e-01  1.44e-09  3.18e-11  6.91e-10  9.27e-12  1.65e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 540.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:20 PM: Optimal value: 4.101e-01
(CVXPY) Sep 20 07:56:20 PM: Compilation took 5.511e-03 seconds
(CVXPY) Sep 20 07:56:20 PM: Solver (including time spent in interface) took 1.004e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4101
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:20 PM: Your problem has 79 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:20 PM: Finished problem compilation (took 3.011e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 79
  constraints   = 129
  nnz(P)        = 0
  nnz(A)        = 710
  cones (total) = 1
    : Nonnegative = 1,  numel = 129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9412e-01  +5.1746e+01  5.13e+01  8.79e-01  1.03e+01  1.00e+00  1.05e+00   ------   
  1  +5.5374e-01  +1.1319e+01  1.08e+01  3.87e-01  6.10e+00  3.77e-03  5.99e-01  5.93e-01  
  2  +4.8719e-01  +1.9766e+00  1.49e+00  9.85e-02  2.02e+00  2.07e-02  2.46e-01  9.69e-01  
  3  +4.2440e-01  +1.1653e+00  7.41e-01  2.94e-02  6.26e-01  1.51e-02  8.74e-02  7.25e-01  
  4  +3.8047e-01  +6.9267e-01  3.12e-01  1.02e-02  2.14e-01  5.85e-03  3.74e-02  6.20e-01  
  5  +3.5359e-01  +4.7466e-01  1.21e-01  3.66e-03  7.91e-02  1.59e-03  1.60e-02  7.34e-01  
  6  +3.3702e-01  +3.7185e-01  3.48e-02  9.99e-04  2.21e-02  3.08e-04  5.08e-03  7.59e-01  
  7  +3.3102e-01  +3.3455e-01  3.54e-03  1.01e-04  2.22e-03  2.73e-05  5.58e-04  9.01e-01  
  8  +3.3031e-01  +3.3036e-01  4.59e-05  1.31e-06  2.88e-05  2.73e-07  7.37e-06  9.87e-01  
  9  +3.3030e-01  +3.3030e-01  4.65e-07  1.34e-08  2.92e-07  2.70e-09  7.55e-08  9.90e-01  
 10  +3.3030e-01  +3.3030e-01  4.65e-09  1.34e-10  2.92e-09  2.70e-11  7.55e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 641.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:20 PM: Optimal value: 3.303e-01
(CVXPY) Sep 20 07:56:20 PM: Compilation took 3.011e-03 seconds
(CVXPY) Sep 20 07:56:20 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Iteration: 2, Objective: 0.3303
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:20 PM: Your problem has 89 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:20 PM: Finished problem compilation (took 4.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 89
  constraints   = 139
  nnz(P)        = 0
  nnz(A)        = 810
  cones (total) = 1
    : Nonnegative = 1,  numel = 139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9131e-01  +5.1730e+01  5.12e+01  8.84e-01  1.03e+01  1.00e+00  1.06e+00   ------   
  1  +5.3371e-01  +1.1331e+01  1.08e+01  3.94e-01  5.97e+00  3.80e-03  5.98e-01  5.92e-01  
  2  +4.6065e-01  +2.0635e+00  1.60e+00  9.28e-02  1.90e+00  2.29e-02  2.31e-01  9.83e-01  
  3  +3.8570e-01  +1.0160e+00  6.30e-01  2.38e-02  5.01e-01  1.25e-02  6.89e-02  7.75e-01  
  4  +3.3160e-01  +6.9000e-01  3.58e-01  9.51e-03  2.07e-01  8.18e-03  2.96e-02  6.58e-01  
  5  +2.9258e-01  +4.9077e-01  1.98e-01  4.65e-03  1.04e-01  3.82e-03  1.57e-02  5.64e-01  
  6  +2.5345e-01  +2.9411e-01  4.07e-02  9.34e-04  2.09e-02  3.26e-04  3.59e-03  8.74e-01  
  7  +2.4094e-01  +2.4217e-01  1.22e-03  2.82e-05  6.26e-04  5.51e-06  1.16e-04  9.71e-01  
  8  +2.4053e-01  +2.4060e-01  7.47e-05  1.75e-06  3.80e-05  2.28e-07  7.55e-06  9.36e-01  
  9  +2.4050e-01  +2.4050e-01  8.69e-07  2.05e-08  4.41e-07  2.58e-09  9.05e-08  9.88e-01  
 10  +2.4050e-01  +2.4050e-01  8.69e-09  2.05e-10  4.41e-09  2.58e-11  9.05e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 760.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:20 PM: Optimal value: 2.405e-01
(CVXPY) Sep 20 07:56:20 PM: Compilation took 4.009e-03 seconds
(CVXPY) Sep 20 07:56:20 PM: Solver (including time spent in interface) took 9.973e-04 seconds
Iteration: 3, Objective: 0.2405
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:20 PM: Your problem has 99 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:20 PM: Finished problem compilation (took 4.521e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 99
  constraints   = 149
  nnz(P)        = 0
  nnz(A)        = 895
  cones (total) = 1
    : Nonnegative = 1,  numel = 149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8895e-01  +5.1831e+01  5.13e+01  8.87e-01  1.02e+01  1.00e+00  1.06e+00   ------   
  1  +5.1730e-01  +1.1371e+01  1.09e+01  4.00e-01  5.82e+00  3.83e-03  5.98e-01  5.92e-01  
  2  +4.3374e-01  +2.1219e+00  1.69e+00  8.86e-02  1.79e+00  2.45e-02  2.21e-01  9.90e-01  
  3  +3.5892e-01  +1.0602e+00  7.01e-01  2.52e-02  5.27e-01  1.38e-02  7.14e-02  7.37e-01  
  4  +3.0441e-01  +7.3765e-01  4.33e-01  1.17e-02  2.50e-01  7.98e-03  3.49e-02  6.57e-01  
  5  +2.4449e-01  +3.6011e-01  1.16e-01  2.79e-03  6.09e-02  1.06e-03  9.08e-03  8.96e-01  
  6  +2.2056e-01  +2.7275e-01  5.22e-02  1.18e-03  2.63e-02  4.18e-04  3.95e-03  6.61e-01  
  7  +2.0262e-01  +2.0768e-01  5.06e-03  1.11e-04  2.49e-03  3.05e-05  3.85e-04  9.44e-01  
  8  +2.0083e-01  +2.0115e-01  3.20e-04  7.10e-06  1.58e-04  1.49e-06  2.53e-05  9.35e-01  
  9  +2.0070e-01  +2.0071e-01  8.24e-06  1.87e-07  4.06e-06  2.94e-08  7.03e-07  9.82e-01  
 10  +2.0070e-01  +2.0070e-01  8.29e-08  1.88e-09  4.09e-08  2.96e-10  7.10e-09  9.90e-01  
 11  +2.0070e-01  +2.0070e-01  8.30e-10  1.88e-11  4.09e-10  2.96e-12  7.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 978.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:20 PM: Optimal value: 2.007e-01
(CVXPY) Sep 20 07:56:20 PM: Compilation took 4.521e-03 seconds
(CVXPY) Sep 20 07:56:20 PM: Solver (including time spent in interface) took 9.992e-04 seconds
Iteration: 4, Objective: 0.2007
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:20 PM: Your problem has 109 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:20 PM: Finished problem compilation (took 3.539e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 109
  constraints   = 159
  nnz(P)        = 0
  nnz(A)        = 944
  cones (total) = 1
    : Nonnegative = 1,  numel = 159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8607e-01  +5.2417e+01  5.19e+01  8.91e-01  1.00e+01  1.00e+00  1.07e+00   ------   
  1  +4.8091e-01  +1.1600e+01  1.11e+01  3.99e-01  5.61e+00  3.93e-03  5.95e-01  5.90e-01  
  2  +3.7842e-01  +2.3502e+00  1.97e+00  8.84e-02  1.74e+00  2.59e-02  2.17e-01  9.59e-01  
  3  +2.8958e-01  +9.2288e-01  6.33e-01  2.03e-02  4.11e-01  1.25e-02  5.75e-02  7.86e-01  
  4  +2.6904e-01  +8.0998e-01  5.41e-01  1.63e-02  3.31e-01  9.98e-03  4.73e-02  2.49e-01  
  5  +2.0869e-01  +4.0352e-01  1.95e-01  5.21e-03  1.06e-01  2.68e-03  1.67e-02  7.35e-01  
  6  +1.8422e-01  +2.9497e-01  1.11e-01  2.70e-03  5.82e-02  1.38e-03  8.90e-03  5.99e-01  
  7  +1.5929e-01  +1.8385e-01  2.46e-02  5.76e-04  1.25e-02  1.64e-04  2.02e-03  9.30e-01  
  8  +1.5117e-01  +1.5186e-01  6.89e-04  1.62e-05  3.48e-04  2.66e-06  5.84e-05  9.74e-01  
  9  +1.5092e-01  +1.5097e-01  4.82e-05  1.18e-06  2.45e-05  1.41e-07  4.67e-06  9.33e-01  
 10  +1.5090e-01  +1.5090e-01  5.39e-07  1.32e-08  2.74e-07  1.60e-09  5.31e-08  9.89e-01  
 11  +1.5090e-01  +1.5090e-01  5.40e-09  1.33e-10  2.74e-09  1.60e-11  5.32e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1693ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:20 PM: Optimal value: 1.509e-01
(CVXPY) Sep 20 07:56:20 PM: Compilation took 3.539e-03 seconds
(CVXPY) Sep 20 07:56:20 PM: Solver (including time spent in interface) took 1.074e-03 seconds
Iteration: 5, Objective: 0.1509
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:21 PM: Your problem has 119 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:21 PM: Finished problem compilation (took 4.507e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 119
  constraints   = 169
  nnz(P)        = 0
  nnz(A)        = 980
  cones (total) = 1
    : Nonnegative = 1,  numel = 169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8102e-01  +5.3305e+01  5.28e+01  8.94e-01  9.78e+00  1.00e+00  1.09e+00   ------   
  1  +4.2969e-01  +1.1989e+01  1.16e+01  3.99e-01  5.44e+00  4.05e-03  6.03e-01  5.82e-01  
  2  +3.1069e-01  +2.3359e+00  2.03e+00  8.54e-02  1.60e+00  2.68e-02  2.14e-01  9.61e-01  
  3  +2.4961e-01  +9.9267e-01  7.43e-01  2.59e-02  5.01e-01  1.26e-02  7.34e-02  7.35e-01  
  4  +2.1856e-01  +7.4215e-01  5.24e-01  1.65e-02  3.22e-01  8.48e-03  4.89e-02  3.98e-01  
  5  +1.6287e-01  +2.9481e-01  1.32e-01  3.75e-03  7.50e-02  1.80e-03  1.21e-02  7.94e-01  
  6  +1.5365e-01  +2.6179e-01  1.08e-01  2.85e-03  6.01e-02  1.38e-03  9.22e-03  3.74e-01  
  7  +1.2931e-01  +1.5624e-01  2.69e-02  6.65e-04  1.43e-02  2.43e-04  2.28e-03  8.58e-01  
  8  +1.2138e-01  +1.2215e-01  7.72e-04  1.91e-05  4.10e-04  4.01e-06  6.74e-05  9.73e-01  
  9  +1.2112e-01  +1.2119e-01  6.24e-05  1.62e-06  3.34e-05  2.38e-07  6.24e-06  9.19e-01  
 10  +1.2110e-01  +1.2110e-01  7.48e-07  1.96e-08  4.00e-07  2.83e-09  7.66e-08  9.89e-01  
 11  +1.2110e-01  +1.2110e-01  7.49e-09  1.96e-10  4.01e-09  2.83e-11  7.67e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1595ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:21 PM: Optimal value: 1.211e-01
(CVXPY) Sep 20 07:56:21 PM: Compilation took 4.507e-03 seconds
(CVXPY) Sep 20 07:56:21 PM: Solver (including time spent in interface) took 2.003e-03 seconds
Iteration: 6, Objective: 0.1211
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:21 PM: Your problem has 129 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:21 PM: Finished problem compilation (took 5.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 129
  constraints   = 179
  nnz(P)        = 0
  nnz(A)        = 1011
  cones (total) = 1
    : Nonnegative = 1,  numel = 179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7838e-01  +5.3355e+01  5.29e+01  8.97e-01  9.55e+00  1.00e+00  1.09e+00   ------   
  1  +3.9557e-01  +1.2206e+01  1.18e+01  4.00e-01  5.29e+00  4.14e-03  6.02e-01  5.75e-01  
  2  +2.5733e-01  +3.1587e+00  2.90e+00  1.06e-01  1.87e+00  2.73e-02  2.56e-01  8.38e-01  
  3  +2.0683e-01  +8.9806e-01  6.91e-01  2.37e-02  4.39e-01  1.06e-02  6.70e-02  7.75e-01  
  4  +1.7098e-01  +5.6226e-01  3.91e-01  1.29e-02  2.42e-01  5.38e-03  3.87e-02  5.45e-01  
  5  +1.3358e-01  +2.4437e-01  1.11e-01  3.42e-03  6.59e-02  1.51e-03  1.10e-02  7.45e-01  
  6  +1.2342e-01  +2.1195e-01  8.85e-02  2.42e-03  5.02e-02  1.06e-03  7.75e-03  4.89e-01  
  7  +1.0422e-01  +1.1346e-01  9.24e-03  2.44e-04  5.12e-03  3.18e-05  8.22e-04  9.90e-01  
  8  +1.0144e-01  +1.0187e-01  4.26e-04  1.15e-05  2.38e-04  8.78e-07  3.98e-05  9.52e-01  
  9  +1.0131e-01  +1.0132e-01  1.72e-05  4.83e-07  9.75e-06  3.52e-08  1.76e-06  9.60e-01  
 10  +1.0130e-01  +1.0130e-01  1.73e-07  4.87e-09  9.82e-08  3.53e-10  1.79e-08  9.90e-01  
 11  +1.0130e-01  +1.0130e-01  1.73e-09  4.87e-11  9.84e-10  3.54e-12  1.79e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5442ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:21 PM: Optimal value: 1.013e-01
(CVXPY) Sep 20 07:56:21 PM: Compilation took 5.006e-03 seconds
(CVXPY) Sep 20 07:56:21 PM: Solver (including time spent in interface) took 1.998e-03 seconds
Iteration: 7, Objective: 0.1013
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:21 PM: Your problem has 139 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:21 PM: Finished problem compilation (took 4.517e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 139
  constraints   = 189
  nnz(P)        = 0
  nnz(A)        = 1036
  cones (total) = 1
    : Nonnegative = 1,  numel = 189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7713e-01  +5.3687e+01  5.32e+01  9.00e-01  9.34e+00  1.00e+00  1.10e+00   ------   
  1  +3.5846e-01  +1.2317e+01  1.20e+01  3.92e-01  5.08e+00  4.22e-03  5.98e-01  5.75e-01  
  2  +2.2861e-01  +2.8553e+00  2.63e+00  9.93e-02  1.70e+00  2.54e-02  2.40e-01  8.57e-01  
  3  +1.7859e-01  +1.0991e+00  9.21e-01  3.33e-02  5.95e-01  1.17e-02  8.94e-02  6.88e-01  
  4  +1.4047e-01  +4.0000e-01  2.60e-01  9.20e-03  1.66e-01  3.18e-03  2.75e-02  7.70e-01  
  5  +1.0962e-01  +2.1181e-01  1.02e-01  3.24e-03  6.14e-02  1.10e-03  1.04e-02  7.31e-01  
  6  +1.0013e-01  +1.7563e-01  7.55e-02  2.20e-03  4.38e-02  6.52e-04  7.12e-03  5.38e-01  
  7  +8.3807e-02  +9.3420e-02  9.61e-03  2.66e-04  5.36e-03  6.82e-05  9.07e-04  8.92e-01  
  8  +8.1619e-02  +8.2277e-02  6.58e-04  1.87e-05  3.70e-04  3.04e-06  6.62e-05  9.28e-01  
  9  +8.1417e-02  +8.1458e-02  4.16e-05  1.22e-06  2.35e-05  1.34e-07  4.83e-06  9.69e-01  
 10  +8.1400e-02  +8.1401e-02  4.61e-07  1.35e-08  2.60e-07  1.47e-09  5.43e-08  9.89e-01  
 11  +8.1400e-02  +8.1400e-02  4.61e-09  1.35e-10  2.61e-09  1.47e-11  5.44e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1944ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:21 PM: Optimal value: 8.140e-02
(CVXPY) Sep 20 07:56:21 PM: Compilation took 4.517e-03 seconds
(CVXPY) Sep 20 07:56:21 PM: Solver (including time spent in interface) took 1.999e-03 seconds
Iteration: 8, Objective: 0.0814
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:21 PM: Your problem has 149 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:21 PM: Finished problem compilation (took 4.595e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 149
  constraints   = 199
  nnz(P)        = 0
  nnz(A)        = 1069
  cones (total) = 1
    : Nonnegative = 1,  numel = 199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7515e-01  +5.3583e+01  5.31e+01  9.02e-01  9.14e+00  1.00e+00  1.10e+00   ------   
  1  +3.3150e-01  +1.2722e+01  1.24e+01  4.00e-01  5.02e+00  4.33e-03  6.03e-01  5.58e-01  
  2  +1.9657e-01  +3.0591e+00  2.86e+00  1.06e-01  1.76e+00  2.87e-02  2.51e-01  8.53e-01  
  3  +1.7230e-01  +1.5511e+00  1.38e+00  5.31e-02  9.06e-01  1.56e-02  1.37e-01  4.96e-01  
  4  +1.4449e-01  +4.8014e-01  3.36e-01  1.30e-02  2.24e-01  3.16e-03  3.72e-02  9.00e-01  
  5  +1.0892e-01  +2.4117e-01  1.32e-01  4.68e-03  8.27e-02  1.16e-03  1.44e-02  6.94e-01  
  6  +9.8485e-02  +1.8500e-01  8.65e-02  2.87e-03  5.24e-02  7.23e-04  9.01e-03  4.72e-01  
  7  +8.3609e-02  +9.3610e-02  1.00e-02  3.26e-04  5.96e-03  5.36e-05  1.07e-03  9.47e-01  
  8  +8.1771e-02  +8.3297e-02  1.53e-03  5.11e-05  9.21e-04  6.80e-06  1.73e-04  8.42e-01  
  9  +8.1473e-02  +8.1890e-02  4.16e-04  1.39e-05  2.50e-04  1.55e-06  5.31e-05  8.93e-01  
 10  +8.1366e-02  +8.1418e-02  5.27e-05  1.77e-06  3.16e-05  1.84e-07  7.05e-06  8.79e-01  
 11  +8.1350e-02  +8.1351e-02  5.82e-07  1.95e-08  3.49e-07  1.98e-09  7.85e-08  9.89e-01  
 12  +8.1350e-02  +8.1350e-02  5.83e-09  1.96e-10  3.49e-09  1.99e-11  7.86e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4187ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:21 PM: Optimal value: 8.135e-02
(CVXPY) Sep 20 07:56:21 PM: Compilation took 4.595e-03 seconds
(CVXPY) Sep 20 07:56:21 PM: Solver (including time spent in interface) took 9.205e-04 seconds
Iteration: 9, Objective: 0.0814
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:21 PM: Your problem has 159 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:21 PM: Finished problem compilation (took 4.517e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 159
  constraints   = 209
  nnz(P)        = 0
  nnz(A)        = 1116
  cones (total) = 1
    : Nonnegative = 1,  numel = 209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7352e-01  +5.3737e+01  5.33e+01  9.04e-01  9.00e+00  1.00e+00  1.10e+00   ------   
  1  +3.0402e-01  +1.3130e+01  1.28e+01  4.09e-01  4.96e+00  4.43e-03  6.10e-01  5.44e-01  
  2  +1.7977e-01  +3.1066e+00  2.93e+00  1.12e-01  1.78e+00  3.00e-02  2.66e-01  8.45e-01  
  3  +1.5678e-01  +1.6477e+00  1.49e+00  5.93e-02  9.73e-01  1.68e-02  1.53e-01  4.70e-01  
  4  +1.3494e-01  +5.0553e-01  3.71e-01  1.51e-02  2.50e-01  3.47e-03  4.36e-02  9.08e-01  
  5  +9.8457e-02  +2.3810e-01  1.40e-01  5.16e-03  8.76e-02  1.21e-03  1.61e-02  7.27e-01  
  6  +8.8742e-02  +1.8311e-01  9.44e-02  3.29e-03  5.75e-02  7.83e-04  1.04e-02  4.49e-01  
  7  +7.4706e-02  +9.0959e-02  1.63e-02  5.58e-04  9.75e-03  9.74e-05  1.83e-03  9.01e-01  
  8  +7.1800e-02  +7.3351e-02  1.55e-03  5.41e-05  9.36e-04  7.30e-06  1.84e-04  9.01e-01  
  9  +7.1550e-02  +7.2215e-02  6.65e-04  2.28e-05  3.94e-04  2.74e-06  8.75e-05  7.15e-01  
 10  +7.1383e-02  +7.1485e-02  1.02e-04  3.42e-06  5.91e-05  3.68e-07  1.43e-05  8.79e-01  
 11  +7.1351e-02  +7.1352e-02  1.59e-06  5.34e-08  9.21e-07  5.26e-09  2.28e-07  9.84e-01  
 12  +7.1350e-02  +7.1350e-02  1.59e-08  5.34e-10  9.22e-09  5.26e-11  2.29e-09  9.90e-01  
 13  +7.1350e-02  +7.1350e-02  1.59e-10  5.34e-12  9.22e-11  5.26e-13  2.29e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6028ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:21 PM: Optimal value: 7.135e-02
(CVXPY) Sep 20 07:56:21 PM: Compilation took 4.517e-03 seconds
(CVXPY) Sep 20 07:56:21 PM: Solver (including time spent in interface) took 1.999e-03 seconds
FULL MODEL:
  Accruacy: 0.93
  Our objective: 0.86

IF 
    (x0 = 0 AND x1 = 0 AND x3 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 1 AND x4 = 1 AND x7 = 0)                                             <-- (term's our objective: 0.1)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 0)                       <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x2 = 0 AND x4 = 1 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.04)
 OR (x1 = 0 AND x2 = 0 AND x5 = 1 AND x6 = 0)                                             <-- (term's our objective: 0.12)
 OR (x1 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.1)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.04)
 OR (x1 = 1 AND x2 = 0 AND x4 = 0 AND x6 = 1)                                             <-- (term's our objective: 0.1)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.06)
 OR (x1 = 1 AND x7 = 1 AND x8 = 0)                                                        <-- (term's our objective: 0.12)
 OR (x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.04)
 OR (x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0)                                             <-- (term's our objective: 0.14)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.3908183574676514
Best over terms:
  Our final objective: 0.14
    Its accruacy: 0.57
    Its hamming distance: 9
  Shortest hamming distance: 5
    Its our objective: 0.12
  Highest accruacy: 0.57
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

