Command:
python test_script.py -s constant_subclass -d 7 -n 1000 --seed 21 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.008
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 7.

Computed total variation: 0.32999999999999996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:46 PM: Your problem has 515 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:46 PM: Finished problem compilation (took 8.015e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 515
  constraints   = 1015
  nnz(P)        = 0
  nnz(A)        = 5015
  cones (total) = 1
    : Nonnegative = 1,  numel = 1015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9993e-01  +5.0071e+02  5.00e+02  9.54e-01  3.25e+01  1.00e+00  1.00e+00   ------   
  1  +5.8784e-01  +1.0547e+02  1.05e+02  3.89e-01  2.00e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3675e-01  +1.3255e+01  1.27e+01  1.35e-01  8.72e+00  1.33e-02  2.49e-01  8.80e-01  
  3  +5.0636e-01  +3.1128e+00  2.61e+00  5.33e-02  3.32e+00  2.95e-05  2.31e-01  3.13e-01  
  4  +5.0040e-01  +6.9655e-01  1.96e-01  4.31e-03  2.83e-01  9.19e-06  6.03e-02  9.06e-01  
  5  +5.0005e-01  +6.1142e-01  1.11e-01  2.37e-03  1.56e-01  9.45e-06  1.98e-02  7.41e-01  
  6  +4.9771e-01  +5.8888e-01  9.12e-02  6.04e-04  4.02e-02  5.83e-05  2.01e-03  9.22e-01  
  7  +4.9069e-01  +5.4574e-01  5.51e-02  1.58e-04  1.06e-02  9.67e-05  5.10e-04  7.62e-01  
  8  +4.8343e-01  +5.1230e-01  2.89e-02  6.78e-05  4.52e-03  3.77e-05  2.46e-04  6.59e-01  
  9  +4.7794e-01  +4.8650e-01  8.56e-03  1.86e-05  1.24e-03  2.41e-06  7.40e-05  9.90e-01  
 10  +4.7533e-01  +4.7603e-01  6.95e-04  1.40e-06  9.36e-05  2.03e-07  5.96e-06  9.33e-01  
 11  +4.7510e-01  +4.7511e-01  1.01e-05  2.03e-08  1.35e-06  3.51e-09  8.67e-08  9.90e-01  
 12  +4.7510e-01  +4.7510e-01  1.01e-07  2.03e-10  1.35e-08  3.51e-11  8.67e-10  9.90e-01  
 13  +4.7510e-01  +4.7510e-01  1.01e-09  2.03e-12  1.35e-10  3.52e-13  8.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.8345ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:46 PM: Optimal value: 4.751e-01
(CVXPY) Sep 20 07:39:46 PM: Compilation took 8.015e-03 seconds
(CVXPY) Sep 20 07:39:46 PM: Solver (including time spent in interface) took 7.003e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4751
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:46 PM: Your problem has 525 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:46 PM: Finished problem compilation (took 5.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 525
  constraints   = 1025
  nnz(P)        = 0
  nnz(A)        = 5660
  cones (total) = 1
    : Nonnegative = 1,  numel = 1025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9983e-01  +5.0119e+02  5.01e+02  9.54e-01  3.31e+01  1.00e+00  1.01e+00   ------   
  1  +5.8656e-01  +1.0561e+02  1.05e+02  3.90e-01  2.03e+01  3.86e-03  5.47e-01  6.11e-01  
  2  +5.3552e-01  +1.3001e+01  1.25e+01  1.32e-01  8.66e+00  1.35e-02  2.45e-01  8.94e-01  
  3  +5.0583e-01  +3.0075e+00  2.50e+00  5.14e-02  3.27e+00  2.98e-05  2.23e-01  3.62e-01  
  4  +5.0092e-01  +9.3497e-01  4.34e-01  9.55e-03  6.33e-01  1.11e-05  9.25e-02  6.84e-01  
  5  +4.9985e-01  +6.9756e-01  1.98e-01  3.96e-03  2.66e-01  1.36e-05  2.17e-02  8.52e-01  
  6  +4.9240e-01  +6.5939e-01  1.67e-01  6.88e-04  4.71e-02  9.98e-05  2.10e-03  9.15e-01  
  7  +4.8511e-01  +6.0739e-01  1.22e-01  4.13e-04  2.82e-02  6.76e-05  1.31e-03  5.24e-01  
  8  +4.8273e-01  +5.9275e-01  1.10e-01  3.59e-04  2.45e-02  4.85e-05  1.16e-03  4.35e-01  
  9  +4.7564e-01  +5.5073e-01  7.51e-02  2.09e-04  1.43e-02  3.37e-05  6.94e-04  4.62e-01  
 10  +4.6904e-01  +5.1126e-01  4.22e-02  1.05e-04  7.15e-03  1.86e-05  3.53e-04  6.99e-01  
 11  +4.6436e-01  +4.8718e-01  2.28e-02  4.66e-05  3.17e-03  1.29e-05  1.53e-04  6.33e-01  
 12  +4.6401e-01  +4.8718e-01  2.32e-02  4.21e-05  2.86e-03  1.42e-05  1.36e-04  2.12e-01  
 13  +4.6181e-01  +4.7785e-01  1.60e-02  3.33e-05  2.26e-03  7.61e-06  1.12e-04  8.37e-01  
 14  +4.5786e-01  +4.6487e-01  7.00e-03  1.19e-05  8.06e-04  3.97e-06  4.02e-05  6.65e-01  
 15  +4.5547e-01  +4.5614e-01  6.73e-04  1.10e-06  7.49e-05  3.92e-07  3.80e-06  9.42e-01  
 16  +4.5520e-01  +4.5521e-01  6.87e-06  1.13e-08  7.64e-07  3.98e-09  3.89e-08  9.90e-01  
 17  +4.5520e-01  +4.5520e-01  6.87e-08  1.13e-10  7.64e-09  3.98e-11  3.89e-10  9.90e-01  
 18  +4.5520e-01  +4.5520e-01  6.87e-10  1.13e-12  7.64e-11  3.98e-13  3.89e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.3853ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:46 PM: Optimal value: 4.552e-01
(CVXPY) Sep 20 07:39:46 PM: Compilation took 5.509e-03 seconds
(CVXPY) Sep 20 07:39:46 PM: Solver (including time spent in interface) took 9.503e-03 seconds
Iteration: 2, Objective: 0.4552
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:46 PM: Your problem has 535 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:46 PM: Finished problem compilation (took 6.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 535
  constraints   = 1035
  nnz(P)        = 0
  nnz(A)        = 6438
  cones (total) = 1
    : Nonnegative = 1,  numel = 1035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9968e-01  +5.0128e+02  5.01e+02  9.55e-01  3.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.8554e-01  +1.0586e+02  1.05e+02  3.94e-01  2.08e+01  3.85e-03  5.52e-01  6.09e-01  
  2  +5.3461e-01  +1.2851e+01  1.23e+01  1.32e-01  8.71e+00  1.38e-02  2.45e-01  9.05e-01  
  3  +5.0555e-01  +2.9534e+00  2.45e+00  5.07e-02  3.28e+00  3.07e-05  2.19e-01  3.99e-01  
  4  +5.0101e-01  +9.9528e-01  4.94e-01  1.09e-02  7.38e-01  1.18e-05  9.38e-02  6.53e-01  
  5  +4.9982e-01  +8.0792e-01  3.08e-01  5.86e-03  4.01e-01  1.80e-05  2.73e-02  7.75e-01  
  6  +4.8963e-01  +7.4931e-01  2.60e-01  9.41e-04  6.59e-02  1.21e-04  2.80e-03  9.19e-01  
  7  +4.9054e-01  +7.6797e-01  2.77e-01  8.44e-04  5.91e-02  1.34e-04  2.48e-03  3.69e-01  
  8  +4.7789e-01  +6.6886e-01  1.91e-01  4.91e-04  3.42e-02  8.70e-05  1.50e-03  5.91e-01  
  9  +4.6928e-01  +6.2227e-01  1.53e-01  3.50e-04  2.44e-02  7.19e-05  1.08e-03  3.53e-01  
 10  +4.5776e-01  +5.5755e-01  9.98e-02  2.27e-04  1.58e-02  4.14e-05  7.37e-04  9.90e-01  
 11  +4.3801e-01  +4.7673e-01  3.87e-02  7.45e-05  5.16e-03  1.66e-05  2.54e-04  7.02e-01  
 12  +4.2835e-01  +4.4064e-01  1.23e-02  2.16e-05  1.49e-03  6.11e-06  7.65e-05  7.61e-01  
 13  +4.2537e-01  +4.2986e-01  4.49e-03  7.81e-06  5.39e-04  2.92e-06  2.81e-05  9.90e-01  
 14  +4.2343e-01  +4.2349e-01  6.46e-05  1.11e-07  7.69e-06  3.83e-08  4.06e-07  9.87e-01  
 15  +4.2340e-01  +4.2340e-01  6.46e-07  1.11e-09  7.69e-08  3.83e-10  4.06e-09  9.90e-01  
 16  +4.2340e-01  +4.2340e-01  6.46e-09  1.11e-11  7.69e-10  3.83e-12  4.06e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.2965ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:46 PM: Optimal value: 4.234e-01
(CVXPY) Sep 20 07:39:46 PM: Compilation took 6.509e-03 seconds
(CVXPY) Sep 20 07:39:46 PM: Solver (including time spent in interface) took 8.999e-03 seconds
Iteration: 3, Objective: 0.4234
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:46 PM: Your problem has 545 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:46 PM: Finished problem compilation (took 5.185e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 545
  constraints   = 1045
  nnz(P)        = 0
  nnz(A)        = 6748
  cones (total) = 1
    : Nonnegative = 1,  numel = 1045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9966e-01  +5.0134e+02  5.01e+02  9.55e-01  3.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.8427e-01  +1.0582e+02  1.05e+02  3.94e-01  2.06e+01  3.86e-03  5.51e-01  6.09e-01  
  2  +5.3356e-01  +1.2620e+01  1.21e+01  1.28e-01  8.47e+00  1.39e-02  2.39e-01  9.17e-01  
  3  +5.0502e-01  +2.8460e+00  2.34e+00  4.86e-02  3.15e+00  3.09e-05  2.09e-01  4.56e-01  
  4  +5.0098e-01  +1.0688e+00  5.68e-01  1.25e-02  8.41e-01  1.31e-05  8.72e-02  6.37e-01  
  5  +4.9711e-01  +1.1693e+00  6.72e-01  6.06e-03  4.23e-01  6.16e-05  1.82e-02  9.13e-01  
  6  +4.8411e-01  +9.6258e-01  4.78e-01  1.71e-03  1.20e-01  1.20e-04  4.94e-03  7.31e-01  
  7  +4.6847e-01  +7.7609e-01  3.08e-01  8.53e-04  5.97e-02  9.37e-05  2.55e-03  5.75e-01  
  8  +4.6131e-01  +7.3005e-01  2.69e-01  6.51e-04  4.54e-02  9.33e-05  1.99e-03  3.71e-01  
  9  +4.5764e-01  +6.8635e-01  2.29e-01  5.58e-04  3.88e-02  8.80e-05  1.72e-03  4.58e-01  
 10  +4.3724e-01  +5.6878e-01  1.32e-01  2.84e-04  1.97e-02  5.00e-05  9.26e-04  5.49e-01  
 11  +4.1654e-01  +4.6523e-01  4.87e-02  9.65e-05  6.67e-03  2.12e-05  3.39e-04  8.39e-01  
 12  +4.0550e-01  +4.1619e-01  1.07e-02  2.07e-05  1.43e-03  6.05e-06  7.70e-05  9.90e-01  
 13  +4.0176e-01  +4.0205e-01  2.92e-04  5.63e-07  3.88e-05  1.52e-07  2.15e-06  9.78e-01  
 14  +4.0165e-01  +4.0165e-01  2.92e-06  5.64e-09  3.88e-07  1.52e-09  2.16e-08  9.90e-01  
 15  +4.0165e-01  +4.0165e-01  2.92e-08  5.64e-11  3.88e-09  1.52e-11  2.16e-10  9.90e-01  
 16  +4.0165e-01  +4.0165e-01  2.92e-10  5.64e-13  3.88e-11  1.52e-13  2.16e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.7666ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:46 PM: Optimal value: 4.017e-01
(CVXPY) Sep 20 07:39:46 PM: Compilation took 5.185e-03 seconds
(CVXPY) Sep 20 07:39:46 PM: Solver (including time spent in interface) took 9.018e-03 seconds
Iteration: 4, Objective: 0.4017
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:46 PM: Your problem has 555 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:46 PM: Finished problem compilation (took 6.505e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 555
  constraints   = 1055
  nnz(P)        = 0
  nnz(A)        = 7048
  cones (total) = 1
    : Nonnegative = 1,  numel = 1055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9963e-01  +5.0144e+02  5.01e+02  9.55e-01  3.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.8298e-01  +1.0589e+02  1.05e+02  3.96e-01  2.06e+01  3.86e-03  5.52e-01  6.09e-01  
  2  +5.3263e-01  +1.2431e+01  1.19e+01  1.26e-01  8.28e+00  1.41e-02  2.36e-01  9.28e-01  
  3  +5.0470e-01  +2.7809e+00  2.28e+00  4.74e-02  3.08e+00  3.16e-05  2.01e-01  5.02e-01  
  4  +5.0092e-01  +1.1168e+00  6.16e-01  1.34e-02  9.05e-01  1.43e-05  8.22e-02  6.31e-01  
  5  +4.9437e-01  +1.1541e+00  6.60e-01  4.50e-03  3.17e-01  7.91e-05  1.28e-02  9.32e-01  
  6  +4.7746e-01  +9.2140e-01  4.44e-01  1.42e-03  1.00e-01  1.21e-04  4.02e-03  7.02e-01  
  7  +4.5989e-01  +7.9506e-01  3.35e-01  7.72e-04  5.41e-02  1.27e-04  2.26e-03  6.21e-01  
  8  +4.5643e-01  +7.6187e-01  3.05e-01  7.36e-04  5.15e-02  1.13e-04  2.18e-03  1.39e-01  
  9  +4.3604e-01  +6.4289e-01  2.07e-01  4.48e-04  3.12e-02  7.73e-05  1.41e-03  4.33e-01  
 10  +4.0295e-01  +4.6467e-01  6.17e-02  1.25e-04  8.61e-03  2.01e-05  4.42e-04  7.85e-01  
 11  +3.9494e-01  +4.3125e-01  3.63e-02  7.18e-05  4.96e-03  1.36e-05  2.65e-04  5.32e-01  
 12  +3.8458e-01  +3.8942e-01  4.84e-03  9.32e-06  6.43e-04  1.94e-06  3.65e-05  9.06e-01  
 13  +3.8292e-01  +3.8299e-01  6.82e-05  1.31e-07  9.03e-06  2.72e-08  5.20e-07  9.87e-01  
 14  +3.8290e-01  +3.8290e-01  6.82e-07  1.31e-09  9.03e-08  2.72e-10  5.20e-09  9.90e-01  
 15  +3.8290e-01  +3.8290e-01  6.82e-09  1.31e-11  9.03e-10  2.72e-12  5.20e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.6617ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:46 PM: Optimal value: 3.829e-01
(CVXPY) Sep 20 07:39:46 PM: Compilation took 6.505e-03 seconds
(CVXPY) Sep 20 07:39:46 PM: Solver (including time spent in interface) took 9.511e-03 seconds
Iteration: 5, Objective: 0.3829
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:46 PM: Your problem has 565 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:46 PM: Finished problem compilation (took 6.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 565
  constraints   = 1065
  nnz(P)        = 0
  nnz(A)        = 7297
  cones (total) = 1
    : Nonnegative = 1,  numel = 1065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9958e-01  +5.0145e+02  5.01e+02  9.56e-01  3.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.8147e-01  +1.0598e+02  1.05e+02  3.97e-01  2.05e+01  3.86e-03  5.52e-01  6.09e-01  
  2  +5.3163e-01  +1.2226e+01  1.17e+01  1.24e-01  8.07e+00  1.42e-02  2.31e-01  9.40e-01  
  3  +5.0439e-01  +2.7206e+00  2.22e+00  4.62e-02  3.00e+00  3.26e-05  1.92e-01  5.53e-01  
  4  +5.0080e-01  +1.1720e+00  6.71e-01  1.44e-02  9.71e-01  1.61e-05  7.66e-02  6.27e-01  
  5  +4.8905e-01  +1.2524e+00  7.63e-01  3.53e-03  2.50e-01  1.19e-04  9.62e-03  9.46e-01  
  6  +4.6853e-01  +9.5434e-01  4.86e-01  1.40e-03  9.84e-02  1.24e-04  3.91e-03  6.47e-01  
  7  +4.5929e-01  +8.9640e-01  4.37e-01  1.07e-03  7.51e-02  1.35e-04  3.02e-03  3.27e-01  
  8  +4.3849e-01  +7.1543e-01  2.77e-01  6.55e-04  4.57e-02  9.72e-05  1.98e-03  6.14e-01  
  9  +3.9698e-01  +4.7086e-01  7.39e-02  1.57e-04  1.08e-02  2.18e-05  5.37e-04  8.49e-01  
 10  +3.7898e-01  +3.9484e-01  1.59e-02  3.28e-05  2.26e-03  6.45e-06  1.23e-04  8.85e-01  
 11  +3.7744e-01  +3.8922e-01  1.18e-02  2.39e-05  1.66e-03  5.04e-06  8.97e-05  3.64e-01  
 12  +3.7464e-01  +3.7841e-01  3.77e-03  7.50e-06  5.27e-04  2.03e-06  2.88e-05  9.90e-01  
 13  +3.7326e-01  +3.7342e-01  1.55e-04  3.07e-07  2.17e-05  7.96e-08  1.20e-06  9.60e-01  
 14  +3.7320e-01  +3.7320e-01  1.56e-06  3.09e-09  2.18e-07  7.97e-10  1.21e-08  9.90e-01  
 15  +3.7320e-01  +3.7320e-01  1.56e-08  3.09e-11  2.18e-09  7.98e-12  1.21e-10  9.90e-01  
 16  +3.7320e-01  +3.7320e-01  1.56e-10  3.09e-13  2.18e-11  7.98e-14  1.21e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.4841ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:46 PM: Optimal value: 3.732e-01
(CVXPY) Sep 20 07:39:46 PM: Compilation took 6.003e-03 seconds
(CVXPY) Sep 20 07:39:46 PM: Solver (including time spent in interface) took 1.051e-02 seconds
Iteration: 6, Objective: 0.3732
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:46 PM: Your problem has 575 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:46 PM: Finished problem compilation (took 5.515e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 575
  constraints   = 1075
  nnz(P)        = 0
  nnz(A)        = 7455
  cones (total) = 1
    : Nonnegative = 1,  numel = 1075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9953e-01  +5.0155e+02  5.01e+02  9.56e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.8008e-01  +1.0602e+02  1.05e+02  3.98e-01  2.03e+01  3.86e-03  5.52e-01  6.09e-01  
  2  +5.3069e-01  +1.2038e+01  1.15e+01  1.21e-01  7.84e+00  1.44e-02  2.26e-01  9.52e-01  
  3  +5.0402e-01  +2.6442e+00  2.14e+00  4.46e-02  2.90e+00  3.35e-05  1.81e-01  6.13e-01  
  4  +5.0041e-01  +1.1884e+00  6.88e-01  1.42e-02  9.61e-01  1.97e-05  6.52e-02  6.66e-01  
  5  +4.8437e-01  +1.3475e+00  8.63e-01  3.37e-03  2.39e-01  1.54e-04  8.99e-03  9.28e-01  
  6  +4.6461e-01  +1.0794e+00  6.15e-01  1.72e-03  1.21e-01  1.50e-04  4.75e-03  5.30e-01  
  7  +4.4545e-01  +8.7163e-01  4.26e-01  1.09e-03  7.60e-02  1.20e-04  3.17e-03  4.78e-01  
  8  +4.2335e-01  +7.0140e-01  2.78e-01  6.60e-04  4.57e-02  8.25e-05  2.05e-03  4.51e-01  
  9  +3.8859e-01  +4.7615e-01  8.76e-02  1.94e-04  1.33e-02  3.18e-05  6.77e-04  8.57e-01  
 10  +3.7294e-01  +4.0313e-01  3.02e-02  6.49e-05  4.45e-03  1.31e-05  2.46e-04  8.32e-01  
 11  +3.6639e-01  +3.7502e-01  8.63e-03  1.82e-05  1.26e-03  3.90e-06  7.13e-05  7.56e-01  
 12  +3.6400e-01  +3.6573e-01  1.74e-03  3.58e-06  2.51e-04  7.95e-07  1.44e-05  8.39e-01  
 13  +3.6342e-01  +3.6347e-01  4.94e-05  1.02e-07  7.14e-06  2.17e-08  4.13e-07  9.73e-01  
 14  +3.6340e-01  +3.6340e-01  4.94e-07  1.02e-09  7.14e-08  2.17e-10  4.13e-09  9.90e-01  
 15  +3.6340e-01  +3.6340e-01  4.94e-09  1.02e-11  7.14e-10  2.17e-12  4.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.1567ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:46 PM: Optimal value: 3.634e-01
(CVXPY) Sep 20 07:39:46 PM: Compilation took 5.515e-03 seconds
(CVXPY) Sep 20 07:39:46 PM: Solver (including time spent in interface) took 1.004e-02 seconds
Iteration: 7, Objective: 0.3634
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:46 PM: Your problem has 585 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:46 PM: Finished problem compilation (took 6.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 585
  constraints   = 1085
  nnz(P)        = 0
  nnz(A)        = 7581
  cones (total) = 1
    : Nonnegative = 1,  numel = 1085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9953e-01  +5.0153e+02  5.01e+02  9.56e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.7990e-01  +1.0602e+02  1.05e+02  3.98e-01  2.02e+01  3.87e-03  5.51e-01  6.09e-01  
  2  +5.3074e-01  +1.2044e+01  1.15e+01  1.21e-01  7.72e+00  1.44e-02  2.26e-01  9.51e-01  
  3  +5.0395e-01  +2.6278e+00  2.12e+00  4.44e-02  2.87e+00  3.33e-05  1.80e-01  6.19e-01  
  4  +5.0029e-01  +1.1714e+00  6.71e-01  1.38e-02  9.29e-01  1.96e-05  6.24e-02  6.78e-01  
  5  +4.8371e-01  +1.3041e+00  8.20e-01  3.19e-03  2.25e-01  1.51e-04  8.57e-03  9.23e-01  
  6  +4.6565e-01  +1.0841e+00  6.18e-01  1.75e-03  1.23e-01  1.55e-04  4.85e-03  5.06e-01  
  7  +4.4315e-01  +8.4954e-01  4.06e-01  1.01e-03  7.04e-02  1.26e-04  2.97e-03  5.86e-01  
  8  +4.1762e-01  +6.6871e-01  2.51e-01  5.84e-04  4.02e-02  7.78e-05  1.85e-03  4.64e-01  
  9  +3.9002e-01  +5.0544e-01  1.15e-01  2.56e-04  1.75e-02  3.62e-05  8.98e-04  6.04e-01  
 10  +3.7934e-01  +4.5232e-01  7.30e-02  1.58e-04  1.07e-02  2.37e-05  5.81e-04  3.99e-01  
 11  +3.6544e-01  +3.8434e-01  1.89e-02  3.99e-05  2.71e-03  6.42e-06  1.58e-04  7.69e-01  
 12  +3.6426e-01  +3.7876e-01  1.45e-02  2.95e-05  2.03e-03  5.83e-06  1.16e-04  4.93e-01  
 13  +3.6210e-01  +3.6911e-01  7.01e-03  1.43e-05  9.78e-04  3.30e-06  5.69e-05  8.14e-01  
 14  +3.5974e-01  +3.6012e-01  3.84e-04  7.75e-07  5.33e-05  1.67e-07  3.16e-06  9.62e-01  
 15  +3.5960e-01  +3.5961e-01  4.65e-06  9.38e-09  6.45e-07  1.98e-09  3.85e-08  9.88e-01  
 16  +3.5960e-01  +3.5960e-01  4.65e-08  9.38e-11  6.45e-09  1.98e-11  3.85e-10  9.90e-01  
 17  +3.5960e-01  +3.5960e-01  4.65e-10  9.39e-13  6.45e-11  1.98e-13  3.86e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.0776ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:46 PM: Optimal value: 3.596e-01
(CVXPY) Sep 20 07:39:46 PM: Compilation took 6.009e-03 seconds
(CVXPY) Sep 20 07:39:46 PM: Solver (including time spent in interface) took 1.251e-02 seconds
Iteration: 8, Objective: 0.3596
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:47 PM: Your problem has 595 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:47 PM: Finished problem compilation (took 6.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 595
  constraints   = 1095
  nnz(P)        = 0
  nnz(A)        = 7744
  cones (total) = 1
    : Nonnegative = 1,  numel = 1095

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9953e-01  +5.0168e+02  5.01e+02  9.56e-01  3.35e+01  1.00e+00  1.01e+00   ------   
  1  +5.7858e-01  +1.0609e+02  1.06e+02  3.99e-01  2.00e+01  3.88e-03  5.51e-01  6.09e-01  
  2  +5.3006e-01  +1.1907e+01  1.14e+01  1.19e-01  7.51e+00  1.45e-02  2.22e-01  9.59e-01  
  3  +5.0358e-01  +2.5538e+00  2.05e+00  4.28e-02  2.76e+00  3.40e-05  1.71e-01  6.75e-01  
  4  +4.9986e-01  +1.2548e+00  7.55e-01  1.46e-02  9.82e-01  2.58e-05  5.70e-02  6.95e-01  
  5  +4.8198e-01  +1.2563e+00  7.74e-01  3.16e-03  2.23e-01  1.54e-04  8.40e-03  8.90e-01  
  6  +4.6063e-01  +1.0368e+00  5.76e-01  1.60e-03  1.12e-01  1.85e-04  4.40e-03  6.85e-01  
  7  +4.2497e-01  +7.5624e-01  3.31e-01  8.35e-04  5.76e-02  1.12e-04  2.54e-03  7.12e-01  
  8  +3.8625e-01  +5.3386e-01  1.48e-01  3.46e-04  2.36e-02  4.17e-05  1.21e-03  5.86e-01  
  9  +3.7090e-01  +4.6254e-01  9.16e-02  2.05e-04  1.39e-02  2.85e-05  7.67e-04  4.50e-01  
 10  +3.5268e-01  +3.7810e-01  2.54e-02  5.54e-05  3.75e-03  1.21e-05  2.30e-04  9.90e-01  
 11  +3.4539e-01  +3.4724e-01  1.85e-03  3.99e-06  2.70e-04  8.09e-07  1.76e-05  9.38e-01  
 12  +3.4482e-01  +3.4489e-01  6.98e-05  1.50e-07  1.02e-05  2.85e-08  6.73e-07  9.70e-01  
 13  +3.4480e-01  +3.4480e-01  7.06e-07  1.52e-09  1.03e-07  2.87e-10  6.82e-09  9.90e-01  
 14  +3.4480e-01  +3.4480e-01  7.06e-09  1.52e-11  1.03e-09  2.88e-12  6.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.8061ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:47 PM: Optimal value: 3.448e-01
(CVXPY) Sep 20 07:39:47 PM: Compilation took 6.007e-03 seconds
(CVXPY) Sep 20 07:39:47 PM: Solver (including time spent in interface) took 1.051e-02 seconds
Iteration: 9, Objective: 0.3448
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:47 PM: Your problem has 597 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:47 PM: Finished problem compilation (took 6.512e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 597
  constraints   = 1097
  nnz(P)        = 0
  nnz(A)        = 7781
  cones (total) = 1
    : Nonnegative = 1,  numel = 1097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0172e+02  5.01e+02  9.56e-01  3.35e+01  1.00e+00  1.01e+00   ------   
  1  +5.7795e-01  +1.0616e+02  1.06e+02  4.00e-01  2.00e+01  3.87e-03  5.53e-01  6.08e-01  
  2  +5.2985e-01  +1.1881e+01  1.14e+01  1.18e-01  7.47e+00  1.46e-02  2.22e-01  9.62e-01  
  3  +5.0353e-01  +2.5461e+00  2.04e+00  4.27e-02  2.75e+00  3.45e-05  1.69e-01  6.87e-01  
  4  +4.9972e-01  +1.2444e+00  7.45e-01  1.42e-02  9.56e-01  2.68e-05  5.43e-02  7.07e-01  
  5  +4.8230e-01  +1.2264e+00  7.44e-01  3.14e-03  2.21e-01  1.49e-04  8.35e-03  8.82e-01  
  6  +4.6661e-01  +1.0851e+00  6.19e-01  1.85e-03  1.30e-01  1.98e-04  5.04e-03  6.89e-01  
  7  +4.2870e-01  +7.7654e-01  3.48e-01  8.70e-04  6.01e-02  1.18e-04  2.60e-03  6.92e-01  
  8  +3.8207e-01  +5.0859e-01  1.27e-01  2.95e-04  2.01e-02  3.27e-05  1.05e-03  6.87e-01  
  9  +3.7381e-01  +4.7302e-01  9.92e-02  2.24e-04  1.52e-02  2.84e-05  8.23e-04  2.93e-01  
 10  +3.5374e-01  +3.8359e-01  2.98e-02  6.52e-05  4.40e-03  1.22e-05  2.70e-04  8.88e-01  
 11  +3.4547e-01  +3.4761e-01  2.14e-03  4.62e-06  3.11e-04  8.16e-07  2.03e-05  9.37e-01  
 12  +3.4483e-01  +3.4491e-01  8.39e-05  1.81e-07  1.22e-05  3.09e-08  8.13e-07  9.70e-01  
 13  +3.4480e-01  +3.4480e-01  8.59e-07  1.85e-09  1.25e-07  3.15e-10  8.33e-09  9.90e-01  
 14  +3.4480e-01  +3.4480e-01  8.60e-09  1.86e-11  1.25e-09  3.16e-12  8.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.8458ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:47 PM: Optimal value: 3.448e-01
(CVXPY) Sep 20 07:39:47 PM: Compilation took 6.512e-03 seconds
(CVXPY) Sep 20 07:39:47 PM: Solver (including time spent in interface) took 1.151e-02 seconds
Iteration: 10, Objective: 0.3448
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:47 PM: Your problem has 599 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:47 PM: Finished problem compilation (took 5.997e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 599
  constraints   = 1099
  nnz(P)        = 0
  nnz(A)        = 7816
  cones (total) = 1
    : Nonnegative = 1,  numel = 1099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0173e+02  5.01e+02  9.56e-01  3.35e+01  1.00e+00  1.01e+00   ------   
  1  +5.7788e-01  +1.0614e+02  1.06e+02  4.00e-01  2.00e+01  3.87e-03  5.52e-01  6.09e-01  
  2  +5.2975e-01  +1.1858e+01  1.13e+01  1.18e-01  7.44e+00  1.46e-02  2.21e-01  9.63e-01  
  3  +5.0349e-01  +2.5375e+00  2.03e+00  4.25e-02  2.74e+00  3.46e-05  1.68e-01  6.93e-01  
  4  +4.9965e-01  +1.2459e+00  7.46e-01  1.41e-02  9.49e-01  2.74e-05  5.33e-02  7.12e-01  
  5  +4.8121e-01  +1.2208e+00  7.40e-01  2.98e-03  2.10e-01  1.56e-04  7.92e-03  8.88e-01  
  6  +4.6512e-01  +1.0766e+00  6.11e-01  1.81e-03  1.27e-01  1.94e-04  4.94e-03  6.43e-01  
  7  +4.2898e-01  +7.8410e-01  3.55e-01  8.95e-04  6.17e-02  1.19e-04  2.68e-03  6.66e-01  
  8  +3.8360e-01  +5.1807e-01  1.34e-01  3.15e-04  2.14e-02  3.53e-05  1.11e-03  6.72e-01  
  9  +3.7380e-01  +4.7438e-01  1.01e-01  2.27e-04  1.54e-02  2.93e-05  8.33e-04  3.29e-01  
 10  +3.5626e-01  +3.9516e-01  3.89e-02  8.53e-05  5.76e-03  1.50e-05  3.46e-04  7.95e-01  
 11  +3.4589e-01  +3.4940e-01  3.51e-03  7.60e-06  5.12e-04  1.27e-06  3.31e-05  9.20e-01  
 12  +3.4486e-01  +3.4506e-01  1.94e-04  4.20e-07  2.83e-05  6.65e-08  1.88e-06  9.54e-01  
 13  +3.4480e-01  +3.4480e-01  2.28e-06  4.93e-09  3.32e-07  7.73e-10  2.22e-08  9.88e-01  
 14  +3.4480e-01  +3.4480e-01  2.28e-08  4.93e-11  3.32e-09  7.74e-12  2.22e-10  9.90e-01  
 15  +3.4480e-01  +3.4480e-01  2.28e-10  4.93e-13  3.32e-11  7.75e-14  2.22e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.5508ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:47 PM: Optimal value: 3.448e-01
(CVXPY) Sep 20 07:39:47 PM: Compilation took 5.997e-03 seconds
(CVXPY) Sep 20 07:39:47 PM: Solver (including time spent in interface) took 1.202e-02 seconds
Iteration: 11, Objective: 0.3448
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:39:47 PM: Your problem has 602 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:39:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:39:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:39:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:39:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:39:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:39:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:39:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:39:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:39:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:39:47 PM: Finished problem compilation (took 7.503e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 602
  constraints   = 1102
  nnz(P)        = 0
  nnz(A)        = 7863
  cones (total) = 1
    : Nonnegative = 1,  numel = 1102

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0171e+02  5.01e+02  9.56e-01  3.35e+01  1.00e+00  1.01e+00   ------   
  1  +5.7784e-01  +1.0610e+02  1.06e+02  4.00e-01  1.99e+01  3.87e-03  5.52e-01  6.09e-01  
  2  +5.2965e-01  +1.1827e+01  1.13e+01  1.18e-01  7.40e+00  1.46e-02  2.20e-01  9.64e-01  
  3  +5.0344e-01  +2.5232e+00  2.02e+00  4.22e-02  2.72e+00  3.46e-05  1.67e-01  7.01e-01  
  4  +4.9955e-01  +1.2373e+00  7.38e-01  1.38e-02  9.29e-01  2.79e-05  5.15e-02  7.20e-01  
  5  +4.8148e-01  +1.2099e+00  7.28e-01  3.00e-03  2.11e-01  1.53e-04  7.99e-03  8.82e-01  
  6  +4.6483e-01  +1.0675e+00  6.03e-01  1.79e-03  1.25e-01  1.90e-04  4.90e-03  6.38e-01  
  7  +4.2813e-01  +7.7916e-01  3.51e-01  8.85e-04  6.10e-02  1.18e-04  2.66e-03  6.71e-01  
  8  +3.8486e-01  +5.2779e-01  1.43e-01  3.37e-04  2.29e-02  3.83e-05  1.18e-03  6.36e-01  
  9  +3.7277e-01  +4.7112e-01  9.84e-02  2.24e-04  1.52e-02  2.93e-05  8.28e-04  3.85e-01  
 10  +3.5476e-01  +3.8736e-01  3.26e-02  7.21e-05  4.86e-03  1.38e-05  2.94e-04  8.86e-01  
 11  +3.4605e-01  +3.5003e-01  3.99e-03  8.64e-06  5.82e-04  1.64e-06  3.77e-05  9.12e-01  
 12  +3.4487e-01  +3.4510e-01  2.23e-04  4.82e-07  3.25e-05  8.41e-08  2.16e-06  9.50e-01  
 13  +3.4480e-01  +3.4480e-01  2.67e-06  5.77e-09  3.88e-07  9.93e-10  2.60e-08  9.88e-01  
 14  +3.4480e-01  +3.4480e-01  2.67e-08  5.77e-11  3.88e-09  9.94e-12  2.60e-10  9.90e-01  
 15  +3.4480e-01  +3.4480e-01  2.67e-10  5.77e-13  3.88e-11  9.96e-14  2.60e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.3164ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:39:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:39:47 PM: Optimal value: 3.448e-01
(CVXPY) Sep 20 07:39:47 PM: Compilation took 7.503e-03 seconds
(CVXPY) Sep 20 07:39:47 PM: Solver (including time spent in interface) took 1.252e-02 seconds
FULL MODEL:
  Accruacy: 0.629
  Our objective: 0.258

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.018)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.018)
 OR (x0 = 0 AND x1 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0)                       <-- (term's our objective: 0.034)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.022)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.018)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1)                       <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.018)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.02)
 OR (x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 0)                                  <-- (term's our objective: 0.026)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.130084753036499
Best over terms:
  Our final objective: 0.04000000000000004
    Its accruacy: 0.52
    Its hamming distance: 6
  Shortest hamming distance: 1
    Its our objective: 0.01800000000000002
  Highest accruacy: 0.52
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

