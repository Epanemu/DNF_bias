Command:
python test_script.py -s constant_subclass -d 8 -n 500 --seed 73 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.012
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 8.

Computed total variation: 0.548
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:21 PM: Your problem has 267 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:21 PM: Finished problem compilation (took 6.621e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 267
  constraints   = 517
  nnz(P)        = 0
  nnz(A)        = 2767
  cones (total) = 1
    : Nonnegative = 1,  numel = 517

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9974e-01  +2.5077e+02  2.50e+02  9.37e-01  2.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.8353e-01  +5.3862e+01  5.33e+01  3.95e-01  1.49e+01  3.82e-03  5.64e-01  5.98e-01  
  2  +5.3181e-01  +6.5017e+00  5.97e+00  1.25e-01  5.93e+00  1.51e-02  2.54e-01  9.36e-01  
  3  +5.0310e-01  +1.5126e+00  1.01e+00  3.11e-02  1.45e+00  3.22e-05  2.02e-01  6.64e-01  
  4  +5.0052e-01  +6.5264e-01  1.52e-01  4.80e-03  2.32e-01  6.45e-06  4.60e-02  7.98e-01  
  5  +4.9935e-01  +6.2973e-01  1.30e-01  2.99e-03  1.46e-01  1.63e-05  1.21e-02  8.07e-01  
  6  +4.9210e-01  +5.8137e-01  8.93e-02  5.64e-04  2.79e-02  5.82e-05  1.83e-03  8.52e-01  
  7  +4.8575e-01  +5.4928e-01  6.35e-02  3.39e-04  1.67e-02  4.39e-05  1.14e-03  4.77e-01  
  8  +4.7399e-01  +4.9067e-01  1.67e-02  7.73e-05  3.81e-03  9.25e-06  2.92e-04  9.86e-01  
  9  +4.6853e-01  +4.6973e-01  1.20e-03  4.74e-06  2.34e-04  7.08e-07  2.00e-05  9.45e-01  
 10  +4.6810e-01  +4.6812e-01  1.36e-05  5.32e-08  2.62e-06  8.53e-09  2.27e-07  9.90e-01  
 11  +4.6810e-01  +4.6810e-01  1.36e-07  5.32e-10  2.62e-08  8.53e-11  2.27e-09  9.90e-01  
 12  +4.6810e-01  +4.6810e-01  1.36e-09  5.32e-12  2.62e-10  8.54e-13  2.27e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.5907ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:21 PM: Optimal value: 4.681e-01
(CVXPY) Sep 20 07:45:21 PM: Compilation took 6.621e-03 seconds
(CVXPY) Sep 20 07:45:21 PM: Solver (including time spent in interface) took 3.085e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4681
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:21 PM: Your problem has 277 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:21 PM: Finished problem compilation (took 5.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 277
  constraints   = 527
  nnz(P)        = 0
  nnz(A)        = 3184
  cones (total) = 1
    : Nonnegative = 1,  numel = 527

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +2.5112e+02  2.51e+02  9.38e-01  2.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.8060e-01  +5.3975e+01  5.34e+01  3.98e-01  1.51e+01  3.81e-03  5.66e-01  5.97e-01  
  2  +5.2878e-01  +6.1922e+00  5.66e+00  1.19e-01  5.73e+00  1.57e-02  2.42e-01  9.72e-01  
  3  +5.0164e-01  +1.3603e+00  8.59e-01  2.70e-02  1.30e+00  3.56e-05  1.62e-01  9.16e-01  
  4  +4.9897e-01  +8.1541e-01  3.16e-01  9.37e-03  4.63e-01  2.58e-05  4.65e-02  7.43e-01  
  5  +4.8448e-01  +7.3744e-01  2.53e-01  2.37e-03  1.21e-01  1.05e-04  7.28e-03  8.85e-01  
  6  +4.7471e-01  +6.6601e-01  1.91e-01  1.34e-03  6.81e-02  1.00e-04  4.13e-03  5.01e-01  
  7  +4.6644e-01  +6.1888e-01  1.52e-01  7.36e-04  3.74e-02  1.24e-04  2.27e-03  9.18e-01  
  8  +4.5746e-01  +5.7981e-01  1.22e-01  5.00e-04  2.55e-02  1.11e-04  1.56e-03  4.89e-01  
  9  +4.4136e-01  +5.0904e-01  6.77e-02  2.55e-04  1.30e-02  6.50e-05  8.32e-04  8.06e-01  
 10  +4.2315e-01  +4.3943e-01  1.63e-02  5.62e-05  2.86e-03  1.67e-05  1.93e-04  9.90e-01  
 11  +4.1646e-01  +4.1684e-01  3.81e-04  1.28e-06  6.52e-05  2.98e-07  4.52e-06  9.79e-01  
 12  +4.1630e-01  +4.1631e-01  3.81e-06  1.28e-08  6.51e-07  2.98e-09  4.52e-08  9.90e-01  
 13  +4.1630e-01  +4.1630e-01  3.81e-08  1.28e-10  6.51e-09  2.98e-11  4.52e-10  9.90e-01  
 14  +4.1630e-01  +4.1630e-01  3.81e-10  1.28e-12  6.51e-11  2.98e-13  4.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.156ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:21 PM: Optimal value: 4.163e-01
(CVXPY) Sep 20 07:45:21 PM: Compilation took 5.002e-03 seconds
(CVXPY) Sep 20 07:45:21 PM: Solver (including time spent in interface) took 3.734e-03 seconds
Iteration: 2, Objective: 0.4163
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:21 PM: Your problem has 287 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:21 PM: Finished problem compilation (took 4.711e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 287
  constraints   = 537
  nnz(P)        = 0
  nnz(A)        = 3448
  cones (total) = 1
    : Nonnegative = 1,  numel = 537

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9922e-01  +2.5139e+02  2.51e+02  9.38e-01  2.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.7784e-01  +5.4064e+01  5.35e+01  4.01e-01  1.50e+01  3.82e-03  5.68e-01  5.97e-01  
  2  +5.2656e-01  +6.0840e+00  5.56e+00  1.15e-01  5.55e+00  1.60e-02  2.36e-01  9.90e-01  
  3  +5.0328e-01  +1.5552e+00  1.05e+00  3.45e-02  1.68e+00  9.88e-04  1.35e-01  8.51e-01  
  4  +4.9641e-01  +8.9781e-01  4.01e-01  8.37e-03  4.29e-01  1.11e-03  2.58e-02  8.96e-01  
  5  +4.8040e-01  +7.7606e-01  2.96e-01  2.56e-03  1.33e-01  2.19e-03  7.31e-03  7.25e-01  
  6  +4.7441e-01  +7.5735e-01  2.83e-01  1.96e-03  1.02e-01  2.24e-03  5.52e-03  3.30e-01  
  7  +4.6166e-01  +7.2225e-01  2.61e-01  1.24e-03  6.44e-02  2.07e-03  3.54e-03  5.45e-01  
  8  +4.2681e-01  +5.6296e-01  1.36e-01  5.61e-04  2.90e-02  2.24e-05  1.73e-03  9.03e-01  
  9  +3.9563e-01  +4.3762e-01  4.20e-02  1.57e-04  8.11e-03  1.55e-05  5.28e-04  7.58e-01  
 10  +3.8142e-01  +3.8827e-01  6.85e-03  2.43e-05  1.26e-03  5.87e-06  8.69e-05  9.26e-01  
 11  +3.7863e-01  +3.7871e-01  8.03e-05  2.84e-07  1.47e-05  7.11e-08  1.03e-06  9.90e-01  
 12  +3.7860e-01  +3.7860e-01  8.03e-07  2.84e-09  1.47e-07  7.11e-10  1.03e-08  9.90e-01  
 13  +3.7860e-01  +3.7860e-01  8.03e-09  2.84e-11  1.47e-09  7.11e-12  1.03e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.5397ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:21 PM: Optimal value: 3.786e-01
(CVXPY) Sep 20 07:45:21 PM: Compilation took 4.711e-03 seconds
(CVXPY) Sep 20 07:45:21 PM: Solver (including time spent in interface) took 3.959e-03 seconds
Iteration: 3, Objective: 0.3786
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:22 PM: Your problem has 297 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:22 PM: Finished problem compilation (took 4.697e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 297
  constraints   = 547
  nnz(P)        = 0
  nnz(A)        = 3595
  cones (total) = 1
    : Nonnegative = 1,  numel = 547

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9921e-01  +2.5133e+02  2.51e+02  9.39e-01  2.43e+01  1.00e+00  1.01e+00   ------   
  1  +5.7605e-01  +5.4018e+01  5.34e+01  4.02e-01  1.48e+01  3.82e-03  5.66e-01  5.98e-01  
  2  +5.2526e-01  +6.1489e+00  5.62e+00  1.15e-01  5.43e+00  1.62e-02  2.33e-01  9.90e-01  
  3  +5.0412e-01  +1.4745e+00  9.70e-01  3.13e-02  1.55e+00  1.39e-03  9.95e-02  8.72e-01  
  4  +4.9852e-01  +1.4334e+00  9.35e-01  1.40e-02  7.23e-01  2.63e-03  3.74e-02  7.30e-01  
  5  +4.8010e-01  +1.1523e+00  6.72e-01  4.76e-03  2.48e-01  3.78e-03  1.27e-02  6.79e-01  
  6  +4.5993e-01  +9.0183e-01  4.42e-01  2.58e-03  1.33e-01  2.17e-03  7.20e-03  5.59e-01  
  7  +4.4177e-01  +7.7158e-01  3.30e-01  1.54e-03  7.94e-02  1.48e-03  4.43e-03  5.20e-01  
  8  +4.2503e-01  +6.6448e-01  2.39e-01  1.05e-03  5.35e-02  7.90e-04  3.11e-03  4.73e-01  
  9  +3.8692e-01  +4.4389e-01  5.70e-02  2.36e-04  1.20e-02  6.82e-05  7.81e-04  8.43e-01  
 10  +3.7731e-01  +4.0753e-01  3.02e-02  1.16e-04  5.94e-03  3.74e-05  3.99e-04  6.57e-01  
 11  +3.6803e-01  +3.7139e-01  3.37e-03  1.26e-05  6.45e-04  3.99e-06  4.53e-05  9.90e-01  
 12  +3.6680e-01  +3.6704e-01  2.43e-04  9.10e-07  4.65e-05  2.83e-07  3.30e-06  9.30e-01  
 13  +3.6670e-01  +3.6670e-01  3.35e-06  1.25e-08  6.39e-07  3.91e-09  4.55e-08  9.87e-01  
 14  +3.6670e-01  +3.6670e-01  3.36e-08  1.25e-10  6.40e-09  3.92e-11  4.56e-10  9.90e-01  
 15  +3.6670e-01  +3.6670e-01  3.36e-10  1.25e-12  6.41e-11  3.92e-13  4.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.2581ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:22 PM: Optimal value: 3.667e-01
(CVXPY) Sep 20 07:45:22 PM: Compilation took 4.697e-03 seconds
(CVXPY) Sep 20 07:45:22 PM: Solver (including time spent in interface) took 4.990e-03 seconds
Iteration: 4, Objective: 0.3667
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:22 PM: Your problem has 307 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:22 PM: Finished problem compilation (took 4.080e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 307
  constraints   = 557
  nnz(P)        = 0
  nnz(A)        = 3723
  cones (total) = 1
    : Nonnegative = 1,  numel = 557

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9914e-01  +2.5163e+02  2.51e+02  9.40e-01  2.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.7319e-01  +5.4041e+01  5.35e+01  4.03e-01  1.46e+01  3.83e-03  5.65e-01  5.98e-01  
  2  +5.2343e-01  +6.2444e+00  5.72e+00  1.14e-01  5.33e+00  1.64e-02  2.30e-01  9.90e-01  
  3  +5.0559e-01  +1.6818e+00  1.18e+00  3.31e-02  1.66e+00  2.76e-03  9.04e-02  7.54e-01  
  4  +5.0286e-01  +1.7146e+00  1.21e+00  2.14e-02  1.10e+00  3.94e-03  5.43e-02  4.79e-01  
  5  +4.8739e-01  +1.5024e+00  1.02e+00  7.84e-03  4.11e-01  6.13e-03  1.98e-02  7.15e-01  
  6  +4.6430e-01  +1.0511e+00  5.87e-01  3.95e-03  2.04e-01  2.35e-03  1.07e-02  6.00e-01  
  7  +4.4978e-01  +9.6241e-01  5.13e-01  2.64e-03  1.36e-01  1.94e-03  7.25e-03  4.92e-01  
  8  +4.2569e-01  +7.5808e-01  3.32e-01  1.64e-03  8.36e-02  7.81e-04  4.77e-03  5.44e-01  
  9  +3.9171e-01  +5.2625e-01  1.35e-01  6.40e-04  3.23e-02  4.24e-05  2.07e-03  9.90e-01  
 10  +3.6600e-01  +3.9953e-01  3.35e-02  1.51e-04  7.60e-03  1.20e-05  5.29e-04  7.74e-01  
 11  +3.6109e-01  +3.7874e-01  1.76e-02  7.36e-05  3.73e-03  1.25e-05  2.63e-04  7.35e-01  
 12  +3.5665e-01  +3.6182e-01  5.17e-03  2.06e-05  1.05e-03  3.93e-06  7.66e-05  7.50e-01  
 13  +3.5490e-01  +3.5518e-01  2.80e-04  1.10e-06  5.60e-05  2.10e-07  4.18e-06  9.51e-01  
 14  +3.5480e-01  +3.5481e-01  3.93e-06  1.55e-08  7.87e-07  2.96e-09  5.91e-08  9.86e-01  
 15  +3.5480e-01  +3.5480e-01  3.95e-08  1.56e-10  7.90e-09  2.97e-11  5.93e-10  9.90e-01  
 16  +3.5480e-01  +3.5480e-01  3.95e-10  1.56e-12  7.90e-11  2.98e-13  5.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.9149ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:22 PM: Optimal value: 3.548e-01
(CVXPY) Sep 20 07:45:22 PM: Compilation took 4.080e-03 seconds
(CVXPY) Sep 20 07:45:22 PM: Solver (including time spent in interface) took 5.820e-03 seconds
Iteration: 5, Objective: 0.3548
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:22 PM: Your problem has 317 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:22 PM: Finished problem compilation (took 6.292e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 317
  constraints   = 567
  nnz(P)        = 0
  nnz(A)        = 3854
  cones (total) = 1
    : Nonnegative = 1,  numel = 567

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9897e-01  +2.5167e+02  2.51e+02  9.40e-01  2.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.7021e-01  +5.4070e+01  5.35e+01  4.05e-01  1.45e+01  3.84e-03  5.65e-01  5.98e-01  
  2  +5.2167e-01  +6.3460e+00  5.82e+00  1.13e-01  5.25e+00  1.67e-02  2.28e-01  9.90e-01  
  3  +5.0513e-01  +1.6409e+00  1.14e+00  2.87e-02  1.45e+00  3.18e-03  7.52e-02  7.47e-01  
  4  +5.0134e-01  +1.6772e+00  1.18e+00  1.80e-02  9.30e-01  4.68e-03  4.46e-02  4.72e-01  
  5  +4.8193e-01  +1.5621e+00  1.08e+00  7.02e-03  3.68e-01  7.59e-03  1.73e-02  7.30e-01  
  6  +4.5426e-01  +1.1714e+00  7.17e-01  3.83e-03  1.99e-01  4.29e-03  9.94e-03  5.31e-01  
  7  +4.3272e-01  +9.8587e-01  5.53e-01  2.74e-03  1.41e-01  2.84e-03  7.41e-03  3.39e-01  
  8  +3.8126e-01  +5.6692e-01  1.86e-01  9.09e-04  4.58e-02  2.50e-05  2.84e-03  8.42e-01  
  9  +3.5374e-01  +4.3857e-01  8.48e-02  3.86e-04  1.97e-02  2.73e-05  1.31e-03  6.33e-01  
 10  +3.3927e-01  +3.7803e-01  3.88e-02  1.68e-04  8.68e-03  2.31e-05  6.10e-04  7.07e-01  
 11  +3.2792e-01  +3.3021e-01  2.29e-03  9.70e-06  5.03e-04  1.79e-06  3.78e-05  9.76e-01  
 12  +3.2716e-01  +3.2732e-01  1.65e-04  7.00e-07  3.62e-05  1.28e-07  2.78e-06  9.36e-01  
 13  +3.2710e-01  +3.2710e-01  1.74e-06  7.38e-09  3.81e-07  1.34e-09  2.94e-08  9.89e-01  
 14  +3.2710e-01  +3.2710e-01  1.74e-08  7.40e-11  3.82e-09  1.35e-11  2.94e-10  9.90e-01  
 15  +3.2710e-01  +3.2710e-01  1.74e-10  7.40e-13  3.82e-11  1.35e-13  2.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.8284ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:22 PM: Optimal value: 3.271e-01
(CVXPY) Sep 20 07:45:22 PM: Compilation took 6.292e-03 seconds
(CVXPY) Sep 20 07:45:22 PM: Solver (including time spent in interface) took 5.627e-03 seconds
Iteration: 6, Objective: 0.3271
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:22 PM: Your problem has 327 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:22 PM: Finished problem compilation (took 5.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 327
  constraints   = 577
  nnz(P)        = 0
  nnz(A)        = 3978
  cones (total) = 1
    : Nonnegative = 1,  numel = 577

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9883e-01  +2.5192e+02  2.51e+02  9.41e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +5.6696e-01  +5.4163e+01  5.36e+01  4.07e-01  1.43e+01  3.84e-03  5.66e-01  5.98e-01  
  2  +5.1972e-01  +6.4569e+00  5.94e+00  1.13e-01  5.18e+00  1.70e-02  2.27e-01  9.90e-01  
  3  +5.0436e-01  +1.7703e+00  1.27e+00  2.85e-02  1.45e+00  4.13e-03  7.19e-02  7.13e-01  
  4  +4.9044e-01  +1.7626e+00  1.27e+00  1.14e-02  5.97e-01  8.16e-03  2.75e-02  7.00e-01  
  5  +4.6131e-01  +1.3116e+00  8.50e-01  5.12e-03  2.67e-01  6.28e-03  1.28e-02  6.22e-01  
  6  +4.3684e-01  +1.1240e+00  6.87e-01  3.32e-03  1.72e-01  4.98e-03  8.62e-03  4.19e-01  
  7  +3.9246e-01  +7.1430e-01  3.22e-01  1.72e-03  8.70e-02  3.98e-05  5.09e-03  7.29e-01  
  8  +3.4889e-01  +4.6454e-01  1.16e-01  5.56e-04  2.79e-02  2.93e-05  1.82e-03  6.99e-01  
  9  +3.2846e-01  +3.6819e-01  3.97e-02  1.84e-04  9.27e-03  1.55e-05  6.49e-04  7.10e-01  
 10  +3.1856e-01  +3.2246e-01  3.90e-03  1.79e-05  8.99e-04  3.12e-06  6.69e-05  9.70e-01  
 11  +3.1762e-01  +3.1855e-01  9.24e-04  4.25e-06  2.13e-04  7.47e-07  1.63e-05  8.04e-01  
 12  +3.1736e-01  +3.1752e-01  1.60e-04  7.19e-07  3.67e-05  1.44e-07  2.88e-06  9.81e-01  
 13  +3.1730e-01  +3.1730e-01  2.21e-06  9.86e-09  5.04e-07  1.94e-09  3.99e-08  9.87e-01  
 14  +3.1730e-01  +3.1730e-01  2.21e-08  9.86e-11  5.04e-09  1.94e-11  3.99e-10  9.90e-01  
 15  +3.1730e-01  +3.1730e-01  2.23e-10  9.98e-13  5.10e-11  1.98e-13  4.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.3857ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:22 PM: Optimal value: 3.173e-01
(CVXPY) Sep 20 07:45:22 PM: Compilation took 5.007e-03 seconds
(CVXPY) Sep 20 07:45:22 PM: Solver (including time spent in interface) took 5.691e-03 seconds
Iteration: 7, Objective: 0.3173
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:22 PM: Your problem has 337 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:22 PM: Finished problem compilation (took 5.686e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 337
  constraints   = 587
  nnz(P)        = 0
  nnz(A)        = 4076
  cones (total) = 1
    : Nonnegative = 1,  numel = 587

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9866e-01  +2.5225e+02  2.52e+02  9.41e-01  2.38e+01  1.00e+00  1.02e+00   ------   
  1  +5.6274e-01  +5.4266e+01  5.37e+01  4.08e-01  1.41e+01  3.85e-03  5.66e-01  5.98e-01  
  2  +5.1710e-01  +6.5905e+00  6.07e+00  1.12e-01  5.06e+00  1.74e-02  2.24e-01  9.90e-01  
  3  +5.0170e-01  +1.9545e+00  1.45e+00  2.81e-02  1.42e+00  5.51e-03  6.85e-02  7.13e-01  
  4  +4.7825e-01  +1.7848e+00  1.31e+00  1.00e-02  5.26e-01  1.06e-02  2.40e-02  6.91e-01  
  5  +4.4365e-01  +1.2970e+00  8.53e-01  4.98e-03  2.58e-01  6.28e-03  1.27e-02  5.86e-01  
  6  +4.1688e-01  +1.0766e+00  6.60e-01  3.47e-03  1.77e-01  4.09e-03  9.23e-03  3.72e-01  
  7  +3.5715e-01  +6.1097e-01  2.54e-01  1.30e-03  6.48e-02  3.60e-05  4.06e-03  8.21e-01  
  8  +3.2164e-01  +4.3104e-01  1.09e-01  5.34e-04  2.66e-02  3.25e-05  1.88e-03  6.25e-01  
  9  +3.0181e-01  +3.3697e-01  3.52e-02  1.66e-04  8.27e-03  1.65e-05  6.50e-04  7.52e-01  
 10  +2.9324e-01  +2.9851e-01  5.27e-03  2.42e-05  1.21e-03  2.93e-06  1.03e-04  8.82e-01  
 11  +2.9177e-01  +2.9228e-01  5.08e-04  2.32e-06  1.15e-04  2.55e-07  1.03e-05  9.05e-01  
 12  +2.9160e-01  +2.9162e-01  1.12e-05  5.08e-08  2.51e-06  5.94e-09  2.34e-07  9.84e-01  
 13  +2.9160e-01  +2.9160e-01  1.12e-07  5.08e-10  2.51e-08  5.94e-11  2.34e-09  9.90e-01  
 14  +2.9160e-01  +2.9160e-01  1.12e-09  5.08e-12  2.51e-10  5.94e-13  2.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.7399ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:22 PM: Optimal value: 2.916e-01
(CVXPY) Sep 20 07:45:22 PM: Compilation took 5.686e-03 seconds
(CVXPY) Sep 20 07:45:22 PM: Solver (including time spent in interface) took 6.961e-03 seconds
Iteration: 8, Objective: 0.2916
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:22 PM: Your problem has 347 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:22 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 347
  constraints   = 597
  nnz(P)        = 0
  nnz(A)        = 4174
  cones (total) = 1
    : Nonnegative = 1,  numel = 597

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9868e-01  +2.5226e+02  2.52e+02  9.42e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +5.6074e-01  +5.4304e+01  5.37e+01  4.08e-01  1.39e+01  3.86e-03  5.65e-01  5.98e-01  
  2  +5.1570e-01  +6.6307e+00  6.11e+00  1.11e-01  4.96e+00  1.75e-02  2.22e-01  9.90e-01  
  3  +4.9968e-01  +1.9645e+00  1.46e+00  2.64e-02  1.33e+00  5.92e-03  6.41e-02  7.40e-01  
  4  +4.7402e-01  +1.7337e+00  1.26e+00  9.69e-03  5.04e-01  1.04e-02  2.33e-02  6.70e-01  
  5  +4.3583e-01  +1.2761e+00  8.40e-01  4.74e-03  2.43e-01  6.76e-03  1.21e-02  5.87e-01  
  6  +3.8669e-01  +8.5858e-01  4.72e-01  2.40e-03  1.20e-01  1.69e-03  6.73e-03  6.53e-01  
  7  +3.3049e-01  +4.9119e-01  1.61e-01  7.97e-04  3.92e-02  3.14e-04  2.65e-03  6.91e-01  
  8  +3.0797e-01  +3.8419e-01  7.62e-02  3.66e-04  1.82e-02  1.28e-04  1.35e-03  6.15e-01  
  9  +2.9299e-01  +3.1204e-01  1.90e-02  9.06e-05  4.48e-03  2.89e-05  3.70e-04  7.44e-01  
 10  +2.8807e-01  +2.8925e-01  1.18e-03  5.59e-06  2.76e-04  1.43e-06  2.44e-05  9.41e-01  
 11  +2.8772e-01  +2.8779e-01  6.43e-05  3.03e-07  1.49e-05  6.24e-08  1.37e-06  9.62e-01  
 12  +2.8770e-01  +2.8770e-01  6.50e-07  3.06e-09  1.50e-07  6.29e-10  1.39e-08  9.90e-01  
 13  +2.8770e-01  +2.8770e-01  6.51e-09  3.06e-11  1.50e-09  6.29e-12  1.39e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.816ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:22 PM: Optimal value: 2.877e-01
(CVXPY) Sep 20 07:45:22 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:45:22 PM: Solver (including time spent in interface) took 6.672e-03 seconds
Iteration: 9, Objective: 0.2877
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:22 PM: Your problem has 357 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:22 PM: Finished problem compilation (took 6.675e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 357
  constraints   = 607
  nnz(P)        = 0
  nnz(A)        = 4235
  cones (total) = 1
    : Nonnegative = 1,  numel = 607

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9866e-01  +2.5225e+02  2.52e+02  9.42e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +5.5837e-01  +5.4382e+01  5.38e+01  4.09e-01  1.38e+01  3.87e-03  5.64e-01  5.98e-01  
  2  +5.1397e-01  +6.7129e+00  6.20e+00  1.10e-01  4.89e+00  1.77e-02  2.20e-01  9.90e-01  
  3  +4.9748e-01  +1.9912e+00  1.49e+00  2.49e-02  1.26e+00  6.38e-03  6.02e-02  7.55e-01  
  4  +4.6728e-01  +1.7022e+00  1.23e+00  8.86e-03  4.60e-01  1.10e-02  2.13e-02  6.74e-01  
  5  +4.3157e-01  +1.2960e+00  8.64e-01  4.79e-03  2.45e-01  7.50e-03  1.22e-02  5.17e-01  
  6  +3.8815e-01  +9.2106e-01  5.33e-01  2.72e-03  1.36e-01  3.15e-03  7.46e-03  5.07e-01  
  7  +3.2972e-01  +5.0700e-01  1.77e-01  8.89e-04  4.33e-02  4.83e-04  2.87e-03  7.21e-01  
  8  +3.1687e-01  +4.4772e-01  1.31e-01  6.33e-04  3.10e-02  3.24e-04  2.13e-03  3.94e-01  
  9  +2.9785e-01  +3.5632e-01  5.85e-02  2.76e-04  1.35e-02  1.29e-04  1.01e-03  5.84e-01  
 10  +2.8367e-01  +2.8952e-01  5.85e-03  2.73e-05  1.32e-03  1.03e-05  1.09e-04  9.04e-01  
 11  +2.8237e-01  +2.8385e-01  1.48e-03  6.83e-06  3.30e-04  2.32e-06  2.86e-05  7.74e-01  
 12  +2.8196e-01  +2.8212e-01  1.61e-04  7.39e-07  3.57e-05  2.07e-07  3.25e-06  9.08e-01  
 13  +2.8190e-01  +2.8190e-01  2.11e-06  9.62e-09  4.65e-07  2.40e-09  4.32e-08  9.89e-01  
 14  +2.8190e-01  +2.8190e-01  2.11e-08  9.62e-11  4.65e-09  2.40e-11  4.33e-10  9.90e-01  
 15  +2.8190e-01  +2.8190e-01  2.11e-10  9.62e-13  4.65e-11  2.42e-13  4.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.1538ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:22 PM: Optimal value: 2.819e-01
(CVXPY) Sep 20 07:45:22 PM: Compilation took 6.675e-03 seconds
(CVXPY) Sep 20 07:45:22 PM: Solver (including time spent in interface) took 7.619e-03 seconds
Iteration: 10, Objective: 0.2819
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:22 PM: Your problem has 367 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:22 PM: Finished problem compilation (took 5.914e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 367
  constraints   = 617
  nnz(P)        = 0
  nnz(A)        = 4277
  cones (total) = 1
    : Nonnegative = 1,  numel = 617

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9858e-01  +2.5235e+02  2.52e+02  9.43e-01  2.33e+01  1.00e+00  1.02e+00   ------   
  1  +5.5513e-01  +5.4484e+01  5.39e+01  4.11e-01  1.37e+01  3.87e-03  5.65e-01  5.97e-01  
  2  +5.1182e-01  +6.8220e+00  6.31e+00  1.09e-01  4.84e+00  1.80e-02  2.20e-01  9.90e-01  
  3  +4.9413e-01  +1.9817e+00  1.49e+00  2.29e-02  1.15e+00  6.85e-03  5.51e-02  7.80e-01  
  4  +4.5892e-01  +1.6382e+00  1.18e+00  8.14e-03  4.19e-01  1.10e-02  1.97e-02  6.67e-01  
  5  +4.2135e-01  +1.3178e+00  8.96e-01  4.67e-03  2.37e-01  8.72e-03  1.19e-02  4.77e-01  
  6  +3.5983e-01  +7.1900e-01  3.59e-01  1.97e-03  9.60e-02  7.12e-05  5.88e-03  7.48e-01  
  7  +3.3141e-01  +5.5283e-01  2.21e-01  1.17e-03  5.64e-02  6.16e-05  3.79e-03  4.28e-01  
  8  +3.0417e-01  +4.0348e-01  9.93e-02  5.03e-04  2.40e-02  4.08e-05  1.79e-03  6.25e-01  
  9  +2.8989e-01  +3.3376e-01  4.39e-02  2.16e-04  1.03e-02  2.54e-05  8.25e-04  7.07e-01  
 10  +2.7939e-01  +2.8393e-01  4.54e-03  2.19e-05  1.04e-03  2.53e-06  9.01e-05  9.08e-01  
 11  +2.7824e-01  +2.7874e-01  4.95e-04  2.39e-06  1.13e-04  2.59e-07  1.02e-05  8.91e-01  
 12  +2.7810e-01  +2.7811e-01  8.27e-06  3.98e-08  1.88e-06  4.30e-09  1.73e-07  9.85e-01  
 13  +2.7810e-01  +2.7810e-01  8.27e-08  3.98e-10  1.88e-08  4.30e-11  1.73e-09  9.90e-01  
 14  +2.7810e-01  +2.7810e-01  8.27e-10  3.98e-12  1.88e-10  4.30e-13  1.73e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.4932ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:23 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:23 PM: Optimal value: 2.781e-01
(CVXPY) Sep 20 07:45:23 PM: Compilation took 5.914e-03 seconds
(CVXPY) Sep 20 07:45:23 PM: Solver (including time spent in interface) took 6.658e-03 seconds
Iteration: 11, Objective: 0.2781
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:23 PM: Your problem has 377 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:23 PM: Finished problem compilation (took 5.685e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 377
  constraints   = 627
  nnz(P)        = 0
  nnz(A)        = 4339
  cones (total) = 1
    : Nonnegative = 1,  numel = 627

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9851e-01  +2.5229e+02  2.52e+02  9.43e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +5.5231e-01  +5.4527e+01  5.40e+01  4.11e-01  1.35e+01  3.88e-03  5.65e-01  5.97e-01  
  2  +5.0969e-01  +6.9106e+00  6.40e+00  1.08e-01  4.76e+00  1.83e-02  2.18e-01  9.90e-01  
  3  +4.9033e-01  +1.9997e+00  1.51e+00  2.13e-02  1.07e+00  7.46e-03  5.11e-02  7.96e-01  
  4  +4.5037e-01  +1.6060e+00  1.16e+00  7.71e-03  3.93e-01  1.10e-02  1.87e-02  6.66e-01  
  5  +4.1374e-01  +1.2815e+00  8.68e-01  4.62e-03  2.32e-01  8.28e-03  1.18e-02  4.35e-01  
  6  +3.5222e-01  +7.1707e-01  3.65e-01  1.98e-03  9.59e-02  8.99e-04  5.86e-03  6.83e-01  
  7  +3.2542e-01  +5.6227e-01  2.37e-01  1.25e-03  5.97e-02  5.16e-04  3.99e-03  4.11e-01  
  8  +2.9168e-01  +3.7527e-01  8.36e-02  4.22e-04  2.00e-02  1.47e-04  1.52e-03  7.08e-01  
  9  +2.7529e-01  +2.9275e-01  1.75e-02  8.72e-05  4.10e-03  1.74e-05  3.42e-04  9.62e-01  
 10  +2.7113e-01  +2.7382e-01  2.69e-03  1.34e-05  6.27e-04  2.53e-06  5.49e-05  8.47e-01  
 11  +2.7055e-01  +2.7126e-01  7.11e-04  3.49e-06  1.63e-04  6.31e-07  1.48e-05  8.29e-01  
 12  +2.7037e-01  +2.7058e-01  2.09e-04  9.96e-07  4.68e-05  1.77e-07  4.33e-06  8.30e-01  
 13  +2.7030e-01  +2.7031e-01  4.26e-06  2.01e-08  9.47e-07  3.58e-09  8.85e-08  9.80e-01  
 14  +2.7030e-01  +2.7030e-01  4.28e-08  2.02e-10  9.51e-09  3.59e-11  8.89e-10  9.90e-01  
 15  +2.7030e-01  +2.7030e-01  4.28e-10  2.02e-12  9.51e-11  3.61e-13  8.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.0926ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:23 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:23 PM: Optimal value: 2.703e-01
(CVXPY) Sep 20 07:45:23 PM: Compilation took 5.685e-03 seconds
(CVXPY) Sep 20 07:45:23 PM: Solver (including time spent in interface) took 7.664e-03 seconds
Iteration: 12, Objective: 0.2703
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:23 PM: Your problem has 387 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:23 PM: Finished problem compilation (took 5.612e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 387
  constraints   = 637
  nnz(P)        = 0
  nnz(A)        = 4397
  cones (total) = 1
    : Nonnegative = 1,  numel = 637

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9844e-01  +2.5235e+02  2.52e+02  9.44e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +5.4968e-01  +5.4594e+01  5.40e+01  4.13e-01  1.34e+01  3.88e-03  5.65e-01  5.96e-01  
  2  +5.0738e-01  +7.0258e+00  6.52e+00  1.08e-01  4.71e+00  1.86e-02  2.18e-01  9.88e-01  
  3  +4.8620e-01  +1.9020e+00  1.42e+00  1.87e-02  9.36e-01  7.62e-03  4.50e-02  8.26e-01  
  4  +4.4049e-01  +1.4928e+00  1.05e+00  6.75e-03  3.42e-01  1.03e-02  1.65e-02  6.82e-01  
  5  +4.0037e-01  +1.1566e+00  7.56e-01  4.10e-03  2.04e-01  6.65e-03  1.07e-02  4.35e-01  
  6  +3.3366e-01  +6.0953e-01  2.76e-01  1.52e-03  7.23e-02  5.99e-04  4.69e-03  7.21e-01  
  7  +3.1398e-01  +5.1226e-01  1.98e-01  1.06e-03  5.04e-02  3.75e-04  3.50e-03  4.15e-01  
  8  +2.8981e-01  +3.8364e-01  9.38e-02  4.86e-04  2.30e-02  1.62e-04  1.75e-03  5.62e-01  
  9  +2.7255e-01  +2.9590e-01  2.34e-02  1.19e-04  5.61e-03  3.03e-05  4.66e-04  8.43e-01  
 10  +2.6751e-01  +2.7118e-01  3.67e-03  1.88e-05  8.78e-04  4.37e-06  7.67e-05  8.49e-01  
 11  +2.6684e-01  +2.6815e-01  1.31e-03  6.54e-06  3.06e-04  1.40e-06  2.78e-05  7.52e-01  
 12  +2.6647e-01  +2.6669e-01  2.14e-04  1.03e-06  4.82e-05  2.05e-07  4.63e-06  8.78e-01  
 13  +2.6640e-01  +2.6641e-01  4.27e-06  2.04e-08  9.56e-07  3.91e-09  9.31e-08  9.82e-01  
 14  +2.6640e-01  +2.6640e-01  4.29e-08  2.04e-10  9.59e-09  3.92e-11  9.34e-10  9.90e-01  
 15  +2.6640e-01  +2.6640e-01  4.29e-10  2.04e-12  9.59e-11  3.96e-13  9.44e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.58ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:23 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:23 PM: Optimal value: 2.664e-01
(CVXPY) Sep 20 07:45:23 PM: Compilation took 5.612e-03 seconds
(CVXPY) Sep 20 07:45:23 PM: Solver (including time spent in interface) took 8.775e-03 seconds
Iteration: 13, Objective: 0.2664
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:23 PM: Your problem has 391 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:23 PM: Finished problem compilation (took 5.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 391
  constraints   = 641
  nnz(P)        = 0
  nnz(A)        = 4413
  cones (total) = 1
    : Nonnegative = 1,  numel = 641

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9842e-01  +2.5221e+02  2.52e+02  9.44e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +5.4861e-01  +5.4607e+01  5.41e+01  4.13e-01  1.33e+01  3.89e-03  5.65e-01  5.96e-01  
  2  +5.0703e-01  +7.3640e+00  6.86e+00  1.12e-01  4.85e+00  1.86e-02  2.24e-01  9.68e-01  
  3  +4.8685e-01  +1.9862e+00  1.50e+00  2.01e-02  1.00e+00  7.39e-03  4.82e-02  8.13e-01  
  4  +4.4004e-01  +1.5353e+00  1.10e+00  6.94e-03  3.50e-01  1.04e-02  1.69e-02  6.89e-01  
  5  +3.9608e-01  +1.1453e+00  7.49e-01  4.02e-03  1.99e-01  6.25e-03  1.05e-02  4.59e-01  
  6  +3.2881e-01  +5.8393e-01  2.55e-01  1.40e-03  6.62e-02  7.36e-04  4.33e-03  7.11e-01  
  7  +3.1351e-01  +5.1211e-01  1.99e-01  1.07e-03  5.04e-02  4.93e-04  3.47e-03  3.64e-01  
  8  +2.9159e-01  +3.9785e-01  1.06e-01  5.50e-04  2.59e-02  2.44e-04  1.94e-03  4.94e-01  
  9  +2.7781e-01  +3.2903e-01  5.12e-02  2.60e-04  1.22e-02  1.07e-04  9.75e-04  5.63e-01  
 10  +2.6788e-01  +2.8018e-01  1.23e-02  6.18e-05  2.90e-03  2.29e-05  2.46e-04  7.76e-01  
 11  +2.6522e-01  +2.6749e-01  2.27e-03  1.14e-05  5.30e-04  3.65e-06  4.74e-05  8.36e-01  
 12  +2.6466e-01  +2.6513e-01  4.66e-04  2.28e-06  1.06e-04  5.08e-07  1.02e-05  9.04e-01  
 13  +2.6451e-01  +2.6454e-01  2.84e-05  1.37e-07  6.39e-06  2.89e-08  6.29e-07  9.46e-01  
 14  +2.6450e-01  +2.6450e-01  2.90e-07  1.39e-09  6.50e-08  2.93e-10  6.41e-09  9.90e-01  
 15  +2.6450e-01  +2.6450e-01  2.91e-09  1.40e-11  6.54e-10  2.94e-12  6.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.6517ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:23 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:23 PM: Optimal value: 2.645e-01
(CVXPY) Sep 20 07:45:23 PM: Compilation took 5.007e-03 seconds
(CVXPY) Sep 20 07:45:23 PM: Solver (including time spent in interface) took 8.739e-03 seconds
Iteration: 14, Objective: 0.2645
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:23 PM: Your problem has 401 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:23 PM: Finished problem compilation (took 5.667e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 401
  constraints   = 651
  nnz(P)        = 0
  nnz(A)        = 4497
  cones (total) = 1
    : Nonnegative = 1,  numel = 651

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9837e-01  +2.5211e+02  2.52e+02  9.44e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.4614e-01  +5.4593e+01  5.40e+01  4.14e-01  1.32e+01  3.89e-03  5.65e-01  5.96e-01  
  2  +5.0412e-01  +7.8712e+00  7.37e+00  1.16e-01  4.98e+00  1.86e-02  2.32e-01  9.41e-01  
  3  +4.8245e-01  +1.8909e+00  1.41e+00  1.81e-02  8.96e-01  7.02e-03  4.36e-02  8.38e-01  
  4  +4.3568e-01  +1.4586e+00  1.02e+00  6.91e-03  3.44e-01  8.19e-03  1.71e-02  6.78e-01  
  5  +4.0165e-01  +1.1880e+00  7.86e-01  4.46e-03  2.19e-01  5.91e-03  1.16e-02  3.98e-01  
  6  +3.3272e-01  +6.1001e-01  2.77e-01  1.57e-03  7.37e-02  1.13e-04  4.81e-03  7.97e-01  
  7  +3.1208e-01  +5.0865e-01  1.97e-01  1.07e-03  5.04e-02  1.03e-04  3.49e-03  4.32e-01  
  8  +2.8810e-01  +3.8229e-01  9.42e-02  4.93e-04  2.31e-02  5.39e-05  1.73e-03  5.68e-01  
  9  +2.7391e-01  +3.1453e-01  4.06e-02  2.05e-04  9.66e-03  2.57e-05  7.60e-04  6.38e-01  
 10  +2.6450e-01  +2.7072e-01  6.21e-03  3.09e-05  1.46e-03  3.77e-06  1.22e-04  8.57e-01  
 11  +2.6306e-01  +2.6437e-01  1.30e-03  6.40e-06  3.00e-04  8.76e-07  2.68e-05  8.76e-01  
 12  +2.6271e-01  +2.6302e-01  3.11e-04  1.50e-06  7.02e-05  2.22e-07  6.57e-06  8.54e-01  
 13  +2.6260e-01  +2.6261e-01  7.03e-06  3.36e-08  1.58e-06  4.92e-09  1.50e-07  9.78e-01  
 14  +2.6260e-01  +2.6260e-01  7.04e-08  3.37e-10  1.58e-08  4.92e-11  1.50e-09  9.90e-01  
 15  +2.6260e-01  +2.6260e-01  7.04e-10  3.37e-12  1.58e-10  4.95e-13  1.51e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.964ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:23 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:23 PM: Optimal value: 2.626e-01
(CVXPY) Sep 20 07:45:23 PM: Compilation took 5.667e-03 seconds
(CVXPY) Sep 20 07:45:23 PM: Solver (including time spent in interface) took 8.368e-03 seconds
Iteration: 15, Objective: 0.2626
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:23 PM: Your problem has 411 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:23 PM: Finished problem compilation (took 5.113e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 411
  constraints   = 661
  nnz(P)        = 0
  nnz(A)        = 4549
  cones (total) = 1
    : Nonnegative = 1,  numel = 661

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9835e-01  +2.5213e+02  2.52e+02  9.45e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.4456e-01  +5.4644e+01  5.41e+01  4.15e-01  1.30e+01  3.89e-03  5.64e-01  5.96e-01  
  2  +5.0278e-01  +7.8517e+00  7.35e+00  1.15e-01  4.89e+00  1.88e-02  2.30e-01  9.45e-01  
  3  +4.7971e-01  +1.8334e+00  1.35e+00  1.67e-02  8.24e-01  7.18e-03  4.04e-02  8.52e-01  
  4  +4.3144e-01  +1.4765e+00  1.05e+00  6.89e-03  3.41e-01  8.34e-03  1.71e-02  6.70e-01  
  5  +3.8584e-01  +1.0610e+00  6.75e-01  3.89e-03  1.88e-01  3.91e-03  1.04e-02  5.20e-01  
  6  +3.2333e-01  +5.6978e-01  2.46e-01  1.37e-03  6.41e-02  7.69e-04  4.25e-03  6.71e-01  
  7  +3.0549e-01  +4.8996e-01  1.84e-01  1.00e-03  4.67e-02  4.68e-04  3.28e-03  4.29e-01  
  8  +2.8202e-01  +3.7076e-01  8.87e-02  4.60e-04  2.14e-02  2.08e-04  1.64e-03  5.52e-01  
  9  +2.6583e-01  +2.9172e-01  2.59e-02  1.31e-04  6.06e-03  4.78e-05  5.02e-04  7.84e-01  
 10  +2.6027e-01  +2.6496e-01  4.69e-03  2.36e-05  1.09e-03  6.84e-06  9.52e-05  8.67e-01  
 11  +2.5912e-01  +2.6008e-01  9.66e-04  4.79e-06  2.20e-04  1.12e-06  2.05e-05  8.61e-01  
 12  +2.5885e-01  +2.5899e-01  1.44e-04  7.08e-07  3.25e-05  1.45e-07  3.10e-06  9.04e-01  
 13  +2.5880e-01  +2.5880e-01  1.55e-06  7.65e-09  3.51e-07  1.55e-09  3.36e-08  9.89e-01  
 14  +2.5880e-01  +2.5880e-01  1.55e-08  7.66e-11  3.52e-09  1.55e-11  3.36e-10  9.90e-01  
 15  +2.5880e-01  +2.5880e-01  1.55e-10  7.66e-13  3.52e-11  1.56e-13  3.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.8104ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:23 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:23 PM: Optimal value: 2.588e-01
(CVXPY) Sep 20 07:45:23 PM: Compilation took 5.113e-03 seconds
(CVXPY) Sep 20 07:45:23 PM: Solver (including time spent in interface) took 8.668e-03 seconds
FULL MODEL:
  Accruacy: 0.71
  Our objective: 0.42000000000000004

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x7 = 1)                       <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 1)                                  <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.028)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.036)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 0)            <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1)                       <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.008)
 OR (x1 = 0 AND x2 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.04)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x2 = 0 AND x4 = 0 AND x6 = 0)                                             <-- (term's our objective: 0.056)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.024)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.008)
 OR (x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.02)
 OR (x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.024)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.061084985733032
Best over terms:
  Our final objective: 0.05599999999999995
    Its accruacy: 0.528
    Its hamming distance: 6
  Shortest hamming distance: 2
    Its our objective: 0.020000000000000025
  Highest accruacy: 0.528
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

