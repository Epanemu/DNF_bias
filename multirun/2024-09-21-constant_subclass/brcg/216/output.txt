Command:
python test_script.py -s constant_subclass -d 6 -n 500 --seed 56 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.012
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 6.

Computed total variation: 0.26
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:09 PM: Your problem has 263 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:09 PM: Finished problem compilation (took 6.525e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 263
  constraints   = 513
  nnz(P)        = 0
  nnz(A)        = 2263
  cones (total) = 1
    : Nonnegative = 1,  numel = 513

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9963e-01  +2.5068e+02  2.50e+02  9.35e-01  2.13e+01  1.00e+00  1.01e+00   ------   
  1  +5.9248e-01  +5.1834e+01  5.12e+01  3.64e-01  1.27e+01  3.91e-03  5.29e-01  6.27e-01  
  2  +5.3902e-01  +6.9912e+00  6.45e+00  1.19e-01  5.12e+00  1.18e-02  2.34e-01  8.55e-01  
  3  +5.0181e-01  +1.3139e+00  8.12e-01  2.43e-02  1.03e+00  1.75e-05  1.99e-01  5.85e-01  
  4  +5.0039e-01  +6.1001e-01  1.10e-01  3.35e-03  1.45e-01  2.50e-06  3.75e-02  8.25e-01  
  5  +4.9985e-01  +5.8231e-01  8.25e-02  2.21e-03  9.65e-02  4.92e-06  1.15e-02  7.71e-01  
  6  +4.9457e-01  +5.4898e-01  5.44e-02  3.13e-04  1.39e-02  2.91e-05  1.01e-03  9.19e-01  
  7  +4.9039e-01  +5.2866e-01  3.83e-02  2.04e-04  9.06e-03  2.09e-05  6.79e-04  4.12e-01  
  8  +4.8406e-01  +4.9641e-01  1.23e-02  6.25e-05  2.77e-03  8.00e-06  2.27e-04  9.49e-01  
  9  +4.8061e-01  +4.8193e-01  1.31e-03  5.55e-06  2.46e-04  8.52e-07  2.31e-05  9.20e-01  
 10  +4.8011e-01  +4.8012e-01  1.67e-05  6.72e-08  2.98e-06  1.09e-08  2.94e-07  9.88e-01  
 11  +4.8010e-01  +4.8010e-01  1.67e-07  6.72e-10  2.98e-08  1.09e-10  2.94e-09  9.90e-01  
 12  +4.8010e-01  +4.8010e-01  1.67e-09  6.72e-12  2.98e-10  1.10e-12  2.97e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.2579ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:09 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:09 PM: Optimal value: 4.801e-01
(CVXPY) Sep 20 07:34:09 PM: Compilation took 6.525e-03 seconds
(CVXPY) Sep 20 07:34:09 PM: Solver (including time spent in interface) took 2.006e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:09 PM: Your problem has 273 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:09 PM: Finished problem compilation (took 5.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 273
  constraints   = 523
  nnz(P)        = 0
  nnz(A)        = 2749
  cones (total) = 1
    : Nonnegative = 1,  numel = 523

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9932e-01  +2.5105e+02  2.51e+02  9.36e-01  2.22e+01  1.00e+00  1.01e+00   ------   
  1  +5.8991e-01  +5.2050e+01  5.15e+01  3.69e-01  1.31e+01  3.91e-03  5.33e-01  6.25e-01  
  2  +5.3647e-01  +6.7326e+00  6.20e+00  1.15e-01  5.08e+00  1.22e-02  2.28e-01  8.82e-01  
  3  +5.0072e-01  +1.2183e+00  7.18e-01  2.18e-02  9.55e-01  4.42e-05  1.77e-01  7.75e-01  
  4  +4.9932e-01  +7.6833e-01  2.69e-01  8.03e-03  3.60e-01  2.71e-05  5.50e-02  7.41e-01  
  5  +4.8267e-01  +8.1531e-01  3.33e-01  2.52e-03  1.16e-01  1.73e-04  8.62e-03  9.34e-01  
  6  +4.6923e-01  +5.8195e-01  1.13e-01  7.41e-04  3.39e-02  6.11e-05  2.68e-03  7.24e-01  
  7  +4.6684e-01  +5.7469e-01  1.08e-01  5.56e-04  2.56e-02  7.59e-05  1.86e-03  4.54e-01  
  8  +4.6231e-01  +5.4216e-01  7.98e-02  3.41e-04  1.57e-02  6.94e-05  1.14e-03  7.07e-01  
  9  +4.5518e-01  +5.0570e-01  5.05e-02  2.00e-04  9.20e-03  4.47e-05  6.84e-04  5.16e-01  
 10  +4.4449e-01  +4.5481e-01  1.03e-02  3.81e-05  1.76e-03  9.60e-06  1.38e-04  9.90e-01  
 11  +4.4117e-01  +4.4332e-01  2.15e-03  7.70e-06  3.57e-04  1.97e-06  2.87e-05  7.98e-01  
 12  +4.4033e-01  +4.4038e-01  5.94e-05  2.12e-07  9.82e-06  6.56e-08  7.94e-07  9.90e-01  
 13  +4.4030e-01  +4.4030e-01  5.94e-07  2.12e-09  9.81e-08  6.56e-10  7.94e-09  9.90e-01  
 14  +4.4030e-01  +4.4030e-01  5.94e-09  2.12e-11  9.81e-10  6.56e-12  7.95e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7379ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:09 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:09 PM: Optimal value: 4.403e-01
(CVXPY) Sep 20 07:34:09 PM: Compilation took 5.002e-03 seconds
(CVXPY) Sep 20 07:34:09 PM: Solver (including time spent in interface) took 3.512e-03 seconds
Iteration: 2, Objective: 0.4403
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:09 PM: Your problem has 283 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:09 PM: Finished problem compilation (took 4.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 283
  constraints   = 533
  nnz(P)        = 0
  nnz(A)        = 3103
  cones (total) = 1
    : Nonnegative = 1,  numel = 533

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9907e-01  +2.5113e+02  2.51e+02  9.37e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.8668e-01  +5.2410e+01  5.18e+01  3.77e-01  1.33e+01  3.89e-03  5.43e-01  6.19e-01  
  2  +5.3460e-01  +6.5735e+00  6.04e+00  1.13e-01  5.05e+00  1.28e-02  2.28e-01  9.04e-01  
  3  +5.0095e-01  +1.2802e+00  7.79e-01  2.42e-02  1.07e+00  1.98e-04  1.71e-01  7.94e-01  
  4  +4.9878e-01  +8.1172e-01  3.13e-01  9.21e-03  4.17e-01  1.37e-04  5.16e-02  7.38e-01  
  5  +4.8839e-01  +7.9945e-01  3.11e-01  3.70e-03  1.71e-01  4.44e-04  1.25e-02  8.16e-01  
  6  +4.6685e-01  +6.5018e-01  1.83e-01  1.01e-03  4.69e-02  4.47e-04  3.37e-03  9.36e-01  
  7  +4.5428e-01  +5.9022e-01  1.36e-01  6.66e-04  3.09e-02  2.52e-04  2.33e-03  4.98e-01  
  8  +4.3050e-01  +4.7535e-01  4.48e-02  1.99e-04  9.18e-03  4.30e-05  7.87e-04  7.90e-01  
  9  +4.1823e-01  +4.2353e-01  5.31e-03  2.22e-05  1.02e-03  4.10e-06  9.79e-05  9.13e-01  
 10  +4.1652e-01  +4.1658e-01  5.93e-05  2.46e-07  1.13e-05  4.37e-08  1.11e-06  9.89e-01  
 11  +4.1650e-01  +4.1650e-01  5.93e-07  2.46e-09  1.13e-07  4.37e-10  1.11e-08  9.90e-01  
 12  +4.1650e-01  +4.1650e-01  5.93e-09  2.46e-11  1.13e-09  4.38e-12  1.11e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7793ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:09 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:09 PM: Optimal value: 4.165e-01
(CVXPY) Sep 20 07:34:09 PM: Compilation took 4.003e-03 seconds
(CVXPY) Sep 20 07:34:09 PM: Solver (including time spent in interface) took 3.000e-03 seconds
Iteration: 3, Objective: 0.4165
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:10 PM: Your problem has 293 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:10 PM: Finished problem compilation (took 5.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 293
  constraints   = 543
  nnz(P)        = 0
  nnz(A)        = 3251
  cones (total) = 1
    : Nonnegative = 1,  numel = 543

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9906e-01  +2.5125e+02  2.51e+02  9.37e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.8500e-01  +5.2415e+01  5.18e+01  3.79e-01  1.32e+01  3.89e-03  5.43e-01  6.20e-01  
  2  +5.3363e-01  +6.4712e+00  5.94e+00  1.11e-01  4.85e+00  1.30e-02  2.22e-01  9.16e-01  
  3  +5.0105e-01  +1.3334e+00  8.32e-01  2.60e-02  1.14e+00  4.67e-04  1.63e-01  8.01e-01  
  4  +4.9805e-01  +9.3164e-01  4.34e-01  1.18e-02  5.33e-01  4.36e-04  5.25e-02  7.70e-01  
  5  +4.7203e-01  +8.6280e-01  3.91e-01  2.40e-03  1.12e-01  1.96e-03  7.55e-03  9.37e-01  
  6  +4.6346e-01  +7.8125e-01  3.18e-01  1.73e-03  8.03e-02  1.33e-03  5.57e-03  4.15e-01  
  7  +4.4925e-01  +6.5432e-01  2.05e-01  1.06e-03  4.90e-02  4.48e-04  3.65e-03  6.09e-01  
  8  +4.2678e-01  +5.2122e-01  9.44e-02  4.37e-04  2.01e-02  1.72e-04  1.66e-03  5.92e-01  
  9  +4.1366e-01  +4.4824e-01  3.46e-02  1.52e-04  6.94e-03  3.81e-05  6.06e-04  9.24e-01  
 10  +4.1239e-01  +4.4133e-01  2.89e-02  1.31e-04  5.97e-03  2.70e-05  5.58e-04  2.03e-01  
 11  +4.1231e-01  +4.4096e-01  2.87e-02  1.29e-04  5.91e-03  2.68e-05  5.50e-04  3.92e-02  
 12  +4.1086e-01  +4.3666e-01  2.58e-02  1.09e-04  4.98e-03  2.68e-05  4.39e-04  5.89e-01  
 13  +4.0318e-01  +4.0489e-01  1.71e-03  7.10e-06  3.25e-04  1.60e-06  3.01e-05  9.81e-01  
 14  +4.0261e-01  +4.0265e-01  4.09e-05  1.70e-07  7.77e-06  3.85e-08  7.25e-07  9.81e-01  
 15  +4.0260e-01  +4.0260e-01  4.10e-07  1.70e-09  7.77e-08  3.85e-10  7.25e-09  9.90e-01  
 16  +4.0260e-01  +4.0260e-01  4.10e-09  1.70e-11  7.77e-10  3.86e-12  7.25e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9421ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:10 PM: Optimal value: 4.026e-01
(CVXPY) Sep 20 07:34:10 PM: Compilation took 5.002e-03 seconds
(CVXPY) Sep 20 07:34:10 PM: Solver (including time spent in interface) took 4.517e-03 seconds
Iteration: 4, Objective: 0.4026
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:10 PM: Your problem has 303 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:10 PM: Finished problem compilation (took 5.520e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 303
  constraints   = 553
  nnz(P)        = 0
  nnz(A)        = 3458
  cones (total) = 1
    : Nonnegative = 1,  numel = 553

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9898e-01  +2.5128e+02  2.51e+02  9.38e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.8348e-01  +5.2450e+01  5.19e+01  3.81e-01  1.31e+01  3.89e-03  5.44e-01  6.19e-01  
  2  +5.3219e-01  +6.3129e+00  5.78e+00  1.08e-01  4.68e+00  1.31e-02  2.18e-01  9.29e-01  
  3  +5.0118e-01  +1.3916e+00  8.90e-01  2.81e-02  1.23e+00  7.67e-04  1.56e-01  8.11e-01  
  4  +4.9690e-01  +9.3584e-01  4.39e-01  1.10e-02  4.99e-01  7.94e-04  4.29e-02  7.90e-01  
  5  +4.7625e-01  +8.4117e-01  3.65e-01  2.82e-03  1.31e-01  2.28e-03  8.80e-03  8.82e-01  
  6  +4.7113e-01  +8.3233e-01  3.61e-01  2.18e-03  1.01e-01  1.91e-03  6.79e-03  4.80e-01  
  7  +4.4225e-01  +6.1258e-01  1.70e-01  8.73e-04  4.01e-02  2.15e-04  2.99e-03  8.22e-01  
  8  +4.2480e-01  +5.2746e-01  1.03e-01  4.80e-04  2.20e-02  1.11e-04  1.76e-03  6.07e-01  
  9  +4.0713e-01  +4.4201e-01  3.49e-02  1.57e-04  7.17e-03  2.64e-05  6.29e-04  9.90e-01  
 10  +3.9817e-01  +4.0284e-01  4.67e-03  2.02e-05  9.21e-04  3.46e-06  8.71e-05  8.78e-01  
 11  +3.9675e-01  +3.9689e-01  1.43e-04  6.11e-07  2.78e-05  1.09e-07  2.68e-06  9.75e-01  
 12  +3.9670e-01  +3.9670e-01  1.45e-06  6.19e-09  2.82e-07  1.11e-09  2.72e-08  9.90e-01  
 13  +3.9670e-01  +3.9670e-01  1.45e-08  6.20e-11  2.82e-09  1.11e-11  2.72e-10  9.90e-01  
 14  +3.9670e-01  +3.9670e-01  1.45e-10  6.20e-13  2.82e-11  1.11e-13  2.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9734ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:10 PM: Optimal value: 3.967e-01
(CVXPY) Sep 20 07:34:10 PM: Compilation took 5.520e-03 seconds
(CVXPY) Sep 20 07:34:10 PM: Solver (including time spent in interface) took 3.997e-03 seconds
Iteration: 5, Objective: 0.3967
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:10 PM: Your problem has 313 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:10 PM: Finished problem compilation (took 5.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 313
  constraints   = 563
  nnz(P)        = 0
  nnz(A)        = 3565
  cones (total) = 1
    : Nonnegative = 1,  numel = 563

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9896e-01  +2.5127e+02  2.51e+02  9.39e-01  2.23e+01  1.00e+00  1.02e+00   ------   
  1  +5.8178e-01  +5.2466e+01  5.19e+01  3.83e-01  1.29e+01  3.89e-03  5.44e-01  6.19e-01  
  2  +5.3101e-01  +6.1839e+00  5.65e+00  1.06e-01  4.52e+00  1.33e-02  2.13e-01  9.42e-01  
  3  +5.0005e-01  +1.2373e+00  7.37e-01  2.34e-02  1.02e+00  4.93e-04  1.35e-01  9.90e-01  
  4  +4.9322e-01  +9.8927e-01  4.96e-01  1.02e-02  4.62e-01  8.21e-04  3.59e-02  7.82e-01  
  5  +4.7675e-01  +8.6932e-01  3.93e-01  3.74e-03  1.71e-01  1.40e-03  1.20e-02  7.19e-01  
  6  +4.7351e-01  +8.6948e-01  3.96e-01  2.99e-03  1.37e-01  1.09e-03  9.33e-03  5.50e-01  
  7  +4.4586e-01  +6.9119e-01  2.45e-01  1.27e-03  5.80e-02  8.05e-04  4.17e-03  6.11e-01  
  8  +4.1682e-01  +5.3189e-01  1.15e-01  5.26e-04  2.39e-02  2.95e-04  1.92e-03  6.00e-01  
  9  +4.0345e-01  +4.6254e-01  5.91e-02  2.72e-04  1.23e-02  3.95e-05  1.08e-03  9.90e-01  
 10  +3.9158e-01  +4.1361e-01  2.20e-02  9.62e-05  4.36e-03  1.63e-05  4.03e-04  7.19e-01  
 11  +3.8542e-01  +3.8704e-01  1.62e-03  7.05e-06  3.19e-04  1.13e-06  3.09e-05  9.27e-01  
 12  +3.8491e-01  +3.8495e-01  3.88e-05  1.68e-07  7.59e-06  2.82e-08  7.43e-07  9.81e-01  
 13  +3.8490e-01  +3.8490e-01  3.89e-07  1.68e-09  7.60e-08  2.83e-10  7.44e-09  9.90e-01  
 14  +3.8490e-01  +3.8490e-01  3.89e-09  1.68e-11  7.60e-10  2.83e-12  7.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.2099ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:10 PM: Optimal value: 3.849e-01
(CVXPY) Sep 20 07:34:10 PM: Compilation took 5.001e-03 seconds
(CVXPY) Sep 20 07:34:10 PM: Solver (including time spent in interface) took 5.516e-03 seconds
Iteration: 6, Objective: 0.3849
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:10 PM: Your problem has 323 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:10 PM: Finished problem compilation (took 5.512e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 323
  constraints   = 573
  nnz(P)        = 0
  nnz(A)        = 3678
  cones (total) = 1
    : Nonnegative = 1,  numel = 573

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9874e-01  +2.5145e+02  2.51e+02  9.39e-01  2.22e+01  1.00e+00  1.02e+00   ------   
  1  +5.7706e-01  +5.2714e+01  5.21e+01  3.88e-01  1.29e+01  3.87e-03  5.49e-01  6.16e-01  
  2  +5.2858e-01  +5.9460e+00  5.42e+00  1.00e-01  4.32e+00  1.38e-02  2.05e-01  9.72e-01  
  3  +5.0015e-01  +1.3606e+00  8.60e-01  2.67e-02  1.17e+00  1.22e-03  1.19e-01  9.90e-01  
  4  +4.8314e-01  +1.0958e+00  6.13e-01  6.94e-03  3.18e-01  3.18e-03  2.11e-02  8.86e-01  
  5  +4.6742e-01  +1.0052e+00  5.38e-01  3.78e-03  1.74e-01  3.21e-03  1.17e-02  6.00e-01  
  6  +4.5450e-01  +8.7916e-01  4.25e-01  2.50e-03  1.15e-01  1.97e-03  7.98e-03  5.03e-01  
  7  +4.1731e-01  +5.7772e-01  1.60e-01  8.02e-04  3.63e-02  2.42e-04  2.90e-03  7.99e-01  
  8  +4.0560e-01  +5.2030e-01  1.15e-01  5.54e-04  2.50e-02  1.61e-04  2.13e-03  3.41e-01  
  9  +3.8851e-01  +4.3714e-01  4.86e-02  2.27e-04  1.02e-02  5.85e-05  9.65e-04  6.25e-01  
 10  +3.7760e-01  +3.8523e-01  7.63e-03  3.50e-05  1.57e-03  6.27e-06  1.62e-04  9.90e-01  
 11  +3.7530e-01  +3.7560e-01  3.01e-04  1.37e-06  6.16e-05  2.38e-07  6.54e-06  9.61e-01  
 12  +3.7520e-01  +3.7520e-01  3.17e-06  1.45e-08  6.51e-07  2.51e-09  6.93e-08  9.89e-01  
 13  +3.7520e-01  +3.7520e-01  3.18e-08  1.45e-10  6.51e-09  2.51e-11  6.93e-10  9.90e-01  
 14  +3.7520e-01  +3.7520e-01  3.18e-10  1.45e-12  6.51e-11  2.51e-13  6.93e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.7256ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:10 PM: Optimal value: 3.752e-01
(CVXPY) Sep 20 07:34:10 PM: Compilation took 5.512e-03 seconds
(CVXPY) Sep 20 07:34:10 PM: Solver (including time spent in interface) took 6.003e-03 seconds
Iteration: 7, Objective: 0.3752
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:10 PM: Your problem has 333 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:10 PM: Finished problem compilation (took 4.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 333
  constraints   = 583
  nnz(P)        = 0
  nnz(A)        = 3820
  cones (total) = 1
    : Nonnegative = 1,  numel = 583

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9874e-01  +2.5145e+02  2.51e+02  9.39e-01  2.21e+01  1.00e+00  1.02e+00   ------   
  1  +5.7681e-01  +5.2798e+01  5.22e+01  3.90e-01  1.28e+01  3.87e-03  5.49e-01  6.15e-01  
  2  +5.2826e-01  +6.2431e+00  5.71e+00  1.06e-01  4.45e+00  1.38e-02  2.14e-01  9.50e-01  
  3  +5.0221e-01  +1.2705e+00  7.68e-01  2.44e-02  1.09e+00  7.13e-04  8.60e-02  9.78e-01  
  4  +4.9328e-01  +1.4460e+00  9.53e-01  1.11e-02  5.10e-01  1.89e-03  3.14e-02  7.54e-01  
  5  +4.7294e-01  +9.8983e-01  5.17e-01  4.28e-03  1.96e-01  1.12e-03  1.30e-02  6.51e-01  
  6  +4.5809e-01  +9.1625e-01  4.58e-01  2.62e-03  1.20e-01  1.14e-03  8.15e-03  4.93e-01  
  7  +4.3320e-01  +6.8853e-01  2.55e-01  1.39e-03  6.28e-02  2.59e-04  4.76e-03  6.73e-01  
  8  +4.0412e-01  +5.2015e-01  1.16e-01  5.64e-04  2.53e-02  9.87e-05  2.18e-03  6.09e-01  
  9  +3.9010e-01  +4.4673e-01  5.66e-02  2.69e-04  1.20e-02  4.53e-05  1.13e-03  6.55e-01  
 10  +3.7862e-01  +3.9108e-01  1.25e-02  5.78e-05  2.58e-03  9.42e-06  2.63e-04  8.05e-01  
 11  +3.7620e-01  +3.7965e-01  3.45e-03  1.60e-05  7.13e-04  2.60e-06  7.46e-05  7.78e-01  
 12  +3.7543e-01  +3.7614e-01  7.10e-04  3.29e-06  1.47e-04  5.42e-07  1.56e-05  9.90e-01  
 13  +3.7520e-01  +3.7521e-01  1.09e-05  5.04e-08  2.25e-06  8.01e-09  2.42e-07  9.85e-01  
 14  +3.7520e-01  +3.7520e-01  1.09e-07  5.05e-10  2.25e-08  8.02e-11  2.42e-09  9.90e-01  
 15  +3.7520e-01  +3.7520e-01  1.09e-09  5.05e-12  2.25e-10  8.02e-13  2.42e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.4739ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:10 PM: Optimal value: 3.752e-01
(CVXPY) Sep 20 07:34:10 PM: Compilation took 4.999e-03 seconds
(CVXPY) Sep 20 07:34:10 PM: Solver (including time spent in interface) took 6.522e-03 seconds
Iteration: 8, Objective: 0.3752
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:10 PM: Your problem has 335 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:10 PM: Finished problem compilation (took 5.516e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 335
  constraints   = 585
  nnz(P)        = 0
  nnz(A)        = 3857
  cones (total) = 1
    : Nonnegative = 1,  numel = 585

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9875e-01  +2.5145e+02  2.51e+02  9.40e-01  2.21e+01  1.00e+00  1.02e+00   ------   
  1  +5.7659e-01  +5.2814e+01  5.22e+01  3.90e-01  1.28e+01  3.88e-03  5.49e-01  6.15e-01  
  2  +5.2823e-01  +6.5137e+00  5.99e+00  1.09e-01  4.58e+00  1.38e-02  2.21e-01  9.31e-01  
  3  +5.0373e-01  +1.2900e+00  7.86e-01  2.42e-02  1.09e+00  9.37e-04  7.73e-02  9.27e-01  
  4  +5.0000e-01  +1.4872e+00  9.87e-01  1.39e-02  6.39e-01  1.98e-03  3.83e-02  6.31e-01  
  5  +4.8602e-01  +1.2070e+00  7.21e-01  6.64e-03  3.06e-01  1.81e-03  1.91e-02  5.64e-01  
  6  +4.6910e-01  +1.0591e+00  5.90e-01  3.82e-03  1.75e-01  1.64e-03  1.15e-02  5.33e-01  
  7  +4.5334e-01  +9.2164e-01  4.68e-01  2.46e-03  1.12e-01  1.28e-03  7.74e-03  4.21e-01  
  8  +4.2753e-01  +6.6997e-01  2.42e-01  1.30e-03  5.85e-02  2.63e-04  4.55e-03  6.60e-01  
  9  +3.9984e-01  +5.0281e-01  1.03e-01  4.95e-04  2.22e-02  9.45e-05  1.95e-03  6.40e-01  
 10  +3.8736e-01  +4.3381e-01  4.65e-02  2.19e-04  9.80e-03  4.02e-05  9.36e-04  7.38e-01  
 11  +3.7709e-01  +3.8372e-01  6.64e-03  3.08e-05  1.38e-03  5.15e-06  1.42e-04  8.69e-01  
 12  +3.7643e-01  +3.8050e-01  4.07e-03  1.89e-05  8.41e-04  3.17e-06  8.83e-05  6.95e-01  
 13  +3.7529e-01  +3.7557e-01  2.80e-04  1.30e-06  5.79e-05  2.07e-07  6.20e-06  9.32e-01  
 14  +3.7520e-01  +3.7520e-01  3.25e-06  1.50e-08  6.71e-07  2.36e-09  7.23e-08  9.89e-01  
 15  +3.7520e-01  +3.7520e-01  3.25e-08  1.51e-10  6.72e-09  2.37e-11  7.24e-10  9.90e-01  
 16  +3.7520e-01  +3.7520e-01  3.25e-10  1.51e-12  6.72e-11  2.37e-13  7.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.9244ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:10 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:10 PM: Optimal value: 3.752e-01
(CVXPY) Sep 20 07:34:10 PM: Compilation took 5.516e-03 seconds
(CVXPY) Sep 20 07:34:10 PM: Solver (including time spent in interface) took 6.508e-03 seconds
FULL MODEL:
  Accruacy: 0.612
  Our objective: 0.22400000000000006

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.028)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1)                       <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1)            <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1)            <-- (term's our objective: 0.032)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.916388750076294
Best over terms:
  Our final objective: 0.032000000000000035
    Its accruacy: 0.516
    Its hamming distance: 11
  Shortest hamming distance: 1
    Its our objective: 0.016000000000000028
  Highest accruacy: 0.516
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

