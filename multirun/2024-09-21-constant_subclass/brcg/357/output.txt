Command:
python test_script.py -s constant_subclass -d 9 -n 50000 --seed 73 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0018399999999999998
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 9.

Computed total variation: 0.08235999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:52 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:52 PM: Finished problem compilation (took 1.224e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 300019
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8095e-01  +5.4248e+03  5.42e+03  4.36e-01  1.71e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3208e-01  +6.1486e+02  6.14e+02  1.78e-01  8.95e+01  1.62e-02  2.78e-01  9.28e-01  
  3  +5.0908e-01  +1.6055e+02  1.60e+02  1.50e-01  7.61e+01  4.52e-05  2.60e-01  2.60e-01  
  4  +5.0136e-01  +1.7633e+01  1.71e+01  4.71e-02  2.37e+01  5.20e-06  1.97e-01  4.43e-01  
  5  +5.0000e-01  +1.0774e+00  5.77e-01  1.72e-03  8.98e-01  2.20e-05  1.93e-01  2.02e-01  
  6  +5.0000e-01  +6.5525e-01  1.55e-01  4.63e-04  2.42e-01  5.02e-06  5.67e-02  7.39e-01  
  7  +5.0000e-01  +5.7249e-01  7.25e-02  2.16e-04  1.13e-01  2.11e-06  2.69e-02  5.98e-01  
  8  +5.0000e-01  +5.1288e-01  1.29e-02  3.84e-05  2.01e-02  3.14e-07  4.32e-03  9.51e-01  
  9  +5.0000e-01  +5.1441e-01  1.44e-02  4.30e-05  2.25e-02  4.01e-07  2.90e-03  5.09e-01  
 10  +5.0000e-01  +5.1820e-01  1.82e-02  5.26e-05  2.75e-02  1.17e-06  7.46e-04  9.90e-01  
 11  +4.9988e-01  +5.1351e-01  1.36e-02  3.38e-06  1.77e-03  5.47e-05  1.08e-05  9.86e-01  
 12  +4.9932e-01  +5.1141e-01  1.21e-02  6.22e-07  3.26e-04  2.50e-04  1.95e-06  8.24e-01  
 13  +4.9879e-01  +5.0759e-01  8.80e-03  5.23e-07  2.74e-04  1.01e-04  1.69e-06  2.96e-01  
 14  +4.9826e-01  +5.0433e-01  6.07e-03  3.43e-07  1.80e-04  3.00e-05  1.15e-06  5.93e-01  
 15  +4.9768e-01  +5.0141e-01  3.73e-03  1.84e-07  9.65e-05  3.28e-07  6.48e-07  9.05e-01  
 16  +4.9707e-01  +4.9888e-01  1.80e-03  7.91e-08  4.15e-05  5.55e-09  2.95e-07  9.90e-01  
 17  +4.9651e-01  +4.9665e-01  1.39e-04  5.58e-09  2.92e-06  4.85e-10  2.23e-08  9.31e-01  
 18  +4.9646e-01  +4.9647e-01  4.37e-06  1.74e-10  9.13e-08  3.45e-11  7.00e-10  9.90e-01  
 19  +4.9646e-01  +4.9646e-01  4.37e-08  1.74e-12  9.13e-10  3.46e-13  7.00e-12  9.90e-01  
 20  +4.9646e-01  +4.9646e-01  4.50e-10  1.79e-14  9.41e-12  9.00e-15  1.72e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 445.1743ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:53 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:53 PM: Optimal value: 4.965e-01
(CVXPY) Sep 20 08:07:53 PM: Compilation took 1.224e-01 seconds
(CVXPY) Sep 20 08:07:53 PM: Solver (including time spent in interface) took 4.772e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4965
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:53 PM: Your problem has 25029 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:53 PM: Finished problem compilation (took 1.190e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25029
  constraints   = 50029
  nnz(P)        = 0
  nnz(A)        = 327594
  cones (total) = 1
    : Nonnegative = 1,  numel = 50029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.65e+02  1.00e+00  1.00e+00   ------   
  1  +5.8095e-01  +5.4249e+03  5.42e+03  4.36e-01  1.73e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3207e-01  +6.1476e+02  6.14e+02  1.78e-01  9.07e+01  1.62e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6052e+02  1.60e+02  1.50e-01  7.71e+01  4.52e-05  2.60e-01  2.60e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.40e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.0743e+00  5.74e-01  1.71e-03  9.06e-01  2.21e-05  1.93e-01  2.05e-01  
  6  +5.0000e-01  +7.1635e-01  2.16e-01  6.45e-04  3.42e-01  7.43e-06  7.68e-02  6.52e-01  
  7  +5.0000e-01  +6.1243e-01  1.12e-01  3.35e-04  1.78e-01  3.75e-06  3.98e-02  5.28e-01  
  8  +5.0001e-01  +6.0475e-01  1.05e-01  3.12e-04  1.66e-01  1.00e-06  2.81e-02  9.90e-01  
  9  +5.0000e-01  +5.5824e-01  5.82e-02  1.74e-04  9.21e-02  6.66e-07  1.30e-02  5.81e-01  
 10  +5.0000e-01  +5.2420e-01  2.42e-02  7.15e-05  3.79e-02  1.04e-06  1.79e-03  9.27e-01  
 11  +4.9985e-01  +5.3304e-01  3.32e-02  1.03e-05  5.46e-03  7.05e-05  3.45e-05  9.89e-01  
 12  +4.9910e-01  +5.2950e-01  3.04e-02  1.95e-06  1.04e-03  3.32e-04  6.39e-06  8.20e-01  
 13  +4.9895e-01  +5.2824e-01  2.93e-02  1.89e-06  1.01e-03  2.95e-04  6.20e-06  8.06e-02  
 14  +4.9851e-01  +5.2384e-01  2.53e-02  1.81e-06  9.65e-04  1.51e-04  5.96e-06  2.61e-01  
 15  +4.9849e-01  +5.2360e-01  2.51e-02  1.81e-06  9.62e-04  1.42e-04  5.94e-06  3.66e-02  
 16  +4.9760e-01  +5.1751e-01  1.99e-02  1.29e-06  6.84e-04  7.15e-05  4.24e-06  5.23e-01  
 17  +4.9753e-01  +5.1658e-01  1.90e-02  1.14e-06  6.04e-04  3.34e-05  3.70e-06  5.33e-01  
 18  +4.9741e-01  +5.1615e-01  1.87e-02  1.12e-06  5.96e-04  2.87e-05  3.68e-06  9.87e-02  
 19  +4.9680e-01  +5.1290e-01  1.61e-02  8.63e-07  4.59e-04  1.38e-05  2.81e-06  5.51e-01  
 20  +4.9502e-01  +5.0449e-01  9.47e-03  4.17e-07  2.22e-04  1.22e-06  1.38e-06  8.93e-01  
 21  +4.9310e-01  +4.9725e-01  4.15e-03  1.56e-07  8.27e-05  3.88e-07  5.37e-07  7.20e-01  
 22  +4.9311e-01  +4.9726e-01  4.15e-03  1.56e-07  8.27e-05  3.88e-07  5.37e-07  2.29e-03  
 23  +4.9310e-01  +4.9725e-01  4.14e-03  1.55e-07  8.27e-05  3.85e-07  5.37e-07  4.64e-03  
 24  +4.9300e-01  +4.9671e-01  3.71e-03  1.39e-07  7.37e-05  2.24e-07  4.80e-07  4.55e-01  
 25  +4.9301e-01  +4.9664e-01  3.64e-03  1.36e-07  7.23e-05  1.38e-07  4.69e-07  4.41e-01  
 26  +4.9173e-01  +4.9204e-01  3.11e-04  1.12e-08  5.97e-06  1.43e-09  4.03e-08  9.86e-01  
 27  +4.9160e-01  +4.9160e-01  3.24e-06  1.17e-10  6.20e-08  1.45e-11  4.23e-10  9.90e-01  
 28  +4.9160e-01  +4.9160e-01  3.24e-08  1.17e-12  6.20e-10  1.45e-13  4.23e-12  9.90e-01  
 29  +4.9160e-01  +4.9160e-01  3.27e-10  1.17e-14  6.25e-12  2.10e-15  6.02e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 687.9554ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:54 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:54 PM: Optimal value: 4.916e-01
(CVXPY) Sep 20 08:07:54 PM: Compilation took 1.190e-01 seconds
(CVXPY) Sep 20 08:07:54 PM: Solver (including time spent in interface) took 7.216e-01 seconds
Iteration: 2, Objective: 0.4916
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:54 PM: Your problem has 25039 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:54 PM: Finished problem compilation (took 1.305e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25039
  constraints   = 50039
  nnz(P)        = 0
  nnz(A)        = 353227
  cones (total) = 1
    : Nonnegative = 1,  numel = 50039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.68e+02  1.00e+00  1.00e+00   ------   
  1  +5.8094e-01  +5.4251e+03  5.42e+03  4.36e-01  1.75e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3206e-01  +6.1465e+02  6.14e+02  1.78e-01  9.18e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6048e+02  1.60e+02  1.50e-01  7.80e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.43e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.0618e+00  5.62e-01  1.68e-03  8.97e-01  2.22e-05  1.93e-01  2.11e-01  
  6  +5.0000e-01  +6.0968e-01  1.10e-01  3.27e-04  1.76e-01  3.73e-06  4.03e-02  8.12e-01  
  7  +5.0000e-01  +5.9815e-01  9.82e-02  2.93e-04  1.57e-01  3.28e-06  3.42e-02  2.08e-01  
  8  +5.0000e-01  +5.9111e-01  9.11e-02  2.72e-04  1.46e-01  2.35e-06  2.63e-02  5.22e-01  
  9  +5.0000e-01  +5.7830e-01  7.83e-02  2.33e-04  1.25e-01  2.13e-06  1.99e-02  2.77e-01  
 10  +5.0000e-01  +5.7949e-01  7.95e-02  2.37e-04  1.27e-01  1.72e-06  1.80e-02  3.25e-01  
 11  +5.0000e-01  +5.6808e-01  6.81e-02  2.03e-04  1.09e-01  1.57e-06  1.16e-02  4.58e-01  
 12  +5.0000e-01  +5.4546e-01  4.55e-02  1.34e-04  7.19e-02  1.77e-06  2.78e-03  9.90e-01  
 13  +4.9993e-01  +5.3911e-01  3.92e-02  3.21e-05  1.73e-02  3.19e-05  1.14e-04  9.90e-01  
 14  +4.9886e-01  +5.3528e-01  3.64e-02  2.09e-06  1.12e-03  4.93e-04  6.69e-06  9.42e-01  
 15  +4.9845e-01  +5.3174e-01  3.33e-02  1.94e-06  1.05e-03  3.78e-04  6.19e-06  1.77e-01  
 16  +4.9829e-01  +5.3039e-01  3.21e-02  1.87e-06  1.01e-03  3.25e-04  5.96e-06  1.21e-01  
 17  +4.9790e-01  +5.2670e-01  2.88e-02  1.75e-06  9.40e-04  1.66e-04  5.59e-06  3.50e-01  
 18  +4.9782e-01  +5.2572e-01  2.79e-02  1.69e-06  9.08e-04  1.27e-04  5.38e-06  1.98e-01  
 19  +4.9766e-01  +5.2486e-01  2.72e-02  1.60e-06  8.64e-04  1.19e-04  5.12e-06  8.93e-02  
 20  +4.9719e-01  +5.2127e-01  2.41e-02  1.42e-06  7.66e-04  1.28e-05  4.56e-06  7.18e-01  
 21  +4.9674e-01  +5.1916e-01  2.24e-02  1.28e-06  6.90e-04  7.68e-06  4.10e-06  3.67e-01  
 22  +4.9638e-01  +5.1752e-01  2.11e-02  1.12e-06  6.03e-04  8.33e-08  3.57e-06  8.69e-01  
 23  +4.9298e-01  +5.0312e-01  1.01e-02  4.37e-07  2.35e-04  4.94e-08  1.40e-06  6.59e-01  
 24  +4.9235e-01  +5.0072e-01  8.36e-03  3.32e-07  1.79e-04  4.73e-08  1.06e-06  3.08e-01  
 25  +4.9231e-01  +5.0056e-01  8.25e-03  3.32e-07  1.79e-04  4.63e-08  1.06e-06  4.19e-03  
 26  +4.9182e-01  +4.9890e-01  7.08e-03  2.78e-07  1.50e-04  7.84e-08  9.05e-07  9.27e-01  
 27  +4.9031e-01  +4.9300e-01  2.69e-03  9.91e-08  5.34e-05  3.28e-08  3.22e-07  7.32e-01  
 28  +4.8936e-01  +4.8954e-01  1.83e-04  6.60e-09  3.55e-06  2.13e-09  2.16e-08  9.45e-01  
 29  +4.8929e-01  +4.8929e-01  1.84e-06  6.65e-11  3.58e-08  2.14e-11  2.18e-10  9.90e-01  
 30  +4.8929e-01  +4.8929e-01  1.84e-08  6.65e-13  3.58e-10  2.14e-13  2.18e-12  9.90e-01  
 31  +4.8929e-01  +4.8929e-01  1.85e-10  6.68e-15  3.59e-12  2.37e-15  2.40e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 753.8929ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:55 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:55 PM: Optimal value: 4.893e-01
(CVXPY) Sep 20 08:07:55 PM: Compilation took 1.305e-01 seconds
(CVXPY) Sep 20 08:07:55 PM: Solver (including time spent in interface) took 7.896e-01 seconds
Iteration: 3, Objective: 0.4893
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:55 PM: Your problem has 25049 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:55 PM: Finished problem compilation (took 1.385e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25049
  constraints   = 50049
  nnz(P)        = 0
  nnz(A)        = 370350
  cones (total) = 1
    : Nonnegative = 1,  numel = 50049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.69e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4252e+03  5.42e+03  4.37e-01  1.76e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3205e-01  +6.1458e+02  6.14e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6046e+02  1.60e+02  1.50e-01  7.84e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.71e-02  2.44e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.0629e+00  5.63e-01  1.68e-03  9.03e-01  2.22e-05  1.93e-01  2.11e-01  
  6  +5.0000e-01  +6.8884e-01  1.89e-01  5.63e-04  3.04e-01  6.78e-06  6.78e-02  6.84e-01  
  7  +5.0000e-01  +6.2410e-01  1.24e-01  3.70e-04  2.00e-01  4.39e-06  4.26e-02  4.28e-01  
  8  +5.0000e-01  +5.8083e-01  8.08e-02  2.41e-04  1.30e-01  1.94e-06  2.10e-02  8.37e-01  
  9  +5.0000e-01  +5.5713e-01  5.71e-02  1.70e-04  9.17e-02  1.89e-06  7.71e-03  7.99e-01  
 10  +4.9996e-01  +5.4847e-01  4.85e-02  9.72e-05  5.25e-02  1.87e-05  4.93e-04  9.88e-01  
 11  +4.9978e-01  +5.4653e-01  4.68e-02  2.44e-05  1.32e-02  9.91e-05  8.53e-05  8.52e-01  
 12  +4.9989e-01  +5.4022e-01  4.03e-02  1.59e-05  8.59e-03  4.26e-05  5.42e-05  9.33e-01  
 13  +4.9911e-01  +5.3728e-01  3.82e-02  2.25e-06  1.21e-03  2.89e-04  7.35e-06  8.67e-01  
 14  +4.9877e-01  +5.3554e-01  3.68e-02  2.09e-06  1.13e-03  2.48e-04  6.82e-06  1.85e-01  
 15  +4.9864e-01  +5.3496e-01  3.63e-02  2.09e-06  1.13e-03  2.40e-04  6.82e-06  8.41e-03  
 16  +4.9731e-01  +5.2917e-01  3.19e-02  1.64e-06  8.85e-04  1.94e-04  5.38e-06  3.14e-01  
 17  +4.9490e-01  +5.1801e-01  2.31e-02  1.20e-06  6.52e-04  5.75e-05  4.03e-06  5.32e-01  
 18  +4.9486e-01  +5.1786e-01  2.30e-02  1.20e-06  6.47e-04  5.32e-05  4.00e-06  6.53e-02  
 19  +4.9130e-01  +5.0315e-01  1.18e-02  5.04e-07  2.73e-04  7.73e-06  1.72e-06  8.48e-01  
 20  +4.9102e-01  +5.0215e-01  1.11e-02  4.65e-07  2.52e-04  5.59e-06  1.59e-06  2.77e-01  
 21  +4.9096e-01  +5.0201e-01  1.10e-02  4.55e-07  2.46e-04  4.28e-06  1.55e-06  2.37e-01  
 22  +4.9061e-01  +5.0083e-01  1.02e-02  4.04e-07  2.18e-04  2.73e-06  1.37e-06  3.89e-01  
 23  +4.9026e-01  +4.9990e-01  9.63e-03  3.83e-07  2.07e-04  1.90e-06  1.36e-06  2.04e-01  
 24  +4.8866e-01  +4.9336e-01  4.71e-03  1.80e-07  9.76e-05  7.14e-08  6.49e-07  9.90e-01  
 25  +4.8825e-01  +4.9209e-01  3.84e-03  1.40e-07  7.58e-05  6.00e-08  4.92e-07  3.83e-01  
 26  +4.8702e-01  +4.8779e-01  7.74e-04  2.80e-08  1.51e-05  9.45e-09  1.01e-07  9.90e-01  
 27  +4.8671e-01  +4.8672e-01  1.27e-05  4.56e-10  2.47e-07  1.44e-10  1.66e-09  9.85e-01  
 28  +4.8670e-01  +4.8670e-01  1.27e-07  4.56e-12  2.47e-09  1.44e-12  1.66e-11  9.90e-01  
 29  +4.8670e-01  +4.8670e-01  1.27e-09  4.58e-14  2.47e-11  1.67e-14  1.91e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 841.1473ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:56 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:56 PM: Optimal value: 4.867e-01
(CVXPY) Sep 20 08:07:56 PM: Compilation took 1.385e-01 seconds
(CVXPY) Sep 20 08:07:56 PM: Solver (including time spent in interface) took 8.787e-01 seconds
Iteration: 4, Objective: 0.4867
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:56 PM: Your problem has 25059 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:56 PM: Finished problem compilation (took 1.557e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25059
  constraints   = 50059
  nnz(P)        = 0
  nnz(A)        = 381109
  cones (total) = 1
    : Nonnegative = 1,  numel = 50059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4253e+03  5.42e+03  4.37e-01  1.76e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3205e-01  +6.1453e+02  6.14e+02  1.78e-01  9.23e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6045e+02  1.60e+02  1.50e-01  7.85e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.45e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.0587e+00  5.59e-01  1.67e-03  8.98e-01  2.23e-05  1.93e-01  2.14e-01  
  6  +5.0000e-01  +6.9613e-01  1.96e-01  5.85e-04  3.16e-01  7.20e-06  7.01e-02  6.75e-01  
  7  +5.0000e-01  +6.1999e-01  1.20e-01  3.58e-04  1.93e-01  4.43e-06  4.02e-02  4.80e-01  
  8  +5.0000e-01  +6.0584e-01  1.06e-01  3.16e-04  1.71e-01  3.97e-06  3.23e-02  2.43e-01  
  9  +5.0000e-01  +5.9873e-01  9.87e-02  2.94e-04  1.59e-01  3.28e-06  2.43e-02  4.51e-01  
 10  +5.0000e-01  +5.9313e-01  9.31e-02  2.77e-04  1.50e-01  1.27e-06  1.31e-02  9.90e-01  
 11  +5.0000e-01  +5.5964e-01  5.96e-02  1.73e-04  9.37e-02  2.51e-06  2.64e-03  8.51e-01  
 12  +4.9984e-01  +5.5066e-01  5.08e-02  1.99e-05  1.08e-02  7.69e-05  6.62e-05  9.90e-01  
 13  +4.9941e-01  +5.4817e-01  4.88e-02  5.99e-06  3.25e-03  2.41e-04  1.92e-05  7.34e-01  
 14  +4.9946e-01  +5.4683e-01  4.74e-02  5.75e-06  3.11e-03  1.93e-04  1.84e-05  2.14e-01  
 15  +4.9941e-01  +5.4289e-01  4.35e-02  4.45e-06  2.41e-03  1.08e-04  1.42e-05  6.56e-01  
 16  +4.9910e-01  +5.4067e-01  4.16e-02  3.36e-06  1.82e-03  1.00e-04  1.07e-05  4.49e-01  
 17  +4.9875e-01  +5.3869e-01  3.99e-02  2.87e-06  1.56e-03  7.29e-05  9.17e-06  4.20e-01  
 18  +4.9861e-01  +5.3776e-01  3.91e-02  2.82e-06  1.53e-03  5.46e-05  9.01e-06  2.17e-01  
 19  +4.9811e-01  +5.3536e-01  3.73e-02  2.46e-06  1.33e-03  4.75e-05  7.88e-06  2.44e-01  
 20  +4.9799e-01  +5.3479e-01  3.68e-02  2.44e-06  1.32e-03  4.14e-05  7.82e-06  1.00e-01  
 21  +4.9724e-01  +5.3154e-01  3.43e-02  2.08e-06  1.13e-03  3.74e-05  6.70e-06  2.09e-01  
 22  +4.9628e-01  +5.2701e-01  3.07e-02  1.85e-06  1.00e-03  4.20e-06  6.00e-06  7.24e-01  
 23  +4.9430e-01  +5.1872e-01  2.44e-02  1.28e-06  6.91e-04  4.78e-08  4.19e-06  9.22e-01  
 24  +4.9386e-01  +5.1696e-01  2.31e-02  1.17e-06  6.34e-04  6.21e-08  3.84e-06  1.76e-01  
 25  +4.9380e-01  +5.1676e-01  2.30e-02  1.14e-06  6.20e-04  7.84e-08  3.75e-06  1.30e-01  
 26  +4.9303e-01  +5.1381e-01  2.08e-02  9.83e-07  5.33e-04  8.27e-08  3.24e-06  2.15e-01  
 27  +4.9288e-01  +5.1337e-01  2.05e-02  9.75e-07  5.28e-04  8.47e-08  3.23e-06  3.96e-02  
 28  +4.8989e-01  +5.0189e-01  1.20e-02  4.94e-07  2.68e-04  8.10e-08  1.67e-06  7.28e-01  
 29  +4.8789e-01  +4.9463e-01  6.73e-03  2.60e-07  1.41e-04  4.96e-08  9.03e-07  5.54e-01  
 30  +4.8787e-01  +4.9452e-01  6.65e-03  2.56e-07  1.39e-04  5.30e-08  8.88e-07  1.54e-01  
 31  +4.8564e-01  +4.8651e-01  8.76e-04  3.18e-08  1.72e-05  8.69e-09  1.15e-07  9.58e-01  
 32  +4.8531e-01  +4.8539e-01  7.79e-05  2.81e-09  1.52e-06  9.33e-10  1.02e-08  9.90e-01  
 33  +4.8528e-01  +4.8528e-01  7.81e-07  2.82e-11  1.53e-08  9.35e-12  1.03e-10  9.90e-01  
 34  +4.8528e-01  +4.8528e-01  7.83e-09  2.83e-13  1.53e-10  1.03e-13  1.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 968.8829ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:57 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:57 PM: Optimal value: 4.853e-01
(CVXPY) Sep 20 08:07:57 PM: Compilation took 1.557e-01 seconds
(CVXPY) Sep 20 08:07:57 PM: Solver (including time spent in interface) took 1.010e+00 seconds
Iteration: 5, Objective: 0.4853
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:58 PM: Your problem has 25069 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:58 PM: Finished problem compilation (took 1.664e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25069
  constraints   = 50069
  nnz(P)        = 0
  nnz(A)        = 388701
  cones (total) = 1
    : Nonnegative = 1,  numel = 50069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8092e-01  +5.4253e+03  5.42e+03  4.37e-01  1.76e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3204e-01  +6.1449e+02  6.14e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6043e+02  1.60e+02  1.50e-01  7.85e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.45e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.0552e+00  5.55e-01  1.66e-03  8.94e-01  2.23e-05  1.92e-01  2.17e-01  
  6  +5.0000e-01  +7.2322e-01  2.23e-01  6.66e-04  3.60e-01  8.23e-06  7.87e-02  6.48e-01  
  7  +5.0000e-01  +6.1545e-01  1.15e-01  3.44e-04  1.86e-01  3.97e-06  3.73e-02  6.42e-01  
  8  +5.0000e-01  +5.9710e-01  9.71e-02  2.90e-04  1.57e-01  3.34e-06  2.58e-02  4.22e-01  
  9  +5.0000e-01  +5.9056e-01  9.06e-02  2.70e-04  1.46e-01  2.89e-06  1.72e-02  5.50e-01  
 10  +5.0000e-01  +5.8934e-01  8.93e-02  2.66e-04  1.44e-01  1.17e-06  9.21e-03  9.90e-01  
 11  +5.0000e-01  +5.6699e-01  6.70e-02  1.81e-04  9.79e-02  3.90e-06  1.53e-03  8.54e-01  
 12  +4.9965e-01  +5.6236e-01  6.27e-02  1.02e-05  5.55e-03  1.61e-04  3.27e-05  9.79e-01  
 13  +4.9944e-01  +5.5946e-01  6.00e-02  7.08e-06  3.84e-03  2.04e-04  2.25e-05  3.56e-01  
 14  +4.9960e-01  +5.5225e-01  5.26e-02  6.72e-06  3.64e-03  8.98e-05  2.13e-05  4.21e-01  
 15  +4.9964e-01  +5.4761e-01  4.80e-02  6.06e-06  3.29e-03  4.26e-05  1.92e-05  5.19e-01  
 16  +4.9931e-01  +5.4545e-01  4.61e-02  4.15e-06  2.25e-03  5.55e-05  1.31e-05  3.50e-01  
 17  +4.9926e-01  +5.4461e-01  4.54e-02  4.11e-06  2.23e-03  4.69e-05  1.30e-05  1.28e-01  
 18  +4.9895e-01  +5.4271e-01  4.38e-02  3.45e-06  1.87e-03  4.73e-05  1.09e-05  2.28e-01  
 19  +4.9886e-01  +5.4197e-01  4.31e-02  3.42e-06  1.85e-03  4.10e-05  1.08e-05  1.09e-01  
 20  +4.9825e-01  +5.3871e-01  4.05e-02  2.75e-06  1.49e-03  3.94e-05  8.67e-06  2.79e-01  
 21  +4.9797e-01  +5.3716e-01  3.92e-02  2.55e-06  1.39e-03  3.22e-05  8.05e-06  2.20e-01  
 22  +4.9757e-01  +5.3492e-01  3.73e-02  2.33e-06  1.27e-03  2.03e-05  7.35e-06  3.68e-01  
 23  +4.9698e-01  +5.3216e-01  3.52e-02  2.08e-06  1.13e-03  1.61e-05  6.56e-06  2.48e-01  
 24  +4.9632e-01  +5.2922e-01  3.29e-02  1.85e-06  1.00e-03  1.12e-05  5.85e-06  3.16e-01  
 25  +4.9548e-01  +5.2547e-01  3.00e-02  1.62e-06  8.81e-04  6.41e-06  5.16e-06  3.89e-01  
 26  +4.9313e-01  +5.1572e-01  2.26e-02  1.08e-06  5.85e-04  2.55e-06  3.46e-06  6.14e-01  
 27  +4.9311e-01  +5.1568e-01  2.26e-02  1.07e-06  5.78e-04  2.39e-06  3.42e-06  7.52e-02  
 28  +4.9288e-01  +5.1482e-01  2.19e-02  1.01e-06  5.49e-04  1.61e-06  3.26e-06  3.17e-01  
 29  +4.9077e-01  +5.0678e-01  1.60e-02  6.77e-07  3.67e-04  9.24e-07  2.21e-06  4.65e-01  
 30  +4.8968e-01  +5.0259e-01  1.29e-02  5.24e-07  2.84e-04  6.10e-07  1.72e-06  3.72e-01  
 31  +4.8898e-01  +4.9962e-01  1.06e-02  4.08e-07  2.21e-04  1.55e-07  1.35e-06  8.90e-01  
 32  +4.8653e-01  +4.9084e-01  4.31e-03  1.58e-07  8.57e-05  5.78e-08  5.41e-07  6.94e-01  
 33  +4.8575e-01  +4.8800e-01  2.25e-03  8.06e-08  4.37e-05  2.89e-08  2.80e-07  9.90e-01  
 34  +4.8489e-01  +4.8506e-01  1.69e-04  5.97e-09  3.24e-06  2.13e-09  2.12e-08  9.51e-01  
 35  +4.8482e-01  +4.8482e-01  1.80e-06  6.36e-11  3.45e-08  2.27e-11  2.27e-10  9.90e-01  
 36  +4.8482e-01  +4.8482e-01  1.80e-08  6.36e-13  3.45e-10  2.27e-13  2.27e-12  9.90e-01  
 37  +4.8482e-01  +4.8482e-01  1.81e-10  6.42e-15  3.46e-12  2.72e-15  2.69e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0350064s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:59 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:59 PM: Optimal value: 4.848e-01
(CVXPY) Sep 20 08:07:59 PM: Compilation took 1.664e-01 seconds
(CVXPY) Sep 20 08:07:59 PM: Solver (including time spent in interface) took 1.076e+00 seconds
Iteration: 6, Objective: 0.4848
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:59 PM: Your problem has 25079 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:59 PM: Finished problem compilation (took 1.618e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25079
  constraints   = 50079
  nnz(P)        = 0
  nnz(A)        = 396915
  cones (total) = 1
    : Nonnegative = 1,  numel = 50079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8092e-01  +5.4252e+03  5.42e+03  4.37e-01  1.76e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3204e-01  +6.1444e+02  6.14e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6042e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7629e+01  1.71e+01  4.71e-02  2.45e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.0916e+00  5.92e-01  1.77e-03  9.53e-01  2.24e-05  1.93e-01  2.04e-01  
  6  +5.0000e-01  +8.1308e-01  3.13e-01  9.34e-04  5.05e-01  1.08e-05  1.04e-01  5.40e-01  
  7  +5.0000e-01  +6.8685e-01  1.87e-01  5.57e-04  3.02e-01  5.49e-06  5.87e-02  6.11e-01  
  8  +5.0000e-01  +6.0434e-01  1.04e-01  3.11e-04  1.69e-01  3.25e-06  2.85e-02  5.98e-01  
  9  +5.0000e-01  +5.8609e-01  8.61e-02  2.57e-04  1.39e-01  3.17e-06  1.56e-02  5.65e-01  
 10  +5.0000e-01  +5.8149e-01  8.15e-02  2.42e-04  1.31e-01  4.16e-06  6.55e-03  7.84e-01  
 11  +4.9992e-01  +5.5666e-01  5.67e-02  8.81e-05  4.77e-02  3.98e-05  3.67e-04  9.90e-01  
 12  +4.9910e-01  +5.5333e-01  5.42e-02  1.05e-05  5.71e-03  3.99e-04  3.41e-05  9.07e-01  
 13  +4.9918e-01  +5.5066e-01  5.15e-02  8.31e-06  4.51e-03  2.89e-04  2.66e-05  5.49e-01  
 14  +4.9895e-01  +5.4723e-01  4.83e-02  5.47e-06  2.97e-03  2.36e-04  1.73e-05  6.96e-01  
 15  +4.9879e-01  +5.4617e-01  4.74e-02  4.75e-06  2.58e-03  2.24e-04  1.50e-05  2.56e-01  
 16  +4.9870e-01  +5.4515e-01  4.65e-02  4.14e-06  2.25e-03  1.66e-04  1.31e-05  4.11e-01  
 17  +4.9846e-01  +5.4364e-01  4.52e-02  3.55e-06  1.93e-03  1.05e-04  1.12e-05  5.05e-01  
 18  +4.9829e-01  +5.4260e-01  4.43e-02  3.41e-06  1.85e-03  7.51e-05  1.07e-05  2.83e-01  
 19  +4.9722e-01  +5.3788e-01  4.07e-02  2.55e-06  1.38e-03  7.71e-05  8.05e-06  2.96e-01  
 20  +4.9654e-01  +5.3459e-01  3.81e-02  2.32e-06  1.26e-03  2.36e-05  7.38e-06  5.95e-01  
 21  +4.9574e-01  +5.3138e-01  3.56e-02  2.09e-06  1.13e-03  1.36e-05  6.65e-06  3.95e-01  
 22  +4.9456e-01  +5.2656e-01  3.20e-02  1.73e-06  9.40e-04  7.50e-06  5.55e-06  4.51e-01  
 23  +4.9365e-01  +5.2265e-01  2.90e-02  1.47e-06  7.99e-04  7.93e-08  4.76e-06  8.60e-01  
 24  +4.9199e-01  +5.1616e-01  2.42e-02  1.14e-06  6.16e-04  1.27e-07  3.71e-06  5.25e-01  
 25  +4.8962e-01  +5.0700e-01  1.74e-02  7.53e-07  4.09e-04  9.71e-08  2.50e-06  3.82e-01  
 26  +4.8850e-01  +5.0230e-01  1.38e-02  5.49e-07  2.98e-04  1.46e-07  1.84e-06  9.90e-01  
 27  +4.8490e-01  +4.8906e-01  4.16e-03  1.54e-07  8.35e-05  4.45e-08  5.35e-07  9.53e-01  
 28  +4.8488e-01  +4.8895e-01  4.07e-03  1.52e-07  8.25e-05  4.27e-08  5.35e-07  1.87e-02  
 29  +4.8488e-01  +4.8895e-01  4.07e-03  1.52e-07  8.25e-05  4.29e-08  5.34e-07  1.59e-02  
 30  +4.8480e-01  +4.8868e-01  3.88e-03  1.43e-07  7.76e-05  4.26e-08  4.99e-07  1.86e-01  
 31  +4.8397e-01  +4.8573e-01  1.76e-03  6.38e-08  3.46e-05  2.19e-08  2.25e-07  9.90e-01  
 32  +4.8332e-01  +4.8353e-01  2.04e-04  7.30e-09  3.96e-06  2.51e-09  2.62e-08  8.95e-01  
 33  +4.8324e-01  +4.8324e-01  2.82e-06  1.01e-10  5.49e-08  3.48e-11  3.63e-10  9.90e-01  
 34  +4.8324e-01  +4.8324e-01  2.82e-08  1.01e-12  5.49e-10  3.48e-13  3.63e-12  9.90e-01  
 35  +4.8324e-01  +4.8324e-01  2.83e-10  1.01e-14  5.50e-12  4.04e-15  4.18e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0056166s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:00 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:00 PM: Optimal value: 4.832e-01
(CVXPY) Sep 20 08:08:00 PM: Compilation took 1.618e-01 seconds
(CVXPY) Sep 20 08:08:00 PM: Solver (including time spent in interface) took 1.044e+00 seconds
Iteration: 7, Objective: 0.4832
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:00 PM: Your problem has 25089 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:01 PM: Finished problem compilation (took 1.718e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25089
  constraints   = 50089
  nnz(P)        = 0
  nnz(A)        = 404414
  cones (total) = 1
    : Nonnegative = 1,  numel = 50089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8091e-01  +5.4253e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3203e-01  +6.1438e+02  6.14e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6040e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7629e+01  1.71e+01  4.71e-02  2.45e+01  5.21e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.0975e+00  5.98e-01  1.78e-03  9.64e-01  2.24e-05  1.93e-01  2.03e-01  
  6  +5.0000e-01  +8.0762e-01  3.08e-01  9.18e-04  4.97e-01  1.05e-05  1.02e-01  5.51e-01  
  7  +5.0000e-01  +6.7545e-01  1.75e-01  5.24e-04  2.84e-01  5.10e-06  5.41e-02  6.51e-01  
  8  +5.0000e-01  +6.2185e-01  1.22e-01  3.64e-04  1.97e-01  3.14e-06  2.99e-02  6.67e-01  
  9  +5.0000e-01  +5.8869e-01  8.87e-02  2.64e-04  1.43e-01  3.09e-06  1.34e-02  6.46e-01  
 10  +4.9999e-01  +5.7567e-01  7.57e-02  2.18e-04  1.18e-01  8.21e-06  2.85e-03  8.83e-01  
 11  +4.9964e-01  +5.6307e-01  6.34e-02  3.09e-05  1.68e-02  1.69e-04  1.04e-04  9.90e-01  
 12  +4.9781e-01  +5.5694e-01  5.91e-02  5.35e-06  2.91e-03  9.11e-04  1.71e-05  8.39e-01  
 13  +4.9787e-01  +5.5497e-01  5.71e-02  4.89e-06  2.66e-03  7.49e-04  1.56e-05  2.56e-01  
 14  +4.9775e-01  +5.5254e-01  5.48e-02  4.35e-06  2.37e-03  6.14e-04  1.39e-05  2.82e-01  
 15  +4.9790e-01  +5.5025e-01  5.24e-02  4.17e-06  2.26e-03  3.56e-04  1.33e-05  3.75e-01  
 16  +4.9730e-01  +5.4618e-01  4.89e-02  3.47e-06  1.89e-03  2.39e-04  1.11e-05  4.42e-01  
 17  +4.9698e-01  +5.4368e-01  4.67e-02  3.23e-06  1.76e-03  1.33e-04  1.04e-05  4.05e-01  
 18  +4.9507e-01  +5.3551e-01  4.04e-02  2.34e-06  1.27e-03  1.26e-04  7.57e-06  2.96e-01  
 19  +4.9261e-01  +5.2473e-01  3.21e-02  1.67e-06  9.06e-04  4.83e-05  5.49e-06  5.91e-01  
 20  +4.9167e-01  +5.2072e-01  2.91e-02  1.43e-06  7.79e-04  1.28e-05  4.77e-06  6.41e-01  
 21  +4.8882e-01  +5.0948e-01  2.07e-02  9.34e-07  5.07e-04  7.94e-06  3.18e-06  4.00e-01  
 22  +4.8864e-01  +5.0867e-01  2.00e-02  8.84e-07  4.80e-04  4.19e-06  3.01e-06  4.55e-01  
 23  +4.8430e-01  +4.9197e-01  7.67e-03  3.06e-07  1.66e-04  6.98e-07  1.09e-06  8.14e-01  
 24  +4.8372e-01  +4.8982e-01  6.10e-03  2.38e-07  1.29e-04  5.33e-07  8.54e-07  2.56e-01  
 25  +4.8366e-01  +4.8962e-01  5.95e-03  2.34e-07  1.27e-04  4.69e-07  8.50e-07  9.22e-02  
 26  +4.8335e-01  +4.8844e-01  5.08e-03  1.98e-07  1.08e-04  3.41e-07  7.22e-07  3.02e-01  
 27  +4.8269e-01  +4.8596e-01  3.27e-03  1.26e-07  6.83e-05  1.85e-07  4.61e-07  4.86e-01  
 28  +4.8245e-01  +4.8514e-01  2.69e-03  1.02e-07  5.54e-05  1.38e-07  3.73e-07  2.97e-01  
 29  +4.8155e-01  +4.8188e-01  3.33e-04  1.24e-08  6.75e-06  1.41e-08  4.63e-08  9.02e-01  
 30  +4.8142e-01  +4.8143e-01  8.94e-06  3.33e-10  1.81e-07  2.06e-10  1.25e-09  9.90e-01  
 31  +4.8142e-01  +4.8142e-01  8.94e-08  3.33e-12  1.81e-09  2.06e-12  1.25e-11  9.90e-01  
 32  +4.8142e-01  +4.8142e-01  8.96e-10  3.34e-14  1.82e-11  2.31e-14  1.39e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 959.6198ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:02 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:02 PM: Optimal value: 4.814e-01
(CVXPY) Sep 20 08:08:02 PM: Compilation took 1.718e-01 seconds
(CVXPY) Sep 20 08:08:02 PM: Solver (including time spent in interface) took 1.000e+00 seconds
Iteration: 8, Objective: 0.4814
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:02 PM: Your problem has 25099 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:02 PM: Finished problem compilation (took 1.726e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25099
  constraints   = 50099
  nnz(P)        = 0
  nnz(A)        = 412557
  cones (total) = 1
    : Nonnegative = 1,  numel = 50099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8091e-01  +5.4253e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3202e-01  +6.1431e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6038e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7628e+01  1.71e+01  4.71e-02  2.45e+01  5.21e-06  1.96e-01  4.44e-01  
  5  +5.0000e-01  +1.0970e+00  5.97e-01  1.78e-03  9.64e-01  2.25e-05  1.92e-01  2.05e-01  
  6  +5.0000e-01  +8.0950e-01  3.09e-01  9.24e-04  5.00e-01  9.86e-06  9.84e-02  6.45e-01  
  7  +5.0000e-01  +6.7080e-01  1.71e-01  5.10e-04  2.76e-01  4.67e-06  5.08e-02  6.66e-01  
  8  +5.0000e-01  +6.0033e-01  1.00e-01  2.99e-04  1.62e-01  3.21e-06  2.36e-02  6.14e-01  
  9  +5.0000e-01  +5.9308e-01  9.31e-02  2.77e-04  1.50e-01  3.82e-06  1.24e-02  6.10e-01  
 10  +4.9996e-01  +5.6486e-01  6.49e-02  1.64e-04  8.90e-02  2.09e-05  1.13e-03  9.49e-01  
 11  +4.9901e-01  +5.6219e-01  6.32e-02  1.52e-05  8.26e-03  4.50e-04  4.94e-05  9.57e-01  
 12  +4.9884e-01  +5.6007e-01  6.12e-02  1.10e-05  5.99e-03  4.85e-04  3.55e-05  4.41e-01  
 13  +4.9902e-01  +5.5744e-01  5.84e-02  8.57e-06  4.66e-03  3.17e-04  2.73e-05  6.38e-01  
 14  +4.9918e-01  +5.5672e-01  5.75e-02  8.07e-06  4.39e-03  2.21e-04  2.56e-05  3.69e-01  
 15  +4.9891e-01  +5.5548e-01  5.66e-02  6.29e-06  3.42e-03  2.46e-04  1.99e-05  3.14e-01  
 16  +4.9905e-01  +5.5384e-01  5.48e-02  5.10e-06  2.78e-03  3.44e-05  1.61e-05  9.90e-01  
 17  +4.9756e-01  +5.4734e-01  4.98e-02  2.92e-06  1.59e-03  4.06e-05  9.22e-06  5.78e-01  
 18  +4.9408e-01  +5.3229e-01  3.82e-02  1.98e-06  1.08e-03  2.42e-05  6.37e-06  4.65e-01  
 19  +4.9286e-01  +5.2726e-01  3.44e-02  1.75e-06  9.51e-04  1.66e-05  5.66e-06  2.73e-01  
 20  +4.9206e-01  +5.2419e-01  3.21e-02  1.60e-06  8.68e-04  7.75e-06  5.20e-06  4.61e-01  
 21  +4.9190e-01  +5.2359e-01  3.17e-02  1.57e-06  8.52e-04  6.94e-06  5.11e-06  9.53e-02  
 22  +4.9132e-01  +5.2126e-01  2.99e-02  1.46e-06  7.92e-04  5.94e-06  4.76e-06  1.42e-01  
 23  +4.8902e-01  +5.1196e-01  2.29e-02  1.05e-06  5.71e-04  3.82e-06  3.48e-06  3.65e-01  
 24  +4.8825e-01  +5.0884e-01  2.06e-02  8.96e-07  4.87e-04  5.17e-07  2.99e-06  8.39e-01  
 25  +4.8479e-01  +4.9506e-01  1.03e-02  4.22e-07  2.29e-04  2.00e-07  1.44e-06  6.59e-01  
 26  +4.8288e-01  +4.8753e-01  4.65e-03  1.84e-07  1.00e-04  8.21e-08  6.38e-07  6.47e-01  
 27  +4.8250e-01  +4.8598e-01  3.48e-03  1.35e-07  7.37e-05  4.36e-08  4.70e-07  9.10e-01  
 28  +4.8150e-01  +4.8219e-01  6.90e-04  2.67e-08  1.45e-05  8.44e-09  9.38e-08  8.79e-01  
 29  +4.8125e-01  +4.8126e-01  1.33e-05  5.13e-10  2.79e-07  1.62e-10  1.81e-09  9.82e-01  
 30  +4.8125e-01  +4.8125e-01  1.34e-07  5.17e-12  2.81e-09  1.63e-12  1.83e-11  9.90e-01  
 31  +4.8125e-01  +4.8125e-01  1.43e-09  5.53e-14  3.01e-11  1.87e-14  2.08e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 932.7871ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:03 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:03 PM: Optimal value: 4.812e-01
(CVXPY) Sep 20 08:08:03 PM: Compilation took 1.726e-01 seconds
(CVXPY) Sep 20 08:08:03 PM: Solver (including time spent in interface) took 9.741e-01 seconds
Iteration: 9, Objective: 0.4812
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:03 PM: Your problem has 25109 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:03 PM: Finished problem compilation (took 1.813e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25109
  constraints   = 50109
  nnz(P)        = 0
  nnz(A)        = 417504
  cones (total) = 1
    : Nonnegative = 1,  numel = 50109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8090e-01  +5.4253e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3202e-01  +6.1426e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6036e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7627e+01  1.71e+01  4.71e-02  2.45e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2435e+00  7.43e-01  2.22e-03  1.20e+00  2.24e-05  1.93e-01  1.65e-01  
  6  +5.0001e-01  +7.8375e-01  2.84e-01  8.47e-04  4.59e-01  7.01e-06  8.50e-02  6.90e-01  
  7  +5.0001e-01  +7.0115e-01  2.01e-01  6.00e-04  3.25e-01  4.55e-06  5.67e-02  5.00e-01  
  8  +5.0000e-01  +6.2756e-01  1.28e-01  3.81e-04  2.06e-01  3.15e-06  3.03e-02  5.53e-01  
  9  +5.0000e-01  +6.0866e-01  1.09e-01  3.24e-04  1.76e-01  3.23e-06  1.66e-02  5.68e-01  
 10  +4.9998e-01  +5.7063e-01  7.07e-02  1.98e-04  1.08e-01  1.03e-05  2.08e-03  9.62e-01  
 11  +4.9911e-01  +5.6808e-01  6.90e-02  1.51e-05  8.24e-03  4.07e-04  4.89e-05  9.80e-01  
 12  +4.9841e-01  +5.6451e-01  6.61e-02  8.63e-06  4.70e-03  6.21e-04  2.76e-05  4.87e-01  
 13  +4.9850e-01  +5.6404e-01  6.55e-02  8.50e-06  4.62e-03  5.65e-04  2.71e-05  1.01e-01  
 14  +4.9804e-01  +5.6129e-01  6.32e-02  6.52e-06  3.55e-03  6.13e-04  2.08e-05  3.17e-01  
 15  +4.9806e-01  +5.5942e-01  6.14e-02  5.78e-06  3.14e-03  4.81e-04  1.83e-05  3.43e-01  
 16  +4.9774e-01  +5.5665e-01  5.89e-02  4.85e-06  2.64e-03  4.04e-04  1.54e-05  3.55e-01  
 17  +4.9767e-01  +5.5547e-01  5.78e-02  4.73e-06  2.58e-03  3.36e-04  1.50e-05  1.59e-01  
 18  +4.9551e-01  +5.4267e-01  4.72e-02  2.82e-06  1.53e-03  1.31e-04  9.00e-06  8.51e-01  
 19  +4.9271e-01  +5.3008e-01  3.74e-02  2.00e-06  1.09e-03  7.87e-05  6.46e-06  4.42e-01  
 20  +4.9260e-01  +5.2959e-01  3.70e-02  1.98e-06  1.08e-03  6.73e-05  6.40e-06  1.15e-01  
 21  +4.9136e-01  +5.2424e-01  3.29e-02  1.69e-06  9.18e-04  4.90e-05  5.48e-06  2.75e-01  
 22  +4.9103e-01  +5.2290e-01  3.19e-02  1.60e-06  8.68e-04  3.47e-05  5.18e-06  2.76e-01  
 23  +4.9009e-01  +5.1897e-01  2.89e-02  1.39e-06  7.57e-04  1.70e-05  4.53e-06  4.71e-01  
 24  +4.8851e-01  +5.1235e-01  2.38e-02  1.10e-06  5.97e-04  1.09e-05  3.59e-06  3.57e-01  
 25  +4.8838e-01  +5.1175e-01  2.34e-02  1.04e-06  5.68e-04  6.35e-06  3.41e-06  4.17e-01  
 26  +4.8550e-01  +4.9997e-01  1.45e-02  6.02e-07  3.28e-04  9.11e-07  1.99e-06  8.33e-01  
 27  +4.8546e-01  +4.9980e-01  1.43e-02  5.98e-07  3.25e-04  8.26e-07  1.98e-06  1.05e-01  
 28  +4.8337e-01  +4.9132e-01  7.95e-03  3.17e-07  1.72e-04  2.23e-07  1.06e-06  7.99e-01  
 29  +4.8266e-01  +4.8852e-01  5.87e-03  2.31e-07  1.25e-04  1.46e-07  7.75e-07  4.11e-01  
 30  +4.8247e-01  +4.8773e-01  5.25e-03  2.06e-07  1.12e-04  8.48e-08  6.93e-07  7.12e-01  
 31  +4.8191e-01  +4.8557e-01  3.66e-03  1.42e-07  7.73e-05  5.85e-08  4.82e-07  3.37e-01  
 32  +4.8191e-01  +4.8551e-01  3.60e-03  1.42e-07  7.70e-05  5.55e-08  4.78e-07  1.27e-01  
 33  +4.8137e-01  +4.8345e-01  2.08e-03  8.09e-08  4.40e-05  3.08e-08  2.75e-07  5.51e-01  
 34  +4.8123e-01  +4.8291e-01  1.68e-03  6.50e-08  3.54e-05  2.15e-08  2.21e-07  7.90e-01  
 35  +4.8069e-01  +4.8089e-01  2.00e-04  7.71e-09  4.19e-06  2.54e-09  2.63e-08  9.13e-01  
 36  +4.8062e-01  +4.8063e-01  1.45e-05  5.53e-10  3.01e-07  1.94e-10  1.96e-09  9.31e-01  
 37  +4.8061e-01  +4.8061e-01  9.07e-07  3.46e-11  1.88e-08  1.25e-11  1.29e-10  9.69e-01  
 38  +4.8061e-01  +4.8061e-01  9.23e-09  3.52e-13  1.91e-10  1.27e-13  1.33e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1448178s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:04 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:04 PM: Optimal value: 4.806e-01
(CVXPY) Sep 20 08:08:04 PM: Compilation took 1.813e-01 seconds
(CVXPY) Sep 20 08:08:04 PM: Solver (including time spent in interface) took 1.185e+00 seconds
Iteration: 10, Objective: 0.4806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:05 PM: Your problem has 25119 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:05 PM: Finished problem compilation (took 1.830e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25119
  constraints   = 50119
  nnz(P)        = 0
  nnz(A)        = 423820
  cones (total) = 1
    : Nonnegative = 1,  numel = 50119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8090e-01  +5.4254e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3201e-01  +6.1422e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0906e-01  +1.6035e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7628e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2542e+00  7.54e-01  2.25e-03  1.22e+00  2.24e-05  1.93e-01  1.63e-01  
  6  +5.0001e-01  +7.7162e-01  2.72e-01  8.11e-04  4.40e-01  6.63e-06  8.17e-02  6.93e-01  
  7  +5.0001e-01  +6.8573e-01  1.86e-01  5.54e-04  3.01e-01  4.18e-06  5.16e-02  5.43e-01  
  8  +5.0000e-01  +6.2474e-01  1.25e-01  3.72e-04  2.02e-01  3.12e-06  2.75e-02  5.67e-01  
  9  +5.0000e-01  +5.9624e-01  9.62e-02  2.86e-04  1.55e-01  3.91e-06  1.03e-02  7.27e-01  
 10  +4.9995e-01  +5.8163e-01  8.17e-02  1.83e-04  9.95e-02  2.44e-05  1.00e-03  9.90e-01  
 11  +4.9944e-01  +5.7947e-01  8.00e-02  2.80e-05  1.53e-02  2.54e-04  9.20e-05  9.09e-01  
 12  +4.9921e-01  +5.7327e-01  7.41e-02  1.64e-05  8.91e-03  3.19e-04  5.27e-05  5.86e-01  
 13  +4.9882e-01  +5.6700e-01  6.82e-02  9.37e-06  5.10e-03  3.73e-04  2.98e-05  6.39e-01  
 14  +4.9844e-01  +5.6372e-01  6.53e-02  6.97e-06  3.80e-03  3.85e-04  2.21e-05  3.96e-01  
 15  +4.9864e-01  +5.6101e-01  6.24e-02  6.22e-06  3.39e-03  1.73e-04  1.97e-05  5.96e-01  
 16  +4.9850e-01  +5.5827e-01  5.98e-02  5.22e-06  2.84e-03  5.80e-05  1.65e-05  7.63e-01  
 17  +4.9762e-01  +5.5398e-01  5.64e-02  4.02e-06  2.19e-03  4.87e-05  1.27e-05  4.43e-01  
 18  +4.9748e-01  +5.5336e-01  5.59e-02  4.01e-06  2.18e-03  4.56e-05  1.27e-05  4.35e-02  
 19  +4.9619e-01  +5.4754e-01  5.13e-02  3.27e-06  1.78e-03  3.94e-05  1.04e-05  2.82e-01  
 20  +4.9354e-01  +5.3577e-01  4.22e-02  2.36e-06  1.28e-03  2.33e-05  7.61e-06  4.80e-01  
 21  +4.9249e-01  +5.3128e-01  3.88e-02  2.09e-06  1.14e-03  1.84e-05  6.76e-06  2.16e-01  
 22  +4.9238e-01  +5.3082e-01  3.84e-02  2.06e-06  1.12e-03  1.56e-05  6.69e-06  1.25e-01  
 23  +4.9009e-01  +5.2112e-01  3.10e-02  1.55e-06  8.41e-04  1.09e-05  5.07e-06  3.32e-01  
 24  +4.8975e-01  +5.1974e-01  3.00e-02  1.45e-06  7.91e-04  7.42e-06  4.77e-06  3.10e-01  
 25  +4.8805e-01  +5.1273e-01  2.47e-02  1.14e-06  6.21e-04  5.62e-06  3.78e-06  2.63e-01  
 26  +4.8736e-01  +5.0989e-01  2.25e-02  1.01e-06  5.49e-04  3.30e-06  3.35e-06  4.10e-01  
 27  +4.8533e-01  +5.0168e-01  1.64e-02  6.95e-07  3.78e-04  1.73e-06  2.34e-06  4.89e-01  
 28  +4.8471e-01  +4.9905e-01  1.43e-02  5.82e-07  3.17e-04  2.56e-07  1.96e-06  9.12e-01  
 29  +4.8225e-01  +4.8948e-01  7.23e-03  2.84e-07  1.54e-04  1.22e-07  9.78e-07  5.73e-01  
 30  +4.8215e-01  +4.8910e-01  6.94e-03  2.73e-07  1.49e-04  1.04e-07  9.53e-07  3.33e-01  
 31  +4.8135e-01  +4.8599e-01  4.64e-03  1.80e-07  9.79e-05  6.40e-08  6.37e-07  5.77e-01  
 32  +4.8087e-01  +4.8420e-01  3.33e-03  1.27e-07  6.93e-05  4.44e-08  4.53e-07  4.93e-01  
 33  +4.8041e-01  +4.8253e-01  2.12e-03  7.98e-08  4.34e-05  2.71e-08  2.87e-07  5.94e-01  
 34  +4.7988e-01  +4.8062e-01  7.33e-04  2.73e-08  1.48e-05  9.22e-09  1.00e-07  7.21e-01  
 35  +4.7973e-01  +4.8006e-01  3.27e-04  1.21e-08  6.59e-06  3.86e-09  4.47e-08  9.90e-01  
 36  +4.7960e-01  +4.7961e-01  5.19e-06  1.92e-10  1.04e-07  6.07e-11  7.13e-10  9.90e-01  
 37  +4.7960e-01  +4.7960e-01  5.19e-08  1.92e-12  1.04e-09  6.07e-13  7.13e-12  9.90e-01  
 38  +4.7960e-01  +4.7960e-01  5.23e-10  1.93e-14  1.05e-11  8.60e-15  9.95e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1502922s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:06 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:06 PM: Optimal value: 4.796e-01
(CVXPY) Sep 20 08:08:06 PM: Compilation took 1.830e-01 seconds
(CVXPY) Sep 20 08:08:06 PM: Solver (including time spent in interface) took 1.196e+00 seconds
Iteration: 11, Objective: 0.4796
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:06 PM: Your problem has 25129 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:06 PM: Finished problem compilation (took 1.882e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25129
  constraints   = 50129
  nnz(P)        = 0
  nnz(A)        = 428123
  cones (total) = 1
    : Nonnegative = 1,  numel = 50129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8089e-01  +5.4254e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3201e-01  +6.1419e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0906e-01  +1.6034e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7629e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2464e+00  7.46e-01  2.23e-03  1.21e+00  2.24e-05  1.93e-01  1.65e-01  
  6  +5.0001e-01  +8.0716e-01  3.07e-01  9.17e-04  4.97e-01  7.89e-06  9.13e-02  6.33e-01  
  7  +5.0001e-01  +6.9213e-01  1.92e-01  5.74e-04  3.11e-01  4.46e-06  5.37e-02  5.96e-01  
  8  +5.0000e-01  +6.4453e-01  1.45e-01  4.31e-04  2.34e-01  3.43e-06  3.30e-02  5.18e-01  
  9  +5.0000e-01  +6.1487e-01  1.15e-01  3.43e-04  1.86e-01  3.61e-06  1.73e-02  5.27e-01  
 10  +4.9999e-01  +5.9022e-01  9.02e-02  2.60e-04  1.41e-01  8.81e-06  3.54e-03  8.91e-01  
 11  +4.9925e-01  +5.7653e-01  7.73e-02  2.16e-05  1.18e-02  3.46e-04  7.03e-05  9.88e-01  
 12  +4.9879e-01  +5.7256e-01  7.38e-02  1.29e-05  7.03e-03  4.86e-04  4.15e-05  4.93e-01  
 13  +4.9809e-01  +5.6864e-01  7.05e-02  8.48e-06  4.62e-03  6.43e-04  2.71e-05  3.86e-01  
 14  +4.9775e-01  +5.6461e-01  6.69e-02  6.56e-06  3.57e-03  5.89e-04  2.09e-05  4.01e-01  
 15  +4.9806e-01  +5.6279e-01  6.47e-02  6.28e-06  3.42e-03  3.60e-04  1.99e-05  3.73e-01  
 16  +4.9733e-01  +5.5915e-01  6.18e-02  4.93e-06  2.69e-03  3.86e-04  1.57e-05  2.61e-01  
 17  +4.9723e-01  +5.5794e-01  6.07e-02  4.89e-06  2.66e-03  3.27e-04  1.55e-05  1.21e-01  
 18  +4.9544e-01  +5.4948e-01  5.40e-02  3.44e-06  1.87e-03  3.33e-04  1.10e-05  3.33e-01  
 19  +4.9430e-01  +5.4277e-01  4.85e-02  2.91e-06  1.58e-03  1.77e-04  9.32e-06  4.51e-01  
 20  +4.9348e-01  +5.3817e-01  4.47e-02  2.58e-06  1.41e-03  7.28e-05  8.31e-06  5.12e-01  
 21  +4.9065e-01  +5.2560e-01  3.49e-02  1.79e-06  9.76e-04  2.29e-05  5.84e-06  6.58e-01  
 22  +4.8913e-01  +5.1903e-01  2.99e-02  1.43e-06  7.77e-04  4.81e-06  4.68e-06  7.19e-01  
 23  +4.8649e-01  +5.0825e-01  2.18e-02  9.70e-07  5.28e-04  2.19e-06  3.22e-06  5.41e-01  
 24  +4.8464e-01  +5.0067e-01  1.60e-02  6.74e-07  3.67e-04  8.35e-07  2.25e-06  6.49e-01  
 25  +4.8435e-01  +4.9942e-01  1.51e-02  6.26e-07  3.41e-04  4.97e-07  2.10e-06  4.80e-01  
 26  +4.8347e-01  +4.9591e-01  1.24e-02  5.10e-07  2.78e-04  3.63e-07  1.72e-06  3.24e-01  
 27  +4.8285e-01  +4.9330e-01  1.05e-02  4.14e-07  2.26e-04  1.25e-07  1.40e-06  9.90e-01  
 28  +4.8135e-01  +4.8751e-01  6.16e-03  2.43e-07  1.32e-04  7.35e-08  8.27e-07  4.59e-01  
 29  +4.7990e-01  +4.8189e-01  1.99e-03  7.78e-08  4.24e-05  2.37e-08  2.68e-07  7.79e-01  
 30  +4.7943e-01  +4.8009e-01  6.64e-04  2.58e-08  1.41e-05  7.94e-09  8.94e-08  7.12e-01  
 31  +4.7928e-01  +4.7952e-01  2.39e-04  9.19e-09  5.00e-06  2.89e-09  3.19e-08  8.83e-01  
 32  +4.7919e-01  +4.7920e-01  1.19e-05  4.56e-10  2.48e-07  1.46e-10  1.58e-09  9.52e-01  
 33  +4.7919e-01  +4.7919e-01  1.23e-07  4.69e-12  2.55e-09  1.50e-12  1.63e-11  9.90e-01  
 34  +4.7919e-01  +4.7919e-01  1.23e-09  4.72e-14  2.57e-11  1.96e-14  2.10e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0430823s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:07 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:07 PM: Optimal value: 4.792e-01
(CVXPY) Sep 20 08:08:07 PM: Compilation took 1.882e-01 seconds
(CVXPY) Sep 20 08:08:07 PM: Solver (including time spent in interface) took 1.085e+00 seconds
Iteration: 12, Objective: 0.4792
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:08 PM: Your problem has 25139 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:08 PM: Finished problem compilation (took 1.996e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25139
  constraints   = 50139
  nnz(P)        = 0
  nnz(A)        = 432584
  cones (total) = 1
    : Nonnegative = 1,  numel = 50139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8089e-01  +5.4254e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3201e-01  +6.1416e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0906e-01  +1.6033e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2371e+00  7.37e-01  2.20e-03  1.19e+00  2.24e-05  1.93e-01  1.67e-01  
  6  +5.0001e-01  +8.1222e-01  3.12e-01  9.32e-04  5.06e-01  8.27e-06  9.32e-02  6.11e-01  
  7  +5.0000e-01  +6.6938e-01  1.69e-01  5.06e-04  2.75e-01  4.43e-06  4.88e-02  5.80e-01  
  8  +5.0000e-01  +6.3703e-01  1.37e-01  4.09e-04  2.22e-01  3.66e-06  3.03e-02  5.30e-01  
  9  +5.0000e-01  +6.1921e-01  1.19e-01  3.55e-04  1.93e-01  3.94e-06  1.72e-02  5.23e-01  
 10  +4.9999e-01  +5.9464e-01  9.47e-02  2.73e-04  1.48e-01  8.97e-06  3.58e-03  9.23e-01  
 11  +4.9931e-01  +5.7724e-01  7.79e-02  2.31e-05  1.26e-02  3.17e-04  7.54e-05  9.90e-01  
 12  +4.9890e-01  +5.7388e-01  7.50e-02  1.41e-05  7.68e-03  4.48e-04  4.53e-05  4.74e-01  
 13  +4.9880e-01  +5.6605e-01  6.72e-02  8.73e-06  4.76e-03  3.20e-04  2.77e-05  7.90e-01  
 14  +4.9838e-01  +5.6327e-01  6.49e-02  6.54e-06  3.56e-03  3.27e-04  2.07e-05  4.05e-01  
 15  +4.9837e-01  +5.6279e-01  6.44e-02  6.37e-06  3.47e-03  2.85e-04  2.02e-05  1.48e-01  
 16  +4.9777e-01  +5.5953e-01  6.18e-02  5.02e-06  2.73e-03  2.70e-04  1.59e-05  3.60e-01  
 17  +4.9771e-01  +5.5878e-01  6.11e-02  4.95e-06  2.69e-03  2.22e-04  1.57e-05  1.64e-01  
 18  +4.9701e-01  +5.5558e-01  5.86e-02  4.21e-06  2.29e-03  2.15e-04  1.34e-05  2.16e-01  
 19  +4.9682e-01  +5.5431e-01  5.75e-02  4.14e-06  2.25e-03  1.71e-04  1.31e-05  1.70e-01  
 20  +4.9488e-01  +5.4553e-01  5.07e-02  3.05e-06  1.66e-03  1.44e-04  9.77e-06  3.75e-01  
 21  +4.9386e-01  +5.4065e-01  4.68e-02  2.73e-06  1.49e-03  8.32e-05  8.78e-06  3.74e-01  
 22  +4.9324e-01  +5.3760e-01  4.44e-02  2.54e-06  1.38e-03  3.60e-05  8.21e-06  4.72e-01  
 23  +4.9110e-01  +5.2855e-01  3.74e-02  1.97e-06  1.07e-03  2.75e-05  6.43e-06  2.93e-01  
 24  +4.8982e-01  +5.2322e-01  3.34e-02  1.67e-06  9.11e-04  1.65e-05  5.48e-06  3.84e-01  
 25  +4.8661e-01  +5.0995e-01  2.33e-02  1.05e-06  5.71e-04  3.34e-06  3.49e-06  7.58e-01  
 26  +4.8212e-01  +4.9174e-01  9.62e-03  3.91e-07  2.13e-04  6.39e-07  1.33e-06  8.11e-01  
 27  +4.8195e-01  +4.9110e-01  9.14e-03  3.65e-07  1.99e-04  4.88e-07  1.24e-06  2.90e-01  
 28  +4.8189e-01  +4.9080e-01  8.91e-03  3.56e-07  1.94e-04  3.95e-07  1.21e-06  2.29e-01  
 29  +4.8082e-01  +4.8669e-01  5.87e-03  2.30e-07  1.25e-04  2.42e-07  7.87e-07  4.13e-01  
 30  +4.8059e-01  +4.8579e-01  5.20e-03  2.02e-07  1.10e-04  1.77e-07  6.93e-07  3.36e-01  
 31  +4.7966e-01  +4.8224e-01  2.58e-03  9.90e-08  5.39e-05  4.98e-08  3.42e-07  8.33e-01  
 32  +4.7885e-01  +4.7921e-01  3.57e-04  1.36e-08  7.39e-06  5.86e-09  4.75e-08  9.14e-01  
 33  +4.7872e-01  +4.7873e-01  9.90e-06  3.76e-10  2.05e-07  1.57e-10  1.32e-09  9.75e-01  
 34  +4.7871e-01  +4.7871e-01  9.91e-08  3.76e-12  2.05e-09  1.57e-12  1.32e-11  9.90e-01  
 35  +4.7871e-01  +4.7871e-01  9.92e-10  3.77e-14  2.05e-11  1.73e-14  1.45e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0276936s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:09 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:09 PM: Optimal value: 4.787e-01
(CVXPY) Sep 20 08:08:09 PM: Compilation took 1.996e-01 seconds
(CVXPY) Sep 20 08:08:09 PM: Solver (including time spent in interface) took 1.069e+00 seconds
Iteration: 13, Objective: 0.4787
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:09 PM: Your problem has 25149 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:09 PM: Finished problem compilation (took 1.872e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25149
  constraints   = 50149
  nnz(P)        = 0
  nnz(A)        = 435043
  cones (total) = 1
    : Nonnegative = 1,  numel = 50149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8089e-01  +5.4254e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3200e-01  +6.1413e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0906e-01  +1.6032e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0002e-01  +1.3962e+00  8.96e-01  2.68e-03  1.45e+00  2.23e-05  1.94e-01  1.37e-01  
  6  +5.0001e-01  +8.2910e-01  3.29e-01  9.83e-04  5.33e-01  7.18e-06  9.29e-02  5.98e-01  
  7  +5.0001e-01  +6.9601e-01  1.96e-01  5.85e-04  3.18e-01  4.03e-06  5.41e-02  5.81e-01  
  8  +5.0000e-01  +6.4316e-01  1.43e-01  4.27e-04  2.32e-01  3.07e-06  3.21e-02  5.35e-01  
  9  +5.0000e-01  +6.1087e-01  1.11e-01  3.30e-04  1.79e-01  3.07e-06  1.31e-02  7.74e-01  
 10  +4.9998e-01  +5.8750e-01  8.75e-02  2.30e-04  1.25e-01  1.35e-05  1.75e-03  8.95e-01  
 11  +4.9912e-01  +5.8352e-01  8.44e-02  1.70e-05  9.24e-03  4.01e-04  5.45e-05  9.70e-01  
 12  +4.9854e-01  +5.7613e-01  7.76e-02  9.50e-06  5.18e-03  5.35e-04  3.02e-05  5.67e-01  
 13  +4.9804e-01  +5.7180e-01  7.38e-02  7.14e-06  3.89e-03  5.71e-04  2.26e-05  3.41e-01  
 14  +4.9810e-01  +5.7109e-01  7.30e-02  7.11e-06  3.87e-03  5.22e-04  2.25e-05  6.94e-02  
 15  +4.9767e-01  +5.6806e-01  7.04e-02  5.97e-06  3.25e-03  5.23e-04  1.89e-05  2.31e-01  
 16  +4.9766e-01  +5.6491e-01  6.73e-02  5.40e-06  2.94e-03  3.73e-04  1.71e-05  3.41e-01  
 17  +4.9724e-01  +5.5732e-01  6.01e-02  4.40e-06  2.40e-03  1.00e-04  1.39e-05  7.45e-01  
 18  +4.9505e-01  +5.4694e-01  5.19e-02  3.09e-06  1.69e-03  7.74e-05  9.86e-06  4.62e-01  
 19  +4.9308e-01  +5.3807e-01  4.50e-02  2.49e-06  1.36e-03  4.68e-05  8.01e-06  4.00e-01  
 20  +4.9281e-01  +5.3676e-01  4.40e-02  2.42e-06  1.32e-03  3.38e-05  7.79e-06  2.32e-01  
 21  +4.9067e-01  +5.2774e-01  3.71e-02  1.89e-06  1.03e-03  2.65e-05  6.15e-06  2.64e-01  
 22  +4.8957e-01  +5.2316e-01  3.36e-02  1.64e-06  8.94e-04  1.70e-05  5.36e-06  3.46e-01  
 23  +4.8841e-01  +5.1835e-01  2.99e-02  1.41e-06  7.67e-04  1.22e-05  4.62e-06  2.84e-01  
 24  +4.8736e-01  +5.1391e-01  2.66e-02  1.20e-06  6.51e-04  5.63e-06  3.94e-06  5.16e-01  
 25  +4.8526e-01  +5.0555e-01  2.03e-02  8.69e-07  4.73e-04  3.21e-06  2.89e-06  4.34e-01  
 26  +4.8312e-01  +4.9714e-01  1.40e-02  5.68e-07  3.09e-04  1.58e-06  1.92e-06  5.29e-01  
 27  +4.8137e-01  +4.9040e-01  9.03e-03  3.48e-07  1.89e-04  5.14e-07  1.19e-06  7.13e-01  
 28  +4.8045e-01  +4.8682e-01  6.38e-03  2.38e-07  1.30e-04  8.10e-08  8.26e-07  9.90e-01  
 29  +4.7902e-01  +4.8170e-01  2.69e-03  9.84e-08  5.36e-05  3.39e-08  3.49e-07  6.24e-01  
 30  +4.7825e-01  +4.7895e-01  6.98e-04  2.52e-08  1.38e-05  8.63e-09  9.07e-08  9.90e-01  
 31  +4.7796e-01  +4.7798e-01  1.10e-05  3.96e-10  2.16e-07  1.35e-10  1.43e-09  9.90e-01  
 32  +4.7796e-01  +4.7796e-01  1.10e-07  3.96e-12  2.16e-09  1.35e-12  1.43e-11  9.90e-01  
 33  +4.7796e-01  +4.7796e-01  1.11e-09  3.98e-14  2.17e-11  1.65e-14  1.74e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 966.5198ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:10 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:10 PM: Optimal value: 4.780e-01
(CVXPY) Sep 20 08:08:10 PM: Compilation took 1.872e-01 seconds
(CVXPY) Sep 20 08:08:10 PM: Solver (including time spent in interface) took 1.010e+00 seconds
Iteration: 14, Objective: 0.4780
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:10 PM: Your problem has 25159 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:11 PM: Finished problem compilation (took 1.824e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25159
  constraints   = 50159
  nnz(P)        = 0
  nnz(A)        = 438665
  cones (total) = 1
    : Nonnegative = 1,  numel = 50159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8089e-01  +5.4253e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3201e-01  +6.1414e+02  6.14e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0906e-01  +1.6032e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7628e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4565e+00  9.56e-01  2.86e-03  1.55e+00  2.22e-05  1.94e-01  1.28e-01  
  6  +5.0001e-01  +8.3485e-01  3.35e-01  1.00e-03  5.43e-01  6.91e-06  9.31e-02  5.87e-01  
  7  +5.0001e-01  +6.9463e-01  1.95e-01  5.81e-04  3.15e-01  3.74e-06  5.30e-02  6.19e-01  
  8  +5.0001e-01  +6.4683e-01  1.47e-01  4.38e-04  2.38e-01  2.92e-06  3.26e-02  5.15e-01  
  9  +5.0000e-01  +6.1466e-01  1.15e-01  3.42e-04  1.86e-01  2.97e-06  1.49e-02  6.73e-01  
 10  +4.9998e-01  +5.8188e-01  8.19e-02  2.16e-04  1.17e-01  1.20e-05  1.66e-03  9.90e-01  
 11  +4.9922e-01  +5.7823e-01  7.90e-02  1.61e-05  8.77e-03  3.57e-04  5.16e-05  9.72e-01  
 12  +4.9862e-01  +5.7339e-01  7.48e-02  9.13e-06  4.98e-03  5.17e-04  2.90e-05  5.25e-01  
 13  +4.9843e-01  +5.6897e-01  7.05e-02  7.20e-06  3.92e-03  4.28e-04  2.27e-05  4.48e-01  
 14  +4.9855e-01  +5.6619e-01  6.76e-02  6.51e-06  3.55e-03  2.59e-04  2.05e-05  4.52e-01  
 15  +4.9824e-01  +5.6302e-01  6.48e-02  5.30e-06  2.89e-03  1.89e-04  1.67e-05  4.88e-01  
 16  +4.9817e-01  +5.6242e-01  6.43e-02  5.26e-06  2.87e-03  1.73e-04  1.66e-05  7.64e-02  
 17  +4.9633e-01  +5.5362e-01  5.73e-02  3.44e-06  1.87e-03  1.67e-04  1.09e-05  4.89e-01  
 18  +4.9429e-01  +5.4331e-01  4.90e-02  2.88e-06  1.57e-03  4.67e-05  9.23e-06  5.99e-01  
 19  +4.9266e-01  +5.3624e-01  4.36e-02  2.42e-06  1.32e-03  2.25e-05  7.82e-06  4.75e-01  
 20  +4.9064e-01  +5.2784e-01  3.72e-02  1.91e-06  1.04e-03  1.51e-05  6.24e-06  3.53e-01  
 21  +4.9018e-01  +5.2591e-01  3.57e-02  1.78e-06  9.71e-04  6.78e-06  5.83e-06  4.89e-01  
 22  +4.8699e-01  +5.1303e-01  2.60e-02  1.19e-06  6.49e-04  4.24e-06  3.96e-06  4.04e-01  
 23  +4.8537e-01  +5.0659e-01  2.12e-02  9.12e-07  4.96e-04  2.03e-06  3.05e-06  5.38e-01  
 24  +4.8398e-01  +5.0096e-01  1.70e-02  6.80e-07  3.71e-04  1.14e-07  2.29e-06  9.90e-01  
 25  +4.8186e-01  +4.9296e-01  1.11e-02  4.30e-07  2.34e-04  1.01e-07  1.47e-06  6.70e-01  
 26  +4.7913e-01  +4.8288e-01  3.74e-03  1.39e-07  7.55e-05  3.70e-08  4.92e-07  7.67e-01  
 27  +4.7804e-01  +4.7892e-01  8.81e-04  3.20e-08  1.74e-05  1.06e-08  1.15e-07  9.90e-01  
 28  +4.7769e-01  +4.7773e-01  3.29e-05  1.19e-09  6.48e-07  3.97e-10  4.32e-09  9.67e-01  
 29  +4.7768e-01  +4.7768e-01  3.30e-07  1.19e-11  6.49e-09  3.98e-12  4.33e-11  9.90e-01  
 30  +4.7768e-01  +4.7768e-01  3.31e-09  1.20e-13  6.52e-11  4.62e-14  5.00e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 860.9908ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:12 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:12 PM: Optimal value: 4.777e-01
(CVXPY) Sep 20 08:08:12 PM: Compilation took 1.824e-01 seconds
(CVXPY) Sep 20 08:08:12 PM: Solver (including time spent in interface) took 9.039e-01 seconds
Iteration: 15, Objective: 0.4777
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:12 PM: Your problem has 25169 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:12 PM: Finished problem compilation (took 1.816e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25169
  constraints   = 50169
  nnz(P)        = 0
  nnz(A)        = 442990
  cones (total) = 1
    : Nonnegative = 1,  numel = 50169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8088e-01  +5.4254e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3200e-01  +6.1406e+02  6.14e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6030e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7628e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4479e+00  9.48e-01  2.83e-03  1.53e+00  2.23e-05  1.94e-01  1.30e-01  
  6  +5.0001e-01  +8.4516e-01  3.45e-01  1.03e-03  5.59e-01  7.23e-06  9.52e-02  5.80e-01  
  7  +5.0001e-01  +7.1138e-01  2.11e-01  6.31e-04  3.43e-01  4.02e-06  5.65e-02  6.24e-01  
  8  +5.0001e-01  +6.5997e-01  1.60e-01  4.78e-04  2.59e-01  3.11e-06  3.57e-02  4.99e-01  
  9  +5.0000e-01  +6.2296e-01  1.23e-01  3.67e-04  1.99e-01  3.08e-06  1.73e-02  6.15e-01  
 10  +4.9999e-01  +5.9211e-01  9.21e-02  2.57e-04  1.40e-01  9.04e-06  2.56e-03  9.90e-01  
 11  +4.9901e-01  +5.8566e-01  8.66e-02  1.41e-05  7.70e-03  4.54e-04  4.52e-05  9.84e-01  
 12  +4.9792e-01  +5.7868e-01  8.08e-02  7.45e-06  4.06e-03  7.25e-04  2.37e-05  5.09e-01  
 13  +4.9833e-01  +5.7386e-01  7.55e-02  6.89e-06  3.76e-03  4.03e-04  2.18e-05  4.26e-01  
 14  +4.9838e-01  +5.7253e-01  7.42e-02  6.76e-06  3.68e-03  3.44e-04  2.13e-05  1.40e-01  
 15  +4.9776e-01  +5.6857e-01  7.08e-02  5.41e-06  2.95e-03  3.49e-04  1.70e-05  2.82e-01  
 16  +4.9768e-01  +5.6613e-01  6.85e-02  5.18e-06  2.82e-03  2.52e-04  1.63e-05  2.58e-01  
 17  +4.9742e-01  +5.6407e-01  6.66e-02  4.94e-06  2.69e-03  2.09e-04  1.56e-05  1.82e-01  
 18  +4.9425e-01  +5.4874e-01  5.45e-02  2.91e-06  1.59e-03  2.05e-04  9.29e-06  4.76e-01  
 19  +4.9413e-01  +5.4795e-01  5.38e-02  2.90e-06  1.58e-03  1.86e-04  9.24e-06  6.08e-02  
 20  +4.9197e-01  +5.3787e-01  4.59e-02  2.36e-06  1.29e-03  1.30e-04  7.62e-06  2.87e-01  
 21  +4.9055e-01  +5.3117e-01  4.06e-02  2.03e-06  1.10e-03  7.71e-05  6.60e-06  3.60e-01  
 22  +4.8961e-01  +5.2692e-01  3.73e-02  1.81e-06  9.88e-04  5.33e-05  5.94e-06  2.83e-01  
 23  +4.8770e-01  +5.1879e-01  3.11e-02  1.44e-06  7.84e-04  3.08e-05  4.76e-06  4.02e-01  
 24  +4.8633e-01  +5.1291e-01  2.66e-02  1.18e-06  6.45e-04  1.68e-05  3.95e-06  4.36e-01  
 25  +4.8202e-01  +4.9553e-01  1.35e-02  5.49e-07  2.99e-04  3.04e-06  1.88e-06  7.94e-01  
 26  +4.8186e-01  +4.9493e-01  1.31e-02  5.27e-07  2.87e-04  2.66e-06  1.80e-06  1.38e-01  
 27  +4.7965e-01  +4.8650e-01  6.85e-03  2.58e-07  1.41e-04  1.01e-07  9.07e-07  9.90e-01  
 28  +4.7760e-01  +4.7906e-01  1.46e-03  5.33e-08  2.91e-05  1.77e-08  1.93e-07  9.88e-01  
 29  +4.7721e-01  +4.7767e-01  4.67e-04  1.70e-08  9.27e-06  5.67e-09  6.20e-08  7.24e-01  
 30  +4.7702e-01  +4.7703e-01  6.28e-06  2.28e-10  1.24e-07  7.59e-11  8.36e-10  9.90e-01  
 31  +4.7702e-01  +4.7702e-01  6.28e-08  2.28e-12  1.24e-09  7.59e-13  8.36e-12  9.90e-01  
 32  +4.7702e-01  +4.7702e-01  6.30e-10  2.29e-14  1.25e-11  8.74e-15  9.57e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 914.536ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:13 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:13 PM: Optimal value: 4.770e-01
(CVXPY) Sep 20 08:08:13 PM: Compilation took 1.816e-01 seconds
(CVXPY) Sep 20 08:08:13 PM: Solver (including time spent in interface) took 9.580e-01 seconds
Iteration: 16, Objective: 0.4770
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:13 PM: Your problem has 25179 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:13 PM: Finished problem compilation (took 1.950e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25179
  constraints   = 50179
  nnz(P)        = 0
  nnz(A)        = 447535
  cones (total) = 1
    : Nonnegative = 1,  numel = 50179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8087e-01  +5.4256e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3199e-01  +6.1398e+02  6.13e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6028e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7631e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4597e+00  9.60e-01  2.87e-03  1.55e+00  2.23e-05  1.94e-01  1.29e-01  
  6  +5.0001e-01  +8.4984e-01  3.50e-01  1.05e-03  5.67e-01  7.29e-06  9.58e-02  5.72e-01  
  7  +5.0001e-01  +7.1382e-01  2.14e-01  6.39e-04  3.47e-01  4.10e-06  5.66e-02  6.19e-01  
  8  +5.0000e-01  +6.4741e-01  1.47e-01  4.40e-04  2.39e-01  3.18e-06  3.18e-02  5.27e-01  
  9  +5.0000e-01  +6.2471e-01  1.25e-01  3.71e-04  2.02e-01  3.48e-06  1.35e-02  7.69e-01  
 10  +4.9996e-01  +5.9059e-01  9.06e-02  2.12e-04  1.15e-01  1.97e-05  1.24e-03  9.58e-01  
 11  +4.9857e-01  +5.8465e-01  8.61e-02  1.09e-05  5.92e-03  6.45e-04  3.48e-05  9.72e-01  
 12  +4.9838e-01  +5.8161e-01  8.32e-02  9.14e-06  4.98e-03  6.32e-04  2.91e-05  2.65e-01  
 13  +4.9867e-01  +5.7460e-01  7.59e-02  7.92e-06  4.32e-03  2.80e-04  2.51e-05  5.93e-01  
 14  +4.9859e-01  +5.7193e-01  7.33e-02  7.27e-06  3.97e-03  1.98e-04  2.30e-05  3.49e-01  
 15  +4.9816e-01  +5.6881e-01  7.06e-02  6.11e-06  3.33e-03  1.80e-04  1.93e-05  3.04e-01  
 16  +4.9813e-01  +5.6827e-01  7.01e-02  5.97e-06  3.25e-03  1.58e-04  1.88e-05  1.41e-01  
 17  +4.9761e-01  +5.6550e-01  6.79e-02  5.13e-06  2.79e-03  1.51e-04  1.62e-05  2.32e-01  
 18  +4.9748e-01  +5.6471e-01  6.72e-02  5.06e-06  2.76e-03  1.39e-04  1.60e-05  7.20e-02  
 19  +4.9655e-01  +5.5979e-01  6.32e-02  4.39e-06  2.39e-03  9.93e-05  1.39e-05  3.54e-01  
 20  +4.9404e-01  +5.4803e-01  5.40e-02  3.13e-06  1.71e-03  8.07e-05  1.00e-05  3.93e-01  
 21  +4.9340e-01  +5.4490e-01  5.15e-02  2.95e-06  1.61e-03  5.97e-05  9.47e-06  2.22e-01  
 22  +4.9133e-01  +5.3566e-01  4.43e-02  2.37e-06  1.29e-03  4.29e-05  7.67e-06  3.08e-01  
 23  +4.9075e-01  +5.3314e-01  4.24e-02  2.21e-06  1.21e-03  3.45e-05  7.19e-06  1.87e-01  
 24  +4.8902e-01  +5.2564e-01  3.66e-02  1.81e-06  9.89e-04  2.35e-05  5.94e-06  3.21e-01  
 25  +4.8753e-01  +5.1915e-01  3.16e-02  1.49e-06  8.11e-04  1.20e-05  4.90e-06  4.68e-01  
 26  +4.8643e-01  +5.1456e-01  2.81e-02  1.28e-06  6.95e-04  6.90e-06  4.23e-06  4.12e-01  
 27  +4.8451e-01  +5.0668e-01  2.22e-02  9.61e-07  5.24e-04  4.08e-06  3.22e-06  4.13e-01  
 28  +4.8193e-01  +4.9622e-01  1.43e-02  5.83e-07  3.18e-04  1.51e-06  1.98e-06  6.43e-01  
 29  +4.8176e-01  +4.9557e-01  1.38e-02  5.59e-07  3.04e-04  1.36e-06  1.90e-06  1.15e-01  
 30  +4.8015e-01  +4.8903e-01  8.88e-03  3.43e-07  1.87e-04  1.07e-07  1.18e-06  9.90e-01  
 31  +4.7870e-01  +4.8361e-01  4.91e-03  1.86e-07  1.01e-04  5.91e-08  6.53e-07  5.77e-01  
 32  +4.7756e-01  +4.7943e-01  1.87e-03  6.91e-08  3.76e-05  2.25e-08  2.48e-07  9.90e-01  
 33  +4.7688e-01  +4.7703e-01  1.47e-04  5.35e-09  2.92e-06  1.77e-09  1.95e-08  9.31e-01  
 34  +4.7682e-01  +4.7682e-01  1.54e-06  5.61e-11  3.06e-08  1.86e-11  2.05e-10  9.90e-01  
 35  +4.7682e-01  +4.7682e-01  1.54e-08  5.61e-13  3.06e-10  1.86e-13  2.05e-12  9.90e-01  
 36  +4.7682e-01  +4.7682e-01  1.55e-10  5.65e-15  3.07e-12  2.39e-15  2.61e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0353744s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:14 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:14 PM: Optimal value: 4.768e-01
(CVXPY) Sep 20 08:08:14 PM: Compilation took 1.950e-01 seconds
(CVXPY) Sep 20 08:08:14 PM: Solver (including time spent in interface) took 1.078e+00 seconds
Iteration: 17, Objective: 0.4768
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:14 PM: Your problem has 25189 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:15 PM: Finished problem compilation (took 2.009e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25189
  constraints   = 50189
  nnz(P)        = 0
  nnz(A)        = 451091
  cones (total) = 1
    : Nonnegative = 1,  numel = 50189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8086e-01  +5.4256e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3198e-01  +6.1391e+02  6.13e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6025e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7631e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4430e+00  9.43e-01  2.82e-03  1.52e+00  2.23e-05  1.94e-01  1.31e-01  
  6  +5.0001e-01  +8.4353e-01  3.44e-01  1.03e-03  5.57e-01  7.28e-06  9.46e-02  5.78e-01  
  7  +5.0001e-01  +7.2272e-01  2.23e-01  6.65e-04  3.61e-01  4.46e-06  5.89e-02  5.56e-01  
  8  +5.0000e-01  +6.4402e-01  1.44e-01  4.30e-04  2.34e-01  3.32e-06  3.04e-02  5.77e-01  
  9  +5.0000e-01  +6.2653e-01  1.27e-01  3.77e-04  2.05e-01  4.08e-06  1.34e-02  7.08e-01  
 10  +4.9997e-01  +6.0329e-01  1.03e-01  2.58e-04  1.40e-01  1.86e-05  1.71e-03  9.43e-01  
 11  +4.9842e-01  +5.9465e-01  9.62e-02  1.24e-05  6.74e-03  7.15e-04  3.97e-05  9.78e-01  
 12  +4.9798e-01  +5.8832e-01  9.03e-02  9.29e-06  5.07e-03  7.28e-04  2.97e-05  3.61e-01  
 13  +4.9812e-01  +5.8551e-01  8.74e-02  8.90e-06  4.85e-03  6.04e-04  2.83e-05  1.79e-01  
 14  +4.9758e-01  +5.8020e-01  8.26e-02  7.02e-06  3.83e-03  5.91e-04  2.23e-05  3.21e-01  
 15  +4.9720e-01  +5.7572e-01  7.85e-02  6.09e-06  3.32e-03  5.08e-04  1.93e-05  2.70e-01  
 16  +4.9704e-01  +5.7204e-01  7.50e-02  5.57e-06  3.04e-03  3.77e-04  1.77e-05  2.90e-01  
 17  +4.9686e-01  +5.6830e-01  7.14e-02  5.31e-06  2.89e-03  2.40e-04  1.68e-05  3.12e-01  
 18  +4.9444e-01  +5.5629e-01  6.18e-02  3.67e-06  2.00e-03  2.27e-04  1.17e-05  3.66e-01  
 19  +4.9162e-01  +5.4059e-01  4.90e-02  2.73e-06  1.49e-03  6.81e-05  8.87e-06  6.11e-01  
 20  +4.9060e-01  +5.3584e-01  4.52e-02  2.43e-06  1.32e-03  5.16e-05  7.92e-06  2.44e-01  
 21  +4.9031e-01  +5.3406e-01  4.37e-02  2.30e-06  1.25e-03  2.62e-05  7.52e-06  4.25e-01  
 22  +4.8819e-01  +5.2484e-01  3.67e-02  1.82e-06  9.91e-04  1.85e-05  5.99e-06  3.09e-01  
 23  +4.8662e-01  +5.1814e-01  3.15e-02  1.49e-06  8.11e-04  1.22e-05  4.94e-06  3.45e-01  
 24  +4.8506e-01  +5.1124e-01  2.62e-02  1.15e-06  6.25e-04  1.31e-07  3.83e-06  9.27e-01  
 25  +4.8445e-01  +5.0875e-01  2.43e-02  1.05e-06  5.73e-04  1.40e-07  3.52e-06  2.03e-01  
 26  +4.8134e-01  +4.9617e-01  1.48e-02  6.15e-07  3.35e-04  9.57e-08  2.10e-06  5.04e-01  
 27  +4.8112e-01  +4.9529e-01  1.42e-02  5.83e-07  3.18e-04  9.56e-08  1.99e-06  1.08e-01  
 28  +4.8082e-01  +4.9392e-01  1.31e-02  5.32e-07  2.90e-04  1.13e-07  1.82e-06  4.66e-01  
 29  +4.7942e-01  +4.8838e-01  8.96e-03  3.57e-07  1.95e-04  8.20e-08  1.24e-06  4.46e-01  
 30  +4.7782e-01  +4.8199e-01  4.17e-03  1.63e-07  8.87e-05  4.85e-08  5.71e-07  9.90e-01  
 31  +4.7683e-01  +4.7834e-01  1.51e-03  5.66e-08  3.09e-05  1.82e-08  2.04e-07  9.90e-01  
 32  +4.7649e-01  +4.7712e-01  6.30e-04  2.33e-08  1.27e-05  7.61e-09  8.50e-08  6.27e-01  
 33  +4.7631e-01  +4.7649e-01  1.77e-04  6.51e-09  3.55e-06  2.10e-09  2.39e-08  9.90e-01  
 34  +4.7624e-01  +4.7624e-01  2.24e-06  8.20e-11  4.47e-08  2.65e-11  3.02e-10  9.88e-01  
 35  +4.7624e-01  +4.7624e-01  2.24e-08  8.20e-13  4.47e-10  2.65e-13  3.02e-12  9.90e-01  
 36  +4.7624e-01  +4.7624e-01  2.27e-10  8.34e-15  4.53e-12  4.50e-15  4.99e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0451946s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:16 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:16 PM: Optimal value: 4.762e-01
(CVXPY) Sep 20 08:08:16 PM: Compilation took 2.009e-01 seconds
(CVXPY) Sep 20 08:08:16 PM: Solver (including time spent in interface) took 1.090e+00 seconds
Iteration: 18, Objective: 0.4762
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:16 PM: Your problem has 25199 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:16 PM: Finished problem compilation (took 2.020e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25199
  constraints   = 50199
  nnz(P)        = 0
  nnz(A)        = 457792
  cones (total) = 1
    : Nonnegative = 1,  numel = 50199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8086e-01  +5.4256e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3198e-01  +6.1386e+02  6.13e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6024e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0002e-01  +1.3664e+00  8.66e-01  2.59e-03  1.40e+00  2.24e-05  1.93e-01  1.44e-01  
  6  +5.0001e-01  +8.7212e-01  3.72e-01  1.11e-03  6.04e-01  8.68e-06  1.02e-01  5.52e-01  
  7  +5.0001e-01  +6.9973e-01  2.00e-01  5.97e-04  3.24e-01  4.38e-06  5.33e-02  6.59e-01  
  8  +5.0000e-01  +6.5277e-01  1.53e-01  4.56e-04  2.48e-01  3.58e-06  2.94e-02  6.17e-01  
  9  +5.0000e-01  +6.2490e-01  1.25e-01  3.71e-04  2.02e-01  4.93e-06  1.05e-02  7.69e-01  
 10  +4.9993e-01  +6.0131e-01  1.01e-01  1.91e-04  1.04e-01  3.53e-05  8.84e-04  9.90e-01  
 11  +4.9935e-01  +5.9841e-01  9.91e-02  3.11e-05  1.70e-02  2.93e-04  1.02e-04  8.85e-01  
 12  +4.9915e-01  +5.8543e-01  8.63e-02  1.62e-05  8.87e-03  3.05e-04  5.21e-05  7.77e-01  
 13  +4.9889e-01  +5.8281e-01  8.39e-02  1.21e-05  6.59e-03  3.42e-04  3.85e-05  3.72e-01  
 14  +4.9880e-01  +5.7781e-01  7.90e-02  8.78e-06  4.79e-03  2.18e-04  2.77e-05  7.08e-01  
 15  +4.9859e-01  +5.7538e-01  7.68e-02  7.26e-06  3.96e-03  1.54e-04  2.28e-05  5.17e-01  
 16  +4.9815e-01  +5.7282e-01  7.47e-02  6.10e-06  3.33e-03  1.29e-04  1.92e-05  3.75e-01  
 17  +4.9787e-01  +5.7112e-01  7.32e-02  5.78e-06  3.15e-03  9.12e-05  1.82e-05  3.15e-01  
 18  +4.9751e-01  +5.6934e-01  7.18e-02  5.45e-06  2.98e-03  7.77e-05  1.72e-05  1.90e-01  
 19  +4.9448e-01  +5.5542e-01  6.09e-02  3.41e-06  1.86e-03  7.71e-05  1.08e-05  4.47e-01  
 20  +4.9230e-01  +5.4552e-01  5.32e-02  2.92e-06  1.59e-03  4.37e-05  9.40e-06  3.57e-01  
 21  +4.9103e-01  +5.3999e-01  4.90e-02  2.61e-06  1.42e-03  3.24e-05  8.47e-06  2.39e-01  
 22  +4.9023e-01  +5.3642e-01  4.62e-02  2.42e-06  1.32e-03  1.75e-05  7.89e-06  3.92e-01  
 23  +4.8761e-01  +5.2540e-01  3.78e-02  1.85e-06  1.01e-03  9.75e-06  6.12e-06  4.30e-01  
 24  +4.8453e-01  +5.1257e-01  2.80e-02  1.27e-06  6.92e-04  3.11e-06  4.26e-06  6.54e-01  
 25  +4.8076e-01  +4.9713e-01  1.64e-02  6.74e-07  3.67e-04  3.52e-08  2.30e-06  9.90e-01  
 26  +4.8016e-01  +4.9483e-01  1.47e-02  5.93e-07  3.23e-04  4.74e-08  2.03e-06  2.19e-01  
 27  +4.8006e-01  +4.9444e-01  1.44e-02  5.80e-07  3.16e-04  6.61e-08  1.99e-06  1.84e-01  
 28  +4.7852e-01  +4.8857e-01  1.00e-02  3.94e-07  2.15e-04  5.82e-08  1.37e-06  4.29e-01  
 29  +4.7842e-01  +4.8814e-01  9.71e-03  3.78e-07  2.06e-04  7.22e-08  1.32e-06  3.04e-01  
 30  +4.7673e-01  +4.8181e-01  5.08e-03  1.93e-07  1.05e-04  3.99e-08  6.88e-07  5.33e-01  
 31  +4.7602e-01  +4.7909e-01  3.07e-03  1.15e-07  6.25e-05  3.38e-08  4.14e-07  8.75e-01  
 32  +4.7513e-01  +4.7591e-01  7.82e-04  2.88e-08  1.57e-05  8.65e-09  1.06e-07  7.67e-01  
 33  +4.7487e-01  +4.7498e-01  1.14e-04  4.17e-09  2.27e-06  1.34e-09  1.54e-08  9.90e-01  
 34  +4.7482e-01  +4.7482e-01  1.19e-06  4.37e-11  2.38e-08  1.40e-11  1.62e-10  9.90e-01  
 35  +4.7482e-01  +4.7482e-01  1.19e-08  4.37e-13  2.38e-10  1.40e-13  1.62e-12  9.90e-01  
 36  +4.7482e-01  +4.7482e-01  1.20e-10  4.48e-15  2.39e-12  1.68e-15  1.92e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0472347s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:17 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:17 PM: Optimal value: 4.748e-01
(CVXPY) Sep 20 08:08:17 PM: Compilation took 2.020e-01 seconds
(CVXPY) Sep 20 08:08:17 PM: Solver (including time spent in interface) took 1.089e+00 seconds
Iteration: 19, Objective: 0.4748
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:17 PM: Your problem has 25209 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:18 PM: Finished problem compilation (took 2.075e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25209
  constraints   = 50209
  nnz(P)        = 0
  nnz(A)        = 462121
  cones (total) = 1
    : Nonnegative = 1,  numel = 50209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8086e-01  +5.4256e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3197e-01  +6.1384e+02  6.13e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6023e+02  1.60e+02  1.50e-01  7.86e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0002e-01  +1.3425e+00  8.42e-01  2.52e-03  1.36e+00  2.25e-05  1.93e-01  1.48e-01  
  6  +5.0001e-01  +8.5102e-01  3.51e-01  1.05e-03  5.70e-01  8.32e-06  9.79e-02  5.85e-01  
  7  +5.0001e-01  +7.3302e-01  2.33e-01  6.96e-04  3.78e-01  5.19e-06  6.14e-02  5.46e-01  
  8  +5.0000e-01  +6.6401e-01  1.64e-01  4.90e-04  2.66e-01  3.88e-06  3.41e-02  5.87e-01  
  9  +5.0000e-01  +6.2784e-01  1.28e-01  3.81e-04  2.07e-01  4.67e-06  1.30e-02  7.44e-01  
 10  +4.9995e-01  +6.0856e-01  1.09e-01  2.56e-04  1.40e-01  2.60e-05  1.52e-03  9.23e-01  
 11  +4.9898e-01  +6.0324e-01  1.04e-01  2.43e-05  1.33e-02  4.62e-04  7.93e-05  9.49e-01  
 12  +4.9820e-01  +5.9473e-01  9.65e-02  1.31e-05  7.16e-03  6.81e-04  4.22e-05  5.48e-01  
 13  +4.9839e-01  +5.9244e-01  9.41e-02  1.29e-05  7.03e-03  5.72e-04  4.13e-05  1.43e-01  
 14  +4.9800e-01  +5.8892e-01  9.09e-02  1.03e-05  5.60e-03  6.15e-04  3.27e-05  2.74e-01  
 15  +4.9802e-01  +5.8196e-01  8.39e-02  8.29e-06  4.53e-03  4.01e-04  2.63e-05  5.18e-01  
 16  +4.9804e-01  +5.7632e-01  7.83e-02  7.00e-06  3.82e-03  1.84e-04  2.21e-05  6.21e-01  
 17  +4.9787e-01  +5.7340e-01  7.55e-02  6.39e-06  3.49e-03  9.20e-05  2.02e-05  5.22e-01  
 18  +4.9708e-01  +5.6921e-01  7.21e-02  5.45e-06  2.97e-03  7.19e-05  1.72e-05  3.59e-01  
 19  +4.9344e-01  +5.5210e-01  5.87e-02  3.23e-06  1.76e-03  7.09e-05  1.03e-05  4.56e-01  
 20  +4.9135e-01  +5.4255e-01  5.12e-02  2.73e-06  1.49e-03  4.50e-05  8.80e-06  3.23e-01  
 21  +4.8986e-01  +5.3593e-01  4.61e-02  2.38e-06  1.30e-03  2.77e-05  7.76e-06  3.40e-01  
 22  +4.8916e-01  +5.3278e-01  4.36e-02  2.22e-06  1.21e-03  1.91e-05  7.25e-06  2.77e-01  
 23  +4.8762e-01  +5.2622e-01  3.86e-02  1.89e-06  1.03e-03  1.50e-05  6.23e-06  2.22e-01  
 24  +4.8603e-01  +5.1932e-01  3.33e-02  1.55e-06  8.43e-04  4.73e-06  5.12e-06  6.38e-01  
 25  +4.8174e-01  +5.0153e-01  1.98e-02  8.47e-07  4.62e-04  1.50e-06  2.87e-06  6.78e-01  
 26  +4.8091e-01  +4.9812e-01  1.72e-02  7.18e-07  3.91e-04  1.07e-06  2.44e-06  3.25e-01  
 27  +4.8029e-01  +4.9567e-01  1.54e-02  6.31e-07  3.44e-04  9.09e-07  2.15e-06  1.71e-01  
 28  +4.7991e-01  +4.9409e-01  1.42e-02  5.72e-07  3.12e-04  4.85e-07  1.96e-06  5.45e-01  
 29  +4.7864e-01  +4.8909e-01  1.05e-02  4.13e-07  2.25e-04  3.12e-07  1.43e-06  4.08e-01  
 30  +4.7847e-01  +4.8838e-01  9.91e-03  3.88e-07  2.11e-04  2.28e-07  1.34e-06  4.23e-01  
 31  +4.7648e-01  +4.8087e-01  4.39e-03  1.66e-07  9.07e-05  9.13e-08  5.92e-07  6.50e-01  
 32  +4.7520e-01  +4.7619e-01  9.84e-04  3.64e-08  1.99e-05  1.67e-08  1.33e-07  8.65e-01  
 33  +4.7487e-01  +4.7498e-01  1.11e-04  4.08e-09  2.22e-06  1.37e-09  1.51e-08  9.87e-01  
 34  +4.7482e-01  +4.7482e-01  1.22e-06  4.49e-11  2.45e-08  1.51e-11  1.66e-10  9.89e-01  
 35  +4.7482e-01  +4.7482e-01  1.22e-08  4.49e-13  2.45e-10  1.51e-13  1.66e-12  9.90e-01  
 36  +4.7482e-01  +4.7482e-01  1.23e-10  4.59e-15  2.46e-12  1.97e-15  2.14e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.072089s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:19 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:19 PM: Optimal value: 4.748e-01
(CVXPY) Sep 20 08:08:19 PM: Compilation took 2.075e-01 seconds
(CVXPY) Sep 20 08:08:19 PM: Solver (including time spent in interface) took 1.116e+00 seconds
Iteration: 20, Objective: 0.4748
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:19 PM: Your problem has 25219 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:19 PM: Finished problem compilation (took 2.112e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25219
  constraints   = 50219
  nnz(P)        = 0
  nnz(A)        = 466484
  cones (total) = 1
    : Nonnegative = 1,  numel = 50219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4257e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3197e-01  +6.1385e+02  6.13e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6023e+02  1.60e+02  1.50e-01  7.86e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7633e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2915e+00  7.91e-01  2.37e-03  1.28e+00  2.25e-05  1.93e-01  1.59e-01  
  6  +5.0001e-01  +8.2464e-01  3.25e-01  9.70e-04  5.27e-01  8.00e-06  9.25e-02  6.36e-01  
  7  +5.0001e-01  +7.1530e-01  2.15e-01  6.43e-04  3.50e-01  5.26e-06  5.76e-02  4.94e-01  
  8  +5.0000e-01  +6.4942e-01  1.49e-01  4.46e-04  2.43e-01  4.15e-06  2.97e-02  6.09e-01  
  9  +5.0000e-01  +6.3025e-01  1.30e-01  3.88e-04  2.11e-01  5.69e-06  1.27e-02  6.67e-01  
 10  +4.9992e-01  +6.0276e-01  1.03e-01  2.12e-04  1.15e-01  3.87e-05  1.06e-03  9.90e-01  
 11  +4.9853e-01  +5.9612e-01  9.76e-02  1.77e-05  9.66e-03  6.59e-04  5.75e-05  9.46e-01  
 12  +4.9863e-01  +5.9071e-01  9.21e-02  1.46e-05  7.96e-03  5.33e-04  4.68e-05  4.14e-01  
 13  +4.9837e-01  +5.8317e-01  8.48e-02  9.82e-06  5.36e-03  4.53e-04  3.12e-05  6.21e-01  
 14  +4.9821e-01  +5.7991e-01  8.17e-02  8.15e-06  4.45e-03  3.66e-04  2.58e-05  4.18e-01  
 15  +4.9801e-01  +5.7522e-01  7.72e-02  6.57e-06  3.59e-03  1.77e-04  2.07e-05  6.75e-01  
 16  +4.9796e-01  +5.7489e-01  7.69e-02  6.52e-06  3.56e-03  1.68e-04  2.06e-05  5.47e-02  
 17  +4.9624e-01  +5.6619e-01  6.99e-02  4.56e-06  2.49e-03  1.35e-04  1.45e-05  5.38e-01  
 18  +4.9311e-01  +5.5156e-01  5.84e-02  3.26e-06  1.78e-03  1.11e-04  1.05e-05  3.45e-01  
 19  +4.9105e-01  +5.4225e-01  5.12e-02  2.73e-06  1.49e-03  8.02e-05  8.84e-06  2.73e-01  
 20  +4.9016e-01  +5.3825e-01  4.81e-02  2.52e-06  1.37e-03  5.59e-05  8.20e-06  2.65e-01  
 21  +4.8799e-01  +5.2875e-01  4.08e-02  2.02e-06  1.10e-03  2.89e-05  6.66e-06  4.47e-01  
 22  +4.8677e-01  +5.2355e-01  3.68e-02  1.77e-06  9.68e-04  2.29e-05  5.88e-06  2.09e-01  
 23  +4.8602e-01  +5.2011e-01  3.41e-02  1.60e-06  8.70e-04  1.15e-05  5.29e-06  4.64e-01  
 24  +4.8287e-01  +5.0699e-01  2.41e-02  1.06e-06  5.76e-04  4.00e-06  3.56e-06  6.34e-01  
 25  +4.8053e-01  +4.9742e-01  1.69e-02  7.08e-07  3.86e-04  2.26e-06  2.41e-06  4.54e-01  
 26  +4.8025e-01  +4.9629e-01  1.60e-02  6.62e-07  3.61e-04  1.95e-06  2.26e-06  1.57e-01  
 27  +4.8019e-01  +4.9607e-01  1.59e-02  6.54e-07  3.57e-04  1.87e-06  2.23e-06  4.64e-02  
 28  +4.7941e-01  +4.9296e-01  1.35e-02  5.48e-07  2.99e-04  1.22e-06  1.88e-06  3.68e-01  
 29  +4.7810e-01  +4.8758e-01  9.48e-03  3.72e-07  2.03e-04  2.98e-07  1.28e-06  8.24e-01  
 30  +4.7651e-01  +4.8142e-01  4.91e-03  1.89e-07  1.03e-04  1.20e-07  6.61e-07  6.71e-01  
 31  +4.7550e-01  +4.7763e-01  2.13e-03  8.04e-08  4.38e-05  4.28e-08  2.85e-07  7.17e-01  
 32  +4.7491e-01  +4.7549e-01  5.78e-04  2.13e-08  1.16e-05  7.11e-09  7.74e-08  9.89e-01  
 33  +4.7470e-01  +4.7474e-01  4.45e-05  1.62e-09  8.85e-07  5.40e-10  5.96e-09  9.43e-01  
 34  +4.7468e-01  +4.7469e-01  8.40e-06  3.06e-10  1.67e-07  1.01e-10  1.13e-09  9.25e-01  
 35  +4.7468e-01  +4.7468e-01  8.70e-08  3.17e-12  1.73e-09  1.05e-12  1.17e-11  9.90e-01  
 36  +4.7468e-01  +4.7468e-01  8.83e-10  3.22e-14  1.76e-11  1.86e-14  2.01e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0926589s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:20 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:20 PM: Optimal value: 4.747e-01
(CVXPY) Sep 20 08:08:20 PM: Compilation took 2.112e-01 seconds
(CVXPY) Sep 20 08:08:20 PM: Solver (including time spent in interface) took 1.135e+00 seconds
Iteration: 21, Objective: 0.4747
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:20 PM: Your problem has 25229 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:21 PM: Finished problem compilation (took 2.181e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25229
  constraints   = 50229
  nnz(P)        = 0
  nnz(A)        = 468687
  cones (total) = 1
    : Nonnegative = 1,  numel = 50229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4256e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3198e-01  +6.1389e+02  6.13e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6024e+02  1.60e+02  1.50e-01  7.85e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.71e-02  2.46e+01  5.22e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2927e+00  7.93e-01  2.37e-03  1.28e+00  2.26e-05  1.93e-01  1.58e-01  
  6  +5.0001e-01  +8.9189e-01  3.92e-01  1.17e-03  6.36e-01  9.84e-06  1.08e-01  5.75e-01  
  7  +5.0001e-01  +7.2370e-01  2.24e-01  6.69e-04  3.63e-01  5.49e-06  6.09e-02  5.53e-01  
  8  +5.0000e-01  +6.6650e-01  1.66e-01  4.97e-04  2.70e-01  4.09e-06  3.39e-02  6.42e-01  
  9  +5.0000e-01  +6.2544e-01  1.25e-01  3.73e-04  2.03e-01  5.15e-06  1.18e-02  7.74e-01  
 10  +4.9993e-01  +6.0558e-01  1.06e-01  2.10e-04  1.15e-01  3.68e-05  1.02e-03  9.90e-01  
 11  +4.9877e-01  +6.0000e-01  1.01e-01  1.95e-05  1.07e-02  5.52e-04  6.33e-05  9.38e-01  
 12  +4.9850e-01  +5.9356e-01  9.51e-02  1.40e-05  7.65e-03  5.72e-04  4.50e-05  4.33e-01  
 13  +4.9841e-01  +5.8474e-01  8.63e-02  9.95e-06  5.43e-03  4.19e-04  3.16e-05  6.19e-01  
 14  +4.9816e-01  +5.8258e-01  8.44e-02  8.57e-06  4.68e-03  4.13e-04  2.72e-05  2.35e-01  
 15  +4.9813e-01  +5.7960e-01  8.15e-02  7.71e-06  4.21e-03  2.91e-04  2.44e-05  3.82e-01  
 16  +4.9765e-01  +5.7646e-01  7.88e-02  6.55e-06  3.57e-03  2.69e-04  2.07e-05  2.81e-01  
 17  +4.9690e-01  +5.6966e-01  7.28e-02  5.49e-06  2.99e-03  1.04e-04  1.74e-05  6.53e-01  
 18  +4.9314e-01  +5.5209e-01  5.90e-02  3.25e-06  1.78e-03  8.42e-05  1.05e-05  5.59e-01  
 19  +4.9179e-01  +5.4603e-01  5.42e-02  2.93e-06  1.60e-03  6.23e-05  9.51e-06  2.27e-01  
 20  +4.9044e-01  +5.4003e-01  4.96e-02  2.62e-06  1.43e-03  4.13e-05  8.54e-06  2.95e-01  
 21  +4.8894e-01  +5.3332e-01  4.44e-02  2.26e-06  1.24e-03  1.17e-05  7.44e-06  6.15e-01  
 22  +4.8754e-01  +5.2741e-01  3.99e-02  1.96e-06  1.07e-03  7.70e-06  6.49e-06  3.28e-01  
 23  +4.8597e-01  +5.2073e-01  3.48e-02  1.62e-06  8.85e-04  1.87e-06  5.40e-06  7.07e-01  
 24  +4.8266e-01  +5.0706e-01  2.44e-02  1.05e-06  5.74e-04  3.44e-07  3.56e-06  8.57e-01  
 25  +4.8122e-01  +5.0126e-01  2.00e-02  8.41e-07  4.59e-04  2.72e-07  2.87e-06  3.03e-01  
 26  +4.8031e-01  +4.9742e-01  1.71e-02  6.92e-07  3.77e-04  2.08e-07  2.37e-06  6.25e-01  
 27  +4.8022e-01  +4.9709e-01  1.69e-02  6.84e-07  3.73e-04  2.02e-07  2.34e-06  1.27e-01  
 28  +4.7805e-01  +4.8861e-01  1.06e-02  4.16e-07  2.27e-04  1.25e-07  1.45e-06  4.85e-01  
 29  +4.7804e-01  +4.8857e-01  1.05e-02  4.13e-07  2.25e-04  1.25e-07  1.44e-06  8.14e-02  
 30  +4.7709e-01  +4.8487e-01  7.78e-03  3.02e-07  1.65e-04  9.21e-08  1.06e-06  4.12e-01  
 31  +4.7555e-01  +4.7897e-01  3.42e-03  1.30e-07  7.09e-05  4.05e-08  4.62e-07  6.86e-01  
 32  +4.7499e-01  +4.7692e-01  1.93e-03  7.20e-08  3.93e-05  2.30e-08  2.59e-07  5.39e-01  
 33  +4.7438e-01  +4.7472e-01  3.48e-04  1.27e-08  6.92e-06  4.15e-09  4.64e-08  8.43e-01  
 34  +4.7426e-01  +4.7430e-01  4.11e-05  1.49e-09  8.15e-07  4.92e-10  5.47e-09  9.84e-01  
 35  +4.7424e-01  +4.7424e-01  5.61e-07  2.04e-11  1.11e-08  6.73e-12  7.48e-11  9.88e-01  
 36  +4.7424e-01  +4.7424e-01  5.61e-09  2.04e-13  1.11e-10  6.73e-14  7.48e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0861207s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:22 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:22 PM: Optimal value: 4.742e-01
(CVXPY) Sep 20 08:08:22 PM: Compilation took 2.181e-01 seconds
(CVXPY) Sep 20 08:08:22 PM: Solver (including time spent in interface) took 1.128e+00 seconds
Iteration: 22, Objective: 0.4742
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:22 PM: Your problem has 25239 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:22 PM: Finished problem compilation (took 2.273e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:22 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25239
  constraints   = 50239
  nnz(P)        = 0
  nnz(A)        = 473139
  cones (total) = 1
    : Nonnegative = 1,  numel = 50239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4256e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3198e-01  +6.1387e+02  6.13e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6023e+02  1.60e+02  1.50e-01  7.85e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.71e-02  2.46e+01  5.22e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2960e+00  7.96e-01  2.38e-03  1.29e+00  2.26e-05  1.93e-01  1.58e-01  
  6  +5.0001e-01  +8.9785e-01  3.98e-01  1.19e-03  6.46e-01  9.91e-06  1.09e-01  5.80e-01  
  7  +5.0001e-01  +7.3293e-01  2.33e-01  6.96e-04  3.78e-01  5.75e-06  6.36e-02  5.15e-01  
  8  +5.0000e-01  +6.5984e-01  1.60e-01  4.78e-04  2.60e-01  4.17e-06  3.33e-02  6.38e-01  
  9  +5.0000e-01  +6.4758e-01  1.48e-01  4.40e-04  2.39e-01  4.66e-06  1.80e-02  6.15e-01  
 10  +4.9998e-01  +6.1949e-01  1.20e-01  3.34e-04  1.82e-01  1.39e-05  3.39e-03  8.73e-01  
 11  +4.9913e-01  +6.0571e-01  1.07e-01  2.96e-05  1.62e-02  4.00e-04  9.73e-05  9.78e-01  
 12  +4.9847e-01  +5.9565e-01  9.72e-02  1.51e-05  8.22e-03  5.90e-04  4.85e-05  6.20e-01  
 13  +4.9855e-01  +5.9042e-01  9.19e-02  1.24e-05  6.78e-03  4.71e-04  3.96e-05  4.19e-01  
 14  +4.9849e-01  +5.8487e-01  8.64e-02  9.69e-06  5.29e-03  3.54e-04  3.08e-05  5.22e-01  
 15  +4.9872e-01  +5.7878e-01  8.01e-02  7.91e-06  4.32e-03  7.57e-05  2.49e-05  8.76e-01  
 16  +4.9867e-01  +5.7844e-01  7.98e-02  7.73e-06  4.22e-03  6.93e-05  2.43e-05  1.13e-01  
 17  +4.9779e-01  +5.7411e-01  7.63e-02  5.78e-06  3.16e-03  6.78e-05  1.82e-05  4.16e-01  
 18  +4.9458e-01  +5.5874e-01  6.42e-02  3.60e-06  1.97e-03  4.97e-05  1.15e-05  6.13e-01  
 19  +4.9277e-01  +5.5065e-01  5.79e-02  3.17e-06  1.73e-03  3.70e-05  1.02e-05  2.27e-01  
 20  +4.9112e-01  +5.4354e-01  5.24e-02  2.79e-06  1.52e-03  2.61e-05  9.09e-06  2.62e-01  
 21  +4.8969e-01  +5.3743e-01  4.77e-02  2.47e-06  1.35e-03  1.89e-05  8.10e-06  2.56e-01  
 22  +4.8831e-01  +5.3156e-01  4.32e-02  2.17e-06  1.19e-03  1.19e-05  7.17e-06  3.36e-01  
 23  +4.8663e-01  +5.2453e-01  3.79e-02  1.83e-06  9.99e-04  8.74e-06  6.09e-06  2.70e-01  
 24  +4.8589e-01  +5.2143e-01  3.55e-02  1.66e-06  9.08e-04  4.67e-06  5.55e-06  4.46e-01  
 25  +4.8235e-01  +5.0700e-01  2.46e-02  1.08e-06  5.88e-04  2.09e-06  3.66e-06  5.54e-01  
 26  +4.8137e-01  +5.0305e-01  2.17e-02  9.26e-07  5.05e-04  1.62e-06  3.16e-06  2.48e-01  
 27  +4.7896e-01  +4.9343e-01  1.45e-02  5.88e-07  3.20e-04  7.77e-07  2.03e-06  5.59e-01  
 28  +4.7885e-01  +4.9300e-01  1.42e-02  5.72e-07  3.12e-04  7.19e-07  1.98e-06  9.30e-02  
 29  +4.7838e-01  +4.9108e-01  1.27e-02  5.04e-07  2.75e-04  4.43e-07  1.75e-06  4.68e-01  
 30  +4.7755e-01  +4.8788e-01  1.03e-02  4.05e-07  2.21e-04  3.22e-07  1.42e-06  3.17e-01  
 31  +4.7744e-01  +4.8739e-01  9.95e-03  3.87e-07  2.11e-04  2.38e-07  1.35e-06  4.02e-01  
 32  +4.7513e-01  +4.7881e-01  3.67e-03  1.38e-07  7.54e-05  8.01e-08  4.99e-07  6.91e-01  
 33  +4.7395e-01  +4.7450e-01  5.49e-04  2.02e-08  1.10e-05  9.98e-09  7.47e-08  9.04e-01  
 34  +4.7374e-01  +4.7375e-01  9.40e-06  3.45e-10  1.88e-07  1.46e-10  1.28e-09  9.90e-01  
 35  +4.7374e-01  +4.7374e-01  9.41e-08  3.46e-12  1.89e-09  1.46e-12  1.28e-11  9.90e-01  
 36  +4.7374e-01  +4.7374e-01  9.44e-10  3.47e-14  1.89e-11  1.74e-14  1.52e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0759381s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:23 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:23 PM: Optimal value: 4.737e-01
(CVXPY) Sep 20 08:08:23 PM: Compilation took 2.273e-01 seconds
(CVXPY) Sep 20 08:08:23 PM: Solver (including time spent in interface) took 1.131e+00 seconds
Iteration: 23, Objective: 0.4737
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:24 PM: Your problem has 25249 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:24 PM: Finished problem compilation (took 2.353e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25249
  constraints   = 50249
  nnz(P)        = 0
  nnz(A)        = 476521
  cones (total) = 1
    : Nonnegative = 1,  numel = 50249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4255e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3197e-01  +6.1386e+02  6.13e+02  1.78e-01  9.23e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6023e+02  1.60e+02  1.50e-01  7.85e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7631e+01  1.71e+01  4.71e-02  2.46e+01  5.22e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2862e+00  7.86e-01  2.35e-03  1.27e+00  2.26e-05  1.93e-01  1.60e-01  
  6  +5.0001e-01  +8.6146e-01  3.61e-01  1.08e-03  5.87e-01  9.05e-06  1.01e-01  6.10e-01  
  7  +5.0001e-01  +7.3256e-01  2.33e-01  6.95e-04  3.78e-01  5.78e-06  6.26e-02  4.84e-01  
  8  +5.0000e-01  +6.6480e-01  1.65e-01  4.93e-04  2.68e-01  4.58e-06  3.52e-02  5.35e-01  
  9  +5.0000e-01  +6.4898e-01  1.49e-01  4.44e-04  2.42e-01  5.19e-06  1.76e-02  6.60e-01  
 10  +4.9997e-01  +6.1932e-01  1.19e-01  3.24e-04  1.76e-01  1.80e-05  2.83e-03  9.05e-01  
 11  +4.9923e-01  +6.1417e-01  1.15e-01  3.94e-05  2.15e-02  3.53e-04  1.31e-04  9.55e-01  
 12  +4.9886e-01  +6.0390e-01  1.05e-01  2.25e-05  1.23e-02  4.61e-04  7.32e-05  5.70e-01  
 13  +4.9873e-01  +5.9709e-01  9.84e-02  1.64e-05  8.98e-03  4.47e-04  5.30e-05  4.55e-01  
 14  +4.9885e-01  +5.9344e-01  9.46e-02  1.48e-05  8.06e-03  3.57e-04  4.74e-05  3.14e-01  
 15  +4.9864e-01  +5.8878e-01  9.01e-02  1.10e-05  6.02e-03  3.34e-04  3.52e-05  4.67e-01  
 16  +4.9822e-01  +5.8381e-01  8.56e-02  8.19e-06  4.47e-03  2.98e-04  2.60e-05  4.93e-01  
 17  +4.9804e-01  +5.8127e-01  8.32e-02  7.44e-06  4.06e-03  2.30e-04  2.36e-05  3.19e-01  
 18  +4.9652e-01  +5.7228e-01  7.58e-02  5.24e-06  2.86e-03  1.80e-04  1.67e-05  5.52e-01  
 19  +4.9563e-01  +5.6773e-01  7.21e-02  4.76e-06  2.60e-03  1.52e-04  1.53e-05  1.93e-01  
 20  +4.9353e-01  +5.5669e-01  6.32e-02  3.96e-06  2.16e-03  4.69e-05  1.29e-05  6.10e-01  
 21  +4.9097e-01  +5.4511e-01  5.41e-02  3.08e-06  1.68e-03  3.13e-05  1.01e-05  3.75e-01  
 22  +4.9011e-01  +5.4132e-01  5.12e-02  2.83e-06  1.55e-03  2.22e-05  9.34e-06  2.71e-01  
 23  +4.8849e-01  +5.3419e-01  4.57e-02  2.39e-06  1.31e-03  8.99e-06  7.95e-06  5.42e-01  
 24  +4.8653e-01  +5.2591e-01  3.94e-02  1.95e-06  1.07e-03  6.67e-06  6.55e-06  2.79e-01  
 25  +4.8632e-01  +5.2512e-01  3.88e-02  1.90e-06  1.04e-03  4.67e-06  6.40e-06  2.75e-01  
 26  +4.8444e-01  +5.1716e-01  3.27e-02  1.53e-06  8.34e-04  2.85e-06  5.18e-06  4.02e-01  
 27  +4.8185e-01  +5.0648e-01  2.46e-02  1.08e-06  5.89e-04  1.35e-06  3.70e-06  5.56e-01  
 28  +4.7995e-01  +4.9881e-01  1.89e-02  7.92e-07  4.32e-04  7.91e-07  2.74e-06  4.60e-01  
 29  +4.7907e-01  +4.9531e-01  1.62e-02  6.67e-07  3.64e-04  6.11e-07  2.32e-06  2.70e-01  
 30  +4.7893e-01  +4.9464e-01  1.57e-02  6.41e-07  3.50e-04  4.36e-07  2.24e-06  3.77e-01  
 31  +4.7776e-01  +4.9001e-01  1.22e-02  4.90e-07  2.67e-04  2.79e-07  1.73e-06  4.58e-01  
 32  +4.7595e-01  +4.8295e-01  7.00e-03  2.71e-07  1.48e-04  1.01e-07  9.73e-07  8.58e-01  
 33  +4.7398e-01  +4.7565e-01  1.67e-03  6.29e-08  3.43e-05  1.97e-08  2.33e-07  9.41e-01  
 34  +4.7341e-01  +4.7359e-01  1.80e-04  6.73e-09  3.67e-06  2.11e-09  2.52e-08  9.42e-01  
 35  +4.7334e-01  +4.7335e-01  4.60e-06  1.71e-10  9.35e-08  5.33e-11  6.44e-10  9.88e-01  
 36  +4.7334e-01  +4.7334e-01  4.61e-08  1.72e-12  9.36e-10  5.33e-13  6.45e-12  9.90e-01  
 37  +4.7334e-01  +4.7334e-01  4.62e-10  1.72e-14  9.40e-12  6.42e-15  7.70e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1329707s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:25 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:25 PM: Optimal value: 4.733e-01
(CVXPY) Sep 20 08:08:25 PM: Compilation took 2.353e-01 seconds
(CVXPY) Sep 20 08:08:25 PM: Solver (including time spent in interface) took 1.177e+00 seconds
Iteration: 24, Objective: 0.4733
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:25 PM: Your problem has 25259 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:25 PM: Finished problem compilation (took 2.313e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25259
  constraints   = 50259
  nnz(P)        = 0
  nnz(A)        = 479521
  cones (total) = 1
    : Nonnegative = 1,  numel = 50259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4257e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3196e-01  +6.1375e+02  6.13e+02  1.78e-01  9.23e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6020e+02  1.60e+02  1.50e-01  7.85e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7634e+01  1.71e+01  4.71e-02  2.46e+01  5.22e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2640e+00  7.64e-01  2.28e-03  1.24e+00  2.26e-05  1.93e-01  1.65e-01  
  6  +5.0001e-01  +8.5946e-01  3.59e-01  1.07e-03  5.84e-01  9.26e-06  1.01e-01  6.11e-01  
  7  +5.0000e-01  +6.8559e-01  1.86e-01  5.55e-04  3.02e-01  4.82e-06  4.98e-02  6.26e-01  
  8  +5.0000e-01  +6.4492e-01  1.45e-01  4.33e-04  2.36e-01  4.62e-06  2.56e-02  6.08e-01  
  9  +4.9999e-01  +6.3026e-01  1.30e-01  3.86e-04  2.10e-01  8.38e-06  9.14e-03  7.06e-01  
 10  +4.9979e-01  +6.1679e-01  1.17e-01  1.51e-04  8.23e-02  9.82e-05  5.96e-04  9.48e-01  
 11  +4.9840e-01  +6.0932e-01  1.11e-01  2.31e-05  1.26e-02  7.06e-04  7.62e-05  8.74e-01  
 12  +4.9862e-01  +6.0069e-01  1.02e-01  1.86e-05  1.02e-02  5.33e-04  6.06e-05  4.56e-01  
 13  +4.9879e-01  +5.9560e-01  9.68e-02  1.61e-05  8.81e-03  4.05e-04  5.21e-05  3.84e-01  
 14  +4.9829e-01  +5.9004e-01  9.17e-02  1.08e-05  5.90e-03  4.54e-04  3.46e-05  4.85e-01  
 15  +4.9878e-01  +5.8427e-01  8.55e-02  9.26e-06  5.06e-03  1.20e-04  2.94e-05  7.91e-01  
 16  +4.9816e-01  +5.8029e-01  8.21e-02  6.90e-06  3.77e-03  9.93e-05  2.19e-05  5.41e-01  
 17  +4.9788e-01  +5.7846e-01  8.06e-02  6.63e-06  3.62e-03  6.90e-05  2.11e-05  3.02e-01  
 18  +4.9623e-01  +5.7068e-01  7.44e-02  4.93e-06  2.69e-03  7.35e-05  1.58e-05  2.90e-01  
 19  +4.9583e-01  +5.6859e-01  7.28e-02  4.82e-06  2.63e-03  6.04e-05  1.55e-05  1.44e-01  
 20  +4.9220e-01  +5.5176e-01  5.96e-02  3.35e-06  1.83e-03  4.53e-05  1.10e-05  3.98e-01  
 21  +4.9038e-01  +5.4345e-01  5.31e-02  2.92e-06  1.59e-03  2.35e-05  9.63e-06  4.07e-01  
 22  +4.8966e-01  +5.4024e-01  5.06e-02  2.72e-06  1.49e-03  1.49e-05  9.02e-06  3.21e-01  
 23  +4.8782e-01  +5.3225e-01  4.44e-02  2.28e-06  1.25e-03  1.06e-05  7.63e-06  2.92e-01  
 24  +4.8635e-01  +5.2592e-01  3.96e-02  1.95e-06  1.06e-03  7.57e-06  6.57e-06  2.89e-01  
 25  +4.8610e-01  +5.2491e-01  3.88e-02  1.89e-06  1.03e-03  4.83e-06  6.39e-06  3.32e-01  
 26  +4.8539e-01  +5.2189e-01  3.65e-02  1.74e-06  9.49e-04  3.41e-06  5.90e-06  2.93e-01  
 27  +4.8185e-01  +5.0701e-01  2.52e-02  1.13e-06  6.17e-04  2.01e-06  3.90e-06  4.21e-01  
 28  +4.7931e-01  +4.9659e-01  1.73e-02  7.38e-07  4.03e-04  1.09e-06  2.57e-06  4.95e-01  
 29  +4.7890e-01  +4.9489e-01  1.60e-02  6.69e-07  3.65e-04  8.61e-07  2.33e-06  2.53e-01  
 30  +4.7880e-01  +4.9448e-01  1.57e-02  6.57e-07  3.58e-04  7.25e-07  2.29e-06  1.78e-01  
 31  +4.7807e-01  +4.9135e-01  1.33e-02  5.38e-07  2.94e-04  2.94e-07  1.88e-06  7.47e-01  
 32  +4.7640e-01  +4.8486e-01  8.47e-03  3.37e-07  1.84e-04  1.71e-07  1.19e-06  4.75e-01  
 33  +4.7544e-01  +4.8111e-01  5.66e-03  2.21e-07  1.21e-04  8.66e-08  7.92e-07  7.17e-01  
 34  +4.7491e-01  +4.7901e-01  4.11e-03  1.59e-07  8.65e-05  4.78e-08  5.73e-07  9.90e-01  
 35  +4.7378e-01  +4.7493e-01  1.14e-03  4.31e-08  2.35e-05  1.33e-08  1.60e-07  7.65e-01  
 36  +4.7338e-01  +4.7349e-01  1.09e-04  4.06e-09  2.22e-06  1.26e-09  1.52e-08  9.36e-01  
 37  +4.7334e-01  +4.7334e-01  2.26e-06  8.41e-11  4.59e-08  2.60e-11  3.16e-10  9.89e-01  
 38  +4.7334e-01  +4.7334e-01  2.26e-08  8.41e-13  4.59e-10  2.60e-13  3.16e-12  9.90e-01  
 39  +4.7334e-01  +4.7334e-01  2.27e-10  8.43e-15  4.62e-12  3.54e-15  4.24e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.189736s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:27 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:27 PM: Optimal value: 4.733e-01
(CVXPY) Sep 20 08:08:27 PM: Compilation took 2.313e-01 seconds
(CVXPY) Sep 20 08:08:27 PM: Solver (including time spent in interface) took 1.234e+00 seconds
Iteration: 25, Objective: 0.4733
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:27 PM: Your problem has 25269 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:27 PM: Finished problem compilation (took 2.359e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25269
  constraints   = 50269
  nnz(P)        = 0
  nnz(A)        = 483316
  cones (total) = 1
    : Nonnegative = 1,  numel = 50269

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4257e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3196e-01  +6.1370e+02  6.13e+02  1.78e-01  9.23e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6018e+02  1.60e+02  1.50e-01  7.85e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7633e+01  1.71e+01  4.71e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2548e+00  7.55e-01  2.26e-03  1.22e+00  2.26e-05  1.93e-01  1.67e-01  
  6  +5.0001e-01  +7.5881e-01  2.59e-01  7.74e-04  4.21e-01  6.48e-06  7.64e-02  7.17e-01  
  7  +5.0000e-01  +6.8461e-01  1.85e-01  5.52e-04  3.00e-01  4.74e-06  4.58e-02  5.41e-01  
  8  +5.0000e-01  +6.4899e-01  1.49e-01  4.45e-04  2.42e-01  4.90e-06  2.26e-02  6.33e-01  
  9  +4.9998e-01  +6.2740e-01  1.27e-01  3.68e-04  2.00e-01  1.34e-05  4.93e-03  8.44e-01  
 10  +4.9921e-01  +6.1634e-01  1.17e-01  4.54e-05  2.48e-02  3.63e-04  1.54e-04  9.75e-01  
 11  +4.9831e-01  +6.0556e-01  1.07e-01  1.95e-05  1.06e-02  6.83e-04  6.40e-05  6.62e-01  
 12  +4.9873e-01  +5.9668e-01  9.80e-02  1.55e-05  8.49e-03  4.11e-04  5.02e-05  5.88e-01  
 13  +4.9906e-01  +5.9140e-01  9.23e-02  1.33e-05  7.26e-03  2.07e-04  4.24e-05  6.20e-01  
 14  +4.9884e-01  +5.8901e-01  9.02e-02  1.06e-05  5.77e-03  2.00e-04  3.36e-05  3.87e-01  
 15  +4.9886e-01  +5.8698e-01  8.81e-02  9.43e-06  5.15e-03  1.08e-04  3.00e-05  5.60e-01  
 16  +4.9806e-01  +5.8266e-01  8.46e-02  6.79e-06  3.71e-03  1.19e-04  2.16e-05  3.99e-01  
 17  +4.9763e-01  +5.8042e-01  8.28e-02  6.30e-06  3.44e-03  1.09e-04  2.01e-05  1.55e-01  
 18  +4.9599e-01  +5.7079e-01  7.48e-02  5.36e-06  2.93e-03  1.15e-06  1.73e-05  9.09e-01  
 19  +4.9212e-01  +5.5304e-01  6.09e-02  3.51e-06  1.91e-03  9.43e-07  1.15e-05  4.78e-01  
 20  +4.9008e-01  +5.4398e-01  5.39e-02  2.98e-06  1.63e-03  7.24e-07  9.86e-06  2.97e-01  
 21  +4.8917e-01  +5.4012e-01  5.09e-02  2.75e-06  1.50e-03  6.10e-07  9.15e-06  2.47e-01  
 22  +4.8677e-01  +5.2977e-01  4.30e-02  2.18e-06  1.19e-03  4.01e-07  7.34e-06  5.80e-01  
 23  +4.8650e-01  +5.2865e-01  4.21e-02  2.10e-06  1.15e-03  3.82e-07  7.08e-06  2.34e-01  
 24  +4.8478e-01  +5.2162e-01  3.68e-02  1.76e-06  9.60e-04  3.16e-07  5.98e-06  5.40e-01  
 25  +4.8103e-01  +5.0573e-01  2.47e-02  1.10e-06  6.01e-04  2.11e-07  3.82e-06  5.85e-01  
 26  +4.8059e-01  +5.0382e-01  2.32e-02  1.02e-06  5.56e-04  2.05e-07  3.53e-06  2.24e-01  
 27  +4.7965e-01  +4.9993e-01  2.03e-02  8.74e-07  4.77e-04  1.81e-07  3.04e-06  2.04e-01  
 28  +4.7918e-01  +4.9787e-01  1.87e-02  7.89e-07  4.31e-04  1.76e-07  2.75e-06  3.65e-01  
 29  +4.7881e-01  +4.9635e-01  1.75e-02  7.33e-07  4.00e-04  1.69e-07  2.56e-06  2.05e-01  
 30  +4.7804e-01  +4.9293e-01  1.49e-02  6.11e-07  3.33e-04  1.61e-07  2.14e-06  9.90e-01  
 31  +4.7666e-01  +4.8747e-01  1.08e-02  4.39e-07  2.40e-04  1.17e-07  1.56e-06  3.58e-01  
 32  +4.7529e-01  +4.8207e-01  6.78e-03  2.73e-07  1.49e-04  7.41e-08  9.77e-07  4.83e-01  
 33  +4.7386e-01  +4.7646e-01  2.60e-03  1.04e-07  5.66e-05  2.88e-08  3.77e-07  8.53e-01  
 34  +4.7359e-01  +4.7541e-01  1.83e-03  7.26e-08  3.96e-05  2.02e-08  2.65e-07  3.32e-01  
 35  +4.7336e-01  +4.7451e-01  1.15e-03  4.56e-08  2.49e-05  1.28e-08  1.68e-07  9.48e-01  
 36  +4.7301e-01  +4.7323e-01  2.16e-04  8.51e-09  4.65e-06  2.40e-09  3.16e-08  8.34e-01  
 37  +4.7294e-01  +4.7297e-01  2.64e-05  1.04e-09  5.66e-07  2.92e-10  3.86e-09  8.97e-01  
 38  +4.7293e-01  +4.7293e-01  3.16e-07  1.24e-11  6.77e-09  3.49e-12  4.63e-11  9.90e-01  
 39  +4.7293e-01  +4.7293e-01  3.16e-09  1.24e-13  6.77e-11  3.49e-14  4.63e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2307977s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:28 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:28 PM: Optimal value: 4.729e-01
(CVXPY) Sep 20 08:08:28 PM: Compilation took 2.359e-01 seconds
(CVXPY) Sep 20 08:08:28 PM: Solver (including time spent in interface) took 1.277e+00 seconds
Iteration: 26, Objective: 0.4729
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:28 PM: Your problem has 25279 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:29 PM: Finished problem compilation (took 2.414e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25279
  constraints   = 50279
  nnz(P)        = 0
  nnz(A)        = 485605
  cones (total) = 1
    : Nonnegative = 1,  numel = 50279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4257e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3196e-01  +6.1368e+02  6.13e+02  1.78e-01  9.23e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6017e+02  1.60e+02  1.50e-01  7.85e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7634e+01  1.71e+01  4.71e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2396e+00  7.40e-01  2.21e-03  1.20e+00  2.26e-05  1.93e-01  1.71e-01  
  6  +5.0001e-01  +7.6646e-01  2.66e-01  7.97e-04  4.33e-01  6.77e-06  7.84e-02  7.23e-01  
  7  +5.0000e-01  +6.8424e-01  1.84e-01  5.51e-04  3.00e-01  4.82e-06  4.59e-02  5.52e-01  
  8  +5.0000e-01  +6.5242e-01  1.52e-01  4.55e-04  2.48e-01  4.96e-06  2.26e-02  6.57e-01  
  9  +4.9998e-01  +6.2785e-01  1.28e-01  3.67e-04  2.00e-01  1.40e-05  4.63e-03  8.64e-01  
 10  +4.9928e-01  +6.2042e-01  1.21e-01  5.06e-05  2.76e-02  3.30e-04  1.72e-04  9.66e-01  
 11  +4.9860e-01  +6.1256e-01  1.14e-01  2.49e-05  1.36e-02  5.81e-04  8.21e-05  5.74e-01  
 12  +4.9841e-01  +6.0574e-01  1.07e-01  1.86e-05  1.02e-02  5.86e-04  6.08e-05  3.98e-01  
 13  +4.9814e-01  +6.0157e-01  1.03e-01  1.46e-05  7.98e-03  6.17e-04  4.74e-05  3.18e-01  
 14  +4.9858e-01  +5.9485e-01  9.63e-02  1.26e-05  6.86e-03  3.53e-04  4.03e-05  5.28e-01  
 15  +4.9813e-01  +5.9044e-01  9.23e-02  9.48e-06  5.18e-03  3.51e-04  3.03e-05  4.08e-01  
 16  +4.9781e-01  +5.8194e-01  8.41e-02  7.25e-06  3.96e-03  1.06e-04  2.31e-05  8.35e-01  
 17  +4.9686e-01  +5.7732e-01  8.05e-02  6.02e-06  3.29e-03  1.07e-04  1.93e-05  2.24e-01  
 18  +4.9577e-01  +5.7154e-01  7.58e-02  5.37e-06  2.93e-03  6.05e-05  1.73e-05  4.33e-01  
 19  +4.9240e-01  +5.5577e-01  6.34e-02  3.72e-06  2.03e-03  4.89e-05  1.22e-05  3.93e-01  
 20  +4.8812e-01  +5.3613e-01  4.80e-02  2.59e-06  1.41e-03  1.36e-05  8.70e-06  6.43e-01  
 21  +4.8791e-01  +5.3530e-01  4.74e-02  2.52e-06  1.37e-03  1.14e-05  8.47e-06  1.60e-01  
 22  +4.8665e-01  +5.2987e-01  4.32e-02  2.19e-06  1.19e-03  4.14e-06  7.38e-06  5.90e-01  
 23  +4.8584e-01  +5.2645e-01  4.06e-02  2.01e-06  1.10e-03  3.61e-06  6.83e-06  1.37e-01  
 24  +4.8461e-01  +5.2116e-01  3.65e-02  1.71e-06  9.36e-04  5.63e-08  5.84e-06  9.58e-01  
 25  +4.8090e-01  +5.0560e-01  2.47e-02  1.09e-06  5.97e-04  1.14e-07  3.80e-06  5.93e-01  
 26  +4.8053e-01  +5.0394e-01  2.34e-02  1.01e-06  5.53e-04  1.50e-07  3.52e-06  3.61e-01  
 27  +4.7938e-01  +4.9921e-01  1.98e-02  8.44e-07  4.60e-04  1.35e-07  2.95e-06  2.50e-01  
 28  +4.7882e-01  +4.9687e-01  1.80e-02  7.57e-07  4.13e-04  1.36e-07  2.65e-06  2.65e-01  
 29  +4.7857e-01  +4.9586e-01  1.73e-02  7.21e-07  3.94e-04  1.38e-07  2.54e-06  1.83e-01  
 30  +4.7720e-01  +4.9012e-01  1.29e-02  5.29e-07  2.88e-04  1.36e-07  1.88e-06  9.31e-01  
 31  +4.7635e-01  +4.8674e-01  1.04e-02  4.23e-07  2.31e-04  1.11e-07  1.51e-06  4.99e-01  
 32  +4.7507e-01  +4.8170e-01  6.63e-03  2.68e-07  1.46e-04  7.11e-08  9.69e-07  4.40e-01  
 33  +4.7427e-01  +4.7858e-01  4.31e-03  1.72e-07  9.40e-05  4.67e-08  6.29e-07  5.18e-01  
 34  +4.7300e-01  +4.7369e-01  6.84e-04  2.72e-08  1.48e-05  7.36e-09  1.01e-07  8.99e-01  
 35  +4.7278e-01  +4.7282e-01  4.17e-05  1.65e-09  9.02e-07  4.52e-10  6.17e-09  9.84e-01  
 36  +4.7276e-01  +4.7276e-01  4.28e-07  1.70e-11  9.27e-09  4.64e-12  6.34e-11  9.90e-01  
 37  +4.7276e-01  +4.7276e-01  4.28e-09  1.70e-13  9.27e-11  4.81e-14  6.57e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.146776s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:30 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:30 PM: Optimal value: 4.728e-01
(CVXPY) Sep 20 08:08:30 PM: Compilation took 2.414e-01 seconds
(CVXPY) Sep 20 08:08:30 PM: Solver (including time spent in interface) took 1.191e+00 seconds
Iteration: 27, Objective: 0.4728
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:30 PM: Your problem has 25289 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:30 PM: Finished problem compilation (took 2.395e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25289
  constraints   = 50289
  nnz(P)        = 0
  nnz(A)        = 488001
  cones (total) = 1
    : Nonnegative = 1,  numel = 50289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4257e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3196e-01  +6.1368e+02  6.13e+02  1.78e-01  9.23e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6017e+02  1.60e+02  1.50e-01  7.84e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7633e+01  1.71e+01  4.71e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2361e+00  7.36e-01  2.20e-03  1.19e+00  2.27e-05  1.93e-01  1.72e-01  
  6  +5.0001e-01  +7.6251e-01  2.63e-01  7.85e-04  4.27e-01  6.72e-06  7.75e-02  7.23e-01  
  7  +5.0000e-01  +6.8195e-01  1.82e-01  5.44e-04  2.96e-01  4.91e-06  4.56e-02  5.25e-01  
  8  +5.0000e-01  +6.5929e-01  1.59e-01  4.76e-04  2.59e-01  5.08e-06  2.49e-02  6.10e-01  
  9  +4.9998e-01  +6.2638e-01  1.26e-01  3.65e-04  1.98e-01  1.33e-05  4.87e-03  8.87e-01  
 10  +4.9920e-01  +6.1789e-01  1.19e-01  4.50e-05  2.46e-02  3.69e-04  1.52e-04  9.73e-01  
 11  +4.9818e-01  +6.0803e-01  1.10e-01  1.91e-05  1.04e-02  7.33e-04  6.27e-05  6.44e-01  
 12  +4.9803e-01  +6.0119e-01  1.03e-01  1.43e-05  7.83e-03  6.86e-04  4.66e-05  4.37e-01  
 13  +4.9833e-01  +5.9863e-01  1.00e-01  1.39e-05  7.60e-03  5.30e-04  4.50e-05  2.26e-01  
 14  +4.9792e-01  +5.9493e-01  9.70e-02  1.08e-05  5.90e-03  5.65e-04  3.48e-05  3.24e-01  
 15  +4.9782e-01  +5.8919e-01  9.14e-02  8.96e-06  4.89e-03  3.84e-04  2.87e-05  4.87e-01  
 16  +4.9620e-01  +5.7915e-01  8.30e-02  5.94e-06  3.24e-03  3.66e-04  1.91e-05  5.13e-01  
 17  +4.9500e-01  +5.7141e-01  7.64e-02  5.18e-06  2.83e-03  2.19e-04  1.68e-05  4.00e-01  
 18  +4.9204e-01  +5.5623e-01  6.42e-02  3.84e-06  2.10e-03  1.26e-04  1.27e-05  4.81e-01  
 19  +4.8877e-01  +5.4086e-01  5.21e-02  2.85e-06  1.56e-03  6.68e-05  9.57e-06  4.60e-01  
 20  +4.8829e-01  +5.3861e-01  5.03e-02  2.70e-06  1.48e-03  5.18e-05  9.08e-06  2.10e-01  
 21  +4.8689e-01  +5.3212e-01  4.52e-02  2.32e-06  1.27e-03  2.29e-05  7.85e-06  5.07e-01  
 22  +4.8544e-01  +5.2586e-01  4.04e-02  2.00e-06  1.09e-03  1.67e-05  6.81e-06  2.70e-01  
 23  +4.8510e-01  +5.2432e-01  3.92e-02  1.90e-06  1.03e-03  7.88e-06  6.51e-06  4.81e-01  
 24  +4.8443e-01  +5.2145e-01  3.70e-02  1.76e-06  9.58e-04  5.49e-06  6.03e-06  3.00e-01  
 25  +4.8044e-01  +5.0454e-01  2.41e-02  1.08e-06  5.89e-04  3.13e-06  3.80e-06  4.30e-01  
 26  +4.7958e-01  +5.0095e-01  2.14e-02  9.37e-07  5.11e-04  2.37e-06  3.30e-06  2.67e-01  
 27  +4.7815e-01  +4.9502e-01  1.69e-02  7.04e-07  3.84e-04  9.75e-07  2.49e-06  6.45e-01  
 28  +4.7807e-01  +4.9465e-01  1.66e-02  6.92e-07  3.78e-04  8.34e-07  2.45e-06  1.66e-01  
 29  +4.7706e-01  +4.9031e-01  1.32e-02  5.40e-07  2.94e-04  1.54e-07  1.92e-06  9.90e-01  
 30  +4.7589e-01  +4.8573e-01  9.85e-03  3.98e-07  2.17e-04  1.14e-07  1.43e-06  3.35e-01  
 31  +4.7426e-01  +4.7935e-01  5.09e-03  2.05e-07  1.12e-04  5.82e-08  7.48e-07  5.53e-01  
 32  +4.7320e-01  +4.7517e-01  1.97e-03  7.90e-08  4.31e-05  2.21e-08  2.92e-07  8.36e-01  
 33  +4.7269e-01  +4.7326e-01  5.61e-04  2.24e-08  1.22e-05  6.27e-09  8.34e-08  7.85e-01  
 34  +4.7251e-01  +4.7258e-01  6.27e-05  2.49e-09  1.36e-06  6.92e-10  9.33e-09  9.05e-01  
 35  +4.7249e-01  +4.7249e-01  9.67e-07  3.84e-11  2.10e-08  1.07e-11  1.44e-10  9.85e-01  
 36  +4.7249e-01  +4.7249e-01  9.68e-09  3.85e-13  2.10e-10  1.07e-13  1.44e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1860295s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:32 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:32 PM: Optimal value: 4.725e-01
(CVXPY) Sep 20 08:08:32 PM: Compilation took 2.395e-01 seconds
(CVXPY) Sep 20 08:08:32 PM: Solver (including time spent in interface) took 1.231e+00 seconds
Iteration: 28, Objective: 0.4725
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:32 PM: Your problem has 25299 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:32 PM: Finished problem compilation (took 2.791e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25299
  constraints   = 50299
  nnz(P)        = 0
  nnz(A)        = 489870
  cones (total) = 1
    : Nonnegative = 1,  numel = 50299

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8086e-01  +5.4256e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3196e-01  +6.1365e+02  6.13e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6016e+02  1.60e+02  1.50e-01  7.84e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2369e+00  7.37e-01  2.20e-03  1.20e+00  2.27e-05  1.93e-01  1.72e-01  
  6  +5.0001e-01  +7.6306e-01  2.63e-01  7.87e-04  4.28e-01  6.69e-06  7.74e-02  7.29e-01  
  7  +5.0000e-01  +6.7862e-01  1.79e-01  5.34e-04  2.91e-01  4.83e-06  4.44e-02  5.41e-01  
  8  +5.0000e-01  +6.6006e-01  1.60e-01  4.78e-04  2.60e-01  5.14e-06  2.43e-02  6.12e-01  
  9  +4.9999e-01  +6.3980e-01  1.40e-01  4.10e-04  2.23e-01  1.09e-05  6.92e-03  7.87e-01  
 10  +4.9949e-01  +6.2621e-01  1.27e-01  7.34e-05  4.01e-02  2.39e-04  2.56e-04  9.67e-01  
 11  +4.9794e-01  +6.1451e-01  1.17e-01  1.86e-05  1.01e-02  8.57e-04  6.13e-05  7.79e-01  
 12  +4.9847e-01  +6.0255e-01  1.04e-01  1.48e-05  8.07e-03  5.02e-04  4.78e-05  5.71e-01  
 13  +4.9862e-01  +6.0034e-01  1.02e-01  1.44e-05  7.86e-03  4.12e-04  4.65e-05  1.80e-01  
 14  +4.9811e-01  +5.9674e-01  9.86e-02  1.09e-05  5.96e-03  4.78e-04  3.51e-05  2.97e-01  
 15  +4.9799e-01  +5.9349e-01  9.55e-02  9.59e-06  5.24e-03  4.13e-04  3.08e-05  2.89e-01  
 16  +4.9788e-01  +5.8345e-01  8.56e-02  7.46e-06  4.07e-03  7.83e-05  2.39e-05  8.89e-01  
 17  +4.9688e-01  +5.7859e-01  8.17e-02  6.11e-06  3.34e-03  7.94e-05  1.96e-05  2.37e-01  
 18  +4.9370e-01  +5.6246e-01  6.88e-02  4.29e-06  2.34e-03  7.41e-06  1.40e-05  9.16e-01  
 19  +4.9269e-01  +5.5794e-01  6.52e-02  4.00e-06  2.18e-03  5.43e-06  1.32e-05  2.41e-01  
 20  +4.8914e-01  +5.4211e-01  5.30e-02  2.91e-06  1.59e-03  4.09e-06  9.76e-06  3.23e-01  
 21  +4.8833e-01  +5.3862e-01  5.03e-02  2.70e-06  1.47e-03  3.33e-06  9.09e-06  1.91e-01  
 22  +4.8689e-01  +5.3241e-01  4.55e-02  2.34e-06  1.28e-03  1.58e-06  7.94e-06  5.18e-01  
 23  +4.8477e-01  +5.2341e-01  3.86e-02  1.89e-06  1.03e-03  1.21e-06  6.51e-06  2.63e-01  
 24  +4.8455e-01  +5.2257e-01  3.80e-02  1.84e-06  1.01e-03  9.33e-07  6.38e-06  2.69e-01  
 25  +4.8397e-01  +5.2010e-01  3.61e-02  1.72e-06  9.37e-04  7.34e-07  5.94e-06  2.93e-01  
 26  +4.7983e-01  +5.0261e-01  2.28e-02  1.01e-06  5.51e-04  3.55e-07  3.57e-06  6.03e-01  
 27  +4.7871e-01  +4.9808e-01  1.94e-02  8.38e-07  4.57e-04  2.92e-07  2.98e-06  2.53e-01  
 28  +4.7813e-01  +4.9572e-01  1.76e-02  7.47e-07  4.08e-04  2.53e-07  2.66e-06  2.42e-01  
 29  +4.7764e-01  +4.9375e-01  1.61e-02  6.76e-07  3.69e-04  2.29e-07  2.42e-06  1.38e-01  
 30  +4.7740e-01  +4.9274e-01  1.53e-02  6.45e-07  3.52e-04  2.00e-07  2.32e-06  2.84e-01  
 31  +4.7634e-01  +4.8843e-01  1.21e-02  5.00e-07  2.73e-04  1.51e-07  1.81e-06  3.95e-01  
 32  +4.7521e-01  +4.8374e-01  8.53e-03  3.43e-07  1.87e-04  9.50e-08  1.25e-06  9.21e-01  
 33  +4.7354e-01  +4.7731e-01  3.77e-03  1.50e-07  8.20e-05  4.12e-08  5.63e-07  7.50e-01  
 34  +4.7233e-01  +4.7271e-01  3.84e-04  1.51e-08  8.24e-06  3.97e-09  5.86e-08  9.76e-01  
 35  +4.7218e-01  +4.7219e-01  5.70e-06  2.23e-10  1.22e-07  5.71e-11  8.75e-10  9.88e-01  
 36  +4.7218e-01  +4.7218e-01  5.71e-08  2.23e-12  1.22e-09  5.72e-13  8.77e-12  9.90e-01  
 37  +4.7218e-01  +4.7218e-01  5.77e-10  2.25e-14  1.23e-11  8.72e-15  1.31e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2334742s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:33 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:33 PM: Optimal value: 4.722e-01
(CVXPY) Sep 20 08:08:33 PM: Compilation took 2.791e-01 seconds
(CVXPY) Sep 20 08:08:33 PM: Solver (including time spent in interface) took 1.279e+00 seconds
Iteration: 29, Objective: 0.4722
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:34 PM: Your problem has 25309 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:34 PM: Finished problem compilation (took 2.610e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25309
  constraints   = 50309
  nnz(P)        = 0
  nnz(A)        = 492272
  cones (total) = 1
    : Nonnegative = 1,  numel = 50309

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4256e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3195e-01  +6.1361e+02  6.13e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6015e+02  1.60e+02  1.50e-01  7.84e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2412e+00  7.41e-01  2.22e-03  1.20e+00  2.27e-05  1.93e-01  1.71e-01  
  6  +5.0001e-01  +7.2894e-01  2.29e-01  6.85e-04  3.72e-01  5.42e-06  6.76e-02  8.01e-01  
  7  +5.0000e-01  +6.8677e-01  1.87e-01  5.59e-04  3.04e-01  4.55e-06  4.44e-02  4.93e-01  
  8  +5.0000e-01  +6.5934e-01  1.59e-01  4.76e-04  2.59e-01  4.78e-06  2.13e-02  7.02e-01  
  9  +4.9999e-01  +6.4056e-01  1.41e-01  4.02e-04  2.19e-01  1.20e-05  4.89e-03  8.84e-01  
 10  +4.9899e-01  +6.1843e-01  1.19e-01  2.94e-05  1.61e-02  4.64e-04  9.74e-05  9.86e-01  
 11  +4.9779e-01  +6.0731e-01  1.10e-01  1.34e-05  7.30e-03  8.28e-04  4.35e-05  6.13e-01  
 12  +4.9818e-01  +6.0275e-01  1.05e-01  1.21e-05  6.60e-03  6.08e-04  3.89e-05  3.46e-01  
 13  +4.9845e-01  +5.9771e-01  9.93e-02  1.12e-05  6.10e-03  3.94e-04  3.58e-05  3.78e-01  
 14  +4.9790e-01  +5.9419e-01  9.63e-02  8.91e-06  4.87e-03  4.33e-04  2.85e-05  2.56e-01  
 15  +4.9780e-01  +5.9129e-01  9.35e-02  8.37e-06  4.57e-03  3.41e-04  2.68e-05  2.44e-01  
 16  +4.9653e-01  +5.8204e-01  8.55e-02  6.20e-06  3.39e-03  2.65e-04  1.99e-05  4.98e-01  
 17  +4.9567e-01  +5.7595e-01  8.03e-02  5.68e-06  3.10e-03  1.53e-04  1.84e-05  3.84e-01  
 18  +4.9268e-01  +5.6130e-01  6.86e-02  4.12e-06  2.25e-03  1.32e-04  1.35e-05  3.26e-01  
 19  +4.9128e-01  +5.5383e-01  6.25e-02  3.70e-06  2.02e-03  5.97e-05  1.23e-05  4.48e-01  
 20  +4.8858e-01  +5.4141e-01  5.28e-02  2.90e-06  1.58e-03  4.34e-05  9.74e-06  3.02e-01  
 21  +4.8822e-01  +5.3954e-01  5.13e-02  2.76e-06  1.51e-03  2.58e-05  9.30e-06  3.56e-01  
 22  +4.8449e-01  +5.2306e-01  3.86e-02  1.90e-06  1.04e-03  1.30e-05  6.52e-06  4.93e-01  
 23  +4.8408e-01  +5.2130e-01  3.72e-02  1.81e-06  9.85e-04  1.17e-05  6.21e-06  1.12e-01  
 24  +4.8337e-01  +5.1807e-01  3.47e-02  1.61e-06  8.79e-04  4.87e-06  5.54e-06  5.70e-01  
 25  +4.8281e-01  +5.1574e-01  3.29e-02  1.50e-06  8.18e-04  3.16e-06  5.17e-06  3.56e-01  
 26  +4.7911e-01  +5.0040e-01  2.13e-02  9.21e-07  5.03e-04  1.82e-06  3.25e-06  4.29e-01  
 27  +4.7881e-01  +4.9913e-01  2.03e-02  8.72e-07  4.76e-04  1.60e-06  3.08e-06  1.36e-01  
 28  +4.7712e-01  +4.9221e-01  1.51e-02  6.27e-07  3.42e-04  1.00e-06  2.24e-06  4.00e-01  
 29  +4.7705e-01  +4.9192e-01  1.49e-02  6.19e-07  3.38e-04  8.76e-07  2.22e-06  1.33e-01  
 30  +4.7595e-01  +4.8750e-01  1.15e-02  4.73e-07  2.58e-04  5.95e-07  1.71e-06  3.44e-01  
 31  +4.7595e-01  +4.8744e-01  1.15e-02  4.68e-07  2.56e-04  5.31e-07  1.69e-06  1.46e-01  
 32  +4.7411e-01  +4.8020e-01  6.09e-03  2.43e-07  1.32e-04  2.42e-07  8.98e-07  5.62e-01  
 33  +4.7254e-01  +4.7405e-01  1.50e-03  5.89e-08  3.21e-05  2.00e-08  2.24e-07  9.77e-01  
 34  +4.7205e-01  +4.7223e-01  1.77e-04  6.90e-09  3.76e-06  1.91e-09  2.68e-08  9.89e-01  
 35  +4.7198e-01  +4.7198e-01  2.08e-06  8.07e-11  4.40e-08  2.20e-11  3.15e-10  9.88e-01  
 36  +4.7198e-01  +4.7198e-01  2.08e-08  8.07e-13  4.40e-10  2.20e-13  3.15e-12  9.90e-01  
 37  +4.7198e-01  +4.7198e-01  2.09e-10  8.16e-15  4.43e-12  2.94e-15  4.16e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2623225s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:35 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:35 PM: Optimal value: 4.720e-01
(CVXPY) Sep 20 08:08:35 PM: Compilation took 2.610e-01 seconds
(CVXPY) Sep 20 08:08:35 PM: Solver (including time spent in interface) took 1.306e+00 seconds
Iteration: 30, Objective: 0.4720
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:35 PM: Your problem has 25319 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:36 PM: Finished problem compilation (took 3.224e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25319
  constraints   = 50319
  nnz(P)        = 0
  nnz(A)        = 494129
  cones (total) = 1
    : Nonnegative = 1,  numel = 50319

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4256e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3195e-01  +6.1362e+02  6.13e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6015e+02  1.60e+02  1.50e-01  7.84e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2451e+00  7.45e-01  2.23e-03  1.21e+00  2.27e-05  1.93e-01  1.70e-01  
  6  +5.0001e-01  +7.4657e-01  2.47e-01  7.38e-04  4.01e-01  5.96e-06  7.24e-02  7.73e-01  
  7  +5.0001e-01  +6.9531e-01  1.95e-01  5.84e-04  3.18e-01  4.69e-06  4.61e-02  5.46e-01  
  8  +5.0000e-01  +6.6916e-01  1.69e-01  5.05e-04  2.75e-01  4.56e-06  2.27e-02  7.37e-01  
  9  +4.9999e-01  +6.4477e-01  1.45e-01  4.19e-04  2.28e-01  1.00e-05  5.84e-03  8.35e-01  
 10  +4.9925e-01  +6.1474e-01  1.15e-01  3.62e-05  1.98e-02  3.45e-04  1.21e-04  9.90e-01  
 11  +4.9792e-01  +6.0618e-01  1.08e-01  1.36e-05  7.42e-03  8.13e-04  4.43e-05  6.60e-01  
 12  +4.9838e-01  +6.0178e-01  1.03e-01  1.25e-05  6.85e-03  5.54e-04  4.05e-05  3.66e-01  
 13  +4.9884e-01  +5.9326e-01  9.44e-02  1.05e-05  5.75e-03  1.82e-04  3.37e-05  7.44e-01  
 14  +4.9839e-01  +5.8985e-01  9.15e-02  8.31e-06  4.54e-03  1.71e-04  2.66e-05  3.96e-01  
 15  +4.9776e-01  +5.8542e-01  8.77e-02  7.08e-06  3.87e-03  1.23e-04  2.27e-05  4.29e-01  
 16  +4.9656e-01  +5.7930e-01  8.27e-02  5.81e-06  3.17e-03  1.15e-04  1.87e-05  2.72e-01  
 17  +4.9487e-01  +5.7008e-01  7.52e-02  5.12e-06  2.80e-03  3.70e-05  1.67e-05  5.93e-01  
 18  +4.9033e-01  +5.4901e-01  5.87e-02  3.29e-06  1.80e-03  2.28e-05  1.10e-05  5.23e-01  
 19  +4.8852e-01  +5.4104e-01  5.25e-02  2.83e-06  1.54e-03  1.71e-05  9.53e-06  2.43e-01  
 20  +4.8789e-01  +5.3838e-01  5.05e-02  2.69e-06  1.47e-03  1.10e-05  9.11e-06  3.07e-01  
 21  +4.8594e-01  +5.2993e-01  4.40e-02  2.24e-06  1.22e-03  8.62e-06  7.69e-06  2.28e-01  
 22  +4.8451e-01  +5.2379e-01  3.93e-02  1.92e-06  1.05e-03  5.82e-06  6.63e-06  3.32e-01  
 23  +4.8429e-01  +5.2295e-01  3.87e-02  1.88e-06  1.02e-03  4.32e-06  6.51e-06  2.38e-01  
 24  +4.8360e-01  +5.1997e-01  3.64e-02  1.72e-06  9.39e-04  2.87e-06  5.98e-06  3.51e-01  
 25  +4.8173e-01  +5.1206e-01  3.03e-02  1.39e-06  7.59e-04  2.13e-06  4.88e-06  2.68e-01  
 26  +4.8000e-01  +5.0470e-01  2.47e-02  1.09e-06  5.94e-04  1.18e-06  3.85e-06  4.90e-01  
 27  +4.7725e-01  +4.9339e-01  1.61e-02  6.79e-07  3.71e-04  5.67e-07  2.44e-06  5.69e-01  
 28  +4.7716e-01  +4.9300e-01  1.58e-02  6.61e-07  3.61e-04  5.24e-07  2.37e-06  1.12e-01  
 29  +4.7694e-01  +4.9210e-01  1.52e-02  6.30e-07  3.44e-04  4.35e-07  2.27e-06  2.24e-01  
 30  +4.7572e-01  +4.8706e-01  1.13e-02  4.63e-07  2.53e-04  2.31e-07  1.69e-06  6.01e-01  
 31  +4.7503e-01  +4.8433e-01  9.30e-03  3.77e-07  2.06e-04  1.76e-07  1.38e-06  2.98e-01  
 32  +4.7501e-01  +4.8420e-01  9.19e-03  3.71e-07  2.02e-04  1.59e-07  1.36e-06  2.34e-01  
 33  +4.7310e-01  +4.7676e-01  3.66e-03  1.46e-07  7.94e-05  5.81e-08  5.45e-07  6.79e-01  
 34  +4.7217e-01  +4.7317e-01  9.96e-04  3.92e-08  2.14e-05  1.31e-08  1.49e-07  8.84e-01  
 35  +4.7195e-01  +4.7233e-01  3.85e-04  1.47e-08  8.04e-06  4.91e-09  5.60e-08  7.62e-01  
 36  +4.7188e-01  +4.7209e-01  2.06e-04  7.91e-09  4.31e-06  2.42e-09  3.01e-08  7.65e-01  
 37  +4.7180e-01  +4.7181e-01  4.55e-06  1.74e-10  9.47e-08  5.04e-11  6.62e-10  9.86e-01  
 38  +4.7180e-01  +4.7180e-01  4.56e-08  1.74e-12  9.49e-10  5.06e-13  6.65e-12  9.90e-01  
 39  +4.7180e-01  +4.7180e-01  4.67e-10  1.78e-14  9.73e-12  1.15e-14  1.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7758493s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:38 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:38 PM: Optimal value: 4.718e-01
(CVXPY) Sep 20 08:08:38 PM: Compilation took 3.224e-01 seconds
(CVXPY) Sep 20 08:08:38 PM: Solver (including time spent in interface) took 1.834e+00 seconds
Iteration: 31, Objective: 0.4718
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:38 PM: Your problem has 25329 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:38 PM: Finished problem compilation (took 3.327e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25329
  constraints   = 50329
  nnz(P)        = 0
  nnz(A)        = 495999
  cones (total) = 1
    : Nonnegative = 1,  numel = 50329

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8086e-01  +5.4254e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3195e-01  +6.1357e+02  6.13e+02  1.78e-01  9.21e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6013e+02  1.60e+02  1.50e-01  7.83e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7629e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2449e+00  7.45e-01  2.23e-03  1.21e+00  2.27e-05  1.93e-01  1.70e-01  
  6  +5.0001e-01  +7.1553e-01  2.16e-01  6.45e-04  3.51e-01  4.99e-06  6.39e-02  8.20e-01  
  7  +5.0001e-01  +7.0524e-01  2.05e-01  6.14e-04  3.34e-01  4.51e-06  4.68e-02  4.95e-01  
  8  +5.0000e-01  +6.6348e-01  1.63e-01  4.88e-04  2.66e-01  4.44e-06  2.19e-02  7.02e-01  
  9  +4.9998e-01  +6.4033e-01  1.40e-01  4.00e-04  2.17e-01  1.21e-05  4.65e-03  8.74e-01  
 10  +4.9892e-01  +6.1978e-01  1.21e-01  2.71e-05  1.48e-02  4.94e-04  8.97e-05  9.87e-01  
 11  +4.9818e-01  +6.1270e-01  1.15e-01  1.62e-05  8.82e-03  7.09e-04  5.28e-05  4.64e-01  
 12  +4.9871e-01  +6.0068e-01  1.02e-01  1.31e-05  7.15e-03  3.33e-04  4.22e-05  6.38e-01  
 13  +4.9876e-01  +5.9588e-01  9.71e-02  1.11e-05  6.04e-03  2.19e-04  3.54e-05  5.09e-01  
 14  +4.9851e-01  +5.9376e-01  9.52e-02  9.68e-06  5.29e-03  2.10e-04  3.10e-05  2.37e-01  
 15  +4.9677e-01  +5.8131e-01  8.45e-02  5.54e-06  3.02e-03  1.54e-04  1.78e-05  8.14e-01  
 16  +4.9593e-01  +5.7685e-01  8.09e-02  5.24e-06  2.86e-03  1.19e-04  1.69e-05  1.96e-01  
 17  +4.9405e-01  +5.6718e-01  7.31e-02  4.75e-06  2.59e-03  4.41e-05  1.56e-05  5.02e-01  
 18  +4.9085e-01  +5.5234e-01  6.15e-02  3.60e-06  1.96e-03  2.18e-05  1.20e-05  5.09e-01  
 19  +4.8903e-01  +5.4420e-01  5.52e-02  3.08e-06  1.68e-03  1.66e-05  1.04e-05  2.46e-01  
 20  +4.8728e-01  +5.3639e-01  4.91e-02  2.60e-06  1.42e-03  5.58e-06  8.86e-06  5.94e-01  
 21  +4.8555e-01  +5.2894e-01  4.34e-02  2.21e-06  1.21e-03  4.50e-06  7.60e-06  2.09e-01  
 22  +4.8423e-01  +5.2328e-01  3.90e-02  1.93e-06  1.05e-03  3.64e-06  6.66e-06  2.06e-01  
 23  +4.8396e-01  +5.2208e-01  3.81e-02  1.84e-06  1.00e-03  2.04e-06  6.40e-06  4.36e-01  
 24  +4.8328e-01  +5.1911e-01  3.58e-02  1.69e-06  9.24e-04  1.43e-06  5.90e-06  3.30e-01  
 25  +4.8084e-01  +5.0873e-01  2.79e-02  1.27e-06  6.95e-04  1.05e-06  4.50e-06  2.78e-01  
 26  +4.7934e-01  +5.0242e-01  2.31e-02  1.02e-06  5.55e-04  6.93e-07  3.62e-06  4.09e-01  
 27  +4.7753e-01  +4.9483e-01  1.73e-02  7.23e-07  3.94e-04  3.12e-07  2.59e-06  7.20e-01  
 28  +4.7730e-01  +4.9390e-01  1.66e-02  6.88e-07  3.75e-04  2.88e-07  2.46e-06  1.36e-01  
 29  +4.7628e-01  +4.8972e-01  1.34e-02  5.49e-07  3.00e-04  1.71e-07  1.99e-06  7.31e-01  
 30  +4.7500e-01  +4.8462e-01  9.62e-03  3.87e-07  2.11e-04  1.15e-07  1.42e-06  5.78e-01  
 31  +4.7445e-01  +4.8231e-01  7.86e-03  3.12e-07  1.70e-04  8.91e-08  1.14e-06  8.25e-01  
 32  +4.7311e-01  +4.7728e-01  4.17e-03  1.62e-07  8.82e-05  4.73e-08  6.01e-07  5.57e-01  
 33  +4.7194e-01  +4.7290e-01  9.59e-04  3.66e-08  1.99e-05  1.08e-08  1.39e-07  8.59e-01  
 34  +4.7169e-01  +4.7197e-01  2.80e-04  1.07e-08  5.82e-06  3.11e-09  4.06e-08  9.90e-01  
 35  +4.7158e-01  +4.7159e-01  3.58e-06  1.36e-10  7.42e-08  3.96e-11  5.19e-10  9.89e-01  
 36  +4.7158e-01  +4.7158e-01  3.58e-08  1.36e-12  7.42e-10  3.96e-13  5.19e-12  9.90e-01  
 37  +4.7158e-01  +4.7158e-01  3.59e-10  1.37e-14  7.44e-12  4.57e-15  5.95e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5032154s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:40 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:40 PM: Optimal value: 4.716e-01
(CVXPY) Sep 20 08:08:40 PM: Compilation took 3.327e-01 seconds
(CVXPY) Sep 20 08:08:40 PM: Solver (including time spent in interface) took 1.561e+00 seconds
Iteration: 32, Objective: 0.4716
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:40 PM: Your problem has 25331 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:40 PM: Finished problem compilation (took 3.018e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25331
  constraints   = 50331
  nnz(P)        = 0
  nnz(A)        = 497312
  cones (total) = 1
    : Nonnegative = 1,  numel = 50331

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8086e-01  +5.4255e+03  5.42e+03  4.38e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3195e-01  +6.1360e+02  6.13e+02  1.78e-01  9.21e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6014e+02  1.60e+02  1.50e-01  7.83e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7629e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2181e+00  7.18e-01  2.15e-03  1.17e+00  2.27e-05  1.92e-01  1.77e-01  
  6  +5.0001e-01  +7.2976e-01  2.30e-01  6.87e-04  3.74e-01  5.66e-06  6.81e-02  8.02e-01  
  7  +5.0001e-01  +7.0995e-01  2.10e-01  6.28e-04  3.42e-01  4.86e-06  4.85e-02  5.19e-01  
  8  +5.0000e-01  +6.6399e-01  1.64e-01  4.90e-04  2.66e-01  4.58e-06  2.23e-02  7.22e-01  
  9  +4.9999e-01  +6.4353e-01  1.44e-01  4.14e-04  2.25e-01  1.12e-05  5.41e-03  8.48e-01  
 10  +4.9920e-01  +6.1568e-01  1.16e-01  3.58e-05  1.96e-02  3.68e-04  1.20e-04  9.90e-01  
 11  +4.9815e-01  +6.0879e-01  1.11e-01  1.61e-05  8.79e-03  7.35e-04  5.27e-05  5.85e-01  
 12  +4.9859e-01  +5.9939e-01  1.01e-01  1.30e-05  7.12e-03  3.96e-04  4.21e-05  6.10e-01  
 13  +4.9876e-01  +5.9365e-01  9.49e-02  1.06e-05  5.78e-03  1.97e-04  3.39e-05  6.79e-01  
 14  +4.9814e-01  +5.8845e-01  9.03e-02  7.77e-06  4.24e-03  1.56e-04  2.49e-05  5.81e-01  
 15  +4.9543e-01  +5.7373e-01  7.83e-02  4.67e-06  2.55e-03  1.15e-04  1.51e-05  7.06e-01  
 16  +4.9489e-01  +5.7124e-01  7.64e-02  4.59e-06  2.51e-03  9.91e-05  1.49e-05  9.38e-02  
 17  +4.9170e-01  +5.5622e-01  6.45e-02  3.63e-06  1.98e-03  6.90e-05  1.20e-05  3.11e-01  
 18  +4.8963e-01  +5.4689e-01  5.73e-02  3.12e-06  1.70e-03  4.77e-05  1.04e-05  2.76e-01  
 19  +4.8722e-01  +5.3630e-01  4.91e-02  2.56e-06  1.39e-03  2.79e-05  8.67e-06  3.79e-01  
 20  +4.8551e-01  +5.2883e-01  4.33e-02  2.18e-06  1.19e-03  2.22e-05  7.46e-06  2.09e-01  
 21  +4.8433e-01  +5.2372e-01  3.94e-02  1.91e-06  1.04e-03  1.41e-05  6.57e-06  3.55e-01  
 22  +4.8409e-01  +5.2277e-01  3.87e-02  1.87e-06  1.02e-03  1.07e-05  6.47e-06  2.13e-01  
 23  +4.8327e-01  +5.1915e-01  3.59e-02  1.69e-06  9.23e-04  6.91e-06  5.88e-06  3.50e-01  
 24  +4.8081e-01  +5.0868e-01  2.79e-02  1.27e-06  6.92e-04  4.82e-06  4.48e-06  3.05e-01  
 25  +4.7937e-01  +5.0253e-01  2.32e-02  1.02e-06  5.57e-04  2.96e-06  3.62e-06  4.09e-01  
 26  +4.7764e-01  +4.9530e-01  1.77e-02  7.39e-07  4.03e-04  1.01e-06  2.64e-06  7.07e-01  
 27  +4.7734e-01  +4.9407e-01  1.67e-02  6.94e-07  3.78e-04  9.09e-07  2.48e-06  1.23e-01  
 28  +4.7645e-01  +4.9040e-01  1.40e-02  5.69e-07  3.10e-04  2.51e-07  2.05e-06  8.49e-01  
 29  +4.7552e-01  +4.8672e-01  1.12e-02  4.51e-07  2.46e-04  1.87e-07  1.64e-06  3.53e-01  
 30  +4.7372e-01  +4.7946e-01  5.75e-03  2.27e-07  1.24e-04  6.57e-08  8.37e-07  9.84e-01  
 31  +4.7258e-01  +4.7529e-01  2.70e-03  1.04e-07  5.68e-05  3.01e-08  3.91e-07  7.80e-01  
 32  +4.7245e-01  +4.7474e-01  2.29e-03  8.81e-08  4.80e-05  2.54e-08  3.30e-07  5.96e-01  
 33  +4.7176e-01  +4.7222e-01  4.67e-04  1.78e-08  9.70e-06  5.16e-09  6.76e-08  8.37e-01  
 34  +4.7158e-01  +4.7159e-01  6.24e-06  2.37e-10  1.29e-07  6.86e-11  9.05e-10  9.88e-01  
 35  +4.7158e-01  +4.7158e-01  6.24e-08  2.37e-12  1.29e-09  6.87e-13  9.05e-12  9.90e-01  
 36  +4.7158e-01  +4.7158e-01  6.26e-10  2.38e-14  1.30e-11  7.80e-15  1.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3631319s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:42 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:42 PM: Optimal value: 4.716e-01
(CVXPY) Sep 20 08:08:42 PM: Compilation took 3.018e-01 seconds
(CVXPY) Sep 20 08:08:42 PM: Solver (including time spent in interface) took 1.414e+00 seconds
Iteration: 33, Objective: 0.4716
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:42 PM: Your problem has 25332 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:42 PM: Finished problem compilation (took 3.244e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25332
  constraints   = 50332
  nnz(P)        = 0
  nnz(A)        = 497726
  cones (total) = 1
    : Nonnegative = 1,  numel = 50332

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4255e+03  5.42e+03  4.38e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3195e-01  +6.1359e+02  6.13e+02  1.78e-01  9.21e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6014e+02  1.60e+02  1.50e-01  7.83e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7629e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2163e+00  7.16e-01  2.14e-03  1.16e+00  2.27e-05  1.92e-01  1.77e-01  
  6  +5.0001e-01  +7.2735e-01  2.27e-01  6.80e-04  3.70e-01  5.59e-06  6.74e-02  8.07e-01  
  7  +5.0001e-01  +7.1017e-01  2.10e-01  6.29e-04  3.42e-01  4.84e-06  4.84e-02  5.14e-01  
  8  +5.0000e-01  +6.6850e-01  1.68e-01  5.03e-04  2.74e-01  4.59e-06  2.39e-02  6.78e-01  
  9  +4.9999e-01  +6.4425e-01  1.44e-01  4.20e-04  2.28e-01  1.03e-05  6.25e-03  8.13e-01  
 10  +4.9944e-01  +6.1542e-01  1.16e-01  5.13e-05  2.80e-02  2.61e-04  1.74e-04  9.90e-01  
 11  +4.9799e-01  +6.0717e-01  1.09e-01  1.51e-05  8.26e-03  8.17e-04  4.96e-05  7.29e-01  
 12  +4.9826e-01  +5.9963e-01  1.01e-01  1.23e-05  6.71e-03  5.39e-04  3.98e-05  5.27e-01  
 13  +4.9841e-01  +5.9773e-01  9.93e-02  1.19e-05  6.50e-03  4.28e-04  3.84e-05  2.17e-01  
 14  +4.9788e-01  +5.9343e-01  9.56e-02  9.13e-06  4.99e-03  4.36e-04  2.94e-05  3.68e-01  
 15  +4.9764e-01  +5.8979e-01  9.21e-02  8.25e-06  4.51e-03  3.27e-04  2.66e-05  3.28e-01  
 16  +4.9549e-01  +5.7783e-01  8.23e-02  5.43e-06  2.97e-03  3.18e-04  1.76e-05  4.79e-01  
 17  +4.9411e-01  +5.6983e-01  7.57e-02  4.87e-06  2.66e-03  1.85e-04  1.59e-05  3.64e-01  
 18  +4.9109e-01  +5.5440e-01  6.33e-02  3.74e-06  2.04e-03  8.33e-05  1.24e-05  5.23e-01  
 19  +4.8870e-01  +5.4345e-01  5.47e-02  3.03e-06  1.65e-03  5.86e-05  1.02e-05  3.08e-01  
 20  +4.8762e-01  +5.3817e-01  5.05e-02  2.69e-06  1.47e-03  1.83e-05  9.13e-06  5.99e-01  
 21  +4.8584e-01  +5.3039e-01  4.46e-02  2.28e-06  1.24e-03  1.49e-05  7.80e-06  1.98e-01  
 22  +4.8445e-01  +5.2437e-01  3.99e-02  1.97e-06  1.07e-03  1.10e-05  6.78e-06  2.68e-01  
 23  +4.8418e-01  +5.2317e-01  3.90e-02  1.89e-06  1.03e-03  6.30e-06  6.55e-06  3.95e-01  
 24  +4.8338e-01  +5.1963e-01  3.63e-02  1.71e-06  9.34e-04  4.01e-06  5.95e-06  3.66e-01  
 25  +4.8039e-01  +5.0688e-01  2.65e-02  1.20e-06  6.55e-04  2.63e-06  4.24e-06  3.49e-01  
 26  +4.7808e-01  +4.9706e-01  1.90e-02  8.10e-07  4.42e-04  8.68e-07  2.89e-06  7.19e-01  
 27  +4.7715e-01  +4.9328e-01  1.61e-02  6.71e-07  3.66e-04  6.27e-07  2.40e-06  3.35e-01  
 28  +4.7703e-01  +4.9279e-01  1.58e-02  6.59e-07  3.59e-04  5.23e-07  2.37e-06  1.96e-01  
 29  +4.7559e-01  +4.8700e-01  1.14e-02  4.68e-07  2.55e-04  3.42e-07  1.70e-06  3.85e-01  
 30  +4.7560e-01  +4.8705e-01  1.14e-02  4.66e-07  2.54e-04  3.26e-07  1.69e-06  9.30e-02  
 31  +4.7464e-01  +4.8326e-01  8.62e-03  3.46e-07  1.89e-04  2.37e-07  1.27e-06  3.00e-01  
 32  +4.7397e-01  +4.8048e-01  6.52e-03  2.56e-07  1.40e-04  1.01e-07  9.41e-07  8.10e-01  
 33  +4.7261e-01  +4.7539e-01  2.78e-03  1.07e-07  5.84e-05  4.01e-08  4.01e-07  6.73e-01  
 34  +4.7240e-01  +4.7454e-01  2.14e-03  8.23e-08  4.49e-05  2.63e-08  3.09e-07  7.23e-01  
 35  +4.7172e-01  +4.7209e-01  3.68e-04  1.40e-08  7.64e-06  4.45e-09  5.33e-08  8.52e-01  
 36  +4.7158e-01  +4.7159e-01  5.15e-06  1.96e-10  1.07e-07  6.05e-11  7.47e-10  9.90e-01  
 37  +4.7158e-01  +4.7158e-01  5.15e-08  1.96e-12  1.07e-09  6.06e-13  7.47e-12  9.90e-01  
 38  +4.7158e-01  +4.7158e-01  5.17e-10  1.97e-14  1.07e-11  6.92e-15  8.49e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4922767s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:44 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:44 PM: Optimal value: 4.716e-01
(CVXPY) Sep 20 08:08:44 PM: Compilation took 3.244e-01 seconds
(CVXPY) Sep 20 08:08:44 PM: Solver (including time spent in interface) took 1.546e+00 seconds
Iteration: 34, Objective: 0.4716
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:44 PM: Your problem has 25336 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:44 PM: Finished problem compilation (took 3.344e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25336
  constraints   = 50336
  nnz(P)        = 0
  nnz(A)        = 498536
  cones (total) = 1
    : Nonnegative = 1,  numel = 50336

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8086e-01  +5.4255e+03  5.42e+03  4.38e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3195e-01  +6.1356e+02  6.13e+02  1.78e-01  9.21e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6013e+02  1.60e+02  1.50e-01  7.83e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7629e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2201e+00  7.20e-01  2.16e-03  1.17e+00  2.27e-05  1.92e-01  1.76e-01  
  6  +5.0001e-01  +7.1833e-01  2.18e-01  6.53e-04  3.55e-01  5.32e-06  6.50e-02  8.13e-01  
  7  +5.0001e-01  +7.1167e-01  2.12e-01  6.33e-04  3.44e-01  4.79e-06  4.89e-02  4.84e-01  
  8  +5.0000e-01  +6.6697e-01  1.67e-01  4.99e-04  2.71e-01  4.61e-06  2.45e-02  6.43e-01  
  9  +4.9999e-01  +6.4268e-01  1.43e-01  4.15e-04  2.26e-01  1.05e-05  6.09e-03  8.39e-01  
 10  +4.9954e-01  +6.1514e-01  1.16e-01  6.17e-05  3.37e-02  2.14e-04  2.12e-04  9.90e-01  
 11  +4.9834e-01  +6.0810e-01  1.10e-01  1.81e-05  9.88e-03  6.90e-04  5.94e-05  7.33e-01  
 12  +4.9885e-01  +6.0237e-01  1.04e-01  1.66e-05  9.09e-03  4.05e-04  5.40e-05  4.45e-01  
 13  +4.9833e-01  +5.9945e-01  1.01e-01  1.22e-05  6.66e-03  5.11e-04  3.94e-05  2.95e-01  
 14  +4.9886e-01  +5.9278e-01  9.39e-02  1.04e-05  5.70e-03  1.35e-04  3.34e-05  7.95e-01  
 15  +4.9818e-01  +5.8856e-01  9.04e-02  7.76e-06  4.24e-03  1.36e-04  2.48e-05  4.18e-01  
 16  +4.9541e-01  +5.7367e-01  7.83e-02  4.62e-06  2.52e-03  1.09e-04  1.49e-05  6.78e-01  
 17  +4.9464e-01  +5.7011e-01  7.55e-02  4.50e-06  2.46e-03  8.83e-05  1.46e-05  1.27e-01  
 18  +4.9236e-01  +5.5934e-01  6.70e-02  3.84e-06  2.10e-03  6.60e-05  1.26e-05  2.41e-01  
 19  +4.9118e-01  +5.5390e-01  6.27e-02  3.60e-06  1.96e-03  3.58e-05  1.19e-05  3.58e-01  
 20  +4.8907e-01  +5.4446e-01  5.54e-02  3.03e-06  1.65e-03  2.54e-05  1.02e-05  2.83e-01  
 21  +4.8692e-01  +5.3486e-01  4.79e-02  2.49e-06  1.36e-03  4.84e-06  8.47e-06  7.05e-01  
 22  +4.8492e-01  +5.2626e-01  4.13e-02  2.05e-06  1.12e-03  3.28e-06  7.03e-06  3.32e-01  
 23  +4.8435e-01  +5.2385e-01  3.95e-02  1.92e-06  1.05e-03  2.82e-06  6.62e-06  1.54e-01  
 24  +4.8241e-01  +5.1538e-01  3.30e-02  1.52e-06  8.30e-04  1.12e-06  5.28e-06  6.23e-01  
 25  +4.7996e-01  +5.0509e-01  2.51e-02  1.11e-06  6.06e-04  4.96e-07  3.92e-06  6.38e-01  
 26  +4.7822e-01  +4.9762e-01  1.94e-02  8.12e-07  4.43e-04  2.29e-07  2.87e-06  8.69e-01  
 27  +4.7750e-01  +4.9468e-01  1.72e-02  7.10e-07  3.87e-04  2.02e-07  2.52e-06  2.13e-01  
 28  +4.7719e-01  +4.9343e-01  1.62e-02  6.69e-07  3.65e-04  1.81e-07  2.39e-06  5.16e-01  
 29  +4.7609e-01  +4.8896e-01  1.29e-02  5.24e-07  2.86e-04  1.44e-07  1.88e-06  4.01e-01  
 30  +4.7511e-01  +4.8501e-01  9.91e-03  3.97e-07  2.17e-04  1.11e-07  1.44e-06  5.52e-01  
 31  +4.7426e-01  +4.8170e-01  7.44e-03  2.94e-07  1.61e-04  8.33e-08  1.07e-06  5.50e-01  
 32  +4.7279e-01  +4.7604e-01  3.25e-03  1.26e-07  6.88e-05  3.64e-08  4.69e-07  8.82e-01  
 33  +4.7197e-01  +4.7300e-01  1.03e-03  3.95e-08  2.15e-05  1.15e-08  1.49e-07  8.33e-01  
 34  +4.7171e-01  +4.7205e-01  3.33e-04  1.27e-08  6.93e-06  3.70e-09  4.83e-08  9.90e-01  
 35  +4.7158e-01  +4.7159e-01  6.26e-06  2.38e-10  1.30e-07  6.92e-11  9.08e-10  9.88e-01  
 36  +4.7158e-01  +4.7158e-01  6.27e-08  2.38e-12  1.30e-09  6.93e-13  9.09e-12  9.90e-01  
 37  +4.7158e-01  +4.7158e-01  6.30e-10  2.39e-14  1.30e-11  8.37e-15  1.09e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5357607s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:46 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:46 PM: Optimal value: 4.716e-01
(CVXPY) Sep 20 08:08:46 PM: Compilation took 3.344e-01 seconds
(CVXPY) Sep 20 08:08:46 PM: Solver (including time spent in interface) took 1.592e+00 seconds
Iteration: 35, Objective: 0.4716
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:46 PM: Your problem has 25344 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:46 PM: Finished problem compilation (took 3.278e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25344
  constraints   = 50344
  nnz(P)        = 0
  nnz(A)        = 499878
  cones (total) = 1
    : Nonnegative = 1,  numel = 50344

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8086e-01  +5.4256e+03  5.43e+03  4.38e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1354e+02  6.13e+02  1.78e-01  9.21e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6013e+02  1.60e+02  1.50e-01  7.83e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2121e+00  7.12e-01  2.13e-03  1.16e+00  2.27e-05  1.92e-01  1.78e-01  
  6  +5.0001e-01  +7.2112e-01  2.21e-01  6.62e-04  3.60e-01  5.45e-06  6.58e-02  8.13e-01  
  7  +5.0001e-01  +7.1302e-01  2.13e-01  6.37e-04  3.47e-01  4.91e-06  4.96e-02  4.73e-01  
  8  +5.0000e-01  +6.5768e-01  1.58e-01  4.71e-04  2.56e-01  4.80e-06  2.28e-02  6.56e-01  
  9  +4.9999e-01  +6.4475e-01  1.45e-01  4.19e-04  2.28e-01  1.16e-05  5.85e-03  8.45e-01  
 10  +4.9950e-01  +6.1550e-01  1.16e-01  5.97e-05  3.26e-02  2.32e-04  2.06e-04  9.90e-01  
 11  +4.9830e-01  +6.0838e-01  1.10e-01  1.86e-05  1.01e-02  7.02e-04  6.12e-05  7.18e-01  
 12  +4.9841e-01  +6.0719e-01  1.09e-01  1.82e-05  9.97e-03  6.40e-04  6.00e-05  9.87e-02  
 13  +4.9759e-01  +5.9926e-01  1.02e-01  1.12e-05  6.14e-03  7.79e-04  3.66e-05  5.18e-01  
 14  +4.9765e-01  +5.9648e-01  9.88e-02  1.00e-05  5.46e-03  6.42e-04  3.24e-05  3.13e-01  
 15  +4.9742e-01  +5.8995e-01  9.25e-02  8.26e-06  4.51e-03  3.96e-04  2.67e-05  5.28e-01  
 16  +4.9538e-01  +5.7813e-01  8.27e-02  5.56e-06  3.03e-03  3.54e-04  1.80e-05  5.03e-01  
 17  +4.9440e-01  +5.7197e-01  7.76e-02  5.15e-06  2.81e-03  2.16e-04  1.69e-05  3.27e-01  
 18  +4.9062e-01  +5.5282e-01  6.22e-02  3.61e-06  1.97e-03  1.09e-04  1.20e-05  5.35e-01  
 19  +4.8874e-01  +5.4410e-01  5.54e-02  3.06e-06  1.67e-03  8.29e-05  1.03e-05  2.48e-01  
 20  +4.8692e-01  +5.3571e-01  4.88e-02  2.56e-06  1.40e-03  3.80e-05  8.72e-06  4.92e-01  
 21  +4.8402e-01  +5.2290e-01  3.89e-02  1.91e-06  1.04e-03  2.20e-05  6.58e-06  4.22e-01  
 22  +4.8361e-01  +5.2113e-01  3.75e-02  1.81e-06  9.90e-04  1.97e-05  6.27e-06  1.11e-01  
 23  +4.8260e-01  +5.1631e-01  3.37e-02  1.54e-06  8.39e-04  2.22e-06  5.33e-06  8.38e-01  
 24  +4.8022e-01  +5.0641e-01  2.62e-02  1.15e-06  6.30e-04  1.56e-06  4.06e-06  3.10e-01  
 25  +4.7898e-01  +5.0123e-01  2.22e-02  9.60e-07  5.24e-04  1.12e-06  3.40e-06  3.09e-01  
 26  +4.7692e-01  +4.9253e-01  1.56e-02  6.49e-07  3.54e-04  5.24e-07  2.32e-06  6.03e-01  
 27  +4.7682e-01  +4.9215e-01  1.53e-02  6.37e-07  3.47e-04  4.74e-07  2.28e-06  1.23e-01  
 28  +4.7581e-01  +4.8803e-01  1.22e-02  5.00e-07  2.73e-04  2.83e-07  1.80e-06  5.11e-01  
 29  +4.7488e-01  +4.8430e-01  9.42e-03  3.81e-07  2.08e-04  1.95e-07  1.39e-06  3.89e-01  
 30  +4.7431e-01  +4.8185e-01  7.55e-03  3.01e-07  1.64e-04  9.47e-08  1.10e-06  8.84e-01  
 31  +4.7288e-01  +4.7639e-01  3.51e-03  1.38e-07  7.55e-05  4.16e-08  5.14e-07  7.48e-01  
 32  +4.7248e-01  +4.7489e-01  2.41e-03  9.39e-08  5.12e-05  2.85e-08  3.51e-07  4.14e-01  
 33  +4.7218e-01  +4.7379e-01  1.60e-03  6.19e-08  3.38e-05  1.89e-08  2.33e-07  3.98e-01  
 34  +4.7213e-01  +4.7356e-01  1.44e-03  5.55e-08  3.03e-05  1.64e-08  2.09e-07  5.21e-01  
 35  +4.7169e-01  +4.7199e-01  2.96e-04  1.13e-08  6.15e-06  3.36e-09  4.29e-08  8.26e-01  
 36  +4.7160e-01  +4.7166e-01  5.89e-05  2.24e-09  1.22e-06  6.59e-10  8.55e-09  9.08e-01  
 37  +4.7158e-01  +4.7158e-01  5.99e-07  2.27e-11  1.24e-08  6.69e-12  8.68e-11  9.90e-01  
 38  +4.7158e-01  +4.7158e-01  5.99e-09  2.27e-13  1.24e-10  6.69e-14  8.68e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4595036s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:48 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:48 PM: Optimal value: 4.716e-01
(CVXPY) Sep 20 08:08:48 PM: Compilation took 3.278e-01 seconds
(CVXPY) Sep 20 08:08:48 PM: Solver (including time spent in interface) took 1.511e+00 seconds
Iteration: 36, Objective: 0.4716
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:48 PM: Your problem has 25349 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:49 PM: Finished problem compilation (took 3.591e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25349
  constraints   = 50349
  nnz(P)        = 0
  nnz(A)        = 501047
  cones (total) = 1
    : Nonnegative = 1,  numel = 50349

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4256e+03  5.43e+03  4.38e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1353e+02  6.13e+02  1.78e-01  9.21e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6012e+02  1.60e+02  1.50e-01  7.83e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2108e+00  7.11e-01  2.13e-03  1.15e+00  2.27e-05  1.92e-01  1.79e-01  
  6  +5.0001e-01  +7.1619e-01  2.16e-01  6.47e-04  3.52e-01  5.29e-06  6.44e-02  8.23e-01  
  7  +5.0001e-01  +7.1161e-01  2.12e-01  6.33e-04  3.44e-01  4.85e-06  4.91e-02  4.64e-01  
  8  +5.0000e-01  +6.5516e-01  1.55e-01  4.64e-04  2.52e-01  4.90e-06  2.29e-02  6.15e-01  
  9  +4.9999e-01  +6.4826e-01  1.48e-01  4.27e-04  2.32e-01  1.20e-05  5.59e-03  9.06e-01  
 10  +4.9939e-01  +6.1591e-01  1.17e-01  4.88e-05  2.67e-02  2.81e-04  1.66e-04  9.90e-01  
 11  +4.9814e-01  +6.0813e-01  1.10e-01  1.66e-05  9.09e-03  7.53e-04  5.47e-05  6.91e-01  
 12  +4.9828e-01  +6.0675e-01  1.08e-01  1.63e-05  8.92e-03  6.74e-04  5.35e-05  1.14e-01  
 13  +4.9742e-01  +5.9983e-01  1.02e-01  1.06e-05  5.80e-03  8.20e-04  3.45e-05  4.50e-01  
 14  +4.9749e-01  +5.9747e-01  1.00e-01  1.00e-05  5.46e-03  6.86e-04  3.24e-05  2.15e-01  
 15  +4.9688e-01  +5.9236e-01  9.55e-02  8.18e-06  4.47e-03  6.42e-04  2.65e-05  3.10e-01  
 16  +4.9507e-01  +5.7676e-01  8.17e-02  5.53e-06  3.02e-03  3.32e-04  1.80e-05  6.98e-01  
 17  +4.9465e-01  +5.7374e-01  7.91e-02  5.38e-06  2.94e-03  2.41e-04  1.76e-05  2.13e-01  
 18  +4.9187e-01  +5.5986e-01  6.80e-02  4.09e-06  2.23e-03  1.91e-04  1.36e-05  3.18e-01  
 19  +4.8999e-01  +5.5034e-01  6.04e-02  3.47e-06  1.89e-03  1.05e-04  1.16e-05  4.05e-01  
 20  +4.8840e-01  +5.4296e-01  5.46e-02  3.00e-06  1.64e-03  7.70e-05  1.01e-05  2.66e-01  
 21  +4.8692e-01  +5.3587e-01  4.89e-02  2.57e-06  1.40e-03  3.47e-05  8.75e-06  4.97e-01  
 22  +4.8428e-01  +5.2422e-01  3.99e-02  1.97e-06  1.08e-03  2.15e-05  6.81e-06  3.81e-01  
 23  +4.8382e-01  +5.2222e-01  3.84e-02  1.87e-06  1.02e-03  1.85e-05  6.45e-06  1.42e-01  
 24  +4.8212e-01  +5.1457e-01  3.24e-02  1.49e-06  8.14e-04  6.58e-06  5.20e-06  6.24e-01  
 25  +4.7990e-01  +5.0515e-01  2.53e-02  1.12e-06  6.09e-04  2.24e-06  3.95e-06  6.44e-01  
 26  +4.7980e-01  +5.0468e-01  2.49e-02  1.09e-06  5.96e-04  1.87e-06  3.86e-06  1.86e-01  
 27  +4.7709e-01  +4.9341e-01  1.63e-02  6.91e-07  3.77e-04  1.11e-06  2.48e-06  4.24e-01  
 28  +4.7703e-01  +4.9317e-01  1.61e-02  6.80e-07  3.71e-04  1.06e-06  2.44e-06  5.55e-02  
 29  +4.7687e-01  +4.9249e-01  1.56e-02  6.51e-07  3.55e-04  9.06e-07  2.34e-06  1.84e-01  
 30  +4.7647e-01  +4.9079e-01  1.43e-02  5.94e-07  3.24e-04  6.22e-07  2.14e-06  3.57e-01  
 31  +4.7562e-01  +4.8729e-01  1.17e-02  4.79e-07  2.61e-04  3.26e-07  1.74e-06  5.70e-01  
 32  +4.7563e-01  +4.8730e-01  1.17e-02  4.78e-07  2.61e-04  3.18e-07  1.73e-06  4.67e-02  
 33  +4.7394e-01  +4.8060e-01  6.66e-03  2.67e-07  1.46e-04  1.34e-07  9.83e-07  6.85e-01  
 34  +4.7290e-01  +4.7656e-01  3.66e-03  1.45e-07  7.92e-05  6.89e-08  5.41e-07  5.30e-01  
 35  +4.7267e-01  +4.7562e-01  2.95e-03  1.16e-07  6.34e-05  4.75e-08  4.33e-07  4.92e-01  
 36  +4.7238e-01  +4.7453e-01  2.15e-03  8.39e-08  4.58e-05  3.42e-08  3.14e-07  3.11e-01  
 37  +4.7235e-01  +4.7442e-01  2.07e-03  8.08e-08  4.41e-05  2.97e-08  3.03e-07  3.18e-01  
 38  +4.7193e-01  +4.7285e-01  9.16e-04  3.51e-08  1.91e-05  1.17e-08  1.33e-07  7.93e-01  
 39  +4.7162e-01  +4.7174e-01  1.15e-04  4.36e-09  2.38e-06  1.41e-09  1.66e-08  9.06e-01  
 40  +4.7158e-01  +4.7159e-01  1.02e-05  3.88e-10  2.12e-07  1.17e-10  1.48e-09  9.71e-01  
 41  +4.7158e-01  +4.7158e-01  1.03e-07  3.91e-12  2.13e-09  1.18e-12  1.49e-11  9.90e-01  
 42  +4.7158e-01  +4.7158e-01  1.04e-09  3.93e-14  2.15e-11  1.58e-14  1.97e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7248913s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:50 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:50 PM: Optimal value: 4.716e-01
(CVXPY) Sep 20 08:08:50 PM: Compilation took 3.591e-01 seconds
(CVXPY) Sep 20 08:08:50 PM: Solver (including time spent in interface) took 1.782e+00 seconds
Iteration: 37, Objective: 0.4716
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:51 PM: Your problem has 25350 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:51 PM: Finished problem compilation (took 3.103e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25350
  constraints   = 50350
  nnz(P)        = 0
  nnz(A)        = 501167
  cones (total) = 1
    : Nonnegative = 1,  numel = 50350

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4256e+03  5.43e+03  4.38e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1353e+02  6.13e+02  1.78e-01  9.21e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6012e+02  1.60e+02  1.50e-01  7.83e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2063e+00  7.06e-01  2.11e-03  1.15e+00  2.27e-05  1.92e-01  1.80e-01  
  6  +5.0001e-01  +7.1923e-01  2.19e-01  6.56e-04  3.57e-01  5.42e-06  6.53e-02  8.19e-01  
  7  +5.0001e-01  +7.1331e-01  2.13e-01  6.38e-04  3.47e-01  4.92e-06  4.96e-02  4.69e-01  
  8  +5.0000e-01  +6.5585e-01  1.56e-01  4.66e-04  2.53e-01  4.93e-06  2.32e-02  6.12e-01  
  9  +4.9999e-01  +6.4800e-01  1.48e-01  4.26e-04  2.32e-01  1.23e-05  5.50e-03  9.14e-01  
 10  +4.9935e-01  +6.1602e-01  1.17e-01  4.63e-05  2.53e-02  3.01e-04  1.57e-04  9.90e-01  
 11  +4.9814e-01  +6.0824e-01  1.10e-01  1.68e-05  9.17e-03  7.50e-04  5.52e-05  6.73e-01  
 12  +4.9830e-01  +6.0655e-01  1.08e-01  1.64e-05  8.95e-03  6.56e-04  5.37e-05  1.37e-01  
 13  +4.9739e-01  +5.9957e-01  1.02e-01  1.05e-05  5.73e-03  8.16e-04  3.41e-05  4.56e-01  
 14  +4.9746e-01  +5.9778e-01  1.00e-01  1.02e-05  5.55e-03  7.05e-04  3.30e-05  1.49e-01  
 15  +4.9690e-01  +5.9297e-01  9.61e-02  8.37e-06  4.57e-03  6.63e-04  2.72e-05  3.01e-01  
 16  +4.9533e-01  +5.7635e-01  8.10e-02  5.59e-06  3.05e-03  2.24e-04  1.82e-05  8.26e-01  
 17  +4.9498e-01  +5.7430e-01  7.93e-02  5.47e-06  2.99e-03  1.82e-04  1.79e-05  1.52e-01  
 18  +4.9197e-01  +5.5956e-01  6.76e-02  4.06e-06  2.22e-03  1.43e-04  1.35e-05  3.41e-01  
 19  +4.9069e-01  +5.5303e-01  6.23e-02  3.65e-06  1.99e-03  7.14e-05  1.22e-05  4.24e-01  
 20  +4.8879e-01  +5.4429e-01  5.55e-02  3.09e-06  1.68e-03  4.94e-05  1.04e-05  3.04e-01  
 21  +4.8732e-01  +5.3741e-01  5.01e-02  2.66e-06  1.45e-03  1.72e-05  9.04e-06  5.76e-01  
 22  +4.8405e-01  +5.2309e-01  3.90e-02  1.92e-06  1.05e-03  1.10e-05  6.66e-06  3.77e-01  
 23  +4.8366e-01  +5.2139e-01  3.77e-02  1.83e-06  1.00e-03  9.69e-06  6.35e-06  1.24e-01  
 24  +4.8208e-01  +5.1427e-01  3.22e-02  1.47e-06  8.04e-04  2.41e-06  5.13e-06  7.30e-01  
 25  +4.8018e-01  +5.0633e-01  2.62e-02  1.16e-06  6.33e-04  1.14e-06  4.09e-06  5.46e-01  
 26  +4.7942e-01  +5.0315e-01  2.37e-02  1.04e-06  5.66e-04  9.55e-07  3.68e-06  1.86e-01  
 27  +4.7802e-01  +4.9712e-01  1.91e-02  8.01e-07  4.37e-04  3.88e-07  2.85e-06  7.40e-01  
 28  +4.7779e-01  +4.9614e-01  1.84e-02  7.63e-07  4.16e-04  3.44e-07  2.72e-06  2.08e-01  
 29  +4.7650e-01  +4.9086e-01  1.44e-02  5.86e-07  3.20e-04  1.57e-07  2.10e-06  9.71e-01  
 30  +4.7585e-01  +4.8825e-01  1.24e-02  5.03e-07  2.74e-04  1.36e-07  1.81e-06  2.68e-01  
 31  +4.7474e-01  +4.8373e-01  8.99e-03  3.62e-07  1.97e-04  9.88e-08  1.32e-06  6.64e-01  
 32  +4.7403e-01  +4.8092e-01  6.89e-03  2.76e-07  1.50e-04  7.58e-08  1.01e-06  5.17e-01  
 33  +4.7283e-01  +4.7629e-01  3.45e-03  1.37e-07  7.46e-05  3.79e-08  5.10e-07  5.86e-01  
 34  +4.7253e-01  +4.7506e-01  2.52e-03  9.85e-08  5.38e-05  2.79e-08  3.68e-07  8.42e-01  
 35  +4.7235e-01  +4.7437e-01  2.02e-03  7.85e-08  4.28e-05  2.23e-08  2.94e-07  5.91e-01  
 36  +4.7185e-01  +4.7257e-01  7.18e-04  2.74e-08  1.50e-05  7.94e-09  1.04e-07  7.05e-01  
 37  +4.7161e-01  +4.7170e-01  8.58e-05  3.26e-09  1.78e-06  9.46e-10  1.24e-08  9.58e-01  
 38  +4.7158e-01  +4.7159e-01  3.76e-06  1.43e-10  7.78e-08  4.14e-11  5.45e-10  9.74e-01  
 39  +4.7158e-01  +4.7158e-01  3.76e-08  1.43e-12  7.80e-10  4.15e-13  5.46e-12  9.90e-01  
 40  +4.7158e-01  +4.7158e-01  3.79e-10  1.44e-14  7.85e-12  5.59e-15  7.24e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5978465s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:53 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:53 PM: Optimal value: 4.716e-01
(CVXPY) Sep 20 08:08:53 PM: Compilation took 3.103e-01 seconds
(CVXPY) Sep 20 08:08:53 PM: Solver (including time spent in interface) took 1.653e+00 seconds
Iteration: 38, Objective: 0.4716
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:53 PM: Your problem has 25351 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:53 PM: Finished problem compilation (took 3.400e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25351
  constraints   = 50351
  nnz(P)        = 0
  nnz(A)        = 501276
  cones (total) = 1
    : Nonnegative = 1,  numel = 50351

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4256e+03  5.43e+03  4.38e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1353e+02  6.13e+02  1.78e-01  9.21e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6012e+02  1.60e+02  1.50e-01  7.83e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7631e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2034e+00  7.03e-01  2.11e-03  1.14e+00  2.27e-05  1.92e-01  1.81e-01  
  6  +5.0001e-01  +7.1897e-01  2.19e-01  6.55e-04  3.56e-01  5.44e-06  6.52e-02  8.20e-01  
  7  +5.0001e-01  +7.1309e-01  2.13e-01  6.38e-04  3.47e-01  4.94e-06  4.96e-02  4.69e-01  
  8  +5.0000e-01  +6.5564e-01  1.56e-01  4.65e-04  2.53e-01  4.95e-06  2.31e-02  6.13e-01  
  9  +4.9998e-01  +6.4808e-01  1.48e-01  4.26e-04  2.32e-01  1.23e-05  5.49e-03  9.15e-01  
 10  +4.9933e-01  +6.1605e-01  1.17e-01  4.55e-05  2.48e-02  3.07e-04  1.54e-04  9.90e-01  
 11  +4.9812e-01  +6.0820e-01  1.10e-01  1.67e-05  9.12e-03  7.55e-04  5.49e-05  6.69e-01  
 12  +4.9829e-01  +6.0651e-01  1.08e-01  1.63e-05  8.91e-03  6.61e-04  5.34e-05  1.37e-01  
 13  +4.9741e-01  +5.9954e-01  1.02e-01  1.05e-05  5.74e-03  8.08e-04  3.42e-05  4.57e-01  
 14  +4.9748e-01  +5.9778e-01  1.00e-01  1.02e-05  5.58e-03  7.00e-04  3.32e-05  1.45e-01  
 15  +4.9691e-01  +5.9301e-01  9.61e-02  8.41e-06  4.60e-03  6.61e-04  2.73e-05  2.99e-01  
 16  +4.9542e-01  +5.7683e-01  8.14e-02  5.66e-06  3.09e-03  2.26e-04  1.84e-05  8.21e-01  
 17  +4.9504e-01  +5.7468e-01  7.96e-02  5.51e-06  3.01e-03  1.86e-04  1.80e-05  1.48e-01  
 18  +4.9178e-01  +5.5868e-01  6.69e-02  3.98e-06  2.17e-03  1.44e-04  1.32e-05  3.69e-01  
 19  +4.9060e-01  +5.5273e-01  6.21e-02  3.61e-06  1.97e-03  8.27e-05  1.21e-05  3.62e-01  
 20  +4.8875e-01  +5.4423e-01  5.55e-02  3.07e-06  1.68e-03  5.78e-05  1.04e-05  2.95e-01  
 21  +4.8761e-01  +5.3885e-01  5.12e-02  2.74e-06  1.50e-03  2.79e-05  9.31e-06  4.59e-01  
 22  +4.8468e-01  +5.2598e-01  4.13e-02  2.07e-06  1.13e-03  1.96e-05  7.14e-06  3.13e-01  
 23  +4.8369e-01  +5.2173e-01  3.80e-02  1.86e-06  1.02e-03  1.70e-05  6.46e-06  1.46e-01  
 24  +4.8339e-01  +5.2008e-01  3.67e-02  1.73e-06  9.45e-04  5.34e-06  6.05e-06  6.39e-01  
 25  +4.8277e-01  +5.1742e-01  3.46e-02  1.61e-06  8.79e-04  4.00e-06  5.64e-06  2.56e-01  
 26  +4.7945e-01  +5.0326e-01  2.38e-02  1.06e-06  5.78e-04  2.29e-06  3.78e-06  4.31e-01  
 27  +4.7856e-01  +4.9953e-01  2.10e-02  9.14e-07  4.99e-04  1.73e-06  3.27e-06  2.77e-01  
 28  +4.7695e-01  +4.9291e-01  1.60e-02  6.67e-07  3.64e-04  9.26e-07  2.40e-06  5.19e-01  
 29  +4.7689e-01  +4.9262e-01  1.57e-02  6.60e-07  3.60e-04  8.19e-07  2.38e-06  1.23e-01  
 30  +4.7585e-01  +4.8837e-01  1.25e-02  5.18e-07  2.82e-04  5.33e-07  1.88e-06  3.91e-01  
 31  +4.7585e-01  +4.8834e-01  1.25e-02  5.15e-07  2.81e-04  4.95e-07  1.87e-06  1.04e-01  
 32  +4.7510e-01  +4.8534e-01  1.02e-02  4.18e-07  2.28e-04  3.89e-07  1.52e-06  2.33e-01  
 33  +4.7455e-01  +4.8289e-01  8.34e-03  3.35e-07  1.83e-04  1.20e-07  1.23e-06  9.08e-01  
 34  +4.7360e-01  +4.7924e-01  5.63e-03  2.25e-07  1.23e-04  7.63e-08  8.30e-07  4.80e-01  
 35  +4.7271e-01  +4.7582e-01  3.10e-03  1.23e-07  6.70e-05  4.05e-08  4.58e-07  5.60e-01  
 36  +4.7211e-01  +4.7347e-01  1.36e-03  5.31e-08  2.90e-05  1.53e-08  2.00e-07  9.83e-01  
 37  +4.7205e-01  +4.7326e-01  1.21e-03  4.70e-08  2.56e-05  1.35e-08  1.77e-07  2.11e-01  
 38  +4.7202e-01  +4.7315e-01  1.13e-03  4.40e-08  2.40e-05  1.25e-08  1.66e-07  4.08e-01  
 39  +4.7175e-01  +4.7220e-01  4.45e-04  1.70e-08  9.27e-06  4.92e-09  6.45e-08  6.58e-01  
 40  +4.7160e-01  +4.7166e-01  5.99e-05  2.28e-09  1.24e-06  6.63e-10  8.69e-09  8.78e-01  
 41  +4.7158e-01  +4.7158e-01  1.83e-06  6.95e-11  3.79e-08  2.02e-11  2.66e-10  9.90e-01  
 42  +4.7158e-01  +4.7158e-01  1.83e-08  6.96e-13  3.80e-10  2.02e-13  2.66e-12  9.90e-01  
 43  +4.7158e-01  +4.7158e-01  1.85e-10  6.99e-15  3.83e-12  2.95e-15  3.80e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7292947s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:55 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:55 PM: Optimal value: 4.716e-01
(CVXPY) Sep 20 08:08:55 PM: Compilation took 3.400e-01 seconds
(CVXPY) Sep 20 08:08:55 PM: Solver (including time spent in interface) took 1.783e+00 seconds
Iteration: 39, Objective: 0.4716
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:08:55 PM: Your problem has 25352 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:08:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:08:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:08:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:08:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:08:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:08:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:08:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:08:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:08:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:08:56 PM: Finished problem compilation (took 3.641e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25352
  constraints   = 50352
  nnz(P)        = 0
  nnz(A)        = 501388
  cones (total) = 1
    : Nonnegative = 1,  numel = 50352

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8086e-01  +5.4256e+03  5.42e+03  4.38e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1353e+02  6.13e+02  1.78e-01  9.21e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6012e+02  1.60e+02  1.50e-01  7.83e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2022e+00  7.02e-01  2.10e-03  1.14e+00  2.27e-05  1.92e-01  1.81e-01  
  6  +5.0001e-01  +7.1914e-01  2.19e-01  6.56e-04  3.57e-01  5.47e-06  6.53e-02  8.19e-01  
  7  +5.0001e-01  +7.1318e-01  2.13e-01  6.38e-04  3.47e-01  4.96e-06  4.96e-02  4.70e-01  
  8  +5.0000e-01  +6.5560e-01  1.56e-01  4.65e-04  2.53e-01  4.97e-06  2.31e-02  6.13e-01  
  9  +4.9998e-01  +6.4815e-01  1.48e-01  4.26e-04  2.32e-01  1.23e-05  5.51e-03  9.14e-01  
 10  +4.9933e-01  +6.1605e-01  1.17e-01  4.57e-05  2.50e-02  3.07e-04  1.55e-04  9.90e-01  
 11  +4.9813e-01  +6.0822e-01  1.10e-01  1.68e-05  9.16e-03  7.54e-04  5.52e-05  6.69e-01  
 12  +4.9830e-01  +6.0641e-01  1.08e-01  1.64e-05  8.93e-03  6.54e-04  5.36e-05  1.46e-01  
 13  +4.9740e-01  +5.9950e-01  1.02e-01  1.05e-05  5.73e-03  8.10e-04  3.41e-05  4.55e-01  
 14  +4.9747e-01  +5.9780e-01  1.00e-01  1.02e-05  5.59e-03  7.04e-04  3.32e-05  1.37e-01  
 15  +4.9690e-01  +5.9314e-01  9.62e-02  8.44e-06  4.61e-03  6.71e-04  2.74e-05  2.90e-01  
 16  +4.9556e-01  +5.7759e-01  8.20e-02  5.80e-06  3.17e-03  2.23e-04  1.89e-05  8.14e-01  
 17  +4.9491e-01  +5.7393e-01  7.90e-02  5.49e-06  3.00e-03  1.63e-04  1.80e-05  2.41e-01  
 18  +4.9146e-01  +5.5690e-01  6.54e-02  3.88e-06  2.12e-03  1.14e-04  1.29e-05  4.29e-01  
 19  +4.8984e-01  +5.4926e-01  5.94e-02  3.38e-06  1.85e-03  8.18e-05  1.13e-05  2.72e-01  
 20  +4.8835e-01  +5.4249e-01  5.41e-02  2.96e-06  1.62e-03  6.12e-05  1.00e-05  2.47e-01  
 21  +4.8696e-01  +5.3600e-01  4.90e-02  2.57e-06  1.41e-03  2.96e-05  8.77e-06  4.66e-01  
 22  +4.8428e-01  +5.2425e-01  4.00e-02  1.97e-06  1.08e-03  1.83e-05  6.83e-06  3.80e-01  
 23  +4.8381e-01  +5.2222e-01  3.84e-02  1.87e-06  1.02e-03  1.62e-05  6.48e-06  1.20e-01  
 24  +4.8235e-01  +5.1541e-01  3.31e-02  1.50e-06  8.21e-04  1.73e-07  5.24e-06  9.30e-01  
 25  +4.8041e-01  +5.0739e-01  2.70e-02  1.19e-06  6.49e-04  1.68e-07  4.19e-06  3.84e-01  
 26  +4.7920e-01  +5.0232e-01  2.31e-02  1.00e-06  5.47e-04  1.52e-07  3.56e-06  2.29e-01  
 27  +4.7739e-01  +4.9441e-01  1.70e-02  7.04e-07  3.84e-04  1.72e-07  2.52e-06  9.56e-01  
 28  +4.7727e-01  +4.9398e-01  1.67e-02  6.94e-07  3.79e-04  1.69e-07  2.49e-06  1.40e-01  
 29  +4.7614e-01  +4.8940e-01  1.33e-02  5.46e-07  2.98e-04  1.36e-07  1.98e-06  4.00e-01  
 30  +4.7553e-01  +4.8694e-01  1.14e-02  4.65e-07  2.54e-04  1.19e-07  1.69e-06  3.60e-01  
 31  +4.7509e-01  +4.8504e-01  9.96e-03  4.02e-07  2.19e-04  1.08e-07  1.46e-06  8.07e-01  
 32  +4.7427e-01  +4.8185e-01  7.58e-03  3.04e-07  1.66e-04  8.25e-08  1.12e-06  2.74e-01  
 33  +4.7400e-01  +4.8078e-01  6.77e-03  2.71e-07  1.48e-04  7.41e-08  9.97e-07  4.49e-01  
 34  +4.7294e-01  +4.7667e-01  3.74e-03  1.48e-07  8.07e-05  4.10e-08  5.51e-07  5.62e-01  
 35  +4.7264e-01  +4.7555e-01  2.90e-03  1.14e-07  6.22e-05  3.20e-08  4.26e-07  3.70e-01  
 36  +4.7263e-01  +4.7549e-01  2.86e-03  1.13e-07  6.17e-05  3.13e-08  4.23e-07  8.63e-02  
 37  +4.7208e-01  +4.7341e-01  1.34e-03  5.20e-08  2.84e-05  1.48e-08  1.96e-07  6.19e-01  
 38  +4.7164e-01  +4.7180e-01  1.62e-04  6.24e-09  3.41e-06  1.75e-09  2.38e-08  9.54e-01  
 39  +4.7159e-01  +4.7162e-01  2.56e-05  9.90e-10  5.40e-07  2.78e-10  3.78e-09  9.12e-01  
 40  +4.7158e-01  +4.7158e-01  2.67e-07  1.03e-11  5.61e-09  2.89e-12  3.93e-11  9.90e-01  
 41  +4.7158e-01  +4.7158e-01  2.67e-09  1.03e-13  5.61e-11  2.89e-14  3.93e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6077973s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:08:57 PM: Problem status: optimal
(CVXPY) Sep 20 08:08:57 PM: Optimal value: 4.716e-01
(CVXPY) Sep 20 08:08:57 PM: Compilation took 3.641e-01 seconds
(CVXPY) Sep 20 08:08:57 PM: Solver (including time spent in interface) took 1.660e+00 seconds
FULL MODEL:
  Accruacy: 0.50692
  Our objective: 0.013840000000000019

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.00256)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.00044)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.00048)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.00068)
 OR (x1 = 1 AND x5 = 0)                                                                              <-- (term's our objective: 0.00968)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 94.59201264381409
Best over terms:
  Our final objective: 0.00968000000000005
    Its accruacy: 0.50484
    Its hamming distance: 9
  Shortest hamming distance: 1
    Its our objective: 0.002559999999999951
  Highest accruacy: 0.50484
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

