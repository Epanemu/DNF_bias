Command:
python test_script.py -s constant_subclass -d 9 -n 1000 --seed 43 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 9.

Computed total variation: 0.504
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:05 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:05 PM: Finished problem compilation (took 7.540e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 6019
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9998e-01  +5.0066e+02  5.00e+02  9.56e-01  3.58e+01  1.00e+00  1.00e+00   ------   
  1  +5.8066e-01  +1.0887e+02  1.08e+02  4.15e-01  2.30e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3057e-01  +1.2495e+01  1.20e+01  1.44e-01  1.01e+01  1.65e-02  2.72e-01  9.47e-01  
  3  +5.0625e-01  +3.1610e+00  2.65e+00  5.55e-02  3.80e+00  4.19e-05  2.38e-01  4.45e-01  
  4  +5.0042e-01  +6.5643e-01  1.56e-01  3.49e-03  2.53e-01  8.93e-06  4.94e-02  9.61e-01  
  5  +5.0011e-01  +5.8281e-01  8.27e-02  1.78e-03  1.29e-01  9.73e-06  1.38e-02  8.01e-01  
  6  +4.9808e-01  +6.0112e-01  1.03e-01  4.76e-04  3.50e-02  8.91e-05  1.55e-03  9.30e-01  
  7  +4.9217e-01  +5.5918e-01  6.70e-02  1.70e-04  1.25e-02  1.05e-04  5.56e-04  6.94e-01  
  8  +4.8262e-01  +5.0679e-01  2.42e-02  5.59e-05  4.11e-03  1.27e-05  2.07e-04  7.90e-01  
  9  +4.7668e-01  +4.8143e-01  4.76e-03  9.65e-06  7.09e-04  2.17e-06  3.92e-05  8.26e-01  
 10  +4.7518e-01  +4.7539e-01  2.11e-04  4.17e-07  3.06e-05  9.69e-08  1.74e-06  9.90e-01  
 11  +4.7510e-01  +4.7510e-01  2.12e-06  4.17e-09  3.06e-07  9.71e-10  1.75e-08  9.90e-01  
 12  +4.7510e-01  +4.7510e-01  2.12e-08  4.17e-11  3.06e-09  9.73e-12  1.75e-10  9.90e-01  
 13  +4.7510e-01  +4.7510e-01  2.12e-10  4.17e-13  3.06e-11  9.75e-14  1.75e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.3856ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:05 PM: Optimal value: 4.751e-01
(CVXPY) Sep 20 07:57:05 PM: Compilation took 7.540e-03 seconds
(CVXPY) Sep 20 07:57:05 PM: Solver (including time spent in interface) took 8.511e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4751
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:05 PM: Your problem has 529 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:05 PM: Finished problem compilation (took 6.516e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 529
  constraints   = 1029
  nnz(P)        = 0
  nnz(A)        = 6764
  cones (total) = 1
    : Nonnegative = 1,  numel = 1029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9984e-01  +5.0142e+02  5.01e+02  9.56e-01  3.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.7912e-01  +1.0908e+02  1.09e+02  4.18e-01  2.33e+01  3.78e-03  5.77e-01  5.86e-01  
  2  +5.2908e-01  +1.2208e+01  1.17e+01  1.41e-01  1.00e+01  1.68e-02  2.67e-01  9.66e-01  
  3  +5.0570e-01  +3.0408e+00  2.54e+00  5.33e-02  3.73e+00  4.34e-05  2.24e-01  5.22e-01  
  4  +5.0115e-01  +1.0312e+00  5.30e-01  1.19e-02  8.66e-01  1.49e-05  1.00e-01  6.33e-01  
  5  +4.9987e-01  +7.2091e-01  2.21e-01  4.56e-03  3.37e-01  1.58e-05  2.43e-02  8.18e-01  
  6  +4.9249e-01  +6.8261e-01  1.90e-01  8.78e-04  6.65e-02  1.05e-04  2.61e-03  9.08e-01  
  7  +4.8661e-01  +6.3364e-01  1.47e-01  5.95e-04  4.48e-02  7.52e-05  1.80e-03  4.31e-01  
  8  +4.8549e-01  +6.3245e-01  1.47e-01  5.07e-04  3.82e-02  7.99e-05  1.52e-03  2.63e-01  
  9  +4.8228e-01  +6.2084e-01  1.39e-01  3.67e-04  2.76e-02  7.78e-05  1.10e-03  5.36e-01  
 10  +4.7607e-01  +5.8829e-01  1.12e-01  2.44e-04  1.83e-02  5.28e-05  7.43e-04  8.94e-01  
 11  +4.6584e-01  +5.4217e-01  7.63e-02  1.52e-04  1.14e-02  3.61e-05  4.76e-04  7.37e-01  
 12  +4.5340e-01  +4.8758e-01  3.42e-02  6.41e-05  4.80e-03  1.73e-05  2.10e-04  9.90e-01  
 13  +4.4213e-01  +4.4637e-01  4.25e-03  7.38e-06  5.53e-04  1.73e-06  2.56e-05  9.17e-01  
 14  +4.4033e-01  +4.4041e-01  7.44e-05  1.27e-07  9.55e-06  3.59e-08  4.53e-07  9.90e-01  
 15  +4.4030e-01  +4.4030e-01  7.44e-07  1.27e-09  9.54e-08  3.58e-10  4.53e-09  9.90e-01  
 16  +4.4030e-01  +4.4030e-01  7.44e-09  1.27e-11  9.54e-10  3.59e-12  4.54e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.3417ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:05 PM: Optimal value: 4.403e-01
(CVXPY) Sep 20 07:57:05 PM: Compilation took 6.516e-03 seconds
(CVXPY) Sep 20 07:57:05 PM: Solver (including time spent in interface) took 1.151e-02 seconds
Iteration: 2, Objective: 0.4403
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:05 PM: Your problem has 539 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:05 PM: Finished problem compilation (took 6.669e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 539
  constraints   = 1039
  nnz(P)        = 0
  nnz(A)        = 7226
  cones (total) = 1
    : Nonnegative = 1,  numel = 1039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9978e-01  +5.0120e+02  5.01e+02  9.56e-01  3.66e+01  1.00e+00  1.01e+00   ------   
  1  +5.7822e-01  +1.0906e+02  1.08e+02  4.19e-01  2.33e+01  3.78e-03  5.77e-01  5.86e-01  
  2  +5.2819e-01  +1.2025e+01  1.15e+01  1.39e-01  9.82e+00  1.70e-02  2.62e-01  9.77e-01  
  3  +5.0537e-01  +2.9632e+00  2.46e+00  5.19e-02  3.65e+00  4.45e-05  2.14e-01  5.75e-01  
  4  +5.0100e-01  +1.0251e+00  5.24e-01  1.18e-02  8.62e-01  1.59e-05  8.66e-02  6.61e-01  
  5  +4.9898e-01  +8.6302e-01  3.64e-01  5.56e-03  4.17e-01  3.50e-05  1.94e-02  8.34e-01  
  6  +4.9276e-01  +7.9953e-01  3.07e-01  1.83e-03  1.40e-01  8.83e-05  5.37e-03  7.34e-01  
  7  +4.8926e-01  +7.7815e-01  2.89e-01  1.31e-03  9.95e-02  9.36e-05  3.80e-03  5.35e-01  
  8  +4.7942e-01  +7.1348e-01  2.34e-01  7.16e-04  5.42e-02  1.04e-04  2.11e-03  4.90e-01  
  9  +4.7050e-01  +6.6066e-01  1.90e-01  4.87e-04  3.68e-02  8.17e-05  1.46e-03  7.03e-01  
 10  +4.5124e-01  +5.5922e-01  1.08e-01  2.45e-04  1.84e-02  4.23e-05  7.77e-04  8.38e-01  
 11  +4.4096e-01  +5.1321e-01  7.23e-02  1.54e-04  1.15e-02  2.92e-05  5.02e-04  4.63e-01  
 12  +4.2575e-01  +4.4690e-01  2.11e-02  4.20e-05  3.14e-03  8.51e-06  1.44e-04  7.79e-01  
 13  +4.1985e-01  +4.2261e-01  2.76e-03  5.34e-06  3.99e-04  1.25e-06  1.88e-05  9.11e-01  
 14  +4.1896e-01  +4.1900e-01  3.60e-05  6.96e-08  5.19e-06  1.70e-08  2.46e-07  9.89e-01  
 15  +4.1895e-01  +4.1895e-01  3.60e-07  6.96e-10  5.19e-08  1.70e-10  2.46e-09  9.90e-01  
 16  +4.1895e-01  +4.1895e-01  3.60e-09  6.96e-12  5.19e-10  1.70e-12  2.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.2391ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:05 PM: Optimal value: 4.190e-01
(CVXPY) Sep 20 07:57:05 PM: Compilation took 6.669e-03 seconds
(CVXPY) Sep 20 07:57:05 PM: Solver (including time spent in interface) took 1.153e-02 seconds
Iteration: 3, Objective: 0.4190
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:05 PM: Your problem has 549 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:05 PM: Finished problem compilation (took 6.017e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 549
  constraints   = 1049
  nnz(P)        = 0
  nnz(A)        = 7531
  cones (total) = 1
    : Nonnegative = 1,  numel = 1049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9971e-01  +5.0129e+02  5.01e+02  9.56e-01  3.66e+01  1.00e+00  1.01e+00   ------   
  1  +5.7668e-01  +1.0914e+02  1.09e+02  4.20e-01  2.32e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2709e-01  +1.1854e+01  1.13e+01  1.36e-01  9.61e+00  1.72e-02  2.58e-01  9.90e-01  
  3  +5.0525e-01  +2.9152e+00  2.41e+00  5.14e-02  3.62e+00  4.75e-05  1.99e-01  6.38e-01  
  4  +5.0086e-01  +1.0618e+00  5.61e-01  1.26e-02  9.25e-01  1.93e-05  7.56e-02  6.70e-01  
  5  +4.9470e-01  +1.0081e+00  5.13e-01  3.81e-03  2.91e-01  9.33e-05  1.07e-02  9.17e-01  
  6  +4.8548e-01  +8.7673e-01  3.91e-01  1.84e-03  1.40e-01  1.07e-04  5.20e-03  5.76e-01  
  7  +4.7404e-01  +8.0354e-01  3.30e-01  9.49e-04  7.20e-02  1.30e-04  2.72e-03  7.19e-01  
  8  +4.6079e-01  +7.1137e-01  2.51e-01  6.05e-04  4.58e-02  1.06e-04  1.79e-03  6.60e-01  
  9  +4.2810e-01  +5.1754e-01  8.94e-02  1.98e-04  1.49e-02  2.78e-05  6.50e-04  8.33e-01  
 10  +4.2400e-01  +4.9968e-01  7.57e-02  1.62e-04  1.22e-02  2.66e-05  5.38e-04  3.04e-01  
 11  +4.0689e-01  +4.2467e-01  1.78e-02  3.59e-05  2.69e-03  8.22e-06  1.26e-04  9.17e-01  
 12  +4.0225e-01  +4.0616e-01  3.90e-03  7.59e-06  5.69e-04  2.07e-06  2.74e-05  8.81e-01  
 13  +4.0082e-01  +4.0115e-01  3.27e-04  6.08e-07  4.56e-05  1.81e-07  2.28e-06  9.66e-01  
 14  +4.0070e-01  +4.0071e-01  3.95e-06  7.33e-09  5.49e-07  2.19e-09  2.76e-08  9.88e-01  
 15  +4.0070e-01  +4.0070e-01  3.95e-08  7.33e-11  5.49e-09  2.19e-11  2.76e-10  9.90e-01  
 16  +4.0070e-01  +4.0070e-01  3.96e-10  7.33e-13  5.49e-11  2.20e-13  2.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.1439ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:05 PM: Optimal value: 4.007e-01
(CVXPY) Sep 20 07:57:05 PM: Compilation took 6.017e-03 seconds
(CVXPY) Sep 20 07:57:05 PM: Solver (including time spent in interface) took 1.051e-02 seconds
Iteration: 4, Objective: 0.4007
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:05 PM: Your problem has 559 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:05 PM: Finished problem compilation (took 6.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 559
  constraints   = 1059
  nnz(P)        = 0
  nnz(A)        = 7821
  cones (total) = 1
    : Nonnegative = 1,  numel = 1059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9968e-01  +5.0130e+02  5.01e+02  9.56e-01  3.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.7602e-01  +1.0914e+02  1.09e+02  4.22e-01  2.31e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2671e-01  +1.1918e+01  1.14e+01  1.36e-01  9.50e+00  1.73e-02  2.57e-01  9.90e-01  
  3  +5.0548e-01  +2.8387e+00  2.33e+00  5.08e-02  3.60e+00  5.03e-05  1.81e-01  6.99e-01  
  4  +5.0086e-01  +1.1179e+00  6.17e-01  1.40e-02  1.03e+00  2.47e-05  7.17e-02  6.54e-01  
  5  +4.9301e-01  +1.1000e+00  6.07e-01  3.76e-03  2.89e-01  1.28e-04  1.03e-02  9.26e-01  
  6  +4.7895e-01  +8.9798e-01  4.19e-01  1.58e-03  1.21e-01  1.40e-04  4.37e-03  6.44e-01  
  7  +4.6633e-01  +8.1693e-01  3.51e-01  9.56e-04  7.29e-02  1.46e-04  2.71e-03  5.02e-01  
  8  +4.4846e-01  +6.7785e-01  2.29e-01  5.82e-04  4.41e-02  8.68e-05  1.74e-03  6.95e-01  
  9  +4.1798e-01  +5.0738e-01  8.94e-02  1.99e-04  1.50e-02  3.18e-05  6.53e-04  7.46e-01  
 10  +4.1152e-01  +4.7833e-01  6.68e-02  1.44e-04  1.08e-02  2.54e-05  4.81e-04  3.53e-01  
 11  +3.9809e-01  +4.1859e-01  2.05e-02  4.17e-05  3.13e-03  9.67e-06  1.48e-04  8.58e-01  
 12  +3.9209e-01  +3.9555e-01  3.46e-03  6.64e-06  4.99e-04  1.89e-06  2.47e-05  9.34e-01  
 13  +3.9123e-01  +3.9232e-01  1.09e-03  2.07e-06  1.55e-04  6.07e-07  7.76e-06  7.60e-01  
 14  +3.9088e-01  +3.9109e-01  2.07e-04  3.86e-07  2.89e-05  1.16e-07  1.47e-06  8.75e-01  
 15  +3.9080e-01  +3.9080e-01  3.13e-06  5.82e-09  4.36e-07  1.76e-09  2.22e-08  9.86e-01  
 16  +3.9080e-01  +3.9080e-01  3.13e-08  5.82e-11  4.36e-09  1.76e-11  2.22e-10  9.90e-01  
 17  +3.9080e-01  +3.9080e-01  3.13e-10  5.82e-13  4.36e-11  1.77e-13  2.23e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.7623ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:05 PM: Optimal value: 3.908e-01
(CVXPY) Sep 20 07:57:05 PM: Compilation took 6.008e-03 seconds
(CVXPY) Sep 20 07:57:05 PM: Solver (including time spent in interface) took 1.303e-02 seconds
Iteration: 5, Objective: 0.3908
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:05 PM: Your problem has 569 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:05 PM: Finished problem compilation (took 6.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 569
  constraints   = 1069
  nnz(P)        = 0
  nnz(A)        = 8112
  cones (total) = 1
    : Nonnegative = 1,  numel = 1069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0152e+02  5.01e+02  9.57e-01  3.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.7476e-01  +1.0919e+02  1.09e+02  4.23e-01  2.29e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2582e-01  +1.2031e+01  1.15e+01  1.36e-01  9.42e+00  1.74e-02  2.56e-01  9.90e-01  
  3  +5.0567e-01  +2.5190e+00  2.01e+00  4.48e-02  3.24e+00  5.48e-05  1.43e-01  8.25e-01  
  4  +5.0021e-01  +1.1087e+00  6.08e-01  1.25e-02  9.30e-01  4.81e-05  4.46e-02  7.46e-01  
  5  +4.8809e-01  +1.0479e+00  5.60e-01  2.70e-03  2.09e-01  2.27e-04  7.13e-03  8.63e-01  
  6  +4.7127e-01  +8.9295e-01  4.22e-01  1.42e-03  1.09e-01  2.02e-04  3.91e-03  5.87e-01  
  7  +4.5165e-01  +7.7344e-01  3.22e-01  8.52e-04  6.49e-02  1.61e-04  2.45e-03  5.44e-01  
  8  +4.2293e-01  +5.9789e-01  1.75e-01  4.42e-04  3.33e-02  6.61e-05  1.40e-03  6.52e-01  
  9  +3.9886e-01  +4.7239e-01  7.35e-02  1.71e-04  1.28e-02  2.71e-05  5.89e-04  6.76e-01  
 10  +3.9689e-01  +4.6421e-01  6.73e-02  1.53e-04  1.15e-02  2.59e-05  5.32e-04  1.98e-01  
 11  +3.8559e-01  +4.1382e-01  2.82e-02  6.06e-05  4.53e-03  1.16e-05  2.24e-04  6.87e-01  
 12  +3.7763e-01  +3.7956e-01  1.93e-03  3.99e-06  2.98e-04  8.10e-07  1.57e-05  9.56e-01  
 13  +3.7701e-01  +3.7703e-01  2.06e-05  4.26e-08  3.18e-06  8.66e-09  1.68e-07  9.89e-01  
 14  +3.7700e-01  +3.7700e-01  2.06e-07  4.26e-10  3.18e-08  8.66e-11  1.68e-09  9.90e-01  
 15  +3.7700e-01  +3.7700e-01  2.06e-09  4.26e-12  3.18e-10  8.68e-13  1.68e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.138ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:05 PM: Optimal value: 3.770e-01
(CVXPY) Sep 20 07:57:05 PM: Compilation took 6.508e-03 seconds
(CVXPY) Sep 20 07:57:05 PM: Solver (including time spent in interface) took 1.351e-02 seconds
Iteration: 6, Objective: 0.3770
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:05 PM: Your problem has 579 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:05 PM: Finished problem compilation (took 6.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 579
  constraints   = 1079
  nnz(P)        = 0
  nnz(A)        = 8312
  cones (total) = 1
    : Nonnegative = 1,  numel = 1079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0149e+02  5.01e+02  9.57e-01  3.64e+01  1.00e+00  1.01e+00   ------   
  1  +5.7408e-01  +1.0919e+02  1.09e+02  4.24e-01  2.28e+01  3.79e-03  5.78e-01  5.85e-01  
  2  +5.2528e-01  +1.2104e+01  1.16e+01  1.36e-01  9.33e+00  1.75e-02  2.56e-01  9.90e-01  
  3  +5.0585e-01  +2.3464e+00  1.84e+00  4.07e-02  2.98e+00  5.80e-05  1.23e-01  8.70e-01  
  4  +4.9963e-01  +1.0974e+00  5.98e-01  9.60e-03  7.30e-01  8.46e-05  2.85e-02  8.46e-01  
  5  +4.8754e-01  +1.0144e+00  5.27e-01  2.36e-03  1.84e-01  2.97e-04  6.10e-03  7.98e-01  
  6  +4.7121e-01  +9.1029e-01  4.39e-01  1.38e-03  1.07e-01  2.92e-04  3.68e-03  5.17e-01  
  7  +4.3705e-01  +7.0512e-01  2.68e-01  6.65e-04  5.09e-02  1.68e-04  1.92e-03  5.87e-01  
  8  +4.0261e-01  +5.2360e-01  1.21e-01  2.89e-04  2.19e-02  5.69e-05  9.49e-04  6.13e-01  
  9  +3.9448e-01  +4.8759e-01  9.31e-02  2.15e-04  1.63e-02  4.41e-05  7.31e-04  2.82e-01  
 10  +3.8403e-01  +4.4052e-01  5.65e-02  1.27e-04  9.60e-03  2.92e-05  4.56e-04  8.97e-01  
 11  +3.7265e-01  +3.9088e-01  1.82e-02  3.97e-05  3.02e-03  9.11e-06  1.53e-04  6.81e-01  
 12  +3.6737e-01  +3.6792e-01  5.50e-04  1.19e-06  9.02e-05  2.52e-07  4.75e-06  9.74e-01  
 13  +3.6720e-01  +3.6721e-01  5.51e-06  1.19e-08  9.03e-07  2.52e-09  4.77e-08  9.90e-01  
 14  +3.6720e-01  +3.6720e-01  5.51e-08  1.19e-10  9.03e-09  2.52e-11  4.77e-10  9.90e-01  
 15  +3.6720e-01  +3.6720e-01  5.52e-10  1.19e-12  9.04e-11  2.53e-13  4.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.3441ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:05 PM: Optimal value: 3.672e-01
(CVXPY) Sep 20 07:57:05 PM: Compilation took 6.005e-03 seconds
(CVXPY) Sep 20 07:57:05 PM: Solver (including time spent in interface) took 1.405e-02 seconds
Iteration: 7, Objective: 0.3672
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:06 PM: Your problem has 589 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:06 PM: Finished problem compilation (took 6.215e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 589
  constraints   = 1089
  nnz(P)        = 0
  nnz(A)        = 8498
  cones (total) = 1
    : Nonnegative = 1,  numel = 1089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9957e-01  +5.0195e+02  5.01e+02  9.57e-01  3.63e+01  1.00e+00  1.01e+00   ------   
  1  +5.7289e-01  +1.0926e+02  1.09e+02  4.25e-01  2.26e+01  3.79e-03  5.78e-01  5.86e-01  
  2  +5.2484e-01  +1.2177e+01  1.17e+01  1.36e-01  9.22e+00  1.76e-02  2.55e-01  9.90e-01  
  3  +5.0594e-01  +2.2042e+00  1.70e+00  3.69e-02  2.72e+00  6.08e-05  1.08e-01  8.99e-01  
  4  +5.0218e-01  +1.7427e+00  1.24e+00  1.44e-02  1.11e+00  1.44e-04  3.73e-02  7.36e-01  
  5  +4.9119e-01  +1.4920e+00  1.00e+00  4.20e-03  3.28e-01  3.11e-04  1.05e-02  7.39e-01  
  6  +4.7008e-01  +1.0348e+00  5.65e-01  2.03e-03  1.56e-01  1.64e-04  5.46e-03  6.59e-01  
  7  +4.5414e-01  +9.3002e-01  4.76e-01  1.28e-03  9.85e-02  1.73e-04  3.53e-03  4.29e-01  
  8  +4.2299e-01  +6.7914e-01  2.56e-01  6.99e-04  5.29e-02  7.82e-05  2.15e-03  7.19e-01  
  9  +4.0600e-01  +5.8708e-01  1.81e-01  4.61e-04  3.48e-02  5.42e-05  1.49e-03  3.28e-01  
 10  +3.8143e-01  +4.6006e-01  7.86e-02  1.83e-04  1.38e-02  2.57e-05  6.48e-04  6.88e-01  
 11  +3.7580e-01  +4.3428e-01  5.85e-02  1.34e-04  1.01e-02  2.13e-05  4.91e-04  4.31e-01  
 12  +3.6433e-01  +3.8393e-01  1.96e-02  4.30e-05  3.27e-03  7.22e-06  1.70e-04  7.03e-01  
 13  +3.5863e-01  +3.5933e-01  6.99e-04  1.51e-06  1.15e-04  2.41e-07  6.27e-06  9.72e-01  
 14  +3.5840e-01  +3.5841e-01  7.02e-06  1.51e-08  1.15e-06  2.42e-09  6.32e-08  9.90e-01  
 15  +3.5840e-01  +3.5840e-01  7.02e-08  1.51e-10  1.15e-08  2.42e-11  6.32e-10  9.90e-01  
 16  +3.5840e-01  +3.5840e-01  7.03e-10  1.52e-12  1.15e-10  2.42e-13  6.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.882ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:06 PM: Optimal value: 3.584e-01
(CVXPY) Sep 20 07:57:06 PM: Compilation took 6.215e-03 seconds
(CVXPY) Sep 20 07:57:06 PM: Solver (including time spent in interface) took 1.459e-02 seconds
Iteration: 8, Objective: 0.3584
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:06 PM: Your problem has 599 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:06 PM: Finished problem compilation (took 6.540e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 599
  constraints   = 1099
  nnz(P)        = 0
  nnz(A)        = 8629
  cones (total) = 1
    : Nonnegative = 1,  numel = 1099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9953e-01  +5.0207e+02  5.02e+02  9.57e-01  3.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.7150e-01  +1.0929e+02  1.09e+02  4.26e-01  2.25e+01  3.79e-03  5.77e-01  5.86e-01  
  2  +5.2404e-01  +1.2290e+01  1.18e+01  1.36e-01  9.14e+00  1.78e-02  2.54e-01  9.90e-01  
  3  +5.0683e-01  +2.4179e+00  1.91e+00  3.87e-02  2.86e+00  7.89e-04  1.04e-01  8.29e-01  
  4  +5.0604e-01  +2.3591e+00  1.85e+00  2.62e-02  1.99e+00  1.29e-03  6.53e-02  4.14e-01  
  5  +5.0256e-01  +2.1378e+00  1.64e+00  2.12e-02  1.59e+00  7.12e-04  5.76e-02  4.30e-01  
  6  +4.9068e-01  +1.5662e+00  1.08e+00  4.18e-03  3.27e-01  1.83e-03  1.02e-02  8.30e-01  
  7  +4.7547e-01  +1.2845e+00  8.09e-01  2.69e-03  2.09e-01  1.21e-03  6.87e-03  4.49e-01  
  8  +4.6283e-01  +1.1409e+00  6.78e-01  1.88e-03  1.45e-01  9.31e-04  4.92e-03  4.29e-01  
  9  +4.4736e-01  +9.6647e-01  5.19e-01  1.43e-03  1.09e-01  5.12e-04  3.91e-03  3.80e-01  
 10  +4.0618e-01  +6.1988e-01  2.14e-01  5.33e-04  4.02e-02  7.51e-05  1.65e-03  8.35e-01  
 11  +3.7846e-01  +4.7103e-01  9.26e-02  2.17e-04  1.63e-02  3.24e-05  7.44e-04  6.28e-01  
 12  +3.6900e-01  +4.2626e-01  5.73e-02  1.30e-04  9.77e-03  2.18e-05  4.65e-04  5.04e-01  
 13  +3.6202e-01  +3.9291e-01  3.09e-02  6.93e-05  5.22e-03  1.19e-05  2.57e-04  4.81e-01  
 14  +3.5635e-01  +3.6532e-01  8.97e-03  1.99e-05  1.50e-03  4.09e-06  7.60e-05  8.83e-01  
 15  +3.5421e-01  +3.5611e-01  1.90e-03  4.20e-06  3.17e-04  8.64e-07  1.63e-05  7.98e-01  
 16  +3.5374e-01  +3.5414e-01  4.01e-04  8.83e-07  6.64e-05  1.88e-07  3.49e-06  9.90e-01  
 17  +3.5360e-01  +3.5361e-01  6.48e-06  1.43e-08  1.07e-06  2.99e-09  5.65e-08  9.84e-01  
 18  +3.5360e-01  +3.5360e-01  6.49e-08  1.43e-10  1.07e-08  2.99e-11  5.66e-10  9.90e-01  
 19  +3.5360e-01  +3.5360e-01  6.50e-10  1.43e-12  1.08e-10  3.00e-13  5.68e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.9833ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:06 PM: Optimal value: 3.536e-01
(CVXPY) Sep 20 07:57:06 PM: Compilation took 6.540e-03 seconds
(CVXPY) Sep 20 07:57:06 PM: Solver (including time spent in interface) took 1.756e-02 seconds
Iteration: 9, Objective: 0.3536
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:06 PM: Your problem has 609 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:06 PM: Finished problem compilation (took 7.153e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 609
  constraints   = 1109
  nnz(P)        = 0
  nnz(A)        = 8777
  cones (total) = 1
    : Nonnegative = 1,  numel = 1109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9950e-01  +5.0216e+02  5.02e+02  9.58e-01  3.60e+01  1.00e+00  1.01e+00   ------   
  1  +5.7003e-01  +1.0934e+02  1.09e+02  4.27e-01  2.23e+01  3.80e-03  5.77e-01  5.86e-01  
  2  +5.2321e-01  +1.2409e+01  1.19e+01  1.35e-01  9.07e+00  1.79e-02  2.53e-01  9.90e-01  
  3  +5.0862e-01  +3.3237e+00  2.82e+00  5.08e-02  3.71e+00  2.61e-03  1.24e-01  6.60e-01  
  4  +5.0213e-01  +2.1286e+00  1.63e+00  2.08e-02  1.57e+00  4.00e-03  5.28e-02  7.39e-01  
  5  +4.9947e-01  +2.2492e+00  1.75e+00  1.35e-02  1.03e+00  2.51e-03  3.33e-02  8.58e-01  
  6  +4.8436e-01  +1.7810e+00  1.30e+00  4.24e-03  3.31e-01  4.35e-03  1.03e-02  6.92e-01  
  7  +4.6768e-01  +1.4963e+00  1.03e+00  2.77e-03  2.14e-01  3.26e-03  6.94e-03  4.53e-01  
  8  +4.5306e-01  +1.2199e+00  7.67e-01  2.07e-03  1.59e-01  1.65e-03  5.42e-03  3.85e-01  
  9  +4.2734e-01  +8.4029e-01  4.13e-01  1.18e-03  8.90e-02  1.42e-05  3.38e-03  8.47e-01  
 10  +3.8142e-01  +5.1077e-01  1.29e-01  3.20e-04  2.38e-02  1.41e-05  1.04e-03  7.47e-01  
 11  +3.6996e-01  +4.5751e-01  8.76e-02  2.09e-04  1.56e-02  1.42e-05  7.08e-04  4.10e-01  
 12  +3.5710e-01  +3.9603e-01  3.89e-02  9.02e-05  6.75e-03  1.41e-05  3.26e-04  8.06e-01  
 13  +3.4864e-01  +3.5772e-01  9.07e-03  2.05e-05  1.54e-03  3.70e-06  7.85e-05  8.52e-01  
 14  +3.4632e-01  +3.4771e-01  1.39e-03  3.12e-06  2.34e-04  5.61e-07  1.22e-05  8.54e-01  
 15  +3.4594e-01  +3.4606e-01  1.24e-04  2.78e-07  2.09e-05  5.36e-08  1.09e-06  9.53e-01  
 16  +3.4590e-01  +3.4590e-01  1.25e-06  2.80e-09  2.10e-07  5.39e-10  1.10e-08  9.90e-01  
 17  +3.4590e-01  +3.4590e-01  1.25e-08  2.80e-11  2.10e-09  5.40e-12  1.10e-10  9.90e-01  
 18  +3.4590e-01  +3.4590e-01  1.25e-10  2.81e-13  2.11e-11  5.41e-14  1.11e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.388ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:06 PM: Optimal value: 3.459e-01
(CVXPY) Sep 20 07:57:06 PM: Compilation took 7.153e-03 seconds
(CVXPY) Sep 20 07:57:06 PM: Solver (including time spent in interface) took 1.800e-02 seconds
Iteration: 10, Objective: 0.3459
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:06 PM: Your problem has 619 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:06 PM: Finished problem compilation (took 6.526e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 619
  constraints   = 1119
  nnz(P)        = 0
  nnz(A)        = 8921
  cones (total) = 1
    : Nonnegative = 1,  numel = 1119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9950e-01  +5.0213e+02  5.02e+02  9.58e-01  3.59e+01  1.00e+00  1.01e+00   ------   
  1  +5.6947e-01  +1.0931e+02  1.09e+02  4.27e-01  2.22e+01  3.80e-03  5.77e-01  5.86e-01  
  2  +5.2271e-01  +1.2444e+01  1.19e+01  1.35e-01  8.97e+00  1.80e-02  2.52e-01  9.90e-01  
  3  +5.0897e-01  +3.5373e+00  3.03e+00  5.23e-02  3.81e+00  3.10e-03  1.25e-01  6.28e-01  
  4  +5.0133e-01  +2.0553e+00  1.55e+00  1.93e-02  1.46e+00  4.38e-03  4.93e-02  7.99e-01  
  5  +4.9749e-01  +2.2503e+00  1.75e+00  1.14e-02  8.74e-01  3.63e-03  2.78e-02  8.87e-01  
  6  +4.8170e-01  +1.7650e+00  1.28e+00  4.26e-03  3.31e-01  4.98e-03  1.04e-02  6.34e-01  
  7  +4.6459e-01  +1.4616e+00  9.97e-01  2.77e-03  2.14e-01  3.65e-03  7.00e-03  4.29e-01  
  8  +4.4940e-01  +1.1951e+00  7.46e-01  2.02e-03  1.54e-01  1.92e-03  5.32e-03  4.02e-01  
  9  +4.2156e-01  +8.1229e-01  3.91e-01  1.10e-03  8.25e-02  2.81e-05  3.17e-03  8.10e-01  
 10  +3.8332e-01  +5.5326e-01  1.70e-01  4.20e-04  3.12e-02  2.85e-05  1.35e-03  6.77e-01  
 11  +3.6790e-01  +4.7666e-01  1.09e-01  2.56e-04  1.91e-02  2.99e-05  8.69e-04  5.57e-01  
 12  +3.5105e-01  +3.9782e-01  4.68e-02  1.04e-04  7.77e-03  1.70e-05  3.83e-04  7.30e-01  
 13  +3.4018e-01  +3.4911e-01  8.93e-03  1.93e-05  1.44e-03  4.38e-06  7.64e-05  9.90e-01  
 14  +3.3721e-01  +3.3753e-01  3.17e-04  6.79e-07  5.09e-05  1.45e-07  2.77e-06  9.66e-01  
 15  +3.3710e-01  +3.3710e-01  3.23e-06  6.91e-09  5.18e-07  1.47e-09  2.83e-08  9.90e-01  
 16  +3.3710e-01  +3.3710e-01  3.23e-08  6.91e-11  5.18e-09  1.47e-11  2.83e-10  9.90e-01  
 17  +3.3710e-01  +3.3710e-01  3.23e-10  6.92e-13  5.18e-11  1.47e-13  2.84e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.4523ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:06 PM: Optimal value: 3.371e-01
(CVXPY) Sep 20 07:57:06 PM: Compilation took 6.526e-03 seconds
(CVXPY) Sep 20 07:57:06 PM: Solver (including time spent in interface) took 1.804e-02 seconds
Iteration: 11, Objective: 0.3371
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:06 PM: Your problem has 629 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:06 PM: Finished problem compilation (took 7.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 629
  constraints   = 1129
  nnz(P)        = 0
  nnz(A)        = 9085
  cones (total) = 1
    : Nonnegative = 1,  numel = 1129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9945e-01  +5.0204e+02  5.02e+02  9.58e-01  3.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.6739e-01  +1.0935e+02  1.09e+02  4.28e-01  2.20e+01  3.80e-03  5.76e-01  5.86e-01  
  2  +5.2160e-01  +1.2593e+01  1.21e+01  1.34e-01  8.89e+00  1.82e-02  2.51e-01  9.90e-01  
  3  +5.0899e-01  +3.6842e+00  3.18e+00  5.09e-02  3.71e+00  3.65e-03  1.19e-01  6.11e-01  
  4  +5.0486e-01  +2.8672e+00  2.36e+00  2.98e-02  2.24e+00  4.28e-03  7.15e-02  4.71e-01  
  5  +5.0052e-01  +2.7268e+00  2.23e+00  2.01e-02  1.52e+00  2.67e-03  4.89e-02  7.20e-01  
  6  +4.8394e-01  +1.9870e+00  1.50e+00  5.29e-03  4.12e-01  4.78e-03  1.26e-02  7.45e-01  
  7  +4.6381e-01  +1.5296e+00  1.07e+00  3.29e-03  2.53e-01  2.93e-03  8.19e-03  4.55e-01  
  8  +4.4762e-01  +1.2929e+00  8.45e-01  2.31e-03  1.76e-01  1.90e-03  5.93e-03  4.25e-01  
  9  +4.1217e-01  +8.1784e-01  4.06e-01  1.10e-03  8.28e-02  5.99e-05  3.13e-03  8.22e-01  
 10  +3.7444e-01  +5.6050e-01  1.86e-01  4.66e-04  3.45e-02  4.27e-05  1.48e-03  6.53e-01  
 11  +3.5720e-01  +4.6954e-01  1.12e-01  2.72e-04  2.01e-02  3.32e-05  9.28e-04  5.34e-01  
 12  +3.3633e-01  +3.6443e-01  2.81e-02  6.49e-05  4.81e-03  1.02e-05  2.50e-04  8.48e-01  
 13  +3.2990e-01  +3.3561e-01  5.71e-03  1.29e-05  9.59e-04  2.20e-06  5.33e-05  8.63e-01  
 14  +3.2842e-01  +3.2934e-01  9.23e-04  2.07e-06  1.53e-04  3.86e-07  8.86e-06  9.61e-01  
 15  +3.2811e-01  +3.2812e-01  1.65e-05  3.70e-08  2.73e-06  6.75e-09  1.60e-07  9.82e-01  
 16  +3.2810e-01  +3.2810e-01  1.65e-07  3.70e-10  2.73e-08  6.75e-11  1.60e-09  9.90e-01  
 17  +3.2810e-01  +3.2810e-01  1.66e-09  3.70e-12  2.73e-10  6.77e-13  1.60e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.696ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:06 PM: Optimal value: 3.281e-01
(CVXPY) Sep 20 07:57:06 PM: Compilation took 7.000e-03 seconds
(CVXPY) Sep 20 07:57:06 PM: Solver (including time spent in interface) took 1.993e-02 seconds
Iteration: 12, Objective: 0.3281
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:06 PM: Your problem has 639 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:06 PM: Finished problem compilation (took 6.501e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 639
  constraints   = 1139
  nnz(P)        = 0
  nnz(A)        = 9180
  cones (total) = 1
    : Nonnegative = 1,  numel = 1139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0205e+02  5.02e+02  9.58e-01  3.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.6592e-01  +1.0945e+02  1.09e+02  4.28e-01  2.19e+01  3.81e-03  5.76e-01  5.86e-01  
  2  +5.2086e-01  +1.2683e+01  1.22e+01  1.34e-01  8.82e+00  1.83e-02  2.50e-01  9.90e-01  
  3  +5.0877e-01  +3.6667e+00  3.16e+00  4.88e-02  3.55e+00  3.80e-03  1.13e-01  6.15e-01  
  4  +5.0585e-01  +3.0852e+00  2.58e+00  3.23e-02  2.41e+00  4.27e-03  7.63e-02  3.51e-01  
  5  +5.0159e-01  +2.8376e+00  2.34e+00  2.51e-02  1.87e+00  2.42e-03  6.26e-02  5.31e-01  
  6  +4.8386e-01  +1.8759e+00  1.39e+00  5.01e-03  3.90e-01  5.00e-03  1.20e-02  8.14e-01  
  7  +4.6399e-01  +1.5744e+00  1.11e+00  3.27e-03  2.51e-01  3.74e-03  8.04e-03  4.44e-01  
  8  +4.4697e-01  +1.3026e+00  8.56e-01  2.40e-03  1.83e-01  2.06e-03  6.14e-03  4.00e-01  
  9  +4.1754e-01  +9.1552e-01  4.98e-01  1.46e-03  1.09e-01  1.79e-05  4.12e-03  8.32e-01  
 10  +3.6986e-01  +5.5647e-01  1.87e-01  4.76e-04  3.51e-02  1.40e-05  1.52e-03  6.68e-01  
 11  +3.4925e-01  +4.5246e-01  1.03e-01  2.54e-04  1.87e-02  1.71e-05  8.89e-04  5.44e-01  
 12  +3.3059e-01  +3.5937e-01  2.88e-02  6.83e-05  5.03e-03  7.23e-06  2.67e-04  7.90e-01  
 13  +3.2498e-01  +3.3358e-01  8.60e-03  2.00e-05  1.47e-03  2.81e-06  8.29e-05  8.15e-01  
 14  +3.2289e-01  +3.2445e-01  1.56e-03  3.61e-06  2.65e-04  5.27e-07  1.55e-05  8.50e-01  
 15  +3.2243e-01  +3.2250e-01  7.37e-05  1.70e-07  1.25e-05  2.87e-08  7.39e-07  9.90e-01  
 16  +3.2240e-01  +3.2240e-01  7.40e-07  1.71e-09  1.25e-07  2.88e-10  7.42e-09  9.90e-01  
 17  +3.2240e-01  +3.2240e-01  7.41e-09  1.71e-11  1.26e-09  2.89e-12  7.44e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.6957ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:06 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:06 PM: Optimal value: 3.224e-01
(CVXPY) Sep 20 07:57:06 PM: Compilation took 6.501e-03 seconds
(CVXPY) Sep 20 07:57:06 PM: Solver (including time spent in interface) took 2.006e-02 seconds
Iteration: 13, Objective: 0.3224
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:07 PM: Your problem has 649 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:07 PM: Finished problem compilation (took 6.525e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 649
  constraints   = 1149
  nnz(P)        = 0
  nnz(A)        = 9289
  cones (total) = 1
    : Nonnegative = 1,  numel = 1149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0218e+02  5.02e+02  9.58e-01  3.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.6474e-01  +1.0947e+02  1.09e+02  4.29e-01  2.17e+01  3.81e-03  5.76e-01  5.86e-01  
  2  +5.2019e-01  +1.2767e+01  1.22e+01  1.33e-01  8.73e+00  1.84e-02  2.49e-01  9.90e-01  
  3  +5.0837e-01  +3.5676e+00  3.06e+00  4.57e-02  3.33e+00  3.79e-03  1.06e-01  6.30e-01  
  4  +5.0656e-01  +3.2482e+00  2.74e+00  3.40e-02  2.52e+00  4.25e-03  7.90e-02  2.64e-01  
  5  +5.0201e-01  +2.9227e+00  2.42e+00  2.76e-02  2.04e+00  2.39e-03  6.89e-02  4.29e-01  
  6  +4.8296e-01  +1.8299e+00  1.35e+00  4.76e-03  3.70e-01  5.31e-03  1.13e-02  8.43e-01  
  7  +4.6224e-01  +1.5376e+00  1.08e+00  3.18e-03  2.45e-01  3.95e-03  7.80e-03  4.07e-01  
  8  +4.4705e-01  +1.3282e+00  8.81e-01  2.51e-03  1.91e-01  2.40e-03  6.37e-03  3.42e-01  
  9  +4.1211e-01  +9.0130e-01  4.89e-01  1.43e-03  1.07e-01  2.10e-05  4.06e-03  8.06e-01  
 10  +3.6798e-01  +5.7682e-01  2.09e-01  5.48e-04  4.01e-02  1.60e-05  1.75e-03  6.08e-01  
 11  +3.4471e-01  +4.5135e-01  1.07e-01  2.69e-04  1.96e-02  2.18e-05  9.56e-04  6.31e-01  
 12  +3.2804e-01  +3.6515e-01  3.71e-02  9.00e-05  6.52e-03  9.53e-06  3.55e-04  7.15e-01  
 13  +3.2211e-01  +3.3559e-01  1.35e-02  3.22e-05  2.33e-03  4.09e-06  1.34e-04  7.28e-01  
 14  +3.1915e-01  +3.2176e-01  2.61e-03  6.19e-06  4.47e-04  7.93e-07  2.69e-05  8.17e-01  
 15  +3.1852e-01  +3.1892e-01  3.94e-04  9.29e-07  6.70e-05  1.34e-07  4.14e-06  9.15e-01  
 16  +3.1840e-01  +3.1841e-01  5.83e-06  1.37e-08  9.91e-07  2.00e-09  6.15e-08  9.87e-01  
 17  +3.1840e-01  +3.1840e-01  5.84e-08  1.38e-10  9.93e-09  2.01e-11  6.16e-10  9.90e-01  
 18  +3.1840e-01  +3.1840e-01  5.93e-10  1.40e-12  1.01e-10  2.04e-13  6.27e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.5233ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:07 PM: Optimal value: 3.184e-01
(CVXPY) Sep 20 07:57:07 PM: Compilation took 6.525e-03 seconds
(CVXPY) Sep 20 07:57:07 PM: Solver (including time spent in interface) took 2.124e-02 seconds
Iteration: 14, Objective: 0.3184
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:07 PM: Your problem has 659 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:07 PM: Finished problem compilation (took 6.757e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 659
  constraints   = 1159
  nnz(P)        = 0
  nnz(A)        = 9379
  cones (total) = 1
    : Nonnegative = 1,  numel = 1159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0205e+02  5.02e+02  9.58e-01  3.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.6258e-01  +1.0950e+02  1.09e+02  4.29e-01  2.16e+01  3.82e-03  5.75e-01  5.86e-01  
  2  +5.1881e-01  +1.2936e+01  1.24e+01  1.33e-01  8.66e+00  1.87e-02  2.47e-01  9.90e-01  
  3  +5.0731e-01  +3.2647e+00  2.76e+00  3.88e-02  2.86e+00  3.64e-03  8.98e-02  6.71e-01  
  4  +5.0645e-01  +3.1874e+00  2.68e+00  3.20e-02  2.39e+00  4.07e-03  7.36e-02  1.88e-01  
  5  +5.0200e-01  +3.0809e+00  2.58e+00  2.70e-02  2.00e+00  2.67e-03  6.52e-02  4.28e-01  
  6  +4.8242e-01  +2.1060e+00  1.62e+00  5.52e-03  4.29e-01  5.78e-03  1.28e-02  8.09e-01  
  7  +4.5714e-01  +1.6546e+00  1.20e+00  3.45e-03  2.65e-01  3.73e-03  8.40e-03  4.54e-01  
  8  +4.3709e-01  +1.3199e+00  8.83e-01  2.59e-03  1.96e-01  1.63e-03  6.63e-03  4.11e-01  
  9  +3.8759e-01  +7.7247e-01  3.85e-01  1.06e-03  7.80e-02  2.88e-04  3.07e-03  7.12e-01  
 10  +3.5810e-01  +5.7526e-01  2.17e-01  5.84e-04  4.25e-02  1.46e-04  1.88e-03  4.25e-01  
 11  +3.2905e-01  +3.9971e-01  7.07e-02  1.84e-04  1.33e-02  3.67e-05  6.89e-04  8.53e-01  
 12  +3.1969e-01  +3.5017e-01  3.05e-02  7.77e-05  5.62e-03  1.53e-05  3.13e-04  5.97e-01  
 13  +3.1377e-01  +3.1936e-01  5.60e-03  1.41e-05  1.01e-03  2.48e-06  6.05e-05  9.05e-01  
 14  +3.1235e-01  +3.1284e-01  4.94e-04  1.23e-06  8.85e-05  1.91e-07  5.49e-06  9.63e-01  
 15  +3.1220e-01  +3.1221e-01  8.40e-06  2.09e-08  1.50e-06  3.21e-09  9.38e-08  9.83e-01  
 16  +3.1220e-01  +3.1220e-01  8.41e-08  2.09e-10  1.50e-08  3.22e-11  9.39e-10  9.90e-01  
 17  +3.1220e-01  +3.1220e-01  8.44e-10  2.10e-12  1.51e-10  3.24e-13  9.44e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.2359ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:07 PM: Optimal value: 3.122e-01
(CVXPY) Sep 20 07:57:07 PM: Compilation took 6.757e-03 seconds
(CVXPY) Sep 20 07:57:07 PM: Solver (including time spent in interface) took 2.089e-02 seconds
Iteration: 15, Objective: 0.3122
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:07 PM: Your problem has 669 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:07 PM: Finished problem compilation (took 7.560e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 669
  constraints   = 1169
  nnz(P)        = 0
  nnz(A)        = 9462
  cones (total) = 1
    : Nonnegative = 1,  numel = 1169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9934e-01  +5.0208e+02  5.02e+02  9.59e-01  3.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.6115e-01  +1.0957e+02  1.09e+02  4.30e-01  2.15e+01  3.82e-03  5.75e-01  5.86e-01  
  2  +5.1814e-01  +1.3030e+01  1.25e+01  1.32e-01  8.56e+00  1.88e-02  2.46e-01  9.90e-01  
  3  +5.0662e-01  +3.0462e+00  2.54e+00  3.47e-02  2.56e+00  3.45e-03  8.07e-02  7.05e-01  
  4  +5.0614e-01  +3.0952e+00  2.59e+00  3.01e-02  2.24e+00  3.87e-03  6.90e-02  1.83e-01  
  5  +5.0085e-01  +3.3194e+00  2.82e+00  2.32e-02  1.73e+00  3.22e-03  5.41e-02  5.93e-01  
  6  +4.8059e-01  +2.3689e+00  1.89e+00  6.10e-03  4.72e-01  5.62e-03  1.41e-02  7.43e-01  
  7  +4.5329e-01  +1.8560e+00  1.40e+00  3.74e-03  2.86e-01  3.98e-03  9.05e-03  4.61e-01  
  8  +4.2633e-01  +1.2705e+00  8.44e-01  2.51e-03  1.88e-01  8.56e-04  6.56e-03  5.26e-01  
  9  +3.7206e-01  +6.7957e-01  3.08e-01  8.40e-04  6.12e-02  1.83e-04  2.53e-03  7.01e-01  
 10  +3.4848e-01  +5.3700e-01  1.89e-01  5.07e-04  3.66e-02  1.07e-04  1.67e-03  3.93e-01  
 11  +3.2651e-01  +4.0844e-01  8.19e-02  2.16e-04  1.55e-02  4.34e-05  8.05e-04  6.21e-01  
 12  +3.1602e-01  +3.4946e-01  3.34e-02  8.66e-05  6.23e-03  1.70e-05  3.50e-04  6.41e-01  
 13  +3.1047e-01  +3.1984e-01  9.37e-03  2.39e-05  1.72e-03  4.43e-06  1.03e-04  7.84e-01  
 14  +3.0861e-01  +3.1059e-01  1.98e-03  4.96e-06  3.57e-04  7.39e-07  2.25e-05  9.81e-01  
 15  +3.0802e-01  +3.0808e-01  6.01e-05  1.49e-07  1.07e-05  2.10e-08  6.92e-07  9.90e-01  
 16  +3.0800e-01  +3.0800e-01  6.02e-07  1.49e-09  1.07e-07  2.10e-10  6.94e-09  9.90e-01  
 17  +3.0800e-01  +3.0800e-01  6.02e-09  1.49e-11  1.07e-09  2.10e-12  6.94e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.9072ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:07 PM: Optimal value: 3.080e-01
(CVXPY) Sep 20 07:57:07 PM: Compilation took 7.560e-03 seconds
(CVXPY) Sep 20 07:57:07 PM: Solver (including time spent in interface) took 2.172e-02 seconds
Iteration: 16, Objective: 0.3080
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:07 PM: Your problem has 679 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:07 PM: Finished problem compilation (took 8.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 679
  constraints   = 1179
  nnz(P)        = 0
  nnz(A)        = 9581
  cones (total) = 1
    : Nonnegative = 1,  numel = 1179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9933e-01  +5.0216e+02  5.02e+02  9.59e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.5977e-01  +1.0963e+02  1.09e+02  4.30e-01  2.14e+01  3.82e-03  5.75e-01  5.86e-01  
  2  +5.1724e-01  +1.3123e+01  1.26e+01  1.32e-01  8.46e+00  1.89e-02  2.46e-01  9.90e-01  
  3  +5.0557e-01  +2.7096e+00  2.20e+00  2.91e-02  2.14e+00  3.15e-03  6.80e-02  7.53e-01  
  4  +5.0517e-01  +2.8570e+00  2.35e+00  2.57e-02  1.91e+00  3.56e-03  5.91e-02  2.19e-01  
  5  +4.9750e-01  +3.4144e+00  2.92e+00  1.66e-02  1.25e+00  4.27e-03  3.77e-02  7.27e-01  
  6  +4.7568e-01  +2.4314e+00  1.96e+00  6.14e-03  4.72e-01  4.87e-03  1.43e-02  6.32e-01  
  7  +4.4727e-01  +1.8767e+00  1.43e+00  3.81e-03  2.89e-01  3.47e-03  9.28e-03  4.35e-01  
  8  +4.3079e-01  +1.5105e+00  1.08e+00  3.07e-03  2.30e-01  1.81e-03  7.84e-03  3.17e-01  
  9  +3.8050e-01  +7.7438e-01  3.94e-01  1.12e-03  8.17e-02  3.43e-05  3.31e-03  8.86e-01  
 10  +3.4727e-01  +5.4472e-01  1.97e-01  5.47e-04  3.93e-02  2.35e-05  1.81e-03  5.08e-01  
 11  +3.2771e-01  +4.2740e-01  9.97e-02  2.69e-04  1.92e-02  2.68e-05  9.79e-04  7.04e-01  
 12  +3.1263e-01  +3.4102e-01  2.84e-02  7.49e-05  5.34e-03  7.82e-06  3.02e-04  7.31e-01  
 13  +3.0778e-01  +3.1498e-01  7.19e-03  1.86e-05  1.33e-03  2.56e-06  7.96e-05  9.25e-01  
 14  +3.0633e-01  +3.0807e-01  1.74e-03  4.48e-06  3.20e-04  6.10e-07  1.97e-05  7.67e-01  
 15  +3.0589e-01  +3.0603e-01  1.42e-04  3.64e-07  2.60e-05  4.99e-08  1.62e-06  9.56e-01  
 16  +3.0585e-01  +3.0585e-01  1.51e-06  3.88e-09  2.77e-07  5.32e-10  1.73e-08  9.89e-01  
 17  +3.0585e-01  +3.0585e-01  1.51e-08  3.88e-11  2.77e-09  5.33e-12  1.73e-10  9.90e-01  
 18  +3.0585e-01  +3.0585e-01  1.52e-10  3.90e-13  2.78e-11  5.36e-14  1.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.4547ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:07 PM: Optimal value: 3.059e-01
(CVXPY) Sep 20 07:57:07 PM: Compilation took 8.000e-03 seconds
(CVXPY) Sep 20 07:57:07 PM: Solver (including time spent in interface) took 2.457e-02 seconds
Iteration: 17, Objective: 0.3059
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:07 PM: Your problem has 685 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:07 PM: Finished problem compilation (took 8.157e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 685
  constraints   = 1185
  nnz(P)        = 0
  nnz(A)        = 9697
  cones (total) = 1
    : Nonnegative = 1,  numel = 1185

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0202e+02  5.02e+02  9.59e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.5924e-01  +1.0961e+02  1.09e+02  4.30e-01  2.13e+01  3.83e-03  5.75e-01  5.86e-01  
  2  +5.1677e-01  +1.3168e+01  1.27e+01  1.31e-01  8.41e+00  1.90e-02  2.45e-01  9.90e-01  
  3  +5.0495e-01  +2.5097e+00  2.00e+00  2.59e-02  1.91e+00  2.97e-03  6.09e-02  7.81e-01  
  4  +5.0431e-01  +2.7181e+00  2.21e+00  2.25e-02  1.68e+00  3.43e-03  5.19e-02  2.82e-01  
  5  +4.9331e-01  +3.1943e+00  2.70e+00  1.21e-02  9.18e-01  5.06e-03  2.74e-02  7.69e-01  
  6  +4.6617e-01  +2.0414e+00  1.58e+00  4.87e-03  3.71e-01  3.41e-03  1.15e-02  6.46e-01  
  7  +4.4288e-01  +1.7139e+00  1.27e+00  3.38e-03  2.56e-01  2.67e-03  8.29e-03  3.50e-01  
  8  +4.0539e-01  +1.0140e+00  6.09e-01  1.94e-03  1.42e-01  1.96e-05  5.43e-03  7.08e-01  
  9  +3.6094e-01  +6.4114e-01  2.80e-01  8.02e-04  5.76e-02  3.30e-05  2.52e-03  6.34e-01  
 10  +3.4549e-01  +5.4336e-01  1.98e-01  5.54e-04  3.96e-02  3.35e-05  1.84e-03  3.86e-01  
 11  +3.2078e-01  +3.8860e-01  6.78e-02  1.83e-04  1.30e-02  1.84e-05  6.83e-04  7.79e-01  
 12  +3.1254e-01  +3.4324e-01  3.07e-02  8.08e-05  5.74e-03  9.09e-06  3.18e-04  6.08e-01  
 13  +3.0828e-01  +3.2133e-01  1.30e-02  3.32e-05  2.37e-03  4.52e-06  1.38e-04  7.82e-01  
 14  +3.0531e-01  +3.0737e-01  2.07e-03  5.14e-06  3.68e-04  6.98e-07  2.26e-05  8.56e-01  
 15  +3.0471e-01  +3.0476e-01  4.28e-05  1.05e-07  7.57e-06  1.35e-08  4.77e-07  9.84e-01  
 16  +3.0470e-01  +3.0470e-01  4.28e-07  1.05e-09  7.56e-08  1.35e-10  4.78e-09  9.90e-01  
 17  +3.0470e-01  +3.0470e-01  4.29e-09  1.05e-11  7.57e-10  1.35e-12  4.78e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.3393ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:07 PM: Optimal value: 3.047e-01
(CVXPY) Sep 20 07:57:07 PM: Compilation took 8.157e-03 seconds
(CVXPY) Sep 20 07:57:07 PM: Solver (including time spent in interface) took 2.256e-02 seconds
Iteration: 18, Objective: 0.3047
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:07 PM: Your problem has 695 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:07 PM: Finished problem compilation (took 7.530e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 695
  constraints   = 1195
  nnz(P)        = 0
  nnz(A)        = 9759
  cones (total) = 1
    : Nonnegative = 1,  numel = 1195

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9929e-01  +5.0219e+02  5.02e+02  9.59e-01  3.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.5749e-01  +1.0970e+02  1.09e+02  4.31e-01  2.12e+01  3.83e-03  5.75e-01  5.86e-01  
  2  +5.1572e-01  +1.3278e+01  1.28e+01  1.31e-01  8.33e+00  1.91e-02  2.44e-01  9.90e-01  
  3  +5.0372e-01  +2.2547e+00  1.75e+00  2.15e-02  1.60e+00  2.85e-03  5.09e-02  8.20e-01  
  4  +4.9716e-01  +2.6996e+00  2.20e+00  1.37e-02  1.04e+00  4.31e-03  3.14e-02  6.59e-01  
  5  +4.7576e-01  +2.1457e+00  1.67e+00  5.40e-03  4.15e-01  5.79e-03  1.25e-02  6.30e-01  
  6  +4.5098e-01  +1.8288e+00  1.38e+00  3.71e-03  2.81e-01  4.77e-03  8.89e-03  3.62e-01  
  7  +4.0848e-01  +1.0967e+00  6.88e-01  2.12e-03  1.55e-01  3.69e-05  5.77e-03  6.68e-01  
  8  +3.5590e-01  +6.2645e-01  2.71e-01  7.72e-04  5.52e-02  2.95e-05  2.43e-03  6.46e-01  
  9  +3.3655e-01  +5.0768e-01  1.71e-01  4.81e-04  3.42e-02  2.30e-05  1.64e-03  3.81e-01  
 10  +3.1304e-01  +3.6544e-01  5.24e-02  1.44e-04  1.02e-02  1.22e-05  5.53e-04  7.79e-01  
 11  +3.0708e-01  +3.3361e-01  2.65e-02  7.11e-05  5.04e-03  7.18e-06  2.85e-04  5.99e-01  
 12  +3.0209e-01  +3.0812e-01  6.03e-03  1.58e-05  1.12e-03  1.82e-06  6.69e-05  8.42e-01  
 13  +3.0058e-01  +3.0104e-01  4.63e-04  1.20e-06  8.53e-05  1.38e-07  5.26e-06  9.34e-01  
 14  +3.0045e-01  +3.0046e-01  5.14e-06  1.33e-08  9.46e-07  1.51e-09  5.87e-08  9.89e-01  
 15  +3.0045e-01  +3.0045e-01  5.15e-08  1.33e-10  9.47e-09  1.51e-11  5.88e-10  9.90e-01  
 16  +3.0045e-01  +3.0045e-01  5.16e-10  1.33e-12  9.48e-11  1.51e-13  5.90e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.8117ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:07 PM: Optimal value: 3.005e-01
(CVXPY) Sep 20 07:57:07 PM: Compilation took 7.530e-03 seconds
(CVXPY) Sep 20 07:57:07 PM: Solver (including time spent in interface) took 2.154e-02 seconds
Iteration: 19, Objective: 0.3005
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:08 PM: Your problem has 705 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:08 PM: Finished problem compilation (took 7.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 705
  constraints   = 1205
  nnz(P)        = 0
  nnz(A)        = 9815
  cones (total) = 1
    : Nonnegative = 1,  numel = 1205

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9929e-01  +5.0219e+02  5.02e+02  9.59e-01  3.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.5698e-01  +1.0967e+02  1.09e+02  4.31e-01  2.10e+01  3.83e-03  5.74e-01  5.86e-01  
  2  +5.1529e-01  +1.3299e+01  1.28e+01  1.30e-01  8.26e+00  1.92e-02  2.43e-01  9.90e-01  
  3  +5.0330e-01  +2.2607e+00  1.76e+00  2.11e-02  1.56e+00  2.98e-03  4.98e-02  8.24e-01  
  4  +4.9494e-01  +2.6243e+00  2.13e+00  1.19e-02  9.05e-01  4.96e-03  2.73e-02  6.72e-01  
  5  +4.7071e-01  +2.0331e+00  1.56e+00  4.92e-03  3.76e-01  5.76e-03  1.15e-02  6.31e-01  
  6  +4.4663e-01  +1.7358e+00  1.29e+00  3.48e-03  2.63e-01  4.43e-03  8.42e-03  3.57e-01  
  7  +4.0508e-01  +1.0583e+00  6.53e-01  2.10e-03  1.53e-01  3.26e-05  5.81e-03  6.42e-01  
  8  +3.5620e-01  +6.4698e-01  2.91e-01  8.42e-04  6.00e-02  3.52e-05  2.65e-03  6.33e-01  
  9  +3.3732e-01  +5.2795e-01  1.91e-01  5.42e-04  3.84e-02  2.78e-05  1.83e-03  3.68e-01  
 10  +3.1244e-01  +3.7271e-01  6.03e-02  1.67e-04  1.18e-02  1.80e-05  6.36e-04  8.45e-01  
 11  +3.0536e-01  +3.3374e-01  2.84e-02  7.71e-05  5.46e-03  9.57e-06  3.06e-04  6.91e-01  
 12  +3.0095e-01  +3.1055e-01  9.60e-03  2.59e-05  1.83e-03  3.23e-06  1.07e-04  6.75e-01  
 13  +2.9924e-01  +3.0162e-01  2.38e-03  6.36e-06  4.50e-04  8.43e-07  2.69e-05  9.05e-01  
 14  +2.9869e-01  +2.9916e-01  4.64e-04  1.21e-06  8.61e-05  1.63e-07  5.33e-06  9.18e-01  
 15  +2.9855e-01  +2.9857e-01  1.18e-05  3.06e-08  2.17e-06  4.10e-09  1.36e-07  9.83e-01  
 16  +2.9855e-01  +2.9855e-01  1.18e-07  3.06e-10  2.17e-08  4.11e-11  1.37e-09  9.90e-01  
 17  +2.9855e-01  +2.9855e-01  1.19e-09  3.06e-12  2.17e-10  4.11e-13  1.37e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.1431ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:08 PM: Optimal value: 2.986e-01
(CVXPY) Sep 20 07:57:08 PM: Compilation took 7.509e-03 seconds
(CVXPY) Sep 20 07:57:08 PM: Solver (including time spent in interface) took 2.212e-02 seconds
Iteration: 20, Objective: 0.2986
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:08 PM: Your problem has 715 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:08 PM: Finished problem compilation (took 7.531e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 715
  constraints   = 1215
  nnz(P)        = 0
  nnz(A)        = 9909
  cones (total) = 1
    : Nonnegative = 1,  numel = 1215

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9926e-01  +5.0238e+02  5.02e+02  9.59e-01  3.46e+01  1.00e+00  1.01e+00   ------   
  1  +5.5493e-01  +1.0975e+02  1.09e+02  4.31e-01  2.09e+01  3.84e-03  5.73e-01  5.86e-01  
  2  +5.1402e-01  +1.3434e+01  1.29e+01  1.29e-01  8.14e+00  1.93e-02  2.41e-01  9.90e-01  
  3  +5.0182e-01  +2.2367e+00  1.73e+00  1.95e-02  1.45e+00  3.23e-03  4.58e-02  8.55e-01  
  4  +4.8767e-01  +2.4034e+00  1.92e+00  8.44e-03  6.45e-01  6.68e-03  1.93e-02  7.01e-01  
  5  +4.5797e-01  +1.8114e+00  1.35e+00  4.21e-03  3.20e-01  5.18e-03  1.00e-02  5.72e-01  
  6  +4.3609e-01  +1.5208e+00  1.08e+00  3.27e-03  2.44e-01  3.28e-03  8.10e-03  2.99e-01  
  7  +3.8967e-01  +9.9731e-01  6.08e-01  1.91e-03  1.38e-01  2.76e-05  5.41e-03  7.83e-01  
  8  +3.4602e-01  +6.2565e-01  2.80e-01  8.21e-04  5.81e-02  2.21e-05  2.64e-03  5.62e-01  
  9  +3.2626e-01  +5.0060e-01  1.74e-01  5.00e-04  3.52e-02  1.79e-05  1.74e-03  3.89e-01  
 10  +3.0379e-01  +3.6702e-01  6.32e-02  1.73e-04  1.22e-02  1.27e-05  6.82e-04  7.36e-01  
 11  +2.9532e-01  +3.2372e-01  2.84e-02  7.47e-05  5.24e-03  6.74e-06  3.18e-04  6.30e-01  
 12  +2.8985e-01  +2.9611e-01  6.26e-03  1.61e-05  1.13e-03  1.66e-06  7.32e-05  8.31e-01  
 13  +2.8832e-01  +2.8877e-01  4.44e-04  1.14e-06  7.97e-05  1.16e-07  5.35e-06  9.41e-01  
 14  +2.8820e-01  +2.8821e-01  5.31e-06  1.36e-08  9.52e-07  1.38e-09  6.44e-08  9.88e-01  
 15  +2.8820e-01  +2.8820e-01  5.31e-08  1.36e-10  9.53e-09  1.38e-11  6.45e-10  9.90e-01  
 16  +2.8820e-01  +2.8820e-01  5.31e-10  1.36e-12  9.53e-11  1.38e-13  6.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.8726ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:08 PM: Optimal value: 2.882e-01
(CVXPY) Sep 20 07:57:08 PM: Compilation took 7.531e-03 seconds
(CVXPY) Sep 20 07:57:08 PM: Solver (including time spent in interface) took 2.143e-02 seconds
Iteration: 21, Objective: 0.2882
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:08 PM: Your problem has 725 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:08 PM: Finished problem compilation (took 7.513e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 725
  constraints   = 1225
  nnz(P)        = 0
  nnz(A)        = 9987
  cones (total) = 1
    : Nonnegative = 1,  numel = 1225

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9921e-01  +5.0223e+02  5.02e+02  9.60e-01  3.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.5226e-01  +1.0988e+02  1.09e+02  4.31e-01  2.07e+01  3.85e-03  5.73e-01  5.86e-01  
  2  +5.1198e-01  +1.3613e+01  1.31e+01  1.28e-01  8.08e+00  1.96e-02  2.41e-01  9.90e-01  
  3  +4.9983e-01  +2.4117e+00  1.91e+00  1.98e-02  1.46e+00  3.94e-03  4.61e-02  8.48e-01  
  4  +4.7910e-01  +2.2708e+00  1.79e+00  7.23e-03  5.51e-01  7.92e-03  1.66e-02  7.01e-01  
  5  +4.5352e-01  +1.8270e+00  1.37e+00  4.62e-03  3.48e-01  5.58e-03  1.10e-02  4.25e-01  
  6  +4.2725e-01  +1.4867e+00  1.06e+00  3.26e-03  2.41e-01  3.38e-03  8.17e-03  3.86e-01  
  7  +3.8604e-01  +1.0245e+00  6.38e-01  2.07e-03  1.48e-01  2.84e-05  5.89e-03  8.01e-01  
  8  +3.3887e-01  +5.9623e-01  2.57e-01  7.61e-04  5.35e-02  1.90e-05  2.47e-03  6.20e-01  
  9  +3.2075e-01  +4.8229e-01  1.62e-01  4.67e-04  3.27e-02  1.77e-05  1.64e-03  4.07e-01  
 10  +3.0169e-01  +3.6766e-01  6.60e-02  1.84e-04  1.28e-02  1.24e-05  7.17e-04  6.80e-01  
 11  +2.9139e-01  +3.1161e-01  2.02e-02  5.43e-05  3.79e-03  4.54e-06  2.31e-04  7.43e-01  
 12  +2.8758e-01  +2.9249e-01  4.91e-03  1.29e-05  8.99e-04  1.19e-06  5.86e-05  7.94e-01  
 13  +2.8638e-01  +2.8667e-01  2.87e-04  7.45e-07  5.21e-05  6.97e-08  3.52e-06  9.52e-01  
 14  +2.8630e-01  +2.8630e-01  3.07e-06  7.98e-09  5.58e-07  7.42e-10  3.79e-08  9.89e-01  
 15  +2.8630e-01  +2.8630e-01  3.08e-08  7.99e-11  5.58e-09  7.43e-12  3.80e-10  9.90e-01  
 16  +2.8630e-01  +2.8630e-01  3.08e-10  8.00e-13  5.59e-11  7.44e-14  3.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.1491ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:08 PM: Optimal value: 2.863e-01
(CVXPY) Sep 20 07:57:08 PM: Compilation took 7.513e-03 seconds
(CVXPY) Sep 20 07:57:08 PM: Solver (including time spent in interface) took 2.302e-02 seconds
Iteration: 22, Objective: 0.2863
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:08 PM: Your problem has 735 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:08 PM: Finished problem compilation (took 8.519e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 735
  constraints   = 1235
  nnz(P)        = 0
  nnz(A)        = 10036
  cones (total) = 1
    : Nonnegative = 1,  numel = 1235

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9919e-01  +5.0219e+02  5.02e+02  9.60e-01  3.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.5125e-01  +1.0992e+02  1.09e+02  4.32e-01  2.06e+01  3.85e-03  5.73e-01  5.85e-01  
  2  +5.1121e-01  +1.3691e+01  1.32e+01  1.28e-01  8.06e+00  1.98e-02  2.41e-01  9.90e-01  
  3  +4.9899e-01  +2.3795e+00  1.88e+00  1.89e-02  1.40e+00  4.06e-03  4.41e-02  8.52e-01  
  4  +4.7769e-01  +2.2039e+00  1.73e+00  7.03e-03  5.35e-01  7.89e-03  1.61e-02  6.87e-01  
  5  +4.4957e-01  +1.7604e+00  1.31e+00  4.32e-03  3.24e-01  5.67e-03  1.03e-02  4.48e-01  
  6  +4.2813e-01  +1.5073e+00  1.08e+00  3.32e-03  2.45e-01  3.88e-03  8.26e-03  3.09e-01  
  7  +3.8066e-01  +9.7131e-01  5.91e-01  1.87e-03  1.33e-01  3.31e-05  5.32e-03  7.97e-01  
  8  +3.3842e-01  +6.0533e-01  2.67e-01  7.95e-04  5.57e-02  2.30e-05  2.57e-03  5.65e-01  
  9  +3.0873e-01  +4.1588e-01  1.07e-01  3.06e-04  2.13e-02  2.25e-05  1.13e-03  7.29e-01  
 10  +3.0444e-01  +3.9204e-01  8.76e-02  2.46e-04  1.71e-02  2.07e-05  9.30e-04  2.85e-01  
 11  +2.9258e-01  +3.2433e-01  3.17e-02  8.71e-05  6.04e-03  8.53e-06  3.58e-04  7.05e-01  
 12  +2.8864e-01  +3.0294e-01  1.43e-02  3.85e-05  2.66e-03  4.16e-06  1.66e-04  6.45e-01  
 13  +2.8630e-01  +2.9104e-01  4.74e-03  1.25e-05  8.67e-04  1.44e-06  5.65e-05  7.43e-01  
 14  +2.8526e-01  +2.8612e-01  8.57e-04  2.20e-06  1.52e-04  2.83e-07  1.04e-05  9.56e-01  
 15  +2.8501e-01  +2.8503e-01  2.42e-05  6.15e-08  4.26e-06  8.04e-09  2.96e-07  9.90e-01  
 16  +2.8500e-01  +2.8500e-01  2.42e-07  6.15e-10  4.27e-08  8.05e-11  2.96e-09  9.90e-01  
 17  +2.8500e-01  +2.8500e-01  2.44e-09  6.19e-12  4.29e-10  8.13e-13  2.99e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.6491ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:08 PM: Optimal value: 2.850e-01
(CVXPY) Sep 20 07:57:08 PM: Compilation took 8.519e-03 seconds
(CVXPY) Sep 20 07:57:08 PM: Solver (including time spent in interface) took 2.627e-02 seconds
Iteration: 23, Objective: 0.2850
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:08 PM: Your problem has 745 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:08 PM: Finished problem compilation (took 7.368e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 745
  constraints   = 1245
  nnz(P)        = 0
  nnz(A)        = 10113
  cones (total) = 1
    : Nonnegative = 1,  numel = 1245

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9912e-01  +5.0245e+02  5.02e+02  9.60e-01  3.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.4838e-01  +1.1015e+02  1.10e+02  4.33e-01  2.05e+01  3.85e-03  5.74e-01  5.85e-01  
  2  +5.0893e-01  +1.3944e+01  1.34e+01  1.27e-01  8.00e+00  2.01e-02  2.40e-01  9.90e-01  
  3  +4.9614e-01  +2.4033e+00  1.91e+00  1.76e-02  1.31e+00  4.59e-03  4.07e-02  8.68e-01  
  4  +4.6983e-01  +2.1084e+00  1.64e+00  6.39e-03  4.86e-01  8.48e-03  1.46e-02  6.75e-01  
  5  +4.3900e-01  +1.7229e+00  1.28e+00  4.05e-03  3.03e-01  6.04e-03  9.71e-03  4.50e-01  
  6  +3.8546e-01  +1.0092e+00  6.24e-01  2.03e-03  1.45e-01  5.12e-05  5.59e-03  7.29e-01  
  7  +3.5202e-01  +7.3994e-01  3.88e-01  1.21e-03  8.52e-02  4.31e-05  3.67e-03  4.06e-01  
  8  +3.2811e-01  +5.7154e-01  2.43e-01  7.37e-04  5.14e-02  3.46e-05  2.45e-03  4.06e-01  
  9  +3.0068e-01  +3.9285e-01  9.22e-02  2.67e-04  1.85e-02  3.45e-05  1.02e-03  9.44e-01  
 10  +2.9328e-01  +3.4771e-01  5.44e-02  1.56e-04  1.08e-02  2.02e-05  6.25e-04  5.84e-01  
 11  +2.8456e-01  +2.9808e-01  1.35e-02  3.74e-05  2.58e-03  4.98e-06  1.62e-04  8.38e-01  
 12  +2.8242e-01  +2.8728e-01  4.86e-03  1.31e-05  9.06e-04  1.73e-06  5.99e-05  7.39e-01  
 13  +2.8136e-01  +2.8225e-01  8.90e-04  2.34e-06  1.61e-04  3.00e-07  1.12e-05  9.15e-01  
 14  +2.8111e-01  +2.8115e-01  3.58e-05  9.29e-08  6.41e-06  1.17e-08  4.54e-07  9.90e-01  
 15  +2.8110e-01  +2.8110e-01  3.59e-07  9.32e-10  6.43e-08  1.17e-10  4.55e-09  9.90e-01  
 16  +2.8110e-01  +2.8110e-01  3.61e-09  9.35e-12  6.46e-10  1.18e-12  4.59e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.7238ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:08 PM: Optimal value: 2.811e-01
(CVXPY) Sep 20 07:57:08 PM: Compilation took 7.368e-03 seconds
(CVXPY) Sep 20 07:57:08 PM: Solver (including time spent in interface) took 2.608e-02 seconds
Iteration: 24, Objective: 0.2811
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:08 PM: Your problem has 755 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:08 PM: Finished problem compilation (took 8.507e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 755
  constraints   = 1255
  nnz(P)        = 0
  nnz(A)        = 10160
  cones (total) = 1
    : Nonnegative = 1,  numel = 1255

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9912e-01  +5.0245e+02  5.02e+02  9.60e-01  3.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.4788e-01  +1.1012e+02  1.10e+02  4.33e-01  2.04e+01  3.86e-03  5.73e-01  5.85e-01  
  2  +5.0836e-01  +1.3960e+01  1.35e+01  1.27e-01  7.92e+00  2.01e-02  2.38e-01  9.90e-01  
  3  +4.9532e-01  +2.4549e+00  1.96e+00  1.77e-02  1.31e+00  4.81e-03  4.08e-02  8.66e-01  
  4  +4.6756e-01  +2.1131e+00  1.65e+00  6.33e-03  4.80e-01  8.68e-03  1.45e-02  6.74e-01  
  5  +4.3591e-01  +1.7104e+00  1.27e+00  4.03e-03  3.00e-01  5.80e-03  9.73e-03  4.59e-01  
  6  +3.8496e-01  +1.0256e+00  6.41e-01  2.12e-03  1.51e-01  4.86e-05  5.86e-03  7.27e-01  
  7  +3.4318e-01  +6.7777e-01  3.35e-01  1.04e-03  7.24e-02  3.86e-05  3.23e-03  5.20e-01  
  8  +3.2487e-01  +5.5600e-01  2.31e-01  6.96e-04  4.83e-02  3.51e-05  2.33e-03  3.68e-01  
  9  +2.9923e-01  +3.9357e-01  9.43e-02  2.70e-04  1.86e-02  3.53e-05  1.03e-03  9.34e-01  
 10  +2.8933e-01  +3.3589e-01  4.66e-02  1.30e-04  8.95e-03  1.74e-05  5.30e-04  6.87e-01  
 11  +2.8103e-01  +2.9167e-01  1.06e-02  2.88e-05  1.98e-03  3.80e-06  1.28e-04  7.93e-01  
 12  +2.7913e-01  +2.8164e-01  2.50e-03  6.70e-06  4.60e-04  8.54e-07  3.11e-05  9.90e-01  
 13  +2.7842e-01  +2.7847e-01  5.21e-05  1.39e-07  9.56e-06  1.67e-08  6.57e-07  9.79e-01  
 14  +2.7840e-01  +2.7840e-01  5.22e-07  1.39e-09  9.57e-08  1.68e-10  6.58e-09  9.90e-01  
 15  +2.7840e-01  +2.7840e-01  5.22e-09  1.39e-11  9.57e-10  1.68e-12  6.58e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.5626ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:08 PM: Optimal value: 2.784e-01
(CVXPY) Sep 20 07:57:08 PM: Compilation took 8.507e-03 seconds
(CVXPY) Sep 20 07:57:08 PM: Solver (including time spent in interface) took 2.566e-02 seconds
Iteration: 25, Objective: 0.2784
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:09 PM: Your problem has 765 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:09 PM: Finished problem compilation (took 9.522e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 765
  constraints   = 1265
  nnz(P)        = 0
  nnz(A)        = 10212
  cones (total) = 1
    : Nonnegative = 1,  numel = 1265

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9910e-01  +5.0250e+02  5.02e+02  9.60e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.4658e-01  +1.1014e+02  1.10e+02  4.33e-01  2.03e+01  3.86e-03  5.73e-01  5.85e-01  
  2  +5.0729e-01  +1.4040e+01  1.35e+01  1.26e-01  7.86e+00  2.02e-02  2.38e-01  9.90e-01  
  3  +4.9361e-01  +2.5180e+00  2.02e+00  1.75e-02  1.29e+00  5.16e-03  4.04e-02  8.68e-01  
  4  +4.6261e-01  +2.0727e+00  1.61e+00  6.09e-03  4.59e-01  8.74e-03  1.41e-02  6.79e-01  
  5  +4.2776e-01  +1.6323e+00  1.20e+00  3.75e-03  2.77e-01  5.63e-03  9.14e-03  4.71e-01  
  6  +3.8526e-01  +1.0660e+00  6.81e-01  2.37e-03  1.68e-01  2.50e-04  6.59e-03  6.48e-01  
  7  +3.6193e-01  +8.6514e-01  5.03e-01  1.66e-03  1.16e-01  1.81e-04  4.90e-03  2.96e-01  
  8  +3.5642e-01  +8.3600e-01  4.80e-01  1.57e-03  1.09e-01  1.78e-04  4.73e-03  2.66e-01  
  9  +3.2373e-01  +5.6985e-01  2.46e-01  7.55e-04  5.21e-02  8.53e-05  2.55e-03  5.01e-01  
 10  +2.9879e-01  +4.0583e-01  1.07e-01  3.10e-04  2.13e-02  3.97e-05  1.17e-03  7.44e-01  
 11  +2.9055e-01  +3.5894e-01  6.84e-02  1.92e-04  1.32e-02  2.56e-05  7.63e-04  4.65e-01  
 12  +2.8019e-01  +3.0181e-01  2.16e-02  5.86e-05  4.03e-03  7.94e-06  2.54e-04  7.44e-01  
 13  +2.7576e-01  +2.7956e-01  3.80e-03  9.92e-06  6.83e-04  1.34e-06  4.63e-05  8.89e-01  
 14  +2.7474e-01  +2.7489e-01  1.52e-04  3.92e-07  2.70e-05  4.96e-08  1.89e-06  9.64e-01  
 15  +2.7470e-01  +2.7470e-01  1.53e-06  3.95e-09  2.72e-07  4.98e-10  1.90e-08  9.90e-01  
 16  +2.7470e-01  +2.7470e-01  1.53e-08  3.96e-11  2.72e-09  4.99e-12  1.91e-10  9.90e-01  
 17  +2.7470e-01  +2.7470e-01  1.53e-10  3.97e-13  2.73e-11  5.02e-14  1.92e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.2083ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:09 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:09 PM: Optimal value: 2.747e-01
(CVXPY) Sep 20 07:57:09 PM: Compilation took 9.522e-03 seconds
(CVXPY) Sep 20 07:57:09 PM: Solver (including time spent in interface) took 2.913e-02 seconds
Iteration: 26, Objective: 0.2747
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:09 PM: Your problem has 775 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:09 PM: Finished problem compilation (took 8.511e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 775
  constraints   = 1275
  nnz(P)        = 0
  nnz(A)        = 10262
  cones (total) = 1
    : Nonnegative = 1,  numel = 1275

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9908e-01  +5.0250e+02  5.02e+02  9.60e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.4485e-01  +1.1036e+02  1.10e+02  4.35e-01  2.02e+01  3.86e-03  5.74e-01  5.84e-01  
  2  +5.0599e-01  +1.4174e+01  1.37e+01  1.26e-01  7.84e+00  2.05e-02  2.38e-01  9.90e-01  
  3  +4.9178e-01  +2.4721e+00  1.98e+00  1.65e-02  1.22e+00  5.32e-03  3.82e-02  8.80e-01  
  4  +4.5706e-01  +1.9535e+00  1.50e+00  5.55e-03  4.17e-01  8.56e-03  1.29e-02  6.90e-01  
  5  +4.2514e-01  +1.6193e+00  1.19e+00  3.71e-03  2.73e-01  6.00e-03  9.05e-03  4.18e-01  
  6  +3.7647e-01  +1.0481e+00  6.72e-01  2.27e-03  1.60e-01  4.78e-05  6.42e-03  7.43e-01  
  7  +3.2219e-01  +5.2443e-01  2.02e-01  6.25e-04  4.29e-02  2.45e-05  2.08e-03  7.42e-01  
  8  +3.0573e-01  +4.4293e-01  1.37e-01  4.05e-04  2.77e-02  2.73e-05  1.45e-03  4.94e-01  
  9  +2.9727e-01  +3.9683e-01  9.96e-02  2.87e-04  1.97e-02  2.15e-05  1.08e-03  3.22e-01  
 10  +2.8144e-01  +3.1059e-01  2.91e-02  8.08e-05  5.53e-03  7.99e-06  3.39e-04  8.05e-01  
 11  +2.7591e-01  +2.8324e-01  7.33e-03  1.95e-05  1.34e-03  2.50e-06  8.88e-05  9.61e-01  
 12  +2.7392e-01  +2.7432e-01  4.02e-04  1.05e-06  7.22e-05  1.23e-07  5.04e-06  9.47e-01  
 13  +2.7380e-01  +2.7381e-01  4.35e-06  1.14e-08  7.79e-07  1.30e-09  5.49e-08  9.89e-01  
 14  +2.7380e-01  +2.7380e-01  4.36e-08  1.14e-10  7.81e-09  1.31e-11  5.50e-10  9.90e-01  
 15  +2.7380e-01  +2.7380e-01  4.40e-10  1.15e-12  7.87e-11  1.32e-13  5.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.864ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:09 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:09 PM: Optimal value: 2.738e-01
(CVXPY) Sep 20 07:57:09 PM: Compilation took 8.511e-03 seconds
(CVXPY) Sep 20 07:57:09 PM: Solver (including time spent in interface) took 2.808e-02 seconds
Iteration: 27, Objective: 0.2738
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:09 PM: Your problem has 785 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:09 PM: Finished problem compilation (took 9.016e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 785
  constraints   = 1285
  nnz(P)        = 0
  nnz(A)        = 10324
  cones (total) = 1
    : Nonnegative = 1,  numel = 1285

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9908e-01  +5.0253e+02  5.02e+02  9.61e-01  3.37e+01  1.00e+00  1.01e+00   ------   
  1  +5.4460e-01  +1.1038e+02  1.10e+02  4.35e-01  2.01e+01  3.86e-03  5.74e-01  5.84e-01  
  2  +5.0572e-01  +1.4184e+01  1.37e+01  1.26e-01  7.80e+00  2.05e-02  2.38e-01  9.90e-01  
  3  +4.9128e-01  +2.3972e+00  1.91e+00  1.57e-02  1.16e+00  5.26e-03  3.65e-02  8.88e-01  
  4  +4.5636e-01  +1.8979e+00  1.44e+00  5.36e-03  4.01e-01  8.36e-03  1.25e-02  6.86e-01  
  5  +4.2317e-01  +1.5706e+00  1.15e+00  3.53e-03  2.59e-01  5.89e-03  8.68e-03  4.25e-01  
  6  +3.7535e-01  +1.0445e+00  6.69e-01  2.28e-03  1.59e-01  4.63e-05  6.48e-03  7.35e-01  
  7  +3.3219e-01  +6.3261e-01  3.00e-01  9.42e-04  6.45e-02  2.83e-05  3.04e-03  5.78e-01  
  8  +3.0286e-01  +4.3499e-01  1.32e-01  3.95e-04  2.68e-02  2.98e-05  1.45e-03  7.28e-01  
  9  +2.9748e-01  +4.0569e-01  1.08e-01  3.14e-04  2.14e-02  2.73e-05  1.18e-03  3.07e-01  
 10  +2.8276e-01  +3.2216e-01  3.94e-02  1.09e-04  7.45e-03  1.19e-05  4.50e-04  7.68e-01  
 11  +2.7643e-01  +2.8964e-01  1.32e-02  3.54e-05  2.42e-03  4.21e-06  1.57e-04  7.68e-01  
 12  +2.7337e-01  +2.7502e-01  1.65e-03  4.32e-06  2.95e-04  5.09e-07  2.03e-05  8.93e-01  
 13  +2.7291e-01  +2.7294e-01  3.32e-05  8.64e-08  5.90e-06  9.45e-09  4.15e-07  9.81e-01  
 14  +2.7290e-01  +2.7290e-01  3.32e-07  8.63e-10  5.90e-08  9.45e-11  4.16e-09  9.90e-01  
 15  +2.7290e-01  +2.7290e-01  3.33e-09  8.64e-12  5.90e-10  9.45e-13  4.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.1683ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:09 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:09 PM: Optimal value: 2.729e-01
(CVXPY) Sep 20 07:57:09 PM: Compilation took 9.016e-03 seconds
(CVXPY) Sep 20 07:57:09 PM: Solver (including time spent in interface) took 2.813e-02 seconds
Iteration: 28, Objective: 0.2729
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:09 PM: Your problem has 792 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:09 PM: Finished problem compilation (took 8.515e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 792
  constraints   = 1292
  nnz(P)        = 0
  nnz(A)        = 10362
  cones (total) = 1
    : Nonnegative = 1,  numel = 1292

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9906e-01  +5.0252e+02  5.02e+02  9.61e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.4372e-01  +1.1045e+02  1.10e+02  4.36e-01  2.00e+01  3.86e-03  5.74e-01  5.84e-01  
  2  +5.0504e-01  +1.4242e+01  1.37e+01  1.26e-01  7.77e+00  2.06e-02  2.39e-01  9.90e-01  
  3  +4.9034e-01  +2.4231e+00  1.93e+00  1.57e-02  1.15e+00  5.40e-03  3.64e-02  8.90e-01  
  4  +4.5349e-01  +1.8585e+00  1.41e+00  5.20e-03  3.87e-01  8.20e-03  1.22e-02  6.93e-01  
  5  +4.2251e-01  +1.5756e+00  1.15e+00  3.54e-03  2.59e-01  6.16e-03  8.70e-03  3.95e-01  
  6  +3.7452e-01  +1.0391e+00  6.65e-01  2.27e-03  1.58e-01  4.80e-05  6.46e-03  7.25e-01  
  7  +3.3174e-01  +6.3288e-01  3.01e-01  9.49e-04  6.48e-02  2.91e-05  3.06e-03  5.74e-01  
  8  +3.0278e-01  +4.3731e-01  1.35e-01  4.04e-04  2.74e-02  2.95e-05  1.48e-03  7.14e-01  
  9  +2.9683e-01  +4.0528e-01  1.08e-01  3.15e-04  2.14e-02  2.68e-05  1.19e-03  3.20e-01  
 10  +2.8212e-01  +3.2273e-01  4.06e-02  1.12e-04  7.65e-03  1.19e-05  4.62e-04  7.47e-01  
 11  +2.7562e-01  +2.8932e-01  1.37e-02  3.66e-05  2.49e-03  4.27e-06  1.62e-04  7.58e-01  
 12  +2.7334e-01  +2.7847e-01  5.14e-03  1.34e-05  9.13e-04  1.62e-06  6.23e-05  6.84e-01  
 13  +2.7197e-01  +2.7221e-01  2.38e-04  6.12e-07  4.17e-05  6.90e-08  2.96e-06  9.58e-01  
 14  +2.7190e-01  +2.7190e-01  2.44e-06  6.28e-09  4.27e-07  7.03e-10  3.05e-08  9.90e-01  
 15  +2.7190e-01  +2.7190e-01  2.45e-08  6.28e-11  4.28e-09  7.04e-12  3.05e-10  9.90e-01  
 16  +2.7190e-01  +2.7190e-01  2.47e-10  6.35e-13  4.32e-11  7.14e-14  3.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.6154ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:09 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:09 PM: Optimal value: 2.719e-01
(CVXPY) Sep 20 07:57:09 PM: Compilation took 8.515e-03 seconds
(CVXPY) Sep 20 07:57:09 PM: Solver (including time spent in interface) took 3.060e-02 seconds
Iteration: 29, Objective: 0.2719
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:09 PM: Your problem has 794 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:09 PM: Finished problem compilation (took 9.040e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 794
  constraints   = 1294
  nnz(P)        = 0
  nnz(A)        = 10369
  cones (total) = 1
    : Nonnegative = 1,  numel = 1294

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9906e-01  +5.0253e+02  5.02e+02  9.61e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.4346e-01  +1.1051e+02  1.10e+02  4.36e-01  2.00e+01  3.86e-03  5.74e-01  5.83e-01  
  2  +5.0489e-01  +1.4264e+01  1.38e+01  1.26e-01  7.76e+00  2.06e-02  2.39e-01  9.90e-01  
  3  +4.9011e-01  +2.4203e+00  1.93e+00  1.56e-02  1.14e+00  5.43e-03  3.62e-02  8.91e-01  
  4  +4.5307e-01  +1.8517e+00  1.40e+00  5.18e-03  3.85e-01  8.18e-03  1.22e-02  6.93e-01  
  5  +4.2257e-01  +1.5754e+00  1.15e+00  3.55e-03  2.60e-01  6.17e-03  8.73e-03  3.89e-01  
  6  +3.7399e-01  +1.0327e+00  6.59e-01  2.25e-03  1.56e-01  4.83e-05  6.40e-03  7.26e-01  
  7  +3.3207e-01  +6.3575e-01  3.04e-01  9.59e-04  6.55e-02  2.94e-05  3.09e-03  5.65e-01  
  8  +3.0311e-01  +4.3933e-01  1.36e-01  4.10e-04  2.77e-02  2.95e-05  1.50e-03  7.10e-01  
  9  +2.9701e-01  +4.0638e-01  1.09e-01  3.19e-04  2.16e-02  2.68e-05  1.20e-03  3.23e-01  
 10  +2.8235e-01  +3.2397e-01  4.16e-02  1.15e-04  7.85e-03  1.21e-05  4.74e-04  7.43e-01  
 11  +2.7576e-01  +2.9005e-01  1.43e-02  3.83e-05  2.60e-03  4.42e-06  1.69e-04  7.47e-01  
 12  +2.7340e-01  +2.7878e-01  5.38e-03  1.41e-05  9.57e-04  1.69e-06  6.53e-05  6.84e-01  
 13  +2.7198e-01  +2.7223e-01  2.57e-04  6.63e-07  4.51e-05  7.44e-08  3.20e-06  9.57e-01  
 14  +2.7190e-01  +2.7190e-01  2.66e-06  6.83e-09  4.64e-07  7.61e-10  3.32e-08  9.90e-01  
 15  +2.7190e-01  +2.7190e-01  2.66e-08  6.84e-11  4.65e-09  7.62e-12  3.32e-10  9.90e-01  
 16  +2.7190e-01  +2.7190e-01  2.69e-10  6.91e-13  4.70e-11  7.72e-14  3.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 29.0016ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:09 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:09 PM: Optimal value: 2.719e-01
(CVXPY) Sep 20 07:57:09 PM: Compilation took 9.040e-03 seconds
(CVXPY) Sep 20 07:57:09 PM: Solver (including time spent in interface) took 3.063e-02 seconds
Iteration: 30, Objective: 0.2719
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:10 PM: Your problem has 795 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:10 PM: Finished problem compilation (took 9.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 795
  constraints   = 1295
  nnz(P)        = 0
  nnz(A)        = 10376
  cones (total) = 1
    : Nonnegative = 1,  numel = 1295

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9906e-01  +5.0253e+02  5.02e+02  9.61e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.4334e-01  +1.1050e+02  1.10e+02  4.36e-01  2.00e+01  3.86e-03  5.74e-01  5.83e-01  
  2  +5.0482e-01  +1.4274e+01  1.38e+01  1.26e-01  7.75e+00  2.07e-02  2.38e-01  9.90e-01  
  3  +4.9001e-01  +2.4404e+00  1.95e+00  1.57e-02  1.15e+00  5.48e-03  3.65e-02  8.90e-01  
  4  +4.5276e-01  +1.8626e+00  1.41e+00  5.20e-03  3.86e-01  8.25e-03  1.22e-02  6.93e-01  
  5  +4.2257e-01  +1.5804e+00  1.16e+00  3.58e-03  2.62e-01  6.16e-03  8.79e-03  3.86e-01  
  6  +3.7382e-01  +1.0321e+00  6.58e-01  2.24e-03  1.56e-01  4.85e-05  6.39e-03  7.30e-01  
  7  +3.3184e-01  +6.3352e-01  3.02e-01  9.53e-04  6.51e-02  2.92e-05  3.07e-03  5.66e-01  
  8  +3.0303e-01  +4.3891e-01  1.36e-01  4.09e-04  2.77e-02  2.92e-05  1.49e-03  7.07e-01  
  9  +2.9692e-01  +4.0587e-01  1.09e-01  3.18e-04  2.15e-02  2.65e-05  1.19e-03  3.21e-01  
 10  +2.8234e-01  +3.2397e-01  4.16e-02  1.15e-04  7.85e-03  1.21e-05  4.74e-04  7.45e-01  
 11  +2.7578e-01  +2.9015e-01  1.44e-02  3.85e-05  2.62e-03  4.43e-06  1.70e-04  7.42e-01  
 12  +2.7341e-01  +2.7884e-01  5.42e-03  1.42e-05  9.65e-04  1.70e-06  6.58e-05  6.83e-01  
 13  +2.7198e-01  +2.7224e-01  2.60e-04  6.70e-07  4.56e-05  7.50e-08  3.24e-06  9.57e-01  
 14  +2.7190e-01  +2.7190e-01  2.69e-06  6.91e-09  4.70e-07  7.69e-10  3.36e-08  9.90e-01  
 15  +2.7190e-01  +2.7190e-01  2.69e-08  6.92e-11  4.71e-09  7.70e-12  3.37e-10  9.90e-01  
 16  +2.7190e-01  +2.7190e-01  2.72e-10  6.99e-13  4.76e-11  7.80e-14  3.41e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.8071ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:10 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:10 PM: Optimal value: 2.719e-01
(CVXPY) Sep 20 07:57:10 PM: Compilation took 9.005e-03 seconds
(CVXPY) Sep 20 07:57:10 PM: Solver (including time spent in interface) took 2.914e-02 seconds
Iteration: 31, Objective: 0.2719
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:10 PM: Your problem has 796 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:10 PM: Finished problem compilation (took 8.342e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 796
  constraints   = 1296
  nnz(P)        = 0
  nnz(A)        = 10383
  cones (total) = 1
    : Nonnegative = 1,  numel = 1296

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9906e-01  +5.0253e+02  5.02e+02  9.61e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.4337e-01  +1.1049e+02  1.10e+02  4.36e-01  2.00e+01  3.86e-03  5.74e-01  5.84e-01  
  2  +5.0479e-01  +1.4268e+01  1.38e+01  1.26e-01  7.74e+00  2.06e-02  2.38e-01  9.90e-01  
  3  +4.8993e-01  +2.4498e+00  1.96e+00  1.58e-02  1.15e+00  5.50e-03  3.66e-02  8.89e-01  
  4  +4.5275e-01  +1.8676e+00  1.41e+00  5.23e-03  3.89e-01  8.23e-03  1.23e-02  6.91e-01  
  5  +4.2223e-01  +1.5782e+00  1.16e+00  3.58e-03  2.61e-01  6.16e-03  8.79e-03  3.89e-01  
  6  +3.7368e-01  +1.0338e+00  6.60e-01  2.25e-03  1.57e-01  4.84e-05  6.42e-03  7.31e-01  
  7  +3.3180e-01  +6.3461e-01  3.03e-01  9.57e-04  6.53e-02  2.91e-05  3.09e-03  5.66e-01  
  8  +3.0288e-01  +4.3834e-01  1.35e-01  4.08e-04  2.76e-02  2.90e-05  1.49e-03  7.08e-01  
  9  +2.9685e-01  +4.0581e-01  1.09e-01  3.18e-04  2.15e-02  2.64e-05  1.19e-03  3.20e-01  
 10  +2.8232e-01  +3.2415e-01  4.18e-02  1.16e-04  7.89e-03  1.21e-05  4.77e-04  7.42e-01  
 11  +2.7588e-01  +2.9081e-01  1.49e-02  4.02e-05  2.73e-03  4.52e-06  1.77e-04  7.15e-01  
 12  +2.7343e-01  +2.7897e-01  5.54e-03  1.45e-05  9.88e-04  1.71e-06  6.75e-05  6.90e-01  
 13  +2.7198e-01  +2.7225e-01  2.68e-04  6.94e-07  4.71e-05  7.65e-08  3.35e-06  9.57e-01  
 14  +2.7190e-01  +2.7190e-01  2.78e-06  7.17e-09  4.87e-07  7.85e-10  3.49e-08  9.90e-01  
 15  +2.7190e-01  +2.7190e-01  2.78e-08  7.18e-11  4.88e-09  7.86e-12  3.49e-10  9.90e-01  
 16  +2.7190e-01  +2.7190e-01  2.81e-10  7.26e-13  4.93e-11  7.97e-14  3.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 29.3417ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:10 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:10 PM: Optimal value: 2.719e-01
(CVXPY) Sep 20 07:57:10 PM: Compilation took 8.342e-03 seconds
(CVXPY) Sep 20 07:57:10 PM: Solver (including time spent in interface) took 3.158e-02 seconds
FULL MODEL:
  Accruacy: 0.655
  Our objective: 0.31000000000000005

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.022)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0)                       <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.022)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 1)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.018)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x2 = 0 AND x4 = 0 AND x7 = 1)                                                        <-- (term's our objective: 0.044)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.004)
 OR (x1 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.024)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.014)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.33884572982788
Best over terms:
  Our final objective: 0.04399999999999996
    Its accruacy: 0.522
    Its hamming distance: 7
  Shortest hamming distance: 4
    Its our objective: 0.010000000000000012
  Highest accruacy: 0.522
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

