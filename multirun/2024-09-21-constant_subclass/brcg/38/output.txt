Command:
python test_script.py -s constant_subclass -d 1 -n 50000 --seed 34 -m brcg -k 1 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.6031200000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 1.

Computed total variation: 0.6031200000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:25:31 PM: Your problem has 25003 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:25:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:25:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:25:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:25:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:25:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:25:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:25:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:25:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:25:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:25:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:25:31 PM: Finished problem compilation (took 3.703e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:25:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25003
  constraints   = 50003
  nnz(P)        = 0
  nnz(A)        = 100003
  cones (total) = 1
    : Nonnegative = 1,  numel = 50003

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0002e-01  +2.5002e+04  2.50e+04  9.92e-01  1.44e+02  1.00e+00  1.00e+00   ------   
  1  +6.6439e-01  +4.0377e+03  4.04e+03  2.22e-01  5.90e+01  4.90e-03  3.29e-01  7.58e-01  
  2  +5.5527e-01  +7.4792e+02  7.47e+02  1.34e-01  3.91e+01  4.08e-03  2.12e-01  4.92e-01  
  3  +5.0054e-01  +1.0864e+01  1.04e+01  2.96e-02  8.25e+00  6.96e-05  2.03e-01  3.17e-01  
  4  +4.9992e-01  +2.0515e+00  1.55e+00  4.54e-03  1.31e+00  4.78e-05  4.94e-02  9.81e-01  
  5  +4.9284e-01  +2.2572e+00  1.76e+00  7.24e-04  2.30e-01  1.74e-03  1.53e-03  9.74e-01  
  6  +4.1803e-01  +1.8158e+00  1.40e+00  5.72e-05  1.82e-02  1.72e-02  1.16e-04  9.24e-01  
  7  +3.1696e-01  +9.9646e-01  6.80e-01  3.89e-05  1.18e-02  9.73e-05  1.01e-04  2.67e-01  
  8  +2.3415e-01  +4.3354e-01  1.99e-01  1.23e-05  3.59e-03  5.79e-07  4.97e-05  6.01e-01  
  9  +2.0120e-01  +2.1612e-01  1.49e-02  9.35e-07  2.69e-04  3.96e-08  5.57e-06  9.26e-01  
 10  +1.9857e-01  +1.9875e-01  1.80e-04  1.13e-08  3.24e-06  4.82e-10  7.13e-08  9.87e-01  
 11  +1.9854e-01  +1.9854e-01  1.80e-06  1.12e-10  3.24e-08  4.81e-12  7.13e-10  9.90e-01  
 12  +1.9854e-01  +1.9854e-01  1.80e-08  1.12e-12  3.24e-10  4.83e-14  7.16e-12  9.90e-01  
 13  +1.9854e-01  +1.9854e-01  1.80e-10  1.11e-14  3.24e-12  4.85e-16  7.19e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 119.1565ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:25:31 PM: Problem status: optimal
(CVXPY) Sep 20 07:25:31 PM: Optimal value: 1.985e-01
(CVXPY) Sep 20 07:25:31 PM: Compilation took 3.703e-02 seconds
(CVXPY) Sep 20 07:25:31 PM: Solver (including time spent in interface) took 1.340e-01 seconds
Initial LP solved
FULL MODEL:
  Accruacy: 0.80156
  Our objective: 0.6031199999999999

IF 
    (x0 = 0) <-- (term's our objective: 0.60312)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.9589431285858154
Best over terms:
  Our final objective: 0.6031199999999999
    Its accruacy: 0.80156
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.6031199999999999
  Highest accruacy: 0.80156
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

