Command:
python test_script.py -s constant_subclass -d 7 -n 10000 --seed 43 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0096
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 7.

Computed total variation: 0.0938
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:41 PM: Your problem has 5015 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:41 PM: Finished problem compilation (took 2.703e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5015
  constraints   = 10015
  nnz(P)        = 0
  nnz(A)        = 50015
  cones (total) = 1
    : Nonnegative = 1,  numel = 10015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.85e-01  1.05e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +1.0510e+03  1.05e+03  4.04e-01  6.56e+01  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3818e-01  +1.3093e+02  1.30e+02  1.57e-01  3.24e+01  1.31e-02  2.55e-01  8.65e-01  
  3  +5.0993e-01  +3.3563e+01  3.31e+01  1.21e-01  2.47e+01  3.44e-05  2.46e-01  1.62e-01  
  4  +5.0061e-01  +2.0541e+00  1.55e+00  1.05e-02  2.19e+00  4.90e-06  1.53e-01  7.47e-01  
  5  +5.0007e-01  +7.3471e-01  2.35e-01  1.57e-03  3.31e-01  1.60e-05  6.66e-02  9.90e-01  
  6  +5.0001e-01  +5.3855e-01  3.85e-02  2.57e-04  5.43e-02  4.69e-06  1.17e-02  8.41e-01  
  7  +4.9999e-01  +5.5273e-01  5.27e-02  3.24e-04  6.84e-02  2.18e-05  2.73e-03  8.47e-01  
  8  +4.9897e-01  +5.4676e-01  4.78e-02  2.32e-05  4.91e-03  6.59e-04  7.39e-05  9.76e-01  
  9  +4.9777e-01  +5.4000e-01  4.22e-02  1.30e-05  2.75e-03  8.46e-04  4.13e-05  5.08e-01  
 10  +4.9537e-01  +5.2343e-01  2.81e-02  8.55e-06  1.81e-03  3.41e-04  2.84e-05  4.51e-01  
 11  +4.9399e-01  +5.1469e-01  2.07e-02  5.79e-06  1.23e-03  3.57e-06  2.03e-05  8.38e-01  
 12  +4.9087e-01  +5.0136e-01  1.05e-02  2.46e-06  5.21e-04  1.12e-06  9.18e-06  7.25e-01  
 13  +4.8805e-01  +4.8992e-01  1.86e-03  3.81e-07  8.08e-05  7.41e-08  1.53e-06  9.83e-01  
 14  +4.8770e-01  +4.8854e-01  8.36e-04  1.69e-07  3.59e-05  4.07e-08  6.86e-07  9.90e-01  
 15  +4.8740e-01  +4.8742e-01  1.29e-05  2.58e-09  5.48e-07  6.16e-10  1.06e-08  9.85e-01  
 16  +4.8740e-01  +4.8740e-01  1.29e-07  2.58e-11  5.48e-09  6.16e-12  1.06e-10  9.90e-01  
 17  +4.8740e-01  +4.8740e-01  1.29e-09  2.59e-13  5.48e-11  6.40e-14  1.10e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.9254ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:41 PM: Optimal value: 4.874e-01
(CVXPY) Sep 20 07:40:41 PM: Compilation took 2.703e-02 seconds
(CVXPY) Sep 20 07:40:41 PM: Solver (including time spent in interface) took 8.009e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4874
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:41 PM: Your problem has 5025 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:41 PM: Finished problem compilation (took 2.753e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5025
  constraints   = 10025
  nnz(P)        = 0
  nnz(A)        = 56762
  cones (total) = 1
    : Nonnegative = 1,  numel = 10025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.08e+02  1.00e+00  1.00e+00   ------   
  1  +5.8808e-01  +1.0513e+03  1.05e+03  4.04e-01  6.72e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3807e-01  +1.3072e+02  1.30e+02  1.57e-01  3.31e+01  1.31e-02  2.55e-01  8.66e-01  
  3  +5.0990e-01  +3.3499e+01  3.30e+01  1.21e-01  2.52e+01  3.44e-05  2.46e-01  1.63e-01  
  4  +5.0061e-01  +2.0480e+00  1.55e+00  1.05e-02  2.24e+00  4.92e-06  1.52e-01  7.51e-01  
  5  +5.0007e-01  +7.3874e-01  2.39e-01  1.60e-03  3.45e-01  1.60e-05  6.48e-02  9.90e-01  
  6  +5.0002e-01  +5.6627e-01  6.63e-02  4.43e-04  9.56e-02  6.69e-06  1.61e-02  8.60e-01  
  7  +4.9996e-01  +6.4542e-01  1.45e-01  6.50e-04  1.41e-01  6.28e-05  3.08e-03  9.22e-01  
  8  +4.9982e-01  +6.3432e-01  1.34e-01  3.03e-04  6.57e-02  1.43e-04  1.11e-03  6.68e-01  
  9  +4.9834e-01  +6.2437e-01  1.26e-01  4.52e-05  9.83e-03  9.50e-04  1.48e-04  8.67e-01  
 10  +4.9728e-01  +5.9144e-01  9.42e-02  3.87e-05  8.42e-03  4.23e-04  1.29e-04  2.64e-01  
 11  +4.9756e-01  +5.7194e-01  7.44e-02  3.32e-05  7.22e-03  1.22e-04  1.10e-04  5.00e-01  
 12  +4.9314e-01  +5.3254e-01  3.94e-02  1.17e-05  2.53e-03  6.64e-05  3.91e-05  7.93e-01  
 13  +4.9319e-01  +5.3386e-01  4.07e-02  1.05e-05  2.29e-03  6.79e-05  3.44e-05  2.25e-01  
 14  +4.9314e-01  +5.3354e-01  4.04e-02  1.05e-05  2.29e-03  6.62e-05  3.43e-05  1.07e-02  
 15  +4.9109e-01  +5.2268e-01  3.16e-02  8.13e-06  1.77e-03  1.96e-05  2.63e-05  5.93e-01  
 16  +4.8672e-01  +5.0203e-01  1.53e-02  2.83e-06  6.15e-04  9.37e-06  8.95e-06  8.18e-01  
 17  +4.8517e-01  +4.9714e-01  1.20e-02  2.49e-06  5.40e-04  2.01e-06  8.34e-06  4.83e-01  
 18  +4.8168e-01  +4.8529e-01  3.61e-03  5.88e-07  1.28e-04  8.80e-07  1.88e-06  8.08e-01  
 19  +4.8119e-01  +4.8367e-01  2.48e-03  3.91e-07  8.49e-05  6.02e-07  1.24e-06  3.73e-01  
 20  +4.8112e-01  +4.8341e-01  2.29e-03  3.76e-07  8.16e-05  5.04e-07  1.24e-06  1.76e-02  
 21  +4.8098e-01  +4.8290e-01  1.92e-03  3.15e-07  6.84e-05  3.83e-07  1.04e-06  2.93e-01  
 22  +4.8066e-01  +4.8183e-01  1.17e-03  1.90e-07  4.12e-05  2.09e-07  6.14e-07  5.37e-01  
 23  +4.8048e-01  +4.8134e-01  8.61e-04  1.36e-07  2.95e-05  1.32e-07  4.33e-07  4.81e-01  
 24  +4.8010e-01  +4.8012e-01  1.08e-05  1.70e-09  3.70e-07  1.61e-09  5.45e-09  9.88e-01  
 25  +4.8010e-01  +4.8010e-01  1.08e-07  1.70e-11  3.70e-09  1.61e-11  5.45e-11  9.90e-01  
 26  +4.8010e-01  +4.8010e-01  1.08e-09  1.70e-13  3.70e-11  1.62e-13  5.49e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 141.1542ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:41 PM: Optimal value: 4.801e-01
(CVXPY) Sep 20 07:40:41 PM: Compilation took 2.753e-02 seconds
(CVXPY) Sep 20 07:40:41 PM: Solver (including time spent in interface) took 1.504e-01 seconds
Iteration: 2, Objective: 0.4801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:41 PM: Your problem has 5035 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:41 PM: Finished problem compilation (took 3.200e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5035
  constraints   = 10035
  nnz(P)        = 0
  nnz(A)        = 59943
  cones (total) = 1
    : Nonnegative = 1,  numel = 10035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.08e+02  1.00e+00  1.00e+00   ------   
  1  +5.8805e-01  +1.0514e+03  1.05e+03  4.04e-01  6.75e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3803e-01  +1.3064e+02  1.30e+02  1.57e-01  3.33e+01  1.31e-02  2.55e-01  8.66e-01  
  3  +5.0988e-01  +3.3462e+01  3.30e+01  1.21e-01  2.53e+01  3.45e-05  2.46e-01  1.64e-01  
  4  +5.0061e-01  +2.0408e+00  1.54e+00  1.05e-02  2.24e+00  4.94e-06  1.51e-01  7.55e-01  
  5  +5.0007e-01  +7.4179e-01  2.42e-01  1.62e-03  3.51e-01  1.59e-05  6.33e-02  9.90e-01  
  6  +5.0004e-01  +6.5906e-01  1.59e-01  1.06e-03  2.31e-01  1.21e-05  3.62e-02  5.08e-01  
  7  +5.0004e-01  +6.4732e-01  1.47e-01  9.85e-04  2.13e-01  1.23e-05  2.62e-02  3.49e-01  
  8  +5.0001e-01  +6.0706e-01  1.07e-01  6.71e-04  1.45e-01  1.77e-05  6.01e-03  9.90e-01  
  9  +4.9924e-01  +5.8976e-01  9.05e-02  5.00e-05  1.09e-02  4.99e-04  1.57e-04  9.81e-01  
 10  +4.9839e-01  +5.8251e-01  8.41e-02  3.17e-05  6.93e-03  6.28e-04  9.89e-05  4.47e-01  
 11  +4.9690e-01  +5.6933e-01  7.24e-02  2.59e-05  5.65e-03  4.71e-04  8.10e-05  2.90e-01  
 12  +4.9657e-01  +5.6563e-01  6.91e-02  2.54e-05  5.55e-03  3.64e-04  7.99e-05  1.35e-01  
 13  +4.9490e-01  +5.5335e-01  5.85e-02  1.98e-05  4.32e-03  2.30e-04  6.22e-05  4.05e-01  
 14  +4.9478e-01  +5.5229e-01  5.75e-02  1.92e-05  4.19e-03  2.01e-04  6.01e-05  1.30e-01  
 15  +4.9488e-01  +5.5190e-01  5.70e-02  1.60e-05  3.49e-03  5.64e-05  4.94e-05  7.59e-01  
 16  +4.9417e-01  +5.4869e-01  5.45e-02  1.42e-05  3.10e-03  4.93e-05  4.40e-05  2.11e-01  
 17  +4.9396e-01  +5.4768e-01  5.37e-02  1.41e-05  3.07e-03  4.36e-05  4.36e-05  8.96e-02  
 18  +4.8942e-01  +5.2882e-01  3.94e-02  8.58e-06  1.87e-03  1.85e-05  2.69e-05  6.56e-01  
 19  +4.8182e-01  +4.9784e-01  1.60e-02  3.01e-06  6.58e-04  4.74e-06  9.75e-06  7.46e-01  
 20  +4.7694e-01  +4.7963e-01  2.69e-03  4.65e-07  1.01e-04  6.95e-07  1.56e-06  8.56e-01  
 21  +4.7677e-01  +4.7907e-01  2.30e-03  3.85e-07  8.40e-05  5.90e-07  1.27e-06  2.32e-01  
 22  +4.7671e-01  +4.7883e-01  2.12e-03  3.68e-07  8.03e-05  4.81e-07  1.27e-06  3.77e-02  
 23  +4.7669e-01  +4.7875e-01  2.06e-03  3.57e-07  7.79e-05  4.54e-07  1.23e-06  7.57e-02  
 24  +4.7645e-01  +4.7789e-01  1.44e-03  2.48e-07  5.42e-05  2.86e-07  8.48e-07  4.24e-01  
 25  +4.7634e-01  +4.7760e-01  1.26e-03  2.09e-07  4.55e-05  2.39e-07  6.94e-07  3.17e-01  
 26  +4.7584e-01  +4.7593e-01  8.74e-05  1.44e-08  3.14e-06  7.63e-09  4.80e-08  9.90e-01  
 27  +4.7580e-01  +4.7580e-01  8.82e-07  1.45e-10  3.16e-08  7.69e-11  4.85e-10  9.90e-01  
 28  +4.7580e-01  +4.7580e-01  8.82e-09  1.45e-12  3.16e-10  7.69e-13  4.85e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 166.137ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:42 PM: Optimal value: 4.758e-01
(CVXPY) Sep 20 07:40:42 PM: Compilation took 3.200e-02 seconds
(CVXPY) Sep 20 07:40:42 PM: Solver (including time spent in interface) took 1.762e-01 seconds
Iteration: 3, Objective: 0.4758
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:42 PM: Your problem has 5045 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:42 PM: Finished problem compilation (took 3.605e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5045
  constraints   = 10045
  nnz(P)        = 0
  nnz(A)        = 63290
  cones (total) = 1
    : Nonnegative = 1,  numel = 10045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8802e-01  +1.0513e+03  1.05e+03  4.04e-01  6.78e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3798e-01  +1.3053e+02  1.30e+02  1.57e-01  3.34e+01  1.31e-02  2.55e-01  8.67e-01  
  3  +5.0986e-01  +3.3417e+01  3.29e+01  1.21e-01  2.54e+01  3.45e-05  2.46e-01  1.65e-01  
  4  +5.0060e-01  +2.0294e+00  1.53e+00  1.04e-02  2.23e+00  4.95e-06  1.50e-01  7.61e-01  
  5  +5.0007e-01  +7.4500e-01  2.45e-01  1.64e-03  3.58e-01  1.59e-05  6.15e-02  9.90e-01  
  6  +5.0004e-01  +6.4743e-01  1.47e-01  9.86e-04  2.15e-01  1.33e-05  2.70e-02  6.45e-01  
  7  +5.0000e-01  +6.3166e-01  1.32e-01  8.22e-04  1.79e-01  3.28e-05  7.02e-03  7.96e-01  
  8  +4.9873e-01  +6.2470e-01  1.26e-01  7.49e-05  1.65e-02  8.28e-04  2.37e-04  9.69e-01  
  9  +4.9684e-01  +6.0797e-01  1.11e-01  3.72e-05  8.18e-03  1.22e-03  1.17e-04  5.83e-01  
 10  +4.9611e-01  +5.9648e-01  1.00e-01  3.34e-05  7.33e-03  8.21e-04  1.04e-04  2.99e-01  
 11  +4.9440e-01  +5.7843e-01  8.40e-02  2.60e-05  5.72e-03  3.83e-04  8.06e-05  5.37e-01  
 12  +4.9416e-01  +5.7680e-01  8.26e-02  2.34e-05  5.15e-03  3.06e-04  7.21e-05  3.02e-01  
 13  +4.9350e-01  +5.7330e-01  7.98e-02  2.16e-05  4.75e-03  2.58e-04  6.66e-05  1.96e-01  
 14  +4.9007e-01  +5.5266e-01  6.26e-02  1.67e-05  3.67e-03  2.57e-06  5.25e-05  8.06e-01  
 15  +4.8105e-01  +5.1780e-01  3.68e-02  7.65e-06  1.68e-03  1.67e-06  2.47e-05  7.07e-01  
 16  +4.7507e-01  +4.9354e-01  1.85e-02  3.54e-06  7.77e-04  9.76e-07  1.18e-05  9.90e-01  
 17  +4.6945e-01  +4.7266e-01  3.21e-03  5.90e-07  1.29e-04  1.58e-07  2.04e-06  8.58e-01  
 18  +4.6825e-01  +4.6861e-01  3.63e-04  6.45e-08  1.41e-05  1.91e-08  2.32e-07  9.20e-01  
 19  +4.6810e-01  +4.6811e-01  5.23e-06  9.26e-10  2.03e-07  2.87e-10  3.34e-09  9.89e-01  
 20  +4.6810e-01  +4.6810e-01  5.23e-08  9.26e-12  2.03e-09  2.87e-12  3.34e-11  9.90e-01  
 21  +4.6810e-01  +4.6810e-01  5.23e-10  9.27e-14  2.03e-11  3.00e-14  3.50e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 130.5667ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:42 PM: Optimal value: 4.681e-01
(CVXPY) Sep 20 07:40:42 PM: Compilation took 3.605e-02 seconds
(CVXPY) Sep 20 07:40:42 PM: Solver (including time spent in interface) took 1.422e-01 seconds
Iteration: 4, Objective: 0.4681
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:42 PM: Your problem has 5055 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:42 PM: Finished problem compilation (took 3.588e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5055
  constraints   = 10055
  nnz(P)        = 0
  nnz(A)        = 64943
  cones (total) = 1
    : Nonnegative = 1,  numel = 10055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8800e-01  +1.0512e+03  1.05e+03  4.04e-01  6.79e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3797e-01  +1.3051e+02  1.30e+02  1.57e-01  3.33e+01  1.31e-02  2.54e-01  8.67e-01  
  3  +5.0986e-01  +3.3408e+01  3.29e+01  1.21e-01  2.54e+01  3.45e-05  2.46e-01  1.65e-01  
  4  +5.0060e-01  +2.0259e+00  1.53e+00  1.04e-02  2.23e+00  4.96e-06  1.50e-01  7.62e-01  
  5  +5.0007e-01  +7.4503e-01  2.45e-01  1.65e-03  3.59e-01  1.58e-05  6.10e-02  9.90e-01  
  6  +5.0004e-01  +6.6371e-01  1.64e-01  1.10e-03  2.39e-01  1.42e-05  3.01e-02  5.77e-01  
  7  +5.0000e-01  +6.3954e-01  1.40e-01  8.75e-04  1.91e-01  3.30e-05  7.61e-03  8.11e-01  
  8  +4.9872e-01  +6.2937e-01  1.31e-01  7.81e-05  1.72e-02  8.34e-04  2.47e-04  9.81e-01  
  9  +4.9670e-01  +6.1326e-01  1.17e-01  3.72e-05  8.19e-03  1.32e-03  1.16e-04  5.98e-01  
 10  +4.9575e-01  +6.0210e-01  1.06e-01  3.33e-05  7.32e-03  1.00e-03  1.04e-04  2.43e-01  
 11  +4.9483e-01  +5.9303e-01  9.82e-02  2.96e-05  6.50e-03  7.59e-04  9.17e-05  2.68e-01  
 12  +4.9274e-01  +5.7783e-01  8.51e-02  2.24e-05  4.93e-03  4.19e-04  6.92e-05  5.38e-01  
 13  +4.9219e-01  +5.7496e-01  8.28e-02  2.10e-05  4.62e-03  3.61e-04  6.49e-05  1.68e-01  
 14  +4.9042e-01  +5.6397e-01  7.35e-02  1.90e-05  4.18e-03  1.56e-04  5.92e-05  4.30e-01  
 15  +4.8405e-01  +5.3787e-01  5.38e-02  1.18e-05  2.60e-03  6.54e-05  3.76e-05  6.20e-01  
 16  +4.7246e-01  +4.9313e-01  2.07e-02  3.88e-06  8.51e-04  1.96e-05  1.28e-05  7.07e-01  
 17  +4.7212e-01  +4.9174e-01  1.96e-02  3.63e-06  7.98e-04  1.66e-05  1.20e-05  1.72e-01  
 18  +4.7039e-01  +4.8519e-01  1.48e-02  2.66e-06  5.84e-04  8.40e-06  8.87e-06  5.20e-01  
 19  +4.6733e-01  +4.7403e-01  6.70e-03  1.17e-06  2.56e-04  4.94e-07  3.95e-06  9.90e-01  
 20  +4.6494e-01  +4.6596e-01  1.02e-03  1.75e-07  3.85e-05  7.33e-08  6.07e-07  8.55e-01  
 21  +4.6451e-01  +4.6452e-01  1.34e-05  2.31e-09  5.06e-07  9.45e-10  8.05e-09  9.87e-01  
 22  +4.6450e-01  +4.6450e-01  1.34e-07  2.31e-11  5.06e-09  9.45e-12  8.05e-11  9.90e-01  
 23  +4.6450e-01  +4.6450e-01  1.35e-09  2.31e-13  5.07e-11  9.85e-14  8.38e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 142.4297ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:42 PM: Optimal value: 4.645e-01
(CVXPY) Sep 20 07:40:42 PM: Compilation took 3.588e-02 seconds
(CVXPY) Sep 20 07:40:42 PM: Solver (including time spent in interface) took 1.531e-01 seconds
Iteration: 5, Objective: 0.4645
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:42 PM: Your problem has 5065 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:42 PM: Finished problem compilation (took 3.932e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5065
  constraints   = 10065
  nnz(P)        = 0
  nnz(A)        = 66851
  cones (total) = 1
    : Nonnegative = 1,  numel = 10065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8796e-01  +1.0513e+03  1.05e+03  4.05e-01  6.79e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3792e-01  +1.3039e+02  1.30e+02  1.57e-01  3.33e+01  1.32e-02  2.54e-01  8.67e-01  
  3  +5.0985e-01  +3.3379e+01  3.29e+01  1.21e-01  2.54e+01  3.45e-05  2.46e-01  1.66e-01  
  4  +5.0060e-01  +2.0275e+00  1.53e+00  1.04e-02  2.24e+00  4.97e-06  1.50e-01  7.63e-01  
  5  +5.0007e-01  +7.4777e-01  2.48e-01  1.66e-03  3.63e-01  1.59e-05  6.05e-02  9.90e-01  
  6  +5.0005e-01  +6.7355e-01  1.74e-01  1.16e-03  2.54e-01  1.50e-05  2.99e-02  5.90e-01  
  7  +5.0002e-01  +6.8486e-01  1.85e-01  1.13e-03  2.48e-01  3.12e-05  8.77e-03  9.23e-01  
  8  +4.9933e-01  +6.5912e-01  1.60e-01  1.39e-04  3.05e-02  4.61e-04  4.42e-04  9.53e-01  
  9  +4.9774e-01  +6.4376e-01  1.46e-01  5.13e-05  1.13e-02  1.06e-03  1.59e-04  6.73e-01  
 10  +4.9652e-01  +6.2795e-01  1.31e-01  4.30e-05  9.46e-03  8.96e-04  1.33e-04  2.50e-01  
 11  +4.9657e-01  +6.1968e-01  1.23e-01  4.11e-05  9.06e-03  6.30e-04  1.27e-04  2.34e-01  
 12  +4.9569e-01  +6.1084e-01  1.15e-01  3.47e-05  7.64e-03  5.47e-04  1.06e-04  2.78e-01  
 13  +4.9438e-01  +5.9391e-01  9.95e-02  2.86e-05  6.29e-03  2.39e-04  8.78e-05  5.34e-01  
 14  +4.9403e-01  +5.9194e-01  9.79e-02  2.84e-05  6.25e-03  2.20e-04  8.76e-05  4.38e-02  
 15  +4.8778e-01  +5.6191e-01  7.41e-02  1.71e-05  3.76e-03  1.42e-04  5.36e-05  5.52e-01  
 16  +4.8534e-01  +5.5118e-01  6.58e-02  1.47e-05  3.24e-03  1.06e-04  4.67e-05  2.35e-01  
 17  +4.7988e-01  +5.2627e-01  4.64e-02  9.89e-06  2.17e-03  1.09e-06  3.20e-05  8.53e-01  
 18  +4.7218e-01  +4.9779e-01  2.56e-02  4.94e-06  1.08e-03  7.15e-07  1.64e-05  5.72e-01  
 19  +4.7086e-01  +4.9277e-01  2.19e-02  4.07e-06  8.94e-04  8.81e-07  1.36e-05  4.73e-01  
 20  +4.6626e-01  +4.7654e-01  1.03e-02  1.83e-06  4.02e-04  4.48e-07  6.22e-06  6.20e-01  
 21  +4.6421e-01  +4.6910e-01  4.89e-03  8.47e-07  1.86e-04  3.23e-07  2.92e-06  9.90e-01  
 22  +4.6234e-01  +4.6290e-01  5.52e-04  9.51e-08  2.09e-05  3.69e-08  3.32e-07  9.90e-01  
 23  +4.6210e-01  +4.6211e-01  6.45e-06  1.11e-09  2.44e-07  4.26e-10  3.89e-09  9.89e-01  
 24  +4.6210e-01  +4.6210e-01  6.45e-08  1.11e-11  2.44e-09  4.26e-12  3.89e-11  9.90e-01  
 25  +4.6210e-01  +4.6210e-01  6.45e-10  1.11e-13  2.44e-11  4.32e-14  3.94e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 151.3034ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:43 PM: Optimal value: 4.621e-01
(CVXPY) Sep 20 07:40:43 PM: Compilation took 3.932e-02 seconds
(CVXPY) Sep 20 07:40:43 PM: Solver (including time spent in interface) took 1.617e-01 seconds
Iteration: 6, Objective: 0.4621
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:43 PM: Your problem has 5075 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:43 PM: Finished problem compilation (took 3.804e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5075
  constraints   = 10075
  nnz(P)        = 0
  nnz(A)        = 68679
  cones (total) = 1
    : Nonnegative = 1,  numel = 10075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8797e-01  +1.0512e+03  1.05e+03  4.05e-01  6.79e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3788e-01  +1.3030e+02  1.30e+02  1.56e-01  3.33e+01  1.32e-02  2.54e-01  8.67e-01  
  3  +5.0983e-01  +3.3344e+01  3.28e+01  1.20e-01  2.54e+01  3.45e-05  2.45e-01  1.66e-01  
  4  +5.0060e-01  +2.0236e+00  1.52e+00  1.04e-02  2.24e+00  4.97e-06  1.49e-01  7.64e-01  
  5  +5.0012e-01  +8.5250e-01  3.52e-01  2.37e-03  5.18e-01  1.51e-05  7.58e-02  8.14e-01  
  6  +5.0006e-01  +6.9669e-01  1.97e-01  1.32e-03  2.88e-01  1.21e-05  3.49e-02  6.27e-01  
  7  +5.0004e-01  +6.8841e-01  1.88e-01  1.21e-03  2.66e-01  2.21e-05  1.24e-02  7.62e-01  
  8  +4.9935e-01  +6.4562e-01  1.46e-01  1.22e-04  2.69e-02  4.45e-04  3.90e-04  9.90e-01  
  9  +4.9849e-01  +6.3564e-01  1.37e-01  6.60e-05  1.45e-02  6.83e-04  2.08e-04  5.42e-01  
 10  +4.9795e-01  +6.1885e-01  1.21e-01  5.29e-05  1.17e-02  3.50e-04  1.65e-04  5.86e-01  
 11  +4.9791e-01  +6.1819e-01  1.20e-01  5.27e-05  1.16e-02  3.36e-04  1.64e-04  3.17e-02  
 12  +4.9717e-01  +6.1034e-01  1.13e-01  4.21e-05  9.29e-03  2.38e-04  1.30e-04  5.11e-01  
 13  +4.9642e-01  +6.0625e-01  1.10e-01  3.58e-05  7.89e-03  2.17e-04  1.10e-04  2.97e-01  
 14  +4.9583e-01  +6.0277e-01  1.07e-01  3.41e-05  7.52e-03  1.74e-04  1.05e-04  2.04e-01  
 15  +4.9357e-01  +5.9262e-01  9.91e-02  2.73e-05  6.01e-03  1.56e-04  8.45e-05  3.06e-01  
 16  +4.9102e-01  +5.8007e-01  8.90e-02  2.46e-05  5.42e-03  6.06e-05  7.74e-05  4.88e-01  
 17  +4.8155e-01  +5.4128e-01  5.97e-02  1.30e-05  2.87e-03  2.52e-05  4.22e-05  6.95e-01  
 18  +4.7018e-01  +4.9685e-01  2.67e-02  5.28e-06  1.16e-03  7.62e-06  1.80e-05  6.54e-01  
 19  +4.6819e-01  +4.8918e-01  2.10e-02  4.02e-06  8.84e-04  4.22e-06  1.38e-05  5.09e-01  
 20  +4.6217e-01  +4.6717e-01  4.99e-03  9.17e-07  2.02e-04  7.30e-07  3.28e-06  8.34e-01  
 21  +4.6164e-01  +4.6524e-01  3.60e-03  6.58e-07  1.45e-04  4.61e-07  2.37e-06  4.35e-01  
 22  +4.6139e-01  +4.6432e-01  2.93e-03  5.34e-07  1.17e-04  3.16e-07  1.93e-06  4.39e-01  
 23  +4.6025e-01  +4.6037e-01  1.20e-04  2.16e-08  4.76e-06  8.31e-09  7.95e-08  9.90e-01  
 24  +4.6020e-01  +4.6020e-01  1.20e-06  2.17e-10  4.78e-08  8.33e-11  8.00e-10  9.90e-01  
 25  +4.6020e-01  +4.6020e-01  1.20e-08  2.17e-12  4.78e-10  8.33e-13  8.00e-12  9.90e-01  
 26  +4.6020e-01  +4.6020e-01  1.20e-10  2.18e-14  4.78e-12  8.46e-15  8.12e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 158.1611ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:43 PM: Optimal value: 4.602e-01
(CVXPY) Sep 20 07:40:43 PM: Compilation took 3.804e-02 seconds
(CVXPY) Sep 20 07:40:43 PM: Solver (including time spent in interface) took 1.687e-01 seconds
Iteration: 7, Objective: 0.4602
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:43 PM: Your problem has 5085 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:43 PM: Finished problem compilation (took 3.772e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5085
  constraints   = 10085
  nnz(P)        = 0
  nnz(A)        = 70100
  cones (total) = 1
    : Nonnegative = 1,  numel = 10085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8792e-01  +1.0514e+03  1.05e+03  4.05e-01  6.80e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3783e-01  +1.3019e+02  1.30e+02  1.57e-01  3.32e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0982e-01  +3.3322e+01  3.28e+01  1.20e-01  2.54e+01  3.45e-05  2.45e-01  1.67e-01  
  4  +5.0060e-01  +2.0311e+00  1.53e+00  1.04e-02  2.25e+00  4.97e-06  1.49e-01  7.63e-01  
  5  +5.0011e-01  +8.3594e-01  3.36e-01  2.26e-03  4.94e-01  1.54e-05  7.29e-02  8.46e-01  
  6  +5.0007e-01  +7.2487e-01  2.25e-01  1.51e-03  3.30e-01  1.36e-05  3.89e-02  5.58e-01  
  7  +5.0003e-01  +6.7806e-01  1.78e-01  1.11e-03  2.43e-01  2.88e-05  9.07e-03  8.73e-01  
  8  +4.9905e-01  +6.6829e-01  1.69e-01  1.08e-04  2.38e-02  6.33e-04  3.45e-04  9.74e-01  
  9  +4.9768e-01  +6.4666e-01  1.49e-01  5.63e-05  1.24e-02  8.58e-04  1.77e-04  5.96e-01  
 10  +4.9689e-01  +6.3702e-01  1.40e-01  4.72e-05  1.04e-02  7.83e-04  1.48e-04  2.71e-01  
 11  +4.9668e-01  +6.3079e-01  1.34e-01  4.63e-05  1.02e-02  6.03e-04  1.45e-04  1.64e-01  
 12  +4.9503e-01  +6.1756e-01  1.23e-01  3.58e-05  7.90e-03  4.95e-04  1.12e-04  4.07e-01  
 13  +4.9378e-01  +6.0949e-01  1.16e-01  3.23e-05  7.13e-03  4.15e-04  1.01e-04  2.00e-01  
 14  +4.9049e-01  +5.8835e-01  9.79e-02  2.67e-05  5.88e-03  1.88e-04  8.45e-05  4.63e-01  
 15  +4.8581e-01  +5.6589e-01  8.01e-02  2.01e-05  4.42e-03  1.10e-04  6.48e-05  4.18e-01  
 16  +4.8043e-01  +5.4014e-01  5.97e-02  1.40e-05  3.09e-03  1.15e-06  4.63e-05  8.51e-01  
 17  +4.7154e-01  +5.0487e-01  3.33e-02  6.97e-06  1.53e-03  6.79e-07  2.39e-05  5.17e-01  
 18  +4.6852e-01  +4.9310e-01  2.46e-02  4.91e-06  1.08e-03  7.28e-07  1.70e-05  4.78e-01  
 19  +4.6599e-01  +4.8356e-01  1.76e-02  3.41e-06  7.51e-04  5.51e-07  1.20e-05  3.43e-01  
 20  +4.6328e-01  +4.7293e-01  9.65e-03  1.80e-06  3.96e-04  5.62e-07  6.44e-06  9.90e-01  
 21  +4.6169e-01  +4.6725e-01  5.56e-03  1.03e-06  2.27e-04  3.25e-07  3.74e-06  4.95e-01  
 22  +4.6017e-01  +4.6183e-01  1.66e-03  3.05e-07  6.71e-05  1.00e-07  1.13e-06  9.90e-01  
 23  +4.5952e-01  +4.5956e-01  4.05e-05  7.43e-09  1.63e-06  2.37e-09  2.77e-08  9.81e-01  
 24  +4.5950e-01  +4.5950e-01  4.05e-07  7.43e-11  1.63e-08  2.37e-11  2.78e-10  9.90e-01  
 25  +4.5950e-01  +4.5950e-01  4.05e-09  7.43e-13  1.63e-10  2.37e-13  2.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 152.5464ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:43 PM: Optimal value: 4.595e-01
(CVXPY) Sep 20 07:40:43 PM: Compilation took 3.772e-02 seconds
(CVXPY) Sep 20 07:40:43 PM: Solver (including time spent in interface) took 1.622e-01 seconds
Iteration: 8, Objective: 0.4595
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:43 PM: Your problem has 5095 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:43 PM: Finished problem compilation (took 3.659e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5095
  constraints   = 10095
  nnz(P)        = 0
  nnz(A)        = 71012
  cones (total) = 1
    : Nonnegative = 1,  numel = 10095

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8791e-01  +1.0514e+03  1.05e+03  4.05e-01  6.79e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3781e-01  +1.3016e+02  1.30e+02  1.57e-01  3.32e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0982e-01  +3.3313e+01  3.28e+01  1.20e-01  2.53e+01  3.45e-05  2.45e-01  1.67e-01  
  4  +5.0060e-01  +2.0314e+00  1.53e+00  1.04e-02  2.25e+00  4.98e-06  1.49e-01  7.64e-01  
  5  +5.0011e-01  +8.2624e-01  3.26e-01  2.20e-03  4.80e-01  1.55e-05  7.12e-02  8.63e-01  
  6  +5.0006e-01  +6.9410e-01  1.94e-01  1.30e-03  2.84e-01  1.38e-05  2.80e-02  8.02e-01  
  7  +5.0001e-01  +6.9748e-01  1.97e-01  1.10e-03  2.41e-01  4.39e-05  6.50e-03  8.48e-01  
  8  +4.9884e-01  +6.9078e-01  1.92e-01  1.04e-04  2.29e-02  7.62e-04  3.32e-04  9.51e-01  
  9  +4.9723e-01  +6.6180e-01  1.65e-01  5.63e-05  1.24e-02  9.41e-04  1.78e-04  5.69e-01  
 10  +4.9609e-01  +6.3791e-01  1.42e-01  4.92e-05  1.09e-02  5.47e-04  1.56e-04  3.50e-01  
 11  +4.9510e-01  +6.2767e-01  1.33e-01  4.30e-05  9.49e-03  4.59e-04  1.35e-04  2.47e-01  
 12  +4.9390e-01  +6.1452e-01  1.21e-01  3.65e-05  8.04e-03  2.98e-04  1.14e-04  3.96e-01  
 13  +4.9365e-01  +6.1325e-01  1.20e-01  3.63e-05  8.01e-03  2.87e-04  1.14e-04  1.66e-02  
 14  +4.8940e-01  +5.9082e-01  1.01e-01  2.65e-05  5.83e-03  2.24e-04  8.43e-05  3.73e-01  
 15  +4.8423e-01  +5.6514e-01  8.09e-02  1.96e-05  4.32e-03  1.45e-04  6.38e-05  3.52e-01  
 16  +4.8029e-01  +5.4271e-01  6.24e-02  1.45e-05  3.20e-03  1.48e-06  4.81e-05  8.44e-01  
 17  +4.7234e-01  +5.1074e-01  3.84e-02  8.05e-06  1.77e-03  9.91e-07  2.75e-05  4.89e-01  
 18  +4.6807e-01  +4.9407e-01  2.60e-02  5.13e-06  1.13e-03  8.58e-07  1.78e-05  5.16e-01  
 19  +4.6701e-01  +4.8975e-01  2.27e-02  4.38e-06  9.63e-04  9.17e-07  1.53e-05  3.91e-01  
 20  +4.6369e-01  +4.7724e-01  1.36e-02  2.53e-06  5.57e-04  6.74e-07  8.97e-06  7.20e-01  
 21  +4.6018e-01  +4.6453e-01  4.35e-03  7.96e-07  1.75e-04  2.17e-07  2.89e-06  7.05e-01  
 22  +4.5884e-01  +4.5967e-01  8.25e-04  1.50e-07  3.29e-05  4.95e-08  5.50e-07  9.90e-01  
 23  +4.5850e-01  +4.5852e-01  1.11e-05  2.01e-09  4.42e-07  6.56e-10  7.43e-09  9.88e-01  
 24  +4.5850e-01  +4.5850e-01  1.11e-07  2.01e-11  4.42e-09  6.56e-12  7.43e-11  9.90e-01  
 25  +4.5850e-01  +4.5850e-01  1.11e-09  2.01e-13  4.43e-11  6.63e-14  7.50e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 149.0798ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:44 PM: Optimal value: 4.585e-01
(CVXPY) Sep 20 07:40:44 PM: Compilation took 3.659e-02 seconds
(CVXPY) Sep 20 07:40:44 PM: Solver (including time spent in interface) took 1.590e-01 seconds
Iteration: 9, Objective: 0.4585
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:44 PM: Your problem has 5096 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:44 PM: Finished problem compilation (took 3.755e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5096
  constraints   = 10096
  nnz(P)        = 0
  nnz(A)        = 71187
  cones (total) = 1
    : Nonnegative = 1,  numel = 10096

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8791e-01  +1.0514e+03  1.05e+03  4.05e-01  6.79e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3782e-01  +1.3017e+02  1.30e+02  1.57e-01  3.32e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0982e-01  +3.3311e+01  3.28e+01  1.20e-01  2.53e+01  3.45e-05  2.45e-01  1.67e-01  
  4  +5.0060e-01  +2.0296e+00  1.53e+00  1.04e-02  2.25e+00  4.98e-06  1.49e-01  7.64e-01  
  5  +5.0011e-01  +8.2392e-01  3.24e-01  2.18e-03  4.77e-01  1.55e-05  7.08e-02  8.66e-01  
  6  +5.0006e-01  +6.9559e-01  1.96e-01  1.31e-03  2.86e-01  1.39e-05  2.80e-02  8.05e-01  
  7  +5.0001e-01  +6.9706e-01  1.97e-01  1.09e-03  2.40e-01  4.43e-05  6.41e-03  8.49e-01  
  8  +4.9883e-01  +6.9054e-01  1.92e-01  1.03e-04  2.28e-02  7.65e-04  3.31e-04  9.50e-01  
  9  +4.9721e-01  +6.6130e-01  1.64e-01  5.57e-05  1.23e-02  9.45e-04  1.77e-04  5.72e-01  
 10  +4.9597e-01  +6.3507e-01  1.39e-01  4.82e-05  1.06e-02  4.97e-04  1.52e-04  3.90e-01  
 11  +4.9478e-01  +6.2423e-01  1.29e-01  4.12e-05  9.08e-03  4.22e-04  1.30e-04  2.66e-01  
 12  +4.9335e-01  +6.1394e-01  1.21e-01  3.52e-05  7.76e-03  3.56e-04  1.11e-04  2.60e-01  
 13  +4.9306e-01  +6.1233e-01  1.19e-01  3.50e-05  7.73e-03  3.41e-04  1.10e-04  1.91e-02  
 14  +4.8930e-01  +5.9234e-01  1.03e-01  2.69e-05  5.92e-03  2.73e-04  8.56e-05  3.15e-01  
 15  +4.8419e-01  +5.6636e-01  8.22e-02  1.99e-05  4.38e-03  1.77e-04  6.47e-05  3.52e-01  
 16  +4.8077e-01  +5.4574e-01  6.50e-02  1.52e-05  3.35e-03  1.86e-05  5.03e-05  7.62e-01  
 17  +4.7323e-01  +5.1489e-01  4.17e-02  8.84e-06  1.95e-03  1.07e-05  3.01e-05  4.50e-01  
 18  +4.6900e-01  +4.9805e-01  2.90e-02  5.81e-06  1.28e-03  6.03e-06  2.01e-05  4.79e-01  
 19  +4.6542e-01  +4.8422e-01  1.88e-02  3.59e-06  7.90e-04  3.18e-06  1.26e-05  5.23e-01  
 20  +4.6457e-01  +4.8085e-01  1.63e-02  3.08e-06  6.78e-04  2.41e-06  1.09e-05  2.98e-01  
 21  +4.6458e-01  +4.8067e-01  1.61e-02  3.02e-06  6.65e-04  2.14e-06  1.07e-05  1.98e-01  
 22  +4.6099e-01  +4.6751e-01  6.52e-03  1.20e-06  2.64e-04  7.92e-07  4.32e-06  6.49e-01  
 23  +4.5927e-01  +4.6123e-01  1.96e-03  3.57e-07  7.86e-05  1.98e-07  1.31e-06  7.98e-01  
 24  +4.5852e-01  +4.5858e-01  5.69e-05  1.03e-08  2.27e-06  4.38e-09  3.81e-08  9.86e-01  
 25  +4.5850e-01  +4.5850e-01  5.69e-07  1.03e-10  2.27e-08  4.38e-11  3.81e-10  9.90e-01  
 26  +4.5850e-01  +4.5850e-01  5.69e-09  1.03e-12  2.27e-10  4.38e-13  3.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 151.2356ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:44 PM: Optimal value: 4.585e-01
(CVXPY) Sep 20 07:40:44 PM: Compilation took 3.755e-02 seconds
(CVXPY) Sep 20 07:40:44 PM: Solver (including time spent in interface) took 1.616e-01 seconds
Iteration: 10, Objective: 0.4585
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:44 PM: Your problem has 5100 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:44 PM: Finished problem compilation (took 4.031e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5100
  constraints   = 10100
  nnz(P)        = 0
  nnz(A)        = 71645
  cones (total) = 1
    : Nonnegative = 1,  numel = 10100

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8791e-01  +1.0514e+03  1.05e+03  4.05e-01  6.79e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3780e-01  +1.3014e+02  1.30e+02  1.57e-01  3.31e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0981e-01  +3.3303e+01  3.28e+01  1.20e-01  2.53e+01  3.45e-05  2.45e-01  1.67e-01  
  4  +5.0060e-01  +2.0306e+00  1.53e+00  1.04e-02  2.25e+00  4.98e-06  1.49e-01  7.64e-01  
  5  +5.0011e-01  +8.3148e-01  3.31e-01  2.23e-03  4.88e-01  1.55e-05  7.18e-02  8.55e-01  
  6  +5.0006e-01  +6.9729e-01  1.97e-01  1.32e-03  2.89e-01  1.38e-05  2.84e-02  8.04e-01  
  7  +5.0001e-01  +6.9679e-01  1.97e-01  1.10e-03  2.40e-01  4.38e-05  6.46e-03  8.47e-01  
  8  +4.9884e-01  +6.9052e-01  1.92e-01  1.04e-04  2.29e-02  7.61e-04  3.31e-04  9.50e-01  
  9  +4.9731e-01  +6.6348e-01  1.66e-01  5.76e-05  1.27e-02  9.37e-04  1.82e-04  5.51e-01  
 10  +4.9641e-01  +6.4437e-01  1.48e-01  5.06e-05  1.12e-02  6.32e-04  1.60e-04  3.11e-01  
 11  +4.9559e-01  +6.3324e-01  1.38e-01  4.47e-05  9.87e-03  4.97e-04  1.41e-04  2.66e-01  
 12  +4.9476e-01  +6.2005e-01  1.25e-01  3.96e-05  8.74e-03  2.87e-04  1.24e-04  3.99e-01  
 13  +4.9458e-01  +6.1892e-01  1.24e-01  3.95e-05  8.72e-03  2.76e-04  1.24e-04  2.14e-02  
 14  +4.8878e-01  +5.8686e-01  9.81e-02  2.48e-05  5.46e-03  1.88e-04  7.93e-05  5.35e-01  
 15  +4.8418e-01  +5.6435e-01  8.02e-02  1.93e-05  4.25e-03  1.20e-04  6.29e-05  3.33e-01  
 16  +4.8176e-01  +5.5102e-01  6.93e-02  1.64e-05  3.62e-03  3.88e-05  5.41e-05  5.74e-01  
 17  +4.7410e-01  +5.1917e-01  4.51e-02  9.67e-06  2.13e-03  2.24e-05  3.29e-05  4.43e-01  
 18  +4.6879e-01  +4.9777e-01  2.90e-02  5.82e-06  1.28e-03  1.11e-05  2.02e-05  5.23e-01  
 19  +4.6563e-01  +4.8544e-01  1.98e-02  3.81e-06  8.39e-04  5.99e-06  1.34e-05  4.93e-01  
 20  +4.6302e-01  +4.7533e-01  1.23e-02  2.31e-06  5.08e-04  2.44e-06  8.25e-06  6.40e-01  
 21  +4.6123e-01  +4.6869e-01  7.47e-03  1.38e-06  3.04e-04  1.36e-06  5.01e-06  4.60e-01  
 22  +4.6073e-01  +4.6656e-01  5.84e-03  1.07e-06  2.36e-04  6.09e-07  3.89e-06  7.34e-01  
 23  +4.5893e-01  +4.6026e-01  1.33e-03  2.43e-07  5.35e-05  1.32e-07  8.98e-07  7.91e-01  
 24  +4.5841e-01  +4.5844e-01  2.55e-05  4.66e-09  1.02e-06  2.28e-09  1.73e-08  9.85e-01  
 25  +4.5840e-01  +4.5840e-01  2.55e-07  4.66e-11  1.03e-08  2.28e-11  1.73e-10  9.90e-01  
 26  +4.5840e-01  +4.5840e-01  2.55e-09  4.66e-13  1.03e-10  2.28e-13  1.73e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 148.8117ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:44 PM: Optimal value: 4.584e-01
(CVXPY) Sep 20 07:40:44 PM: Compilation took 4.031e-02 seconds
(CVXPY) Sep 20 07:40:44 PM: Solver (including time spent in interface) took 1.586e-01 seconds
FULL MODEL:
  Accruacy: 0.5276
  Our objective: 0.05519999999999997

IF 
    (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.0042)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0052)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.0056)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.003)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.0062)
 OR (x1 = 0 AND x6 = 0)                                                        <-- (term's our objective: 0.028)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.026514768600464
Best over terms:
  Our final objective: 0.027999999999999997
    Its accruacy: 0.514
    Its hamming distance: 5
  Shortest hamming distance: 5
    Its our objective: 0.027999999999999997
  Highest accruacy: 0.514
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

