Command:
python test_script.py -s constant_subclass -d 7 -n 50 --seed 43 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 7.

Computed total variation: 0.88
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:07 PM: Your problem has 40 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:07 PM: Finished problem compilation (took 7.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 40
  constraints   = 65
  nnz(P)        = 0
  nnz(A)        = 265
  cones (total) = 1
    : Nonnegative = 1,  numel = 65

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9343e-01  +2.6371e+01  2.59e+01  8.29e-01  6.41e+00  1.00e+00  1.09e+00   ------   
  1  +5.7081e-01  +5.6608e+00  5.09e+00  3.38e-01  3.61e+00  3.80e-03  5.85e-01  6.22e-01  
  2  +4.8706e-01  +1.2056e+00  7.19e-01  7.55e-02  9.77e-01  1.67e-02  2.07e-01  9.41e-01  
  3  +4.2685e-01  +7.4760e-01  3.21e-01  2.11e-02  2.86e-01  9.68e-03  6.88e-02  7.41e-01  
  4  +4.0091e-01  +5.4467e-01  1.44e-01  8.26e-03  1.10e-01  4.21e-03  3.10e-02  6.17e-01  
  5  +3.7247e-01  +4.1884e-01  4.64e-02  2.00e-03  2.69e-02  1.05e-03  9.57e-03  8.19e-01  
  6  +3.6073e-01  +3.6258e-01  1.84e-03  7.89e-05  1.06e-03  1.53e-05  4.07e-04  9.90e-01  
  7  +3.6011e-01  +3.6012e-01  1.85e-05  7.90e-07  1.06e-05  1.53e-07  4.09e-06  9.90e-01  
  8  +3.6010e-01  +3.6010e-01  1.85e-07  7.90e-09  1.06e-07  1.53e-09  4.09e-08  9.90e-01  
  9  +3.6010e-01  +3.6010e-01  1.85e-09  7.90e-11  1.06e-09  1.53e-11  4.09e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 347.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:07 PM: Optimal value: 3.601e-01
(CVXPY) Sep 20 07:38:07 PM: Compilation took 7.009e-03 seconds
(CVXPY) Sep 20 07:38:07 PM: Solver (including time spent in interface) took 9.985e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3601
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:07 PM: Your problem has 50 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:07 PM: Finished problem compilation (took 3.511e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 50
  constraints   = 75
  nnz(P)        = 0
  nnz(A)        = 335
  cones (total) = 1
    : Nonnegative = 1,  numel = 75

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8040e-01  +2.6826e+01  2.63e+01  8.41e-01  6.50e+00  1.00e+00  1.11e+00   ------   
  1  +5.1003e-01  +5.7481e+00  5.24e+00  3.49e-01  3.53e+00  3.88e-03  5.90e-01  6.20e-01  
  2  +4.0660e-01  +1.3614e+00  9.55e-01  8.71e-02  1.10e+00  1.78e-02  2.26e-01  8.69e-01  
  3  +3.3105e-01  +6.0347e-01  2.72e-01  1.85e-02  2.39e-01  6.42e-03  5.99e-02  8.36e-01  
  4  +2.9175e-01  +3.8590e-01  9.41e-02  5.21e-03  7.06e-02  2.14e-03  1.95e-02  7.50e-01  
  5  +2.6773e-01  +2.9120e-01  2.35e-02  1.15e-03  1.61e-02  3.33e-04  4.89e-03  8.43e-01  
  6  +2.6049e-01  +2.6105e-01  5.58e-04  2.73e-05  3.82e-04  5.06e-06  1.20e-04  9.87e-01  
  7  +2.6030e-01  +2.6032e-01  1.24e-05  6.18e-07  8.55e-06  6.01e-08  2.76e-06  9.77e-01  
  8  +2.6030e-01  +2.6030e-01  1.26e-07  6.33e-09  8.73e-08  6.17e-10  2.84e-08  9.90e-01  
  9  +2.6030e-01  +2.6030e-01  1.26e-09  6.33e-11  8.74e-10  6.17e-12  2.84e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 424.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:07 PM: Optimal value: 2.603e-01
(CVXPY) Sep 20 07:38:07 PM: Compilation took 3.511e-03 seconds
(CVXPY) Sep 20 07:38:07 PM: Solver (including time spent in interface) took 1.011e-03 seconds
Iteration: 2, Objective: 0.2603
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:07 PM: Your problem has 60 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:07 PM: Finished problem compilation (took 3.997e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 60
  constraints   = 85
  nnz(P)        = 0
  nnz(A)        = 389
  cones (total) = 1
    : Nonnegative = 1,  numel = 85

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6872e-01  +2.7336e+01  2.69e+01  8.52e-01  6.41e+00  1.00e+00  1.14e+00   ------   
  1  +4.4513e-01  +5.8804e+00  5.44e+00  3.60e-01  3.45e+00  3.94e-03  6.08e-01  6.12e-01  
  2  +2.9228e-01  +1.3501e+00  1.06e+00  7.35e-02  8.95e-01  2.08e-02  1.99e-01  9.00e-01  
  3  +2.3201e-01  +5.4540e-01  3.13e-01  1.96e-02  2.49e-01  8.20e-03  5.99e-02  7.45e-01  
  4  +1.9545e-01  +3.8803e-01  1.93e-01  1.00e-02  1.34e-01  5.24e-03  3.23e-02  5.30e-01  
  5  +1.6181e-01  +2.3646e-01  7.47e-02  3.50e-03  4.85e-02  1.95e-03  1.21e-02  6.69e-01  
  6  +1.4185e-01  +1.4534e-01  3.49e-03  1.65e-04  2.27e-03  4.58e-05  6.00e-04  9.61e-01  
  7  +1.4065e-01  +1.4076e-01  1.14e-04  5.54e-06  7.50e-05  8.02e-07  2.06e-05  9.66e-01  
  8  +1.4060e-01  +1.4060e-01  2.69e-06  1.35e-07  1.79e-06  2.04e-08  5.26e-07  9.77e-01  
  9  +1.4060e-01  +1.4060e-01  2.69e-08  1.35e-09  1.79e-08  2.04e-10  5.26e-09  9.90e-01  
 10  +1.4060e-01  +1.4060e-01  2.69e-10  1.36e-11  1.80e-10  2.04e-12  5.26e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 425.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:07 PM: Optimal value: 1.406e-01
(CVXPY) Sep 20 07:38:07 PM: Compilation took 3.997e-03 seconds
(CVXPY) Sep 20 07:38:07 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Iteration: 3, Objective: 0.1406
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:07 PM: Your problem has 70 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:07 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 70
  constraints   = 95
  nnz(P)        = 0
  nnz(A)        = 427
  cones (total) = 1
    : Nonnegative = 1,  numel = 95

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6596e-01  +2.7427e+01  2.70e+01  8.59e-01  6.21e+00  1.00e+00  1.14e+00   ------   
  1  +4.1896e-01  +6.0354e+00  5.62e+00  3.75e-01  3.35e+00  3.99e-03  6.19e-01  5.97e-01  
  2  +2.3631e-01  +1.6381e+00  1.40e+00  8.96e-02  1.02e+00  2.25e-02  2.36e-01  8.30e-01  
  3  +1.8599e-01  +5.5514e-01  3.69e-01  2.34e-02  2.78e-01  8.23e-03  7.13e-02  7.33e-01  
  4  +1.4292e-01  +2.6853e-01  1.26e-01  7.24e-03  8.88e-02  2.95e-03  2.39e-02  7.16e-01  
  5  +1.2749e-01  +2.1214e-01  8.46e-02  4.34e-03  5.59e-02  2.04e-03  1.45e-02  4.47e-01  
  6  +1.0392e-01  +1.1265e-01  8.73e-03  4.25e-04  5.56e-03  1.10e-04  1.49e-03  9.56e-01  
  7  +1.0087e-01  +1.0105e-01  1.86e-04  9.20e-06  1.19e-04  1.17e-06  3.28e-05  9.78e-01  
  8  +1.0080e-01  +1.0081e-01  5.86e-06  3.02e-07  3.84e-06  3.91e-08  1.11e-06  9.66e-01  
  9  +1.0080e-01  +1.0080e-01  5.86e-08  3.03e-09  3.84e-08  3.91e-10  1.12e-08  9.90e-01  
 10  +1.0080e-01  +1.0080e-01  5.86e-10  3.03e-11  3.84e-10  3.91e-12  1.12e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 467.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:07 PM: Optimal value: 1.008e-01
(CVXPY) Sep 20 07:38:07 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:38:07 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:07 PM: Your problem has 80 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:07 PM: Finished problem compilation (took 4.518e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 80
  constraints   = 105
  nnz(P)        = 0
  nnz(A)        = 461
  cones (total) = 1
    : Nonnegative = 1,  numel = 105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5952e-01  +2.7563e+01  2.71e+01  8.66e-01  6.03e+00  1.00e+00  1.15e+00   ------   
  1  +3.7162e-01  +6.2466e+00  5.87e+00  3.86e-01  3.26e+00  4.11e-03  6.28e-01  5.80e-01  
  2  +1.8679e-01  +1.8171e+00  1.63e+00  1.07e-01  1.14e+00  2.26e-02  2.68e-01  7.73e-01  
  3  +1.5554e-01  +6.0624e-01  4.51e-01  3.12e-02  3.47e-01  9.95e-03  9.26e-02  7.09e-01  
  4  +1.0747e-01  +2.2228e-01  1.15e-01  6.82e-03  7.74e-02  2.62e-03  2.43e-02  8.18e-01  
  5  +8.8936e-02  +1.2212e-01  3.32e-02  1.88e-03  2.17e-02  3.60e-04  6.95e-03  9.04e-01  
  6  +8.1104e-02  +8.2221e-02  1.12e-03  6.26e-05  7.22e-04  9.83e-06  2.40e-04  9.66e-01  
  7  +8.0852e-02  +8.1022e-02  1.70e-04  9.93e-06  1.12e-04  1.19e-06  4.19e-05  8.55e-01  
  8  +8.0801e-02  +8.0805e-02  3.41e-06  2.02e-07  2.25e-06  1.66e-08  9.01e-07  9.80e-01  
  9  +8.0800e-02  +8.0800e-02  3.40e-08  2.01e-09  2.25e-08  1.65e-10  9.02e-09  9.90e-01  
 10  +8.0800e-02  +8.0800e-02  3.40e-10  2.01e-11  2.25e-10  1.66e-12  9.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 586.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:07 PM: Optimal value: 8.080e-02
(CVXPY) Sep 20 07:38:07 PM: Compilation took 4.518e-03 seconds
(CVXPY) Sep 20 07:38:07 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Iteration: 5, Objective: 0.0808
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:07 PM: Your problem has 90 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:07 PM: Finished problem compilation (took 4.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 90
  constraints   = 115
  nnz(P)        = 0
  nnz(A)        = 483
  cones (total) = 1
    : Nonnegative = 1,  numel = 115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5846e-01  +2.7722e+01  2.73e+01  8.72e-01  5.82e+00  1.00e+00  1.15e+00   ------   
  1  +3.4628e-01  +6.2496e+00  5.90e+00  3.88e-01  3.08e+00  4.17e-03  6.22e-01  5.83e-01  
  2  +1.7933e-01  +1.8075e+00  1.63e+00  1.10e-01  1.13e+00  2.12e-02  2.77e-01  7.54e-01  
  3  +1.4914e-01  +5.1767e-01  3.69e-01  2.59e-02  2.81e-01  8.64e-03  7.96e-02  7.95e-01  
  4  +1.0586e-01  +2.1966e-01  1.14e-01  6.91e-03  7.69e-02  2.83e-03  2.41e-02  7.64e-01  
  5  +8.5438e-02  +1.0739e-01  2.19e-02  1.25e-03  1.42e-02  3.52e-04  4.55e-03  9.04e-01  
  6  +8.1108e-02  +8.2268e-02  1.16e-03  6.72e-05  7.55e-04  1.31e-05  2.52e-04  9.45e-01  
  7  +8.0870e-02  +8.1109e-02  2.39e-04  1.47e-05  1.59e-04  2.21e-06  6.27e-05  7.93e-01  
  8  +8.0806e-02  +8.0825e-02  1.90e-05  1.18e-06  1.27e-05  1.55e-07  5.40e-06  9.17e-01  
  9  +8.0800e-02  +8.0800e-02  2.00e-07  1.25e-08  1.34e-07  1.61e-09  5.73e-08  9.90e-01  
 10  +8.0800e-02  +8.0800e-02  2.00e-09  1.25e-10  1.34e-09  1.61e-11  5.74e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 539.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:07 PM: Optimal value: 8.080e-02
(CVXPY) Sep 20 07:38:07 PM: Compilation took 4.006e-03 seconds
(CVXPY) Sep 20 07:38:07 PM: Solver (including time spent in interface) took 9.930e-04 seconds
Iteration: 6, Objective: 0.0808
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:07 PM: Your problem has 91 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:07 PM: Finished problem compilation (took 3.010e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 91
  constraints   = 116
  nnz(P)        = 0
  nnz(A)        = 489
  cones (total) = 1
    : Nonnegative = 1,  numel = 116

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5758e-01  +2.7700e+01  2.72e+01  8.72e-01  5.82e+00  1.00e+00  1.15e+00   ------   
  1  +3.4249e-01  +6.2908e+00  5.95e+00  3.91e-01  3.10e+00  4.18e-03  6.25e-01  5.79e-01  
  2  +1.7510e-01  +1.9606e+00  1.79e+00  1.19e-01  1.22e+00  2.14e-02  2.95e-01  7.19e-01  
  3  +1.4964e-01  +5.2606e-01  3.76e-01  2.70e-02  2.92e-01  8.77e-03  8.22e-02  7.85e-01  
  4  +1.0774e-01  +2.3929e-01  1.32e-01  8.30e-03  9.20e-02  3.13e-03  2.84e-02  7.34e-01  
  5  +8.9437e-02  +1.3384e-01  4.44e-02  2.64e-03  2.99e-02  9.47e-04  9.37e-03  7.33e-01  
  6  +8.1156e-02  +8.2654e-02  1.50e-03  8.94e-05  1.00e-03  2.27e-05  3.28e-04  9.66e-01  
  7  +8.0844e-02  +8.1097e-02  2.52e-04  1.60e-05  1.73e-04  2.40e-06  6.75e-05  8.49e-01  
  8  +8.0809e-02  +8.0839e-02  3.05e-05  1.97e-06  2.11e-05  2.59e-07  8.44e-06  9.41e-01  
  9  +8.0800e-02  +8.0800e-02  3.21e-07  2.07e-08  2.22e-07  2.71e-09  8.93e-08  9.89e-01  
 10  +8.0800e-02  +8.0800e-02  3.21e-09  2.07e-10  2.22e-09  2.71e-11  8.93e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 537.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:07 PM: Optimal value: 8.080e-02
(CVXPY) Sep 20 07:38:07 PM: Compilation took 3.010e-03 seconds
(CVXPY) Sep 20 07:38:07 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Iteration: 7, Objective: 0.0808
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:07 PM: Your problem has 92 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:07 PM: Finished problem compilation (took 4.506e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 92
  constraints   = 117
  nnz(P)        = 0
  nnz(A)        = 492
  cones (total) = 1
    : Nonnegative = 1,  numel = 117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5722e-01  +2.7745e+01  2.73e+01  8.73e-01  5.80e+00  1.00e+00  1.16e+00   ------   
  1  +3.3488e-01  +6.2674e+00  5.93e+00  3.88e-01  3.07e+00  4.18e-03  6.24e-01  5.81e-01  
  2  +1.6301e-01  +2.0935e+00  1.93e+00  1.27e-01  1.28e+00  2.18e-02  3.11e-01  6.98e-01  
  3  +1.4951e-01  +5.3325e-01  3.84e-01  2.88e-02  3.08e-01  8.85e-03  8.59e-02  7.62e-01  
  4  +1.0853e-01  +2.4790e-01  1.39e-01  9.18e-03  1.01e-01  3.26e-03  3.07e-02  7.34e-01  
  5  +9.0550e-02  +1.4261e-01  5.21e-02  3.22e-03  3.62e-02  1.11e-03  1.11e-02  6.99e-01  
  6  +8.1170e-02  +8.2762e-02  1.59e-03  9.85e-05  1.10e-03  2.36e-05  3.53e-04  9.70e-01  
  7  +8.0835e-02  +8.1053e-02  2.18e-04  1.43e-05  1.53e-04  1.69e-06  5.93e-05  8.86e-01  
  8  +8.0809e-02  +8.0847e-02  3.79e-05  2.51e-06  2.68e-05  2.95e-07  1.06e-05  9.07e-01  
  9  +8.0800e-02  +8.0801e-02  4.32e-07  2.87e-08  3.05e-07  3.40e-09  1.21e-07  9.89e-01  
 10  +8.0800e-02  +8.0800e-02  4.32e-09  2.87e-10  3.06e-09  3.40e-11  1.21e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 600.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:07 PM: Optimal value: 8.080e-02
(CVXPY) Sep 20 07:38:07 PM: Compilation took 4.506e-03 seconds
(CVXPY) Sep 20 07:38:07 PM: Solver (including time spent in interface) took 1.007e-03 seconds
FULL MODEL:
  Accruacy: 0.92
  Our objective: 0.84

IF 
    (x0 = 0 AND x1 = 0 AND x4 = 1 AND x6 = 0)            <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x1 = 1 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.2)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.16)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0) <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x6 = 1)            <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x6 = 1)            <-- (term's our objective: 0.08)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.131688117980957
Best over terms:
  Our final objective: 0.19999999999999996
    Its accruacy: 0.6
    Its hamming distance: 5
  Shortest hamming distance: 5
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

