Command:
python test_script.py -s constant_subclass -d 3 -n 10000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1378
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 3.

Computed total variation: 0.1378
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:41 PM: Your problem has 5007 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:41 PM: Finished problem compilation (took 1.576e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5007
  constraints   = 10007
  nnz(P)        = 0
  nnz(A)        = 30007
  cones (total) = 1
    : Nonnegative = 1,  numel = 10007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +5.0009e+03  5.00e+03  9.84e-01  7.83e+01  1.00e+00  1.00e+00   ------   
  1  +6.2012e-01  +9.2711e+02  9.26e+02  3.06e-01  4.07e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5584e-01  +1.5890e+02  1.58e+02  1.36e-01  2.16e+01  6.67e-03  2.21e-01  6.63e-01  
  3  +5.0960e-01  +2.8138e+01  2.76e+01  1.04e-01  1.61e+01  1.17e-05  2.19e-01  5.20e-02  
  4  +5.0001e-01  +1.1010e+00  6.01e-01  4.01e-03  6.28e-01  3.18e-06  1.68e-01  7.20e-01  
  5  +4.9998e-01  +6.2254e-01  1.23e-01  8.18e-04  1.29e-01  9.59e-07  3.19e-02  8.30e-01  
  6  +4.9578e-01  +1.2208e+00  7.25e-01  7.85e-04  1.24e-01  6.32e-05  2.50e-03  9.75e-01  
  7  +4.7953e-01  +7.8805e-01  3.09e-01  8.30e-05  1.32e-02  1.89e-04  2.58e-04  8.97e-01  
  8  +4.6659e-01  +5.1024e-01  4.37e-02  1.11e-05  1.76e-03  1.85e-06  3.74e-05  9.07e-01  
  9  +4.5902e-01  +4.6447e-01  5.45e-03  1.30e-06  2.05e-04  2.18e-07  4.66e-06  8.87e-01  
 10  +4.5729e-01  +4.5755e-01  2.60e-04  5.36e-08  8.47e-06  1.17e-08  2.23e-07  9.89e-01  
 11  +4.5720e-01  +4.5720e-01  2.61e-06  5.36e-10  8.46e-08  1.18e-10  2.24e-09  9.90e-01  
 12  +4.5720e-01  +4.5720e-01  2.61e-08  5.36e-12  8.46e-10  1.18e-12  2.24e-11  9.90e-01  
 13  +4.5720e-01  +4.5720e-01  2.62e-10  5.36e-14  8.48e-12  1.28e-14  2.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 35.3614ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:41 PM: Optimal value: 4.572e-01
(CVXPY) Sep 20 07:27:41 PM: Compilation took 1.576e-02 seconds
(CVXPY) Sep 20 07:27:41 PM: Solver (including time spent in interface) took 4.069e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4572
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:41 PM: Your problem has 5010 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:42 PM: Finished problem compilation (took 1.462e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5010
  constraints   = 10010
  nnz(P)        = 0
  nnz(A)        = 33992
  cones (total) = 1
    : Nonnegative = 1,  numel = 10010

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +5.0013e+03  5.00e+03  9.84e-01  8.16e+01  1.00e+00  1.00e+00   ------   
  1  +6.1999e-01  +9.2763e+02  9.27e+02  3.07e-01  4.25e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5569e-01  +1.5859e+02  1.58e+02  1.36e-01  2.25e+01  6.70e-03  2.21e-01  6.64e-01  
  3  +5.0948e-01  +2.7880e+01  2.74e+01  1.03e-01  1.67e+01  1.17e-05  2.19e-01  5.36e-02  
  4  +5.0073e-01  +3.1816e+00  2.68e+00  1.78e-02  2.84e+00  4.06e-06  2.05e-01  1.94e-01  
  5  +5.0000e-01  +7.0911e-01  2.09e-01  1.40e-03  2.29e-01  1.04e-06  5.67e-02  9.17e-01  
  6  +4.9996e-01  +8.2958e-01  3.30e-01  2.17e-03  3.55e-01  2.15e-06  3.25e-02  7.15e-01  
  7  +4.9977e-01  +7.8126e-01  2.81e-01  1.45e-03  2.39e-01  4.41e-06  7.16e-03  9.90e-01  
  8  +4.9381e-01  +7.0910e-01  2.15e-01  9.74e-05  1.62e-02  7.65e-05  2.84e-04  9.60e-01  
  9  +4.9348e-01  +6.8756e-01  1.94e-01  8.14e-05  1.35e-02  5.28e-05  2.31e-04  4.15e-01  
 10  +4.9522e-01  +6.7760e-01  1.82e-01  6.73e-05  1.12e-02  2.50e-05  1.85e-04  6.88e-01  
 11  +4.9495e-01  +6.5395e-01  1.59e-01  5.14e-05  8.52e-03  6.51e-06  1.43e-04  9.90e-01  
 12  +4.9215e-01  +6.4282e-01  1.51e-01  3.82e-05  6.33e-03  7.61e-06  1.06e-04  2.90e-01  
 13  +4.8343e-01  +6.1383e-01  1.30e-01  2.55e-05  4.22e-03  7.97e-06  7.17e-05  8.20e-01  
 14  +4.7125e-01  +5.7111e-01  9.99e-02  1.80e-05  2.98e-03  5.96e-06  5.16e-05  4.47e-01  
 15  +4.4535e-01  +4.7763e-01  3.23e-02  5.29e-06  8.72e-04  1.50e-06  1.62e-05  8.81e-01  
 16  +4.3162e-01  +4.3244e-01  8.27e-04  1.29e-07  2.13e-05  1.52e-08  4.09e-07  9.81e-01  
 17  +4.3120e-01  +4.3121e-01  8.29e-06  1.29e-09  2.13e-07  1.52e-10  4.10e-09  9.90e-01  
 18  +4.3120e-01  +4.3120e-01  8.29e-08  1.29e-11  2.13e-09  1.53e-12  4.14e-11  9.90e-01  
 19  +4.3120e-01  +4.3120e-01  8.29e-10  1.29e-13  2.13e-11  1.55e-14  4.18e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 60.3027ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:42 PM: Optimal value: 4.312e-01
(CVXPY) Sep 20 07:27:42 PM: Compilation took 1.462e-02 seconds
(CVXPY) Sep 20 07:27:42 PM: Solver (including time spent in interface) took 6.538e-02 seconds
FULL MODEL:
  Accruacy: 0.5689
  Our objective: 0.1378

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.1378)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.3887255191802979
Best over terms:
  Our final objective: 0.1378
    Its accruacy: 0.5689
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1378
  Highest accruacy: 0.5689
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

