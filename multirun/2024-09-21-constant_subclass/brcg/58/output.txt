Command:
python test_script.py -s constant_subclass -d 2 -n 500 --seed 34 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.28
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 2.

Computed total variation: 0.27999999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:01 PM: Your problem has 255 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:01 PM: Finished problem compilation (took 5.016e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 255
  constraints   = 505
  nnz(P)        = 0
  nnz(A)        = 1255
  cones (total) = 1
    : Nonnegative = 1,  numel = 505

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9900e-01  +2.5076e+02  2.50e+02  9.27e-01  1.51e+01  1.00e+00  1.01e+00   ------   
  1  +6.3620e-01  +4.4147e+01  4.35e+01  2.53e-01  7.05e+00  4.49e-03  3.91e-01  7.25e-01  
  2  +5.5524e-01  +8.2147e+00  7.66e+00  1.07e-01  3.37e+00  5.50e-03  2.04e-01  6.26e-01  
  3  +4.9931e-01  +1.1368e+00  6.38e-01  1.90e-02  5.75e-01  3.37e-03  1.80e-01  4.70e-01  
  4  +4.9774e-01  +6.9824e-01  2.00e-01  5.63e-03  1.74e-01  2.21e-03  3.70e-02  8.18e-01  
  5  +4.5841e-01  +7.1221e-01  2.54e-01  1.12e-03  3.57e-02  2.34e-02  3.69e-03  9.32e-01  
  6  +4.4852e-01  +5.4311e-01  9.46e-02  4.83e-04  1.52e-02  2.01e-04  1.76e-03  7.02e-01  
  7  +4.2473e-01  +4.3700e-01  1.23e-02  5.13e-05  1.61e-03  1.64e-05  2.13e-04  8.88e-01  
  8  +4.2018e-01  +4.2039e-01  2.09e-04  8.41e-07  2.64e-05  2.30e-07  3.68e-06  9.84e-01  
  9  +4.2010e-01  +4.2010e-01  2.09e-06  8.41e-09  2.64e-07  2.30e-09  3.68e-08  9.90e-01  
 10  +4.2010e-01  +4.2010e-01  2.09e-08  8.41e-11  2.64e-09  2.31e-11  3.68e-10  9.90e-01  
 11  +4.2010e-01  +4.2010e-01  2.09e-10  8.41e-13  2.64e-11  2.31e-13  3.69e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0252ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:01 PM: Optimal value: 4.201e-01
(CVXPY) Sep 20 07:26:01 PM: Compilation took 5.016e-03 seconds
(CVXPY) Sep 20 07:26:01 PM: Solver (including time spent in interface) took 9.999e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:01 PM: Your problem has 256 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:01 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 256
  constraints   = 506
  nnz(P)        = 0
  nnz(A)        = 1351
  cones (total) = 1
    : Nonnegative = 1,  numel = 506

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9784e-01  +2.5230e+02  2.52e+02  9.27e-01  1.56e+01  1.00e+00  1.02e+00   ------   
  1  +6.3209e-01  +4.4488e+01  4.39e+01  2.55e-01  7.33e+00  4.47e-03  3.97e-01  7.24e-01  
  2  +5.5381e-01  +8.0881e+00  7.53e+00  1.03e-01  3.38e+00  5.71e-03  1.98e-01  6.50e-01  
  3  +4.9992e-01  +1.4828e+00  9.83e-01  2.87e-02  8.96e-01  4.78e-03  1.70e-01  4.77e-01  
  4  +4.9353e-01  +9.2685e-01  4.33e-01  9.37e-03  3.05e-01  5.77e-03  3.44e-02  8.36e-01  
  5  +4.5942e-01  +7.9521e-01  3.36e-01  2.01e-03  6.67e-02  2.05e-02  6.00e-03  8.32e-01  
  6  +4.4563e-01  +8.0577e-01  3.60e-01  1.25e-03  4.15e-02  3.15e-02  3.52e-03  4.60e-01  
  7  +4.4499e-01  +7.8513e-01  3.40e-01  1.22e-03  4.07e-02  2.63e-02  3.48e-03  8.26e-02  
  8  +4.3706e-01  +6.8550e-01  2.48e-01  1.08e-03  3.57e-02  4.74e-03  3.30e-03  4.52e-01  
  9  +3.9687e-01  +5.2167e-01  1.25e-01  4.06e-04  1.33e-02  2.67e-03  1.29e-03  6.59e-01  
 10  +3.6349e-01  +3.7177e-01  8.28e-03  2.86e-05  9.32e-04  2.20e-05  1.06e-04  9.82e-01  
 11  +3.6014e-01  +3.6022e-01  8.66e-05  3.00e-07  9.76e-06  2.21e-07  1.14e-06  9.89e-01  
 12  +3.6010e-01  +3.6010e-01  8.66e-07  3.00e-09  9.75e-08  2.21e-09  1.14e-08  9.90e-01  
 13  +3.6010e-01  +3.6010e-01  8.66e-09  3.00e-11  9.75e-10  2.21e-11  1.14e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1077ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:01 PM: Optimal value: 3.601e-01
(CVXPY) Sep 20 07:26:01 PM: Compilation took 3.000e-03 seconds
(CVXPY) Sep 20 07:26:01 PM: Solver (including time spent in interface) took 2.000e-03 seconds
FULL MODEL:
  Accruacy: 0.64
  Our objective: 0.28

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.28)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8101222515106201
Best over terms:
  Our final objective: 0.28
    Its accruacy: 0.64
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.28
  Highest accruacy: 0.64
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

