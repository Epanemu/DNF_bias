Command:
python test_script.py -s constant_subclass -d 9 -n 5000 --seed 34 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0016
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 9.

Computed total variation: 0.23520000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:28 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:28 PM: Finished problem compilation (took 1.903e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 30019
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5008e+03  2.50e+03  9.80e-01  8.18e+01  1.00e+00  1.00e+00   ------   
  1  +5.8090e-01  +5.4280e+02  5.42e+02  4.28e-01  5.31e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3181e-01  +6.1669e+01  6.11e+01  1.65e-01  2.63e+01  1.63e-02  2.77e-01  9.31e-01  
  3  +5.0855e-01  +1.6001e+01  1.55e+01  1.06e-01  1.66e+01  4.45e-05  2.57e-01  2.88e-01  
  4  +5.0076e-01  +1.4656e+00  9.65e-01  9.40e-03  1.53e+00  6.40e-06  1.33e-01  7.88e-01  
  5  +5.0008e-01  +6.2699e-01  1.27e-01  1.20e-03  1.97e-01  1.07e-05  3.96e-02  9.90e-01  
  6  +5.0004e-01  +5.6930e-01  6.93e-02  6.54e-04  1.08e-01  7.92e-06  1.65e-02  6.32e-01  
  7  +5.0000e-01  +5.5008e-01  5.01e-02  4.20e-04  6.91e-02  2.15e-05  2.94e-03  8.67e-01  
  8  +4.9911e-01  +5.5145e-01  5.23e-02  3.92e-05  6.49e-03  4.87e-04  1.26e-04  9.60e-01  
  9  +4.9781e-01  +5.4366e-01  4.58e-02  2.76e-05  4.58e-03  4.45e-04  8.99e-05  4.04e-01  
 10  +4.9582e-01  +5.3278e-01  3.70e-02  2.21e-05  3.66e-03  2.60e-04  7.46e-05  3.03e-01  
 11  +4.9249e-01  +5.1708e-01  2.46e-02  1.29e-05  2.14e-03  1.09e-04  4.64e-05  5.42e-01  
 12  +4.9125e-01  +5.1110e-01  1.98e-02  9.66e-06  1.60e-03  1.15e-06  3.57e-05  8.87e-01  
 13  +4.8736e-01  +4.9526e-01  7.89e-03  3.37e-06  5.58e-04  4.85e-07  1.33e-05  7.40e-01  
 14  +4.8658e-01  +4.9189e-01  5.32e-03  2.20e-06  3.64e-04  4.99e-07  8.71e-06  9.90e-01  
 15  +4.8493e-01  +4.8559e-01  6.57e-04  2.64e-07  4.37e-05  5.93e-08  1.09e-06  8.87e-01  
 16  +4.8471e-01  +4.8475e-01  3.54e-05  1.42e-08  2.35e-06  3.39e-09  5.86e-08  9.90e-01  
 17  +4.8470e-01  +4.8470e-01  3.54e-07  1.42e-10  2.35e-08  3.39e-11  5.86e-10  9.90e-01  
 18  +4.8470e-01  +4.8470e-01  3.54e-09  1.42e-12  2.35e-10  3.41e-13  5.89e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 65.482ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:28 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:28 PM: Optimal value: 4.847e-01
(CVXPY) Sep 20 07:59:28 PM: Compilation took 1.903e-02 seconds
(CVXPY) Sep 20 07:59:28 PM: Solver (including time spent in interface) took 7.091e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4847
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:29 PM: Your problem has 2529 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:29 PM: Finished problem compilation (took 1.509e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2529
  constraints   = 5029
  nnz(P)        = 0
  nnz(A)        = 34135
  cones (total) = 1
    : Nonnegative = 1,  numel = 5029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5008e+03  2.50e+03  9.80e-01  8.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.8077e-01  +5.4297e+02  5.42e+02  4.29e-01  5.45e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3163e-01  +6.1497e+01  6.10e+01  1.65e-01  2.69e+01  1.63e-02  2.77e-01  9.33e-01  
  3  +5.0850e-01  +1.5945e+01  1.54e+01  1.06e-01  1.70e+01  4.46e-05  2.56e-01  2.93e-01  
  4  +5.0076e-01  +1.4589e+00  9.58e-01  9.35e-03  1.56e+00  6.43e-06  1.31e-01  7.95e-01  
  5  +5.0008e-01  +6.2874e-01  1.29e-01  1.22e-03  2.06e-01  1.07e-05  3.66e-02  9.90e-01  
  6  +5.0009e-01  +6.4173e-01  1.42e-01  1.34e-03  2.25e-01  1.32e-05  2.33e-02  5.86e-01  
  7  +5.0000e-01  +5.8723e-01  8.72e-02  6.26e-04  1.06e-01  3.86e-05  3.20e-03  8.99e-01  
  8  +4.9911e-01  +5.8503e-01  8.59e-02  7.41e-05  1.26e-02  4.81e-04  2.39e-04  9.26e-01  
  9  +4.9788e-01  +5.7500e-01  7.71e-02  5.93e-05  1.01e-02  4.05e-04  1.93e-04  3.12e-01  
 10  +4.9661e-01  +5.6372e-01  6.71e-02  5.38e-05  9.17e-03  1.75e-04  1.78e-04  4.07e-01  
 11  +4.9506e-01  +5.5398e-01  5.89e-02  4.21e-05  7.17e-03  1.31e-04  1.40e-04  3.54e-01  
 12  +4.9492e-01  +5.5307e-01  5.81e-02  4.12e-05  7.01e-03  1.21e-04  1.36e-04  8.54e-02  
 13  +4.9454e-01  +5.5002e-01  5.55e-02  3.74e-05  6.36e-03  1.23e-05  1.21e-04  7.98e-01  
 14  +4.9242e-01  +5.3863e-01  4.62e-02  2.68e-05  4.56e-03  9.32e-06  8.65e-05  4.33e-01  
 15  +4.8979e-01  +5.2562e-01  3.58e-02  1.71e-05  2.92e-03  6.62e-06  5.46e-05  5.50e-01  
 16  +4.8916e-01  +5.2340e-01  3.42e-02  1.48e-05  2.52e-03  6.53e-06  4.71e-05  1.91e-01  
 17  +4.8656e-01  +5.1424e-01  2.77e-02  1.30e-05  2.20e-03  3.10e-06  4.60e-05  3.34e-01  
 18  +4.8342e-01  +4.9969e-01  1.63e-02  6.73e-06  1.14e-03  2.10e-06  2.27e-05  5.59e-01  
 19  +4.8334e-01  +4.9960e-01  1.63e-02  6.65e-06  1.13e-03  2.07e-06  2.23e-05  1.14e-01  
 20  +4.7916e-01  +4.8591e-01  6.75e-03  2.27e-06  3.86e-04  9.57e-07  7.54e-06  8.13e-01  
 21  +4.7673e-01  +4.7706e-01  3.21e-04  1.06e-07  1.81e-05  3.99e-08  3.60e-07  9.74e-01  
 22  +4.7660e-01  +4.7660e-01  3.24e-06  1.07e-09  1.83e-07  4.02e-10  3.64e-09  9.90e-01  
 23  +4.7660e-01  +4.7660e-01  3.24e-08  1.07e-11  1.83e-09  4.02e-12  3.64e-11  9.90e-01  
 24  +4.7660e-01  +4.7660e-01  3.24e-10  1.07e-13  1.83e-11  4.06e-14  3.67e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 82.3143ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:29 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:29 PM: Optimal value: 4.766e-01
(CVXPY) Sep 20 07:59:29 PM: Compilation took 1.509e-02 seconds
(CVXPY) Sep 20 07:59:29 PM: Solver (including time spent in interface) took 8.687e-02 seconds
Iteration: 2, Objective: 0.4766
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:29 PM: Your problem has 2539 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:29 PM: Finished problem compilation (took 1.761e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2539
  constraints   = 5039
  nnz(P)        = 0
  nnz(A)        = 36683
  cones (total) = 1
    : Nonnegative = 1,  numel = 5039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5010e+03  2.50e+03  9.80e-01  8.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.8065e-01  +5.4309e+02  5.43e+02  4.29e-01  5.51e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3150e-01  +6.1372e+01  6.08e+01  1.65e-01  2.71e+01  1.64e-02  2.76e-01  9.34e-01  
  3  +5.0846e-01  +1.5902e+01  1.54e+01  1.06e-01  1.71e+01  4.47e-05  2.56e-01  2.97e-01  
  4  +5.0075e-01  +1.4518e+00  9.51e-01  9.29e-03  1.57e+00  6.45e-06  1.29e-01  8.01e-01  
  5  +5.0017e-01  +7.3942e-01  2.39e-01  2.28e-03  3.88e-01  1.02e-05  5.51e-02  7.68e-01  
  6  +5.0009e-01  +6.3387e-01  1.34e-01  1.26e-03  2.15e-01  9.84e-06  1.86e-02  7.66e-01  
  7  +4.9996e-01  +6.1172e-01  1.12e-01  4.78e-04  8.22e-02  6.72e-05  1.72e-03  9.32e-01  
  8  +4.9921e-01  +6.0880e-01  1.10e-01  8.89e-05  1.53e-02  4.01e-04  2.73e-04  8.44e-01  
  9  +4.9709e-01  +5.9195e-01  9.49e-02  5.87e-05  1.01e-02  3.49e-04  1.81e-04  5.32e-01  
 10  +4.9389e-01  +5.7177e-01  7.79e-02  4.71e-05  8.11e-03  2.09e-04  1.46e-04  3.47e-01  
 11  +4.9243e-01  +5.6478e-01  7.24e-02  4.00e-05  6.89e-03  1.75e-04  1.25e-04  2.56e-01  
 12  +4.9153e-01  +5.6009e-01  6.86e-02  3.94e-05  6.78e-03  1.32e-04  1.23e-04  1.39e-01  
 13  +4.8839e-01  +5.4541e-01  5.70e-02  2.90e-05  4.99e-03  1.08e-04  9.15e-05  3.06e-01  
 14  +4.8828e-01  +5.4491e-01  5.66e-02  2.88e-05  4.97e-03  1.02e-04  9.10e-05  3.79e-02  
 15  +4.8786e-01  +5.4260e-01  5.47e-02  2.79e-05  4.80e-03  6.15e-05  8.79e-05  3.43e-01  
 16  +4.8106e-01  +5.1317e-01  3.21e-02  1.36e-05  2.35e-03  3.54e-05  4.39e-05  5.42e-01  
 17  +4.7547e-01  +4.9066e-01  1.52e-02  5.70e-06  9.81e-04  1.21e-05  1.88e-05  7.09e-01  
 18  +4.7170e-01  +4.7681e-01  5.11e-03  1.77e-06  3.05e-04  5.72e-07  6.00e-06  9.90e-01  
 19  +4.6974e-01  +4.7009e-01  3.45e-04  1.16e-07  2.00e-05  3.87e-08  4.02e-07  9.41e-01  
 20  +4.6960e-01  +4.6960e-01  3.51e-06  1.19e-09  2.04e-07  3.94e-10  4.09e-09  9.90e-01  
 21  +4.6960e-01  +4.6960e-01  3.51e-08  1.19e-11  2.04e-09  3.94e-12  4.09e-11  9.90e-01  
 22  +4.6960e-01  +4.6960e-01  3.51e-10  1.19e-13  2.04e-11  3.97e-14  4.13e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 81.5695ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:29 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:29 PM: Optimal value: 4.696e-01
(CVXPY) Sep 20 07:59:29 PM: Compilation took 1.761e-02 seconds
(CVXPY) Sep 20 07:59:29 PM: Solver (including time spent in interface) took 8.690e-02 seconds
Iteration: 3, Objective: 0.4696
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:29 PM: Your problem has 2549 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:29 PM: Finished problem compilation (took 1.672e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2549
  constraints   = 5049
  nnz(P)        = 0
  nnz(A)        = 38354
  cones (total) = 1
    : Nonnegative = 1,  numel = 5049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5011e+03  2.50e+03  9.80e-01  8.53e+01  1.00e+00  1.00e+00   ------   
  1  +5.8047e-01  +5.4327e+02  5.43e+02  4.30e-01  5.53e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3133e-01  +6.1215e+01  6.07e+01  1.65e-01  2.71e+01  1.64e-02  2.76e-01  9.36e-01  
  3  +5.0843e-01  +1.5859e+01  1.54e+01  1.06e-01  1.71e+01  4.49e-05  2.55e-01  3.01e-01  
  4  +5.0075e-01  +1.4483e+00  9.48e-01  9.27e-03  1.57e+00  6.48e-06  1.28e-01  8.05e-01  
  5  +5.0021e-01  +7.8582e-01  2.86e-01  2.73e-03  4.66e-01  1.03e-05  5.81e-02  7.12e-01  
  6  +5.0012e-01  +6.7733e-01  1.77e-01  1.66e-03  2.84e-01  1.23e-05  1.93e-02  7.52e-01  
  7  +4.9993e-01  +6.5803e-01  1.58e-01  4.81e-04  8.31e-02  1.04e-04  1.60e-03  9.33e-01  
  8  +4.9915e-01  +6.5216e-01  1.53e-01  1.29e-04  2.23e-02  3.88e-04  3.96e-04  7.69e-01  
  9  +4.9677e-01  +6.2632e-01  1.30e-01  9.08e-05  1.57e-02  2.97e-04  2.79e-04  4.86e-01  
 10  +4.9419e-01  +6.0885e-01  1.15e-01  6.96e-05  1.20e-02  2.46e-04  2.15e-04  3.46e-01  
 11  +4.9209e-01  +5.9551e-01  1.03e-01  5.98e-05  1.03e-02  1.23e-04  1.86e-04  4.67e-01  
 12  +4.9101e-01  +5.8882e-01  9.78e-02  5.84e-05  1.01e-02  9.12e-05  1.83e-04  1.61e-01  
 13  +4.8151e-01  +5.4154e-01  6.00e-02  2.80e-05  4.84e-03  4.98e-05  9.02e-05  6.13e-01  
 14  +4.7953e-01  +5.3162e-01  5.21e-02  2.34e-05  4.04e-03  1.75e-05  7.59e-05  6.53e-01  
 15  +4.7310e-01  +5.0315e-01  3.01e-02  1.25e-05  2.15e-03  3.43e-06  4.15e-05  9.00e-01  
 16  +4.6622e-01  +4.7455e-01  8.34e-03  3.23e-06  5.57e-04  9.01e-07  1.11e-05  9.90e-01  
 17  +4.6358e-01  +4.6448e-01  8.97e-04  3.39e-07  5.84e-05  9.72e-08  1.21e-06  9.52e-01  
 18  +4.6321e-01  +4.6322e-01  1.58e-05  5.86e-09  1.01e-06  1.70e-09  2.16e-08  9.90e-01  
 19  +4.6320e-01  +4.6320e-01  1.60e-07  5.92e-11  1.02e-08  1.71e-11  2.18e-10  9.90e-01  
 20  +4.6320e-01  +4.6320e-01  1.60e-09  5.92e-13  1.02e-10  1.81e-13  2.30e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 78.7829ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:29 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:29 PM: Optimal value: 4.632e-01
(CVXPY) Sep 20 07:59:29 PM: Compilation took 1.672e-02 seconds
(CVXPY) Sep 20 07:59:29 PM: Solver (including time spent in interface) took 8.350e-02 seconds
Iteration: 4, Objective: 0.4632
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:29 PM: Your problem has 2559 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:29 PM: Finished problem compilation (took 1.927e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2559
  constraints   = 5059
  nnz(P)        = 0
  nnz(A)        = 39995
  cones (total) = 1
    : Nonnegative = 1,  numel = 5059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5010e+03  2.50e+03  9.80e-01  8.56e+01  1.00e+00  1.00e+00   ------   
  1  +5.8033e-01  +5.4330e+02  5.43e+02  4.30e-01  5.54e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3119e-01  +6.1074e+01  6.05e+01  1.65e-01  2.70e+01  1.64e-02  2.76e-01  9.38e-01  
  3  +5.0838e-01  +1.5808e+01  1.53e+01  1.05e-01  1.71e+01  4.50e-05  2.54e-01  3.06e-01  
  4  +5.0074e-01  +1.4334e+00  9.33e-01  9.14e-03  1.55e+00  6.53e-06  1.25e-01  8.16e-01  
  5  +5.0026e-01  +8.5112e-01  3.51e-01  3.37e-03  5.76e-01  1.03e-05  6.01e-02  6.49e-01  
  6  +5.0013e-01  +7.0597e-01  2.06e-01  1.84e-03  3.16e-01  1.74e-05  1.36e-02  8.49e-01  
  7  +4.9974e-01  +7.1123e-01  2.11e-01  3.11e-04  5.41e-02  2.23e-04  9.56e-04  9.35e-01  
  8  +4.9893e-01  +6.9450e-01  1.96e-01  1.83e-04  3.18e-02  2.80e-04  5.54e-04  5.70e-01  
  9  +4.9602e-01  +6.6447e-01  1.68e-01  1.15e-04  2.00e-02  2.88e-04  3.49e-04  4.77e-01  
 10  +4.9405e-01  +6.4844e-01  1.54e-01  1.04e-04  1.81e-02  1.99e-04  3.18e-04  2.68e-01  
 11  +4.9120e-01  +6.2880e-01  1.38e-01  8.70e-05  1.51e-02  1.43e-04  2.68e-04  3.09e-01  
 12  +4.8889e-01  +6.1461e-01  1.26e-01  7.52e-05  1.30e-02  1.02e-04  2.34e-04  3.08e-01  
 13  +4.8393e-01  +5.8486e-01  1.01e-01  5.87e-05  1.02e-02  3.40e-05  1.87e-04  5.70e-01  
 14  +4.7587e-01  +5.4445e-01  6.86e-02  3.43e-05  5.93e-03  2.07e-05  1.12e-04  4.92e-01  
 15  +4.6923e-01  +5.1300e-01  4.38e-02  1.95e-05  3.37e-03  6.33e-06  6.51e-05  8.01e-01  
 16  +4.5975e-01  +4.7215e-01  1.24e-02  4.85e-06  8.39e-04  1.34e-06  1.70e-05  9.60e-01  
 17  +4.5597e-01  +4.5880e-01  2.82e-03  1.03e-06  1.79e-04  3.05e-07  3.78e-06  8.55e-01  
 18  +4.5518e-01  +4.5585e-01  6.73e-04  2.45e-07  4.24e-05  8.00e-08  9.04e-07  9.90e-01  
 19  +4.5490e-01  +4.5491e-01  7.55e-06  2.74e-09  4.74e-07  8.89e-10  1.02e-08  9.89e-01  
 20  +4.5490e-01  +4.5490e-01  7.55e-08  2.74e-11  4.74e-09  8.89e-12  1.02e-10  9.90e-01  
 21  +4.5490e-01  +4.5490e-01  7.55e-10  2.74e-13  4.74e-11  8.98e-14  1.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 80.9866ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:29 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:29 PM: Optimal value: 4.549e-01
(CVXPY) Sep 20 07:59:29 PM: Compilation took 1.927e-02 seconds
(CVXPY) Sep 20 07:59:29 PM: Solver (including time spent in interface) took 8.558e-02 seconds
Iteration: 5, Objective: 0.4549
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:30 PM: Your problem has 2569 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:30 PM: Finished problem compilation (took 1.744e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2569
  constraints   = 5069
  nnz(P)        = 0
  nnz(A)        = 41202
  cones (total) = 1
    : Nonnegative = 1,  numel = 5069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5010e+03  2.50e+03  9.80e-01  8.57e+01  1.00e+00  1.00e+00   ------   
  1  +5.8024e-01  +5.4333e+02  5.43e+02  4.31e-01  5.54e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3110e-01  +6.0983e+01  6.05e+01  1.65e-01  2.70e+01  1.64e-02  2.75e-01  9.39e-01  
  3  +5.0836e-01  +1.5778e+01  1.53e+01  1.05e-01  1.71e+01  4.51e-05  2.54e-01  3.09e-01  
  4  +5.0073e-01  +1.4279e+00  9.27e-01  9.09e-03  1.54e+00  6.56e-06  1.23e-01  8.21e-01  
  5  +5.0033e-01  +9.3754e-01  4.37e-01  4.22e-03  7.21e-01  9.97e-06  6.79e-02  5.51e-01  
  6  +5.0021e-01  +7.9500e-01  2.95e-01  2.69e-03  4.62e-01  1.53e-05  2.10e-02  8.12e-01  
  7  +4.9991e-01  +7.9135e-01  2.91e-01  4.78e-04  8.32e-02  1.66e-04  1.49e-03  9.65e-01  
  8  +4.9935e-01  +7.5165e-01  2.52e-01  2.98e-04  5.19e-02  1.65e-04  9.18e-04  5.67e-01  
  9  +4.9784e-01  +7.2833e-01  2.30e-01  1.88e-04  3.28e-02  2.08e-04  5.73e-04  4.32e-01  
 10  +4.9537e-01  +6.9594e-01  2.01e-01  1.50e-04  2.62e-02  1.60e-04  4.57e-04  3.32e-01  
 11  +4.9345e-01  +6.7925e-01  1.86e-01  1.24e-04  2.16e-02  1.38e-04  3.77e-04  2.95e-01  
 12  +4.9293e-01  +6.7426e-01  1.81e-01  1.23e-04  2.14e-02  1.24e-04  3.75e-04  5.83e-02  
 13  +4.8905e-01  +6.4856e-01  1.60e-01  9.59e-05  1.67e-02  1.05e-04  2.96e-04  2.86e-01  
 14  +4.8242e-01  +6.0502e-01  1.23e-01  6.82e-05  1.18e-02  4.44e-05  2.16e-04  5.45e-01  
 15  +4.7532e-01  +5.6542e-01  9.01e-02  4.62e-05  8.02e-03  2.28e-05  1.51e-04  4.99e-01  
 16  +4.6786e-01  +5.2723e-01  5.94e-02  2.76e-05  4.78e-03  9.33e-06  9.33e-05  6.81e-01  
 17  +4.5837e-01  +4.8437e-01  2.60e-02  1.09e-05  1.89e-03  3.46e-06  3.87e-05  7.13e-01  
 18  +4.5284e-01  +4.6102e-01  8.19e-03  3.24e-06  5.62e-04  8.86e-07  1.20e-05  9.59e-01  
 19  +4.5059e-01  +4.5236e-01  1.76e-03  6.75e-07  1.17e-04  1.99e-07  2.56e-06  9.89e-01  
 20  +4.4992e-01  +4.4998e-01  5.45e-05  2.06e-08  3.58e-06  6.03e-09  7.94e-08  9.72e-01  
 21  +4.4990e-01  +4.4990e-01  5.45e-07  2.06e-10  3.58e-08  6.04e-11  7.94e-10  9.90e-01  
 22  +4.4990e-01  +4.4990e-01  5.45e-09  2.06e-12  3.58e-10  6.04e-13  7.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 86.5162ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:30 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:30 PM: Optimal value: 4.499e-01
(CVXPY) Sep 20 07:59:30 PM: Compilation took 1.744e-02 seconds
(CVXPY) Sep 20 07:59:30 PM: Solver (including time spent in interface) took 9.193e-02 seconds
Iteration: 6, Objective: 0.4499
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:30 PM: Your problem has 2579 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:30 PM: Finished problem compilation (took 1.880e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2579
  constraints   = 5079
  nnz(P)        = 0
  nnz(A)        = 42730
  cones (total) = 1
    : Nonnegative = 1,  numel = 5079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5010e+03  2.50e+03  9.80e-01  8.59e+01  1.00e+00  1.00e+00   ------   
  1  +5.8016e-01  +5.4332e+02  5.43e+02  4.31e-01  5.55e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3103e-01  +6.0909e+01  6.04e+01  1.65e-01  2.70e+01  1.65e-02  2.75e-01  9.40e-01  
  3  +5.0834e-01  +1.5754e+01  1.52e+01  1.05e-01  1.71e+01  4.52e-05  2.53e-01  3.11e-01  
  4  +5.0073e-01  +1.4237e+00  9.23e-01  9.06e-03  1.54e+00  6.57e-06  1.22e-01  8.25e-01  
  5  +5.0028e-01  +8.7245e-01  3.72e-01  3.58e-03  6.15e-01  1.06e-05  5.67e-02  6.51e-01  
  6  +5.0020e-01  +8.1151e-01  3.11e-01  2.59e-03  4.46e-01  2.40e-05  1.42e-02  8.52e-01  
  7  +4.9985e-01  +8.0176e-01  3.02e-01  4.73e-04  8.28e-02  1.94e-04  1.45e-03  9.11e-01  
  8  +4.9912e-01  +7.5452e-01  2.55e-01  2.86e-04  5.01e-02  1.82e-04  8.70e-04  6.13e-01  
  9  +4.9682e-01  +7.2172e-01  2.25e-01  1.74e-04  3.05e-02  2.14e-04  5.26e-04  4.72e-01  
 10  +4.9516e-01  +6.9783e-01  2.03e-01  1.52e-04  2.65e-02  1.28e-04  4.57e-04  4.06e-01  
 11  +4.9474e-01  +6.9315e-01  1.98e-01  1.50e-04  2.61e-02  1.13e-04  4.51e-04  8.72e-02  
 12  +4.9115e-01  +6.6793e-01  1.77e-01  1.13e-04  1.98e-02  1.01e-04  3.45e-04  3.22e-01  
 13  +4.8740e-01  +6.4360e-01  1.56e-01  9.24e-05  1.61e-02  7.38e-05  2.85e-04  3.27e-01  
 14  +4.7830e-01  +5.8487e-01  1.07e-01  6.02e-05  1.05e-02  7.40e-07  1.94e-04  8.78e-01  
 15  +4.6396e-01  +5.1481e-01  5.08e-02  2.37e-05  4.12e-03  1.83e-06  8.03e-05  7.36e-01  
 16  +4.5573e-01  +4.7774e-01  2.20e-02  9.52e-06  1.65e-03  1.17e-06  3.35e-05  7.03e-01  
 17  +4.5186e-01  +4.6053e-01  8.67e-03  3.59e-06  6.23e-04  9.04e-07  1.30e-05  9.90e-01  
 18  +4.4968e-01  +4.5195e-01  2.27e-03  9.24e-07  1.60e-04  2.36e-07  3.45e-06  7.86e-01  
 19  +4.4912e-01  +4.4976e-01  6.37e-04  2.59e-07  4.50e-05  6.61e-08  9.75e-07  7.41e-01  
 20  +4.4891e-01  +4.4892e-01  1.77e-05  7.17e-09  1.25e-06  1.83e-09  2.72e-08  9.90e-01  
 21  +4.4890e-01  +4.4890e-01  1.78e-07  7.21e-11  1.25e-08  1.84e-11  2.73e-10  9.90e-01  
 22  +4.4890e-01  +4.4890e-01  1.80e-09  7.28e-13  1.27e-10  1.87e-13  2.77e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 88.0809ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:30 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:30 PM: Optimal value: 4.489e-01
(CVXPY) Sep 20 07:59:30 PM: Compilation took 1.880e-02 seconds
(CVXPY) Sep 20 07:59:30 PM: Solver (including time spent in interface) took 9.339e-02 seconds
Iteration: 7, Objective: 0.4489
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:30 PM: Your problem has 2589 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:30 PM: Finished problem compilation (took 2.147e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2589
  constraints   = 5089
  nnz(P)        = 0
  nnz(A)        = 43551
  cones (total) = 1
    : Nonnegative = 1,  numel = 5089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5010e+03  2.50e+03  9.80e-01  8.59e+01  1.00e+00  1.00e+00   ------   
  1  +5.7996e-01  +5.4350e+02  5.43e+02  4.31e-01  5.55e+01  3.78e-03  5.75e-01  5.85e-01  
  2  +5.3087e-01  +6.0756e+01  6.02e+01  1.64e-01  2.69e+01  1.65e-02  2.75e-01  9.42e-01  
  3  +5.0831e-01  +1.5719e+01  1.52e+01  1.05e-01  1.70e+01  4.54e-05  2.52e-01  3.15e-01  
  4  +5.0073e-01  +1.4245e+00  9.24e-01  9.08e-03  1.55e+00  6.60e-06  1.21e-01  8.27e-01  
  5  +5.0030e-01  +9.0080e-01  4.00e-01  3.87e-03  6.63e-01  1.06e-05  5.70e-02  6.32e-01  
  6  +5.0022e-01  +8.3455e-01  3.34e-01  2.64e-03  4.57e-01  2.66e-05  1.29e-02  8.75e-01  
  7  +4.9988e-01  +8.2861e-01  3.29e-01  5.23e-04  9.15e-02  1.89e-04  1.57e-03  8.82e-01  
  8  +4.9906e-01  +7.6666e-01  2.68e-01  2.82e-04  4.93e-02  1.80e-04  8.37e-04  7.07e-01  
  9  +4.9600e-01  +7.2694e-01  2.31e-01  1.49e-04  2.60e-02  2.28e-04  4.40e-04  5.89e-01  
 10  +4.9410e-01  +7.1031e-01  2.16e-01  1.37e-04  2.40e-02  1.70e-04  4.10e-04  2.35e-01  
 11  +4.8617e-01  +6.5160e-01  1.65e-01  1.00e-04  1.75e-02  6.17e-05  3.09e-04  5.66e-01  
 12  +4.7890e-01  +6.1153e-01  1.33e-01  7.58e-05  1.32e-02  3.00e-05  2.44e-04  4.84e-01  
 13  +4.6500e-01  +5.4047e-01  7.55e-02  3.71e-05  6.45e-03  1.44e-05  1.27e-04  5.51e-01  
 14  +4.5840e-01  +5.1028e-01  5.19e-02  2.40e-05  4.16e-03  8.88e-06  8.50e-05  4.31e-01  
 15  +4.5359e-01  +4.8763e-01  3.40e-02  1.46e-05  2.54e-03  3.32e-06  5.34e-05  9.90e-01  
 16  +4.4652e-01  +4.5787e-01  1.13e-02  4.69e-06  8.13e-04  1.10e-06  1.80e-05  7.16e-01  
 17  +4.4382e-01  +4.4688e-01  3.06e-03  1.21e-06  2.10e-04  3.21e-07  4.75e-06  8.50e-01  
 18  +4.4281e-01  +4.4310e-01  2.89e-04  1.14e-07  1.97e-05  2.84e-08  4.51e-07  9.88e-01  
 19  +4.4270e-01  +4.4270e-01  3.01e-06  1.18e-09  2.05e-07  2.93e-10  4.69e-09  9.90e-01  
 20  +4.4270e-01  +4.4270e-01  3.01e-08  1.18e-11  2.05e-09  2.93e-12  4.69e-11  9.90e-01  
 21  +4.4270e-01  +4.4270e-01  3.01e-10  1.18e-13  2.05e-11  3.01e-14  4.81e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 89.9897ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:30 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:30 PM: Optimal value: 4.427e-01
(CVXPY) Sep 20 07:59:30 PM: Compilation took 2.147e-02 seconds
(CVXPY) Sep 20 07:59:30 PM: Solver (including time spent in interface) took 9.596e-02 seconds
Iteration: 8, Objective: 0.4427
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:30 PM: Your problem has 2599 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:30 PM: Finished problem compilation (took 2.106e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2599
  constraints   = 5099
  nnz(P)        = 0
  nnz(A)        = 44230
  cones (total) = 1
    : Nonnegative = 1,  numel = 5099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5010e+03  2.50e+03  9.80e-01  8.59e+01  1.00e+00  1.00e+00   ------   
  1  +5.7985e-01  +5.4349e+02  5.43e+02  4.32e-01  5.54e+01  3.78e-03  5.75e-01  5.85e-01  
  2  +5.3078e-01  +6.0670e+01  6.01e+01  1.64e-01  2.68e+01  1.65e-02  2.74e-01  9.43e-01  
  3  +5.0829e-01  +1.5694e+01  1.52e+01  1.05e-01  1.70e+01  4.54e-05  2.52e-01  3.17e-01  
  4  +5.0072e-01  +1.4201e+00  9.19e-01  9.05e-03  1.54e+00  6.62e-06  1.19e-01  8.30e-01  
  5  +5.0033e-01  +9.3581e-01  4.35e-01  4.21e-03  7.22e-01  1.05e-05  5.86e-02  6.01e-01  
  6  +5.0021e-01  +8.2874e-01  3.29e-01  2.35e-03  4.07e-01  3.11e-05  1.00e-02  9.29e-01  
  7  +4.9987e-01  +8.2676e-01  3.27e-01  5.21e-04  9.13e-02  1.83e-04  1.55e-03  8.46e-01  
  8  +4.9894e-01  +7.6837e-01  2.69e-01  2.72e-04  4.76e-02  1.80e-04  7.98e-04  7.47e-01  
  9  +4.9676e-01  +7.4314e-01  2.46e-01  1.79e-04  3.13e-02  2.02e-04  5.24e-04  4.53e-01  
 10  +4.9479e-01  +7.2146e-01  2.27e-01  1.60e-04  2.80e-02  1.20e-04  4.75e-04  3.99e-01  
 11  +4.9031e-01  +6.8922e-01  1.99e-01  1.28e-04  2.24e-02  7.43e-05  3.87e-04  4.57e-01  
 12  +4.7831e-01  +6.1817e-01  1.40e-01  7.75e-05  1.35e-02  3.06e-05  2.46e-04  6.31e-01  
 13  +4.6857e-01  +5.6957e-01  1.01e-01  5.14e-05  8.95e-03  1.99e-05  1.70e-04  3.62e-01  
 14  +4.5626e-01  +5.1228e-01  5.60e-02  2.59e-05  4.50e-03  7.09e-06  9.11e-05  7.08e-01  
 15  +4.4772e-01  +4.7523e-01  2.75e-02  1.19e-05  2.06e-03  3.15e-06  4.44e-05  6.39e-01  
 16  +4.4365e-01  +4.5788e-01  1.42e-02  5.88e-06  1.02e-03  1.48e-06  2.27e-05  8.87e-01  
 17  +4.4027e-01  +4.4434e-01  4.07e-03  1.65e-06  2.87e-04  4.18e-07  6.62e-06  7.30e-01  
 18  +4.3900e-01  +4.3928e-01  2.81e-04  1.13e-07  1.97e-05  2.79e-08  4.62e-07  9.64e-01  
 19  +4.3890e-01  +4.3890e-01  2.93e-06  1.18e-09  2.05e-07  2.90e-10  4.82e-09  9.90e-01  
 20  +4.3890e-01  +4.3890e-01  2.93e-08  1.18e-11  2.05e-09  2.90e-12  4.82e-11  9.90e-01  
 21  +4.3890e-01  +4.3890e-01  2.93e-10  1.18e-13  2.05e-11  2.91e-14  4.84e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 94.8394ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:30 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:30 PM: Optimal value: 4.389e-01
(CVXPY) Sep 20 07:59:30 PM: Compilation took 2.106e-02 seconds
(CVXPY) Sep 20 07:59:30 PM: Solver (including time spent in interface) took 1.012e-01 seconds
Iteration: 9, Objective: 0.4389
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:31 PM: Your problem has 2609 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:31 PM: Finished problem compilation (took 2.406e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2609
  constraints   = 5109
  nnz(P)        = 0
  nnz(A)        = 44638
  cones (total) = 1
    : Nonnegative = 1,  numel = 5109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.58e+01  1.00e+00  1.00e+00   ------   
  1  +5.7962e-01  +5.4356e+02  5.43e+02  4.32e-01  5.53e+01  3.78e-03  5.75e-01  5.85e-01  
  2  +5.3066e-01  +6.0550e+01  6.00e+01  1.64e-01  2.66e+01  1.65e-02  2.73e-01  9.45e-01  
  3  +5.0826e-01  +1.5668e+01  1.52e+01  1.04e-01  1.69e+01  4.56e-05  2.51e-01  3.21e-01  
  4  +5.0072e-01  +1.4167e+00  9.16e-01  9.02e-03  1.53e+00  6.65e-06  1.18e-01  8.34e-01  
  5  +5.0037e-01  +9.8998e-01  4.90e-01  4.74e-03  8.11e-01  1.18e-05  5.85e-02  6.32e-01  
  6  +5.0019e-01  +8.2278e-01  3.23e-01  2.14e-03  3.72e-01  3.65e-05  8.49e-03  9.26e-01  
  7  +4.9984e-01  +8.2148e-01  3.22e-01  5.11e-04  8.97e-02  1.92e-04  1.51e-03  8.23e-01  
  8  +4.9869e-01  +7.7497e-01  2.76e-01  2.54e-04  4.46e-02  2.18e-04  7.38e-04  7.69e-01  
  9  +4.9700e-01  +7.5821e-01  2.61e-01  1.99e-04  3.49e-02  2.23e-04  5.78e-04  3.07e-01  
 10  +4.9329e-01  +7.2900e-01  2.36e-01  1.49e-04  2.61e-02  1.91e-04  4.39e-04  4.00e-01  
 11  +4.8962e-01  +7.0295e-01  2.13e-01  1.37e-04  2.39e-02  1.28e-04  4.10e-04  2.45e-01  
 12  +4.8154e-01  +6.5528e-01  1.74e-01  1.00e-04  1.75e-02  8.87e-05  3.11e-04  3.52e-01  
 13  +4.7026e-01  +5.9373e-01  1.23e-01  6.61e-05  1.15e-02  3.78e-05  2.15e-04  5.26e-01  
 14  +4.5979e-01  +5.4149e-01  8.17e-02  4.05e-05  7.03e-03  2.15e-05  1.38e-04  4.31e-01  
 15  +4.5055e-01  +4.9742e-01  4.69e-02  2.18e-05  3.78e-03  1.03e-05  7.74e-05  5.41e-01  
 16  +4.4210e-01  +4.5797e-01  1.59e-02  6.98e-06  1.21e-03  2.07e-06  2.60e-05  8.85e-01  
 17  +4.3894e-01  +4.4431e-01  5.37e-03  2.33e-06  4.04e-04  6.34e-07  8.93e-06  7.83e-01  
 18  +4.3788e-01  +4.3986e-01  1.98e-03  8.45e-07  1.47e-04  2.20e-07  3.32e-06  7.51e-01  
 19  +4.3747e-01  +4.3824e-01  7.66e-04  3.16e-07  5.49e-05  7.44e-08  1.28e-06  9.90e-01  
 20  +4.3726e-01  +4.3741e-01  1.55e-04  6.34e-08  1.10e-05  1.48e-08  2.61e-07  9.90e-01  
 21  +4.3720e-01  +4.3720e-01  2.68e-06  1.09e-09  1.90e-07  2.57e-10  4.51e-09  9.83e-01  
 22  +4.3720e-01  +4.3720e-01  2.69e-08  1.10e-11  1.90e-09  2.57e-12  4.52e-11  9.90e-01  
 23  +4.3720e-01  +4.3720e-01  2.69e-10  1.10e-13  1.91e-11  2.74e-14  4.80e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 102.0908ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:31 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:31 PM: Optimal value: 4.372e-01
(CVXPY) Sep 20 07:59:31 PM: Compilation took 2.406e-02 seconds
(CVXPY) Sep 20 07:59:31 PM: Solver (including time spent in interface) took 1.078e-01 seconds
Iteration: 10, Objective: 0.4372
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:31 PM: Your problem has 2619 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:31 PM: Finished problem compilation (took 2.372e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2619
  constraints   = 5119
  nnz(P)        = 0
  nnz(A)        = 45087
  cones (total) = 1
    : Nonnegative = 1,  numel = 5119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.58e+01  1.00e+00  1.00e+00   ------   
  1  +5.7955e-01  +5.4355e+02  5.43e+02  4.32e-01  5.53e+01  3.78e-03  5.75e-01  5.85e-01  
  2  +5.3061e-01  +6.0501e+01  6.00e+01  1.64e-01  2.65e+01  1.65e-02  2.73e-01  9.46e-01  
  3  +5.0826e-01  +1.5657e+01  1.51e+01  1.04e-01  1.69e+01  4.56e-05  2.50e-01  3.22e-01  
  4  +5.0072e-01  +1.4170e+00  9.16e-01  9.04e-03  1.53e+00  6.66e-06  1.18e-01  8.35e-01  
  5  +5.0038e-01  +1.0075e+00  5.07e-01  4.91e-03  8.41e-01  1.18e-05  5.95e-02  6.22e-01  
  6  +5.0021e-01  +8.4687e-01  3.47e-01  2.20e-03  3.81e-01  3.79e-05  8.38e-03  9.67e-01  
  7  +4.9987e-01  +8.4469e-01  3.45e-01  5.44e-04  9.52e-02  1.84e-04  1.60e-03  8.10e-01  
  8  +4.9873e-01  +7.8157e-01  2.83e-01  2.67e-04  4.69e-02  1.87e-04  7.76e-04  7.96e-01  
  9  +4.9703e-01  +7.6414e-01  2.67e-01  2.06e-04  3.62e-02  1.96e-04  5.99e-04  3.08e-01  
 10  +4.9447e-01  +7.4236e-01  2.48e-01  1.67e-04  2.92e-02  1.67e-04  4.89e-04  3.43e-01  
 11  +4.9140e-01  +7.2080e-01  2.29e-01  1.43e-04  2.51e-02  1.34e-04  4.25e-04  2.78e-01  
 12  +4.7936e-01  +6.4235e-01  1.63e-01  9.37e-05  1.63e-02  4.11e-05  2.93e-04  6.35e-01  
 13  +4.6380e-01  +5.6111e-01  9.73e-02  4.94e-05  8.59e-03  1.79e-05  1.64e-04  5.64e-01  
 14  +4.5533e-01  +5.2125e-01  6.59e-02  3.15e-05  5.47e-03  1.00e-05  1.09e-04  5.06e-01  
 15  +4.4838e-01  +4.8818e-01  3.98e-02  1.81e-05  3.14e-03  4.42e-06  6.40e-05  8.03e-01  
 16  +4.4179e-01  +4.5862e-01  1.68e-02  7.20e-06  1.25e-03  1.77e-06  2.66e-05  9.41e-01  
 17  +4.4139e-01  +4.5692e-01  1.55e-02  6.66e-06  1.16e-03  1.60e-06  2.48e-05  3.69e-01  
 18  +4.4036e-01  +4.5276e-01  1.24e-02  5.24e-06  9.09e-04  1.28e-06  1.98e-05  3.42e-01  
 19  +4.3903e-01  +4.4740e-01  8.37e-03  3.46e-06  6.01e-04  8.66e-07  1.33e-05  5.55e-01  
 20  +4.3686e-01  +4.3875e-01  1.89e-03  7.60e-07  1.32e-04  1.94e-07  3.04e-06  8.63e-01  
 21  +4.3637e-01  +4.3682e-01  4.49e-04  1.80e-07  3.12e-05  4.52e-08  7.26e-07  9.90e-01  
 22  +4.3620e-01  +4.3621e-01  7.24e-06  2.89e-09  5.01e-07  7.26e-10  1.17e-08  9.84e-01  
 23  +4.3620e-01  +4.3620e-01  7.25e-08  2.89e-11  5.02e-09  7.27e-12  1.17e-10  9.90e-01  
 24  +4.3620e-01  +4.3620e-01  7.26e-10  2.89e-13  5.02e-11  7.39e-14  1.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 103.7185ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:31 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:31 PM: Optimal value: 4.362e-01
(CVXPY) Sep 20 07:59:31 PM: Compilation took 2.372e-02 seconds
(CVXPY) Sep 20 07:59:31 PM: Solver (including time spent in interface) took 1.100e-01 seconds
Iteration: 11, Objective: 0.4362
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:31 PM: Your problem has 2629 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:31 PM: Finished problem compilation (took 2.006e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2629
  constraints   = 5129
  nnz(P)        = 0
  nnz(A)        = 45546
  cones (total) = 1
    : Nonnegative = 1,  numel = 5129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.57e+01  1.00e+00  1.00e+00   ------   
  1  +5.7949e-01  +5.4356e+02  5.43e+02  4.32e-01  5.52e+01  3.78e-03  5.75e-01  5.85e-01  
  2  +5.3056e-01  +6.0454e+01  5.99e+01  1.64e-01  2.65e+01  1.66e-02  2.73e-01  9.46e-01  
  3  +5.0825e-01  +1.5646e+01  1.51e+01  1.04e-01  1.68e+01  4.57e-05  2.50e-01  3.23e-01  
  4  +5.0072e-01  +1.4180e+00  9.17e-01  9.05e-03  1.54e+00  6.67e-06  1.17e-01  8.35e-01  
  5  +5.0039e-01  +1.0146e+00  5.14e-01  4.99e-03  8.52e-01  1.19e-05  5.94e-02  6.17e-01  
  6  +5.0025e-01  +9.0579e-01  4.06e-01  2.54e-03  4.40e-01  3.78e-05  9.56e-03  9.76e-01  
  7  +4.9994e-01  +9.0173e-01  4.02e-01  6.43e-04  1.13e-01  1.74e-04  1.89e-03  8.03e-01  
  8  +4.9890e-01  +7.8857e-01  2.90e-01  3.01e-04  5.28e-02  1.30e-04  8.75e-04  8.62e-01  
  9  +4.9715e-01  +7.7193e-01  2.75e-01  2.14e-04  3.74e-02  1.56e-04  6.20e-04  3.42e-01  
 10  +4.9519e-01  +7.5515e-01  2.60e-01  1.80e-04  3.15e-02  1.42e-04  5.26e-04  2.68e-01  
 11  +4.9281e-01  +7.3570e-01  2.43e-01  1.59e-04  2.78e-02  1.09e-04  4.68e-04  2.95e-01  
 12  +4.8250e-01  +6.6051e-01  1.78e-01  1.12e-04  1.95e-02  1.30e-05  3.46e-04  8.05e-01  
 13  +4.7042e-01  +5.9769e-01  1.27e-01  6.87e-05  1.19e-02  9.31e-06  2.23e-04  4.34e-01  
 14  +4.5911e-01  +5.4299e-01  8.39e-02  4.16e-05  7.22e-03  6.06e-06  1.41e-04  6.21e-01  
 15  +4.4862e-01  +4.9295e-01  4.43e-02  2.06e-05  3.56e-03  3.47e-06  7.27e-05  7.43e-01  
 16  +4.4005e-01  +4.5358e-01  1.35e-02  5.93e-06  1.03e-03  1.20e-06  2.18e-05  8.61e-01  
 17  +4.3995e-01  +4.5327e-01  1.33e-02  5.78e-06  1.00e-03  1.20e-06  2.12e-05  8.00e-02  
 18  +4.3797e-01  +4.4505e-01  7.08e-03  3.01e-06  5.22e-04  7.21e-07  1.12e-05  9.90e-01  
 19  +4.3583e-01  +4.3638e-01  5.50e-04  2.33e-07  4.03e-05  5.43e-08  8.77e-07  9.67e-01  
 20  +4.3565e-01  +4.3566e-01  6.04e-06  2.55e-09  4.42e-07  5.95e-10  9.63e-09  9.89e-01  
 21  +4.3565e-01  +4.3565e-01  6.04e-08  2.55e-11  4.42e-09  5.96e-12  9.64e-11  9.90e-01  
 22  +4.3565e-01  +4.3565e-01  6.28e-10  2.65e-13  4.60e-11  6.21e-14  1.00e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 95.7079ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:31 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:31 PM: Optimal value: 4.357e-01
(CVXPY) Sep 20 07:59:31 PM: Compilation took 2.006e-02 seconds
(CVXPY) Sep 20 07:59:31 PM: Solver (including time spent in interface) took 1.013e-01 seconds
Iteration: 12, Objective: 0.4357
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:31 PM: Your problem has 2639 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:31 PM: Finished problem compilation (took 2.262e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2639
  constraints   = 5139
  nnz(P)        = 0
  nnz(A)        = 45892
  cones (total) = 1
    : Nonnegative = 1,  numel = 5139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.57e+01  1.00e+00  1.00e+00   ------   
  1  +5.7938e-01  +5.4352e+02  5.43e+02  4.33e-01  5.51e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3050e-01  +6.0382e+01  5.99e+01  1.63e-01  2.63e+01  1.66e-02  2.72e-01  9.47e-01  
  3  +5.0823e-01  +1.5628e+01  1.51e+01  1.04e-01  1.68e+01  4.58e-05  2.49e-01  3.25e-01  
  4  +5.0072e-01  +1.4155e+00  9.15e-01  9.04e-03  1.53e+00  6.69e-06  1.16e-01  8.37e-01  
  5  +5.0040e-01  +1.0283e+00  5.28e-01  5.13e-03  8.75e-01  1.18e-05  5.93e-02  6.11e-01  
  6  +5.0030e-01  +9.4268e-01  4.42e-01  3.21e-03  5.54e-01  2.99e-05  1.33e-02  8.98e-01  
  7  +5.0001e-01  +9.3314e-01  4.33e-01  7.35e-04  1.29e-01  1.60e-04  2.15e-03  8.42e-01  
  8  +4.9924e-01  +8.1059e-01  3.11e-01  3.71e-04  6.51e-02  1.09e-04  1.08e-03  8.15e-01  
  9  +4.9700e-01  +7.8642e-01  2.89e-01  2.06e-04  3.61e-02  1.64e-04  5.92e-04  5.01e-01  
 10  +4.9394e-01  +7.6012e-01  2.66e-01  1.68e-04  2.93e-02  1.38e-04  4.90e-04  3.23e-01  
 11  +4.8042e-01  +6.5252e-01  1.72e-01  1.01e-04  1.75e-02  1.06e-05  3.12e-04  8.60e-01  
 12  +4.7121e-01  +6.0655e-01  1.35e-01  7.33e-05  1.27e-02  8.38e-06  2.36e-04  3.52e-01  
 13  +4.6348e-01  +5.6909e-01  1.06e-01  5.43e-05  9.42e-03  6.67e-06  1.80e-04  3.57e-01  
 14  +4.5052e-01  +5.0684e-01  5.63e-02  2.67e-05  4.63e-03  3.54e-06  9.37e-05  5.64e-01  
 15  +4.4488e-01  +4.7958e-01  3.47e-02  1.56e-05  2.70e-03  3.14e-06  5.57e-05  8.87e-01  
 16  +4.3970e-01  +4.5631e-01  1.66e-02  7.24e-06  1.25e-03  1.54e-06  2.65e-05  5.66e-01  
 17  +4.3945e-01  +4.5536e-01  1.59e-02  6.86e-06  1.19e-03  1.49e-06  2.51e-05  1.24e-01  
 18  +4.3715e-01  +4.4562e-01  8.48e-03  3.52e-06  6.10e-04  8.71e-07  1.33e-05  9.77e-01  
 19  +4.3490e-01  +4.3657e-01  1.66e-03  6.76e-07  1.17e-04  1.67e-07  2.65e-06  8.84e-01  
 20  +4.3435e-01  +4.3449e-01  1.42e-04  5.69e-08  9.86e-06  1.43e-08  2.27e-07  9.57e-01  
 21  +4.3430e-01  +4.3430e-01  1.50e-06  5.99e-10  1.04e-07  1.51e-10  2.40e-09  9.90e-01  
 22  +4.3430e-01  +4.3430e-01  1.50e-08  5.99e-12  1.04e-09  1.51e-12  2.40e-11  9.90e-01  
 23  +4.3430e-01  +4.3430e-01  2.74e-10  1.10e-13  1.90e-11  2.77e-14  4.41e-13  9.82e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 101.5162ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:32 PM: Optimal value: 4.343e-01
(CVXPY) Sep 20 07:59:32 PM: Compilation took 2.262e-02 seconds
(CVXPY) Sep 20 07:59:32 PM: Solver (including time spent in interface) took 1.069e-01 seconds
Iteration: 13, Objective: 0.4343
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:32 PM: Your problem has 2649 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:32 PM: Finished problem compilation (took 2.300e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2649
  constraints   = 5149
  nnz(P)        = 0
  nnz(A)        = 46423
  cones (total) = 1
    : Nonnegative = 1,  numel = 5149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.56e+01  1.00e+00  1.00e+00   ------   
  1  +5.7926e-01  +5.4360e+02  5.43e+02  4.33e-01  5.50e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.3042e-01  +6.0319e+01  5.98e+01  1.63e-01  2.63e+01  1.66e-02  2.72e-01  9.48e-01  
  3  +5.0822e-01  +1.5615e+01  1.51e+01  1.04e-01  1.67e+01  4.59e-05  2.49e-01  3.27e-01  
  4  +5.0072e-01  +1.4167e+00  9.16e-01  9.06e-03  1.53e+00  6.71e-06  1.16e-01  8.38e-01  
  5  +5.0039e-01  +1.0113e+00  5.11e-01  4.95e-03  8.46e-01  1.26e-05  5.44e-02  6.62e-01  
  6  +5.0026e-01  +9.3958e-01  4.39e-01  2.28e-03  3.96e-01  4.82e-05  7.77e-03  9.90e-01  
  7  +4.9993e-01  +9.3095e-01  4.31e-01  6.77e-04  1.19e-01  1.73e-04  1.97e-03  7.52e-01  
  8  +4.9861e-01  +7.7830e-01  2.80e-01  2.76e-04  4.84e-02  1.11e-04  7.94e-04  9.59e-01  
  9  +4.9657e-01  +7.6215e-01  2.66e-01  2.06e-04  3.61e-02  1.25e-04  5.94e-04  3.09e-01  
 10  +4.9454e-01  +7.4903e-01  2.54e-01  1.76e-04  3.08e-02  1.15e-04  5.13e-04  2.54e-01  
 11  +4.9181e-01  +7.3225e-01  2.40e-01  1.53e-04  2.67e-02  1.01e-04  4.51e-04  2.37e-01  
 12  +4.8247e-01  +6.6976e-01  1.87e-01  1.22e-04  2.13e-02  1.40e-05  3.78e-04  7.28e-01  
 13  +4.7044e-01  +6.0712e-01  1.37e-01  7.49e-05  1.30e-02  1.06e-05  2.42e-04  4.12e-01  
 14  +4.5679e-01  +5.4117e-01  8.44e-02  4.15e-05  7.19e-03  6.16e-06  1.42e-04  8.31e-01  
 15  +4.4811e-01  +5.0057e-01  5.25e-02  2.40e-05  4.16e-03  4.48e-06  8.48e-05  8.66e-01  
 16  +4.3881e-01  +4.5858e-01  1.98e-02  8.59e-06  1.49e-03  1.69e-06  3.19e-05  6.77e-01  
 17  +4.3780e-01  +4.5438e-01  1.66e-02  7.04e-06  1.22e-03  1.46e-06  2.63e-05  2.40e-01  
 18  +4.3736e-01  +4.5221e-01  1.48e-02  6.38e-06  1.10e-03  1.34e-06  2.45e-05  5.00e-01  
 19  +4.3719e-01  +4.5147e-01  1.43e-02  6.12e-06  1.06e-03  1.31e-06  2.35e-05  1.33e-01  
 20  +4.3538e-01  +4.4390e-01  8.52e-03  3.60e-06  6.23e-04  8.07e-07  1.40e-05  5.45e-01  
 21  +4.3464e-01  +4.4125e-01  6.61e-03  2.72e-06  4.72e-04  6.42e-07  1.06e-05  3.81e-01  
 22  +4.3253e-01  +4.3291e-01  3.77e-04  1.53e-07  2.65e-05  3.52e-08  6.15e-07  9.52e-01  
 23  +4.3240e-01  +4.3241e-01  4.07e-06  1.64e-09  2.85e-07  3.79e-10  6.65e-09  9.89e-01  
 24  +4.3240e-01  +4.3240e-01  4.07e-08  1.64e-11  2.85e-09  3.79e-12  6.65e-11  9.90e-01  
 25  +4.3240e-01  +4.3240e-01  5.64e-10  2.28e-13  3.95e-11  5.27e-14  9.25e-13  9.86e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 107.1354ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:32 PM: Optimal value: 4.324e-01
(CVXPY) Sep 20 07:59:32 PM: Compilation took 2.300e-02 seconds
(CVXPY) Sep 20 07:59:32 PM: Solver (including time spent in interface) took 1.121e-01 seconds
Iteration: 14, Objective: 0.4324
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:32 PM: Your problem has 2659 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:32 PM: Finished problem compilation (took 2.171e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2659
  constraints   = 5159
  nnz(P)        = 0
  nnz(A)        = 46891
  cones (total) = 1
    : Nonnegative = 1,  numel = 5159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.56e+01  1.00e+00  1.00e+00   ------   
  1  +5.7925e-01  +5.4349e+02  5.43e+02  4.33e-01  5.49e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3043e-01  +6.0327e+01  5.98e+01  1.63e-01  2.62e+01  1.66e-02  2.72e-01  9.48e-01  
  3  +5.0822e-01  +1.5612e+01  1.51e+01  1.04e-01  1.67e+01  4.59e-05  2.48e-01  3.28e-01  
  4  +5.0072e-01  +1.4147e+00  9.14e-01  9.05e-03  1.53e+00  6.72e-06  1.15e-01  8.39e-01  
  5  +5.0040e-01  +1.0259e+00  5.26e-01  5.10e-03  8.69e-01  1.29e-05  5.50e-02  6.66e-01  
  6  +5.0025e-01  +9.2069e-01  4.20e-01  2.21e-03  3.83e-01  4.75e-05  7.57e-03  9.90e-01  
  7  +4.9991e-01  +9.1349e-01  4.14e-01  6.41e-04  1.12e-01  1.77e-04  1.86e-03  7.60e-01  
  8  +4.9857e-01  +7.8550e-01  2.87e-01  2.66e-04  4.66e-02  1.39e-04  7.63e-04  9.27e-01  
  9  +4.9650e-01  +7.6770e-01  2.71e-01  2.04e-04  3.57e-02  1.45e-04  5.88e-04  3.22e-01  
 10  +4.9441e-01  +7.5453e-01  2.60e-01  1.71e-04  3.00e-02  1.41e-04  4.98e-04  2.39e-01  
 11  +4.8430e-01  +6.8367e-01  1.99e-01  1.15e-04  2.01e-02  4.63e-05  3.48e-04  7.32e-01  
 12  +4.7201e-01  +6.1714e-01  1.45e-01  7.76e-05  1.35e-02  2.75e-05  2.46e-04  3.93e-01  
 13  +4.5989e-01  +5.5677e-01  9.69e-02  4.83e-05  8.36e-03  1.52e-05  1.61e-04  4.48e-01  
 14  +4.5236e-01  +5.2126e-01  6.89e-02  3.25e-05  5.62e-03  9.56e-06  1.12e-04  4.51e-01  
 15  +4.4595e-01  +4.9057e-01  4.46e-02  1.98e-05  3.42e-03  4.33e-06  6.99e-05  9.90e-01  
 16  +4.4151e-01  +4.7089e-01  2.94e-02  1.28e-05  2.20e-03  2.88e-06  4.62e-05  4.38e-01  
 17  +4.3810e-01  +4.5596e-01  1.79e-02  7.55e-06  1.31e-03  1.79e-06  2.79e-05  5.13e-01  
 18  +4.3720e-01  +4.5137e-01  1.42e-02  6.05e-06  1.05e-03  1.43e-06  2.29e-05  9.90e-01  
 19  +4.3628e-01  +4.4756e-01  1.13e-02  4.80e-06  8.29e-04  1.15e-06  1.82e-05  3.67e-01  
 20  +4.3433e-01  +4.3988e-01  5.55e-03  2.29e-06  3.97e-04  5.84e-07  8.84e-06  6.86e-01  
 21  +4.3254e-01  +4.3292e-01  3.80e-04  1.55e-07  2.68e-05  3.70e-08  6.18e-07  9.60e-01  
 22  +4.3240e-01  +4.3242e-01  1.24e-05  5.00e-09  8.65e-07  1.20e-09  2.02e-08  9.70e-01  
 23  +4.3240e-01  +4.3240e-01  1.24e-07  5.02e-11  8.69e-09  1.21e-11  2.03e-10  9.90e-01  
 24  +4.3240e-01  +4.3240e-01  1.24e-09  5.02e-13  8.69e-11  1.21e-13  2.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 102.7935ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:32 PM: Optimal value: 4.324e-01
(CVXPY) Sep 20 07:59:32 PM: Compilation took 2.171e-02 seconds
(CVXPY) Sep 20 07:59:32 PM: Solver (including time spent in interface) took 1.086e-01 seconds
Iteration: 15, Objective: 0.4324
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:32 PM: Your problem has 2669 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:32 PM: Finished problem compilation (took 2.382e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2669
  constraints   = 5169
  nnz(P)        = 0
  nnz(A)        = 47415
  cones (total) = 1
    : Nonnegative = 1,  numel = 5169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.55e+01  1.00e+00  1.00e+00   ------   
  1  +5.7908e-01  +5.4360e+02  5.43e+02  4.33e-01  5.48e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.3033e-01  +6.0236e+01  5.97e+01  1.63e-01  2.61e+01  1.66e-02  2.72e-01  9.50e-01  
  3  +5.0820e-01  +1.5592e+01  1.51e+01  1.04e-01  1.67e+01  4.60e-05  2.48e-01  3.31e-01  
  4  +5.0072e-01  +1.4160e+00  9.15e-01  9.07e-03  1.53e+00  6.74e-06  1.15e-01  8.40e-01  
  5  +5.0038e-01  +1.0103e+00  5.10e-01  4.94e-03  8.42e-01  1.37e-05  5.00e-02  7.11e-01  
  6  +5.0028e-01  +9.8218e-01  4.82e-01  2.22e-03  3.85e-01  5.62e-05  7.23e-03  9.90e-01  
  7  +4.9993e-01  +9.6655e-01  4.67e-01  7.17e-04  1.25e-01  1.75e-04  2.07e-03  7.25e-01  
  8  +4.9847e-01  +7.7961e-01  2.81e-01  2.71e-04  4.74e-02  1.03e-04  7.75e-04  9.90e-01  
  9  +4.9601e-01  +7.6077e-01  2.65e-01  1.98e-04  3.46e-02  1.13e-04  5.70e-04  3.45e-01  
 10  +4.9355e-01  +7.4657e-01  2.53e-01  1.66e-04  2.90e-02  1.09e-04  4.82e-04  2.44e-01  
 11  +4.9130e-01  +7.3364e-01  2.42e-01  1.51e-04  2.63e-02  9.59e-05  4.43e-04  1.82e-01  
 12  +4.8090e-01  +6.6751e-01  1.87e-01  1.18e-04  2.05e-02  1.87e-05  3.64e-04  6.80e-01  
 13  +4.6786e-01  +5.9925e-01  1.31e-01  7.09e-05  1.23e-02  1.24e-05  2.29e-04  4.92e-01  
 14  +4.5488e-01  +5.3592e-01  8.10e-02  3.96e-05  6.85e-03  7.10e-06  1.35e-04  4.87e-01  
 15  +4.4920e-01  +5.0955e-01  6.04e-02  2.74e-05  4.74e-03  5.62e-06  9.45e-05  9.90e-01  
 16  +4.4537e-01  +4.9161e-01  4.62e-02  2.04e-05  3.52e-03  4.61e-06  7.09e-05  6.78e-01  
 17  +4.4260e-01  +4.7904e-01  3.64e-02  1.58e-05  2.73e-03  3.72e-06  5.55e-05  4.27e-01  
 18  +4.3651e-01  +4.5204e-01  1.55e-02  6.54e-06  1.13e-03  1.63e-06  2.36e-05  6.99e-01  
 19  +4.3595e-01  +4.4895e-01  1.30e-02  5.54e-06  9.57e-04  1.34e-06  2.03e-05  8.26e-01  
 20  +4.3570e-01  +4.4791e-01  1.22e-02  5.20e-06  8.97e-04  1.26e-06  1.90e-05  1.94e-01  
 21  +4.3360e-01  +4.3937e-01  5.77e-03  2.40e-06  4.15e-04  6.24e-07  8.80e-06  7.66e-01  
 22  +4.3193e-01  +4.3271e-01  7.74e-04  3.21e-07  5.54e-05  8.25e-08  1.19e-06  9.33e-01  
 23  +4.3173e-01  +4.3191e-01  1.81e-04  7.50e-08  1.30e-05  1.93e-08  2.78e-07  7.99e-01  
 24  +4.3167e-01  +4.3167e-01  2.02e-06  8.35e-10  1.44e-07  2.14e-10  3.10e-09  9.90e-01  
 25  +4.3167e-01  +4.3167e-01  2.03e-08  8.39e-12  1.45e-09  2.15e-12  3.11e-11  9.90e-01  
 26  +4.3167e-01  +4.3167e-01  2.18e-10  9.01e-14  1.56e-11  2.32e-14  3.35e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 115.7325ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:32 PM: Optimal value: 4.317e-01
(CVXPY) Sep 20 07:59:32 PM: Compilation took 2.382e-02 seconds
(CVXPY) Sep 20 07:59:32 PM: Solver (including time spent in interface) took 1.213e-01 seconds
Iteration: 16, Objective: 0.4317
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:32 PM: Your problem has 2679 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:33 PM: Finished problem compilation (took 2.456e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2679
  constraints   = 5179
  nnz(P)        = 0
  nnz(A)        = 47905
  cones (total) = 1
    : Nonnegative = 1,  numel = 5179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.55e+01  1.00e+00  1.00e+00   ------   
  1  +5.7895e-01  +5.4359e+02  5.43e+02  4.34e-01  5.48e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.3026e-01  +6.0178e+01  5.96e+01  1.63e-01  2.59e+01  1.66e-02  2.71e-01  9.51e-01  
  3  +5.0819e-01  +1.5580e+01  1.51e+01  1.04e-01  1.66e+01  4.61e-05  2.47e-01  3.33e-01  
  4  +5.0072e-01  +1.4152e+00  9.14e-01  9.07e-03  1.53e+00  6.76e-06  1.14e-01  8.42e-01  
  5  +5.0040e-01  +1.0266e+00  5.26e-01  5.10e-03  8.68e-01  1.37e-05  5.00e-02  6.96e-01  
  6  +5.0018e-01  +9.0598e-01  4.06e-01  1.49e-03  2.60e-01  7.49e-05  4.64e-03  9.89e-01  
  7  +4.9972e-01  +8.8483e-01  3.85e-01  5.28e-04  9.24e-02  1.97e-04  1.52e-03  7.15e-01  
  8  +4.9726e-01  +7.9634e-01  2.99e-01  2.37e-04  4.14e-02  1.95e-04  6.75e-04  8.35e-01  
  9  +4.9412e-01  +7.7366e-01  2.80e-01  1.83e-04  3.20e-02  1.86e-04  5.29e-04  3.23e-01  
 10  +4.9192e-01  +7.5426e-01  2.62e-01  1.73e-04  3.01e-02  1.33e-04  5.05e-04  2.42e-01  
 11  +4.8436e-01  +6.9554e-01  2.11e-01  1.46e-04  2.53e-02  1.39e-05  4.43e-04  7.36e-01  
 12  +4.7389e-01  +6.3952e-01  1.66e-01  9.51e-05  1.65e-02  1.17e-05  3.00e-04  4.15e-01  
 13  +4.5555e-01  +5.4563e-01  9.01e-02  4.38e-05  7.57e-03  6.36e-06  1.47e-04  9.60e-01  
 14  +4.4831e-01  +5.1265e-01  6.43e-02  2.93e-05  5.06e-03  5.13e-06  1.01e-04  5.97e-01  
 15  +4.4762e-01  +5.0927e-01  6.17e-02  2.79e-05  4.81e-03  5.14e-06  9.58e-05  2.06e-01  
 16  +4.3914e-01  +4.7117e-01  3.20e-02  1.38e-05  2.38e-03  2.74e-06  4.91e-05  5.81e-01  
 17  +4.3684e-01  +4.6081e-01  2.40e-02  1.01e-05  1.75e-03  2.19e-06  3.62e-05  4.88e-01  
 18  +4.3632e-01  +4.5806e-01  2.17e-02  9.05e-06  1.56e-03  2.17e-06  3.24e-05  5.69e-01  
 19  +4.3160e-01  +4.3867e-01  7.07e-03  2.87e-06  4.95e-04  7.18e-07  1.06e-05  7.28e-01  
 20  +4.3016e-01  +4.3305e-01  2.89e-03  1.14e-06  1.97e-04  3.06e-07  4.34e-06  8.87e-01  
 21  +4.2938e-01  +4.3012e-01  7.44e-04  2.90e-07  5.01e-05  7.90e-08  1.12e-06  8.48e-01  
 22  +4.2911e-01  +4.2913e-01  2.07e-05  8.02e-09  1.38e-06  2.19e-09  3.13e-08  9.90e-01  
 23  +4.2910e-01  +4.2910e-01  2.07e-07  8.03e-11  1.39e-08  2.19e-11  3.14e-10  9.90e-01  
 24  +4.2910e-01  +4.2910e-01  2.07e-09  8.03e-13  1.39e-10  2.19e-13  3.14e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 115.8264ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:33 PM: Optimal value: 4.291e-01
(CVXPY) Sep 20 07:59:33 PM: Compilation took 2.456e-02 seconds
(CVXPY) Sep 20 07:59:33 PM: Solver (including time spent in interface) took 1.220e-01 seconds
Iteration: 17, Objective: 0.4291
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:33 PM: Your problem has 2689 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:33 PM: Finished problem compilation (took 2.506e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2689
  constraints   = 5189
  nnz(P)        = 0
  nnz(A)        = 48489
  cones (total) = 1
    : Nonnegative = 1,  numel = 5189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.54e+01  1.00e+00  1.00e+00   ------   
  1  +5.7883e-01  +5.4363e+02  5.43e+02  4.34e-01  5.47e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.3020e-01  +6.0123e+01  5.96e+01  1.63e-01  2.59e+01  1.67e-02  2.71e-01  9.52e-01  
  3  +5.0818e-01  +1.5566e+01  1.51e+01  1.04e-01  1.66e+01  4.62e-05  2.47e-01  3.35e-01  
  4  +5.0072e-01  +1.4148e+00  9.14e-01  9.08e-03  1.53e+00  6.78e-06  1.13e-01  8.43e-01  
  5  +5.0040e-01  +1.0282e+00  5.28e-01  5.12e-03  8.70e-01  1.37e-05  4.86e-02  6.96e-01  
  6  +5.0018e-01  +9.2922e-01  4.29e-01  1.38e-03  2.41e-01  8.60e-05  4.20e-03  9.90e-01  
  7  +4.9953e-01  +8.8720e-01  3.88e-01  4.50e-04  7.88e-02  2.20e-04  1.28e-03  7.70e-01  
  8  +4.9610e-01  +8.0063e-01  3.05e-01  2.05e-04  3.58e-02  2.31e-04  5.81e-04  7.89e-01  
  9  +4.9278e-01  +7.7960e-01  2.87e-01  1.68e-04  2.92e-02  2.13e-04  4.83e-04  2.69e-01  
 10  +4.8996e-01  +7.5943e-01  2.69e-01  1.54e-04  2.69e-02  1.80e-04  4.50e-04  1.51e-01  
 11  +4.8101e-01  +6.9270e-01  2.12e-01  1.30e-04  2.26e-02  5.35e-05  3.98e-04  4.74e-01  
 12  +4.6661e-01  +6.0952e-01  1.43e-01  7.57e-05  1.31e-02  3.14e-05  2.43e-04  4.76e-01  
 13  +4.5341e-01  +5.4232e-01  8.89e-02  4.26e-05  7.37e-03  1.32e-05  1.43e-04  6.45e-01  
 14  +4.4862e-01  +5.1918e-01  7.06e-02  3.24e-05  5.59e-03  8.23e-06  1.10e-04  6.56e-01  
 15  +4.3995e-01  +4.7935e-01  3.94e-02  1.72e-05  2.97e-03  4.47e-06  6.05e-05  5.06e-01  
 16  +4.3911e-01  +4.7543e-01  3.63e-02  1.57e-05  2.70e-03  4.11e-06  5.53e-05  1.80e-01  
 17  +4.3486e-01  +4.5618e-01  2.13e-02  9.00e-06  1.55e-03  2.35e-06  3.23e-05  6.47e-01  
 18  +4.3077e-01  +4.3866e-01  7.89e-03  3.27e-06  5.63e-04  8.66e-07  1.20e-05  7.04e-01  
 19  +4.2974e-01  +4.3409e-01  4.35e-03  1.79e-06  3.09e-04  4.69e-07  6.58e-06  8.05e-01  
 20  +4.2864e-01  +4.2966e-01  1.02e-03  4.18e-07  7.20e-05  1.08e-07  1.55e-06  9.57e-01  
 21  +4.2838e-01  +4.2864e-01  2.60e-04  1.07e-07  1.84e-05  2.75e-08  3.97e-07  9.90e-01  
 22  +4.2829e-01  +4.2831e-01  1.58e-05  6.48e-09  1.12e-06  1.66e-09  2.41e-08  9.56e-01  
 23  +4.2829e-01  +4.2829e-01  1.60e-07  6.59e-11  1.14e-08  1.69e-11  2.45e-10  9.90e-01  
 24  +4.2829e-01  +4.2829e-01  1.61e-09  6.61e-13  1.14e-10  1.69e-13  2.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 121.2596ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:33 PM: Optimal value: 4.283e-01
(CVXPY) Sep 20 07:59:33 PM: Compilation took 2.506e-02 seconds
(CVXPY) Sep 20 07:59:33 PM: Solver (including time spent in interface) took 1.283e-01 seconds
Iteration: 18, Objective: 0.4283
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:33 PM: Your problem has 2699 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:33 PM: Finished problem compilation (took 2.766e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2699
  constraints   = 5199
  nnz(P)        = 0
  nnz(A)        = 49035
  cones (total) = 1
    : Nonnegative = 1,  numel = 5199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.54e+01  1.00e+00  1.00e+00   ------   
  1  +5.7874e-01  +5.4353e+02  5.43e+02  4.34e-01  5.46e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3014e-01  +6.0047e+01  5.95e+01  1.62e-01  2.57e+01  1.67e-02  2.70e-01  9.52e-01  
  3  +5.0816e-01  +1.5547e+01  1.50e+01  1.04e-01  1.65e+01  4.63e-05  2.46e-01  3.36e-01  
  4  +5.0072e-01  +1.4102e+00  9.09e-01  9.04e-03  1.52e+00  6.80e-06  1.12e-01  8.46e-01  
  5  +5.0044e-01  +1.0842e+00  5.84e-01  5.67e-03  9.64e-01  1.34e-05  5.23e-02  6.46e-01  
  6  +5.0026e-01  +9.7406e-01  4.74e-01  2.02e-03  3.51e-01  6.04e-05  6.40e-03  9.54e-01  
  7  +4.9991e-01  +9.5507e-01  4.55e-01  7.14e-04  1.25e-01  1.66e-04  2.05e-03  7.05e-01  
  8  +4.9807e-01  +8.1005e-01  3.12e-01  2.64e-04  4.62e-02  1.50e-04  7.48e-04  9.71e-01  
  9  +4.9485e-01  +7.8323e-01  2.88e-01  2.07e-04  3.62e-02  1.41e-04  5.95e-04  3.08e-01  
 10  +4.9205e-01  +7.6426e-01  2.72e-01  1.82e-04  3.18e-02  1.11e-04  5.29e-04  2.95e-01  
 11  +4.8813e-01  +7.4045e-01  2.52e-01  1.57e-04  2.74e-02  8.50e-05  4.63e-04  3.10e-01  
 12  +4.7402e-01  +6.5421e-01  1.80e-01  1.01e-04  1.75e-02  3.52e-05  3.15e-04  5.79e-01  
 13  +4.6617e-01  +6.1402e-01  1.48e-01  7.95e-05  1.37e-02  2.21e-05  2.55e-04  4.06e-01  
 14  +4.4962e-01  +5.3100e-01  8.14e-02  3.88e-05  6.70e-03  1.06e-05  1.32e-04  5.53e-01  
 15  +4.4537e-01  +5.1217e-01  6.68e-02  3.02e-05  5.21e-03  7.42e-06  1.04e-04  6.51e-01  
 16  +4.3667e-01  +4.7272e-01  3.61e-02  1.57e-05  2.70e-03  3.75e-06  5.60e-05  7.50e-01  
 17  +4.3575e-01  +4.6859e-01  3.28e-02  1.41e-05  2.43e-03  3.43e-06  5.08e-05  1.80e-01  
 18  +4.3048e-01  +4.4530e-01  1.48e-02  6.24e-06  1.07e-03  1.55e-06  2.30e-05  7.69e-01  
 19  +4.2876e-01  +4.3780e-01  9.04e-03  3.74e-06  6.44e-04  9.59e-07  1.40e-05  8.18e-01  
 20  +4.2698e-01  +4.3073e-01  3.75e-03  1.52e-06  2.61e-04  4.07e-07  5.73e-06  6.49e-01  
 21  +4.2684e-01  +4.3023e-01  3.39e-03  1.35e-06  2.32e-04  3.68e-07  5.10e-06  2.02e-01  
 22  +4.2638e-01  +4.2847e-01  2.09e-03  8.24e-07  1.42e-04  2.26e-07  3.15e-06  5.79e-01  
 23  +4.2571e-01  +4.2600e-01  2.84e-04  1.10e-07  1.90e-05  3.01e-08  4.27e-07  9.90e-01  
 24  +4.2560e-01  +4.2561e-01  3.75e-06  1.45e-09  2.50e-07  3.97e-10  5.64e-09  9.88e-01  
 25  +4.2560e-01  +4.2560e-01  3.76e-08  1.45e-11  2.51e-09  3.98e-12  5.65e-11  9.90e-01  
 26  +4.2560e-01  +4.2560e-01  4.19e-10  1.62e-13  2.79e-11  4.57e-14  6.47e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 137.4985ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:33 PM: Optimal value: 4.256e-01
(CVXPY) Sep 20 07:59:33 PM: Compilation took 2.766e-02 seconds
(CVXPY) Sep 20 07:59:33 PM: Solver (including time spent in interface) took 1.444e-01 seconds
Iteration: 19, Objective: 0.4256
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:33 PM: Your problem has 2709 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:33 PM: Finished problem compilation (took 2.864e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2709
  constraints   = 5209
  nnz(P)        = 0
  nnz(A)        = 49475
  cones (total) = 1
    : Nonnegative = 1,  numel = 5209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.53e+01  1.00e+00  1.00e+00   ------   
  1  +5.7854e-01  +5.4370e+02  5.43e+02  4.35e-01  5.46e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.3000e-01  +5.9932e+01  5.94e+01  1.62e-01  2.57e+01  1.67e-02  2.70e-01  9.54e-01  
  3  +5.0814e-01  +1.5525e+01  1.50e+01  1.03e-01  1.65e+01  4.65e-05  2.45e-01  3.40e-01  
  4  +5.0072e-01  +1.4129e+00  9.12e-01  9.08e-03  1.53e+00  6.82e-06  1.11e-01  8.47e-01  
  5  +5.0043e-01  +1.0767e+00  5.76e-01  5.58e-03  9.47e-01  1.44e-05  4.76e-02  6.86e-01  
  6  +5.0019e-01  +9.7768e-01  4.77e-01  1.32e-03  2.31e-01  9.97e-05  3.93e-03  9.75e-01  
  7  +4.9932e-01  +8.8385e-01  3.85e-01  4.47e-04  7.81e-02  1.81e-04  1.27e-03  8.45e-01  
  8  +4.9612e-01  +8.3535e-01  3.39e-01  2.36e-04  4.12e-02  2.45e-04  6.68e-04  5.73e-01  
  9  +4.9305e-01  +8.1052e-01  3.17e-01  2.02e-04  3.52e-02  2.11e-04  5.79e-04  2.48e-01  
 10  +4.9049e-01  +7.8954e-01  2.99e-01  1.83e-04  3.20e-02  1.64e-04  5.33e-04  2.33e-01  
 11  +4.7980e-01  +6.9813e-01  2.18e-01  1.49e-04  2.57e-02  1.40e-06  4.58e-04  7.37e-01  
 12  +4.6856e-01  +6.3667e-01  1.68e-01  9.61e-05  1.66e-02  1.93e-06  3.07e-04  3.75e-01  
 13  +4.5804e-01  +5.8390e-01  1.26e-01  6.49e-05  1.12e-02  8.39e-06  2.15e-04  8.20e-01  
 14  +4.4553e-01  +5.2271e-01  7.72e-02  3.64e-05  6.26e-03  5.43e-06  1.26e-04  5.86e-01  
 15  +4.3635e-01  +4.7874e-01  4.24e-02  1.85e-05  3.18e-03  3.90e-06  6.65e-05  9.05e-01  
 16  +4.3550e-01  +4.7465e-01  3.92e-02  1.69e-05  2.91e-03  3.71e-06  6.09e-05  2.64e-01  
 17  +4.3107e-01  +4.5523e-01  2.42e-02  1.03e-05  1.77e-03  2.34e-06  3.78e-05  5.76e-01  
 18  +4.2636e-01  +4.3494e-01  8.58e-03  3.59e-06  6.17e-04  8.37e-07  1.35e-05  6.90e-01  
 19  +4.2507e-01  +4.2935e-01  4.28e-03  1.76e-06  3.03e-04  4.33e-07  6.66e-06  6.93e-01  
 20  +4.2488e-01  +4.2860e-01  3.72e-03  1.51e-06  2.60e-04  3.81e-07  5.71e-06  1.95e-01  
 21  +4.2426e-01  +4.2601e-01  1.75e-03  7.05e-07  1.21e-04  1.84e-07  2.68e-06  9.90e-01  
 22  +4.2379e-01  +4.2425e-01  4.65e-04  1.83e-07  3.15e-05  4.94e-08  7.05e-07  8.53e-01  
 23  +4.2362e-01  +4.2365e-01  3.95e-05  1.53e-08  2.63e-06  4.18e-09  5.95e-08  9.55e-01  
 24  +4.2360e-01  +4.2360e-01  4.09e-07  1.58e-10  2.72e-08  4.33e-11  6.16e-10  9.90e-01  
 25  +4.2360e-01  +4.2360e-01  4.09e-09  1.58e-12  2.72e-10  4.33e-13  6.16e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 136.7876ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:34 PM: Optimal value: 4.236e-01
(CVXPY) Sep 20 07:59:34 PM: Compilation took 2.864e-02 seconds
(CVXPY) Sep 20 07:59:34 PM: Solver (including time spent in interface) took 1.433e-01 seconds
Iteration: 20, Objective: 0.4236
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:34 PM: Your problem has 2719 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:34 PM: Finished problem compilation (took 2.904e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2719
  constraints   = 5219
  nnz(P)        = 0
  nnz(A)        = 50030
  cones (total) = 1
    : Nonnegative = 1,  numel = 5219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.53e+01  1.00e+00  1.00e+00   ------   
  1  +5.7845e-01  +5.4376e+02  5.43e+02  4.35e-01  5.45e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2994e-01  +5.9869e+01  5.93e+01  1.62e-01  2.56e+01  1.67e-02  2.70e-01  9.55e-01  
  3  +5.0813e-01  +1.5513e+01  1.50e+01  1.03e-01  1.64e+01  4.65e-05  2.45e-01  3.41e-01  
  4  +5.0072e-01  +1.4144e+00  9.14e-01  9.11e-03  1.53e+00  6.82e-06  1.11e-01  8.47e-01  
  5  +5.0046e-01  +1.1122e+00  6.12e-01  5.94e-03  1.01e+00  1.42e-05  5.04e-02  6.57e-01  
  6  +5.0020e-01  +9.5382e-01  4.54e-01  1.45e-03  2.53e-01  8.41e-05  4.38e-03  9.60e-01  
  7  +4.9939e-01  +8.9417e-01  3.95e-01  4.30e-04  7.51e-02  2.16e-04  1.22e-03  8.33e-01  
  8  +4.9725e-01  +8.5430e-01  3.57e-01  3.10e-04  5.42e-02  2.05e-04  8.80e-04  4.23e-01  
  9  +4.9222e-01  +8.0205e-01  3.10e-01  2.05e-04  3.58e-02  1.68e-04  5.95e-04  5.33e-01  
 10  +4.8973e-01  +7.8046e-01  2.91e-01  1.88e-04  3.27e-02  1.30e-04  5.50e-04  2.35e-01  
 11  +4.7964e-01  +6.9806e-01  2.18e-01  1.49e-04  2.58e-02  5.66e-06  4.59e-04  7.76e-01  
 12  +4.6786e-01  +6.3448e-01  1.67e-01  9.49e-05  1.64e-02  5.11e-06  3.04e-04  3.82e-01  
 13  +4.5566e-01  +5.7461e-01  1.19e-01  6.05e-05  1.04e-02  8.15e-06  2.02e-04  8.27e-01  
 14  +4.4629e-01  +5.2950e-01  8.32e-02  3.97e-05  6.83e-03  5.92e-06  1.37e-04  4.70e-01  
 15  +4.3654e-01  +4.8300e-01  4.65e-02  2.07e-05  3.57e-03  3.85e-06  7.45e-05  7.44e-01  
 16  +4.3385e-01  +4.7050e-01  3.67e-02  1.59e-05  2.74e-03  3.26e-06  5.76e-05  4.34e-01  
 17  +4.2814e-01  +4.4509e-01  1.69e-02  7.09e-06  1.22e-03  1.70e-06  2.63e-05  8.64e-01  
 18  +4.2807e-01  +4.4471e-01  1.66e-02  6.97e-06  1.20e-03  1.66e-06  2.59e-05  5.93e-02  
 19  +4.2768e-01  +4.4291e-01  1.52e-02  6.33e-06  1.09e-03  1.55e-06  2.36e-05  5.23e-01  
 20  +4.2445e-01  +4.2989e-01  5.44e-03  2.22e-06  3.82e-04  5.57e-07  8.46e-06  7.04e-01  
 21  +4.2389e-01  +4.2777e-01  3.87e-03  1.54e-06  2.65e-04  4.03e-07  5.95e-06  5.93e-01  
 22  +4.2308e-01  +4.2468e-01  1.60e-03  6.29e-07  1.08e-04  1.67e-07  2.46e-06  6.09e-01  
 23  +4.2261e-01  +4.2289e-01  2.81e-04  1.10e-07  1.88e-05  2.94e-08  4.32e-07  9.90e-01  
 24  +4.2250e-01  +4.2250e-01  3.46e-06  1.34e-09  2.31e-07  3.61e-10  5.31e-09  9.89e-01  
 25  +4.2250e-01  +4.2250e-01  3.46e-08  1.34e-11  2.31e-09  3.61e-12  5.31e-11  9.90e-01  
 26  +4.2250e-01  +4.2250e-01  3.46e-10  1.34e-13  2.31e-11  3.72e-14  5.47e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 138.9657ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:34 PM: Optimal value: 4.225e-01
(CVXPY) Sep 20 07:59:34 PM: Compilation took 2.904e-02 seconds
(CVXPY) Sep 20 07:59:34 PM: Solver (including time spent in interface) took 1.462e-01 seconds
Iteration: 21, Objective: 0.4225
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:34 PM: Your problem has 2729 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:34 PM: Finished problem compilation (took 2.757e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2729
  constraints   = 5229
  nnz(P)        = 0
  nnz(A)        = 50354
  cones (total) = 1
    : Nonnegative = 1,  numel = 5229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.80e-01  8.52e+01  1.00e+00  1.00e+00   ------   
  1  +5.7815e-01  +5.4409e+02  5.44e+02  4.35e-01  5.44e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2974e-01  +5.9701e+01  5.92e+01  1.62e-01  2.55e+01  1.68e-02  2.70e-01  9.57e-01  
  3  +5.0810e-01  +1.5486e+01  1.50e+01  1.03e-01  1.64e+01  4.69e-05  2.44e-01  3.47e-01  
  4  +5.0072e-01  +1.4197e+00  9.19e-01  9.17e-03  1.54e+00  6.86e-06  1.10e-01  8.48e-01  
  5  +5.0056e-01  +1.2340e+00  7.33e-01  7.03e-03  1.19e+00  1.73e-05  4.98e-02  7.03e-01  
  6  +5.0019e-01  +9.6162e-01  4.61e-01  1.40e-03  2.44e-01  9.03e-05  4.17e-03  9.58e-01  
  7  +4.9909e-01  +8.8321e-01  3.84e-01  3.82e-04  6.68e-02  2.24e-04  1.07e-03  9.02e-01  
  8  +4.9692e-01  +8.5236e-01  3.55e-01  3.24e-04  5.66e-02  1.98e-04  9.19e-04  2.38e-01  
  9  +4.9308e-01  +8.1685e-01  3.24e-01  2.38e-04  4.16e-02  1.88e-04  6.86e-04  3.65e-01  
 10  +4.8974e-01  +7.9080e-01  3.01e-01  2.05e-04  3.56e-02  1.43e-04  5.97e-04  3.18e-01  
 11  +4.8369e-01  +7.4480e-01  2.61e-01  1.73e-04  3.01e-02  6.81e-05  5.18e-04  4.79e-01  
 12  +4.7026e-01  +6.5971e-01  1.89e-01  1.09e-04  1.89e-02  3.47e-05  3.46e-04  5.40e-01  
 13  +4.6340e-01  +6.2334e-01  1.60e-01  8.71e-05  1.50e-02  2.66e-05  2.83e-04  2.78e-01  
 14  +4.5201e-01  +5.6480e-01  1.13e-01  5.63e-05  9.70e-03  1.34e-05  1.91e-04  6.10e-01  
 15  +4.4003e-01  +5.0650e-01  6.65e-02  3.08e-05  5.29e-03  6.77e-06  1.09e-04  6.50e-01  
 16  +4.3515e-01  +4.8353e-01  4.84e-02  2.17e-05  3.72e-03  4.91e-06  7.81e-05  4.21e-01  
 17  +4.3201e-01  +4.6868e-01  3.67e-02  1.59e-05  2.73e-03  3.75e-06  5.79e-05  5.09e-01  
 18  +4.2661e-01  +4.4398e-01  1.74e-02  7.31e-06  1.26e-03  1.79e-06  2.73e-05  9.90e-01  
 19  +4.2537e-01  +4.3891e-01  1.35e-02  5.66e-06  9.71e-04  1.40e-06  2.13e-05  3.29e-01  
 20  +4.2395e-01  +4.3266e-01  8.70e-03  3.62e-06  6.21e-04  9.02e-07  1.37e-05  9.90e-01  
 21  +4.2200e-01  +4.2498e-01  2.99e-03  1.23e-06  2.12e-04  3.08e-07  4.77e-06  7.10e-01  
 22  +4.2156e-01  +4.2333e-01  1.77e-03  7.15e-07  1.23e-04  1.85e-07  2.79e-06  6.40e-01  
 23  +4.2122e-01  +4.2209e-01  8.68e-04  3.46e-07  5.94e-05  9.05e-08  1.37e-06  5.61e-01  
 24  +4.2096e-01  +4.2113e-01  1.66e-04  6.54e-08  1.12e-05  1.70e-08  2.61e-07  9.90e-01  
 25  +4.2090e-01  +4.2090e-01  2.03e-06  7.99e-10  1.37e-07  2.08e-10  3.20e-09  9.89e-01  
 26  +4.2090e-01  +4.2090e-01  2.03e-08  7.99e-12  1.37e-09  2.08e-12  3.20e-11  9.90e-01  
 27  +4.2090e-01  +4.2090e-01  2.04e-10  7.99e-14  1.37e-11  2.20e-14  3.37e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 138.0164ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:34 PM: Optimal value: 4.209e-01
(CVXPY) Sep 20 07:59:34 PM: Compilation took 2.757e-02 seconds
(CVXPY) Sep 20 07:59:34 PM: Solver (including time spent in interface) took 1.448e-01 seconds
Iteration: 22, Objective: 0.4209
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:34 PM: Your problem has 2739 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:34 PM: Finished problem compilation (took 2.906e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:34 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2739
  constraints   = 5239
  nnz(P)        = 0
  nnz(A)        = 50615
  cones (total) = 1
    : Nonnegative = 1,  numel = 5239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.52e+01  1.00e+00  1.00e+00   ------   
  1  +5.7806e-01  +5.4392e+02  5.43e+02  4.35e-01  5.43e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2968e-01  +5.9618e+01  5.91e+01  1.61e-01  2.54e+01  1.68e-02  2.69e-01  9.58e-01  
  3  +5.0809e-01  +1.5463e+01  1.50e+01  1.03e-01  1.63e+01  4.69e-05  2.43e-01  3.48e-01  
  4  +5.0072e-01  +1.4117e+00  9.11e-01  9.10e-03  1.53e+00  6.88e-06  1.09e-01  8.52e-01  
  5  +5.0056e-01  +1.2467e+00  7.46e-01  7.06e-03  1.20e+00  1.90e-05  4.55e-02  7.47e-01  
  6  +5.0014e-01  +9.7063e-01  4.70e-01  1.06e-03  1.84e-01  1.23e-04  3.06e-03  9.74e-01  
  7  +4.9961e-01  +9.2206e-01  4.22e-01  7.33e-04  1.28e-01  1.08e-04  2.10e-03  5.57e-01  
  8  +4.9695e-01  +8.8087e-01  3.84e-01  2.82e-04  4.92e-02  2.35e-04  7.89e-04  6.68e-01  
  9  +4.9394e-01  +8.6160e-01  3.68e-01  2.39e-04  4.16e-02  2.02e-04  6.76e-04  2.89e-01  
 10  +4.9043e-01  +8.2349e-01  3.33e-01  2.22e-04  3.86e-02  1.31e-04  6.41e-04  2.51e-01  
 11  +4.8770e-01  +8.0260e-01  3.15e-01  1.98e-04  3.44e-02  1.08e-04  5.79e-04  2.36e-01  
 12  +4.7949e-01  +7.2840e-01  2.49e-01  1.70e-04  2.94e-02  2.22e-05  5.18e-04  6.14e-01  
 13  +4.6336e-01  +6.3320e-01  1.70e-01  9.21e-05  1.59e-02  1.61e-05  2.97e-04  4.68e-01  
 14  +4.5530e-01  +5.8987e-01  1.35e-01  6.98e-05  1.20e-02  1.04e-05  2.32e-04  8.51e-01  
 15  +4.4600e-01  +5.4305e-01  9.70e-02  4.73e-05  8.13e-03  7.46e-06  1.63e-04  4.01e-01  
 16  +4.3593e-01  +4.9305e-01  5.71e-02  2.60e-05  4.47e-03  4.78e-06  9.33e-05  7.14e-01  
 17  +4.3329e-01  +4.8080e-01  4.75e-02  2.12e-05  3.64e-03  4.08e-06  7.67e-05  2.66e-01  
 18  +4.3006e-01  +4.6569e-01  3.56e-02  1.55e-05  2.65e-03  3.24e-06  5.67e-05  4.79e-01  
 19  +4.2358e-01  +4.3669e-01  1.31e-02  5.52e-06  9.47e-04  1.30e-06  2.09e-05  9.21e-01  
 20  +4.2199e-01  +4.2991e-01  7.92e-03  3.31e-06  5.68e-04  7.93e-07  1.27e-05  5.08e-01  
 21  +4.2154e-01  +4.2799e-01  6.45e-03  2.69e-06  4.61e-04  6.48e-07  1.03e-05  3.54e-01  
 22  +4.2041e-01  +4.2335e-01  2.93e-03  1.22e-06  2.09e-04  2.95e-07  4.71e-06  6.39e-01  
 23  +4.2004e-01  +4.2180e-01  1.76e-03  7.24e-07  1.24e-04  1.77e-07  2.81e-06  9.04e-01  
 24  +4.1960e-01  +4.2012e-01  5.13e-04  2.11e-07  3.61e-05  5.18e-08  8.21e-07  7.20e-01  
 25  +4.1953e-01  +4.1982e-01  2.95e-04  1.20e-07  2.06e-05  2.97e-08  4.70e-07  9.67e-01  
 26  +4.1944e-01  +4.1948e-01  4.12e-05  1.68e-08  2.88e-06  4.15e-09  6.57e-08  8.64e-01  
 27  +4.1942e-01  +4.1942e-01  5.88e-07  2.39e-10  4.11e-08  5.93e-11  9.37e-10  9.86e-01  
 28  +4.1942e-01  +4.1942e-01  5.99e-09  2.44e-12  4.18e-10  6.04e-13  9.55e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 144.5955ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:35 PM: Optimal value: 4.194e-01
(CVXPY) Sep 20 07:59:35 PM: Compilation took 2.906e-02 seconds
(CVXPY) Sep 20 07:59:35 PM: Solver (including time spent in interface) took 1.516e-01 seconds
Iteration: 23, Objective: 0.4194
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:35 PM: Your problem has 2749 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:35 PM: Finished problem compilation (took 3.783e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2749
  constraints   = 5249
  nnz(P)        = 0
  nnz(A)        = 50889
  cones (total) = 1
    : Nonnegative = 1,  numel = 5249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.51e+01  1.00e+00  1.00e+00   ------   
  1  +5.7802e-01  +5.4381e+02  5.43e+02  4.35e-01  5.42e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2964e-01  +5.9560e+01  5.90e+01  1.61e-01  2.53e+01  1.68e-02  2.68e-01  9.59e-01  
  3  +5.0807e-01  +1.5441e+01  1.49e+01  1.03e-01  1.63e+01  4.69e-05  2.43e-01  3.50e-01  
  4  +5.0071e-01  +1.4079e+00  9.07e-01  9.07e-03  1.52e+00  6.89e-06  1.08e-01  8.54e-01  
  5  +5.0057e-01  +1.2605e+00  7.60e-01  7.17e-03  1.21e+00  1.94e-05  4.47e-02  7.54e-01  
  6  +5.0015e-01  +9.9178e-01  4.92e-01  1.11e-03  1.93e-01  1.23e-04  3.19e-03  9.60e-01  
  7  +4.9962e-01  +9.3378e-01  4.34e-01  7.60e-04  1.33e-01  1.04e-04  2.18e-03  5.71e-01  
  8  +4.9709e-01  +8.9294e-01  3.96e-01  2.96e-04  5.17e-02  2.25e-04  8.26e-04  6.61e-01  
  9  +4.9375e-01  +8.6529e-01  3.72e-01  2.48e-04  4.33e-02  1.93e-04  7.04e-04  2.73e-01  
 10  +4.9022e-01  +8.2553e-01  3.35e-01  2.26e-04  3.93e-02  1.25e-04  6.53e-04  2.82e-01  
 11  +4.8758e-01  +8.0643e-01  3.19e-01  2.02e-04  3.50e-02  1.11e-04  5.89e-04  1.90e-01  
 12  +4.7687e-01  +7.1241e-01  2.36e-01  1.58e-04  2.72e-02  9.92e-07  4.87e-04  8.31e-01  
 13  +4.6300e-01  +6.3364e-01  1.71e-01  9.49e-05  1.63e-02  1.51e-06  3.06e-04  4.08e-01  
 14  +4.5284e-01  +5.8034e-01  1.27e-01  6.58e-05  1.13e-02  1.07e-05  2.21e-04  9.63e-01  
 15  +4.3966e-01  +5.1487e-01  7.52e-02  3.57e-05  6.13e-03  6.10e-06  1.26e-04  5.53e-01  
 16  +4.3293e-01  +4.8310e-01  5.02e-02  2.27e-05  3.90e-03  4.22e-06  8.23e-05  4.83e-01  
 17  +4.3062e-01  +4.7287e-01  4.22e-02  1.87e-05  3.21e-03  3.61e-06  6.84e-05  2.17e-01  
 18  +4.2754e-01  +4.5911e-01  3.16e-02  1.36e-05  2.33e-03  2.80e-06  5.04e-05  4.02e-01  
 19  +4.2079e-01  +4.3025e-01  9.45e-03  3.88e-06  6.64e-04  8.85e-07  1.50e-05  8.23e-01  
 20  +4.1927e-01  +4.2381e-01  4.55e-03  1.82e-06  3.12e-04  4.58e-07  7.15e-06  8.24e-01  
 21  +4.1816e-01  +4.1970e-01  1.53e-03  6.04e-07  1.03e-04  1.55e-07  2.40e-06  6.85e-01  
 22  +4.1780e-01  +4.1830e-01  5.01e-04  1.97e-07  3.37e-05  5.13e-08  7.87e-07  9.90e-01  
 23  +4.1760e-01  +4.1761e-01  6.86e-06  2.69e-09  4.60e-07  7.00e-10  1.08e-08  9.86e-01  
 24  +4.1760e-01  +4.1760e-01  6.86e-08  2.69e-11  4.60e-09  7.00e-12  1.08e-10  9.90e-01  
 25  +4.1760e-01  +4.1760e-01  6.86e-10  2.69e-13  4.60e-11  7.10e-14  1.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 185.4133ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:35 PM: Optimal value: 4.176e-01
(CVXPY) Sep 20 07:59:35 PM: Compilation took 3.783e-02 seconds
(CVXPY) Sep 20 07:59:35 PM: Solver (including time spent in interface) took 1.962e-01 seconds
Iteration: 24, Objective: 0.4176
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:35 PM: Your problem has 2759 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:35 PM: Finished problem compilation (took 4.104e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2759
  constraints   = 5259
  nnz(P)        = 0
  nnz(A)        = 51175
  cones (total) = 1
    : Nonnegative = 1,  numel = 5259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.7795e-01  +5.4388e+02  5.43e+02  4.35e-01  5.41e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2959e-01  +5.9503e+01  5.90e+01  1.61e-01  2.52e+01  1.68e-02  2.68e-01  9.59e-01  
  3  +5.0807e-01  +1.5434e+01  1.49e+01  1.03e-01  1.62e+01  4.70e-05  2.43e-01  3.51e-01  
  4  +5.0072e-01  +1.4103e+00  9.10e-01  9.10e-03  1.53e+00  6.89e-06  1.08e-01  8.54e-01  
  5  +5.0060e-01  +1.3006e+00  8.00e-01  7.47e-03  1.26e+00  2.09e-05  4.39e-02  7.73e-01  
  6  +5.0016e-01  +1.0058e+00  5.06e-01  1.13e-03  1.97e-01  1.24e-04  3.26e-03  9.56e-01  
  7  +4.9962e-01  +9.4196e-01  4.42e-01  7.79e-04  1.36e-01  1.02e-04  2.23e-03  5.76e-01  
  8  +4.9696e-01  +8.9706e-01  4.00e-01  2.97e-04  5.19e-02  2.21e-04  8.30e-04  6.70e-01  
  9  +4.9382e-01  +8.7776e-01  3.84e-01  2.44e-04  4.25e-02  1.98e-04  6.90e-04  3.08e-01  
 10  +4.8845e-01  +8.1689e-01  3.28e-01  2.14e-04  3.72e-02  9.69e-05  6.23e-04  3.97e-01  
 11  +4.8590e-01  +7.9142e-01  3.06e-01  2.10e-04  3.65e-02  7.67e-05  6.19e-04  8.88e-02  
 12  +4.6918e-01  +6.7853e-01  2.09e-01  1.15e-04  1.99e-02  4.20e-05  3.61e-04  5.91e-01  
 13  +4.6090e-01  +6.3160e-01  1.71e-01  9.01e-05  1.55e-02  2.98e-05  2.92e-04  3.01e-01  
 14  +4.4268e-01  +5.3216e-01  8.95e-02  4.34e-05  7.44e-03  9.14e-06  1.51e-04  7.52e-01  
 15  +4.3631e-01  +5.0089e-01  6.46e-02  2.97e-05  5.09e-03  6.34e-06  1.05e-04  6.74e-01  
 16  +4.3163e-01  +4.7917e-01  4.75e-02  2.13e-05  3.64e-03  4.69e-06  7.70e-05  3.34e-01  
 17  +4.2940e-01  +4.6848e-01  3.91e-02  1.71e-05  2.92e-03  3.92e-06  6.23e-05  4.67e-01  
 18  +4.2213e-01  +4.3634e-01  1.42e-02  5.97e-06  1.02e-03  1.44e-06  2.27e-05  9.38e-01  
 19  +4.2107e-01  +4.3201e-01  1.09e-02  4.54e-06  7.77e-04  1.11e-06  1.74e-05  3.69e-01  
 20  +4.1847e-01  +4.2152e-01  3.05e-03  1.24e-06  2.12e-04  3.13e-07  4.86e-06  9.45e-01  
 21  +4.1782e-01  +4.1907e-01  1.25e-03  5.01e-07  8.58e-05  1.28e-07  1.99e-06  6.39e-01  
 22  +4.1758e-01  +4.1812e-01  5.46e-04  2.19e-07  3.75e-05  5.50e-08  8.72e-07  9.86e-01  
 23  +4.1737e-01  +4.1738e-01  1.05e-05  4.22e-09  7.23e-07  1.06e-09  1.68e-08  9.81e-01  
 24  +4.1737e-01  +4.1737e-01  1.05e-07  4.22e-11  7.23e-09  1.06e-11  1.68e-10  9.90e-01  
 25  +4.1737e-01  +4.1737e-01  1.05e-09  4.23e-13  7.23e-11  1.07e-13  1.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 171.4153ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:36 PM: Optimal value: 4.174e-01
(CVXPY) Sep 20 07:59:36 PM: Compilation took 4.104e-02 seconds
(CVXPY) Sep 20 07:59:36 PM: Solver (including time spent in interface) took 1.844e-01 seconds
Iteration: 25, Objective: 0.4174
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:36 PM: Your problem has 2769 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:36 PM: Finished problem compilation (took 3.759e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2769
  constraints   = 5269
  nnz(P)        = 0
  nnz(A)        = 51412
  cones (total) = 1
    : Nonnegative = 1,  numel = 5269

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.7788e-01  +5.4383e+02  5.43e+02  4.36e-01  5.41e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2957e-01  +5.9492e+01  5.90e+01  1.61e-01  2.51e+01  1.68e-02  2.68e-01  9.59e-01  
  3  +5.0806e-01  +1.5426e+01  1.49e+01  1.03e-01  1.62e+01  4.70e-05  2.42e-01  3.52e-01  
  4  +5.0071e-01  +1.4088e+00  9.08e-01  9.10e-03  1.52e+00  6.90e-06  1.07e-01  8.55e-01  
  5  +5.0062e-01  +1.3185e+00  8.18e-01  7.66e-03  1.29e+00  2.04e-05  4.52e-02  7.56e-01  
  6  +5.0015e-01  +9.9134e-01  4.91e-01  1.10e-03  1.92e-01  1.22e-04  3.18e-03  9.59e-01  
  7  +4.9962e-01  +9.3691e-01  4.37e-01  7.65e-04  1.33e-01  1.04e-04  2.19e-03  5.69e-01  
  8  +4.9696e-01  +8.9434e-01  3.97e-01  2.93e-04  5.10e-02  2.27e-04  8.16e-04  6.69e-01  
  9  +4.9376e-01  +8.7816e-01  3.84e-01  2.36e-04  4.10e-02  2.09e-04  6.65e-04  3.29e-01  
 10  +4.8903e-01  +8.2712e-01  3.38e-01  2.15e-04  3.74e-02  1.22e-04  6.23e-04  2.91e-01  
 11  +4.8576e-01  +7.9414e-01  3.08e-01  2.10e-04  3.63e-02  8.71e-05  6.16e-04  1.40e-01  
 12  +4.7278e-01  +7.0581e-01  2.33e-01  1.35e-04  2.33e-02  5.11e-05  4.18e-04  5.03e-01  
 13  +4.5702e-01  +6.1080e-01  1.54e-01  8.23e-05  1.41e-02  1.67e-05  2.72e-04  6.80e-01  
 14  +4.4497e-01  +5.4729e-01  1.02e-01  5.07e-05  8.68e-03  9.54e-06  1.75e-04  6.00e-01  
 15  +4.3547e-01  +5.0033e-01  6.49e-02  3.04e-05  5.21e-03  5.89e-06  1.09e-04  5.24e-01  
 16  +4.2947e-01  +4.7157e-01  4.21e-02  1.90e-05  3.25e-03  3.89e-06  6.96e-05  4.75e-01  
 17  +4.2833e-01  +4.6566e-01  3.73e-02  1.65e-05  2.82e-03  3.54e-06  6.07e-05  3.70e-01  
 18  +4.2283e-01  +4.4064e-01  1.78e-02  7.63e-06  1.30e-03  1.75e-06  2.88e-05  8.53e-01  
 19  +4.2052e-01  +4.3093e-01  1.04e-02  4.37e-06  7.47e-04  1.04e-06  1.68e-05  5.77e-01  
 20  +4.1960e-01  +4.2689e-01  7.28e-03  3.03e-06  5.18e-04  7.30e-07  1.17e-05  7.31e-01  
 21  +4.1880e-01  +4.2362e-01  4.82e-03  1.98e-06  3.39e-04  4.85e-07  7.74e-06  8.81e-01  
 22  +4.1758e-01  +4.1897e-01  1.39e-03  5.65e-07  9.66e-05  1.40e-07  2.24e-06  7.67e-01  
 23  +4.1714e-01  +4.1734e-01  1.98e-04  7.98e-08  1.36e-05  1.97e-08  3.19e-07  9.90e-01  
 24  +4.1707e-01  +4.1707e-01  2.59e-06  1.04e-09  1.78e-07  2.57e-10  4.18e-09  9.87e-01  
 25  +4.1707e-01  +4.1707e-01  2.59e-08  1.04e-11  1.78e-09  2.57e-12  4.18e-11  9.90e-01  
 26  +4.1707e-01  +4.1707e-01  2.59e-10  1.04e-13  1.78e-11  2.62e-14  4.25e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 185.7154ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:36 PM: Optimal value: 4.171e-01
(CVXPY) Sep 20 07:59:36 PM: Compilation took 3.759e-02 seconds
(CVXPY) Sep 20 07:59:36 PM: Solver (including time spent in interface) took 1.951e-01 seconds
Iteration: 26, Objective: 0.4171
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:36 PM: Your problem has 2779 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:36 PM: Finished problem compilation (took 4.425e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2779
  constraints   = 5279
  nnz(P)        = 0
  nnz(A)        = 51645
  cones (total) = 1
    : Nonnegative = 1,  numel = 5279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.49e+01  1.00e+00  1.00e+00   ------   
  1  +5.7772e-01  +5.4383e+02  5.43e+02  4.36e-01  5.40e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2942e-01  +5.9332e+01  5.88e+01  1.61e-01  2.50e+01  1.68e-02  2.67e-01  9.61e-01  
  3  +5.0803e-01  +1.5388e+01  1.49e+01  1.02e-01  1.61e+01  4.72e-05  2.41e-01  3.56e-01  
  4  +5.0071e-01  +1.4030e+00  9.02e-01  9.05e-03  1.51e+00  6.93e-06  1.06e-01  8.59e-01  
  5  +5.0068e-01  +1.3926e+00  8.92e-01  8.36e-03  1.41e+00  1.99e-05  4.76e-02  7.14e-01  
  6  +5.0020e-01  +1.0241e+00  5.24e-01  1.22e-03  2.12e-01  1.13e-04  3.49e-03  9.56e-01  
  7  +4.9969e-01  +9.6359e-01  4.64e-01  8.69e-04  1.51e-01  9.08e-05  2.48e-03  5.54e-01  
  8  +4.9718e-01  +9.2070e-01  4.24e-01  3.23e-04  5.64e-02  2.07e-04  8.96e-04  6.75e-01  
  9  +4.9456e-01  +9.0529e-01  4.11e-01  2.72e-04  4.73e-02  1.89e-04  7.60e-04  2.86e-01  
 10  +4.8989e-01  +8.5237e-01  3.62e-01  2.35e-04  4.08e-02  1.11e-04  6.73e-04  3.83e-01  
 11  +4.8695e-01  +8.2929e-01  3.42e-01  2.11e-04  3.66e-02  9.54e-05  6.14e-04  1.88e-01  
 12  +4.7522e-01  +7.2557e-01  2.50e-01  1.64e-04  2.82e-02  1.08e-05  5.04e-04  7.48e-01  
 13  +4.6516e-01  +6.6683e-01  2.02e-01  1.17e-04  2.02e-02  9.32e-06  3.74e-04  3.27e-01  
 14  +4.5021e-01  +5.8418e-01  1.34e-01  7.00e-05  1.20e-02  7.08e-06  2.36e-04  5.41e-01  
 15  +4.3597e-01  +5.1161e-01  7.56e-02  3.63e-05  6.21e-03  5.05e-06  1.29e-04  7.14e-01  
 16  +4.2759e-01  +4.7168e-01  4.41e-02  2.01e-05  3.43e-03  3.29e-06  7.38e-05  5.93e-01  
 17  +4.2543e-01  +4.6152e-01  3.61e-02  1.60e-05  2.74e-03  2.92e-06  5.94e-05  3.97e-01  
 18  +4.2333e-01  +4.5194e-01  2.86e-02  1.24e-05  2.13e-03  2.46e-06  4.64e-05  4.17e-01  
 19  +4.2103e-01  +4.4065e-01  1.96e-02  8.41e-06  1.44e-03  1.96e-06  3.16e-05  9.45e-01  
 20  +4.1731e-01  +4.2545e-01  8.14e-03  3.44e-06  5.87e-04  8.09e-07  1.33e-05  6.03e-01  
 21  +4.1560e-01  +4.1837e-01  2.76e-03  1.16e-06  1.97e-04  2.77e-07  4.51e-06  9.55e-01  
 22  +4.1503e-01  +4.1617e-01  1.14e-03  4.69e-07  8.01e-05  1.15e-07  1.84e-06  6.76e-01  
 23  +4.1484e-01  +4.1547e-01  6.34e-04  2.54e-07  4.35e-05  6.43e-08  1.01e-06  5.99e-01  
 24  +4.1467e-01  +4.1487e-01  1.97e-04  7.80e-08  1.33e-05  2.00e-08  3.12e-07  7.05e-01  
 25  +4.1462e-01  +4.1468e-01  5.77e-05  2.28e-08  3.90e-06  5.84e-09  9.15e-08  9.82e-01  
 26  +4.1460e-01  +4.1460e-01  9.13e-07  3.60e-10  6.16e-08  9.22e-11  1.45e-09  9.85e-01  
 27  +4.1460e-01  +4.1460e-01  9.14e-09  3.60e-12  6.16e-10  9.22e-13  1.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 246.0293ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:37 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:37 PM: Optimal value: 4.146e-01
(CVXPY) Sep 20 07:59:37 PM: Compilation took 4.425e-02 seconds
(CVXPY) Sep 20 07:59:37 PM: Solver (including time spent in interface) took 2.575e-01 seconds
Iteration: 27, Objective: 0.4146
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:37 PM: Your problem has 2789 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:37 PM: Finished problem compilation (took 4.163e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2789
  constraints   = 5289
  nnz(P)        = 0
  nnz(A)        = 51896
  cones (total) = 1
    : Nonnegative = 1,  numel = 5289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.48e+01  1.00e+00  1.00e+00   ------   
  1  +5.7759e-01  +5.4390e+02  5.43e+02  4.36e-01  5.39e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2938e-01  +5.9305e+01  5.88e+01  1.61e-01  2.49e+01  1.68e-02  2.67e-01  9.62e-01  
  3  +5.0803e-01  +1.5382e+01  1.49e+01  1.02e-01  1.61e+01  4.73e-05  2.41e-01  3.58e-01  
  4  +5.0071e-01  +1.4044e+00  9.04e-01  9.07e-03  1.52e+00  6.94e-06  1.05e-01  8.59e-01  
  5  +5.0066e-01  +1.3710e+00  8.70e-01  8.12e-03  1.37e+00  2.02e-05  4.54e-02  7.27e-01  
  6  +5.0025e-01  +1.0822e+00  5.82e-01  1.36e-03  2.36e-01  1.12e-04  3.88e-03  9.44e-01  
  7  +4.9974e-01  +9.9027e-01  4.91e-01  9.59e-04  1.67e-01  7.91e-05  2.74e-03  5.72e-01  
  8  +4.9757e-01  +9.5017e-01  4.53e-01  3.66e-04  6.38e-02  1.81e-04  1.01e-03  6.58e-01  
  9  +4.9433e-01  +9.0848e-01  4.14e-01  3.12e-04  5.43e-02  1.52e-04  8.76e-04  2.30e-01  
 10  +4.9127e-01  +8.7002e-01  3.79e-01  2.71e-04  4.70e-02  1.12e-04  7.72e-04  3.11e-01  
 11  +4.8754e-01  +8.3530e-01  3.48e-01  2.31e-04  4.00e-02  8.33e-05  6.70e-04  3.35e-01  
 12  +4.8362e-01  +7.9304e-01  3.09e-01  2.19e-04  3.79e-02  5.02e-05  6.49e-04  2.72e-01  
 13  +4.7158e-01  +7.1200e-01  2.40e-01  1.43e-04  2.47e-02  3.64e-05  4.43e-04  4.31e-01  
 14  +4.5777e-01  +6.2913e-01  1.71e-01  9.36e-05  1.61e-02  1.62e-05  3.06e-04  6.52e-01  
 15  +4.4012e-01  +5.3440e-01  9.43e-02  4.65e-05  7.95e-03  7.68e-06  1.63e-04  6.46e-01  
 16  +4.3042e-01  +4.8691e-01  5.65e-02  2.64e-05  4.52e-03  4.62e-06  9.63e-05  5.03e-01  
 17  +4.2709e-01  +4.7103e-01  4.39e-02  1.99e-05  3.39e-03  3.75e-06  7.31e-05  3.63e-01  
 18  +4.2551e-01  +4.6325e-01  3.77e-02  1.67e-05  2.86e-03  3.37e-06  6.18e-05  3.89e-01  
 19  +4.2231e-01  +4.4891e-01  2.66e-02  1.16e-05  1.97e-03  2.43e-06  4.34e-05  4.32e-01  
 20  +4.2094e-01  +4.4170e-01  2.08e-02  8.97e-06  1.53e-03  2.02e-06  3.38e-05  7.12e-01  
 21  +4.1627e-01  +4.2234e-01  6.07e-03  2.59e-06  4.41e-04  5.82e-07  1.00e-05  7.74e-01  
 22  +4.1497e-01  +4.1691e-01  1.95e-03  8.26e-07  1.41e-04  1.87e-07  3.23e-06  6.94e-01  
 23  +4.1458e-01  +4.1533e-01  7.49e-04  3.17e-07  5.41e-05  7.21e-08  1.24e-06  6.98e-01  
 24  +4.1435e-01  +4.1439e-01  3.37e-05  1.43e-08  2.44e-06  3.26e-09  5.62e-08  9.75e-01  
 25  +4.1434e-01  +4.1434e-01  3.39e-07  1.43e-10  2.45e-08  3.27e-11  5.64e-10  9.90e-01  
 26  +4.1434e-01  +4.1434e-01  3.42e-09  1.45e-12  2.47e-10  3.30e-13  5.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 171.723ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:37 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:37 PM: Optimal value: 4.143e-01
(CVXPY) Sep 20 07:59:37 PM: Compilation took 4.163e-02 seconds
(CVXPY) Sep 20 07:59:37 PM: Solver (including time spent in interface) took 1.811e-01 seconds
Iteration: 28, Objective: 0.4143
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:37 PM: Your problem has 2799 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:37 PM: Finished problem compilation (took 4.891e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2799
  constraints   = 5299
  nnz(P)        = 0
  nnz(A)        = 52222
  cones (total) = 1
    : Nonnegative = 1,  numel = 5299

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.80e-01  8.47e+01  1.00e+00  1.00e+00   ------   
  1  +5.7746e-01  +5.4393e+02  5.43e+02  4.36e-01  5.38e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2929e-01  +5.9215e+01  5.87e+01  1.60e-01  2.48e+01  1.68e-02  2.67e-01  9.63e-01  
  3  +5.0801e-01  +1.5357e+01  1.48e+01  1.02e-01  1.60e+01  4.74e-05  2.40e-01  3.60e-01  
  4  +5.0071e-01  +1.4008e+00  9.00e-01  9.04e-03  1.51e+00  6.96e-06  1.04e-01  8.62e-01  
  5  +5.0071e-01  +1.4306e+00  9.30e-01  8.67e-03  1.46e+00  1.99e-05  4.72e-02  7.02e-01  
  6  +5.0025e-01  +1.0778e+00  5.78e-01  1.37e-03  2.39e-01  1.05e-04  3.93e-03  9.48e-01  
  7  +4.9976e-01  +9.9753e-01  4.98e-01  1.01e-03  1.75e-01  7.62e-05  2.87e-03  5.43e-01  
  8  +4.9735e-01  +9.5196e-01  4.55e-01  3.56e-04  6.20e-02  1.85e-04  9.83e-04  6.88e-01  
  9  +4.9390e-01  +9.1790e-01  4.24e-01  3.05e-04  5.30e-02  1.46e-04  8.56e-04  2.92e-01  
 10  +4.8894e-01  +8.4859e-01  3.60e-01  2.56e-04  4.44e-02  6.14e-05  7.41e-04  5.33e-01  
 11  +4.8623e-01  +8.2875e-01  3.43e-01  2.27e-04  3.92e-02  5.63e-05  6.62e-04  2.01e-01  
 12  +4.7652e-01  +7.3785e-01  2.61e-01  1.82e-04  3.13e-02  9.45e-06  5.58e-04  8.53e-01  
 13  +4.5564e-01  +6.1660e-01  1.61e-01  8.55e-05  1.47e-02  7.14e-06  2.80e-04  5.62e-01  
 14  +4.4349e-01  +5.5332e-01  1.10e-01  5.51e-05  9.42e-03  5.62e-06  1.90e-04  4.60e-01  
 15  +4.2998e-01  +4.8585e-01  5.59e-02  2.62e-05  4.48e-03  3.52e-06  9.57e-05  6.68e-01  
 16  +4.2670e-01  +4.7035e-01  4.37e-02  1.98e-05  3.39e-03  3.07e-06  7.30e-05  3.88e-01  
 17  +4.2560e-01  +4.6482e-01  3.92e-02  1.76e-05  3.00e-03  3.06e-06  6.48e-05  3.51e-01  
 18  +4.2145e-01  +4.4620e-01  2.48e-02  1.08e-05  1.84e-03  2.11e-06  4.08e-05  5.94e-01  
 19  +4.2076e-01  +4.4255e-01  2.18e-02  9.51e-06  1.62e-03  1.97e-06  3.59e-05  4.46e-01  
 20  +4.1588e-01  +4.2192e-01  6.05e-03  2.60e-06  4.43e-04  5.49e-07  1.01e-05  7.89e-01  
 21  +4.1438e-01  +4.1565e-01  1.27e-03  5.42e-07  9.24e-05  1.18e-07  2.14e-06  8.77e-01  
 22  +4.1397e-01  +4.1404e-01  6.54e-05  2.78e-08  4.75e-06  6.19e-09  1.11e-07  9.84e-01  
 23  +4.1395e-01  +4.1395e-01  6.63e-07  2.82e-10  4.81e-08  6.27e-11  1.12e-09  9.90e-01  
 24  +4.1395e-01  +4.1395e-01  6.63e-09  2.82e-12  4.81e-10  6.28e-13  1.12e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 182.301ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:38 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:38 PM: Optimal value: 4.140e-01
(CVXPY) Sep 20 07:59:38 PM: Compilation took 4.891e-02 seconds
(CVXPY) Sep 20 07:59:38 PM: Solver (including time spent in interface) took 1.925e-01 seconds
Iteration: 29, Objective: 0.4140
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:38 PM: Your problem has 2809 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:38 PM: Finished problem compilation (took 4.279e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2809
  constraints   = 5309
  nnz(P)        = 0
  nnz(A)        = 52425
  cones (total) = 1
    : Nonnegative = 1,  numel = 5309

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.80e-01  8.47e+01  1.00e+00  1.00e+00   ------   
  1  +5.7746e-01  +5.4376e+02  5.43e+02  4.36e-01  5.37e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2924e-01  +5.9132e+01  5.86e+01  1.60e-01  2.47e+01  1.68e-02  2.66e-01  9.64e-01  
  3  +5.0799e-01  +1.5328e+01  1.48e+01  1.02e-01  1.60e+01  4.73e-05  2.39e-01  3.62e-01  
  4  +5.0070e-01  +1.3928e+00  8.92e-01  8.97e-03  1.50e+00  6.96e-06  1.03e-01  8.66e-01  
  5  +5.0077e-01  +1.5141e+00  1.01e+00  9.22e-03  1.56e+00  2.21e-05  4.58e-02  7.26e-01  
  6  +5.0030e-01  +1.1323e+00  6.32e-01  1.50e-03  2.61e-01  1.06e-04  4.29e-03  9.32e-01  
  7  +4.9979e-01  +1.0222e+00  5.22e-01  1.09e-03  1.90e-01  6.69e-05  3.12e-03  5.69e-01  
  8  +4.9768e-01  +9.7891e-01  4.81e-01  4.11e-04  7.16e-02  1.55e-04  1.14e-03  6.63e-01  
  9  +4.9401e-01  +9.2578e-01  4.32e-01  3.49e-04  6.07e-02  1.23e-04  9.83e-04  2.44e-01  
 10  +4.9030e-01  +8.8257e-01  3.92e-01  2.82e-04  4.88e-02  9.78e-05  8.05e-04  3.59e-01  
 11  +4.8717e-01  +8.4620e-01  3.59e-01  2.48e-04  4.29e-02  6.35e-05  7.22e-04  3.88e-01  
 12  +4.8345e-01  +8.0506e-01  3.22e-01  2.35e-04  4.06e-02  3.95e-05  6.96e-04  3.05e-01  
 13  +4.7125e-01  +7.2250e-01  2.51e-01  1.52e-04  2.62e-02  3.04e-05  4.71e-04  4.22e-01  
 14  +4.5088e-01  +5.9830e-01  1.47e-01  7.82e-05  1.34e-02  1.35e-05  2.61e-04  6.22e-01  
 15  +4.4251e-01  +5.5434e-01  1.12e-01  5.68e-05  9.70e-03  9.86e-06  1.96e-04  3.75e-01  
 16  +4.2978e-01  +4.8924e-01  5.95e-02  2.82e-05  4.81e-03  5.12e-06  1.03e-04  6.55e-01  
 17  +4.2605e-01  +4.7111e-01  4.51e-02  2.07e-05  3.52e-03  4.02e-06  7.61e-05  4.39e-01  
 18  +4.2463e-01  +4.6398e-01  3.94e-02  1.77e-05  3.02e-03  3.63e-06  6.54e-05  4.06e-01  
 19  +4.2074e-01  +4.4622e-01  2.55e-02  1.12e-05  1.91e-03  2.41e-06  4.22e-05  6.33e-01  
 20  +4.2000e-01  +4.4231e-01  2.23e-02  9.79e-06  1.67e-03  2.15e-06  3.70e-05  4.52e-01  
 21  +4.1509e-01  +4.2154e-01  6.45e-03  2.78e-06  4.74e-04  6.11e-07  1.09e-05  7.65e-01  
 22  +4.1351e-01  +4.1491e-01  1.40e-03  5.99e-07  1.02e-04  1.33e-07  2.37e-06  8.69e-01  
 23  +4.1308e-01  +4.1316e-01  8.08e-05  3.45e-08  5.88e-06  7.67e-09  1.38e-07  9.71e-01  
 24  +4.1305e-01  +4.1305e-01  8.22e-07  3.51e-10  5.98e-08  7.80e-11  1.40e-09  9.90e-01  
 25  +4.1305e-01  +4.1305e-01  8.23e-09  3.51e-12  5.99e-10  7.81e-13  1.40e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 213.2263ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:38 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:38 PM: Optimal value: 4.131e-01
(CVXPY) Sep 20 07:59:38 PM: Compilation took 4.279e-02 seconds
(CVXPY) Sep 20 07:59:38 PM: Solver (including time spent in interface) took 2.249e-01 seconds
Iteration: 30, Objective: 0.4131
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:38 PM: Your problem has 2819 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:38 PM: Finished problem compilation (took 4.631e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2819
  constraints   = 5319
  nnz(P)        = 0
  nnz(A)        = 52679
  cones (total) = 1
    : Nonnegative = 1,  numel = 5319

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.81e-01  8.46e+01  1.00e+00  1.00e+00   ------   
  1  +5.7736e-01  +5.4385e+02  5.43e+02  4.37e-01  5.36e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.2918e-01  +5.9088e+01  5.86e+01  1.60e-01  2.46e+01  1.68e-02  2.66e-01  9.64e-01  
  3  +5.0799e-01  +1.5322e+01  1.48e+01  1.02e-01  1.59e+01  4.74e-05  2.39e-01  3.64e-01  
  4  +5.0070e-01  +1.3950e+00  8.94e-01  9.00e-03  1.50e+00  6.97e-06  1.03e-01  8.66e-01  
  5  +5.0078e-01  +1.5263e+00  1.03e+00  9.20e-03  1.55e+00  2.32e-05  4.38e-02  7.42e-01  
  6  +5.0036e-01  +1.2097e+00  7.09e-01  1.69e-03  2.94e-01  1.05e-04  4.82e-03  9.14e-01  
  7  +4.9985e-01  +1.0494e+00  5.50e-01  1.21e-03  2.10e-01  5.42e-05  3.46e-03  6.01e-01  
  8  +4.9752e-01  +9.9923e-01  5.02e-01  4.00e-04  6.97e-02  1.42e-04  1.10e-03  7.04e-01  
  9  +4.9406e-01  +9.5593e-01  4.62e-01  3.46e-04  6.01e-02  1.13e-04  9.69e-04  2.65e-01  
 10  +4.9000e-01  +8.9299e-01  4.03e-01  2.91e-04  5.04e-02  6.93e-05  8.34e-04  4.06e-01  
 11  +4.8687e-01  +8.5177e-01  3.65e-01  2.60e-04  4.48e-02  4.65e-05  7.58e-04  3.65e-01  
 12  +4.8234e-01  +7.9992e-01  3.18e-01  2.37e-04  4.08e-02  2.55e-05  7.08e-04  4.75e-01  
 13  +4.6876e-01  +7.0940e-01  2.41e-01  1.45e-04  2.49e-02  2.03e-05  4.54e-04  4.47e-01  
 14  +4.4844e-01  +5.8782e-01  1.39e-01  7.37e-05  1.26e-02  1.04e-05  2.49e-04  5.49e-01  
 15  +4.3687e-01  +5.2702e-01  9.01e-02  4.50e-05  7.67e-03  6.71e-06  1.59e-04  4.99e-01  
 16  +4.3132e-01  +4.9901e-01  6.77e-02  3.25e-05  5.55e-03  5.23e-06  1.18e-04  3.77e-01  
 17  +4.2571e-01  +4.7168e-01  4.60e-02  2.12e-05  3.61e-03  3.73e-06  7.82e-05  4.52e-01  
 18  +4.2228e-01  +4.5516e-01  3.29e-02  1.48e-05  2.51e-03  2.84e-06  5.52e-05  5.74e-01  
 19  +4.1963e-01  +4.4299e-01  2.34e-02  1.03e-05  1.75e-03  2.09e-06  3.90e-05  4.43e-01  
 20  +4.1813e-01  +4.3539e-01  1.73e-02  7.54e-06  1.28e-03  1.64e-06  2.88e-05  7.27e-01  
 21  +4.1460e-01  +4.2071e-01  6.11e-03  2.64e-06  4.49e-04  5.75e-07  1.03e-05  6.88e-01  
 22  +4.1343e-01  +4.1567e-01  2.25e-03  9.65e-07  1.64e-04  2.16e-07  3.81e-06  9.90e-01  
 23  +4.1270e-01  +4.1283e-01  1.32e-04  5.64e-08  9.60e-06  1.26e-08  2.25e-07  9.45e-01  
 24  +4.1265e-01  +4.1265e-01  1.36e-06  5.81e-10  9.90e-08  1.30e-10  2.32e-09  9.90e-01  
 25  +4.1265e-01  +4.1265e-01  1.36e-08  5.84e-12  9.94e-10  1.30e-12  2.33e-11  9.90e-01  
 26  +4.1265e-01  +4.1265e-01  1.39e-10  5.97e-14  1.02e-11  1.33e-14  2.38e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 250.0607ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:39 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:39 PM: Optimal value: 4.127e-01
(CVXPY) Sep 20 07:59:39 PM: Compilation took 4.631e-02 seconds
(CVXPY) Sep 20 07:59:39 PM: Solver (including time spent in interface) took 2.621e-01 seconds
Iteration: 31, Objective: 0.4127
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:39 PM: Your problem has 2822 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:39 PM: Finished problem compilation (took 4.754e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2822
  constraints   = 5322
  nnz(P)        = 0
  nnz(A)        = 52786
  cones (total) = 1
    : Nonnegative = 1,  numel = 5322

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.81e-01  8.46e+01  1.00e+00  1.00e+00   ------   
  1  +5.7735e-01  +5.4387e+02  5.43e+02  4.37e-01  5.36e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.2918e-01  +5.9081e+01  5.86e+01  1.60e-01  2.46e+01  1.68e-02  2.66e-01  9.64e-01  
  3  +5.0799e-01  +1.5321e+01  1.48e+01  1.02e-01  1.59e+01  4.74e-05  2.39e-01  3.64e-01  
  4  +5.0070e-01  +1.3948e+00  8.94e-01  9.00e-03  1.50e+00  6.98e-06  1.03e-01  8.66e-01  
  5  +5.0078e-01  +1.5308e+00  1.03e+00  9.26e-03  1.56e+00  2.30e-05  4.43e-02  7.37e-01  
  6  +5.0035e-01  +1.2056e+00  7.05e-01  1.69e-03  2.93e-01  1.05e-04  4.81e-03  9.13e-01  
  7  +4.9984e-01  +1.0493e+00  5.49e-01  1.21e-03  2.10e-01  5.51e-05  3.46e-03  5.97e-01  
  8  +4.9751e-01  +9.9906e-01  5.02e-01  4.01e-04  6.99e-02  1.44e-04  1.11e-03  7.04e-01  
  9  +4.9400e-01  +9.5613e-01  4.62e-01  3.44e-04  5.98e-02  1.14e-04  9.65e-04  2.78e-01  
 10  +4.9010e-01  +8.9221e-01  4.02e-01  2.93e-04  5.06e-02  6.50e-05  8.39e-04  4.33e-01  
 11  +4.8691e-01  +8.5294e-01  3.66e-01  2.58e-04  4.46e-02  4.53e-05  7.54e-04  3.71e-01  
 12  +4.8189e-01  +7.9595e-01  3.14e-01  2.33e-04  4.02e-02  2.36e-05  6.98e-04  5.14e-01  
 13  +4.6848e-01  +7.0776e-01  2.39e-01  1.44e-04  2.48e-02  1.91e-05  4.52e-04  4.35e-01  
 14  +4.4892e-01  +5.9155e-01  1.43e-01  7.56e-05  1.29e-02  1.03e-05  2.55e-04  5.28e-01  
 15  +4.3644e-01  +5.2640e-01  9.00e-02  4.46e-05  7.61e-03  6.52e-06  1.58e-04  5.08e-01  
 16  +4.3081e-01  +4.9876e-01  6.79e-02  3.23e-05  5.51e-03  5.14e-06  1.17e-04  3.72e-01  
 17  +4.2558e-01  +4.7364e-01  4.81e-02  2.20e-05  3.75e-03  3.84e-06  8.13e-05  4.42e-01  
 18  +4.2178e-01  +4.5474e-01  3.30e-02  1.47e-05  2.50e-03  2.95e-06  5.50e-05  6.96e-01  
 19  +4.1854e-01  +4.4020e-01  2.17e-02  9.46e-06  1.61e-03  2.00e-06  3.61e-05  5.49e-01  
 20  +4.1763e-01  +4.3591e-01  1.83e-02  7.96e-06  1.36e-03  1.72e-06  3.05e-05  3.68e-01  
 21  +4.1426e-01  +4.2164e-01  7.38e-03  3.19e-06  5.43e-04  6.90e-07  1.25e-05  6.39e-01  
 22  +4.1295e-01  +4.1614e-01  3.20e-03  1.37e-06  2.33e-04  3.02e-07  5.43e-06  7.07e-01  
 23  +4.1202e-01  +4.1237e-01  3.53e-04  1.51e-07  2.57e-05  3.32e-08  6.03e-07  8.97e-01  
 24  +4.1190e-01  +4.1190e-01  3.68e-06  1.57e-09  2.68e-07  3.47e-10  6.30e-09  9.90e-01  
 25  +4.1190e-01  +4.1190e-01  3.69e-08  1.58e-11  2.68e-09  3.47e-12  6.31e-11  9.90e-01  
 26  +4.1190e-01  +4.1190e-01  3.74e-10  1.60e-13  2.72e-11  3.53e-14  6.42e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 239.8369ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:39 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:39 PM: Optimal value: 4.119e-01
(CVXPY) Sep 20 07:59:39 PM: Compilation took 4.754e-02 seconds
(CVXPY) Sep 20 07:59:39 PM: Solver (including time spent in interface) took 2.508e-01 seconds
Iteration: 32, Objective: 0.4119
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:39 PM: Your problem has 2832 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:39 PM: Finished problem compilation (took 4.962e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2832
  constraints   = 5332
  nnz(P)        = 0
  nnz(A)        = 52923
  cones (total) = 1
    : Nonnegative = 1,  numel = 5332

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.81e-01  8.45e+01  1.00e+00  1.00e+00   ------   
  1  +5.7729e-01  +5.4392e+02  5.43e+02  4.37e-01  5.35e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2916e-01  +5.9075e+01  5.85e+01  1.60e-01  2.45e+01  1.69e-02  2.66e-01  9.65e-01  
  3  +5.0798e-01  +1.5319e+01  1.48e+01  1.02e-01  1.59e+01  4.75e-05  2.39e-01  3.65e-01  
  4  +5.0070e-01  +1.3944e+00  8.94e-01  9.01e-03  1.50e+00  6.98e-06  1.03e-01  8.67e-01  
  5  +5.0079e-01  +1.5401e+00  1.04e+00  9.40e-03  1.58e+00  2.24e-05  4.54e-02  7.19e-01  
  6  +5.0037e-01  +1.2217e+00  7.21e-01  1.74e-03  3.03e-01  1.04e-04  4.98e-03  9.10e-01  
  7  +4.9986e-01  +1.0613e+00  5.61e-01  1.26e-03  2.18e-01  5.38e-05  3.62e-03  5.88e-01  
  8  +4.9767e-01  +1.0122e+00  5.14e-01  4.30e-04  7.48e-02  1.38e-04  1.19e-03  6.94e-01  
  9  +4.9361e-01  +9.4870e-01  4.55e-01  3.68e-04  6.38e-02  1.02e-04  1.04e-03  2.57e-01  
 10  +4.9010e-01  +9.0123e-01  4.11e-01  2.95e-04  5.11e-02  7.74e-05  8.47e-04  4.02e-01  
 11  +4.8636e-01  +8.5498e-01  3.69e-01  2.58e-04  4.46e-02  5.40e-05  7.57e-04  3.29e-01  
 12  +4.8277e-01  +8.1294e-01  3.30e-01  2.45e-04  4.23e-02  3.48e-05  7.31e-04  2.94e-01  
 13  +4.6256e-01  +6.7314e-01  2.11e-01  1.16e-04  1.99e-02  2.24e-05  3.71e-04  6.30e-01  
 14  +4.4992e-01  +6.0020e-01  1.50e-01  7.93e-05  1.35e-02  1.46e-05  2.66e-04  3.49e-01  
 15  +4.3648e-01  +5.2817e-01  9.17e-02  4.55e-05  7.75e-03  8.29e-06  1.62e-04  5.01e-01  
 16  +4.3140e-01  +5.0304e-01  7.16e-02  3.41e-05  5.81e-03  6.55e-06  1.24e-04  3.51e-01  
 17  +4.2527e-01  +4.7328e-01  4.80e-02  2.18e-05  3.71e-03  4.47e-06  8.08e-05  5.35e-01  
 18  +4.2236e-01  +4.5824e-01  3.59e-02  1.60e-05  2.71e-03  3.45e-06  5.97e-05  6.64e-01  
 19  +4.1862e-01  +4.4142e-01  2.28e-02  9.93e-06  1.69e-03  2.22e-06  3.79e-05  6.24e-01  
 20  +4.1798e-01  +4.3844e-01  2.05e-02  8.90e-06  1.51e-03  1.99e-06  3.41e-05  2.42e-01  
 21  +4.1408e-01  +4.2181e-01  7.74e-03  3.33e-06  5.67e-04  7.47e-07  1.31e-05  6.97e-01  
 22  +4.1281e-01  +4.1650e-01  3.69e-03  1.58e-06  2.68e-04  3.57e-07  6.25e-06  6.73e-01  
 23  +4.1174e-01  +4.1217e-01  4.29e-04  1.83e-07  3.11e-05  4.14e-08  7.30e-07  8.88e-01  
 24  +4.1160e-01  +4.1161e-01  4.67e-06  1.99e-09  3.38e-07  4.50e-10  7.96e-09  9.89e-01  
 25  +4.1160e-01  +4.1160e-01  4.70e-08  2.00e-11  3.40e-09  4.52e-12  8.00e-11  9.90e-01  
 26  +4.1160e-01  +4.1160e-01  4.77e-10  2.03e-13  3.45e-11  4.60e-14  8.14e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 185.9299ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:40 PM: Optimal value: 4.116e-01
(CVXPY) Sep 20 07:59:40 PM: Compilation took 4.962e-02 seconds
(CVXPY) Sep 20 07:59:40 PM: Solver (including time spent in interface) took 1.961e-01 seconds
Iteration: 33, Objective: 0.4116
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:40 PM: Your problem has 2842 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:40 PM: Finished problem compilation (took 4.412e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2842
  constraints   = 5342
  nnz(P)        = 0
  nnz(A)        = 53216
  cones (total) = 1
    : Nonnegative = 1,  numel = 5342

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.81e-01  8.44e+01  1.00e+00  1.00e+00   ------   
  1  +5.7721e-01  +5.4392e+02  5.43e+02  4.37e-01  5.34e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2910e-01  +5.9003e+01  5.85e+01  1.60e-01  2.45e+01  1.69e-02  2.66e-01  9.65e-01  
  3  +5.0797e-01  +1.5306e+01  1.48e+01  1.02e-01  1.58e+01  4.75e-05  2.39e-01  3.66e-01  
  4  +5.0070e-01  +1.3938e+00  8.93e-01  9.01e-03  1.50e+00  6.99e-06  1.02e-01  8.68e-01  
  5  +5.0094e-01  +1.7391e+00  1.24e+00  1.07e-02  1.81e+00  2.64e-05  4.62e-02  7.43e-01  
  6  +5.0039e-01  +1.2587e+00  7.58e-01  1.82e-03  3.15e-01  1.09e-04  5.18e-03  9.02e-01  
  7  +4.9984e-01  +1.0625e+00  5.63e-01  1.26e-03  2.19e-01  4.71e-05  3.64e-03  6.51e-01  
  8  +4.9746e-01  +1.0097e+00  5.12e-01  4.21e-04  7.32e-02  1.22e-04  1.17e-03  7.03e-01  
  9  +4.9354e-01  +9.5735e-01  4.64e-01  3.62e-04  6.26e-02  9.13e-05  1.02e-03  2.91e-01  
 10  +4.8951e-01  +9.0651e-01  4.17e-01  2.86e-04  4.95e-02  7.17e-05  8.23e-04  3.95e-01  
 11  +4.8614e-01  +8.6523e-01  3.79e-01  2.58e-04  4.44e-02  5.24e-05  7.54e-04  2.87e-01  
 12  +4.8106e-01  +8.0497e-01  3.24e-01  2.37e-04  4.08e-02  2.78e-05  7.13e-04  4.15e-01  
 13  +4.6563e-01  +6.9993e-01  2.34e-01  1.37e-04  2.35e-02  2.09e-05  4.36e-04  4.76e-01  
 14  +4.4900e-01  +5.9936e-01  1.50e-01  8.04e-05  1.37e-02  1.21e-05  2.72e-04  4.49e-01  
 15  +4.3666e-01  +5.3256e-01  9.59e-02  4.80e-05  8.17e-03  7.52e-06  1.71e-04  4.95e-01  
 16  +4.3104e-01  +5.0453e-01  7.35e-02  3.53e-05  6.00e-03  5.89e-06  1.28e-04  3.35e-01  
 17  +4.2421e-01  +4.7124e-01  4.70e-02  2.17e-05  3.69e-03  3.85e-06  8.11e-05  4.79e-01  
 18  +4.1900e-01  +4.4657e-01  2.76e-02  1.23e-05  2.10e-03  2.32e-06  4.72e-05  5.03e-01  
 19  +4.1683e-01  +4.3622e-01  1.94e-02  8.51e-06  1.44e-03  1.69e-06  3.30e-05  4.92e-01  
 20  +4.1617e-01  +4.3302e-01  1.69e-02  7.37e-06  1.25e-03  1.49e-06  2.86e-05  2.55e-01  
 21  +4.1333e-01  +4.2064e-01  7.31e-03  3.16e-06  5.37e-04  6.55e-07  1.25e-05  6.30e-01  
 22  +4.1221e-01  +4.1576e-01  3.55e-03  1.53e-06  2.59e-04  3.24e-07  6.11e-06  6.68e-01  
 23  +4.1119e-01  +4.1157e-01  3.81e-04  1.63e-07  2.77e-05  3.46e-08  6.60e-07  9.11e-01  
 24  +4.1107e-01  +4.1107e-01  6.21e-06  2.66e-09  4.52e-07  5.64e-10  1.08e-08  9.85e-01  
 25  +4.1107e-01  +4.1107e-01  6.47e-08  2.77e-11  4.71e-09  5.88e-12  1.12e-10  9.90e-01  
 26  +4.1107e-01  +4.1107e-01  6.58e-10  2.82e-13  4.79e-11  6.00e-14  1.14e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 236.049ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:40 PM: Optimal value: 4.111e-01
(CVXPY) Sep 20 07:59:40 PM: Compilation took 4.412e-02 seconds
(CVXPY) Sep 20 07:59:40 PM: Solver (including time spent in interface) took 2.458e-01 seconds
Iteration: 34, Objective: 0.4111
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:40 PM: Your problem has 2852 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:40 PM: Finished problem compilation (took 3.669e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2852
  constraints   = 5352
  nnz(P)        = 0
  nnz(A)        = 53550
  cones (total) = 1
    : Nonnegative = 1,  numel = 5352

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.81e-01  8.44e+01  1.00e+00  1.00e+00   ------   
  1  +5.7717e-01  +5.4383e+02  5.43e+02  4.37e-01  5.34e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2907e-01  +5.8968e+01  5.84e+01  1.60e-01  2.44e+01  1.69e-02  2.65e-01  9.66e-01  
  3  +5.0796e-01  +1.5288e+01  1.48e+01  1.02e-01  1.58e+01  4.75e-05  2.38e-01  3.67e-01  
  4  +5.0070e-01  +1.3883e+00  8.88e-01  8.96e-03  1.49e+00  7.00e-06  1.02e-01  8.71e-01  
  5  +5.0104e-01  +1.8818e+00  1.38e+00  1.09e-02  1.84e+00  3.31e-05  4.12e-02  8.04e-01  
  6  +5.0054e-01  +1.4638e+00  9.63e-01  2.30e-03  3.98e-01  1.11e-04  6.54e-03  8.53e-01  
  7  +4.9995e-01  +1.0338e+00  5.34e-01  1.40e-03  2.43e-01  9.82e-07  4.10e-03  8.55e-01  
  8  +4.9785e-01  +9.9187e-01  4.94e-01  4.21e-04  7.32e-02  3.53e-06  1.17e-03  7.31e-01  
  9  +4.9369e-01  +9.3646e-01  4.43e-01  3.65e-04  6.32e-02  7.63e-06  1.03e-03  2.69e-01  
 10  +4.8977e-01  +8.9202e-01  4.02e-01  2.91e-04  5.02e-02  1.26e-05  8.36e-04  4.00e-01  
 11  +4.8656e-01  +8.5617e-01  3.70e-01  2.62e-04  4.51e-02  1.50e-05  7.67e-04  3.12e-01  
 12  +4.8340e-01  +8.2310e-01  3.40e-01  2.51e-04  4.31e-02  1.43e-05  7.44e-04  1.81e-01  
 13  +4.6528e-01  +6.9413e-01  2.29e-01  1.31e-04  2.24e-02  1.20e-05  4.14e-04  5.91e-01  
 14  +4.5039e-01  +6.0626e-01  1.56e-01  8.37e-05  1.43e-02  8.27e-06  2.82e-04  4.39e-01  
 15  +4.3828e-01  +5.4129e-01  1.03e-01  5.18e-05  8.81e-03  6.12e-06  1.83e-04  5.14e-01  
 16  +4.3081e-01  +5.0412e-01  7.33e-02  3.49e-05  5.93e-03  4.83e-06  1.27e-04  4.47e-01  
 17  +4.2439e-01  +4.7311e-01  4.87e-02  2.24e-05  3.81e-03  3.49e-06  8.38e-05  4.93e-01  
 18  +4.1923e-01  +4.4897e-01  2.97e-02  1.33e-05  2.26e-03  2.24e-06  5.11e-05  4.88e-01  
 19  +4.1681e-01  +4.3750e-01  2.07e-02  9.08e-06  1.54e-03  1.68e-06  3.53e-05  5.11e-01  
 20  +4.1632e-01  +4.3512e-01  1.88e-02  8.24e-06  1.40e-03  1.56e-06  3.21e-05  1.94e-01  
 21  +4.1258e-01  +4.1882e-01  6.24e-03  2.70e-06  4.58e-04  5.41e-07  1.08e-05  7.79e-01  
 22  +4.1104e-01  +4.1235e-01  1.31e-03  5.62e-07  9.53e-05  1.17e-07  2.28e-06  8.76e-01  
 23  +4.1064e-01  +4.1077e-01  1.27e-04  5.44e-08  9.23e-06  1.15e-08  2.23e-07  9.39e-01  
 24  +4.1060e-01  +4.1060e-01  1.40e-06  6.00e-10  1.02e-07  1.27e-10  2.46e-09  9.89e-01  
 25  +4.1060e-01  +4.1060e-01  1.40e-08  6.00e-12  1.02e-09  1.27e-12  2.46e-11  9.90e-01  
 26  +4.1060e-01  +4.1060e-01  1.47e-10  6.29e-14  1.07e-11  1.34e-14  2.60e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 209.9064ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:41 PM: Optimal value: 4.106e-01
(CVXPY) Sep 20 07:59:41 PM: Compilation took 3.669e-02 seconds
(CVXPY) Sep 20 07:59:41 PM: Solver (including time spent in interface) took 2.187e-01 seconds
Iteration: 35, Objective: 0.4106
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:41 PM: Your problem has 2862 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:41 PM: Finished problem compilation (took 4.555e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2862
  constraints   = 5362
  nnz(P)        = 0
  nnz(A)        = 53796
  cones (total) = 1
    : Nonnegative = 1,  numel = 5362

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5014e+03  2.50e+03  9.81e-01  8.43e+01  1.00e+00  1.00e+00   ------   
  1  +5.7701e-01  +5.4387e+02  5.43e+02  4.38e-01  5.33e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.2899e-01  +5.8899e+01  5.84e+01  1.59e-01  2.43e+01  1.69e-02  2.65e-01  9.67e-01  
  3  +5.0795e-01  +1.5272e+01  1.48e+01  1.01e-01  1.58e+01  4.77e-05  2.37e-01  3.70e-01  
  4  +5.0069e-01  +1.3846e+00  8.84e-01  8.93e-03  1.48e+00  7.02e-06  1.01e-01  8.74e-01  
  5  +5.0175e-01  +2.8072e+00  2.31e+00  1.39e-02  2.36e+00  5.36e-05  4.28e-02  8.61e-01  
  6  +5.0047e-01  +1.5226e+00  1.02e+00  2.33e-03  4.03e-01  1.51e-04  6.58e-03  8.60e-01  
  7  +4.9994e-01  +1.0097e+00  5.10e-01  1.11e-03  1.93e-01  1.56e-06  3.18e-03  9.73e-01  
  8  +4.9827e-01  +9.7495e-01  4.77e-01  5.04e-04  8.75e-02  4.75e-06  1.40e-03  6.26e-01  
  9  +4.9377e-01  +9.0787e-01  4.14e-01  3.73e-04  6.45e-02  7.57e-06  1.05e-03  3.69e-01  
 10  +4.9072e-01  +8.8526e-01  3.95e-01  3.01e-04  5.20e-02  1.19e-05  8.59e-04  3.70e-01  
 11  +4.8650e-01  +8.4881e-01  3.62e-01  2.57e-04  4.43e-02  1.46e-05  7.49e-04  3.40e-01  
 12  +4.8335e-01  +8.2098e-01  3.38e-01  2.48e-04  4.27e-02  1.45e-05  7.33e-04  1.97e-01  
 13  +4.6799e-01  +7.1984e-01  2.52e-01  1.47e-04  2.51e-02  1.28e-05  4.56e-04  4.61e-01  
 14  +4.5136e-01  +6.2004e-01  1.69e-01  9.08e-05  1.55e-02  8.52e-06  3.02e-04  4.30e-01  
 15  +4.3978e-01  +5.5790e-01  1.18e-01  6.01e-05  1.02e-02  6.69e-06  2.10e-04  4.65e-01  
 16  +4.2753e-01  +4.9528e-01  6.77e-02  3.23e-05  5.48e-03  4.47e-06  1.18e-04  6.15e-01  
 17  +4.2226e-01  +4.6996e-01  4.77e-02  2.21e-05  3.74e-03  3.44e-06  8.28e-05  4.64e-01  
 18  +4.1531e-01  +4.3769e-01  2.24e-02  1.00e-05  1.70e-03  1.65e-06  3.91e-05  5.77e-01  
 19  +4.1315e-01  +4.2771e-01  1.46e-02  6.41e-06  1.09e-03  1.15e-06  2.53e-05  5.28e-01  
 20  +4.1042e-01  +4.1523e-01  4.81e-03  2.10e-06  3.55e-04  4.51e-07  8.43e-06  9.90e-01  
 21  +4.0899e-01  +4.0953e-01  5.39e-04  2.34e-07  3.97e-05  4.99e-08  9.57e-07  9.22e-01  
 22  +4.0881e-01  +4.0882e-01  1.85e-05  8.02e-09  1.36e-06  1.71e-09  3.29e-08  9.68e-01  
 23  +4.0880e-01  +4.0880e-01  1.86e-07  8.07e-11  1.37e-08  1.72e-11  3.31e-10  9.90e-01  
 24  +4.0880e-01  +4.0880e-01  1.91e-09  8.27e-13  1.40e-10  1.77e-13  3.40e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 218.5076ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:41 PM: Optimal value: 4.088e-01
(CVXPY) Sep 20 07:59:41 PM: Compilation took 4.555e-02 seconds
(CVXPY) Sep 20 07:59:41 PM: Solver (including time spent in interface) took 2.289e-01 seconds
Iteration: 36, Objective: 0.4088
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:41 PM: Your problem has 2869 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:41 PM: Finished problem compilation (took 3.592e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2869
  constraints   = 5369
  nnz(P)        = 0
  nnz(A)        = 53949
  cones (total) = 1
    : Nonnegative = 1,  numel = 5369

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5014e+03  2.50e+03  9.81e-01  8.43e+01  1.00e+00  1.00e+00   ------   
  1  +5.7694e-01  +5.4393e+02  5.43e+02  4.38e-01  5.32e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2898e-01  +5.8911e+01  5.84e+01  1.59e-01  2.42e+01  1.69e-02  2.65e-01  9.67e-01  
  3  +5.0795e-01  +1.5274e+01  1.48e+01  1.01e-01  1.57e+01  4.77e-05  2.37e-01  3.70e-01  
  4  +5.0069e-01  +1.3840e+00  8.83e-01  8.93e-03  1.48e+00  7.03e-06  1.00e-01  8.74e-01  
  5  +5.0169e-01  +2.7232e+00  2.22e+00  1.40e-02  2.37e+00  5.00e-05  4.39e-02  8.45e-01  
  6  +5.0047e-01  +1.5140e+00  1.01e+00  2.33e-03  4.04e-01  1.48e-04  6.60e-03  8.60e-01  
  7  +4.9995e-01  +1.0154e+00  5.15e-01  1.15e-03  1.99e-01  1.51e-06  3.29e-03  9.65e-01  
  8  +4.9827e-01  +9.8028e-01  4.82e-01  5.05e-04  8.76e-02  4.60e-06  1.40e-03  6.33e-01  
  9  +4.9370e-01  +9.1073e-01  4.17e-01  3.80e-04  6.56e-02  7.48e-06  1.07e-03  3.62e-01  
 10  +4.9033e-01  +8.8666e-01  3.96e-01  2.97e-04  5.13e-02  1.19e-05  8.50e-04  3.84e-01  
 11  +4.8641e-01  +8.5061e-01  3.64e-01  2.60e-04  4.47e-02  1.48e-05  7.58e-04  3.45e-01  
 12  +4.8303e-01  +8.2018e-01  3.37e-01  2.50e-04  4.30e-02  1.47e-05  7.40e-04  2.18e-01  
 13  +4.6612e-01  +7.0851e-01  2.42e-01  1.39e-04  2.38e-02  1.26e-05  4.36e-04  4.91e-01  
 14  +4.5179e-01  +6.2377e-01  1.72e-01  9.28e-05  1.58e-02  8.88e-06  3.09e-04  3.78e-01  
 15  +4.3986e-01  +5.5915e-01  1.19e-01  6.10e-05  1.04e-02  6.67e-06  2.13e-04  4.43e-01  
 16  +4.2875e-01  +5.0187e-01  7.31e-02  3.51e-05  5.96e-03  4.88e-06  1.28e-04  6.11e-01  
 17  +4.2336e-01  +4.7570e-01  5.23e-02  2.44e-05  4.14e-03  3.75e-06  9.12e-05  4.28e-01  
 18  +4.1634e-01  +4.4265e-01  2.63e-02  1.19e-05  2.02e-03  1.96e-06  4.61e-05  5.75e-01  
 19  +4.1395e-01  +4.3179e-01  1.78e-02  7.91e-06  1.34e-03  1.37e-06  3.11e-05  3.78e-01  
 20  +4.1341e-01  +4.2899e-01  1.56e-02  6.90e-06  1.17e-03  1.24e-06  2.72e-05  2.67e-01  
 21  +4.1012e-01  +4.1437e-01  4.25e-03  1.86e-06  3.15e-04  3.55e-07  7.50e-06  8.16e-01  
 22  +4.0893e-01  +4.0936e-01  4.21e-04  1.84e-07  3.11e-05  3.58e-08  7.49e-07  9.24e-01  
 23  +4.0880e-01  +4.0881e-01  6.41e-06  2.79e-09  4.73e-07  5.50e-10  1.14e-08  9.87e-01  
 24  +4.0880e-01  +4.0880e-01  6.43e-08  2.80e-11  4.75e-09  5.52e-12  1.14e-10  9.90e-01  
 25  +4.0880e-01  +4.0880e-01  6.68e-10  2.91e-13  4.93e-11  5.73e-14  1.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 187.4363ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:42 PM: Optimal value: 4.088e-01
(CVXPY) Sep 20 07:59:42 PM: Compilation took 3.592e-02 seconds
(CVXPY) Sep 20 07:59:42 PM: Solver (including time spent in interface) took 1.978e-01 seconds
Iteration: 37, Objective: 0.4088
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:42 PM: Your problem has 2870 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:42 PM: Finished problem compilation (took 3.353e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2870
  constraints   = 5370
  nnz(P)        = 0
  nnz(A)        = 53964
  cones (total) = 1
    : Nonnegative = 1,  numel = 5370

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5014e+03  2.50e+03  9.81e-01  8.42e+01  1.00e+00  1.00e+00   ------   
  1  +5.7693e-01  +5.4393e+02  5.43e+02  4.38e-01  5.32e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2898e-01  +5.8910e+01  5.84e+01  1.59e-01  2.42e+01  1.69e-02  2.65e-01  9.68e-01  
  3  +5.0795e-01  +1.5273e+01  1.48e+01  1.01e-01  1.57e+01  4.77e-05  2.37e-01  3.70e-01  
  4  +5.0069e-01  +1.3839e+00  8.83e-01  8.93e-03  1.48e+00  7.03e-06  1.00e-01  8.74e-01  
  5  +5.0166e-01  +2.6932e+00  2.19e+00  1.40e-02  2.37e+00  4.90e-05  4.41e-02  8.42e-01  
  6  +5.0048e-01  +1.5164e+00  1.02e+00  2.34e-03  4.06e-01  1.46e-04  6.64e-03  8.59e-01  
  7  +4.9996e-01  +1.0200e+00  5.20e-01  1.18e-03  2.03e-01  1.48e-06  3.36e-03  9.57e-01  
  8  +4.9830e-01  +9.8432e-01  4.86e-01  5.08e-04  8.82e-02  4.57e-06  1.41e-03  6.38e-01  
  9  +4.9368e-01  +9.1245e-01  4.19e-01  3.82e-04  6.61e-02  7.51e-06  1.08e-03  3.64e-01  
 10  +4.9034e-01  +8.8813e-01  3.98e-01  2.99e-04  5.16e-02  1.19e-05  8.57e-04  3.82e-01  
 11  +4.8634e-01  +8.5085e-01  3.65e-01  2.60e-04  4.48e-02  1.49e-05  7.59e-04  3.55e-01  
 12  +4.8304e-01  +8.2086e-01  3.38e-01  2.51e-04  4.31e-02  1.46e-05  7.42e-04  2.07e-01  
 13  +4.6644e-01  +7.1105e-01  2.45e-01  1.41e-04  2.41e-02  1.26e-05  4.42e-04  4.83e-01  
 14  +4.5226e-01  +6.2685e-01  1.75e-01  9.46e-05  1.61e-02  9.00e-06  3.14e-04  3.81e-01  
 15  +4.4001e-01  +5.6011e-01  1.20e-01  6.15e-05  1.05e-02  6.68e-06  2.15e-04  4.48e-01  
 16  +4.2892e-01  +5.0279e-01  7.39e-02  3.55e-05  6.03e-03  4.99e-06  1.30e-04  6.27e-01  
 17  +4.2341e-01  +4.7600e-01  5.26e-02  2.46e-05  4.16e-03  3.80e-06  9.17e-05  4.30e-01  
 18  +4.1645e-01  +4.4320e-01  2.68e-02  1.21e-05  2.05e-03  2.01e-06  4.69e-05  5.66e-01  
 19  +4.1397e-01  +4.3195e-01  1.80e-02  7.98e-06  1.35e-03  1.38e-06  3.14e-05  3.84e-01  
 20  +4.1344e-01  +4.2921e-01  1.58e-02  6.98e-06  1.18e-03  1.25e-06  2.75e-05  2.60e-01  
 21  +4.1001e-01  +4.1394e-01  3.94e-03  1.73e-06  2.92e-04  3.31e-07  6.97e-06  8.46e-01  
 22  +4.0904e-01  +4.0987e-01  8.28e-04  3.62e-07  6.13e-05  6.99e-08  1.48e-06  8.09e-01  
 23  +4.0881e-01  +4.0893e-01  1.19e-04  5.20e-08  8.80e-06  1.03e-08  2.13e-07  9.11e-01  
 24  +4.0878e-01  +4.0878e-01  1.54e-06  6.74e-10  1.14e-07  1.33e-10  2.77e-09  9.87e-01  
 25  +4.0878e-01  +4.0878e-01  1.61e-08  7.02e-12  1.19e-09  1.38e-12  2.88e-11  9.90e-01  
 26  +4.0878e-01  +4.0878e-01  1.83e-10  8.00e-14  1.35e-11  1.58e-14  3.29e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 199.6567ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:42 PM: Optimal value: 4.088e-01
(CVXPY) Sep 20 07:59:42 PM: Compilation took 3.353e-02 seconds
(CVXPY) Sep 20 07:59:42 PM: Solver (including time spent in interface) took 2.070e-01 seconds
Iteration: 38, Objective: 0.4088
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:42 PM: Your problem has 2879 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:42 PM: Finished problem compilation (took 4.510e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2879
  constraints   = 5379
  nnz(P)        = 0
  nnz(A)        = 54204
  cones (total) = 1
    : Nonnegative = 1,  numel = 5379

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5014e+03  2.50e+03  9.81e-01  8.42e+01  1.00e+00  1.00e+00   ------   
  1  +5.7697e-01  +5.4383e+02  5.43e+02  4.38e-01  5.31e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.2894e-01  +5.8846e+01  5.83e+01  1.59e-01  2.42e+01  1.69e-02  2.65e-01  9.68e-01  
  3  +5.0794e-01  +1.5254e+01  1.47e+01  1.01e-01  1.57e+01  4.77e-05  2.37e-01  3.72e-01  
  4  +5.0069e-01  +1.3813e+00  8.81e-01  8.91e-03  1.48e+00  7.03e-06  9.98e-02  8.76e-01  
  5  +5.0178e-01  +2.8484e+00  2.35e+00  1.43e-02  2.41e+00  5.23e-05  4.38e-02  8.45e-01  
  6  +5.0044e-01  +1.4884e+00  9.88e-01  2.27e-03  3.93e-01  1.49e-04  6.43e-03  8.71e-01  
  7  +4.9985e-01  +1.0057e+00  5.06e-01  1.07e-03  1.85e-01  6.56e-06  3.04e-03  9.90e-01  
  8  +4.9797e-01  +9.7038e-01  4.72e-01  4.92e-04  8.52e-02  1.37e-05  1.37e-03  6.12e-01  
  9  +4.9356e-01  +9.0804e-01  4.14e-01  3.76e-04  6.49e-02  1.46e-05  1.06e-03  3.42e-01  
 10  +4.9037e-01  +8.8741e-01  3.97e-01  2.98e-04  5.14e-02  1.78e-05  8.52e-04  3.44e-01  
 11  +4.8618e-01  +8.5319e-01  3.67e-01  2.52e-04  4.34e-02  1.91e-05  7.34e-04  3.46e-01  
 12  +4.8243e-01  +8.1958e-01  3.37e-01  2.43e-04  4.17e-02  1.73e-05  7.19e-04  2.03e-01  
 13  +4.6680e-01  +7.1501e-01  2.48e-01  1.45e-04  2.48e-02  1.41e-05  4.54e-04  4.48e-01  
 14  +4.5200e-01  +6.2641e-01  1.74e-01  9.48e-05  1.61e-02  9.61e-06  3.15e-04  3.79e-01  
 15  +4.3939e-01  +5.5801e-01  1.19e-01  6.08e-05  1.03e-02  7.06e-06  2.13e-04  4.87e-01  
 16  +4.2867e-01  +5.0282e-01  7.42e-02  3.57e-05  6.06e-03  5.18e-06  1.31e-04  6.20e-01  
 17  +4.2307e-01  +4.7571e-01  5.26e-02  2.47e-05  4.18e-03  3.84e-06  9.27e-05  4.00e-01  
 18  +4.1625e-01  +4.4337e-01  2.71e-02  1.23e-05  2.08e-03  2.11e-06  4.79e-05  6.16e-01  
 19  +4.1363e-01  +4.3164e-01  1.80e-02  8.01e-06  1.36e-03  1.43e-06  3.17e-05  3.85e-01  
 20  +4.1313e-01  +4.2913e-01  1.60e-02  7.10e-06  1.20e-03  1.30e-06  2.82e-05  2.35e-01  
 21  +4.0914e-01  +4.1150e-01  2.37e-03  1.04e-06  1.76e-04  2.11e-07  4.25e-06  9.77e-01  
 22  +4.0837e-01  +4.0842e-01  4.91e-05  2.15e-08  3.64e-06  4.28e-09  8.88e-08  9.84e-01  
 23  +4.0835e-01  +4.0835e-01  4.94e-07  2.16e-10  3.66e-08  4.31e-11  8.93e-10  9.90e-01  
 24  +4.0835e-01  +4.0835e-01  4.99e-09  2.18e-12  3.69e-10  4.36e-13  9.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 195.3151ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:42 PM: Optimal value: 4.084e-01
(CVXPY) Sep 20 07:59:42 PM: Compilation took 4.510e-02 seconds
(CVXPY) Sep 20 07:59:42 PM: Solver (including time spent in interface) took 2.057e-01 seconds
Iteration: 39, Objective: 0.4084
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:43 PM: Your problem has 2882 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:43 PM: Finished problem compilation (took 4.870e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2882
  constraints   = 5382
  nnz(P)        = 0
  nnz(A)        = 54253
  cones (total) = 1
    : Nonnegative = 1,  numel = 5382

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5014e+03  2.50e+03  9.81e-01  8.42e+01  1.00e+00  1.00e+00   ------   
  1  +5.7698e-01  +5.4379e+02  5.43e+02  4.38e-01  5.31e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.2892e-01  +5.8820e+01  5.83e+01  1.59e-01  2.41e+01  1.69e-02  2.65e-01  9.68e-01  
  3  +5.0793e-01  +1.5247e+01  1.47e+01  1.01e-01  1.57e+01  4.77e-05  2.37e-01  3.72e-01  
  4  +5.0069e-01  +1.3811e+00  8.80e-01  8.91e-03  1.48e+00  7.03e-06  9.97e-02  8.76e-01  
  5  +5.0168e-01  +2.7176e+00  2.22e+00  1.41e-02  2.38e+00  4.85e-05  4.43e-02  8.33e-01  
  6  +5.0054e-01  +1.5869e+00  1.09e+00  2.53e-03  4.38e-01  1.43e-04  7.17e-03  8.48e-01  
  7  +5.0009e-01  +1.0642e+00  5.64e-01  1.35e-03  2.34e-01  1.38e-06  3.88e-03  9.05e-01  
  8  +4.9863e-01  +1.0208e+00  5.22e-01  5.73e-04  9.92e-02  4.72e-06  1.59e-03  6.58e-01  
  9  +4.9315e-01  +9.1742e-01  4.24e-01  3.89e-04  6.72e-02  8.50e-06  1.11e-03  4.63e-01  
 10  +4.9109e-01  +9.0492e-01  4.14e-01  3.27e-04  5.64e-02  1.20e-05  9.35e-04  2.97e-01  
 11  +4.8737e-01  +8.7331e-01  3.86e-01  2.72e-04  4.69e-02  1.49e-05  7.88e-04  3.25e-01  
 12  +4.7445e-01  +7.7045e-01  2.96e-01  1.76e-04  3.01e-02  1.94e-05  5.33e-04  8.48e-01  
 13  +4.5427e-01  +6.3852e-01  1.84e-01  1.01e-04  1.71e-02  1.09e-05  3.31e-04  5.01e-01  
 14  +4.4202e-01  +5.7181e-01  1.30e-01  6.71e-05  1.14e-02  7.91e-06  2.32e-04  4.30e-01  
 15  +4.2759e-01  +4.9698e-01  6.94e-02  3.35e-05  5.68e-03  4.63e-06  1.23e-04  6.34e-01  
 16  +4.2379e-01  +4.7883e-01  5.50e-02  2.59e-05  4.38e-03  3.95e-06  9.68e-05  3.69e-01  
 17  +4.1682e-01  +4.4605e-01  2.92e-02  1.33e-05  2.25e-03  2.23e-06  5.16e-05  5.86e-01  
 18  +4.1385e-01  +4.3269e-01  1.88e-02  8.38e-06  1.42e-03  1.46e-06  3.31e-05  4.02e-01  
 19  +4.1343e-01  +4.3054e-01  1.71e-02  7.60e-06  1.29e-03  1.36e-06  3.01e-05  2.05e-01  
 20  +4.0936e-01  +4.1245e-01  3.09e-03  1.35e-06  2.29e-04  2.73e-07  5.53e-06  9.61e-01  
 21  +4.0845e-01  +4.0873e-01  2.89e-04  1.27e-07  2.14e-05  2.55e-08  5.23e-07  9.29e-01  
 22  +4.0835e-01  +4.0835e-01  3.27e-06  1.43e-09  2.42e-07  2.89e-10  5.92e-09  9.89e-01  
 23  +4.0835e-01  +4.0835e-01  3.28e-08  1.43e-11  2.43e-09  2.89e-12  5.93e-11  9.90e-01  
 24  +4.0835e-01  +4.0835e-01  3.34e-10  1.46e-13  2.47e-11  2.95e-14  6.05e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 183.7423ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:43 PM: Optimal value: 4.084e-01
(CVXPY) Sep 20 07:59:43 PM: Compilation took 4.870e-02 seconds
(CVXPY) Sep 20 07:59:43 PM: Solver (including time spent in interface) took 1.971e-01 seconds
Iteration: 40, Objective: 0.4084
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:43 PM: Your problem has 2888 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:43 PM: Finished problem compilation (took 3.806e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2888
  constraints   = 5388
  nnz(P)        = 0
  nnz(A)        = 54342
  cones (total) = 1
    : Nonnegative = 1,  numel = 5388

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5014e+03  2.50e+03  9.81e-01  8.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.7693e-01  +5.4380e+02  5.43e+02  4.38e-01  5.31e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.2892e-01  +5.8837e+01  5.83e+01  1.59e-01  2.41e+01  1.69e-02  2.65e-01  9.68e-01  
  3  +5.0794e-01  +1.5249e+01  1.47e+01  1.01e-01  1.57e+01  4.78e-05  2.37e-01  3.72e-01  
  4  +5.0069e-01  +1.3833e+00  8.83e-01  8.94e-03  1.48e+00  7.04e-06  9.98e-02  8.75e-01  
  5  +5.0181e-01  +2.8880e+00  2.39e+00  1.46e-02  2.47e+00  5.17e-05  4.50e-02  8.37e-01  
  6  +5.0016e-01  +1.2059e+00  7.06e-01  1.59e-03  2.75e-01  1.54e-04  4.52e-03  9.25e-01  
  7  +4.9885e-01  +9.7237e-01  4.74e-01  6.43e-04  1.11e-01  9.99e-05  1.80e-03  9.90e-01  
  8  +4.9379e-01  +8.9695e-01  4.03e-01  3.40e-04  5.87e-02  1.24e-04  9.57e-04  5.70e-01  
  9  +4.9140e-01  +8.8787e-01  3.96e-01  2.86e-04  4.93e-02  1.24e-04  8.09e-04  2.51e-01  
 10  +4.8796e-01  +8.6613e-01  3.78e-01  2.50e-04  4.30e-02  1.03e-04  7.17e-04  2.85e-01  
 11  +4.8430e-01  +8.4137e-01  3.57e-01  2.24e-04  3.85e-02  8.78e-05  6.53e-04  2.06e-01  
 12  +4.6887e-01  +7.2605e-01  2.57e-01  1.61e-04  2.74e-02  2.29e-05  5.03e-04  6.39e-01  
 13  +4.5390e-01  +6.3579e-01  1.82e-01  1.02e-04  1.74e-02  1.47e-05  3.39e-04  4.39e-01  
 14  +4.3653e-01  +5.4106e-01  1.05e-01  5.34e-05  9.05e-03  7.78e-06  1.90e-04  5.81e-01  
 15  +4.2715e-01  +4.9457e-01  6.74e-02  3.25e-05  5.50e-03  5.17e-06  1.20e-04  4.91e-01  
 16  +4.2256e-01  +4.7274e-01  5.02e-02  2.36e-05  3.99e-03  3.96e-06  8.88e-05  3.84e-01  
 17  +4.1511e-01  +4.3817e-01  2.31e-02  1.04e-05  1.76e-03  1.89e-06  4.08e-05  6.63e-01  
 18  +4.1264e-01  +4.2740e-01  1.48e-02  6.53e-06  1.10e-03  1.23e-06  2.61e-05  4.18e-01  
 19  +4.1126e-01  +4.2098e-01  9.72e-03  4.26e-06  7.21e-04  8.44e-07  1.72e-05  5.90e-01  
 20  +4.0854e-01  +4.0961e-01  1.07e-03  4.63e-07  7.83e-05  9.23e-08  1.91e-06  9.15e-01  
 21  +4.0820e-01  +4.0822e-01  1.33e-05  5.77e-09  9.75e-07  1.14e-09  2.39e-08  9.88e-01  
 22  +4.0820e-01  +4.0820e-01  1.33e-07  5.77e-11  9.76e-09  1.15e-11  2.39e-10  9.90e-01  
 23  +4.0820e-01  +4.0820e-01  1.36e-09  5.91e-13  9.99e-11  1.18e-13  2.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 178.9103ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:43 PM: Optimal value: 4.082e-01
(CVXPY) Sep 20 07:59:43 PM: Compilation took 3.806e-02 seconds
(CVXPY) Sep 20 07:59:43 PM: Solver (including time spent in interface) took 1.874e-01 seconds
Iteration: 41, Objective: 0.4082
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:44 PM: Your problem has 2898 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:44 PM: Finished problem compilation (took 4.815e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2898
  constraints   = 5398
  nnz(P)        = 0
  nnz(A)        = 54531
  cones (total) = 1
    : Nonnegative = 1,  numel = 5398

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5014e+03  2.50e+03  9.81e-01  8.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.7684e-01  +5.4381e+02  5.43e+02  4.38e-01  5.30e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.2885e-01  +5.8755e+01  5.82e+01  1.59e-01  2.40e+01  1.69e-02  2.64e-01  9.69e-01  
  3  +5.0792e-01  +1.5233e+01  1.47e+01  1.01e-01  1.56e+01  4.78e-05  2.36e-01  3.74e-01  
  4  +5.0069e-01  +1.3800e+00  8.79e-01  8.92e-03  1.48e+00  7.04e-06  9.91e-02  8.77e-01  
  5  +5.0204e-01  +3.1894e+00  2.69e+00  1.48e-02  2.50e+00  5.91e-05  4.37e-02  8.53e-01  
  6  +4.9999e-01  +9.8856e-01  4.89e-01  1.15e-03  1.99e-01  1.47e-04  3.31e-03  9.81e-01  
  7  +4.9885e-01  +9.7000e-01  4.71e-01  6.31e-04  1.09e-01  2.09e-04  1.77e-03  6.48e-01  
  8  +4.9433e-01  +9.0758e-01  4.13e-01  3.50e-04  6.04e-02  2.59e-04  9.81e-04  5.47e-01  
  9  +4.9162e-01  +8.9388e-01  4.02e-01  2.94e-04  5.07e-02  2.50e-04  8.31e-04  2.54e-01  
 10  +4.8614e-01  +8.5791e-01  3.72e-01  2.34e-04  4.03e-02  1.96e-04  6.79e-04  3.73e-01  
 11  +4.8174e-01  +8.1996e-01  3.38e-01  2.27e-04  3.89e-02  1.39e-04  6.70e-04  1.37e-01  
 12  +4.6762e-01  +7.2565e-01  2.58e-01  1.52e-04  2.59e-02  8.88e-05  4.74e-04  3.98e-01  
 13  +4.5370e-01  +6.4063e-01  1.87e-01  1.03e-04  1.75e-02  5.42e-05  3.41e-04  3.54e-01  
 14  +4.3950e-01  +5.6215e-01  1.23e-01  6.33e-05  1.07e-02  2.59e-05  2.22e-04  5.26e-01  
 15  +4.2920e-01  +5.0856e-01  7.94e-02  3.87e-05  6.55e-03  1.31e-05  1.42e-04  5.81e-01  
 16  +4.2257e-01  +4.7599e-01  5.34e-02  2.52e-05  4.26e-03  8.15e-06  9.50e-05  4.37e-01  
 17  +4.1694e-01  +4.4904e-01  3.21e-02  1.47e-05  2.49e-03  4.50e-06  5.71e-05  5.22e-01  
 18  +4.1315e-01  +4.3178e-01  1.86e-02  8.30e-06  1.40e-03  2.55e-06  3.30e-05  4.78e-01  
 19  +4.1279e-01  +4.2991e-01  1.71e-02  7.62e-06  1.29e-03  2.26e-06  3.04e-05  1.90e-01  
 20  +4.0875e-01  +4.1188e-01  3.13e-03  1.37e-06  2.32e-04  2.90e-07  5.64e-06  9.90e-01  
 21  +4.0773e-01  +4.0780e-01  7.73e-05  3.37e-08  5.70e-06  6.95e-09  1.40e-07  9.77e-01  
 22  +4.0770e-01  +4.0770e-01  7.74e-07  3.38e-10  5.71e-08  6.96e-11  1.41e-09  9.90e-01  
 23  +4.0770e-01  +4.0770e-01  7.74e-09  3.38e-12  5.71e-10  6.96e-13  1.41e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 208.4027ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:44 PM: Optimal value: 4.077e-01
(CVXPY) Sep 20 07:59:44 PM: Compilation took 4.815e-02 seconds
(CVXPY) Sep 20 07:59:44 PM: Solver (including time spent in interface) took 2.159e-01 seconds
FULL MODEL:
  Accruacy: 0.5412
  Our objective: 0.08239999999999997

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 0)            <-- (term's our objective: 0.0032)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.0052)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0036)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x8 = 1)            <-- (term's our objective: 0.0036)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0036)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 0)            <-- (term's our objective: 0.0036)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0016)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0)                       <-- (term's our objective: 0.006)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0044)
 OR (x6 = 0 AND x7 = 0 AND x8 = 1)                                                                   <-- (term's our objective: 0.0172)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 25.098582983016968
Best over terms:
  Our final objective: 0.01719999999999998
    Its accruacy: 0.5086
    Its hamming distance: 8
  Shortest hamming distance: 2
    Its our objective: 0.00600000000000003
  Highest accruacy: 0.5086
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 124 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 125 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 126 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

