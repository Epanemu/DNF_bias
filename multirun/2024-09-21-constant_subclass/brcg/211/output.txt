Command:
python test_script.py -s constant_subclass -d 6 -n 100 --seed 56 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 6.

Computed total variation: 0.56
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:47 PM: Your problem has 63 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:47 PM: Finished problem compilation (took 6.511e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 63
  constraints   = 113
  nnz(P)        = 0
  nnz(A)        = 463
  cones (total) = 1
    : Nonnegative = 1,  numel = 113

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9770e-01  +5.0613e+01  5.01e+01  8.65e-01  8.97e+00  1.00e+00  1.03e+00   ------   
  1  +5.8973e-01  +1.0681e+01  1.01e+01  3.39e-01  5.10e+00  3.91e-03  5.41e-01  6.27e-01  
  2  +5.2779e-01  +1.5644e+00  1.04e+00  7.54e-02  1.37e+00  1.30e-02  1.93e-01  9.70e-01  
  3  +5.0034e-01  +7.0165e-01  2.01e-01  1.70e-02  3.11e-01  3.18e-03  8.02e-02  9.90e-01  
  4  +4.9737e-01  +5.6854e-01  7.12e-02  4.86e-03  9.07e-02  1.97e-03  1.96e-02  7.85e-01  
  5  +4.8499e-01  +5.4775e-01  6.28e-02  1.48e-03  2.84e-02  3.99e-03  5.62e-03  8.16e-01  
  6  +4.7571e-01  +4.9579e-01  2.01e-02  3.94e-04  7.60e-03  9.29e-04  1.69e-03  7.73e-01  
  7  +4.7076e-01  +4.7248e-01  1.71e-03  3.34e-05  6.43e-04  9.26e-06  1.51e-04  9.79e-01  
  8  +4.7011e-01  +4.7012e-01  1.77e-05  3.43e-07  6.60e-06  9.26e-08  1.56e-06  9.90e-01  
  9  +4.7010e-01  +4.7010e-01  1.77e-07  3.43e-09  6.60e-08  9.26e-10  1.56e-08  9.90e-01  
 10  +4.7010e-01  +4.7010e-01  1.77e-09  3.43e-11  6.60e-10  9.26e-12  1.56e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 537.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:47 PM: Optimal value: 4.701e-01
(CVXPY) Sep 20 07:33:47 PM: Compilation took 6.511e-03 seconds
(CVXPY) Sep 20 07:33:47 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4701
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:47 PM: Your problem has 73 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:47 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 73
  constraints   = 123
  nnz(P)        = 0
  nnz(A)        = 573
  cones (total) = 1
    : Nonnegative = 1,  numel = 123

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9236e-01  +5.1566e+01  5.11e+01  8.73e-01  9.19e+00  1.00e+00  1.06e+00   ------   
  1  +5.6143e-01  +1.0878e+01  1.03e+01  3.50e-01  5.14e+00  3.90e-03  5.62e-01  6.24e-01  
  2  +5.0409e-01  +2.0960e+00  1.59e+00  9.38e-02  1.74e+00  1.50e-02  2.28e-01  8.66e-01  
  3  +4.5203e-01  +1.2128e+00  7.61e-01  2.88e-02  5.56e-01  1.09e-02  8.29e-02  7.52e-01  
  4  +4.0760e-01  +6.7446e-01  2.67e-01  8.82e-03  1.67e-01  3.37e-03  3.06e-02  6.79e-01  
  5  +3.8629e-01  +4.9257e-01  1.06e-01  3.00e-03  5.68e-02  1.53e-03  1.11e-02  7.08e-01  
  6  +3.7845e-01  +4.6345e-01  8.50e-02  1.88e-03  3.58e-02  1.29e-03  7.03e-03  4.86e-01  
  7  +3.7033e-01  +4.3205e-01  6.17e-02  1.21e-03  2.31e-02  8.64e-04  4.73e-03  4.37e-01  
  8  +3.5579e-01  +3.6925e-01  1.35e-02  2.64e-04  5.02e-03  2.34e-05  1.10e-03  9.90e-01  
  9  +3.5046e-01  +3.5084e-01  3.85e-04  7.22e-06  1.37e-04  5.61e-07  3.11e-05  9.73e-01  
 10  +3.5030e-01  +3.5031e-01  6.55e-06  1.24e-07  2.35e-06  5.57e-09  5.49e-07  9.82e-01  
 11  +3.5030e-01  +3.5030e-01  6.56e-08  1.24e-09  2.36e-08  5.58e-11  5.52e-09  9.90e-01  
 12  +3.5030e-01  +3.5030e-01  6.56e-10  1.24e-11  2.36e-10  5.58e-13  5.52e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 682.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:47 PM: Optimal value: 3.503e-01
(CVXPY) Sep 20 07:33:47 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:33:47 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Iteration: 2, Objective: 0.3503
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:47 PM: Your problem has 83 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:47 PM: Finished problem compilation (took 5.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 83
  constraints   = 133
  nnz(P)        = 0
  nnz(A)        = 650
  cones (total) = 1
    : Nonnegative = 1,  numel = 133

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8995e-01  +5.1750e+01  5.13e+01  8.78e-01  9.12e+00  1.00e+00  1.07e+00   ------   
  1  +5.4546e-01  +1.1031e+01  1.05e+01  3.63e-01  5.07e+00  3.90e-03  5.73e-01  6.16e-01  
  2  +4.8824e-01  +2.2745e+00  1.79e+00  9.87e-02  1.79e+00  1.62e-02  2.42e-01  8.47e-01  
  3  +4.2364e-01  +1.1398e+00  7.16e-01  2.65e-02  5.01e-01  9.68e-03  7.80e-02  7.79e-01  
  4  +3.7671e-01  +6.0807e-01  2.31e-01  7.29e-03  1.35e-01  2.82e-03  2.53e-02  7.72e-01  
  5  +3.6274e-01  +5.6391e-01  2.01e-01  5.05e-03  9.46e-02  2.50e-03  1.83e-02  3.98e-01  
  6  +3.3260e-01  +4.1184e-01  7.92e-02  1.86e-03  3.45e-02  5.24e-04  7.80e-03  8.08e-01  
  7  +3.1225e-01  +3.1698e-01  4.73e-03  1.07e-04  1.97e-03  1.08e-05  5.03e-04  9.66e-01  
  8  +3.1053e-01  +3.1062e-01  8.73e-05  1.96e-06  3.62e-05  1.60e-07  9.48e-06  9.81e-01  
  9  +3.1050e-01  +3.1050e-01  9.39e-07  2.12e-08  3.91e-07  1.66e-09  1.04e-07  9.89e-01  
 10  +3.1050e-01  +3.1050e-01  9.40e-09  2.12e-10  3.92e-09  1.66e-11  1.04e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 767.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:47 PM: Optimal value: 3.105e-01
(CVXPY) Sep 20 07:33:47 PM: Compilation took 5.009e-03 seconds
(CVXPY) Sep 20 07:33:47 PM: Solver (including time spent in interface) took 9.890e-04 seconds
Iteration: 3, Objective: 0.3105
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:47 PM: Your problem has 85 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:47 PM: Finished problem compilation (took 4.512e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 85
  constraints   = 135
  nnz(P)        = 0
  nnz(A)        = 661
  cones (total) = 1
    : Nonnegative = 1,  numel = 135

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8909e-01  +5.1675e+01  5.12e+01  8.79e-01  9.08e+00  1.00e+00  1.07e+00   ------   
  1  +5.3783e-01  +1.1060e+01  1.05e+01  3.64e-01  5.05e+00  3.90e-03  5.76e-01  6.13e-01  
  2  +4.7873e-01  +2.2777e+00  1.80e+00  9.65e-02  1.74e+00  1.68e-02  2.38e-01  8.58e-01  
  3  +4.0831e-01  +1.0275e+00  6.19e-01  2.24e-02  4.20e-01  9.09e-03  6.57e-02  8.04e-01  
  4  +3.6656e-01  +7.4673e-01  3.80e-01  1.04e-02  1.94e-01  6.26e-03  3.34e-02  5.55e-01  
  5  +3.2689e-01  +4.9882e-01  1.72e-01  4.38e-03  8.04e-02  1.61e-03  1.65e-02  7.23e-01  
  6  +2.9550e-01  +3.4582e-01  5.03e-02  1.17e-03  2.13e-02  3.78e-04  5.18e-03  7.33e-01  
  7  +2.8228e-01  +2.8743e-01  5.15e-03  1.16e-04  2.11e-03  3.28e-05  5.66e-04  9.04e-01  
  8  +2.8073e-01  +2.8081e-01  7.98e-05  1.80e-06  3.27e-05  3.42e-07  8.97e-06  9.84e-01  
  9  +2.8070e-01  +2.8070e-01  8.39e-07  1.90e-08  3.45e-07  3.34e-09  9.71e-08  9.89e-01  
 10  +2.8070e-01  +2.8070e-01  8.38e-09  1.90e-10  3.45e-09  3.34e-11  9.71e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 753.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:47 PM: Optimal value: 2.807e-01
(CVXPY) Sep 20 07:33:47 PM: Compilation took 4.512e-03 seconds
(CVXPY) Sep 20 07:33:47 PM: Solver (including time spent in interface) took 1.005e-03 seconds
Iteration: 4, Objective: 0.2807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:47 PM: Your problem has 93 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:47 PM: Finished problem compilation (took 4.518e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 93
  constraints   = 143
  nnz(P)        = 0
  nnz(A)        = 694
  cones (total) = 1
    : Nonnegative = 1,  numel = 143

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8816e-01  +5.1707e+01  5.12e+01  8.82e-01  8.90e+00  1.00e+00  1.07e+00   ------   
  1  +5.2445e-01  +1.1123e+01  1.06e+01  3.68e-01  4.93e+00  3.92e-03  5.79e-01  6.10e-01  
  2  +4.6059e-01  +2.2578e+00  1.80e+00  8.99e-02  1.59e+00  1.79e-02  2.25e-01  8.82e-01  
  3  +3.7115e-01  +9.0670e-01  5.36e-01  1.73e-02  3.16e-01  9.32e-03  5.04e-02  8.32e-01  
  4  +3.1764e-01  +5.7374e-01  2.56e-01  7.28e-03  1.30e-01  3.10e-03  2.50e-02  6.27e-01  
  5  +2.8391e-01  +4.0850e-01  1.25e-01  3.17e-03  5.63e-02  1.27e-03  1.29e-02  5.63e-01  
  6  +2.5748e-01  +2.7986e-01  2.24e-02  5.46e-04  9.61e-03  1.42e-04  2.60e-03  8.73e-01  
  7  +2.5121e-01  +2.5189e-01  6.82e-04  1.65e-05  2.90e-04  3.38e-06  8.31e-05  9.69e-01  
  8  +2.5102e-01  +2.5106e-01  4.58e-05  1.12e-06  1.97e-05  1.86e-07  5.89e-06  9.34e-01  
  9  +2.5100e-01  +2.5100e-01  4.76e-07  1.17e-08  2.05e-07  1.89e-09  6.18e-08  9.90e-01  
 10  +2.5100e-01  +2.5100e-01  4.76e-09  1.17e-10  2.05e-09  1.89e-11  6.18e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 863.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:47 PM: Optimal value: 2.510e-01
(CVXPY) Sep 20 07:33:47 PM: Compilation took 4.518e-03 seconds
(CVXPY) Sep 20 07:33:47 PM: Solver (including time spent in interface) took 9.995e-04 seconds
Iteration: 5, Objective: 0.2510
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:47 PM: Your problem has 103 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:47 PM: Finished problem compilation (took 4.322e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 103
  constraints   = 153
  nnz(P)        = 0
  nnz(A)        = 728
  cones (total) = 1
    : Nonnegative = 1,  numel = 153

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8675e-01  +5.1818e+01  5.13e+01  8.86e-01  8.68e+00  1.00e+00  1.08e+00   ------   
  1  +5.0297e-01  +1.1279e+01  1.08e+01  3.71e-01  4.79e+00  3.95e-03  5.83e-01  6.03e-01  
  2  +4.3171e-01  +2.3954e+00  1.96e+00  9.13e-02  1.55e+00  1.90e-02  2.28e-01  8.72e-01  
  3  +3.4854e-01  +1.0175e+00  6.69e-01  2.28e-02  3.98e-01  9.14e-03  6.54e-02  7.77e-01  
  4  +2.9847e-01  +5.6408e-01  2.66e-01  8.43e-03  1.44e-01  3.11e-03  2.76e-02  6.21e-01  
  5  +2.8208e-01  +4.9457e-01  2.12e-01  6.05e-03  1.04e-01  2.11e-03  2.11e-02  4.54e-01  
  6  +2.4918e-01  +3.1665e-01  6.75e-02  1.71e-03  2.93e-02  5.98e-04  6.93e-03  7.10e-01  
  7  +2.3358e-01  +2.4022e-01  6.64e-03  1.66e-04  2.83e-03  2.37e-05  7.38e-04  9.90e-01  
  8  +2.3160e-01  +2.3241e-01  8.06e-04  2.01e-05  3.42e-04  2.58e-06  9.31e-05  8.77e-01  
  9  +2.3136e-01  +2.3153e-01  1.71e-04  4.23e-06  7.18e-05  5.84e-07  2.05e-05  8.74e-01  
 10  +2.3130e-01  +2.3130e-01  2.49e-06  6.18e-08  1.05e-06  8.22e-09  3.01e-07  9.86e-01  
 11  +2.3130e-01  +2.3130e-01  2.49e-08  6.18e-10  1.05e-08  8.22e-11  3.01e-09  9.90e-01  
 12  +2.3130e-01  +2.3130e-01  2.49e-10  6.19e-12  1.05e-10  8.22e-13  3.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0317ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:47 PM: Optimal value: 2.313e-01
(CVXPY) Sep 20 07:33:47 PM: Compilation took 4.322e-03 seconds
(CVXPY) Sep 20 07:33:47 PM: Solver (including time spent in interface) took 9.995e-04 seconds
Iteration: 6, Objective: 0.2313
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:48 PM: Your problem has 105 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:48 PM: Finished problem compilation (took 5.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 105
  constraints   = 155
  nnz(P)        = 0
  nnz(A)        = 734
  cones (total) = 1
    : Nonnegative = 1,  numel = 155

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8654e-01  +5.1796e+01  5.13e+01  8.86e-01  8.63e+00  1.00e+00  1.08e+00   ------   
  1  +4.9971e-01  +1.1302e+01  1.08e+01  3.72e-01  4.78e+00  3.95e-03  5.84e-01  6.01e-01  
  2  +4.2761e-01  +2.4609e+00  2.03e+00  9.34e-02  1.57e+00  1.92e-02  2.32e-01  8.63e-01  
  3  +3.4441e-01  +1.0050e+00  6.61e-01  2.26e-02  3.91e-01  8.83e-03  6.47e-02  7.80e-01  
  4  +3.0306e-01  +6.4792e-01  3.45e-01  1.11e-02  1.89e-01  4.19e-03  3.52e-02  5.02e-01  
  5  +2.8079e-01  +5.1575e-01  2.35e-01  6.79e-03  1.15e-01  2.64e-03  2.35e-02  4.60e-01  
  6  +2.5359e-01  +3.5358e-01  1.00e-01  2.66e-03  4.50e-02  1.02e-03  1.04e-02  5.99e-01  
  7  +2.3401e-01  +2.4467e-01  1.07e-02  2.77e-04  4.64e-03  7.82e-05  1.20e-03  9.02e-01  
  8  +2.3153e-01  +2.3231e-01  7.80e-04  2.04e-05  3.42e-04  4.75e-06  9.19e-05  9.24e-01  
  9  +2.3132e-01  +2.3138e-01  6.46e-05  1.72e-06  2.86e-05  3.19e-07  8.10e-06  9.33e-01  
 10  +2.3130e-01  +2.3130e-01  6.91e-07  1.84e-08  3.06e-07  3.36e-09  8.74e-08  9.89e-01  
 11  +2.3130e-01  +2.3130e-01  6.92e-09  1.84e-10  3.06e-09  3.36e-11  8.74e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2471ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:48 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:48 PM: Optimal value: 2.313e-01
(CVXPY) Sep 20 07:33:48 PM: Compilation took 5.006e-03 seconds
(CVXPY) Sep 20 07:33:48 PM: Solver (including time spent in interface) took 2.000e-03 seconds
Iteration: 7, Objective: 0.2313
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:48 PM: Your problem has 107 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:48 PM: Finished problem compilation (took 4.989e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 107
  constraints   = 157
  nnz(P)        = 0
  nnz(A)        = 743
  cones (total) = 1
    : Nonnegative = 1,  numel = 157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8629e-01  +5.1814e+01  5.13e+01  8.87e-01  8.59e+00  1.00e+00  1.08e+00   ------   
  1  +4.9598e-01  +1.1326e+01  1.08e+01  3.73e-01  4.75e+00  3.96e-03  5.84e-01  6.00e-01  
  2  +4.2394e-01  +2.4687e+00  2.04e+00  9.37e-02  1.57e+00  1.93e-02  2.32e-01  8.63e-01  
  3  +3.4171e-01  +9.9766e-01  6.56e-01  2.26e-02  3.91e-01  8.81e-03  6.42e-02  7.82e-01  
  4  +2.9081e-01  +5.6735e-01  2.77e-01  8.88e-03  1.50e-01  2.91e-03  2.89e-02  6.34e-01  
  5  +2.7388e-01  +4.8344e-01  2.10e-01  6.20e-03  1.05e-01  1.84e-03  2.17e-02  4.66e-01  
  6  +2.4280e-01  +2.9527e-01  5.25e-02  1.47e-03  2.46e-02  3.91e-04  5.89e-03  7.45e-01  
  7  +2.3181e-01  +2.3361e-01  1.80e-03  5.05e-05  8.40e-04  7.47e-06  2.17e-04  9.77e-01  
  8  +2.3135e-01  +2.3152e-01  1.71e-04  4.95e-06  8.17e-05  5.94e-07  2.21e-05  9.07e-01  
  9  +2.3130e-01  +2.3130e-01  2.68e-06  7.81e-08  1.29e-06  8.73e-09  3.53e-07  9.85e-01  
 10  +2.3130e-01  +2.3130e-01  2.68e-08  7.81e-10  1.29e-08  8.73e-11  3.53e-09  9.90e-01  
 11  +2.3130e-01  +2.3130e-01  2.69e-10  7.83e-12  1.29e-10  8.74e-13  3.53e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 942.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:48 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:48 PM: Optimal value: 2.313e-01
(CVXPY) Sep 20 07:33:48 PM: Compilation took 4.989e-03 seconds
(CVXPY) Sep 20 07:33:48 PM: Solver (including time spent in interface) took 1.004e-03 seconds
Iteration: 8, Objective: 0.2313
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:48 PM: Your problem has 110 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:48 PM: Finished problem compilation (took 4.523e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 110
  constraints   = 160
  nnz(P)        = 0
  nnz(A)        = 756
  cones (total) = 1
    : Nonnegative = 1,  numel = 160

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8620e-01  +5.1789e+01  5.13e+01  8.88e-01  8.54e+00  1.00e+00  1.07e+00   ------   
  1  +4.9319e-01  +1.1339e+01  1.08e+01  3.74e-01  4.70e+00  3.97e-03  5.84e-01  5.99e-01  
  2  +4.1916e-01  +2.4732e+00  2.05e+00  9.25e-02  1.54e+00  1.95e-02  2.29e-01  8.66e-01  
  3  +3.3828e-01  +1.0125e+00  6.74e-01  2.32e-02  4.00e-01  8.79e-03  6.56e-02  7.74e-01  
  4  +2.8959e-01  +5.6798e-01  2.78e-01  9.07e-03  1.53e-01  3.21e-03  2.91e-02  5.98e-01  
  5  +2.7422e-01  +4.9230e-01  2.18e-01  6.54e-03  1.10e-01  2.10e-03  2.24e-02  4.45e-01  
  6  +2.4472e-01  +3.0843e-01  6.37e-02  1.82e-03  3.04e-02  5.25e-04  7.08e-03  7.10e-01  
  7  +2.3189e-01  +2.3397e-01  2.08e-03  5.95e-05  9.84e-04  9.01e-06  2.49e-04  9.74e-01  
  8  +2.3135e-01  +2.3155e-01  1.92e-04  5.61e-06  9.19e-05  6.40e-07  2.50e-05  9.21e-01  
  9  +2.3130e-01  +2.3130e-01  3.34e-06  9.84e-08  1.61e-06  1.05e-08  4.44e-07  9.83e-01  
 10  +2.3130e-01  +2.3130e-01  3.34e-08  9.84e-10  1.61e-08  1.05e-10  4.44e-09  9.90e-01  
 11  +2.3130e-01  +2.3130e-01  3.35e-10  9.86e-12  1.61e-10  1.05e-12  4.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 959.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:48 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:48 PM: Optimal value: 2.313e-01
(CVXPY) Sep 20 07:33:48 PM: Compilation took 4.523e-03 seconds
(CVXPY) Sep 20 07:33:48 PM: Solver (including time spent in interface) took 1.992e-03 seconds
FULL MODEL:
  Accruacy: 0.73
  Our objective: 0.46

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.1)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1)            <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x3 = 0 AND x4 = 0)                                  <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1)                       <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0)                       <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0)                       <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1)            <-- (term's our objective: 0.06)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.588028907775879
Best over terms:
  Our final objective: 0.09999999999999998
    Its accruacy: 0.55
    Its hamming distance: 3
  Shortest hamming distance: 3
    Its our objective: 0.08000000000000004
  Highest accruacy: 0.55
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

