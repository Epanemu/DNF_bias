Command:
python test_script.py -s constant_subclass -d 9 -n 50 --seed 73 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 9.

Computed total variation: 0.96
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:53 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:53 PM: Finished problem compilation (took 6.159e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 319
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9075e-01  +2.7061e+01  2.66e+01  8.37e-01  6.99e+00  1.00e+00  1.11e+00   ------   
  1  +5.4652e-01  +5.7783e+00  5.23e+00  3.57e-01  4.01e+00  3.68e-03  6.20e-01  6.15e-01  
  2  +4.1849e-01  +1.1985e+00  7.80e-01  7.22e-02  9.82e-01  2.08e-02  2.01e-01  9.90e-01  
  3  +3.7797e-01  +5.9725e-01  2.19e-01  1.84e-02  2.53e-01  5.69e-03  6.14e-02  7.26e-01  
  4  +3.5802e-01  +4.7912e-01  1.21e-01  7.60e-03  1.06e-01  3.16e-03  2.94e-02  6.36e-01  
  5  +3.3652e-01  +3.9577e-01  5.93e-02  2.64e-03  3.79e-02  1.52e-03  1.24e-02  6.49e-01  
  6  +3.2187e-01  +3.2698e-01  5.11e-03  2.21e-04  3.18e-03  2.97e-05  1.15e-03  9.90e-01  
  7  +3.2012e-01  +3.2017e-01  5.41e-05  2.33e-06  3.34e-05  3.05e-07  1.22e-05  9.89e-01  
  8  +3.2010e-01  +3.2010e-01  5.41e-07  2.33e-08  3.34e-07  3.05e-09  1.22e-07  9.90e-01  
  9  +3.2010e-01  +3.2010e-01  5.41e-09  2.33e-10  3.34e-09  3.05e-11  1.22e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9737ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:53 PM: Optimal value: 3.201e-01
(CVXPY) Sep 20 07:55:53 PM: Compilation took 6.159e-03 seconds
(CVXPY) Sep 20 07:55:53 PM: Solver (including time spent in interface) took 2.001e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:53 PM: Your problem has 54 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:53 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 54
  constraints   = 79
  nnz(P)        = 0
  nnz(A)        = 391
  cones (total) = 1
    : Nonnegative = 1,  numel = 79

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7444e-01  +2.7629e+01  2.72e+01  8.49e-01  7.02e+00  1.00e+00  1.14e+00   ------   
  1  +4.6728e-01  +5.7233e+00  5.26e+00  3.54e-01  3.80e+00  3.77e-03  6.08e-01  6.30e-01  
  2  +2.9367e-01  +1.6115e+00  1.32e+00  8.93e-02  1.17e+00  1.92e-02  2.27e-01  8.22e-01  
  3  +2.2912e-01  +5.4956e-01  3.20e-01  2.01e-02  2.74e-01  6.56e-03  5.99e-02  8.04e-01  
  4  +1.8454e-01  +3.0055e-01  1.16e-01  6.50e-03  9.21e-02  2.25e-03  2.16e-02  6.77e-01  
  5  +1.6230e-01  +1.6948e-01  7.18e-03  4.14e-04  5.77e-03  4.64e-05  1.49e-03  9.82e-01  
  6  +1.6053e-01  +1.6119e-01  6.63e-04  3.85e-05  5.31e-04  4.03e-06  1.41e-04  9.06e-01  
  7  +1.6040e-01  +1.6067e-01  2.75e-04  1.42e-05  1.93e-04  2.08e-06  6.07e-05  8.15e-01  
  8  +1.6031e-01  +1.6035e-01  3.78e-05  1.81e-06  2.48e-05  2.65e-07  8.66e-06  8.63e-01  
  9  +1.6030e-01  +1.6030e-01  5.73e-07  2.71e-08  3.71e-07  3.72e-09  1.34e-07  9.85e-01  
 10  +1.6030e-01  +1.6030e-01  5.73e-09  2.71e-10  3.71e-09  3.72e-11  1.34e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 386.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:53 PM: Optimal value: 1.603e-01
(CVXPY) Sep 20 07:55:53 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:55:53 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1603
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:53 PM: Your problem has 64 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:53 PM: Finished problem compilation (took 3.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 64
  constraints   = 89
  nnz(P)        = 0
  nnz(A)        = 446
  cones (total) = 1
    : Nonnegative = 1,  numel = 89

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5579e-01  +2.7947e+01  2.75e+01  8.57e-01  6.90e+00  1.00e+00  1.15e+00   ------   
  1  +3.8283e-01  +5.7718e+00  5.39e+00  3.59e-01  3.62e+00  3.89e-03  6.02e-01  6.29e-01  
  2  +1.6720e-01  +1.6502e+00  1.48e+00  9.24e-02  1.16e+00  1.86e-02  2.27e-01  7.95e-01  
  3  +1.1554e-01  +5.8929e-01  4.74e-01  2.84e-02  3.79e-01  8.68e-03  8.09e-02  7.21e-01  
  4  +6.6459e-02  +1.9075e-01  1.24e-01  6.90e-03  9.42e-02  2.22e-03  2.32e-02  7.97e-01  
  5  +5.1356e-02  +1.0285e-01  5.15e-02  2.69e-03  3.74e-02  8.64e-04  9.57e-03  6.62e-01  
  6  +4.0913e-02  +4.2399e-02  1.49e-03  7.84e-05  1.08e-03  1.32e-05  2.92e-04  9.82e-01  
  7  +4.0555e-02  +4.0723e-02  1.67e-04  9.25e-06  1.22e-04  8.22e-07  3.81e-05  8.75e-01  
  8  +4.0504e-02  +4.0518e-02  1.35e-05  7.73e-07  9.91e-06  1.02e-07  3.57e-06  9.81e-01  
  9  +4.0500e-02  +4.0500e-02  1.38e-07  7.90e-09  1.01e-07  1.03e-09  3.66e-08  9.90e-01  
 10  +4.0500e-02  +4.0500e-02  1.38e-09  7.90e-11  1.01e-09  1.03e-11  3.66e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 374.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:53 PM: Optimal value: 4.050e-02
(CVXPY) Sep 20 07:55:53 PM: Compilation took 3.001e-03 seconds
(CVXPY) Sep 20 07:55:53 PM: Solver (including time spent in interface) took 9.997e-04 seconds
Iteration: 3, Objective: 0.0405
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:53 PM: Your problem has 74 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:53 PM: Finished problem compilation (took 4.541e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 74
  constraints   = 99
  nnz(P)        = 0
  nnz(A)        = 484
  cones (total) = 1
    : Nonnegative = 1,  numel = 99

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5150e-01  +2.7971e+01  2.75e+01  8.64e-01  6.67e+00  1.00e+00  1.15e+00   ------   
  1  +3.4129e-01  +5.7719e+00  5.43e+00  3.62e-01  3.41e+00  3.98e-03  5.92e-01  6.29e-01  
  2  +1.0846e-01  +1.7830e+00  1.67e+00  9.98e-02  1.18e+00  2.02e-02  2.44e-01  7.79e-01  
  3  +9.0839e-02  +4.0164e-01  3.11e-01  2.10e-02  2.60e-01  6.74e-03  6.13e-02  8.04e-01  
  4  +5.5229e-02  +1.5083e-01  9.56e-02  5.82e-03  7.41e-02  1.89e-03  1.95e-02  7.88e-01  
  5  +4.1634e-02  +4.8252e-02  6.62e-03  3.99e-04  5.06e-03  1.12e-04  1.41e-03  9.36e-01  
  6  +4.0662e-02  +4.1434e-02  7.72e-04  4.76e-05  5.94e-04  1.03e-05  1.75e-04  8.78e-01  
  7  +4.0537e-02  +4.0699e-02  1.62e-04  1.03e-05  1.24e-04  1.34e-06  4.36e-05  9.12e-01  
  8  +4.0501e-02  +4.0506e-02  4.36e-06  2.82e-07  3.35e-06  2.57e-08  1.24e-06  9.74e-01  
  9  +4.0500e-02  +4.0500e-02  4.36e-08  2.83e-09  3.35e-08  2.56e-10  1.25e-08  9.90e-01  
 10  +4.0500e-02  +4.0500e-02  4.37e-10  2.83e-11  3.36e-10  2.57e-12  1.25e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 493.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:53 PM: Optimal value: 4.050e-02
(CVXPY) Sep 20 07:55:53 PM: Compilation took 4.541e-03 seconds
(CVXPY) Sep 20 07:55:53 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Iteration: 4, Objective: 0.0405
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:53 PM: Your problem has 79 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:53 PM: Finished problem compilation (took 3.014e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 79
  constraints   = 104
  nnz(P)        = 0
  nnz(A)        = 513
  cones (total) = 1
    : Nonnegative = 1,  numel = 104

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4782e-01  +2.8026e+01  2.76e+01  8.68e-01  6.63e+00  1.00e+00  1.15e+00   ------   
  1  +3.2503e-01  +5.8337e+00  5.51e+00  3.70e-01  3.39e+00  4.00e-03  5.97e-01  6.23e-01  
  2  +9.3743e-02  +1.9503e+00  1.86e+00  1.09e-01  1.26e+00  2.14e-02  2.64e-01  7.56e-01  
  3  +9.2735e-02  +3.6516e-01  2.72e-01  1.94e-02  2.34e-01  7.28e-03  5.63e-02  8.28e-01  
  4  +5.5313e-02  +1.5880e-01  1.03e-01  6.47e-03  8.22e-02  2.27e-03  2.12e-02  8.05e-01  
  5  +4.1730e-02  +4.8820e-02  7.09e-03  4.43e-04  5.60e-03  1.23e-04  1.54e-03  9.39e-01  
  6  +4.0681e-02  +4.1518e-02  8.38e-04  5.37e-05  6.65e-04  1.14e-05  1.93e-04  8.76e-01  
  7  +4.0549e-02  +4.0755e-02  2.07e-04  1.36e-05  1.62e-04  1.86e-06  5.69e-05  8.58e-01  
  8  +4.0503e-02  +4.0511e-02  8.77e-06  5.81e-07  6.85e-06  5.42e-08  2.62e-06  9.61e-01  
  9  +4.0500e-02  +4.0500e-02  8.88e-08  5.89e-09  6.94e-08  5.47e-10  2.68e-08  9.90e-01  
 10  +4.0500e-02  +4.0500e-02  8.90e-10  5.90e-11  6.95e-10  5.48e-12  2.68e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 465.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:53 PM: Optimal value: 4.050e-02
(CVXPY) Sep 20 07:55:53 PM: Compilation took 3.014e-03 seconds
(CVXPY) Sep 20 07:55:53 PM: Solver (including time spent in interface) took 1.008e-03 seconds
Iteration: 5, Objective: 0.0405
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:53 PM: Your problem has 81 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:53 PM: Finished problem compilation (took 3.011e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 106
  nnz(P)        = 0
  nnz(A)        = 525
  cones (total) = 1
    : Nonnegative = 1,  numel = 106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4685e-01  +2.8048e+01  2.76e+01  8.69e-01  6.62e+00  1.00e+00  1.16e+00   ------   
  1  +3.1780e-01  +5.8688e+00  5.55e+00  3.74e-01  3.40e+00  4.01e-03  6.01e-01  6.19e-01  
  2  +8.6518e-02  +2.2954e+00  2.21e+00  1.29e-01  1.45e+00  2.15e-02  3.00e-01  6.90e-01  
  3  +9.5922e-02  +3.7566e-01  2.80e-01  2.04e-02  2.45e-01  8.66e-03  5.88e-02  8.62e-01  
  4  +5.4873e-02  +1.5236e-01  9.75e-02  6.32e-03  7.87e-02  2.52e-03  2.06e-02  7.89e-01  
  5  +4.1378e-02  +4.5803e-02  4.42e-03  2.90e-04  3.58e-03  5.92e-05  9.99e-04  9.73e-01  
  6  +4.0705e-02  +4.1563e-02  8.58e-04  5.81e-05  7.02e-04  9.43e-06  2.09e-04  8.02e-01  
  7  +4.0560e-02  +4.0806e-02  2.45e-04  1.65e-05  1.96e-04  2.03e-06  6.87e-05  8.61e-01  
  8  +4.0504e-02  +4.0518e-02  1.35e-05  9.03e-07  1.06e-05  7.36e-08  4.08e-06  9.63e-01  
  9  +4.0500e-02  +4.0500e-02  1.40e-07  9.42e-09  1.10e-07  7.57e-10  4.31e-08  9.90e-01  
 10  +4.0500e-02  +4.0500e-02  1.41e-09  9.43e-11  1.11e-09  7.58e-12  4.32e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 571.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:53 PM: Optimal value: 4.050e-02
(CVXPY) Sep 20 07:55:53 PM: Compilation took 3.011e-03 seconds
(CVXPY) Sep 20 07:55:53 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.0405
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:53 PM: Your problem has 82 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:53 PM: Finished problem compilation (took 2.991e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 82
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 531
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4585e-01  +2.8131e+01  2.77e+01  8.70e-01  6.62e+00  1.00e+00  1.16e+00   ------   
  1  +3.0924e-01  +5.8966e+00  5.59e+00  3.75e-01  3.40e+00  4.01e-03  6.05e-01  6.18e-01  
  2  +7.0416e-02  +2.3677e+00  2.30e+00  1.33e-01  1.47e+00  2.24e-02  3.09e-01  6.86e-01  
  3  +9.3910e-02  +3.6265e-01  2.69e-01  2.03e-02  2.39e-01  9.59e-03  5.85e-02  8.80e-01  
  4  +5.4363e-02  +1.4240e-01  8.80e-02  5.81e-03  7.17e-02  2.97e-03  1.89e-02  7.55e-01  
  5  +4.1409e-02  +4.5736e-02  4.33e-03  2.91e-04  3.56e-03  5.77e-05  9.92e-04  9.73e-01  
  6  +4.0698e-02  +4.1506e-02  8.07e-04  5.63e-05  6.72e-04  8.55e-06  2.01e-04  8.15e-01  
  7  +4.0554e-02  +4.0762e-02  2.08e-04  1.45e-05  1.69e-04  1.78e-06  5.94e-05  8.10e-01  
  8  +4.0507e-02  +4.0531e-02  2.47e-05  1.67e-06  1.96e-05  1.83e-07  7.54e-06  8.95e-01  
  9  +4.0500e-02  +4.0500e-02  2.99e-07  2.01e-08  2.36e-07  2.08e-09  9.28e-08  9.88e-01  
 10  +4.0500e-02  +4.0500e-02  2.99e-09  2.01e-10  2.36e-09  2.08e-11  9.29e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 489.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:53 PM: Optimal value: 4.050e-02
(CVXPY) Sep 20 07:55:53 PM: Compilation took 2.991e-03 seconds
(CVXPY) Sep 20 07:55:53 PM: Solver (including time spent in interface) took 1.000e-03 seconds
FULL MODEL:
  Accruacy: 0.96
  Our objective: 0.92

IF 
    (x0 = 1 AND x1 = 1 AND x3 = 0)            <-- (term's our objective: 0.16)
 OR (x1 = 0 AND x2 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.24)
 OR (x1 = 1 AND x3 = 0 AND x6 = 1)            <-- (term's our objective: 0.2)
 OR (x2 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.12)
 OR (x4 = 1 AND x6 = 0)                       <-- (term's our objective: 0.32)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.729689598083496
Best over terms:
  Our final objective: 0.31999999999999995
    Its accruacy: 0.66
    Its hamming distance: 9
  Shortest hamming distance: 7
    Its our objective: 0.24
  Highest accruacy: 0.66
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

