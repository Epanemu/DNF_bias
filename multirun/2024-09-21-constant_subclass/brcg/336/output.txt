Command:
python test_script.py -s constant_subclass -d 9 -n 500 --seed 56 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 9.

Computed total variation: 0.652
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:32 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:32 PM: Finished problem compilation (took 7.536e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 3019
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9979e-01  +2.5072e+02  2.50e+02  9.38e-01  2.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.8035e-01  +5.4635e+01  5.41e+01  4.07e-01  1.58e+01  3.78e-03  5.77e-01  5.86e-01  
  2  +5.2903e-01  +6.3485e+00  5.82e+00  1.30e-01  6.36e+00  1.67e-02  2.65e-01  9.66e-01  
  3  +5.0372e-01  +1.5827e+00  1.08e+00  3.40e-02  1.65e+00  4.03e-05  2.05e-01  6.97e-01  
  4  +5.0063e-01  +6.4860e-01  1.48e-01  4.78e-03  2.41e-01  7.56e-06  4.73e-02  8.08e-01  
  5  +5.0016e-01  +6.1781e-01  1.18e-01  3.51e-03  1.78e-01  1.10e-05  1.94e-02  6.57e-01  
  6  +4.9595e-01  +5.6762e-01  7.17e-02  5.53e-04  2.86e-02  5.20e-05  1.83e-03  9.21e-01  
  7  +4.9222e-01  +5.4230e-01  5.01e-02  3.61e-04  1.87e-02  3.37e-05  1.21e-03  4.08e-01  
  8  +4.8915e-01  +5.2265e-01  3.35e-02  2.31e-04  1.19e-02  1.82e-05  7.98e-04  7.90e-01  
  9  +4.8585e-01  +5.0220e-01  1.64e-02  1.03e-04  5.29e-03  9.14e-06  3.58e-04  5.93e-01  
 10  +4.8374e-01  +4.8974e-01  6.00e-03  3.53e-05  1.82e-03  3.76e-06  1.24e-04  7.72e-01  
 11  +4.8287e-01  +4.8508e-01  2.21e-03  1.16e-05  5.98e-04  1.68e-06  4.28e-05  8.21e-01  
 12  +4.8224e-01  +4.8272e-01  4.77e-04  1.93e-06  9.96e-05  4.39e-07  8.35e-06  9.06e-01  
 13  +4.8210e-01  +4.8211e-01  5.47e-06  2.19e-08  1.13e-06  5.08e-09  9.56e-08  9.89e-01  
 14  +4.8210e-01  +4.8210e-01  5.47e-08  2.19e-10  1.13e-08  5.08e-11  9.56e-10  9.90e-01  
 15  +4.8210e-01  +4.8210e-01  5.47e-10  2.19e-12  1.13e-10  5.11e-13  9.61e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.5295ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:32 PM: Optimal value: 4.821e-01
(CVXPY) Sep 20 07:56:32 PM: Compilation took 7.536e-03 seconds
(CVXPY) Sep 20 07:56:32 PM: Solver (including time spent in interface) took 3.992e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4821
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:32 PM: Your problem has 279 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:32 PM: Finished problem compilation (took 5.514e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 279
  constraints   = 529
  nnz(P)        = 0
  nnz(A)        = 3333
  cones (total) = 1
    : Nonnegative = 1,  numel = 529

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +2.5116e+02  2.51e+02  9.39e-01  2.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.7714e-01  +5.4755e+01  5.42e+01  4.10e-01  1.58e+01  3.78e-03  5.79e-01  5.86e-01  
  2  +5.2641e-01  +6.2311e+00  5.70e+00  1.25e-01  6.18e+00  1.73e-02  2.58e-01  9.90e-01  
  3  +5.0374e-01  +1.4486e+00  9.45e-01  3.24e-02  1.61e+00  5.07e-05  1.46e-01  8.96e-01  
  4  +5.0012e-01  +8.2118e-01  3.21e-01  1.03e-02  5.26e-01  3.36e-05  4.58e-02  7.18e-01  
  5  +4.8866e-01  +7.4713e-01  2.58e-01  2.26e-03  1.19e-01  1.42e-04  6.71e-03  8.78e-01  
  6  +4.7734e-01  +6.5396e-01  1.77e-01  1.24e-03  6.46e-02  1.07e-04  3.80e-03  5.02e-01  
  7  +4.6531e-01  +6.1049e-01  1.45e-01  6.40e-04  3.34e-02  1.27e-04  2.02e-03  6.86e-01  
  8  +4.4870e-01  +5.2896e-01  8.03e-02  3.22e-04  1.67e-02  7.00e-05  1.06e-03  7.96e-01  
  9  +4.2779e-01  +4.4125e-01  1.35e-02  4.90e-05  2.55e-03  1.13e-05  1.74e-04  9.90e-01  
 10  +4.2295e-01  +4.2429e-01  1.34e-03  4.79e-06  2.49e-04  1.12e-06  1.77e-05  9.12e-01  
 11  +4.2241e-01  +4.2242e-01  1.42e-05  5.08e-08  2.65e-06  1.18e-08  1.89e-07  9.89e-01  
 12  +4.2240e-01  +4.2240e-01  1.42e-07  5.08e-10  2.65e-08  1.18e-10  1.89e-09  9.90e-01  
 13  +4.2240e-01  +4.2240e-01  1.42e-09  5.08e-12  2.65e-10  1.18e-12  1.89e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6312ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:32 PM: Optimal value: 4.224e-01
(CVXPY) Sep 20 07:56:32 PM: Compilation took 5.514e-03 seconds
(CVXPY) Sep 20 07:56:32 PM: Solver (including time spent in interface) took 3.997e-03 seconds
Iteration: 2, Objective: 0.4224
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:32 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:32 PM: Finished problem compilation (took 4.505e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 3610
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9916e-01  +2.5139e+02  2.51e+02  9.39e-01  2.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.7316e-01  +5.4898e+01  5.43e+01  4.14e-01  1.58e+01  3.78e-03  5.82e-01  5.84e-01  
  2  +5.2391e-01  +6.4022e+00  5.88e+00  1.26e-01  6.19e+00  1.79e-02  2.58e-01  9.90e-01  
  3  +5.0496e-01  +1.2355e+00  7.31e-01  2.50e-02  1.29e+00  6.56e-04  7.98e-02  9.36e-01  
  4  +5.0463e-01  +1.2897e+00  7.85e-01  1.88e-02  9.92e-01  9.71e-04  5.18e-02  4.10e-01  
  5  +4.9935e-01  +1.4101e+00  9.11e-01  1.04e-02  5.56e-01  1.33e-03  2.72e-02  7.92e-01  
  6  +4.8390e-01  +1.0694e+00  5.86e-01  4.38e-03  2.35e-01  1.14e-03  1.19e-02  6.03e-01  
  7  +4.6757e-01  +9.0799e-01  4.40e-01  2.51e-03  1.33e-01  9.72e-04  7.06e-03  4.76e-01  
  8  +4.5748e-01  +8.1979e-01  3.62e-01  1.80e-03  9.54e-02  7.07e-04  5.24e-03  4.24e-01  
  9  +4.4206e-01  +6.7754e-01  2.35e-01  1.14e-03  6.02e-02  2.13e-04  3.50e-03  7.88e-01  
 10  +4.1283e-01  +5.0731e-01  9.45e-02  4.20e-04  2.20e-02  7.24e-05  1.42e-03  8.92e-01  
 11  +3.9249e-01  +4.1630e-01  2.38e-02  9.99e-05  5.26e-03  1.63e-05  3.71e-04  7.71e-01  
 12  +3.8542e-01  +3.8734e-01  1.91e-03  7.87e-06  4.16e-04  1.70e-06  3.11e-05  9.79e-01  
 13  +3.8471e-01  +3.8473e-01  2.05e-05  8.39e-08  4.44e-06  1.77e-08  3.36e-07  9.90e-01  
 14  +3.8470e-01  +3.8470e-01  2.05e-07  8.38e-10  4.44e-08  1.77e-10  3.36e-09  9.90e-01  
 15  +3.8470e-01  +3.8470e-01  2.05e-09  8.39e-12  4.44e-10  1.77e-12  3.36e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.2521ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:32 PM: Optimal value: 3.847e-01
(CVXPY) Sep 20 07:56:32 PM: Compilation took 4.505e-03 seconds
(CVXPY) Sep 20 07:56:32 PM: Solver (including time spent in interface) took 5.149e-03 seconds
Iteration: 3, Objective: 0.3847
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:32 PM: Your problem has 299 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:32 PM: Finished problem compilation (took 4.515e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 299
  constraints   = 549
  nnz(P)        = 0
  nnz(A)        = 3817
  cones (total) = 1
    : Nonnegative = 1,  numel = 549

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9897e-01  +2.5162e+02  2.51e+02  9.40e-01  2.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.6988e-01  +5.4925e+01  5.44e+01  4.15e-01  1.57e+01  3.79e-03  5.82e-01  5.85e-01  
  2  +5.2172e-01  +6.5514e+00  6.03e+00  1.25e-01  6.11e+00  1.82e-02  2.55e-01  9.90e-01  
  3  +5.0653e-01  +1.7091e+00  1.20e+00  3.45e-02  1.80e+00  3.04e-03  9.26e-02  7.27e-01  
  4  +5.0599e-01  +1.7269e+00  1.22e+00  2.87e-02  1.52e+00  3.60e-03  7.41e-02  2.26e-01  
  5  +5.0249e-01  +1.7356e+00  1.23e+00  2.50e-02  1.32e+00  2.65e-03  6.94e-02  3.37e-01  
  6  +4.8441e-01  +1.4034e+00  9.19e-01  6.23e-03  3.41e-01  6.25e-03  1.56e-02  7.88e-01  
  7  +4.6058e-01  +1.0499e+00  5.89e-01  3.67e-03  1.98e-01  2.80e-03  9.86e-03  4.86e-01  
  8  +4.4140e-01  +8.8395e-01  4.43e-01  2.42e-03  1.30e-01  1.82e-03  6.82e-03  4.12e-01  
  9  +4.0538e-01  +6.0082e-01  1.95e-01  1.01e-03  5.35e-02  4.14e-05  3.18e-03  8.78e-01  
 10  +3.8273e-01  +4.8283e-01  1.00e-01  4.77e-04  2.54e-02  3.22e-05  1.62e-03  5.67e-01  
 11  +3.6521e-01  +4.0288e-01  3.77e-02  1.62e-04  8.61e-03  2.91e-05  6.03e-04  8.70e-01  
 12  +3.5463e-01  +3.5982e-01  5.19e-03  2.11e-05  1.12e-03  4.14e-06  8.52e-05  8.89e-01  
 13  +3.5292e-01  +3.5299e-01  7.10e-05  2.88e-07  1.53e-05  5.57e-08  1.18e-06  9.86e-01  
 14  +3.5290e-01  +3.5290e-01  7.10e-07  2.88e-09  1.53e-07  5.57e-10  1.18e-08  9.90e-01  
 15  +3.5290e-01  +3.5290e-01  7.10e-09  2.88e-11  1.53e-09  5.57e-12  1.18e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.4832ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:32 PM: Optimal value: 3.529e-01
(CVXPY) Sep 20 07:56:32 PM: Compilation took 4.515e-03 seconds
(CVXPY) Sep 20 07:56:32 PM: Solver (including time spent in interface) took 5.000e-03 seconds
Iteration: 4, Objective: 0.3529
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:33 PM: Your problem has 309 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:33 PM: Finished problem compilation (took 5.010e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 309
  constraints   = 559
  nnz(P)        = 0
  nnz(A)        = 3962
  cones (total) = 1
    : Nonnegative = 1,  numel = 559

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9890e-01  +2.5165e+02  2.51e+02  9.40e-01  2.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.6819e-01  +5.4951e+01  5.44e+01  4.17e-01  1.55e+01  3.79e-03  5.81e-01  5.85e-01  
  2  +5.2045e-01  +6.6115e+00  6.09e+00  1.25e-01  6.02e+00  1.84e-02  2.54e-01  9.90e-01  
  3  +5.0610e-01  +1.6843e+00  1.18e+00  3.19e-02  1.67e+00  3.26e-03  8.40e-02  7.28e-01  
  4  +5.0579e-01  +1.7416e+00  1.24e+00  2.80e-02  1.48e+00  3.77e-03  7.12e-02  2.11e-01  
  5  +5.0188e-01  +1.9078e+00  1.41e+00  2.37e-02  1.26e+00  3.27e-03  6.11e-02  5.02e-01  
  6  +4.8261e-01  +1.5254e+00  1.04e+00  6.83e-03  3.73e-01  6.23e-03  1.69e-02  7.31e-01  
  7  +4.5990e-01  +1.1818e+00  7.22e-01  4.33e-03  2.34e-01  3.39e-03  1.14e-02  4.31e-01  
  8  +4.3078e-01  +8.6829e-01  4.38e-01  2.34e-03  1.25e-01  1.53e-03  6.60e-03  5.38e-01  
  9  +4.0254e-01  +6.4022e-01  2.38e-01  1.25e-03  6.61e-02  2.66e-04  3.85e-03  7.54e-01  
 10  +3.7258e-01  +4.6662e-01  9.40e-02  4.44e-04  2.35e-02  9.96e-05  1.50e-03  6.56e-01  
 11  +3.5674e-01  +3.8950e-01  3.28e-02  1.43e-04  7.54e-03  3.54e-05  5.22e-04  9.90e-01  
 12  +3.4784e-01  +3.5044e-01  2.60e-03  1.12e-05  5.92e-04  2.61e-06  4.28e-05  9.31e-01  
 13  +3.4723e-01  +3.4789e-01  6.61e-04  2.80e-06  1.47e-04  6.73e-07  1.08e-05  8.44e-01  
 14  +3.4703e-01  +3.4712e-01  9.07e-05  3.81e-07  1.99e-05  9.27e-08  1.48e-06  8.73e-01  
 15  +3.4700e-01  +3.4700e-01  1.00e-06  4.19e-09  2.20e-07  1.02e-09  1.63e-08  9.89e-01  
 16  +3.4700e-01  +3.4700e-01  1.00e-08  4.20e-11  2.20e-09  1.02e-11  1.63e-10  9.90e-01  
 17  +3.4700e-01  +3.4700e-01  1.00e-10  4.21e-13  2.20e-11  1.03e-13  1.64e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.6341ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:33 PM: Optimal value: 3.470e-01
(CVXPY) Sep 20 07:56:33 PM: Compilation took 5.010e-03 seconds
(CVXPY) Sep 20 07:56:33 PM: Solver (including time spent in interface) took 6.541e-03 seconds
Iteration: 5, Objective: 0.3470
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:33 PM: Your problem has 311 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:33 PM: Finished problem compilation (took 5.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 311
  constraints   = 561
  nnz(P)        = 0
  nnz(A)        = 4030
  cones (total) = 1
    : Nonnegative = 1,  numel = 561

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9885e-01  +2.5190e+02  2.51e+02  9.40e-01  2.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.6769e-01  +5.5005e+01  5.44e+01  4.18e-01  1.55e+01  3.79e-03  5.82e-01  5.85e-01  
  2  +5.2021e-01  +6.6361e+00  6.12e+00  1.25e-01  6.02e+00  1.85e-02  2.54e-01  9.90e-01  
  3  +5.0588e-01  +1.6564e+00  1.15e+00  3.07e-02  1.62e+00  3.25e-03  8.08e-02  7.35e-01  
  4  +5.0561e-01  +1.7246e+00  1.22e+00  2.72e-02  1.44e+00  3.76e-03  6.90e-02  2.14e-01  
  5  +5.0124e-01  +1.9577e+00  1.46e+00  2.25e-02  1.20e+00  3.49e-03  5.70e-02  5.64e-01  
  6  +4.8004e-01  +1.5555e+00  1.08e+00  6.56e-03  3.59e-01  6.46e-03  1.61e-02  7.24e-01  
  7  +4.5674e-01  +1.2284e+00  7.72e-01  4.28e-03  2.32e-01  3.85e-03  1.11e-02  4.07e-01  
  8  +4.3802e-01  +1.0280e+00  5.90e-01  3.12e-03  1.67e-01  2.48e-03  8.49e-03  3.21e-01  
  9  +3.9778e-01  +6.3470e-01  2.37e-01  1.27e-03  6.69e-02  2.14e-05  3.96e-03  8.62e-01  
 10  +3.7271e-01  +4.9669e-01  1.24e-01  6.08e-04  3.19e-02  2.11e-05  2.06e-03  5.28e-01  
 11  +3.6134e-01  +4.4667e-01  8.53e-02  3.87e-04  2.02e-02  2.99e-05  1.38e-03  4.77e-01  
 12  +3.4486e-01  +3.7123e-01  2.64e-02  1.12e-04  5.81e-03  1.09e-05  4.39e-04  7.18e-01  
 13  +3.3828e-01  +3.4186e-01  3.58e-03  1.49e-05  7.74e-04  3.39e-06  6.10e-05  9.90e-01  
 14  +3.3710e-01  +3.3739e-01  2.85e-04  1.18e-06  6.13e-05  2.69e-07  4.89e-06  9.26e-01  
 15  +3.3700e-01  +3.3700e-01  3.05e-06  1.27e-08  6.55e-07  2.88e-09  5.23e-08  9.90e-01  
 16  +3.3700e-01  +3.3700e-01  3.05e-08  1.27e-10  6.55e-09  2.88e-11  5.23e-10  9.90e-01  
 17  +3.3700e-01  +3.3700e-01  3.05e-10  1.27e-12  6.56e-11  2.89e-13  5.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.8596ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:33 PM: Optimal value: 3.370e-01
(CVXPY) Sep 20 07:56:33 PM: Compilation took 5.007e-03 seconds
(CVXPY) Sep 20 07:56:33 PM: Solver (including time spent in interface) took 6.636e-03 seconds
Iteration: 6, Objective: 0.3370
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:33 PM: Your problem has 321 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:33 PM: Finished problem compilation (took 5.540e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 321
  constraints   = 571
  nnz(P)        = 0
  nnz(A)        = 4148
  cones (total) = 1
    : Nonnegative = 1,  numel = 571

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9876e-01  +2.5187e+02  2.51e+02  9.41e-01  2.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.6500e-01  +5.5058e+01  5.45e+01  4.20e-01  1.53e+01  3.80e-03  5.82e-01  5.85e-01  
  2  +5.1853e-01  +6.7238e+00  6.21e+00  1.25e-01  5.93e+00  1.87e-02  2.52e-01  9.90e-01  
  3  +5.0485e-01  +1.6764e+00  1.17e+00  2.89e-02  1.52e+00  3.76e-03  7.42e-02  7.37e-01  
  4  +4.9113e-01  +1.9335e+00  1.44e+00  1.23e-02  6.72e-01  8.09e-03  2.96e-02  7.97e-01  
  5  +4.6034e-01  +1.1744e+00  7.14e-01  5.11e-03  2.74e-01  1.96e-03  1.34e-02  7.20e-01  
  6  +4.3360e-01  +9.9126e-01  5.58e-01  2.89e-03  1.53e-01  1.70e-03  7.87e-03  4.97e-01  
  7  +4.0812e-01  +7.6955e-01  3.61e-01  2.09e-03  1.09e-01  3.50e-04  6.32e-03  6.17e-01  
  8  +3.6915e-01  +5.4447e-01  1.75e-01  8.50e-04  4.41e-02  1.62e-04  2.86e-03  5.97e-01  
  9  +3.4418e-01  +4.2333e-01  7.92e-02  3.57e-04  1.84e-02  7.00e-05  1.33e-03  6.07e-01  
 10  +3.2596e-01  +3.4059e-01  1.46e-02  6.35e-05  3.28e-03  1.26e-05  2.62e-04  9.08e-01  
 11  +3.2135e-01  +3.2179e-01  4.40e-04  1.90e-06  9.78e-05  3.58e-07  8.14e-06  9.74e-01  
 12  +3.2120e-01  +3.2121e-01  4.40e-06  1.90e-08  9.77e-07  3.58e-09  8.15e-08  9.90e-01  
 13  +3.2120e-01  +3.2120e-01  4.40e-08  1.90e-10  9.77e-09  3.58e-11  8.15e-10  9.90e-01  
 14  +3.2120e-01  +3.2120e-01  4.40e-10  1.90e-12  9.78e-11  3.58e-13  8.15e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.6319ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:33 PM: Optimal value: 3.212e-01
(CVXPY) Sep 20 07:56:33 PM: Compilation took 5.540e-03 seconds
(CVXPY) Sep 20 07:56:33 PM: Solver (including time spent in interface) took 6.598e-03 seconds
Iteration: 7, Objective: 0.3212
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:33 PM: Your problem has 331 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:33 PM: Finished problem compilation (took 5.515e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 331
  constraints   = 581
  nnz(P)        = 0
  nnz(A)        = 4230
  cones (total) = 1
    : Nonnegative = 1,  numel = 581

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9866e-01  +2.5190e+02  2.51e+02  9.42e-01  2.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.6237e-01  +5.5081e+01  5.45e+01  4.21e-01  1.51e+01  3.80e-03  5.81e-01  5.85e-01  
  2  +5.1670e-01  +6.8359e+00  6.32e+00  1.24e-01  5.85e+00  1.90e-02  2.50e-01  9.90e-01  
  3  +5.0348e-01  +1.7476e+00  1.24e+00  2.81e-02  1.48e+00  4.41e-03  7.07e-02  7.41e-01  
  4  +4.8705e-01  +1.7657e+00  1.28e+00  1.13e-02  6.17e-01  8.80e-03  2.73e-02  7.08e-01  
  5  +4.5346e-01  +1.2593e+00  8.06e-01  4.98e-03  2.68e-01  5.55e-03  1.26e-02  6.53e-01  
  6  +4.2829e-01  +1.0530e+00  6.25e-01  3.34e-03  1.78e-01  3.93e-03  8.90e-03  3.75e-01  
  7  +3.9060e-01  +7.3449e-01  3.44e-01  1.85e-03  9.60e-02  9.19e-04  5.57e-03  6.22e-01  
  8  +3.6187e-01  +5.6094e-01  1.99e-01  9.92e-04  5.13e-02  4.37e-04  3.30e-03  5.08e-01  
  9  +3.3668e-01  +4.2886e-01  9.22e-02  4.29e-04  2.21e-02  1.71e-04  1.59e-03  6.11e-01  
 10  +3.1786e-01  +3.3817e-01  2.03e-02  9.08e-05  4.67e-03  2.31e-05  3.75e-04  9.27e-01  
 11  +3.1173e-01  +3.1274e-01  1.01e-03  4.45e-06  2.29e-04  1.01e-06  1.93e-05  9.61e-01  
 12  +3.1140e-01  +3.1141e-01  1.01e-05  4.47e-08  2.29e-06  1.01e-08  1.95e-07  9.90e-01  
 13  +3.1140e-01  +3.1140e-01  1.01e-07  4.47e-10  2.29e-08  1.01e-10  1.95e-09  9.90e-01  
 14  +3.1140e-01  +3.1140e-01  1.01e-09  4.47e-12  2.29e-10  1.01e-12  1.95e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.9307ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:33 PM: Optimal value: 3.114e-01
(CVXPY) Sep 20 07:56:33 PM: Compilation took 5.515e-03 seconds
(CVXPY) Sep 20 07:56:33 PM: Solver (including time spent in interface) took 6.515e-03 seconds
Iteration: 8, Objective: 0.3114
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:33 PM: Your problem has 341 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:33 PM: Finished problem compilation (took 5.875e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 341
  constraints   = 591
  nnz(P)        = 0
  nnz(A)        = 4306
  cones (total) = 1
    : Nonnegative = 1,  numel = 591

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9860e-01  +2.5180e+02  2.51e+02  9.42e-01  2.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.6029e-01  +5.5102e+01  5.45e+01  4.23e-01  1.49e+01  3.81e-03  5.80e-01  5.85e-01  
  2  +5.1561e-01  +6.9063e+00  6.39e+00  1.24e-01  5.75e+00  1.92e-02  2.49e-01  9.90e-01  
  3  +5.0269e-01  +1.8772e+00  1.37e+00  2.94e-02  1.53e+00  5.06e-03  7.29e-02  7.27e-01  
  4  +4.7970e-01  +1.7470e+00  1.27e+00  9.81e-03  5.32e-01  1.06e-02  2.36e-02  7.32e-01  
  5  +4.4057e-01  +1.1455e+00  7.05e-01  4.32e-03  2.29e-01  3.67e-03  1.13e-02  6.93e-01  
  6  +3.9665e-01  +7.5793e-01  3.61e-01  2.14e-03  1.11e-01  1.02e-04  6.35e-03  7.96e-01  
  7  +3.6279e-01  +5.7051e-01  2.08e-01  1.08e-03  5.56e-02  8.37e-05  3.54e-03  5.58e-01  
  8  +3.3897e-01  +4.5479e-01  1.16e-01  5.54e-04  2.86e-02  6.13e-05  2.00e-03  5.76e-01  
  9  +3.1948e-01  +3.6124e-01  4.18e-02  1.92e-04  9.90e-03  2.65e-05  7.64e-04  7.40e-01  
 10  +3.0911e-01  +3.1389e-01  4.79e-03  2.17e-05  1.11e-03  3.44e-06  9.21e-05  9.35e-01  
 11  +3.0789e-01  +3.0879e-01  9.00e-04  4.08e-06  2.09e-04  6.58e-07  1.76e-05  8.40e-01  
 12  +3.0761e-01  +3.0766e-01  4.27e-05  1.94e-07  9.94e-06  3.44e-08  8.41e-07  9.90e-01  
 13  +3.0760e-01  +3.0760e-01  4.29e-07  1.95e-09  9.99e-08  3.46e-10  8.45e-09  9.90e-01  
 14  +3.0760e-01  +3.0760e-01  4.31e-09  1.96e-11  1.00e-09  3.47e-12  8.50e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.3257ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:33 PM: Optimal value: 3.076e-01
(CVXPY) Sep 20 07:56:33 PM: Compilation took 5.875e-03 seconds
(CVXPY) Sep 20 07:56:33 PM: Solver (including time spent in interface) took 6.586e-03 seconds
Iteration: 9, Objective: 0.3076
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:33 PM: Your problem has 351 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:33 PM: Finished problem compilation (took 4.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 351
  constraints   = 601
  nnz(P)        = 0
  nnz(A)        = 4415
  cones (total) = 1
    : Nonnegative = 1,  numel = 601

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9857e-01  +2.5192e+02  2.51e+02  9.42e-01  2.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.5766e-01  +5.5142e+01  5.46e+01  4.23e-01  1.47e+01  3.82e-03  5.80e-01  5.85e-01  
  2  +5.1374e-01  +6.9777e+00  6.46e+00  1.23e-01  5.66e+00  1.94e-02  2.47e-01  9.90e-01  
  3  +5.0076e-01  +1.9506e+00  1.45e+00  2.88e-02  1.50e+00  5.69e-03  7.05e-02  7.32e-01  
  4  +4.7664e-01  +1.7573e+00  1.28e+00  1.04e-02  5.61e-01  1.04e-02  2.51e-02  6.89e-01  
  5  +4.3709e-01  +1.2046e+00  7.67e-01  4.80e-03  2.54e-01  5.19e-03  1.24e-02  6.23e-01  
  6  +4.0893e-01  +9.5286e-01  5.44e-01  3.13e-03  1.63e-01  2.82e-03  8.62e-03  4.23e-01  
  7  +3.8059e-01  +7.4674e-01  3.66e-01  2.00e-03  1.03e-01  1.58e-03  5.93e-03  3.95e-01  
  8  +3.5278e-01  +5.7617e-01  2.23e-01  1.14e-03  5.88e-02  8.42e-04  3.73e-03  4.32e-01  
  9  +3.2705e-01  +4.3615e-01  1.09e-01  5.28e-04  2.71e-02  2.80e-04  1.93e-03  6.74e-01  
 10  +3.0786e-01  +3.3722e-01  2.94e-02  1.38e-04  7.10e-03  5.82e-05  5.60e-04  7.89e-01  
 11  +3.0103e-01  +3.0490e-01  3.87e-03  1.80e-05  9.24e-04  4.82e-06  7.65e-05  9.53e-01  
 12  +3.0016e-01  +3.0122e-01  1.06e-03  4.92e-06  2.51e-04  1.22e-06  2.12e-05  7.82e-01  
 13  +2.9986e-01  +3.0004e-01  1.76e-04  8.04e-07  4.10e-05  1.48e-07  3.54e-06  9.90e-01  
 14  +2.9980e-01  +2.9980e-01  1.99e-06  9.07e-09  4.62e-07  1.67e-09  4.01e-08  9.89e-01  
 15  +2.9980e-01  +2.9980e-01  2.00e-08  9.09e-11  4.63e-09  1.67e-11  4.02e-10  9.90e-01  
 16  +2.9980e-01  +2.9980e-01  2.01e-10  9.12e-13  4.65e-11  1.68e-13  4.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.1448ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:33 PM: Optimal value: 2.998e-01
(CVXPY) Sep 20 07:56:33 PM: Compilation took 4.999e-03 seconds
(CVXPY) Sep 20 07:56:33 PM: Solver (including time spent in interface) took 9.498e-03 seconds
Iteration: 10, Objective: 0.2998
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:33 PM: Your problem has 361 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:33 PM: Finished problem compilation (took 5.204e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 361
  constraints   = 611
  nnz(P)        = 0
  nnz(A)        = 4490
  cones (total) = 1
    : Nonnegative = 1,  numel = 611

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9842e-01  +2.5210e+02  2.52e+02  9.43e-01  2.42e+01  1.00e+00  1.02e+00   ------   
  1  +5.5316e-01  +5.5301e+01  5.47e+01  4.25e-01  1.46e+01  3.82e-03  5.80e-01  5.84e-01  
  2  +5.1081e-01  +7.1369e+00  6.63e+00  1.23e-01  5.59e+00  1.99e-02  2.46e-01  9.90e-01  
  3  +4.9702e-01  +2.0307e+00  1.53e+00  2.74e-02  1.43e+00  6.61e-03  6.61e-02  7.47e-01  
  4  +4.6772e-01  +1.7510e+00  1.28e+00  1.03e-02  5.55e-01  1.07e-02  2.48e-02  6.65e-01  
  5  +4.2635e-01  +1.2262e+00  8.00e-01  4.91e-03  2.59e-01  6.37e-03  1.27e-02  5.66e-01  
  6  +3.7294e-01  +7.3405e-01  3.61e-01  2.03e-03  1.04e-01  3.00e-04  5.95e-03  8.19e-01  
  7  +3.4750e-01  +5.9836e-01  2.51e-01  1.33e-03  6.83e-02  2.14e-04  4.24e-03  4.80e-01  
  8  +3.2241e-01  +4.5916e-01  1.37e-01  6.96e-04  3.58e-02  1.16e-04  2.47e-03  6.08e-01  
  9  +2.9777e-01  +3.2909e-01  3.13e-02  1.54e-04  7.92e-03  2.35e-05  6.18e-04  7.89e-01  
 10  +2.9092e-01  +2.9719e-01  6.27e-03  3.04e-05  1.56e-03  4.73e-06  1.30e-04  8.53e-01  
 11  +2.8940e-01  +2.9052e-01  1.11e-03  5.37e-06  2.74e-04  8.26e-07  2.37e-05  8.55e-01  
 12  +2.8907e-01  +2.8914e-01  6.66e-05  3.19e-07  1.62e-05  4.85e-08  1.43e-06  9.58e-01  
 13  +2.8905e-01  +2.8905e-01  6.77e-07  3.25e-09  1.65e-07  4.93e-10  1.46e-08  9.90e-01  
 14  +2.8905e-01  +2.8905e-01  6.78e-09  3.25e-11  1.65e-09  4.93e-12  1.46e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.4442ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:33 PM: Optimal value: 2.891e-01
(CVXPY) Sep 20 07:56:33 PM: Compilation took 5.204e-03 seconds
(CVXPY) Sep 20 07:56:33 PM: Solver (including time spent in interface) took 8.113e-03 seconds
Iteration: 11, Objective: 0.2891
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:34 PM: Your problem has 371 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:34 PM: Finished problem compilation (took 5.503e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 371
  constraints   = 621
  nnz(P)        = 0
  nnz(A)        = 4580
  cones (total) = 1
    : Nonnegative = 1,  numel = 621

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9834e-01  +2.5212e+02  2.52e+02  9.43e-01  2.40e+01  1.00e+00  1.02e+00   ------   
  1  +5.5097e-01  +5.5350e+01  5.48e+01  4.26e-01  1.44e+01  3.83e-03  5.80e-01  5.84e-01  
  2  +5.0905e-01  +7.2180e+00  6.71e+00  1.22e-01  5.52e+00  2.02e-02  2.45e-01  9.90e-01  
  3  +4.9437e-01  +1.9645e+00  1.47e+00  2.48e-02  1.29e+00  6.81e-03  5.98e-02  7.71e-01  
  4  +4.6222e-01  +1.6882e+00  1.23e+00  9.65e-03  5.15e-01  1.05e-02  2.32e-02  6.64e-01  
  5  +4.1896e-01  +1.2340e+00  8.15e-01  4.68e-03  2.46e-01  7.36e-03  1.20e-02  5.49e-01  
  6  +3.8707e-01  +9.2108e-01  5.34e-01  3.12e-03  1.60e-01  2.95e-03  8.70e-03  4.44e-01  
  7  +3.4074e-01  +5.7716e-01  2.36e-01  1.27e-03  6.46e-02  8.12e-04  4.05e-03  6.57e-01  
  8  +3.1864e-01  +4.6747e-01  1.49e-01  7.54e-04  3.83e-02  4.51e-04  2.61e-03  4.37e-01  
  9  +2.9221e-01  +3.3724e-01  4.50e-02  2.17e-04  1.10e-02  1.07e-04  8.58e-04  7.36e-01  
 10  +2.8166e-01  +2.8944e-01  7.78e-03  3.69e-05  1.87e-03  1.50e-05  1.57e-04  8.58e-01  
 11  +2.7941e-01  +2.7960e-01  1.89e-04  8.98e-07  4.54e-05  3.02e-07  3.92e-06  9.78e-01  
 12  +2.7935e-01  +2.7935e-01  1.97e-06  9.32e-09  4.71e-07  3.12e-09  4.08e-08  9.90e-01  
 13  +2.7935e-01  +2.7935e-01  1.97e-08  9.33e-11  4.71e-09  3.12e-11  4.09e-10  9.90e-01  
 14  +2.7935e-01  +2.7935e-01  1.97e-10  9.33e-13  4.71e-11  3.12e-13  4.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.7843ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:34 PM: Optimal value: 2.794e-01
(CVXPY) Sep 20 07:56:34 PM: Compilation took 5.503e-03 seconds
(CVXPY) Sep 20 07:56:34 PM: Solver (including time spent in interface) took 8.522e-03 seconds
Iteration: 12, Objective: 0.2794
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:34 PM: Your problem has 381 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:34 PM: Finished problem compilation (took 4.991e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 381
  constraints   = 631
  nnz(P)        = 0
  nnz(A)        = 4648
  cones (total) = 1
    : Nonnegative = 1,  numel = 631

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9830e-01  +2.5225e+02  2.52e+02  9.44e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +5.4798e-01  +5.5436e+01  5.49e+01  4.27e-01  1.43e+01  3.84e-03  5.80e-01  5.84e-01  
  2  +5.0664e-01  +7.3083e+00  6.80e+00  1.21e-01  5.42e+00  2.04e-02  2.43e-01  9.90e-01  
  3  +4.9090e-01  +2.1278e+00  1.64e+00  2.56e-02  1.32e+00  7.78e-03  6.12e-02  7.63e-01  
  4  +4.5159e-01  +1.7139e+00  1.26e+00  9.29e-03  4.90e-01  1.10e-02  2.26e-02  6.84e-01  
  5  +4.0809e-01  +1.2640e+00  8.56e-01  4.82e-03  2.50e-01  7.71e-03  1.25e-02  5.00e-01  
  6  +3.7353e-01  +9.2286e-01  5.49e-01  3.19e-03  1.61e-01  2.86e-03  9.06e-03  4.87e-01  
  7  +3.2337e-01  +5.2150e-01  1.98e-01  1.09e-03  5.44e-02  5.74e-04  3.61e-03  7.04e-01  
  8  +3.1137e-01  +4.6636e-01  1.55e-01  8.19e-04  4.08e-02  4.11e-04  2.84e-03  3.10e-01  
  9  +2.9509e-01  +3.8731e-01  9.22e-02  4.68e-04  2.33e-02  2.23e-04  1.76e-03  4.48e-01  
 10  +2.7910e-01  +3.1038e-01  3.13e-02  1.54e-04  7.65e-03  6.38e-05  6.36e-04  7.14e-01  
 11  +2.7190e-01  +2.7678e-01  4.88e-03  2.37e-05  1.18e-03  8.20e-06  1.03e-04  8.79e-01  
 12  +2.7102e-01  +2.7287e-01  1.85e-03  8.88e-06  4.40e-04  2.25e-06  3.96e-05  8.14e-01  
 13  +2.7043e-01  +2.7051e-01  8.47e-05  4.03e-07  1.99e-05  9.51e-08  1.83e-06  9.62e-01  
 14  +2.7040e-01  +2.7040e-01  8.58e-07  4.08e-09  2.02e-07  9.62e-10  1.85e-08  9.90e-01  
 15  +2.7040e-01  +2.7040e-01  8.58e-09  4.08e-11  2.02e-09  9.62e-12  1.85e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.7082ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:34 PM: Optimal value: 2.704e-01
(CVXPY) Sep 20 07:56:34 PM: Compilation took 4.991e-03 seconds
(CVXPY) Sep 20 07:56:34 PM: Solver (including time spent in interface) took 9.554e-03 seconds
Iteration: 13, Objective: 0.2704
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:34 PM: Your problem has 391 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:34 PM: Finished problem compilation (took 4.010e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 391
  constraints   = 641
  nnz(P)        = 0
  nnz(A)        = 4705
  cones (total) = 1
    : Nonnegative = 1,  numel = 641

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9826e-01  +2.5245e+02  2.52e+02  9.44e-01  2.37e+01  1.00e+00  1.02e+00   ------   
  1  +5.4423e-01  +5.5531e+01  5.50e+01  4.26e-01  1.41e+01  3.85e-03  5.79e-01  5.84e-01  
  2  +5.0372e-01  +7.3957e+00  6.89e+00  1.19e-01  5.31e+00  2.07e-02  2.40e-01  9.90e-01  
  3  +4.8599e-01  +2.2492e+00  1.76e+00  2.54e-02  1.30e+00  8.65e-03  6.07e-02  7.63e-01  
  4  +4.4094e-01  +1.6763e+00  1.24e+00  9.01e-03  4.69e-01  1.01e-02  2.21e-02  6.99e-01  
  5  +3.9845e-01  +1.2827e+00  8.84e-01  4.96e-03  2.54e-01  7.49e-03  1.29e-02  4.83e-01  
  6  +3.6399e-01  +9.1785e-01  5.54e-01  3.22e-03  1.61e-01  2.81e-03  9.17e-03  4.90e-01  
  7  +3.1397e-01  +5.0867e-01  1.95e-01  1.08e-03  5.33e-02  5.05e-04  3.58e-03  7.39e-01  
  8  +3.0331e-01  +4.5795e-01  1.55e-01  8.29e-04  4.09e-02  3.65e-04  2.86e-03  3.09e-01  
  9  +2.8350e-01  +3.5640e-01  7.29e-02  3.77e-04  1.86e-02  1.57e-04  1.43e-03  5.53e-01  
 10  +2.7004e-01  +2.9037e-01  2.03e-02  1.02e-04  5.05e-03  3.92e-05  4.19e-04  7.45e-01  
 11  +2.6596e-01  +2.7051e-01  4.55e-03  2.27e-05  1.12e-03  3.75e-06  9.77e-05  9.90e-01  
 12  +2.6469e-01  +2.6550e-01  8.13e-04  3.98e-06  1.96e-04  6.32e-07  1.80e-05  8.46e-01  
 13  +2.6441e-01  +2.6445e-01  3.48e-05  1.68e-07  8.27e-06  2.49e-08  7.87e-07  9.83e-01  
 14  +2.6440e-01  +2.6440e-01  3.50e-07  1.69e-09  8.29e-08  2.50e-10  7.91e-09  9.90e-01  
 15  +2.6440e-01  +2.6440e-01  3.50e-09  1.69e-11  8.30e-10  2.50e-12  7.92e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.023ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:34 PM: Optimal value: 2.644e-01
(CVXPY) Sep 20 07:56:34 PM: Compilation took 4.010e-03 seconds
(CVXPY) Sep 20 07:56:34 PM: Solver (including time spent in interface) took 1.104e-02 seconds
Iteration: 14, Objective: 0.2644
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:34 PM: Your problem has 401 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:34 PM: Finished problem compilation (took 5.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 401
  constraints   = 651
  nnz(P)        = 0
  nnz(A)        = 4760
  cones (total) = 1
    : Nonnegative = 1,  numel = 651

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9820e-01  +2.5237e+02  2.52e+02  9.45e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +5.4159e-01  +5.5639e+01  5.51e+01  4.28e-01  1.40e+01  3.86e-03  5.78e-01  5.83e-01  
  2  +5.0140e-01  +7.4622e+00  6.96e+00  1.19e-01  5.26e+00  2.09e-02  2.40e-01  9.90e-01  
  3  +4.8231e-01  +2.1716e+00  1.69e+00  2.34e-02  1.20e+00  8.71e-03  5.61e-02  7.81e-01  
  4  +4.3333e-01  +1.6311e+00  1.20e+00  8.59e-03  4.43e-01  9.25e-03  2.13e-02  7.23e-01  
  5  +3.9512e-01  +1.2678e+00  8.73e-01  5.10e-03  2.59e-01  6.22e-03  1.34e-02  4.66e-01  
  6  +3.6079e-01  +9.1268e-01  5.52e-01  3.29e-03  1.63e-01  2.34e-03  9.42e-03  4.93e-01  
  7  +3.1192e-01  +5.1798e-01  2.06e-01  1.16e-03  5.68e-02  5.90e-04  3.83e-03  6.63e-01  
  8  +3.0154e-01  +4.6925e-01  1.68e-01  9.09e-04  4.45e-02  4.45e-04  3.12e-03  2.81e-01  
  9  +2.8189e-01  +3.6941e-01  8.75e-02  4.54e-04  2.23e-02  2.03e-04  1.71e-03  5.45e-01  
 10  +2.6706e-01  +2.9738e-01  3.03e-02  1.52e-04  7.45e-03  5.74e-05  6.29e-04  7.28e-01  
 11  +2.5966e-01  +2.6315e-01  3.49e-03  1.72e-05  8.42e-04  5.22e-06  7.60e-05  9.10e-01  
 12  +2.5872e-01  +2.5909e-01  3.71e-04  1.82e-06  8.88e-05  3.83e-07  8.31e-06  9.50e-01  
 13  +2.5860e-01  +2.5861e-01  4.24e-06  2.08e-08  1.02e-06  4.30e-09  9.54e-08  9.89e-01  
 14  +2.5860e-01  +2.5860e-01  4.24e-08  2.08e-10  1.02e-08  4.30e-11  9.55e-10  9.90e-01  
 15  +2.5860e-01  +2.5860e-01  4.24e-10  2.08e-12  1.02e-10  4.30e-13  9.55e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.9652ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:34 PM: Optimal value: 2.586e-01
(CVXPY) Sep 20 07:56:34 PM: Compilation took 5.002e-03 seconds
(CVXPY) Sep 20 07:56:34 PM: Solver (including time spent in interface) took 1.034e-02 seconds
Iteration: 15, Objective: 0.2586
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:34 PM: Your problem has 411 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:34 PM: Finished problem compilation (took 5.084e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 411
  constraints   = 661
  nnz(P)        = 0
  nnz(A)        = 4815
  cones (total) = 1
    : Nonnegative = 1,  numel = 661

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9813e-01  +2.5225e+02  2.52e+02  9.45e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +5.3775e-01  +5.5646e+01  5.51e+01  4.28e-01  1.38e+01  3.87e-03  5.77e-01  5.83e-01  
  2  +4.9832e-01  +7.5817e+00  7.08e+00  1.17e-01  5.16e+00  2.13e-02  2.37e-01  9.90e-01  
  3  +4.7774e-01  +2.4399e+00  1.96e+00  2.56e-02  1.30e+00  9.81e-03  6.07e-02  7.58e-01  
  4  +4.2887e-01  +1.7000e+00  1.27e+00  9.28e-03  4.74e-01  9.34e-03  2.30e-02  6.92e-01  
  5  +3.9006e-01  +1.2984e+00  9.08e-01  5.41e-03  2.72e-01  6.29e-03  1.41e-02  4.65e-01  
  6  +3.5496e-01  +9.2007e-01  5.65e-01  3.38e-03  1.66e-01  2.77e-03  9.56e-03  4.53e-01  
  7  +3.0901e-01  +5.2922e-01  2.20e-01  1.28e-03  6.20e-02  7.55e-04  4.13e-03  6.44e-01  
  8  +3.0243e-01  +4.9694e-01  1.95e-01  1.09e-03  5.29e-02  6.34e-04  3.61e-03  2.00e-01  
  9  +2.8020e-01  +3.7385e-01  9.37e-02  5.02e-04  2.45e-02  2.04e-04  1.83e-03  7.34e-01  
 10  +2.6478e-01  +2.9418e-01  2.94e-02  1.52e-04  7.41e-03  5.31e-05  6.08e-04  7.47e-01  
 11  +2.5836e-01  +2.6343e-01  5.06e-03  2.56e-05  1.24e-03  4.72e-06  1.10e-04  9.65e-01  
 12  +2.5681e-01  +2.5713e-01  3.21e-04  1.60e-06  7.76e-05  2.30e-07  7.25e-06  9.79e-01  
 13  +2.5670e-01  +2.5671e-01  3.99e-06  1.99e-08  9.62e-07  2.81e-09  9.07e-08  9.88e-01  
 14  +2.5670e-01  +2.5670e-01  3.99e-08  1.99e-10  9.63e-09  2.82e-11  9.08e-10  9.90e-01  
 15  +2.5670e-01  +2.5670e-01  3.99e-10  1.99e-12  9.63e-11  2.82e-13  9.08e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.2151ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:34 PM: Optimal value: 2.567e-01
(CVXPY) Sep 20 07:56:34 PM: Compilation took 5.084e-03 seconds
(CVXPY) Sep 20 07:56:34 PM: Solver (including time spent in interface) took 9.513e-03 seconds
Iteration: 16, Objective: 0.2567
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:34 PM: Your problem has 421 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:34 PM: Finished problem compilation (took 6.194e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 421
  constraints   = 671
  nnz(P)        = 0
  nnz(A)        = 4882
  cones (total) = 1
    : Nonnegative = 1,  numel = 671

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9804e-01  +2.5234e+02  2.52e+02  9.46e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.3440e-01  +5.5729e+01  5.52e+01  4.28e-01  1.37e+01  3.88e-03  5.76e-01  5.83e-01  
  2  +4.9572e-01  +7.6947e+00  7.20e+00  1.16e-01  5.06e+00  2.15e-02  2.35e-01  9.90e-01  
  3  +4.7259e-01  +2.5451e+00  2.07e+00  2.55e-02  1.28e+00  1.05e-02  6.02e-02  7.57e-01  
  4  +4.1814e-01  +1.7477e+00  1.33e+00  9.26e-03  4.70e-01  9.56e-03  2.28e-02  7.01e-01  
  5  +3.8109e-01  +1.2914e+00  9.10e-01  5.54e-03  2.77e-01  5.72e-03  1.45e-02  4.45e-01  
  6  +3.4133e-01  +8.5552e-01  5.14e-01  3.14e-03  1.53e-01  2.22e-03  8.99e-03  5.02e-01  
  7  +2.9633e-01  +4.9903e-01  2.03e-01  1.19e-03  5.74e-02  6.26e-04  3.90e-03  6.61e-01  
  8  +2.9171e-01  +4.7833e-01  1.87e-01  1.06e-03  5.10e-02  5.54e-04  3.54e-03  1.65e-01  
  9  +2.6981e-01  +3.5652e-01  8.67e-02  4.72e-04  2.27e-02  1.66e-04  1.74e-03  7.64e-01  
 10  +2.5601e-01  +2.8265e-01  2.66e-02  1.42e-04  6.78e-03  4.54e-05  5.64e-04  7.26e-01  
 11  +2.5109e-01  +2.5845e-01  7.36e-03  3.84e-05  1.84e-03  8.54e-06  1.60e-04  8.74e-01  
 12  +2.4949e-01  +2.5127e-01  1.78e-03  9.22e-06  4.39e-04  1.64e-06  4.01e-05  8.77e-01  
 13  +2.4909e-01  +2.4965e-01  5.61e-04  2.86e-06  1.36e-04  4.59e-07  1.28e-05  8.53e-01  
 14  +2.4890e-01  +2.4892e-01  1.17e-05  5.92e-08  2.81e-06  9.29e-09  2.69e-07  9.80e-01  
 15  +2.4890e-01  +2.4890e-01  1.17e-07  5.93e-10  2.81e-08  9.31e-11  2.69e-09  9.90e-01  
 16  +2.4890e-01  +2.4890e-01  1.17e-09  5.93e-12  2.81e-10  9.34e-13  2.70e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.8447ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:34 PM: Optimal value: 2.489e-01
(CVXPY) Sep 20 07:56:34 PM: Compilation took 6.194e-03 seconds
(CVXPY) Sep 20 07:56:34 PM: Solver (including time spent in interface) took 1.052e-02 seconds
Iteration: 17, Objective: 0.2489
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:34 PM: Your problem has 422 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:34 PM: Finished problem compilation (took 6.118e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 422
  constraints   = 672
  nnz(P)        = 0
  nnz(A)        = 4891
  cones (total) = 1
    : Nonnegative = 1,  numel = 672

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9802e-01  +2.5228e+02  2.52e+02  9.46e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.3323e-01  +5.5779e+01  5.52e+01  4.28e-01  1.36e+01  3.89e-03  5.76e-01  5.83e-01  
  2  +4.9472e-01  +7.7210e+00  7.23e+00  1.16e-01  5.04e+00  2.17e-02  2.34e-01  9.90e-01  
  3  +4.7064e-01  +2.5502e+00  2.08e+00  2.53e-02  1.27e+00  1.06e-02  5.97e-02  7.59e-01  
  4  +4.1734e-01  +1.7989e+00  1.38e+00  9.74e-03  4.92e-01  9.36e-03  2.41e-02  6.93e-01  
  5  +3.7944e-01  +1.3131e+00  9.34e-01  5.75e-03  2.86e-01  5.37e-03  1.51e-02  4.63e-01  
  6  +3.3942e-01  +8.6878e-01  5.29e-01  3.24e-03  1.57e-01  2.20e-03  9.29e-03  4.89e-01  
  7  +2.9457e-01  +5.0669e-01  2.12e-01  1.26e-03  6.02e-02  6.37e-04  4.12e-03  6.44e-01  
  8  +2.8940e-01  +4.8282e-01  1.93e-01  1.11e-03  5.28e-02  5.57e-04  3.70e-03  1.82e-01  
  9  +2.6957e-01  +3.7075e-01  1.01e-01  5.58e-04  2.66e-02  2.01e-04  2.03e-03  7.10e-01  
 10  +2.5336e-01  +2.8300e-01  2.96e-02  1.59e-04  7.59e-03  5.07e-05  6.34e-04  7.43e-01  
 11  +2.4766e-01  +2.5670e-01  9.04e-03  4.59e-05  2.21e-03  1.21e-05  1.97e-04  8.19e-01  
 12  +2.4523e-01  +2.4621e-01  9.87e-04  4.92e-06  2.36e-04  1.15e-06  2.23e-05  8.98e-01  
 13  +2.4492e-01  +2.4497e-01  5.25e-05  2.59e-07  1.25e-05  5.22e-08  1.21e-06  9.60e-01  
 14  +2.4490e-01  +2.4490e-01  5.29e-07  2.61e-09  1.25e-07  5.25e-10  1.23e-08  9.90e-01  
 15  +2.4490e-01  +2.4490e-01  5.30e-09  2.61e-11  1.26e-09  5.26e-12  1.23e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.4404ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:34 PM: Optimal value: 2.449e-01
(CVXPY) Sep 20 07:56:34 PM: Compilation took 6.118e-03 seconds
(CVXPY) Sep 20 07:56:34 PM: Solver (including time spent in interface) took 1.015e-02 seconds
Iteration: 18, Objective: 0.2449
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:35 PM: Your problem has 432 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:35 PM: Finished problem compilation (took 5.542e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 432
  constraints   = 682
  nnz(P)        = 0
  nnz(A)        = 4934
  cones (total) = 1
    : Nonnegative = 1,  numel = 682

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9802e-01  +2.5226e+02  2.52e+02  9.46e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +5.3080e-01  +5.5769e+01  5.52e+01  4.27e-01  1.35e+01  3.90e-03  5.74e-01  5.83e-01  
  2  +4.9239e-01  +7.8183e+00  7.33e+00  1.14e-01  4.93e+00  2.19e-02  2.31e-01  9.90e-01  
  3  +4.6550e-01  +2.6213e+00  2.16e+00  2.45e-02  1.22e+00  1.13e-02  5.79e-02  7.63e-01  
  4  +4.0760e-01  +1.8042e+00  1.40e+00  9.27e-03  4.65e-01  1.00e-02  2.29e-02  6.82e-01  
  5  +3.5708e-01  +1.0725e+00  7.15e-01  4.42e-03  2.16e-01  3.22e-03  1.19e-02  5.95e-01  
  6  +3.0090e-01  +5.8269e-01  2.82e-01  1.70e-03  8.05e-02  7.58e-04  5.30e-03  6.94e-01  
  7  +2.7951e-01  +4.5891e-01  1.79e-01  1.06e-03  5.03e-02  3.60e-04  3.60e-03  5.40e-01  
  8  +2.6053e-01  +3.5136e-01  9.08e-02  5.17e-04  2.43e-02  1.70e-04  1.91e-03  5.13e-01  
  9  +2.5705e-01  +3.2794e-01  7.09e-02  4.01e-04  1.89e-02  1.10e-04  1.51e-03  4.78e-01  
 10  +2.4465e-01  +2.6315e-01  1.85e-02  1.03e-04  4.82e-03  2.59e-05  4.20e-04  7.51e-01  
 11  +2.4162e-01  +2.4732e-01  5.70e-03  3.16e-05  1.47e-03  7.25e-06  1.34e-04  7.29e-01  
 12  +2.4102e-01  +2.4411e-01  3.09e-03  1.70e-05  7.94e-04  3.16e-06  7.36e-05  6.96e-01  
 13  +2.4037e-01  +2.4109e-01  7.25e-04  3.97e-06  1.85e-04  6.78e-07  1.75e-05  8.21e-01  
 14  +2.4018e-01  +2.4026e-01  8.36e-05  4.54e-07  2.11e-05  5.90e-08  2.03e-06  9.88e-01  
 15  +2.4015e-01  +2.4015e-01  8.50e-07  4.62e-09  2.15e-07  6.00e-10  2.07e-08  9.90e-01  
 16  +2.4015e-01  +2.4015e-01  8.50e-09  4.62e-11  2.15e-09  6.00e-12  2.07e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.9423ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:35 PM: Optimal value: 2.402e-01
(CVXPY) Sep 20 07:56:35 PM: Compilation took 5.542e-03 seconds
(CVXPY) Sep 20 07:56:35 PM: Solver (including time spent in interface) took 1.068e-02 seconds
Iteration: 19, Objective: 0.2402
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:35 PM: Your problem has 442 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:35 PM: Finished problem compilation (took 5.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 442
  constraints   = 692
  nnz(P)        = 0
  nnz(A)        = 4984
  cones (total) = 1
    : Nonnegative = 1,  numel = 692

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9798e-01  +2.5229e+02  2.52e+02  9.46e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +5.2759e-01  +5.5819e+01  5.53e+01  4.28e-01  1.33e+01  3.91e-03  5.73e-01  5.83e-01  
  2  +4.8884e-01  +7.9306e+00  7.44e+00  1.13e-01  4.84e+00  2.22e-02  2.28e-01  9.90e-01  
  3  +4.5625e-01  +2.2174e+00  1.76e+00  1.85e-02  9.22e-01  1.09e-02  4.41e-02  8.21e-01  
  4  +4.0503e-01  +1.7573e+00  1.35e+00  9.26e-03  4.61e-01  9.74e-03  2.30e-02  5.80e-01  
  5  +3.4815e-01  +1.0198e+00  6.72e-01  4.20e-03  2.03e-01  2.96e-03  1.14e-02  6.17e-01  
  6  +2.9103e-01  +5.6291e-01  2.72e-01  1.65e-03  7.79e-02  8.01e-04  5.16e-03  6.40e-01  
  7  +2.5772e-01  +3.7961e-01  1.22e-01  7.02e-04  3.30e-02  2.81e-04  2.51e-03  6.47e-01  
  8  +2.3906e-01  +2.7925e-01  4.02e-02  2.25e-04  1.05e-02  8.10e-05  8.92e-04  6.89e-01  
  9  +2.3242e-01  +2.4415e-01  1.17e-02  6.55e-05  3.05e-03  2.02e-05  2.74e-04  7.54e-01  
 10  +2.3022e-01  +2.3294e-01  2.72e-03  1.52e-05  7.04e-04  4.41e-06  6.59e-05  7.69e-01  
 11  +2.2993e-01  +2.3133e-01  1.40e-03  7.72e-06  3.57e-04  1.12e-06  3.45e-05  9.39e-01  
 12  +2.2952e-01  +2.2959e-01  6.92e-05  3.80e-07  1.76e-05  5.40e-08  1.72e-06  9.52e-01  
 13  +2.2950e-01  +2.2950e-01  7.15e-07  3.93e-09  1.82e-07  5.57e-10  1.78e-08  9.90e-01  
 14  +2.2950e-01  +2.2950e-01  7.16e-09  3.93e-11  1.82e-09  5.58e-12  1.78e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.3049ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:35 PM: Optimal value: 2.295e-01
(CVXPY) Sep 20 07:56:35 PM: Compilation took 5.508e-03 seconds
(CVXPY) Sep 20 07:56:35 PM: Solver (including time spent in interface) took 1.154e-02 seconds
Iteration: 20, Objective: 0.2295
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:35 PM: Your problem has 452 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:35 PM: Finished problem compilation (took 5.515e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 452
  constraints   = 702
  nnz(P)        = 0
  nnz(A)        = 5037
  cones (total) = 1
    : Nonnegative = 1,  numel = 702

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9791e-01  +2.5261e+02  2.52e+02  9.47e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.2405e-01  +5.5917e+01  5.54e+01  4.28e-01  1.32e+01  3.92e-03  5.73e-01  5.83e-01  
  2  +4.8427e-01  +8.0384e+00  7.55e+00  1.11e-01  4.76e+00  2.25e-02  2.27e-01  9.90e-01  
  3  +4.4789e-01  +2.3114e+00  1.86e+00  1.86e-02  9.23e-01  1.13e-02  4.48e-02  8.15e-01  
  4  +4.0032e-01  +1.8472e+00  1.45e+00  1.01e-02  4.99e-01  1.00e-02  2.51e-02  5.19e-01  
  5  +3.5638e-01  +1.2207e+00  8.64e-01  5.66e-03  2.73e-01  4.46e-03  1.51e-02  4.90e-01  
  6  +2.9621e-01  +6.0494e-01  3.09e-01  1.94e-03  9.11e-02  1.03e-03  5.91e-03  6.66e-01  
  7  +2.5390e-01  +3.7700e-01  1.23e-01  7.19e-04  3.37e-02  2.65e-04  2.58e-03  7.50e-01  
  8  +2.3428e-01  +2.7051e-01  3.62e-02  2.04e-04  9.52e-03  6.44e-05  8.19e-04  7.47e-01  
  9  +2.2945e-01  +2.4494e-01  1.55e-02  8.68e-05  4.03e-03  2.53e-05  3.64e-04  6.10e-01  
 10  +2.2663e-01  +2.3018e-01  3.55e-03  1.98e-05  9.19e-04  4.55e-06  8.67e-05  8.38e-01  
 11  +2.2613e-01  +2.2768e-01  1.56e-03  8.62e-06  3.98e-04  1.27e-06  3.89e-05  9.02e-01  
 12  +2.2569e-01  +2.2581e-01  1.22e-04  6.70e-07  3.09e-05  9.66e-08  3.07e-06  9.24e-01  
 13  +2.2565e-01  +2.2565e-01  1.46e-06  8.05e-09  3.71e-07  1.12e-09  3.70e-08  9.90e-01  
 14  +2.2565e-01  +2.2565e-01  1.47e-08  8.07e-11  3.73e-09  1.13e-11  3.71e-10  9.90e-01  
 15  +2.2565e-01  +2.2565e-01  1.47e-10  8.10e-13  3.74e-11  1.13e-13  3.73e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.8289ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:35 PM: Optimal value: 2.257e-01
(CVXPY) Sep 20 07:56:35 PM: Compilation took 5.515e-03 seconds
(CVXPY) Sep 20 07:56:35 PM: Solver (including time spent in interface) took 1.052e-02 seconds
Iteration: 21, Objective: 0.2257
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:35 PM: Your problem has 462 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:35 PM: Finished problem compilation (took 5.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 462
  constraints   = 712
  nnz(P)        = 0
  nnz(A)        = 5095
  cones (total) = 1
    : Nonnegative = 1,  numel = 712

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9788e-01  +2.5264e+02  2.52e+02  9.47e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.2095e-01  +5.5964e+01  5.54e+01  4.28e-01  1.31e+01  3.93e-03  5.72e-01  5.84e-01  
  2  +4.8078e-01  +8.1131e+00  7.63e+00  1.10e-01  4.65e+00  2.27e-02  2.25e-01  9.90e-01  
  3  +4.4069e-01  +2.3360e+00  1.90e+00  1.83e-02  8.95e-01  1.15e-02  4.40e-02  8.18e-01  
  4  +3.8867e-01  +1.8209e+00  1.43e+00  9.68e-03  4.73e-01  9.65e-03  2.43e-02  5.36e-01  
  5  +3.4539e-01  +1.1663e+00  8.21e-01  5.35e-03  2.55e-01  4.27e-03  1.44e-02  4.71e-01  
  6  +2.8496e-01  +5.5555e-01  2.71e-01  1.71e-03  7.93e-02  8.49e-04  5.32e-03  7.08e-01  
  7  +2.5412e-01  +3.9748e-01  1.43e-01  8.49e-04  3.95e-02  3.46e-04  2.99e-03  6.13e-01  
  8  +2.3120e-01  +2.7332e-01  4.21e-02  2.37e-04  1.10e-02  8.68e-05  9.46e-04  7.26e-01  
  9  +2.2301e-01  +2.3099e-01  7.98e-03  4.45e-05  2.06e-03  1.28e-05  1.91e-04  8.49e-01  
 10  +2.2140e-01  +2.2323e-01  1.83e-03  1.02e-05  4.70e-04  1.95e-06  4.57e-05  8.91e-01  
 11  +2.2097e-01  +2.2136e-01  3.86e-04  2.14e-06  9.84e-05  3.11e-07  9.75e-06  9.20e-01  
 12  +2.2085e-01  +2.2086e-01  4.93e-06  2.73e-08  1.26e-06  3.94e-09  1.25e-07  9.87e-01  
 13  +2.2085e-01  +2.2085e-01  4.93e-08  2.73e-10  1.26e-08  3.94e-11  1.25e-09  9.90e-01  
 14  +2.2085e-01  +2.2085e-01  4.93e-10  2.73e-12  1.26e-10  3.94e-13  1.25e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.8214ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:35 PM: Optimal value: 2.209e-01
(CVXPY) Sep 20 07:56:35 PM: Compilation took 5.002e-03 seconds
(CVXPY) Sep 20 07:56:35 PM: Solver (including time spent in interface) took 1.052e-02 seconds
Iteration: 22, Objective: 0.2209
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:35 PM: Your problem has 472 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:35 PM: Finished problem compilation (took 5.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 472
  constraints   = 722
  nnz(P)        = 0
  nnz(A)        = 5146
  cones (total) = 1
    : Nonnegative = 1,  numel = 722

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9785e-01  +2.5266e+02  2.52e+02  9.48e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.1828e-01  +5.6014e+01  5.55e+01  4.28e-01  1.30e+01  3.93e-03  5.72e-01  5.83e-01  
  2  +4.7723e-01  +8.1436e+00  7.67e+00  1.09e-01  4.60e+00  2.29e-02  2.25e-01  9.90e-01  
  3  +4.3907e-01  +2.5637e+00  2.12e+00  2.09e-02  1.01e+00  1.15e-02  5.06e-02  7.89e-01  
  4  +3.8902e-01  +2.0535e+00  1.66e+00  1.14e-02  5.53e-01  1.01e-02  2.85e-02  5.30e-01  
  5  +3.4584e-01  +1.2795e+00  9.34e-01  6.14e-03  2.91e-01  3.56e-03  1.65e-02  5.72e-01  
  6  +2.8807e-01  +5.8533e-01  2.97e-01  1.90e-03  8.76e-02  7.42e-04  5.80e-03  6.99e-01  
  7  +2.5659e-01  +4.2785e-01  1.71e-01  1.02e-03  4.74e-02  3.62e-04  3.46e-03  5.54e-01  
  8  +2.3472e-01  +3.1691e-01  8.22e-02  4.58e-04  2.14e-02  1.37e-04  1.74e-03  6.67e-01  
  9  +2.1739e-01  +2.2911e-01  1.17e-02  6.28e-05  2.92e-03  1.54e-05  2.69e-04  8.69e-01  
 10  +2.1463e-01  +2.1607e-01  1.44e-03  7.71e-06  3.57e-04  1.52e-06  3.51e-05  8.94e-01  
 11  +2.1423e-01  +2.1431e-01  8.20e-05  4.39e-07  2.03e-05  7.76e-08  2.05e-06  9.53e-01  
 12  +2.1420e-01  +2.1420e-01  8.23e-07  4.41e-09  2.04e-07  7.78e-10  2.07e-08  9.90e-01  
 13  +2.1420e-01  +2.1420e-01  8.24e-09  4.42e-11  2.04e-09  7.78e-12  2.07e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.3049ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:35 PM: Optimal value: 2.142e-01
(CVXPY) Sep 20 07:56:35 PM: Compilation took 5.508e-03 seconds
(CVXPY) Sep 20 07:56:35 PM: Solver (including time spent in interface) took 1.053e-02 seconds
Iteration: 23, Objective: 0.2142
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:35 PM: Your problem has 482 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:35 PM: Finished problem compilation (took 5.500e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 482
  constraints   = 732
  nnz(P)        = 0
  nnz(A)        = 5180
  cones (total) = 1
    : Nonnegative = 1,  numel = 732

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9779e-01  +2.5269e+02  2.52e+02  9.48e-01  2.23e+01  1.00e+00  1.02e+00   ------   
  1  +5.1454e-01  +5.6055e+01  5.55e+01  4.28e-01  1.28e+01  3.94e-03  5.71e-01  5.83e-01  
  2  +4.7364e-01  +8.2525e+00  7.78e+00  1.07e-01  4.53e+00  2.31e-02  2.22e-01  9.90e-01  
  3  +4.3123e-01  +2.4479e+00  2.02e+00  1.89e-02  9.13e-01  1.15e-02  4.57e-02  8.08e-01  
  4  +3.8394e-01  +1.9542e+00  1.57e+00  1.09e-02  5.26e-01  9.63e-03  2.72e-02  4.88e-01  
  5  +3.4860e-01  +1.3533e+00  1.00e+00  6.77e-03  3.20e-01  4.96e-03  1.79e-02  4.20e-01  
  6  +2.8970e-01  +6.1640e-01  3.27e-01  2.13e-03  9.80e-02  1.04e-03  6.37e-03  6.95e-01  
  7  +2.5700e-01  +4.4381e-01  1.87e-01  1.14e-03  5.28e-02  4.82e-04  3.81e-03  5.58e-01  
  8  +2.3603e-01  +3.3410e-01  9.81e-02  5.64e-04  2.61e-02  2.03e-04  2.08e-03  6.10e-01  
  9  +2.1707e-01  +2.3524e-01  1.82e-02  9.95e-05  4.61e-03  2.90e-05  4.17e-04  8.41e-01  
 10  +2.1290e-01  +2.1498e-01  2.08e-03  1.14e-05  5.22e-04  2.67e-06  5.08e-05  8.92e-01  
 11  +2.1235e-01  +2.1252e-01  1.70e-04  9.31e-07  4.27e-05  1.76e-07  4.32e-06  9.43e-01  
 12  +2.1230e-01  +2.1230e-01  1.72e-06  9.43e-09  4.33e-07  1.77e-09  4.39e-08  9.90e-01  
 13  +2.1230e-01  +2.1230e-01  1.73e-08  9.44e-11  4.33e-09  1.78e-11  4.40e-10  9.90e-01  
 14  +2.1230e-01  +2.1230e-01  1.73e-10  9.44e-13  4.33e-11  1.78e-13  4.40e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.6537ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:35 PM: Optimal value: 2.123e-01
(CVXPY) Sep 20 07:56:35 PM: Compilation took 5.500e-03 seconds
(CVXPY) Sep 20 07:56:35 PM: Solver (including time spent in interface) took 1.103e-02 seconds
Iteration: 24, Objective: 0.2123
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:36 PM: Your problem has 492 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:36 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 492
  constraints   = 742
  nnz(P)        = 0
  nnz(A)        = 5238
  cones (total) = 1
    : Nonnegative = 1,  numel = 742

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9761e-01  +2.5291e+02  2.52e+02  9.48e-01  2.22e+01  1.00e+00  1.02e+00   ------   
  1  +5.0743e-01  +5.6281e+01  5.58e+01  4.28e-01  1.27e+01  3.96e-03  5.72e-01  5.82e-01  
  2  +4.6609e-01  +8.4304e+00  7.96e+00  1.06e-01  4.48e+00  2.37e-02  2.21e-01  9.90e-01  
  3  +4.2089e-01  +2.4395e+00  2.02e+00  1.88e-02  9.01e-01  1.11e-02  4.53e-02  8.08e-01  
  4  +3.6351e-01  +1.7491e+00  1.39e+00  9.21e-03  4.39e-01  8.41e-03  2.32e-02  5.66e-01  
  5  +3.1317e-01  +9.5675e-01  6.44e-01  4.43e-03  2.04e-01  1.39e-03  1.23e-02  7.22e-01  
  6  +2.6052e-01  +4.5513e-01  1.95e-01  1.29e-03  5.85e-02  2.92e-04  4.13e-03  7.41e-01  
  7  +2.4303e-01  +3.7707e-01  1.34e-01  8.30e-04  3.80e-02  1.75e-04  2.86e-03  5.34e-01  
  8  +2.2048e-01  +2.5902e-01  3.85e-02  2.21e-04  1.02e-02  4.40e-05  8.70e-04  7.61e-01  
  9  +2.1324e-01  +2.2351e-01  1.03e-02  5.72e-05  2.62e-03  9.80e-06  2.44e-04  8.25e-01  
 10  +2.1063e-01  +2.1168e-01  1.05e-03  5.80e-06  2.65e-04  7.98e-07  2.64e-05  9.16e-01  
 11  +2.1033e-01  +2.1041e-01  8.62e-05  4.73e-07  2.15e-05  6.18e-08  2.23e-06  9.33e-01  
 12  +2.1030e-01  +2.1030e-01  8.88e-07  4.87e-09  2.22e-07  6.33e-10  2.30e-08  9.90e-01  
 13  +2.1030e-01  +2.1030e-01  8.90e-09  4.89e-11  2.22e-09  6.34e-12  2.31e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.6517ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:36 PM: Optimal value: 2.103e-01
(CVXPY) Sep 20 07:56:36 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:56:36 PM: Solver (including time spent in interface) took 9.542e-03 seconds
Iteration: 25, Objective: 0.2103
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:36 PM: Your problem has 502 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:36 PM: Finished problem compilation (took 5.504e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 502
  constraints   = 752
  nnz(P)        = 0
  nnz(A)        = 5282
  cones (total) = 1
    : Nonnegative = 1,  numel = 752

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9760e-01  +2.5291e+02  2.52e+02  9.49e-01  2.20e+01  1.00e+00  1.02e+00   ------   
  1  +5.0644e-01  +5.6271e+01  5.58e+01  4.29e-01  1.26e+01  3.96e-03  5.71e-01  5.82e-01  
  2  +4.6380e-01  +8.4688e+00  8.00e+00  1.06e-01  4.42e+00  2.38e-02  2.20e-01  9.90e-01  
  3  +4.1725e-01  +2.5056e+00  2.09e+00  1.91e-02  9.11e-01  1.13e-02  4.62e-02  8.03e-01  
  4  +3.6389e-01  +1.8457e+00  1.48e+00  9.99e-03  4.74e-01  8.32e-03  2.51e-02  5.53e-01  
  5  +3.1327e-01  +9.5032e-01  6.37e-01  4.33e-03  1.99e-01  1.80e-03  1.20e-02  6.78e-01  
  6  +2.5905e-01  +4.5973e-01  2.01e-01  1.32e-03  5.98e-02  3.83e-04  4.21e-03  7.44e-01  
  7  +2.4141e-01  +3.7927e-01  1.38e-01  8.51e-04  3.88e-02  2.18e-04  2.92e-03  5.38e-01  
  8  +2.1882e-01  +2.6016e-01  4.13e-02  2.37e-04  1.09e-02  5.55e-05  9.26e-04  7.53e-01  
  9  +2.1025e-01  +2.1672e-01  6.47e-03  3.66e-05  1.67e-03  7.16e-06  1.55e-04  8.61e-01  
 10  +2.0898e-01  +2.1066e-01  1.68e-03  9.49e-06  4.31e-04  1.54e-06  4.21e-05  8.38e-01  
 11  +2.0851e-01  +2.0855e-01  3.94e-05  2.23e-07  1.01e-05  3.23e-08  1.00e-06  9.82e-01  
 12  +2.0850e-01  +2.0850e-01  3.94e-07  2.23e-09  1.01e-07  3.24e-10  1.00e-08  9.90e-01  
 13  +2.0850e-01  +2.0850e-01  3.95e-09  2.23e-11  1.01e-09  3.24e-12  1.00e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.9921ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:36 PM: Optimal value: 2.085e-01
(CVXPY) Sep 20 07:56:36 PM: Compilation took 5.504e-03 seconds
(CVXPY) Sep 20 07:56:36 PM: Solver (including time spent in interface) took 1.152e-02 seconds
Iteration: 26, Objective: 0.2085
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:36 PM: Your problem has 507 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:36 PM: Finished problem compilation (took 4.988e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 507
  constraints   = 757
  nnz(P)        = 0
  nnz(A)        = 5306
  cones (total) = 1
    : Nonnegative = 1,  numel = 757

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9754e-01  +2.5283e+02  2.52e+02  9.49e-01  2.20e+01  1.00e+00  1.02e+00   ------   
  1  +5.0386e-01  +5.6290e+01  5.58e+01  4.29e-01  1.26e+01  3.97e-03  5.71e-01  5.82e-01  
  2  +4.6020e-01  +8.5621e+00  8.10e+00  1.05e-01  4.38e+00  2.41e-02  2.18e-01  9.90e-01  
  3  +4.0994e-01  +2.4500e+00  2.04e+00  1.81e-02  8.58e-01  1.14e-02  4.37e-02  8.12e-01  
  4  +3.5984e-01  +1.7516e+00  1.39e+00  9.59e-03  4.53e-01  7.95e-03  2.42e-02  5.15e-01  
  5  +3.0887e-01  +9.5933e-01  6.50e-01  4.58e-03  2.09e-01  9.28e-04  1.28e-02  7.86e-01  
  6  +2.5620e-01  +4.4712e-01  1.91e-01  1.28e-03  5.77e-02  2.06e-04  4.10e-03  7.58e-01  
  7  +2.3657e-01  +3.6121e-01  1.25e-01  7.74e-04  3.52e-02  1.23e-04  2.70e-03  5.88e-01  
  8  +2.1511e-01  +2.4925e-01  3.41e-02  1.97e-04  9.02e-03  3.07e-05  7.82e-04  7.62e-01  
  9  +2.0799e-01  +2.1298e-01  4.99e-03  2.87e-05  1.30e-03  3.80e-06  1.22e-04  8.89e-01  
 10  +2.0709e-01  +2.0875e-01  1.66e-03  9.52e-06  4.31e-04  1.17e-06  4.21e-05  8.56e-01  
 11  +2.0661e-01  +2.0664e-01  2.94e-05  1.68e-07  7.62e-06  1.94e-08  7.53e-07  9.86e-01  
 12  +2.0660e-01  +2.0660e-01  2.94e-07  1.68e-09  7.63e-08  1.94e-10  7.54e-09  9.90e-01  
 13  +2.0660e-01  +2.0660e-01  2.94e-09  1.69e-11  7.63e-10  1.94e-12  7.54e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.4196ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:36 PM: Optimal value: 2.066e-01
(CVXPY) Sep 20 07:56:36 PM: Compilation took 4.988e-03 seconds
(CVXPY) Sep 20 07:56:36 PM: Solver (including time spent in interface) took 1.054e-02 seconds
Iteration: 27, Objective: 0.2066
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:36 PM: Your problem has 517 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:36 PM: Finished problem compilation (took 5.092e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 517
  constraints   = 767
  nnz(P)        = 0
  nnz(A)        = 5354
  cones (total) = 1
    : Nonnegative = 1,  numel = 767

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9755e-01  +2.5283e+02  2.52e+02  9.49e-01  2.18e+01  1.00e+00  1.02e+00   ------   
  1  +5.0298e-01  +5.6233e+01  5.57e+01  4.27e-01  1.24e+01  3.98e-03  5.69e-01  5.84e-01  
  2  +4.5852e-01  +8.5294e+00  8.07e+00  1.04e-01  4.27e+00  2.40e-02  2.16e-01  9.90e-01  
  3  +4.0789e-01  +2.5369e+00  2.13e+00  1.89e-02  8.89e-01  1.13e-02  4.58e-02  8.02e-01  
  4  +3.5785e-01  +1.8274e+00  1.47e+00  1.01e-02  4.72e-01  8.18e-03  2.55e-02  5.10e-01  
  5  +3.1109e-01  +1.0221e+00  7.11e-01  4.94e-03  2.25e-01  1.76e-03  1.36e-02  6.95e-01  
  6  +2.5825e-01  +4.6732e-01  2.09e-01  1.41e-03  6.29e-02  3.56e-04  4.45e-03  7.46e-01  
  7  +2.3943e-01  +3.8179e-01  1.42e-01  8.97e-04  4.04e-02  2.18e-04  3.05e-03  4.64e-01  
  8  +2.1667e-01  +2.6502e-01  4.83e-02  2.82e-04  1.28e-02  5.96e-05  1.09e-03  7.60e-01  
  9  +2.0674e-01  +2.1461e-01  7.87e-03  4.51e-05  2.03e-03  8.39e-06  1.91e-04  8.37e-01  
 10  +2.0537e-01  +2.0803e-01  2.66e-03  1.52e-05  6.80e-04  2.37e-06  6.79e-05  7.84e-01  
 11  +2.0468e-01  +2.0493e-01  2.57e-04  1.46e-06  6.55e-05  2.17e-07  6.74e-06  9.08e-01  
 12  +2.0460e-01  +2.0460e-01  2.69e-06  1.53e-08  6.83e-07  2.24e-09  7.06e-08  9.90e-01  
 13  +2.0460e-01  +2.0460e-01  2.69e-08  1.53e-10  6.83e-09  2.25e-11  7.06e-10  9.90e-01  
 14  +2.0460e-01  +2.0460e-01  2.69e-10  1.53e-12  6.83e-11  2.25e-13  7.07e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.6757ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:36 PM: Optimal value: 2.046e-01
(CVXPY) Sep 20 07:56:36 PM: Compilation took 5.092e-03 seconds
(CVXPY) Sep 20 07:56:36 PM: Solver (including time spent in interface) took 1.148e-02 seconds
Iteration: 28, Objective: 0.2046
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:36 PM: Your problem has 527 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:36 PM: Finished problem compilation (took 4.332e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 527
  constraints   = 777
  nnz(P)        = 0
  nnz(A)        = 5391
  cones (total) = 1
    : Nonnegative = 1,  numel = 777

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9749e-01  +2.5288e+02  2.52e+02  9.49e-01  2.17e+01  1.00e+00  1.02e+00   ------   
  1  +4.9792e-01  +5.6465e+01  5.60e+01  4.27e-01  1.23e+01  4.00e-03  5.68e-01  5.82e-01  
  2  +4.5373e-01  +8.6988e+00  8.25e+00  1.05e-01  4.29e+00  2.41e-02  2.18e-01  9.83e-01  
  3  +4.0609e-01  +2.6909e+00  2.28e+00  2.12e-02  9.82e-01  1.08e-02  5.13e-02  7.79e-01  
  4  +3.5258e-01  +1.9189e+00  1.57e+00  1.08e-02  5.01e-01  7.94e-03  2.73e-02  5.46e-01  
  5  +3.2974e-01  +1.4593e+00  1.13e+00  7.94e-03  3.63e-01  4.47e-03  2.10e-02  3.61e-01  
  6  +2.7624e-01  +6.1951e-01  3.43e-01  2.37e-03  1.06e-01  7.98e-04  7.01e-03  7.34e-01  
  7  +2.4203e-01  +4.3162e-01  1.90e-01  1.21e-03  5.44e-02  3.74e-04  3.99e-03  5.79e-01  
  8  +2.1832e-01  +2.9414e-01  7.58e-02  4.58e-04  2.05e-02  1.26e-04  1.68e-03  6.77e-01  
  9  +2.0811e-01  +2.3867e-01  3.06e-02  1.80e-04  8.06e-03  4.35e-05  7.10e-04  6.63e-01  
 10  +2.0223e-01  +2.0789e-01  5.66e-03  3.32e-05  1.48e-03  6.92e-06  1.40e-04  8.23e-01  
 11  +2.0106e-01  +2.0228e-01  1.22e-03  7.12e-06  3.15e-04  1.10e-06  3.21e-05  8.79e-01  
 12  +2.0072e-01  +2.0078e-01  5.91e-05  3.43e-07  1.52e-05  4.81e-08  1.58e-06  9.61e-01  
 13  +2.0070e-01  +2.0070e-01  5.95e-07  3.45e-09  1.53e-07  4.83e-10  1.60e-08  9.90e-01  
 14  +2.0070e-01  +2.0070e-01  5.96e-09  3.45e-11  1.53e-09  4.84e-12  1.60e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.2991ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:36 PM: Optimal value: 2.007e-01
(CVXPY) Sep 20 07:56:36 PM: Compilation took 4.332e-03 seconds
(CVXPY) Sep 20 07:56:36 PM: Solver (including time spent in interface) took 1.053e-02 seconds
Iteration: 29, Objective: 0.2007
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:36 PM: Your problem has 537 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:36 PM: Finished problem compilation (took 5.583e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 537
  constraints   = 787
  nnz(P)        = 0
  nnz(A)        = 5434
  cones (total) = 1
    : Nonnegative = 1,  numel = 787

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9743e-01  +2.5297e+02  2.52e+02  9.50e-01  2.16e+01  1.00e+00  1.02e+00   ------   
  1  +4.9405e-01  +5.6637e+01  5.61e+01  4.27e-01  1.22e+01  4.01e-03  5.68e-01  5.81e-01  
  2  +4.4895e-01  +9.0586e+00  8.61e+00  1.07e-01  4.35e+00  2.43e-02  2.23e-01  9.68e-01  
  3  +4.0347e-01  +2.9171e+00  2.51e+00  2.36e-02  1.08e+00  1.09e-02  5.71e-02  7.57e-01  
  4  +3.5290e-01  +2.1069e+00  1.75e+00  1.25e-02  5.74e-01  8.20e-03  3.14e-02  5.21e-01  
  5  +3.2885e-01  +1.5443e+00  1.22e+00  8.70e-03  3.96e-01  4.59e-03  2.28e-02  3.72e-01  
  6  +2.7347e-01  +6.1287e-01  3.39e-01  2.41e-03  1.06e-01  2.88e-04  7.11e-03  8.80e-01  
  7  +2.3634e-01  +4.0776e-01  1.71e-01  1.11e-03  4.97e-02  1.46e-04  3.71e-03  6.19e-01  
  8  +2.1466e-01  +2.8388e-01  6.92e-02  4.26e-04  1.90e-02  5.65e-05  1.57e-03  6.85e-01  
  9  +2.0271e-01  +2.1790e-01  1.52e-02  9.17e-05  4.07e-03  1.06e-05  3.69e-04  8.77e-01  
 10  +1.9994e-01  +2.0403e-01  4.09e-03  2.46e-05  1.09e-03  2.68e-06  1.06e-04  7.69e-01  
 11  +1.9893e-01  +1.9935e-01  4.23e-04  2.52e-06  1.11e-04  2.49e-07  1.15e-05  9.48e-01  
 12  +1.9880e-01  +1.9882e-01  1.63e-05  9.67e-08  4.26e-06  9.59e-09  4.46e-07  9.69e-01  
 13  +1.9880e-01  +1.9880e-01  1.63e-07  9.69e-10  4.27e-08  9.61e-11  4.47e-09  9.90e-01  
 14  +1.9880e-01  +1.9880e-01  1.63e-09  9.70e-12  4.27e-10  9.62e-13  4.47e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.5599ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:36 PM: Optimal value: 1.988e-01
(CVXPY) Sep 20 07:56:36 PM: Compilation took 5.583e-03 seconds
(CVXPY) Sep 20 07:56:36 PM: Solver (including time spent in interface) took 1.158e-02 seconds
Iteration: 30, Objective: 0.1988
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:36 PM: Your problem has 538 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:36 PM: Finished problem compilation (took 4.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 538
  constraints   = 788
  nnz(P)        = 0
  nnz(A)        = 5439
  cones (total) = 1
    : Nonnegative = 1,  numel = 788

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9743e-01  +2.5297e+02  2.52e+02  9.50e-01  2.16e+01  1.00e+00  1.02e+00   ------   
  1  +4.9395e-01  +5.6648e+01  5.62e+01  4.27e-01  1.22e+01  4.01e-03  5.68e-01  5.81e-01  
  2  +4.4885e-01  +9.1881e+00  8.74e+00  1.08e-01  4.40e+00  2.42e-02  2.26e-01  9.61e-01  
  3  +4.0385e-01  +2.9401e+00  2.54e+00  2.39e-02  1.10e+00  1.08e-02  5.78e-02  7.57e-01  
  4  +3.5344e-01  +2.1265e+00  1.77e+00  1.27e-02  5.82e-01  8.16e-03  3.18e-02  5.21e-01  
  5  +3.2881e-01  +1.5412e+00  1.21e+00  8.70e-03  3.96e-01  4.46e-03  2.29e-02  3.84e-01  
  6  +2.7297e-01  +6.0533e-01  3.32e-01  2.35e-03  1.04e-01  2.74e-04  6.97e-03  8.84e-01  
  7  +2.3681e-01  +4.1049e-01  1.74e-01  1.13e-03  5.04e-02  1.44e-04  3.75e-03  6.05e-01  
  8  +2.1546e-01  +2.8841e-01  7.29e-02  4.50e-04  2.01e-02  5.87e-05  1.66e-03  6.61e-01  
  9  +2.0352e-01  +2.2266e-01  1.91e-02  1.15e-04  5.12e-03  1.39e-05  4.61e-04  8.10e-01  
 10  +2.0002e-01  +2.0453e-01  4.52e-03  2.72e-05  1.20e-03  3.02e-06  1.16e-04  7.76e-01  
 11  +1.9905e-01  +1.9985e-01  7.99e-04  4.77e-06  2.10e-04  4.93e-07  2.16e-05  9.79e-01  
 12  +1.9881e-01  +1.9885e-01  3.57e-05  2.12e-07  9.33e-06  2.16e-08  9.78e-07  9.62e-01  
 13  +1.9880e-01  +1.9880e-01  3.60e-07  2.14e-09  9.41e-08  2.18e-10  9.87e-09  9.90e-01  
 14  +1.9880e-01  +1.9880e-01  3.60e-09  2.14e-11  9.42e-10  2.18e-12  9.88e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.1541ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:36 PM: Optimal value: 1.988e-01
(CVXPY) Sep 20 07:56:36 PM: Compilation took 4.998e-03 seconds
(CVXPY) Sep 20 07:56:36 PM: Solver (including time spent in interface) took 1.106e-02 seconds
Iteration: 31, Objective: 0.1988
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:36 PM: Your problem has 539 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:36 PM: Finished problem compilation (took 4.996e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 539
  constraints   = 789
  nnz(P)        = 0
  nnz(A)        = 5446
  cones (total) = 1
    : Nonnegative = 1,  numel = 789

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9740e-01  +2.5295e+02  2.52e+02  9.50e-01  2.16e+01  1.00e+00  1.02e+00   ------   
  1  +4.9367e-01  +5.6635e+01  5.61e+01  4.27e-01  1.22e+01  4.01e-03  5.68e-01  5.81e-01  
  2  +4.4806e-01  +9.1330e+00  8.68e+00  1.08e-01  4.37e+00  2.43e-02  2.24e-01  9.64e-01  
  3  +4.0238e-01  +2.8488e+00  2.45e+00  2.29e-02  1.05e+00  1.06e-02  5.56e-02  7.65e-01  
  4  +3.5125e-01  +2.0622e+00  1.71e+00  1.21e-02  5.59e-01  7.95e-03  3.06e-02  5.26e-01  
  5  +3.2729e-01  +1.5123e+00  1.18e+00  8.50e-03  3.87e-01  4.40e-03  2.24e-02  3.76e-01  
  6  +2.7249e-01  +6.0011e-01  3.28e-01  2.32e-03  1.03e-01  4.96e-04  6.86e-03  8.17e-01  
  7  +2.3813e-01  +4.2002e-01  1.82e-01  1.18e-03  5.28e-02  2.46e-04  3.91e-03  5.83e-01  
  8  +2.1586e-01  +2.9124e-01  7.54e-02  4.65e-04  2.07e-02  9.01e-05  1.71e-03  6.64e-01  
  9  +2.0464e-01  +2.2915e-01  2.45e-02  1.48e-04  6.58e-03  2.55e-05  5.86e-04  7.29e-01  
 10  +2.0009e-01  +2.0502e-01  4.93e-03  2.97e-05  1.31e-03  4.52e-06  1.26e-04  8.04e-01  
 11  +1.9941e-01  +2.0175e-01  2.33e-03  1.40e-05  6.17e-04  1.92e-06  6.20e-05  6.66e-01  
 12  +1.9883e-01  +1.9909e-01  2.58e-04  1.53e-06  6.78e-05  1.79e-07  7.09e-06  9.45e-01  
 13  +1.9875e-01  +1.9876e-01  4.62e-06  2.74e-08  1.21e-06  3.17e-09  1.27e-07  9.82e-01  
 14  +1.9875e-01  +1.9875e-01  4.62e-08  2.74e-10  1.21e-08  3.17e-11  1.28e-09  9.90e-01  
 15  +1.9875e-01  +1.9875e-01  4.62e-10  2.74e-12  1.21e-10  3.17e-13  1.28e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.2938ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:36 PM: Optimal value: 1.988e-01
(CVXPY) Sep 20 07:56:36 PM: Compilation took 4.996e-03 seconds
(CVXPY) Sep 20 07:56:36 PM: Solver (including time spent in interface) took 1.252e-02 seconds
Iteration: 32, Objective: 0.1988
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:37 PM: Your problem has 540 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:37 PM: Finished problem compilation (took 5.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 540
  constraints   = 790
  nnz(P)        = 0
  nnz(A)        = 5449
  cones (total) = 1
    : Nonnegative = 1,  numel = 790

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9740e-01  +2.5295e+02  2.52e+02  9.50e-01  2.16e+01  1.00e+00  1.02e+00   ------   
  1  +4.9376e-01  +5.6630e+01  5.61e+01  4.28e-01  1.22e+01  4.01e-03  5.68e-01  5.81e-01  
  2  +4.4806e-01  +9.1263e+00  8.68e+00  1.07e-01  4.36e+00  2.43e-02  2.24e-01  9.65e-01  
  3  +4.0233e-01  +2.8501e+00  2.45e+00  2.29e-02  1.05e+00  1.06e-02  5.56e-02  7.65e-01  
  4  +3.5136e-01  +2.0670e+00  1.72e+00  1.22e-02  5.60e-01  7.96e-03  3.07e-02  5.25e-01  
  5  +3.2732e-01  +1.5135e+00  1.19e+00  8.51e-03  3.87e-01  4.39e-03  2.24e-02  3.78e-01  
  6  +2.7259e-01  +6.0217e-01  3.30e-01  2.33e-03  1.03e-01  5.08e-04  6.89e-03  8.14e-01  
  7  +2.3780e-01  +4.1870e-01  1.81e-01  1.17e-03  5.24e-02  2.48e-04  3.89e-03  5.89e-01  
  8  +2.1569e-01  +2.9035e-01  7.47e-02  4.60e-04  2.05e-02  9.01e-05  1.69e-03  6.67e-01  
  9  +2.0417e-01  +2.2645e-01  2.23e-02  1.35e-04  5.98e-03  2.28e-05  5.34e-04  7.62e-01  
 10  +2.0006e-01  +2.0482e-01  4.76e-03  2.88e-05  1.27e-03  4.29e-06  1.22e-04  7.97e-01  
 11  +1.9939e-01  +2.0165e-01  2.26e-03  1.35e-05  5.98e-04  1.85e-06  6.01e-05  6.44e-01  
 12  +1.9882e-01  +1.9906e-01  2.38e-04  1.42e-06  6.25e-05  1.61e-07  6.55e-06  9.56e-01  
 13  +1.9875e-01  +1.9876e-01  3.99e-06  2.37e-08  1.04e-06  2.66e-09  1.10e-07  9.84e-01  
 14  +1.9875e-01  +1.9875e-01  3.99e-08  2.37e-10  1.05e-08  2.67e-11  1.10e-09  9.90e-01  
 15  +1.9875e-01  +1.9875e-01  3.99e-10  2.37e-12  1.05e-10  2.67e-13  1.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.2059ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:37 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:37 PM: Optimal value: 1.988e-01
(CVXPY) Sep 20 07:56:37 PM: Compilation took 5.508e-03 seconds
(CVXPY) Sep 20 07:56:37 PM: Solver (including time spent in interface) took 1.289e-02 seconds
Iteration: 33, Objective: 0.1988
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:37 PM: Your problem has 541 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:37 PM: Finished problem compilation (took 6.412e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 541
  constraints   = 791
  nnz(P)        = 0
  nnz(A)        = 5459
  cones (total) = 1
    : Nonnegative = 1,  numel = 791

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9740e-01  +2.5296e+02  2.52e+02  9.50e-01  2.15e+01  1.00e+00  1.02e+00   ------   
  1  +4.9371e-01  +5.6638e+01  5.61e+01  4.28e-01  1.22e+01  4.01e-03  5.68e-01  5.81e-01  
  2  +4.4788e-01  +9.0805e+00  8.63e+00  1.07e-01  4.34e+00  2.43e-02  2.24e-01  9.67e-01  
  3  +4.0197e-01  +2.8527e+00  2.45e+00  2.30e-02  1.05e+00  1.07e-02  5.57e-02  7.64e-01  
  4  +3.5124e-01  +2.0751e+00  1.72e+00  1.22e-02  5.63e-01  7.97e-03  3.09e-02  5.25e-01  
  5  +3.2715e-01  +1.5149e+00  1.19e+00  8.54e-03  3.88e-01  4.34e-03  2.25e-02  3.84e-01  
  6  +2.7269e-01  +6.0538e-01  3.33e-01  2.35e-03  1.04e-01  5.45e-04  6.96e-03  8.03e-01  
  7  +2.3807e-01  +4.2104e-01  1.83e-01  1.19e-03  5.31e-02  2.65e-04  3.94e-03  5.87e-01  
  8  +2.1648e-01  +2.9520e-01  7.87e-02  4.87e-04  2.17e-02  1.01e-04  1.78e-03  6.45e-01  
  9  +2.0611e-01  +2.3753e-01  3.14e-02  1.90e-04  8.46e-03  3.64e-05  7.45e-04  6.39e-01  
 10  +2.0022e-01  +2.0570e-01  5.48e-03  3.31e-05  1.46e-03  5.49e-06  1.39e-04  8.29e-01  
 11  +1.9932e-01  +2.0126e-01  1.95e-03  1.16e-05  5.14e-04  1.55e-06  5.21e-05  8.22e-01  
 12  +1.9882e-01  +1.9906e-01  2.32e-04  1.38e-06  6.08e-05  1.49e-07  6.39e-06  9.74e-01  
 13  +1.9875e-01  +1.9875e-01  3.40e-06  2.02e-08  8.91e-07  2.17e-09  9.40e-08  9.85e-01  
 14  +1.9875e-01  +1.9875e-01  3.40e-08  2.02e-10  8.92e-09  2.17e-11  9.41e-10  9.90e-01  
 15  +1.9875e-01  +1.9875e-01  3.41e-10  2.02e-12  8.93e-11  2.17e-13  9.43e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.3524ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:37 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:37 PM: Optimal value: 1.988e-01
(CVXPY) Sep 20 07:56:37 PM: Compilation took 6.412e-03 seconds
(CVXPY) Sep 20 07:56:37 PM: Solver (including time spent in interface) took 1.286e-02 seconds
FULL MODEL:
  Accruacy: 0.762
  Our objective: 0.524

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x2 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 1)                                             <-- (term's our objective: 0.044)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.008)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x3 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.036)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.008)
 OR (x1 = 1 AND x3 = 0 AND x4 = 0 AND x7 = 0 AND x8 = 1)                                             <-- (term's our objective: 0.04)
 OR (x1 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x7 = 1 AND x8 = 1)                                             <-- (term's our objective: 0.024)
 OR (x2 = 0 AND x3 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.036)
 OR (x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.008)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 7.768632888793945
Best over terms:
  Our final objective: 0.04400000000000005
    Its accruacy: 0.522
    Its hamming distance: 8
  Shortest hamming distance: 4
    Its our objective: 0.03600000000000004
  Highest accruacy: 0.522
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

