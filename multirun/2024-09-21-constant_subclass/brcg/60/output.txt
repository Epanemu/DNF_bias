Command:
python test_script.py -s constant_subclass -d 2 -n 1000 --seed 43 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29600000000000004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 2.

Computed total variation: 0.296
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:03 PM: Your problem has 505 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:03 PM: Finished problem compilation (took 5.522e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 505
  constraints   = 1005
  nnz(P)        = 0
  nnz(A)        = 2505
  cones (total) = 1
    : Nonnegative = 1,  numel = 1005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +5.0089e+02  5.00e+02  9.47e-01  2.17e+01  1.00e+00  1.00e+00   ------   
  1  +6.3676e-01  +8.7822e+01  8.72e+01  2.58e-01  1.02e+01  4.49e-03  3.90e-01  7.25e-01  
  2  +5.5689e-01  +1.6285e+01  1.57e+01  1.16e-01  5.24e+00  5.40e-03  2.09e-01  6.10e-01  
  3  +5.0023e-01  +1.5000e+00  1.00e+00  2.09e-02  8.99e-01  1.95e-03  1.94e-01  3.43e-01  
  4  +4.9864e-01  +8.0875e-01  3.10e-01  6.12e-03  2.70e-01  1.33e-03  3.97e-02  8.39e-01  
  5  +4.5934e-01  +8.7364e-01  4.14e-01  1.03e-03  4.68e-02  2.06e-02  3.05e-03  9.55e-01  
  6  +4.3629e-01  +6.0777e-01  1.71e-01  4.51e-04  2.02e-02  1.75e-04  1.56e-03  6.62e-01  
  7  +3.9721e-01  +4.2119e-01  2.40e-02  5.25e-05  2.34e-03  1.70e-06  2.26e-04  8.84e-01  
  8  +3.8932e-01  +3.8998e-01  6.57e-04  1.42e-06  6.32e-05  5.46e-08  6.53e-06  9.73e-01  
  9  +3.8910e-01  +3.8911e-01  6.58e-06  1.42e-08  6.33e-07  5.47e-10  6.55e-08  9.90e-01  
 10  +3.8910e-01  +3.8910e-01  6.58e-08  1.42e-10  6.33e-09  5.47e-12  6.55e-10  9.90e-01  
 11  +3.8910e-01  +3.8910e-01  6.58e-10  1.42e-12  6.33e-11  5.47e-14  6.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9329ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:03 PM: Optimal value: 3.891e-01
(CVXPY) Sep 20 07:26:03 PM: Compilation took 5.522e-03 seconds
(CVXPY) Sep 20 07:26:03 PM: Solver (including time spent in interface) took 2.003e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3891
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:03 PM: Your problem has 506 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:03 PM: Finished problem compilation (took 3.012e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 506
  constraints   = 1006
  nnz(P)        = 0
  nnz(A)        = 2697
  cones (total) = 1
    : Nonnegative = 1,  numel = 1006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9911e-01  +5.0178e+02  5.01e+02  9.48e-01  2.25e+01  1.00e+00  1.01e+00   ------   
  1  +6.3514e-01  +8.8139e+01  8.75e+01  2.59e-01  1.06e+01  4.49e-03  3.93e-01  7.24e-01  
  2  +5.5632e-01  +1.6187e+01  1.56e+01  1.15e-01  5.36e+00  5.51e-03  2.07e-01  6.20e-01  
  3  +5.0312e-01  +2.3573e+00  1.85e+00  3.77e-02  1.66e+00  2.38e-03  1.97e-01  2.09e-01  
  4  +5.0002e-01  +8.5802e-01  3.58e-01  7.29e-03  3.33e-01  7.83e-04  4.60e-02  8.04e-01  
  5  +4.8211e-01  +1.1563e+00  6.74e-01  2.11e-03  1.00e-01  1.08e-02  5.77e-03  9.60e-01  
  6  +4.5453e-01  +7.3064e-01  2.76e-01  6.38e-04  3.02e-02  2.32e-03  1.76e-03  9.03e-01  
  7  +4.4388e-01  +7.2931e-01  2.85e-01  4.85e-04  2.29e-02  2.40e-03  1.31e-03  4.64e-01  
  8  +4.2196e-01  +6.0730e-01  1.85e-01  3.83e-04  1.79e-02  5.76e-04  1.31e-03  1.10e-01  
  9  +3.9456e-01  +4.8065e-01  8.61e-02  1.72e-04  7.98e-03  2.66e-04  5.78e-04  6.96e-01  
 10  +3.6061e-01  +3.8060e-01  2.00e-02  3.54e-05  1.63e-03  1.30e-05  1.26e-04  9.01e-01  
 11  +3.5222e-01  +3.5251e-01  2.91e-04  5.11e-07  2.36e-05  1.32e-07  1.90e-06  9.86e-01  
 12  +3.5210e-01  +3.5210e-01  2.91e-06  5.10e-09  2.35e-07  1.32e-09  1.90e-08  9.90e-01  
 13  +3.5210e-01  +3.5210e-01  2.91e-08  5.10e-11  2.35e-09  1.32e-11  1.90e-10  9.90e-01  
 14  +3.5210e-01  +3.5210e-01  2.91e-10  5.10e-13  2.35e-11  1.32e-13  1.90e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.2902ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:03 PM: Optimal value: 3.521e-01
(CVXPY) Sep 20 07:26:03 PM: Compilation took 3.012e-03 seconds
(CVXPY) Sep 20 07:26:03 PM: Solver (including time spent in interface) took 2.000e-03 seconds
FULL MODEL:
  Accruacy: 0.648
  Our objective: 0.29600000000000004

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.296)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8192811012268066
Best over terms:
  Our final objective: 0.29600000000000004
    Its accruacy: 0.648
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29600000000000004
  Highest accruacy: 0.648
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

