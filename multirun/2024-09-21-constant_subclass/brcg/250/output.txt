Command:
python test_script.py -s constant_subclass -d 7 -n 100 --seed 43 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.02
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 7.

Computed total variation: 0.76
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:26 PM: Your problem has 65 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:26 PM: Finished problem compilation (took 6.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 65
  constraints   = 115
  nnz(P)        = 0
  nnz(A)        = 515
  cones (total) = 1
    : Nonnegative = 1,  numel = 115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9737e-01  +5.1163e+01  5.07e+01  8.68e-01  9.49e+00  1.00e+00  1.04e+00   ------   
  1  +5.8184e-01  +1.0929e+01  1.03e+01  3.54e-01  5.54e+00  3.84e-03  5.65e-01  6.14e-01  
  2  +5.1723e-01  +1.6404e+00  1.12e+00  8.00e-02  1.54e+00  1.53e-02  2.04e-01  9.90e-01  
  3  +4.8719e-01  +8.3390e-01  3.47e-01  1.64e-02  3.30e-01  1.00e-02  4.95e-02  8.38e-01  
  4  +4.5128e-01  +6.7122e-01  2.20e-01  6.14e-03  1.24e-01  8.45e-03  2.03e-02  6.43e-01  
  5  +4.2560e-01  +5.5926e-01  1.34e-01  3.04e-03  6.09e-02  3.78e-03  1.22e-02  5.63e-01  
  6  +3.9723e-01  +4.1972e-01  2.25e-02  4.92e-04  9.76e-03  3.41e-05  2.34e-03  9.31e-01  
  7  +3.9022e-01  +3.9061e-01  3.89e-04  8.31e-06  1.65e-04  5.24e-07  4.14e-05  9.84e-01  
  8  +3.9010e-01  +3.9011e-01  3.89e-06  8.30e-08  1.64e-06  5.24e-09  4.14e-07  9.90e-01  
  9  +3.9010e-01  +3.9010e-01  3.89e-08  8.30e-10  1.64e-08  5.24e-11  4.14e-09  9.90e-01  
 10  +3.9010e-01  +3.9010e-01  3.89e-10  8.30e-12  1.64e-10  5.24e-13  4.14e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 591.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:26 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:26 PM: Optimal value: 3.901e-01
(CVXPY) Sep 20 07:38:26 PM: Compilation took 6.509e-03 seconds
(CVXPY) Sep 20 07:38:26 PM: Solver (including time spent in interface) took 9.995e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:26 PM: Your problem has 75 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:26 PM: Finished problem compilation (took 3.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 125
  nnz(P)        = 0
  nnz(A)        = 629
  cones (total) = 1
    : Nonnegative = 1,  numel = 125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8924e-01  +5.2012e+01  5.15e+01  8.75e-01  9.69e+00  1.00e+00  1.07e+00   ------   
  1  +5.3856e-01  +1.1120e+01  1.06e+01  3.63e-01  5.57e+00  3.85e-03  5.80e-01  6.11e-01  
  2  +4.7389e-01  +2.2991e+00  1.83e+00  9.94e-02  1.94e+00  1.82e-02  2.34e-01  8.80e-01  
  3  +3.9650e-01  +1.1097e+00  7.13e-01  2.57e-02  5.22e-01  1.07e-02  6.93e-02  7.78e-01  
  4  +3.5164e-01  +7.1638e-01  3.65e-01  1.07e-02  2.13e-01  5.51e-03  3.38e-02  5.97e-01  
  5  +3.1398e-01  +4.7351e-01  1.60e-01  4.01e-03  7.86e-02  2.16e-03  1.52e-02  5.88e-01  
  6  +2.8954e-01  +3.3126e-01  4.17e-02  1.02e-03  1.97e-02  4.40e-04  4.50e-03  7.57e-01  
  7  +2.8084e-01  +2.8270e-01  1.86e-03  4.58e-05  8.85e-04  8.72e-06  2.18e-04  9.90e-01  
  8  +2.8035e-01  +2.8050e-01  1.55e-04  3.78e-06  7.27e-05  5.55e-07  1.92e-05  9.15e-01  
  9  +2.8030e-01  +2.8030e-01  1.97e-06  4.78e-08  9.19e-07  5.68e-09  2.55e-07  9.89e-01  
 10  +2.8030e-01  +2.8030e-01  1.97e-08  4.78e-10  9.18e-09  5.68e-11  2.55e-09  9.90e-01  
 11  +2.8030e-01  +2.8030e-01  1.97e-10  4.78e-12  9.18e-11  5.69e-13  2.55e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 663.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:26 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:26 PM: Optimal value: 2.803e-01
(CVXPY) Sep 20 07:38:26 PM: Compilation took 3.998e-03 seconds
(CVXPY) Sep 20 07:38:26 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2803
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:26 PM: Your problem has 85 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:26 PM: Finished problem compilation (took 3.875e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 85
  constraints   = 135
  nnz(P)        = 0
  nnz(A)        = 715
  cones (total) = 1
    : Nonnegative = 1,  numel = 135

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8795e-01  +5.2029e+01  5.15e+01  8.80e-01  9.65e+00  1.00e+00  1.07e+00   ------   
  1  +5.3455e-01  +1.1154e+01  1.06e+01  3.75e-01  5.46e+00  3.84e-03  5.86e-01  6.08e-01  
  2  +4.7071e-01  +2.1514e+00  1.68e+00  9.19e-02  1.78e+00  1.92e-02  2.19e-01  9.26e-01  
  3  +3.8230e-01  +1.1507e+00  7.68e-01  2.43e-02  5.03e-01  1.38e-02  6.54e-02  7.91e-01  
  4  +3.3551e-01  +7.8981e-01  4.54e-01  1.18e-02  2.44e-01  7.51e-03  3.45e-02  5.99e-01  
  5  +2.8484e-01  +4.0960e-01  1.25e-01  3.08e-03  6.34e-02  1.69e-03  1.01e-02  7.45e-01  
  6  +2.6668e-01  +3.5491e-01  8.82e-02  1.84e-03  4.14e-02  1.15e-03  6.18e-03  5.35e-01  
  7  +2.4481e-01  +2.8073e-01  3.59e-02  6.76e-04  1.57e-02  4.04e-04  2.42e-03  6.74e-01  
  8  +2.3135e-01  +2.3265e-01  1.30e-03  2.40e-05  5.58e-04  9.24e-06  9.01e-05  9.70e-01  
  9  +2.3082e-01  +2.3085e-01  3.34e-05  6.34e-07  1.45e-05  9.24e-08  2.44e-06  9.73e-01  
 10  +2.3080e-01  +2.3080e-01  3.39e-07  6.50e-09  1.48e-07  9.55e-10  2.53e-08  9.90e-01  
 11  +2.3080e-01  +2.3080e-01  3.39e-09  6.50e-11  1.48e-09  9.55e-12  2.53e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 824.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:26 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:26 PM: Optimal value: 2.308e-01
(CVXPY) Sep 20 07:38:26 PM: Compilation took 3.875e-03 seconds
(CVXPY) Sep 20 07:38:26 PM: Solver (including time spent in interface) took 2.002e-03 seconds
Iteration: 3, Objective: 0.2308
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:27 PM: Your problem has 95 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:27 PM: Finished problem compilation (took 3.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 95
  constraints   = 145
  nnz(P)        = 0
  nnz(A)        = 761
  cones (total) = 1
    : Nonnegative = 1,  numel = 145

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8432e-01  +5.2663e+01  5.22e+01  8.84e-01  9.43e+00  1.00e+00  1.08e+00   ------   
  1  +4.9464e-01  +1.1415e+01  1.09e+01  3.75e-01  5.30e+00  3.92e-03  5.90e-01  6.03e-01  
  2  +4.1673e-01  +2.4403e+00  2.02e+00  9.41e-02  1.78e+00  2.09e-02  2.20e-01  8.97e-01  
  3  +3.1674e-01  +1.1160e+00  7.99e-01  2.63e-02  5.16e-01  1.06e-02  6.98e-02  7.78e-01  
  4  +2.6309e-01  +5.9039e-01  3.27e-01  9.74e-03  1.88e-01  4.05e-03  2.96e-02  6.35e-01  
  5  +2.2242e-01  +3.3567e-01  1.13e-01  3.03e-03  5.93e-02  1.34e-03  1.05e-02  7.40e-01  
  6  +2.1211e-01  +2.9739e-01  8.53e-02  2.02e-03  4.25e-02  9.23e-04  7.09e-03  5.01e-01  
  7  +1.9492e-01  +2.3403e-01  3.91e-02  8.36e-04  1.84e-02  3.06e-04  3.11e-03  7.38e-01  
  8  +1.8194e-01  +1.8449e-01  2.55e-03  5.23e-05  1.16e-03  1.44e-05  2.05e-04  9.51e-01  
  9  +1.8111e-01  +1.8137e-01  2.58e-04  5.41e-06  1.18e-04  1.08e-06  2.24e-05  8.96e-01  
 10  +1.8100e-01  +1.8101e-01  4.81e-06  1.02e-07  2.21e-06  1.70e-08  4.47e-07  9.87e-01  
 11  +1.8100e-01  +1.8100e-01  4.80e-08  1.02e-09  2.21e-08  1.70e-10  4.47e-09  9.90e-01  
 12  +1.8100e-01  +1.8100e-01  4.81e-10  1.02e-11  2.21e-10  1.70e-12  4.47e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 893.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:27 PM: Optimal value: 1.810e-01
(CVXPY) Sep 20 07:38:27 PM: Compilation took 3.510e-03 seconds
(CVXPY) Sep 20 07:38:27 PM: Solver (including time spent in interface) took 1.002e-03 seconds
Iteration: 4, Objective: 0.1810
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:27 PM: Your problem has 105 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:27 PM: Finished problem compilation (took 3.997e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 105
  constraints   = 155
  nnz(P)        = 0
  nnz(A)        = 809
  cones (total) = 1
    : Nonnegative = 1,  numel = 155

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8194e-01  +5.2673e+01  5.22e+01  8.88e-01  9.23e+00  1.00e+00  1.09e+00   ------   
  1  +4.6759e-01  +1.1484e+01  1.10e+01  3.76e-01  5.12e+00  3.97e-03  5.88e-01  6.01e-01  
  2  +3.6699e-01  +2.3204e+00  1.95e+00  8.04e-02  1.49e+00  2.25e-02  1.93e-01  9.37e-01  
  3  +2.7907e-01  +1.0055e+00  7.26e-01  2.46e-02  4.62e-01  9.35e-03  6.58e-02  6.90e-01  
  4  +2.2095e-01  +4.5584e-01  2.35e-01  7.56e-03  1.39e-01  2.60e-03  2.32e-02  7.03e-01  
  5  +2.0026e-01  +3.7120e-01  1.71e-01  4.80e-03  9.09e-02  1.83e-03  1.56e-02  4.34e-01  
  6  +1.6868e-01  +2.2039e-01  5.17e-02  1.27e-03  2.47e-02  4.33e-04  4.67e-03  8.23e-01  
  7  +1.5587e-01  +1.6966e-01  1.38e-02  3.15e-04  6.15e-03  1.07e-04  1.26e-03  7.54e-01  
  8  +1.5149e-01  +1.5197e-01  4.81e-04  1.10e-05  2.14e-04  1.80e-06  4.60e-05  9.75e-01  
  9  +1.5131e-01  +1.5132e-01  1.26e-05  3.03e-07  5.76e-06  2.79e-08  1.36e-06  9.72e-01  
 10  +1.5130e-01  +1.5130e-01  1.26e-07  3.04e-09  5.77e-08  2.80e-10  1.37e-08  9.90e-01  
 11  +1.5130e-01  +1.5130e-01  1.26e-09  3.04e-11  5.77e-10  2.80e-12  1.37e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 954.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:27 PM: Optimal value: 1.513e-01
(CVXPY) Sep 20 07:38:27 PM: Compilation took 3.997e-03 seconds
(CVXPY) Sep 20 07:38:27 PM: Solver (including time spent in interface) took 2.004e-03 seconds
Iteration: 5, Objective: 0.1513
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:27 PM: Your problem has 115 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:27 PM: Finished problem compilation (took 4.504e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 115
  constraints   = 165
  nnz(P)        = 0
  nnz(A)        = 841
  cones (total) = 1
    : Nonnegative = 1,  numel = 165

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8109e-01  +5.2574e+01  5.21e+01  8.91e-01  9.01e+00  1.00e+00  1.08e+00   ------   
  1  +4.5057e-01  +1.1567e+01  1.11e+01  3.77e-01  4.92e+00  4.05e-03  5.82e-01  5.98e-01  
  2  +3.4461e-01  +2.5853e+00  2.24e+00  8.69e-02  1.55e+00  2.24e-02  2.05e-01  8.91e-01  
  3  +2.5742e-01  +8.8129e-01  6.24e-01  2.11e-02  3.82e-01  6.87e-03  5.71e-02  7.68e-01  
  4  +1.9935e-01  +4.0596e-01  2.07e-01  6.56e-03  1.16e-01  2.00e-03  2.03e-02  7.35e-01  
  5  +1.7838e-01  +3.1852e-01  1.40e-01  3.92e-03  7.20e-02  1.30e-03  1.28e-02  4.92e-01  
  6  +1.5245e-01  +1.9428e-01  4.18e-02  1.08e-03  2.02e-02  3.36e-04  3.83e-03  7.60e-01  
  7  +1.4188e-01  +1.4371e-01  1.82e-03  4.68e-05  8.72e-04  1.03e-05  1.75e-04  9.57e-01  
  8  +1.4153e-01  +1.4220e-01  6.69e-04  1.77e-05  3.27e-04  3.41e-06  7.03e-05  6.80e-01  
  9  +1.4133e-01  +1.4140e-01  7.63e-05  2.00e-06  3.70e-05  3.27e-07  8.57e-06  9.36e-01  
 10  +1.4130e-01  +1.4130e-01  1.01e-06  2.66e-08  4.91e-07  4.21e-09  1.15e-07  9.87e-01  
 11  +1.4130e-01  +1.4130e-01  1.01e-08  2.66e-10  4.91e-09  4.21e-11  1.15e-09  9.90e-01  
 12  +1.4130e-01  +1.4130e-01  1.01e-10  2.66e-12  4.92e-11  4.22e-13  1.15e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0916ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:27 PM: Optimal value: 1.413e-01
(CVXPY) Sep 20 07:38:27 PM: Compilation took 4.504e-03 seconds
(CVXPY) Sep 20 07:38:27 PM: Solver (including time spent in interface) took 1.005e-03 seconds
Iteration: 6, Objective: 0.1413
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:27 PM: Your problem has 125 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:27 PM: Finished problem compilation (took 3.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 125
  constraints   = 175
  nnz(P)        = 0
  nnz(A)        = 891
  cones (total) = 1
    : Nonnegative = 1,  numel = 175

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8094e-01  +5.2644e+01  5.22e+01  8.94e-01  8.84e+00  1.00e+00  1.08e+00   ------   
  1  +4.4601e-01  +1.1570e+01  1.11e+01  3.83e-01  4.76e+00  4.05e-03  5.82e-01  5.98e-01  
  2  +3.2712e-01  +2.7866e+00  2.46e+00  9.28e-02  1.58e+00  2.20e-02  2.22e-01  8.53e-01  
  3  +2.5257e-01  +1.0942e+00  8.42e-01  2.84e-02  5.03e-01  8.68e-03  7.73e-02  6.95e-01  
  4  +2.0058e-01  +4.5712e-01  2.57e-01  8.36e-03  1.46e-01  2.50e-03  2.58e-02  7.05e-01  
  5  +1.8158e-01  +3.8177e-01  2.00e-01  5.91e-03  1.06e-01  1.87e-03  1.90e-02  3.77e-01  
  6  +1.5454e-01  +2.4726e-01  9.27e-02  2.47e-03  4.50e-02  8.24e-04  8.64e-03  5.94e-01  
  7  +1.3360e-01  +1.4188e-01  8.28e-03  2.11e-04  3.85e-03  5.52e-05  7.99e-04  9.22e-01  
  8  +1.3174e-01  +1.3310e-01  1.37e-03  3.58e-05  6.44e-04  7.29e-06  1.43e-04  8.38e-01  
  9  +1.3137e-01  +1.3157e-01  2.03e-04  5.43e-06  9.61e-05  8.68e-07  2.38e-05  8.76e-01  
 10  +1.3130e-01  +1.3131e-01  3.65e-06  9.90e-08  1.74e-06  1.22e-08  4.49e-07  9.85e-01  
 11  +1.3130e-01  +1.3130e-01  3.65e-08  9.89e-10  1.74e-08  1.22e-10  4.49e-09  9.90e-01  
 12  +1.3130e-01  +1.3130e-01  3.66e-10  9.92e-12  1.75e-10  1.22e-12  4.50e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1449ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:27 PM: Optimal value: 1.313e-01
(CVXPY) Sep 20 07:38:27 PM: Compilation took 3.999e-03 seconds
(CVXPY) Sep 20 07:38:27 PM: Solver (including time spent in interface) took 1.999e-03 seconds
Iteration: 7, Objective: 0.1313
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:27 PM: Your problem has 135 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:27 PM: Finished problem compilation (took 5.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 135
  constraints   = 185
  nnz(P)        = 0
  nnz(A)        = 929
  cones (total) = 1
    : Nonnegative = 1,  numel = 185

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8022e-01  +5.2611e+01  5.21e+01  8.97e-01  8.66e+00  1.00e+00  1.08e+00   ------   
  1  +4.3678e-01  +1.1639e+01  1.12e+01  3.89e-01  4.64e+00  4.06e-03  5.84e-01  5.94e-01  
  2  +2.9442e-01  +2.5038e+00  2.21e+00  7.85e-02  1.30e+00  2.36e-02  1.98e-01  9.10e-01  
  3  +2.2755e-01  +7.9880e-01  5.71e-01  1.97e-02  3.34e-01  6.06e-03  5.75e-02  7.36e-01  
  4  +1.8390e-01  +4.8090e-01  2.97e-01  9.33e-03  1.56e-01  2.71e-03  3.06e-02  6.56e-01  
  5  +1.5881e-01  +3.1357e-01  1.55e-01  4.49e-03  7.60e-02  1.38e-03  1.61e-02  5.21e-01  
  6  +1.3742e-01  +1.6901e-01  3.16e-02  8.87e-04  1.49e-02  2.50e-04  3.44e-03  8.02e-01  
  7  +1.3189e-01  +1.3436e-01  2.46e-03  6.97e-05  1.17e-03  1.61e-05  2.82e-04  9.21e-01  
  8  +1.3144e-01  +1.3192e-01  4.83e-04  1.40e-05  2.31e-04  2.11e-06  6.28e-05  8.70e-01  
  9  +1.3131e-01  +1.3133e-01  2.58e-05  7.62e-07  1.24e-05  8.89e-08  3.59e-06  9.48e-01  
 10  +1.3130e-01  +1.3130e-01  2.61e-07  7.72e-09  1.26e-07  8.90e-10  3.66e-08  9.90e-01  
 11  +1.3130e-01  +1.3130e-01  2.61e-09  7.72e-11  1.26e-09  8.90e-12  3.67e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1918ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:27 PM: Optimal value: 1.313e-01
(CVXPY) Sep 20 07:38:27 PM: Compilation took 5.001e-03 seconds
(CVXPY) Sep 20 07:38:27 PM: Solver (including time spent in interface) took 1.514e-03 seconds
Iteration: 8, Objective: 0.1313
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:27 PM: Your problem has 136 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:27 PM: Finished problem compilation (took 4.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 136
  constraints   = 186
  nnz(P)        = 0
  nnz(A)        = 933
  cones (total) = 1
    : Nonnegative = 1,  numel = 186

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8022e-01  +5.2612e+01  5.21e+01  8.97e-01  8.64e+00  1.00e+00  1.08e+00   ------   
  1  +4.3621e-01  +1.1629e+01  1.12e+01  3.89e-01  4.63e+00  4.06e-03  5.84e-01  5.95e-01  
  2  +2.9390e-01  +2.5536e+00  2.26e+00  8.03e-02  1.33e+00  2.34e-02  2.01e-01  9.01e-01  
  3  +2.2841e-01  +8.2245e-01  5.94e-01  2.06e-02  3.49e-01  6.16e-03  5.95e-02  7.30e-01  
  4  +1.8211e-01  +4.6298e-01  2.81e-01  8.90e-03  1.49e-01  2.56e-03  2.91e-02  6.80e-01  
  5  +1.5952e-01  +3.1770e-01  1.58e-01  4.65e-03  7.87e-02  1.40e-03  1.64e-02  4.88e-01  
  6  +1.3806e-01  +1.7383e-01  3.58e-02  1.01e-03  1.71e-02  2.88e-04  3.86e-03  7.81e-01  
  7  +1.3192e-01  +1.3449e-01  2.57e-03  7.33e-05  1.23e-03  1.69e-05  2.91e-04  9.27e-01  
  8  +1.3144e-01  +1.3196e-01  5.12e-04  1.50e-05  2.45e-04  2.20e-06  6.66e-05  8.69e-01  
  9  +1.3131e-01  +1.3134e-01  2.97e-05  8.78e-07  1.43e-05  1.02e-07  4.14e-06  9.44e-01  
 10  +1.3130e-01  +1.3130e-01  3.01e-07  8.94e-09  1.45e-07  1.02e-09  4.25e-08  9.90e-01  
 11  +1.3130e-01  +1.3130e-01  3.01e-09  8.94e-11  1.45e-09  1.02e-11  4.25e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1468ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:27 PM: Optimal value: 1.313e-01
(CVXPY) Sep 20 07:38:27 PM: Compilation took 4.999e-03 seconds
(CVXPY) Sep 20 07:38:27 PM: Solver (including time spent in interface) took 1.616e-03 seconds
Iteration: 9, Objective: 0.1313
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:27 PM: Your problem has 141 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:27 PM: Finished problem compilation (took 3.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 141
  constraints   = 191
  nnz(P)        = 0
  nnz(A)        = 945
  cones (total) = 1
    : Nonnegative = 1,  numel = 191

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7974e-01  +5.2556e+01  5.21e+01  8.98e-01  8.54e+00  1.00e+00  1.08e+00   ------   
  1  +4.2358e-01  +1.1640e+01  1.12e+01  3.87e-01  4.53e+00  4.10e-03  5.79e-01  5.95e-01  
  2  +2.6788e-01  +2.4236e+00  2.16e+00  7.36e-02  1.21e+00  2.34e-02  1.88e-01  9.18e-01  
  3  +2.1752e-01  +6.7472e-01  4.57e-01  1.63e-02  2.71e-01  5.21e-03  4.81e-02  7.67e-01  
  4  +1.9213e-01  +5.5217e-01  3.60e-01  1.18e-02  1.95e-01  3.66e-03  3.67e-02  4.34e-01  
  5  +1.5770e-01  +3.0808e-01  1.50e-01  4.52e-03  7.51e-02  1.47e-03  1.57e-02  6.10e-01  
  6  +1.3748e-01  +1.7082e-01  3.33e-02  9.71e-04  1.61e-02  2.97e-04  3.63e-03  7.84e-01  
  7  +1.3192e-01  +1.3446e-01  2.54e-03  7.47e-05  1.23e-03  1.82e-05  2.91e-04  9.22e-01  
  8  +1.3145e-01  +1.3199e-01  5.41e-04  1.63e-05  2.62e-04  2.62e-06  7.19e-05  8.38e-01  
  9  +1.3131e-01  +1.3134e-01  2.98e-05  9.08e-07  1.45e-05  1.11e-07  4.27e-06  9.49e-01  
 10  +1.3130e-01  +1.3130e-01  3.04e-07  9.26e-09  1.48e-07  1.12e-09  4.39e-08  9.90e-01  
 11  +1.3130e-01  +1.3130e-01  3.04e-09  9.26e-11  1.48e-09  1.12e-11  4.40e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.193ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:27 PM: Optimal value: 1.313e-01
(CVXPY) Sep 20 07:38:27 PM: Compilation took 3.999e-03 seconds
(CVXPY) Sep 20 07:38:27 PM: Solver (including time spent in interface) took 2.510e-03 seconds
FULL MODEL:
  Accruacy: 0.85
  Our objective: 0.7000000000000001

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 0 AND x4 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.1)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 0)                                  <-- (term's our objective: 0.1)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 1)            <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 1)                       <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.14)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0)                       <-- (term's our objective: 0.04)
 OR (x3 = 0 AND x4 = 0 AND x6 = 0)                                             <-- (term's our objective: 0.18)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.6891801357269287
Best over terms:
  Our final objective: 0.17999999999999997
    Its accruacy: 0.59
    Its hamming distance: 4
  Shortest hamming distance: 4
    Its our objective: 0.17999999999999997
  Highest accruacy: 0.59
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

