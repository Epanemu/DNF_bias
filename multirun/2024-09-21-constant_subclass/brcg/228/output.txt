Command:
python test_script.py -s constant_subclass -d 6 -n 5000 --seed 34 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0168
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 6.

Computed total variation: 0.09840000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:17 PM: Your problem has 2513 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:17 PM: Finished problem compilation (took 1.501e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2513
  constraints   = 5013
  nnz(P)        = 0
  nnz(A)        = 22513
  cones (total) = 1
    : Nonnegative = 1,  numel = 5013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5007e+03  2.50e+03  9.79e-01  6.97e+01  1.00e+00  1.00e+00   ------   
  1  +5.9311e-01  +5.1464e+02  5.14e+02  3.83e-01  4.22e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4182e-01  +6.8295e+01  6.78e+01  1.47e-01  2.04e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.1005e-01  +1.6864e+01  1.64e+01  1.03e-01  1.40e+01  2.85e-05  2.38e-01  1.30e-01  
  4  +5.0023e-01  +9.9687e-01  4.97e-01  4.77e-03  6.65e-01  6.51e-06  1.19e-01  9.90e-01  
  5  +5.0002e-01  +5.6723e-01  6.72e-02  6.37e-04  8.94e-02  1.22e-06  2.32e-02  8.32e-01  
  6  +4.9999e-01  +5.5818e-01  5.82e-02  5.45e-04  7.65e-02  2.04e-06  8.53e-03  6.95e-01  
  7  +4.9824e-01  +5.6945e-01  7.12e-02  8.00e-05  1.13e-02  6.77e-05  2.60e-04  9.86e-01  
  8  +4.9414e-01  +5.3907e-01  4.49e-02  2.39e-05  3.38e-03  9.90e-05  7.80e-05  7.20e-01  
  9  +4.8877e-01  +5.0508e-01  1.63e-02  7.78e-06  1.10e-03  1.34e-05  2.79e-05  7.63e-01  
 10  +4.8546e-01  +4.9035e-01  4.88e-03  2.05e-06  2.90e-04  2.70e-06  8.08e-06  7.91e-01  
 11  +4.8408e-01  +4.8459e-01  5.10e-04  2.06e-07  2.91e-05  6.25e-08  8.47e-07  9.90e-01  
 12  +4.8390e-01  +4.8391e-01  5.24e-06  2.11e-09  2.97e-07  6.37e-10  8.71e-09  9.90e-01  
 13  +4.8390e-01  +4.8390e-01  5.24e-08  2.11e-11  2.97e-09  6.37e-12  8.71e-11  9.90e-01  
 14  +4.8390e-01  +4.8390e-01  5.24e-10  2.11e-13  2.98e-11  6.45e-14  8.82e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 30.8934ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:17 PM: Optimal value: 4.839e-01
(CVXPY) Sep 20 07:35:17 PM: Compilation took 1.501e-02 seconds
(CVXPY) Sep 20 07:35:17 PM: Solver (including time spent in interface) took 3.454e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4839
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:17 PM: Your problem has 2523 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:17 PM: Finished problem compilation (took 1.008e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2523
  constraints   = 5023
  nnz(P)        = 0
  nnz(A)        = 25246
  cones (total) = 1
    : Nonnegative = 1,  numel = 5023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.79e-01  7.10e+01  1.00e+00  1.00e+00   ------   
  1  +5.9299e-01  +5.1483e+02  5.14e+02  3.83e-01  4.30e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4166e-01  +6.8130e+01  6.76e+01  1.46e-01  2.07e+01  1.15e-02  2.44e-01  8.27e-01  
  3  +5.0999e-01  +1.6802e+01  1.63e+01  1.03e-01  1.42e+01  2.85e-05  2.38e-01  1.33e-01  
  4  +5.0047e-01  +1.3894e+00  8.89e-01  8.55e-03  1.20e+00  7.16e-06  1.52e-01  7.06e-01  
  5  +5.0013e-01  +7.8423e-01  2.84e-01  2.70e-03  3.85e-01  2.95e-06  7.68e-02  5.46e-01  
  6  +5.0010e-01  +7.1697e-01  2.17e-01  2.06e-03  2.93e-01  2.28e-06  5.50e-02  3.98e-01  
  7  +5.0009e-01  +6.6828e-01  1.68e-01  1.59e-03  2.26e-01  1.42e-06  2.93e-02  8.61e-01  
  8  +4.9996e-01  +5.7726e-01  7.73e-02  6.04e-04  8.62e-02  3.09e-06  3.70e-03  9.14e-01  
  9  +4.9821e-01  +5.7015e-01  7.19e-02  5.75e-05  8.28e-03  5.14e-05  2.00e-04  9.49e-01  
 10  +4.9634e-01  +5.5856e-01  6.22e-02  4.58e-05  6.60e-03  4.18e-05  1.63e-04  2.46e-01  
 11  +4.9231e-01  +5.3449e-01  4.22e-02  2.99e-05  4.31e-03  3.31e-06  1.12e-04  7.55e-01  
 12  +4.9200e-01  +5.3302e-01  4.10e-02  2.74e-05  3.95e-03  2.71e-06  1.00e-04  5.48e-01  
 13  +4.8859e-01  +5.1203e-01  2.34e-02  1.32e-05  1.90e-03  1.49e-06  4.63e-05  9.90e-01  
 14  +4.8537e-01  +4.9404e-01  8.67e-03  3.11e-06  4.48e-04  1.21e-06  9.99e-06  8.39e-01  
 15  +4.8428e-01  +4.9098e-01  6.70e-03  2.94e-06  4.22e-04  6.57e-07  9.80e-06  2.38e-01  
 16  +4.8138e-01  +4.8335e-01  1.97e-03  6.48e-07  9.32e-05  2.49e-07  2.14e-06  8.30e-01  
 17  +4.8051e-01  +4.8054e-01  2.76e-05  9.02e-09  1.30e-06  3.28e-09  3.01e-08  9.89e-01  
 18  +4.8050e-01  +4.8050e-01  2.76e-07  9.01e-11  1.30e-08  3.28e-11  3.01e-10  9.90e-01  
 19  +4.8050e-01  +4.8050e-01  2.77e-09  9.02e-13  1.30e-10  3.33e-13  3.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 41.8756ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:17 PM: Optimal value: 4.805e-01
(CVXPY) Sep 20 07:35:17 PM: Compilation took 1.008e-02 seconds
(CVXPY) Sep 20 07:35:17 PM: Solver (including time spent in interface) took 4.555e-02 seconds
Iteration: 2, Objective: 0.4805
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:18 PM: Your problem has 2533 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:18 PM: Finished problem compilation (took 1.273e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2533
  constraints   = 5033
  nnz(P)        = 0
  nnz(A)        = 27361
  cones (total) = 1
    : Nonnegative = 1,  numel = 5033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5012e+03  2.50e+03  9.79e-01  7.19e+01  1.00e+00  1.00e+00   ------   
  1  +5.9280e-01  +5.1501e+02  5.14e+02  3.84e-01  4.35e+01  3.92e-03  5.26e-01  6.26e-01  
  2  +5.4148e-01  +6.7938e+01  6.74e+01  1.46e-01  2.08e+01  1.16e-02  2.43e-01  8.29e-01  
  3  +5.0995e-01  +1.6759e+01  1.62e+01  1.03e-01  1.43e+01  2.86e-05  2.37e-01  1.35e-01  
  4  +5.0058e-01  +1.5724e+00  1.07e+00  1.03e-02  1.47e+00  7.47e-06  1.62e-01  6.23e-01  
  5  +5.0012e-01  +7.8922e-01  2.89e-01  2.75e-03  3.97e-01  2.97e-06  7.64e-02  5.95e-01  
  6  +5.0007e-01  +6.9520e-01  1.95e-01  1.85e-03  2.67e-01  2.19e-06  4.34e-02  5.74e-01  
  7  +5.0007e-01  +6.7838e-01  1.78e-01  1.63e-03  2.36e-01  2.17e-06  1.66e-02  9.90e-01  
  8  +4.9963e-01  +6.1706e-01  1.17e-01  3.96e-04  5.76e-02  1.27e-05  1.39e-03  9.25e-01  
  9  +4.9663e-01  +5.9052e-01  9.39e-02  6.02e-05  8.80e-03  6.81e-05  1.90e-04  8.65e-01  
 10  +4.9624e-01  +5.8646e-01  9.02e-02  5.89e-05  8.61e-03  5.91e-05  1.85e-04  9.06e-02  
 11  +4.9561e-01  +5.8226e-01  8.66e-02  5.32e-05  7.77e-03  5.04e-05  1.65e-04  2.39e-01  
 12  +4.9382e-01  +5.7427e-01  8.05e-02  3.95e-05  5.76e-03  5.32e-05  1.22e-04  3.00e-01  
 13  +4.9289e-01  +5.6907e-01  7.62e-02  3.91e-05  5.71e-03  4.62e-05  1.22e-04  2.78e-02  
 14  +4.9150e-01  +5.6113e-01  6.96e-02  3.30e-05  4.82e-03  2.22e-05  1.03e-04  5.63e-01  
 15  +4.9012e-01  +5.5367e-01  6.36e-02  3.16e-05  4.61e-03  1.41e-05  9.91e-05  2.86e-01  
 16  +4.8483e-01  +5.2979e-01  4.50e-02  1.96e-05  2.85e-03  7.64e-06  6.26e-05  5.86e-01  
 17  +4.7797e-01  +5.0122e-01  2.32e-02  9.05e-06  1.32e-03  3.71e-06  2.98e-05  5.56e-01  
 18  +4.7757e-01  +4.9852e-01  2.10e-02  8.15e-06  1.19e-03  2.93e-06  2.72e-05  4.21e-01  
 19  +4.7753e-01  +4.9816e-01  2.06e-02  8.03e-06  1.17e-03  2.82e-06  2.71e-05  6.97e-02  
 20  +4.7229e-01  +4.7826e-01  5.97e-03  2.17e-06  3.16e-04  7.85e-07  7.59e-06  7.36e-01  
 21  +4.7022e-01  +4.7052e-01  2.98e-04  1.06e-07  1.54e-05  3.49e-08  3.81e-07  9.53e-01  
 22  +4.7010e-01  +4.7010e-01  3.01e-06  1.06e-09  1.55e-07  3.50e-10  3.85e-09  9.90e-01  
 23  +4.7010e-01  +4.7010e-01  3.01e-08  1.06e-11  1.55e-09  3.50e-12  3.85e-11  9.90e-01  
 24  +4.7010e-01  +4.7010e-01  3.01e-10  1.06e-13  1.55e-11  3.57e-14  3.93e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 56.9253ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:18 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:18 PM: Optimal value: 4.701e-01
(CVXPY) Sep 20 07:35:18 PM: Compilation took 1.273e-02 seconds
(CVXPY) Sep 20 07:35:18 PM: Solver (including time spent in interface) took 6.063e-02 seconds
Iteration: 3, Objective: 0.4701
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:18 PM: Your problem has 2543 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:18 PM: Finished problem compilation (took 1.456e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2543
  constraints   = 5043
  nnz(P)        = 0
  nnz(A)        = 29091
  cones (total) = 1
    : Nonnegative = 1,  numel = 5043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5009e+03  2.50e+03  9.79e-01  7.24e+01  1.00e+00  1.00e+00   ------   
  1  +5.9273e-01  +5.1497e+02  5.14e+02  3.84e-01  4.37e+01  3.92e-03  5.26e-01  6.26e-01  
  2  +5.4138e-01  +6.7835e+01  6.73e+01  1.46e-01  2.09e+01  1.16e-02  2.43e-01  8.30e-01  
  3  +5.0992e-01  +1.6721e+01  1.62e+01  1.03e-01  1.44e+01  2.86e-05  2.37e-01  1.36e-01  
  4  +5.0057e-01  +1.5597e+00  1.06e+00  1.02e-02  1.46e+00  7.50e-06  1.60e-01  6.32e-01  
  5  +5.0010e-01  +7.5821e-01  2.58e-01  2.46e-03  3.57e-01  2.85e-06  6.84e-02  6.41e-01  
  6  +5.0007e-01  +7.1279e-01  2.13e-01  2.02e-03  2.94e-01  2.67e-06  4.54e-02  4.10e-01  
  7  +4.9998e-01  +6.5515e-01  1.55e-01  1.41e-03  2.05e-01  3.83e-06  1.31e-02  8.55e-01  
  8  +4.9780e-01  +6.3359e-01  1.36e-01  1.86e-04  2.73e-02  5.96e-05  5.97e-04  9.90e-01  
  9  +4.9584e-01  +6.1460e-01  1.19e-01  1.10e-04  1.63e-02  7.10e-05  3.49e-04  4.76e-01  
 10  +4.9521e-01  +6.0725e-01  1.12e-01  8.96e-05  1.32e-02  6.15e-05  2.79e-04  3.64e-01  
 11  +4.9250e-01  +5.8590e-01  9.34e-02  5.68e-05  8.37e-03  4.74e-05  1.75e-04  5.78e-01  
 12  +4.9153e-01  +5.8104e-01  8.95e-02  4.70e-05  6.92e-03  3.84e-05  1.44e-04  3.97e-01  
 13  +4.9036e-01  +5.7312e-01  8.28e-02  4.48e-05  6.60e-03  2.42e-05  1.38e-04  2.92e-01  
 14  +4.8199e-01  +5.3685e-01  5.49e-02  2.34e-05  3.45e-03  1.41e-05  7.38e-05  6.22e-01  
 15  +4.7234e-01  +4.9765e-01  2.53e-02  9.87e-06  1.46e-03  5.06e-06  3.22e-05  6.39e-01  
 16  +4.7062e-01  +4.8930e-01  1.87e-02  6.90e-06  1.02e-03  2.47e-06  2.26e-05  9.26e-01  
 17  +4.6450e-01  +4.6720e-01  2.69e-03  9.77e-07  1.44e-04  3.26e-07  3.31e-06  8.69e-01  
 18  +4.6353e-01  +4.6384e-01  3.03e-04  1.09e-07  1.61e-05  3.53e-08  3.78e-07  8.97e-01  
 19  +4.6340e-01  +4.6341e-01  5.47e-06  1.93e-09  2.86e-07  6.27e-10  6.90e-09  9.89e-01  
 20  +4.6340e-01  +4.6340e-01  5.47e-08  1.93e-11  2.86e-09  6.27e-12  6.90e-11  9.90e-01  
 21  +4.6340e-01  +4.6340e-01  5.49e-10  1.94e-13  2.87e-11  7.47e-14  8.15e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 54.347ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:18 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:18 PM: Optimal value: 4.634e-01
(CVXPY) Sep 20 07:35:18 PM: Compilation took 1.456e-02 seconds
(CVXPY) Sep 20 07:35:18 PM: Solver (including time spent in interface) took 5.835e-02 seconds
Iteration: 4, Objective: 0.4634
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:18 PM: Your problem has 2553 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:18 PM: Finished problem compilation (took 1.502e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2553
  constraints   = 5053
  nnz(P)        = 0
  nnz(A)        = 30133
  cones (total) = 1
    : Nonnegative = 1,  numel = 5053

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5009e+03  2.50e+03  9.79e-01  7.25e+01  1.00e+00  1.00e+00   ------   
  1  +5.9263e-01  +5.1524e+02  5.15e+02  3.85e-01  4.38e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4126e-01  +6.7735e+01  6.72e+01  1.46e-01  2.08e+01  1.16e-02  2.44e-01  8.31e-01  
  3  +5.0989e-01  +1.6696e+01  1.62e+01  1.03e-01  1.44e+01  2.87e-05  2.37e-01  1.37e-01  
  4  +5.0063e-01  +1.6598e+00  1.16e+00  1.12e-02  1.60e+00  7.66e-06  1.64e-01  5.94e-01  
  5  +5.0012e-01  +8.0505e-01  3.05e-01  2.91e-03  4.23e-01  3.13e-06  7.75e-02  6.02e-01  
  6  +5.0007e-01  +7.2295e-01  2.23e-01  2.12e-03  3.08e-01  2.70e-06  4.52e-02  5.10e-01  
  7  +5.0004e-01  +7.2660e-01  2.27e-01  2.00e-03  2.91e-01  3.87e-06  1.55e-02  9.74e-01  
  8  +4.9872e-01  +6.3247e-01  1.34e-01  2.35e-04  3.45e-02  3.54e-05  7.55e-04  9.78e-01  
  9  +4.9743e-01  +6.2370e-01  1.26e-01  1.38e-04  2.03e-02  5.14e-05  4.34e-04  4.78e-01  
 10  +4.9642e-01  +6.1476e-01  1.18e-01  1.00e-04  1.47e-02  4.57e-05  3.12e-04  5.19e-01  
 11  +4.9475e-01  +6.0537e-01  1.11e-01  7.44e-05  1.10e-02  4.21e-05  2.32e-04  4.42e-01  
 12  +4.9335e-01  +5.9539e-01  1.02e-01  6.67e-05  9.82e-03  2.08e-05  2.09e-04  5.31e-01  
 13  +4.8607e-01  +5.6377e-01  7.77e-02  3.76e-05  5.54e-03  1.70e-05  1.20e-04  5.57e-01  
 14  +4.8357e-01  +5.5353e-01  7.00e-02  3.32e-05  4.89e-03  1.08e-05  1.07e-04  4.39e-01  
 15  +4.7983e-01  +5.3873e-01  5.89e-02  2.65e-05  3.90e-03  8.65e-06  8.68e-05  2.48e-01  
 16  +4.7492e-01  +5.1901e-01  4.41e-02  1.85e-05  2.73e-03  3.76e-06  6.20e-05  9.52e-01  
 17  +4.6728e-01  +4.9038e-01  2.31e-02  9.05e-06  1.34e-03  1.97e-06  3.14e-05  6.04e-01  
 18  +4.5939e-01  +4.6106e-01  1.67e-03  6.21e-07  9.18e-05  1.17e-07  2.27e-06  9.60e-01  
 19  +4.5871e-01  +4.5873e-01  1.97e-05  7.29e-09  1.08e-06  1.32e-09  2.70e-08  9.89e-01  
 20  +4.5870e-01  +4.5870e-01  1.97e-07  7.29e-11  1.08e-08  1.32e-11  2.70e-10  9.90e-01  
 21  +4.5870e-01  +4.5870e-01  1.97e-09  7.29e-13  1.08e-10  1.33e-13  2.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 56.8282ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:18 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:18 PM: Optimal value: 4.587e-01
(CVXPY) Sep 20 07:35:18 PM: Compilation took 1.502e-02 seconds
(CVXPY) Sep 20 07:35:18 PM: Solver (including time spent in interface) took 6.121e-02 seconds
Iteration: 5, Objective: 0.4587
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:18 PM: Your problem has 2563 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:18 PM: Finished problem compilation (took 1.664e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2563
  constraints   = 5063
  nnz(P)        = 0
  nnz(A)        = 31120
  cones (total) = 1
    : Nonnegative = 1,  numel = 5063

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.79e-01  7.26e+01  1.00e+00  1.00e+00   ------   
  1  +5.9255e-01  +5.1531e+02  5.15e+02  3.85e-01  4.38e+01  3.91e-03  5.28e-01  6.26e-01  
  2  +5.4120e-01  +6.7670e+01  6.71e+01  1.46e-01  2.08e+01  1.16e-02  2.43e-01  8.32e-01  
  3  +5.0987e-01  +1.6677e+01  1.62e+01  1.03e-01  1.43e+01  2.88e-05  2.37e-01  1.38e-01  
  4  +5.0067e-01  +1.7234e+00  1.22e+00  1.18e-02  1.69e+00  7.76e-06  1.67e-01  5.72e-01  
  5  +5.0014e-01  +8.4237e-01  3.42e-01  3.27e-03  4.75e-01  3.34e-06  8.38e-02  5.72e-01  
  6  +5.0006e-01  +7.1277e-01  2.13e-01  2.02e-03  2.95e-01  2.69e-06  4.06e-02  6.10e-01  
  7  +4.9991e-01  +6.9922e-01  1.99e-01  1.66e-03  2.42e-01  6.25e-06  1.05e-02  8.72e-01  
  8  +4.9594e-01  +6.4690e-01  1.51e-01  1.36e-04  2.00e-02  9.90e-05  4.30e-04  9.72e-01  
  9  +4.9457e-01  +6.3441e-01  1.40e-01  1.00e-04  1.48e-02  8.98e-05  3.14e-04  4.36e-01  
 10  +4.9443e-01  +6.2465e-01  1.30e-01  8.89e-05  1.31e-02  5.41e-05  2.78e-04  4.35e-01  
 11  +4.9280e-01  +6.1355e-01  1.21e-01  7.53e-05  1.11e-02  4.11e-05  2.36e-04  3.63e-01  
 12  +4.8234e-01  +5.6417e-01  8.18e-02  3.58e-05  5.26e-03  3.25e-05  1.15e-04  5.96e-01  
 13  +4.7369e-01  +5.2555e-01  5.19e-02  2.18e-05  3.20e-03  9.91e-06  7.31e-05  6.66e-01  
 14  +4.7159e-01  +5.1564e-01  4.40e-02  1.76e-05  2.59e-03  4.75e-06  5.97e-05  8.87e-01  
 15  +4.6813e-01  +5.0283e-01  3.47e-02  1.33e-05  1.95e-03  3.91e-06  4.54e-05  8.42e-01  
 16  +4.6244e-01  +4.8178e-01  1.93e-02  7.18e-06  1.05e-03  2.16e-06  2.52e-05  4.82e-01  
 17  +4.6138e-01  +4.7769e-01  1.63e-02  6.01e-06  8.82e-04  1.87e-06  2.12e-05  3.49e-01  
 18  +4.5570e-01  +4.5720e-01  1.50e-03  5.40e-07  7.92e-05  1.70e-07  1.96e-06  9.90e-01  
 19  +4.5511e-01  +4.5513e-01  1.84e-05  6.63e-09  9.72e-07  2.07e-09  2.42e-08  9.88e-01  
 20  +4.5510e-01  +4.5510e-01  1.84e-07  6.63e-11  9.72e-09  2.07e-11  2.42e-10  9.90e-01  
 21  +4.5510e-01  +4.5510e-01  1.84e-09  6.63e-13  9.72e-11  2.08e-13  2.43e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 60.6327ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:18 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:18 PM: Optimal value: 4.551e-01
(CVXPY) Sep 20 07:35:18 PM: Compilation took 1.664e-02 seconds
(CVXPY) Sep 20 07:35:18 PM: Solver (including time spent in interface) took 6.533e-02 seconds
Iteration: 6, Objective: 0.4551
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:18 PM: Your problem has 2570 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:18 PM: Finished problem compilation (took 1.752e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2570
  constraints   = 5070
  nnz(P)        = 0
  nnz(A)        = 31883
  cones (total) = 1
    : Nonnegative = 1,  numel = 5070

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.79e-01  7.27e+01  1.00e+00  1.00e+00   ------   
  1  +5.9255e-01  +5.1524e+02  5.15e+02  3.85e-01  4.38e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4115e-01  +6.7617e+01  6.71e+01  1.46e-01  2.07e+01  1.16e-02  2.43e-01  8.32e-01  
  3  +5.0986e-01  +1.6657e+01  1.61e+01  1.03e-01  1.43e+01  2.88e-05  2.37e-01  1.39e-01  
  4  +5.0065e-01  +1.6819e+00  1.18e+00  1.14e-02  1.64e+00  7.72e-06  1.65e-01  5.89e-01  
  5  +5.0014e-01  +8.4808e-01  3.48e-01  3.33e-03  4.84e-01  3.42e-06  8.33e-02  5.61e-01  
  6  +5.0007e-01  +7.3824e-01  2.38e-01  2.27e-03  3.30e-01  3.12e-06  4.11e-02  6.19e-01  
  7  +4.9984e-01  +7.4087e-01  2.41e-01  1.79e-03  2.62e-01  8.99e-06  9.38e-03  9.07e-01  
  8  +4.9557e-01  +6.8397e-01  1.88e-01  1.68e-04  2.47e-02  1.06e-04  5.46e-04  9.44e-01  
  9  +4.9596e-01  +6.7264e-01  1.77e-01  1.53e-04  2.25e-02  7.22e-05  4.87e-04  3.42e-01  
 10  +4.9355e-01  +6.4420e-01  1.51e-01  1.03e-04  1.52e-02  6.08e-05  3.27e-04  4.79e-01  
 11  +4.9404e-01  +6.3922e-01  1.45e-01  9.56e-05  1.41e-02  4.14e-05  3.00e-04  3.79e-01  
 12  +4.9279e-01  +6.1923e-01  1.26e-01  8.06e-05  1.19e-02  1.06e-05  2.55e-04  7.92e-01  
 13  +4.8497e-01  +5.8165e-01  9.67e-02  4.64e-05  6.83e-03  9.62e-06  1.49e-04  5.28e-01  
 14  +4.7981e-01  +5.5852e-01  7.87e-02  3.61e-05  5.31e-03  7.51e-06  1.19e-04  2.59e-01  
 15  +4.7367e-01  +5.3088e-01  5.72e-02  2.47e-05  3.63e-03  5.14e-06  8.35e-05  6.13e-01  
 16  +4.7219e-01  +5.2356e-01  5.14e-02  2.17e-05  3.19e-03  4.86e-06  7.44e-05  6.58e-01  
 17  +4.6823e-01  +5.0760e-01  3.94e-02  1.60e-05  2.35e-03  3.81e-06  5.55e-05  4.36e-01  
 18  +4.6637e-01  +5.0086e-01  3.45e-02  1.33e-05  1.96e-03  3.67e-06  4.61e-05  6.07e-01  
 19  +4.6012e-01  +4.7730e-01  1.72e-02  6.45e-06  9.47e-04  1.78e-06  2.30e-05  5.27e-01  
 20  +4.5557e-01  +4.6006e-01  4.48e-03  1.64e-06  2.41e-04  5.31e-07  6.02e-06  9.90e-01  
 21  +4.5387e-01  +4.5403e-01  1.66e-04  6.05e-08  8.89e-06  1.93e-08  2.25e-07  9.65e-01  
 22  +4.5380e-01  +4.5380e-01  1.66e-06  6.06e-10  8.90e-08  1.94e-10  2.25e-09  9.90e-01  
 23  +4.5380e-01  +4.5380e-01  1.66e-08  6.06e-12  8.90e-10  1.94e-12  2.25e-11  9.90e-01  
 24  +4.5380e-01  +4.5380e-01  1.66e-10  6.06e-14  8.90e-12  1.94e-14  2.26e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 67.4077ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:18 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:18 PM: Optimal value: 4.538e-01
(CVXPY) Sep 20 07:35:18 PM: Compilation took 1.752e-02 seconds
(CVXPY) Sep 20 07:35:18 PM: Solver (including time spent in interface) took 7.209e-02 seconds
Iteration: 7, Objective: 0.4538
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:19 PM: Your problem has 2571 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:19 PM: Finished problem compilation (took 1.916e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2571
  constraints   = 5071
  nnz(P)        = 0
  nnz(A)        = 31958
  cones (total) = 1
    : Nonnegative = 1,  numel = 5071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.79e-01  7.27e+01  1.00e+00  1.00e+00   ------   
  1  +5.9227e-01  +5.1581e+02  5.15e+02  3.87e-01  4.38e+01  3.91e-03  5.29e-01  6.25e-01  
  2  +5.4107e-01  +6.7612e+01  6.71e+01  1.47e-01  2.08e+01  1.17e-02  2.44e-01  8.34e-01  
  3  +5.0984e-01  +1.6657e+01  1.61e+01  1.03e-01  1.43e+01  2.90e-05  2.37e-01  1.41e-01  
  4  +5.0064e-01  +1.6711e+00  1.17e+00  1.13e-02  1.62e+00  7.72e-06  1.64e-01  5.95e-01  
  5  +5.0015e-01  +8.5385e-01  3.54e-01  3.39e-03  4.92e-01  3.50e-06  8.39e-02  5.54e-01  
  6  +5.0007e-01  +7.3997e-01  2.40e-01  2.28e-03  3.32e-01  3.23e-06  4.00e-02  6.42e-01  
  7  +4.9983e-01  +7.5748e-01  2.58e-01  1.86e-03  2.72e-01  9.81e-06  9.38e-03  9.05e-01  
  8  +4.9508e-01  +6.8817e-01  1.93e-01  1.57e-04  2.31e-02  1.17e-04  5.12e-04  9.48e-01  
  9  +4.9397e-01  +6.6862e-01  1.75e-01  1.35e-04  1.99e-02  9.23e-05  4.34e-04  2.71e-01  
 10  +4.9266e-01  +6.5407e-01  1.61e-01  1.03e-04  1.52e-02  8.17e-05  3.26e-04  3.95e-01  
 11  +4.9311e-01  +6.4631e-01  1.53e-01  9.83e-05  1.45e-02  5.36e-05  3.12e-04  3.07e-01  
 12  +4.9158e-01  +6.3015e-01  1.39e-01  8.45e-05  1.24e-02  3.55e-05  2.69e-04  3.85e-01  
 13  +4.8800e-01  +6.0272e-01  1.15e-01  6.34e-05  9.32e-03  1.56e-05  2.04e-04  6.58e-01  
 14  +4.7841e-01  +5.5403e-01  7.56e-02  3.60e-05  5.28e-03  7.01e-06  1.20e-04  7.38e-01  
 15  +4.7513e-01  +5.3962e-01  6.45e-02  2.91e-05  4.28e-03  5.80e-06  9.86e-05  4.58e-01  
 16  +4.6864e-01  +5.1317e-01  4.45e-02  1.86e-05  2.72e-03  3.98e-06  6.46e-05  6.41e-01  
 17  +4.5784e-01  +4.6990e-01  1.21e-02  4.68e-06  6.86e-04  9.45e-07  1.72e-05  7.59e-01  
 18  +4.5643e-01  +4.6430e-01  7.87e-03  3.01e-06  4.42e-04  7.21e-07  1.13e-05  6.47e-01  
 19  +4.5464e-01  +4.5759e-01  2.95e-03  1.11e-06  1.63e-04  2.99e-07  4.19e-06  7.59e-01  
 20  +4.5380e-01  +4.5458e-01  7.79e-04  2.93e-07  4.29e-05  7.98e-08  1.11e-06  7.76e-01  
 21  +4.5351e-01  +4.5353e-01  1.85e-05  6.94e-09  1.02e-06  1.90e-09  2.65e-08  9.78e-01  
 22  +4.5350e-01  +4.5350e-01  1.85e-07  6.94e-11  1.02e-08  1.90e-11  2.65e-10  9.90e-01  
 23  +4.5350e-01  +4.5350e-01  1.85e-09  6.94e-13  1.02e-10  1.91e-13  2.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 63.7899ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:19 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:19 PM: Optimal value: 4.535e-01
(CVXPY) Sep 20 07:35:19 PM: Compilation took 1.916e-02 seconds
(CVXPY) Sep 20 07:35:19 PM: Solver (including time spent in interface) took 6.758e-02 seconds
Iteration: 8, Objective: 0.4535
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:19 PM: Your problem has 2573 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:19 PM: Finished problem compilation (took 1.803e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2573
  constraints   = 5073
  nnz(P)        = 0
  nnz(A)        = 32085
  cones (total) = 1
    : Nonnegative = 1,  numel = 5073

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.79e-01  7.27e+01  1.00e+00  1.00e+00   ------   
  1  +5.9223e-01  +5.1584e+02  5.15e+02  3.87e-01  4.38e+01  3.91e-03  5.30e-01  6.25e-01  
  2  +5.4104e-01  +6.7582e+01  6.70e+01  1.46e-01  2.07e+01  1.17e-02  2.44e-01  8.34e-01  
  3  +5.0984e-01  +1.6651e+01  1.61e+01  1.03e-01  1.43e+01  2.90e-05  2.37e-01  1.41e-01  
  4  +5.0062e-01  +1.6419e+00  1.14e+00  1.10e-02  1.58e+00  7.69e-06  1.62e-01  6.07e-01  
  5  +5.0014e-01  +8.4119e-01  3.41e-01  3.27e-03  4.75e-01  3.46e-06  8.11e-02  5.65e-01  
  6  +5.0007e-01  +7.5010e-01  2.50e-01  2.38e-03  3.46e-01  3.52e-06  4.00e-02  6.14e-01  
  7  +4.9978e-01  +7.6029e-01  2.61e-01  1.82e-03  2.66e-01  1.13e-05  8.94e-03  8.86e-01  
  8  +4.9584e-01  +7.0381e-01  2.08e-01  2.13e-04  3.14e-02  9.99e-05  7.07e-04  9.26e-01  
  9  +4.9582e-01  +6.9392e-01  1.98e-01  1.96e-04  2.89e-02  8.29e-05  6.43e-04  2.21e-01  
 10  +4.9288e-01  +6.5896e-01  1.66e-01  1.27e-04  1.87e-02  7.49e-05  4.13e-04  4.62e-01  
 11  +4.9227e-01  +6.4885e-01  1.57e-01  1.03e-04  1.52e-02  6.01e-05  3.31e-04  4.10e-01  
 12  +4.9226e-01  +6.4110e-01  1.49e-01  9.82e-05  1.45e-02  4.11e-05  3.14e-04  3.03e-01  
 13  +4.8909e-01  +6.1879e-01  1.30e-01  7.93e-05  1.17e-02  2.50e-05  2.59e-04  4.56e-01  
 14  +4.8142e-01  +5.7717e-01  9.57e-02  4.86e-05  7.14e-03  1.72e-05  1.62e-04  4.96e-01  
 15  +4.7707e-01  +5.5623e-01  7.92e-02  3.79e-05  5.56e-03  1.31e-05  1.29e-04  2.92e-01  
 16  +4.7384e-01  +5.3861e-01  6.48e-02  2.92e-05  4.28e-03  7.33e-06  1.00e-04  6.65e-01  
 17  +4.6996e-01  +5.1964e-01  4.97e-02  2.15e-05  3.15e-03  4.36e-06  7.53e-05  9.90e-01  
 18  +4.6023e-01  +4.7993e-01  1.97e-02  7.91e-06  1.16e-03  1.70e-06  2.91e-05  7.06e-01  
 19  +4.5880e-01  +4.7445e-01  1.56e-02  6.13e-06  8.99e-04  1.39e-06  2.26e-05  2.75e-01  
 20  +4.5811e-01  +4.7172e-01  1.36e-02  5.36e-06  7.87e-04  1.26e-06  2.02e-05  3.83e-01  
 21  +4.5772e-01  +4.6998e-01  1.23e-02  4.80e-06  7.04e-04  1.23e-06  1.80e-05  4.54e-01  
 22  +4.5532e-01  +4.6090e-01  5.58e-03  2.16e-06  3.17e-04  5.71e-07  8.20e-06  6.01e-01  
 23  +4.5372e-01  +4.5514e-01  1.42e-03  5.39e-07  7.90e-05  1.49e-07  2.07e-06  9.55e-01  
 24  +4.5321e-01  +4.5322e-01  1.72e-05  6.53e-09  9.57e-07  1.78e-09  2.52e-08  9.88e-01  
 25  +4.5320e-01  +4.5320e-01  1.72e-07  6.53e-11  9.57e-09  1.78e-11  2.52e-10  9.90e-01  
 26  +4.5320e-01  +4.5320e-01  1.72e-09  6.53e-13  9.57e-11  1.79e-13  2.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 72.2249ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:19 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:19 PM: Optimal value: 4.532e-01
(CVXPY) Sep 20 07:35:19 PM: Compilation took 1.803e-02 seconds
(CVXPY) Sep 20 07:35:19 PM: Solver (including time spent in interface) took 7.824e-02 seconds
FULL MODEL:
  Accruacy: 0.5368
  Our objective: 0.07359999999999997

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.0216)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0)            <-- (term's our objective: 0.0224)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.0052)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.0052)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.0076)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 0)                       <-- (term's our objective: 0.0108)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.0076)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.0008)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.939513444900513
Best over terms:
  Our final objective: 0.022400000000000014
    Its accruacy: 0.5112
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.022400000000000014
  Highest accruacy: 0.5112
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

