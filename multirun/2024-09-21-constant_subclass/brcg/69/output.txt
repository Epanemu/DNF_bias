Command:
python test_script.py -s constant_subclass -d 2 -n 5000 --seed 21 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.30479999999999996
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 2.

Computed total variation: 0.30479999999999996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:16 PM: Your problem has 2505 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:16 PM: Finished problem compilation (took 6.531e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2505
  constraints   = 5005
  nnz(P)        = 0
  nnz(A)        = 12505
  cones (total) = 1
    : Nonnegative = 1,  numel = 5005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9997e-01  +2.5009e+03  2.50e+03  9.76e-01  4.97e+01  1.00e+00  1.00e+00   ------   
  1  +6.3742e-01  +4.3723e+02  4.37e+02  2.65e-01  2.35e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5881e-01  +8.1553e+01  8.10e+01  1.30e-01  1.32e+01  5.30e-03  2.15e-01  5.91e-01  
  3  +5.0213e-01  +4.3617e+00  3.86e+00  3.48e-02  3.35e+00  2.59e-06  2.10e-01  1.65e-01  
  4  +5.0003e-01  +9.1878e-01  4.19e-01  3.94e-03  3.93e-01  1.45e-06  7.49e-02  8.24e-01  
  5  +4.8675e-01  +2.4387e+00  1.95e+00  2.19e-03  2.24e-01  7.07e-05  6.01e-03  9.75e-01  
  6  +4.5675e-01  +1.2094e+00  7.53e-01  3.54e-04  3.63e-02  9.13e-05  9.90e-04  8.36e-01  
  7  +4.2229e-01  +5.1422e-01  9.19e-02  4.61e-05  4.65e-03  8.12e-06  1.54e-04  9.78e-01  
  8  +3.9848e-01  +4.1903e-01  2.06e-02  9.14e-06  9.20e-04  1.92e-06  4.02e-05  8.38e-01  
  9  +3.9317e-01  +3.9342e-01  2.50e-04  1.11e-07  1.12e-05  2.18e-08  5.09e-07  9.88e-01  
 10  +3.9310e-01  +3.9310e-01  2.50e-06  1.11e-09  1.12e-07  2.18e-10  5.09e-09  9.90e-01  
 11  +3.9310e-01  +3.9310e-01  2.50e-08  1.11e-11  1.12e-09  2.18e-12  5.10e-11  9.90e-01  
 12  +3.9310e-01  +3.9310e-01  2.50e-10  1.11e-13  1.12e-11  2.18e-14  5.10e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.0184ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:16 PM: Optimal value: 3.931e-01
(CVXPY) Sep 20 07:26:16 PM: Compilation took 6.531e-03 seconds
(CVXPY) Sep 20 07:26:16 PM: Solver (including time spent in interface) took 1.453e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.3931
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:16 PM: Your problem has 2506 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:16 PM: Finished problem compilation (took 5.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2506
  constraints   = 5006
  nnz(P)        = 0
  nnz(A)        = 13527
  cones (total) = 1
    : Nonnegative = 1,  numel = 5006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9990e-01  +2.5017e+03  2.50e+03  9.76e-01  5.17e+01  1.00e+00  1.00e+00   ------   
  1  +6.3709e-01  +4.3758e+02  4.37e+02  2.66e-01  2.44e+01  4.49e-03  3.89e-01  7.24e-01  
  2  +5.5860e-01  +8.1337e+01  8.08e+01  1.29e-01  1.37e+01  5.33e-03  2.14e-01  5.94e-01  
  3  +5.0210e-01  +4.4199e+00  3.92e+00  3.53e-02  3.53e+00  4.69e-05  2.09e-01  1.70e-01  
  4  +4.9996e-01  +7.9694e-01  2.97e-01  2.79e-03  2.90e-01  1.34e-05  5.06e-02  9.37e-01  
  5  +4.9909e-01  +9.0210e-01  4.03e-01  3.11e-03  3.27e-01  5.87e-05  1.50e-02  7.94e-01  
  6  +4.8961e-01  +8.6134e-01  3.72e-01  5.78e-04  6.19e-02  4.82e-04  1.58e-03  8.95e-01  
  7  +4.8223e-01  +8.3548e-01  3.53e-01  3.58e-04  3.84e-02  7.01e-04  9.52e-04  4.08e-01  
  8  +4.8170e-01  +8.2606e-01  3.44e-01  3.51e-04  3.76e-02  6.44e-04  9.51e-04  3.03e-02  
  9  +4.6370e-01  +7.8190e-01  3.18e-01  1.85e-04  1.97e-02  8.52e-04  4.91e-04  6.12e-01  
 10  +4.0392e-01  +5.5390e-01  1.50e-01  5.08e-05  5.38e-03  3.50e-04  1.47e-04  9.03e-01  
 11  +3.5326e-01  +3.6887e-01  1.56e-02  5.70e-06  5.96e-04  2.60e-06  2.06e-05  9.82e-01  
 12  +3.4777e-01  +3.4796e-01  1.90e-04  6.90e-08  7.22e-06  2.53e-08  2.57e-07  9.88e-01  
 13  +3.4770e-01  +3.4770e-01  1.90e-06  6.90e-10  7.21e-08  2.53e-10  2.57e-09  9.90e-01  
 14  +3.4770e-01  +3.4770e-01  1.90e-08  6.90e-12  7.21e-10  2.53e-12  2.57e-11  9.90e-01  
 15  +3.4770e-01  +3.4770e-01  1.90e-10  6.90e-14  7.21e-12  2.53e-14  2.58e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.824ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:16 PM: Optimal value: 3.477e-01
(CVXPY) Sep 20 07:26:16 PM: Compilation took 5.510e-03 seconds
(CVXPY) Sep 20 07:26:16 PM: Solver (including time spent in interface) took 1.651e-02 seconds
FULL MODEL:
  Accruacy: 0.6524
  Our objective: 0.30479999999999996

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.3048)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8662316799163818
Best over terms:
  Our final objective: 0.30479999999999996
    Its accruacy: 0.6524
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30479999999999996
  Highest accruacy: 0.6524
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

