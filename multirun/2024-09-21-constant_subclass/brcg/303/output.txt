Command:
python test_script.py -s constant_subclass -d 8 -n 1000 --seed 34 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.014
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 8.

Computed total variation: 0.392
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:02 PM: Your problem has 517 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:02 PM: Finished problem compilation (took 8.035e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 517
  constraints   = 1017
  nnz(P)        = 0
  nnz(A)        = 5517
  cones (total) = 1
    : Nonnegative = 1,  numel = 1017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9996e-01  +5.0065e+02  5.00e+02  9.55e-01  3.42e+01  1.00e+00  1.00e+00   ------   
  1  +5.8390e-01  +1.0730e+02  1.07e+02  4.03e-01  2.15e+01  3.82e-03  5.62e-01  5.98e-01  
  2  +5.3348e-01  +1.2834e+01  1.23e+01  1.39e-01  9.42e+00  1.49e-02  2.60e-01  9.16e-01  
  3  +5.0641e-01  +3.1674e+00  2.66e+00  5.50e-02  3.60e+00  3.57e-05  2.35e-01  3.70e-01  
  4  +5.0035e-01  +6.4765e-01  1.47e-01  3.27e-03  2.26e-01  8.86e-06  4.86e-02  9.75e-01  
  5  +5.0007e-01  +5.6561e-01  6.55e-02  1.42e-03  9.81e-02  7.29e-06  1.33e-02  8.12e-01  
  6  +4.9896e-01  +5.5959e-01  6.06e-02  4.59e-04  3.22e-02  4.40e-05  1.57e-03  9.16e-01  
  7  +4.9554e-01  +5.3973e-01  4.42e-02  1.41e-04  9.92e-03  8.66e-05  4.58e-04  7.18e-01  
  8  +4.9154e-01  +5.1895e-01  2.74e-02  7.67e-05  5.39e-03  4.31e-05  2.59e-04  5.34e-01  
  9  +4.8625e-01  +4.9255e-01  6.30e-03  1.52e-05  1.07e-03  4.55e-07  5.63e-05  9.61e-01  
 10  +4.8420e-01  +4.8449e-01  2.81e-04  5.84e-07  4.10e-05  6.06e-08  2.52e-06  9.75e-01  
 11  +4.8410e-01  +4.8410e-01  2.84e-06  5.83e-09  4.10e-07  6.11e-10  2.55e-08  9.90e-01  
 12  +4.8410e-01  +4.8410e-01  2.84e-08  5.83e-11  4.10e-09  6.11e-12  2.55e-10  9.90e-01  
 13  +4.8410e-01  +4.8410e-01  2.84e-10  5.84e-13  4.10e-11  6.25e-14  2.60e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.9733ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:02 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:02 PM: Optimal value: 4.841e-01
(CVXPY) Sep 20 07:46:02 PM: Compilation took 8.035e-03 seconds
(CVXPY) Sep 20 07:46:02 PM: Solver (including time spent in interface) took 8.079e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4841
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:02 PM: Your problem has 527 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:02 PM: Finished problem compilation (took 5.084e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 527
  constraints   = 1027
  nnz(P)        = 0
  nnz(A)        = 6228
  cones (total) = 1
    : Nonnegative = 1,  numel = 1027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9982e-01  +5.0089e+02  5.00e+02  9.55e-01  3.48e+01  1.00e+00  1.00e+00   ------   
  1  +5.8268e-01  +1.0744e+02  1.07e+02  4.05e-01  2.18e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3215e-01  +1.2565e+01  1.20e+01  1.37e-01  9.33e+00  1.52e-02  2.56e-01  9.32e-01  
  3  +5.0590e-01  +3.0590e+00  2.55e+00  5.30e-02  3.54e+00  3.65e-05  2.25e-01  4.29e-01  
  4  +5.0093e-01  +9.2048e-01  4.20e-01  9.34e-03  6.51e-01  1.21e-05  9.07e-02  6.99e-01  
  5  +4.9997e-01  +7.4471e-01  2.45e-01  4.84e-03  3.41e-01  1.75e-05  2.47e-02  8.64e-01  
  6  +4.9226e-01  +7.0698e-01  2.15e-01  7.98e-04  5.74e-02  1.26e-04  2.45e-03  9.22e-01  
  7  +4.8276e-01  +6.3712e-01  1.54e-01  4.61e-04  3.30e-02  8.99e-05  1.46e-03  5.16e-01  
  8  +4.6722e-01  +5.4826e-01  8.10e-02  1.89e-04  1.35e-02  4.56e-05  6.43e-04  6.52e-01  
  9  +4.6494e-01  +5.3607e-01  7.11e-02  1.58e-04  1.13e-02  3.73e-05  5.40e-04  4.93e-01  
 10  +4.5639e-01  +4.9390e-01  3.75e-02  7.96e-05  5.69e-03  1.72e-05  2.83e-04  9.90e-01  
 11  +4.4631e-01  +4.5215e-01  5.85e-03  1.17e-05  8.36e-04  2.31e-06  4.44e-05  8.97e-01  
 12  +4.4452e-01  +4.4511e-01  5.95e-04  1.18e-06  8.43e-05  3.08e-07  4.56e-06  9.90e-01  
 13  +4.4430e-01  +4.4431e-01  6.10e-06  1.21e-08  8.64e-07  3.15e-09  4.68e-08  9.90e-01  
 14  +4.4430e-01  +4.4430e-01  6.10e-08  1.21e-10  8.64e-09  3.15e-11  4.69e-10  9.90e-01  
 15  +4.4430e-01  +4.4430e-01  6.10e-10  1.21e-12  8.64e-11  3.15e-13  4.69e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.2793ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:02 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:02 PM: Optimal value: 4.443e-01
(CVXPY) Sep 20 07:46:02 PM: Compilation took 5.084e-03 seconds
(CVXPY) Sep 20 07:46:02 PM: Solver (including time spent in interface) took 9.615e-03 seconds
Iteration: 2, Objective: 0.4443
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:03 PM: Your problem has 537 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:03 PM: Finished problem compilation (took 6.160e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 537
  constraints   = 1037
  nnz(P)        = 0
  nnz(A)        = 6630
  cones (total) = 1
    : Nonnegative = 1,  numel = 1037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9979e-01  +5.0099e+02  5.00e+02  9.55e-01  3.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.8185e-01  +1.0745e+02  1.07e+02  4.06e-01  2.18e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3139e-01  +1.2409e+01  1.19e+01  1.35e-01  9.14e+00  1.53e-02  2.52e-01  9.41e-01  
  3  +5.0555e-01  +2.9858e+00  2.48e+00  5.17e-02  3.45e+00  3.70e-05  2.18e-01  4.73e-01  
  4  +5.0092e-01  +9.4989e-01  4.49e-01  1.00e-02  6.98e-01  1.26e-05  8.44e-02  6.94e-01  
  5  +4.9949e-01  +7.7901e-01  2.80e-01  4.81e-03  3.42e-01  2.37e-05  1.92e-02  8.43e-01  
  6  +4.9250e-01  +7.3066e-01  2.38e-01  1.12e-03  8.15e-02  9.94e-05  3.31e-03  8.33e-01  
  7  +4.8300e-01  +6.7655e-01  1.94e-01  5.82e-04  4.21e-02  1.17e-04  1.71e-03  5.59e-01  
  8  +4.7669e-01  +6.5003e-01  1.73e-01  4.41e-04  3.19e-02  1.13e-04  1.31e-03  2.92e-01  
  9  +4.7014e-01  +6.1910e-01  1.49e-01  3.58e-04  2.58e-02  8.68e-05  1.08e-03  3.79e-01  
 10  +4.4853e-01  +5.1945e-01  7.09e-02  1.50e-04  1.08e-02  2.53e-05  4.83e-04  9.90e-01  
 11  +4.2849e-01  +4.4059e-01  1.21e-02  2.29e-05  1.64e-03  3.55e-06  7.98e-05  8.51e-01  
 12  +4.2392e-01  +4.2493e-01  1.01e-03  1.83e-06  1.32e-04  3.34e-07  6.78e-06  9.31e-01  
 13  +4.2350e-01  +4.2352e-01  1.09e-05  1.96e-08  1.41e-06  3.58e-09  7.33e-08  9.89e-01  
 14  +4.2350e-01  +4.2350e-01  1.09e-07  1.96e-10  1.41e-08  3.58e-11  7.33e-10  9.90e-01  
 15  +4.2350e-01  +4.2350e-01  1.09e-09  1.96e-12  1.41e-10  3.59e-13  7.35e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.0209ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:03 PM: Optimal value: 4.235e-01
(CVXPY) Sep 20 07:46:03 PM: Compilation took 6.160e-03 seconds
(CVXPY) Sep 20 07:46:03 PM: Solver (including time spent in interface) took 1.006e-02 seconds
Iteration: 3, Objective: 0.4235
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:03 PM: Your problem has 547 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:03 PM: Finished problem compilation (took 6.712e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 547
  constraints   = 1047
  nnz(P)        = 0
  nnz(A)        = 6878
  cones (total) = 1
    : Nonnegative = 1,  numel = 1047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9975e-01  +5.0105e+02  5.01e+02  9.56e-01  3.48e+01  1.00e+00  1.01e+00   ------   
  1  +5.8082e-01  +1.0751e+02  1.07e+02  4.08e-01  2.16e+01  3.82e-03  5.64e-01  5.97e-01  
  2  +5.3059e-01  +1.2251e+01  1.17e+01  1.33e-01  8.94e+00  1.55e-02  2.49e-01  9.51e-01  
  3  +5.0533e-01  +2.9373e+00  2.43e+00  5.09e-02  3.39e+00  3.79e-05  2.11e-01  5.10e-01  
  4  +5.0084e-01  +9.5752e-01  4.57e-01  1.02e-02  7.10e-01  1.33e-05  7.71e-02  7.04e-01  
  5  +4.9838e-01  +9.2826e-01  4.30e-01  5.15e-03  3.69e-01  4.48e-05  1.65e-02  8.58e-01  
  6  +4.8710e-01  +8.1519e-01  3.28e-01  1.19e-03  8.63e-02  1.33e-04  3.43e-03  7.95e-01  
  7  +4.7809e-01  +7.5741e-01  2.79e-01  7.70e-04  5.55e-02  1.31e-04  2.24e-03  5.02e-01  
  8  +4.5746e-01  +6.1344e-01  1.56e-01  3.73e-04  2.67e-02  6.07e-05  1.15e-03  7.83e-01  
  9  +4.4834e-01  +5.7055e-01  1.22e-01  2.73e-04  1.95e-02  4.84e-05  8.61e-04  3.15e-01  
 10  +4.2785e-01  +4.7404e-01  4.62e-02  9.30e-05  6.62e-03  2.30e-05  3.12e-04  9.90e-01  
 11  +4.1755e-01  +4.3311e-01  1.56e-02  2.97e-05  2.11e-03  7.96e-06  1.05e-04  7.47e-01  
 12  +4.1277e-01  +4.1555e-01  2.78e-03  5.12e-06  3.63e-04  1.46e-06  1.90e-05  8.71e-01  
 13  +4.1179e-01  +4.1202e-01  2.24e-04  4.09e-07  2.90e-05  1.14e-07  1.55e-06  9.27e-01  
 14  +4.1170e-01  +4.1170e-01  2.53e-06  4.61e-09  3.27e-07  1.26e-09  1.76e-08  9.90e-01  
 15  +4.1170e-01  +4.1170e-01  2.53e-08  4.61e-11  3.27e-09  1.26e-11  1.76e-10  9.90e-01  
 16  +4.1170e-01  +4.1170e-01  2.53e-10  4.61e-13  3.27e-11  1.28e-13  1.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.7781ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:03 PM: Optimal value: 4.117e-01
(CVXPY) Sep 20 07:46:03 PM: Compilation took 6.712e-03 seconds
(CVXPY) Sep 20 07:46:03 PM: Solver (including time spent in interface) took 1.164e-02 seconds
Iteration: 4, Objective: 0.4117
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:03 PM: Your problem has 557 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:03 PM: Finished problem compilation (took 6.662e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 557
  constraints   = 1057
  nnz(P)        = 0
  nnz(A)        = 7084
  cones (total) = 1
    : Nonnegative = 1,  numel = 1057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9972e-01  +5.0122e+02  5.01e+02  9.56e-01  3.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.7944e-01  +1.0760e+02  1.07e+02  4.09e-01  2.15e+01  3.82e-03  5.64e-01  5.97e-01  
  2  +5.2969e-01  +1.2072e+01  1.15e+01  1.30e-01  8.73e+00  1.56e-02  2.45e-01  9.63e-01  
  3  +5.0506e-01  +2.8820e+00  2.38e+00  4.98e-02  3.32e+00  3.90e-05  2.02e-01  5.55e-01  
  4  +5.0095e-01  +1.0817e+00  5.81e-01  1.29e-02  8.91e-01  1.61e-05  8.11e-02  6.47e-01  
  5  +4.9467e-01  +1.2022e+00  7.08e-01  4.56e-03  3.28e-01  9.70e-05  1.31e-02  9.41e-01  
  6  +4.7985e-01  +9.1826e-01  4.38e-01  1.56e-03  1.12e-01  1.12e-04  4.53e-03  6.70e-01  
  7  +4.7053e-01  +8.3618e-01  3.66e-01  1.01e-03  7.28e-02  1.18e-04  2.96e-03  4.87e-01  
  8  +4.6347e-01  +7.7069e-01  3.07e-01  7.62e-04  5.46e-02  1.11e-04  2.26e-03  4.10e-01  
  9  +4.5352e-01  +6.7671e-01  2.23e-01  5.45e-04  3.90e-02  8.43e-05  1.68e-03  5.63e-01  
 10  +4.3675e-01  +5.7491e-01  1.38e-01  3.10e-04  2.20e-02  5.31e-05  1.00e-03  5.64e-01  
 11  +4.1448e-01  +4.5941e-01  4.49e-02  9.32e-05  6.61e-03  1.54e-05  3.28e-04  7.08e-01  
 12  +4.1208e-01  +4.4785e-01  3.58e-02  7.21e-05  5.12e-03  1.41e-05  2.55e-04  3.80e-01  
 13  +4.0655e-01  +4.2197e-01  1.54e-02  3.03e-05  2.16e-03  8.78e-06  1.12e-04  9.90e-01  
 14  +4.0139e-01  +4.0271e-01  1.32e-03  2.54e-06  1.81e-04  7.04e-07  9.75e-06  9.28e-01  
 15  +4.0091e-01  +4.0095e-01  3.36e-05  6.46e-08  4.62e-06  1.70e-08  2.52e-07  9.90e-01  
 16  +4.0090e-01  +4.0090e-01  3.37e-07  6.48e-10  4.63e-08  1.70e-10  2.53e-09  9.90e-01  
 17  +4.0090e-01  +4.0090e-01  3.37e-09  6.48e-12  4.63e-10  1.70e-12  2.53e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.5496ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:03 PM: Optimal value: 4.009e-01
(CVXPY) Sep 20 07:46:03 PM: Compilation took 6.662e-03 seconds
(CVXPY) Sep 20 07:46:03 PM: Solver (including time spent in interface) took 1.232e-02 seconds
Iteration: 5, Objective: 0.4009
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:03 PM: Your problem has 567 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:03 PM: Finished problem compilation (took 6.042e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 567
  constraints   = 1067
  nnz(P)        = 0
  nnz(A)        = 7264
  cones (total) = 1
    : Nonnegative = 1,  numel = 1067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9965e-01  +5.0135e+02  5.01e+02  9.56e-01  3.46e+01  1.00e+00  1.01e+00   ------   
  1  +5.7756e-01  +1.0772e+02  1.07e+02  4.11e-01  2.14e+01  3.82e-03  5.65e-01  5.96e-01  
  2  +5.2850e-01  +1.1840e+01  1.13e+01  1.27e-01  8.49e+00  1.59e-02  2.39e-01  9.78e-01  
  3  +5.0470e-01  +2.8064e+00  2.30e+00  4.82e-02  3.22e+00  4.08e-05  1.90e-01  6.18e-01  
  4  +5.0086e-01  +1.1788e+00  6.78e-01  1.47e-02  1.02e+00  1.96e-05  7.62e-02  6.28e-01  
  5  +4.9112e-01  +1.3079e+00  8.17e-01  4.25e-03  3.08e-01  1.26e-04  1.17e-02  9.38e-01  
  6  +4.7437e-01  +9.1003e-01  4.36e-01  1.71e-03  1.23e-01  8.31e-05  4.98e-03  6.42e-01  
  7  +4.6781e-01  +8.7922e-01  4.11e-01  1.19e-03  8.58e-02  1.12e-04  3.42e-03  4.70e-01  
  8  +4.5857e-01  +8.0115e-01  3.43e-01  8.70e-04  6.24e-02  1.05e-04  2.54e-03  3.48e-01  
  9  +4.4523e-01  +6.8403e-01  2.39e-01  5.63e-04  4.02e-02  8.99e-05  1.70e-03  6.50e-01  
 10  +4.2635e-01  +5.7004e-01  1.44e-01  3.21e-04  2.29e-02  5.20e-05  1.03e-03  4.68e-01  
 11  +4.1118e-01  +4.8904e-01  7.79e-02  1.67e-04  1.19e-02  2.78e-05  5.66e-04  4.89e-01  
 12  +3.9868e-01  +4.2761e-01  2.89e-02  5.99e-05  4.27e-03  1.03e-05  2.15e-04  6.52e-01  
 13  +3.9138e-01  +3.9516e-01  3.78e-03  7.57e-06  5.41e-04  1.38e-06  2.89e-05  8.87e-01  
 14  +3.9020e-01  +3.9046e-01  2.64e-04  5.21e-07  3.73e-05  1.06e-07  2.05e-06  9.52e-01  
 15  +3.9010e-01  +3.9010e-01  3.40e-06  6.69e-09  4.78e-07  1.43e-09  2.66e-08  9.90e-01  
 16  +3.9010e-01  +3.9010e-01  3.40e-08  6.69e-11  4.78e-09  1.43e-11  2.66e-10  9.90e-01  
 17  +3.9010e-01  +3.9010e-01  3.40e-10  6.69e-13  4.78e-11  1.43e-13  2.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.5345ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:03 PM: Optimal value: 3.901e-01
(CVXPY) Sep 20 07:46:03 PM: Compilation took 6.042e-03 seconds
(CVXPY) Sep 20 07:46:03 PM: Solver (including time spent in interface) took 1.169e-02 seconds
Iteration: 6, Objective: 0.3901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:03 PM: Your problem has 577 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:03 PM: Finished problem compilation (took 6.081e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 577
  constraints   = 1077
  nnz(P)        = 0
  nnz(A)        = 7427
  cones (total) = 1
    : Nonnegative = 1,  numel = 1077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9961e-01  +5.0142e+02  5.01e+02  9.56e-01  3.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.7609e-01  +1.0779e+02  1.07e+02  4.12e-01  2.13e+01  3.82e-03  5.65e-01  5.96e-01  
  2  +5.2761e-01  +1.1664e+01  1.11e+01  1.24e-01  8.27e+00  1.61e-02  2.35e-01  9.89e-01  
  3  +5.0444e-01  +2.7488e+00  2.24e+00  4.69e-02  3.13e+00  4.24e-05  1.79e-01  6.70e-01  
  4  +5.0055e-01  +1.1905e+00  6.90e-01  1.45e-02  1.01e+00  2.30e-05  6.57e-02  6.58e-01  
  5  +4.8886e-01  +1.2899e+00  8.01e-01  3.94e-03  2.86e-01  1.37e-04  1.07e-02  9.15e-01  
  6  +4.7349e-01  +9.8466e-01  5.11e-01  2.00e-03  1.44e-01  1.02e-04  5.74e-03  5.32e-01  
  7  +4.5688e-01  +8.4768e-01  3.91e-01  1.04e-03  7.46e-02  1.14e-04  3.03e-03  5.73e-01  
  8  +4.5076e-01  +7.9371e-01  3.43e-01  8.72e-04  6.22e-02  1.11e-04  2.57e-03  3.11e-01  
  9  +4.2634e-01  +5.9647e-01  1.70e-01  4.12e-04  2.92e-02  6.87e-05  1.32e-03  9.90e-01  
 10  +4.0888e-01  +5.1216e-01  1.03e-01  2.31e-04  1.63e-02  4.12e-05  7.80e-04  4.56e-01  
 11  +3.9195e-01  +4.3400e-01  4.20e-02  8.76e-05  6.19e-03  1.79e-05  3.11e-04  7.02e-01  
 12  +3.8853e-01  +4.2067e-01  3.21e-02  6.47e-05  4.60e-03  1.43e-05  2.31e-04  3.19e-01  
 13  +3.8137e-01  +3.9184e-01  1.05e-02  2.02e-05  1.44e-03  5.57e-06  7.49e-05  9.15e-01  
 14  +3.7793e-01  +3.7904e-01  1.11e-03  2.12e-06  1.52e-04  5.84e-07  8.04e-06  9.21e-01  
 15  +3.7751e-01  +3.7754e-01  2.60e-05  4.97e-08  3.55e-06  1.32e-08  1.90e-07  9.90e-01  
 16  +3.7750e-01  +3.7750e-01  2.60e-07  4.97e-10  3.55e-08  1.32e-10  1.90e-09  9.90e-01  
 17  +3.7750e-01  +3.7750e-01  2.60e-09  4.97e-12  3.55e-10  1.32e-12  1.90e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.7ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:03 PM: Optimal value: 3.775e-01
(CVXPY) Sep 20 07:46:03 PM: Compilation took 6.081e-03 seconds
(CVXPY) Sep 20 07:46:03 PM: Solver (including time spent in interface) took 1.166e-02 seconds
Iteration: 7, Objective: 0.3775
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:03 PM: Your problem has 587 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:03 PM: Finished problem compilation (took 6.684e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 587
  constraints   = 1087
  nnz(P)        = 0
  nnz(A)        = 7579
  cones (total) = 1
    : Nonnegative = 1,  numel = 1087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0133e+02  5.01e+02  9.57e-01  3.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.7504e-01  +1.0780e+02  1.07e+02  4.12e-01  2.11e+01  3.83e-03  5.65e-01  5.96e-01  
  2  +5.2726e-01  +1.1702e+01  1.12e+01  1.24e-01  8.16e+00  1.61e-02  2.34e-01  9.90e-01  
  3  +5.0476e-01  +2.7628e+00  2.26e+00  4.75e-02  3.18e+00  4.54e-05  1.68e-01  6.99e-01  
  4  +5.0041e-01  +1.1926e+00  6.92e-01  1.43e-02  9.95e-01  2.71e-05  5.83e-02  6.78e-01  
  5  +4.8766e-01  +1.2050e+00  7.17e-01  3.40e-03  2.46e-01  1.49e-04  9.11e-03  8.94e-01  
  6  +4.6800e-01  +9.2744e-01  4.59e-01  1.59e-03  1.14e-01  1.21e-04  4.49e-03  5.95e-01  
  7  +4.5417e-01  +8.4902e-01  3.95e-01  1.03e-03  7.37e-02  1.31e-04  2.95e-03  4.26e-01  
  8  +4.4203e-01  +7.5981e-01  3.18e-01  8.10e-04  5.76e-02  1.06e-04  2.41e-03  3.07e-01  
  9  +4.1053e-01  +5.5554e-01  1.45e-01  3.40e-04  2.39e-02  5.86e-05  1.13e-03  9.90e-01  
 10  +3.9571e-01  +4.8665e-01  9.09e-02  2.02e-04  1.42e-02  3.72e-05  7.03e-04  4.66e-01  
 11  +3.8485e-01  +4.3758e-01  5.27e-02  1.13e-04  7.96e-03  2.17e-05  4.11e-04  4.60e-01  
 12  +3.7158e-01  +3.7885e-01  7.27e-03  1.51e-05  1.06e-03  2.98e-06  5.87e-05  9.14e-01  
 13  +3.6964e-01  +3.7101e-01  1.37e-03  2.83e-06  1.99e-04  6.20e-07  1.14e-05  9.11e-01  
 14  +3.6916e-01  +3.6920e-01  3.79e-05  7.81e-08  5.47e-06  1.57e-08  3.20e-07  9.78e-01  
 15  +3.6915e-01  +3.6915e-01  3.80e-07  7.82e-10  5.48e-08  1.57e-10  3.21e-09  9.90e-01  
 16  +3.6915e-01  +3.6915e-01  3.80e-09  7.82e-12  5.48e-10  1.57e-12  3.21e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.8458ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:03 PM: Optimal value: 3.692e-01
(CVXPY) Sep 20 07:46:03 PM: Compilation took 6.684e-03 seconds
(CVXPY) Sep 20 07:46:03 PM: Solver (including time spent in interface) took 1.166e-02 seconds
Iteration: 8, Objective: 0.3692
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:03 PM: Your problem has 597 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:03 PM: Finished problem compilation (took 5.679e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 597
  constraints   = 1097
  nnz(P)        = 0
  nnz(A)        = 7746
  cones (total) = 1
    : Nonnegative = 1,  numel = 1097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9956e-01  +5.0150e+02  5.01e+02  9.57e-01  3.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.7409e-01  +1.0784e+02  1.07e+02  4.14e-01  2.10e+01  3.83e-03  5.65e-01  5.96e-01  
  2  +5.2673e-01  +1.1776e+01  1.12e+01  1.24e-01  8.08e+00  1.62e-02  2.33e-01  9.90e-01  
  3  +5.0500e-01  +2.6288e+00  2.12e+00  4.51e-02  3.04e+00  4.86e-05  1.47e-01  7.74e-01  
  4  +4.9996e-01  +1.1787e+00  6.79e-01  1.28e-02  9.01e-01  3.92e-05  4.42e-02  7.34e-01  
  5  +4.8441e-01  +1.1346e+00  6.50e-01  2.66e-03  1.93e-01  2.00e-04  7.01e-03  8.80e-01  
  6  +4.6394e-01  +9.7462e-01  5.11e-01  1.46e-03  1.05e-01  2.00e-04  4.03e-03  5.00e-01  
  7  +4.3733e-01  +7.7956e-01  3.42e-01  8.79e-04  6.23e-02  1.26e-04  2.61e-03  4.76e-01  
  8  +3.9159e-01  +4.9939e-01  1.08e-01  2.53e-04  1.77e-02  2.95e-05  8.91e-04  7.98e-01  
  9  +3.8809e-01  +4.8490e-01  9.68e-02  2.23e-04  1.56e-02  2.91e-05  7.96e-04  2.08e-01  
 10  +3.7923e-01  +4.4570e-01  6.65e-02  1.50e-04  1.05e-02  2.18e-05  5.57e-04  4.01e-01  
 11  +3.6416e-01  +3.7922e-01  1.51e-02  3.29e-05  2.30e-03  6.53e-06  1.34e-04  9.46e-01  
 12  +3.5973e-01  +3.6092e-01  1.18e-03  2.57e-06  1.79e-04  4.91e-07  1.09e-05  9.31e-01  
 13  +3.5936e-01  +3.5939e-01  2.71e-05  5.88e-08  4.10e-06  1.06e-08  2.54e-07  9.90e-01  
 14  +3.5935e-01  +3.5935e-01  2.72e-07  5.89e-10  4.11e-08  1.06e-10  2.55e-09  9.90e-01  
 15  +3.5935e-01  +3.5935e-01  2.72e-09  5.89e-12  4.11e-10  1.06e-12  2.55e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.7589ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:03 PM: Optimal value: 3.594e-01
(CVXPY) Sep 20 07:46:03 PM: Compilation took 5.679e-03 seconds
(CVXPY) Sep 20 07:46:03 PM: Solver (including time spent in interface) took 1.263e-02 seconds
Iteration: 9, Objective: 0.3594
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:04 PM: Your problem has 607 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:04 PM: Finished problem compilation (took 5.692e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 607
  constraints   = 1107
  nnz(P)        = 0
  nnz(A)        = 7880
  cones (total) = 1
    : Nonnegative = 1,  numel = 1107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9957e-01  +5.0157e+02  5.01e+02  9.57e-01  3.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.7363e-01  +1.0784e+02  1.07e+02  4.14e-01  2.08e+01  3.83e-03  5.64e-01  5.96e-01  
  2  +5.2648e-01  +1.1781e+01  1.13e+01  1.24e-01  7.96e+00  1.62e-02  2.32e-01  9.90e-01  
  3  +5.0502e-01  +2.5564e+00  2.05e+00  4.36e-02  2.94e+00  4.97e-05  1.38e-01  8.03e-01  
  4  +4.9990e-01  +1.2306e+00  7.31e-01  1.29e-02  9.10e-01  4.66e-05  4.16e-02  7.36e-01  
  5  +4.8353e-01  +1.1367e+00  6.53e-01  2.54e-03  1.84e-01  2.16e-04  6.67e-03  8.63e-01  
  6  +4.6105e-01  +9.8180e-01  5.21e-01  1.41e-03  1.01e-01  2.22e-04  3.86e-03  4.93e-01  
  7  +4.3123e-01  +7.5836e-01  3.27e-01  8.61e-04  6.08e-02  1.14e-04  2.60e-03  4.68e-01  
  8  +3.9047e-01  +5.1564e-01  1.25e-01  3.02e-04  2.10e-02  3.43e-05  1.06e-03  6.57e-01  
  9  +3.8703e-01  +5.0130e-01  1.14e-01  2.67e-04  1.86e-02  3.47e-05  9.47e-04  2.09e-01  
 10  +3.7688e-01  +4.5328e-01  7.64e-02  1.74e-04  1.21e-02  2.98e-05  6.45e-04  6.16e-01  
 11  +3.6004e-01  +3.7691e-01  1.69e-02  3.68e-05  2.57e-03  7.77e-06  1.51e-04  9.90e-01  
 12  +3.5499e-01  +3.5621e-01  1.21e-03  2.61e-06  1.82e-04  5.36e-07  1.12e-05  9.39e-01  
 13  +3.5460e-01  +3.5462e-01  1.24e-05  2.68e-08  1.87e-06  5.44e-09  1.15e-07  9.90e-01  
 14  +3.5460e-01  +3.5460e-01  1.24e-07  2.68e-10  1.87e-08  5.44e-11  1.15e-09  9.90e-01  
 15  +3.5460e-01  +3.5460e-01  1.24e-09  2.68e-12  1.87e-10  5.44e-13  1.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.9217ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:04 PM: Optimal value: 3.546e-01
(CVXPY) Sep 20 07:46:04 PM: Compilation took 5.692e-03 seconds
(CVXPY) Sep 20 07:46:04 PM: Solver (including time spent in interface) took 1.275e-02 seconds
Iteration: 10, Objective: 0.3546
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:04 PM: Your problem has 617 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:04 PM: Finished problem compilation (took 6.063e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 617
  constraints   = 1117
  nnz(P)        = 0
  nnz(A)        = 8065
  cones (total) = 1
    : Nonnegative = 1,  numel = 1117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9956e-01  +5.0159e+02  5.01e+02  9.57e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.7302e-01  +1.0783e+02  1.07e+02  4.14e-01  2.07e+01  3.84e-03  5.64e-01  5.97e-01  
  2  +5.2617e-01  +1.1817e+01  1.13e+01  1.23e-01  7.86e+00  1.63e-02  2.31e-01  9.90e-01  
  3  +5.0512e-01  +2.4564e+00  1.95e+00  4.13e-02  2.80e+00  5.15e-05  1.26e-01  8.37e-01  
  4  +4.9938e-01  +1.1979e+00  6.99e-01  1.07e-02  7.58e-01  6.25e-05  3.18e-02  8.01e-01  
  5  +4.8495e-01  +1.0956e+00  6.11e-01  2.55e-03  1.85e-01  2.21e-04  6.67e-03  8.04e-01  
  6  +4.6316e-01  +9.4660e-01  4.83e-01  1.38e-03  9.91e-02  2.29e-04  3.76e-03  4.94e-01  
  7  +4.2985e-01  +7.3252e-01  3.03e-01  8.00e-04  5.64e-02  1.15e-04  2.40e-03  5.33e-01  
  8  +3.9682e-01  +5.5395e-01  1.57e-01  3.84e-04  2.68e-02  5.25e-05  1.29e-03  5.11e-01  
  9  +3.8657e-01  +5.0645e-01  1.20e-01  2.81e-04  1.96e-02  4.31e-05  9.80e-04  3.57e-01  
 10  +3.7659e-01  +4.5976e-01  8.32e-02  1.90e-04  1.33e-02  3.63e-05  6.88e-04  6.68e-01  
 11  +3.5933e-01  +3.8150e-01  2.22e-02  4.90e-05  3.41e-03  9.83e-06  1.93e-04  8.84e-01  
 12  +3.5389e-01  +3.5773e-01  3.84e-03  8.41e-06  5.86e-04  1.77e-06  3.46e-05  9.38e-01  
 13  +3.5286e-01  +3.5365e-01  7.85e-04  1.72e-06  1.20e-04  3.59e-07  7.14e-06  8.11e-01  
 14  +3.5260e-01  +3.5261e-01  1.10e-05  2.41e-08  1.68e-06  5.01e-09  1.01e-07  9.86e-01  
 15  +3.5260e-01  +3.5260e-01  1.10e-07  2.41e-10  1.68e-08  5.01e-11  1.01e-09  9.90e-01  
 16  +3.5260e-01  +3.5260e-01  1.10e-09  2.42e-12  1.68e-10  5.01e-13  1.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.725ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:04 PM: Optimal value: 3.526e-01
(CVXPY) Sep 20 07:46:04 PM: Compilation took 6.063e-03 seconds
(CVXPY) Sep 20 07:46:04 PM: Solver (including time spent in interface) took 1.272e-02 seconds
Iteration: 11, Objective: 0.3526
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:04 PM: Your problem has 627 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:04 PM: Finished problem compilation (took 5.695e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 627
  constraints   = 1127
  nnz(P)        = 0
  nnz(A)        = 8168
  cones (total) = 1
    : Nonnegative = 1,  numel = 1127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0154e+02  5.01e+02  9.57e-01  3.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.7125e-01  +1.0790e+02  1.07e+02  4.16e-01  2.05e+01  3.84e-03  5.64e-01  5.96e-01  
  2  +5.2526e-01  +1.1941e+01  1.14e+01  1.23e-01  7.82e+00  1.64e-02  2.31e-01  9.90e-01  
  3  +5.0537e-01  +2.1855e+00  1.68e+00  3.43e-02  2.37e+00  5.70e-05  9.81e-02  9.03e-01  
  4  +5.0149e-01  +1.8349e+00  1.33e+00  1.31e-02  9.38e-01  1.30e-04  3.32e-02  7.22e-01  
  5  +4.8691e-01  +1.5571e+00  1.07e+00  3.70e-03  2.69e-01  2.86e-04  9.24e-03  7.40e-01  
  6  +4.6115e-01  +1.1883e+00  7.27e-01  1.99e-03  1.42e-01  2.36e-04  5.26e-03  5.59e-01  
  7  +4.3281e-01  +8.7733e-01  4.45e-01  1.24e-03  8.75e-02  1.31e-04  3.61e-03  5.13e-01  
  8  +3.9057e-01  +5.7160e-01  1.81e-01  4.59e-04  3.19e-02  4.53e-05  1.53e-03  6.28e-01  
  9  +3.7611e-01  +4.9596e-01  1.20e-01  2.92e-04  2.02e-02  3.54e-05  1.03e-03  4.51e-01  
 10  +3.6697e-01  +4.4960e-01  8.26e-02  1.95e-04  1.35e-02  2.60e-05  7.17e-04  3.69e-01  
 11  +3.5754e-01  +4.0278e-01  4.52e-02  1.04e-04  7.21e-03  1.58e-05  4.01e-04  5.60e-01  
 12  +3.4889e-01  +3.6139e-01  1.25e-02  2.82e-05  1.96e-03  4.63e-06  1.15e-04  7.79e-01  
 13  +3.4661e-01  +3.5107e-01  4.46e-03  1.00e-05  6.93e-04  1.70e-06  4.15e-05  6.82e-01  
 14  +3.4581e-01  +3.4749e-01  1.67e-03  3.56e-06  2.46e-04  7.58e-07  1.52e-05  9.90e-01  
 15  +3.4521e-01  +3.4523e-01  2.53e-05  5.35e-08  3.70e-06  1.10e-08  2.31e-07  9.89e-01  
 16  +3.4520e-01  +3.4520e-01  2.53e-07  5.36e-10  3.70e-08  1.10e-10  2.31e-09  9.90e-01  
 17  +3.4520e-01  +3.4520e-01  2.53e-09  5.36e-12  3.70e-10  1.10e-12  2.31e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.6576ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:04 PM: Optimal value: 3.452e-01
(CVXPY) Sep 20 07:46:04 PM: Compilation took 5.695e-03 seconds
(CVXPY) Sep 20 07:46:04 PM: Solver (including time spent in interface) took 1.437e-02 seconds
Iteration: 12, Objective: 0.3452
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:04 PM: Your problem has 637 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:04 PM: Finished problem compilation (took 6.672e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 637
  constraints   = 1137
  nnz(P)        = 0
  nnz(A)        = 8270
  cones (total) = 1
    : Nonnegative = 1,  numel = 1137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9948e-01  +5.0156e+02  5.01e+02  9.57e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.6930e-01  +1.0805e+02  1.07e+02  4.17e-01  2.04e+01  3.84e-03  5.65e-01  5.95e-01  
  2  +5.2428e-01  +1.2074e+01  1.15e+01  1.23e-01  7.78e+00  1.66e-02  2.31e-01  9.90e-01  
  3  +5.0565e-01  +1.9642e+00  1.46e+00  2.82e-02  1.97e+00  6.30e-05  7.71e-02  9.29e-01  
  4  +5.0588e-01  +2.0896e+00  1.58e+00  2.02e-02  1.44e+00  1.06e-04  5.02e-02  3.93e-01  
  5  +5.0201e-01  +2.3346e+00  1.83e+00  1.29e-02  9.22e-01  2.47e-04  3.13e-02  7.68e-01  
  6  +4.8909e-01  +1.8858e+00  1.40e+00  4.42e-03  3.21e-01  4.03e-04  1.08e-02  6.59e-01  
  7  +4.7091e-01  +1.5801e+00  1.11e+00  2.96e-03  2.13e-01  3.79e-04  7.50e-03  4.03e-01  
  8  +4.5586e-01  +1.3361e+00  8.80e-01  2.29e-03  1.63e-01  3.06e-04  6.04e-03  3.10e-01  
  9  +4.1626e-01  +7.7014e-01  3.54e-01  9.87e-04  6.87e-02  1.11e-04  3.00e-03  8.63e-01  
 10  +3.7731e-01  +5.2782e-01  1.51e-01  3.81e-04  2.63e-02  4.47e-05  1.32e-03  6.46e-01  
 11  +3.6250e-01  +4.5514e-01  9.26e-02  2.24e-04  1.55e-02  2.98e-05  8.23e-04  4.70e-01  
 12  +3.5496e-01  +4.1955e-01  6.46e-02  1.53e-04  1.06e-02  2.14e-05  5.80e-04  3.42e-01  
 13  +3.4166e-01  +3.5648e-01  1.48e-02  3.39e-05  2.36e-03  6.60e-06  1.39e-04  9.90e-01  
 14  +3.3724e-01  +3.3826e-01  1.02e-03  2.31e-06  1.61e-04  4.30e-07  9.97e-06  9.38e-01  
 15  +3.3690e-01  +3.3692e-01  1.13e-05  2.55e-08  1.78e-06  4.70e-09  1.11e-07  9.89e-01  
 16  +3.3690e-01  +3.3690e-01  1.13e-07  2.55e-10  1.78e-08  4.70e-11  1.11e-09  9.90e-01  
 17  +3.3690e-01  +3.3690e-01  1.13e-09  2.55e-12  1.78e-10  4.70e-13  1.11e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.5ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:04 PM: Optimal value: 3.369e-01
(CVXPY) Sep 20 07:46:04 PM: Compilation took 6.672e-03 seconds
(CVXPY) Sep 20 07:46:04 PM: Solver (including time spent in interface) took 1.467e-02 seconds
Iteration: 13, Objective: 0.3369
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:04 PM: Your problem has 647 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:04 PM: Finished problem compilation (took 6.698e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 647
  constraints   = 1147
  nnz(P)        = 0
  nnz(A)        = 8358
  cones (total) = 1
    : Nonnegative = 1,  numel = 1147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9948e-01  +5.0154e+02  5.01e+02  9.58e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.6850e-01  +1.0804e+02  1.07e+02  4.17e-01  2.03e+01  3.84e-03  5.64e-01  5.96e-01  
  2  +5.2378e-01  +1.2103e+01  1.16e+01  1.22e-01  7.71e+00  1.67e-02  2.30e-01  9.90e-01  
  3  +5.0667e-01  +2.4249e+00  1.92e+00  3.45e-02  2.40e+00  9.86e-04  8.91e-02  8.16e-01  
  4  +5.0620e-01  +2.4302e+00  1.92e+00  2.45e-02  1.73e+00  1.42e-03  6.00e-02  3.53e-01  
  5  +5.0280e-01  +2.2264e+00  1.72e+00  2.14e-02  1.50e+00  8.70e-04  5.69e-02  2.76e-01  
  6  +4.9032e-01  +1.7683e+00  1.28e+00  4.53e-03  3.28e-01  2.40e-03  1.10e-02  8.15e-01  
  7  +4.7183e-01  +1.4569e+00  9.85e-01  2.95e-03  2.12e-01  1.65e-03  7.52e-03  4.32e-01  
  8  +4.5871e-01  +1.2825e+00  8.24e-01  2.33e-03  1.66e-01  1.17e-03  6.14e-03  2.98e-01  
  9  +4.2499e-01  +8.5560e-01  4.31e-01  1.26e-03  8.80e-02  1.00e-05  3.73e-03  8.48e-01  
 10  +3.7660e-01  +5.2690e-01  1.50e-01  3.82e-04  2.63e-02  1.34e-05  1.31e-03  7.06e-01  
 11  +3.6566e-01  +4.8068e-01  1.15e-01  2.79e-04  1.93e-02  2.14e-05  9.93e-04  4.31e-01  
 12  +3.5191e-01  +4.1823e-01  6.63e-02  1.55e-04  1.07e-02  1.43e-05  5.86e-04  4.71e-01  
 13  +3.4481e-01  +3.8630e-01  4.15e-02  9.47e-05  6.60e-03  1.23e-05  3.74e-04  5.64e-01  
 14  +3.3344e-01  +3.3720e-01  3.76e-03  8.37e-06  5.85e-04  1.38e-06  3.57e-05  9.67e-01  
 15  +3.3222e-01  +3.3228e-01  6.08e-05  1.35e-07  9.42e-06  2.23e-08  5.85e-07  9.88e-01  
 16  +3.3220e-01  +3.3220e-01  6.09e-07  1.35e-09  9.43e-08  2.23e-10  5.86e-09  9.90e-01  
 17  +3.3220e-01  +3.3220e-01  6.09e-09  1.35e-11  9.43e-10  2.23e-12  5.86e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.959ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:04 PM: Optimal value: 3.322e-01
(CVXPY) Sep 20 07:46:04 PM: Compilation took 6.698e-03 seconds
(CVXPY) Sep 20 07:46:04 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 14, Objective: 0.3322
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:04 PM: Your problem has 657 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:04 PM: Finished problem compilation (took 6.640e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 657
  constraints   = 1157
  nnz(P)        = 0
  nnz(A)        = 8453
  cones (total) = 1
    : Nonnegative = 1,  numel = 1157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9947e-01  +5.0157e+02  5.01e+02  9.58e-01  3.35e+01  1.00e+00  1.01e+00   ------   
  1  +5.6738e-01  +1.0807e+02  1.08e+02  4.18e-01  2.02e+01  3.84e-03  5.64e-01  5.96e-01  
  2  +5.2313e-01  +1.2184e+01  1.17e+01  1.22e-01  7.63e+00  1.68e-02  2.29e-01  9.90e-01  
  3  +5.0765e-01  +2.9360e+00  2.43e+00  4.01e-02  2.76e+00  2.03e-03  9.84e-02  7.19e-01  
  4  +5.0598e-01  +2.6976e+00  2.19e+00  2.67e-02  1.88e+00  2.69e-03  6.45e-02  3.61e-01  
  5  +5.0244e-01  +2.4389e+00  1.94e+00  2.31e-02  1.61e+00  1.53e-03  6.05e-02  3.07e-01  
  6  +4.8673e-01  +1.7899e+00  1.30e+00  4.28e-03  3.10e-01  4.17e-03  1.04e-02  8.35e-01  
  7  +4.6820e-01  +1.4728e+00  1.00e+00  2.95e-03  2.11e-01  2.74e-03  7.51e-03  3.78e-01  
  8  +4.4518e-01  +1.1481e+00  7.03e-01  1.99e-03  1.41e-01  1.11e-03  5.39e-03  4.84e-01  
  9  +3.9462e-01  +6.6172e-01  2.67e-01  7.08e-04  4.88e-02  1.72e-04  2.22e-03  7.10e-01  
 10  +3.6822e-01  +5.2095e-01  1.53e-01  3.83e-04  2.63e-02  9.17e-05  1.33e-03  5.13e-01  
 11  +3.5437e-01  +4.5097e-01  9.66e-02  2.34e-04  1.61e-02  5.69e-05  8.62e-04  4.10e-01  
 12  +3.4628e-01  +4.1192e-01  6.56e-02  1.55e-04  1.07e-02  3.84e-05  5.94e-04  3.53e-01  
 13  +3.3831e-01  +3.7360e-01  3.53e-02  8.16e-05  5.68e-03  1.97e-05  3.29e-04  5.54e-01  
 14  +3.2932e-01  +3.3225e-01  2.93e-03  6.65e-06  4.63e-04  1.33e-06  2.88e-05  9.44e-01  
 15  +3.2851e-01  +3.2885e-01  3.41e-04  7.72e-07  5.36e-05  1.53e-07  3.39e-06  8.86e-01  
 16  +3.2840e-01  +3.2841e-01  4.07e-06  9.22e-09  6.41e-07  1.80e-09  4.07e-08  9.89e-01  
 17  +3.2840e-01  +3.2840e-01  4.07e-08  9.22e-11  6.41e-09  1.80e-11  4.07e-10  9.90e-01  
 18  +3.2840e-01  +3.2840e-01  4.07e-10  9.22e-13  6.41e-11  1.80e-13  4.07e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.6791ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:04 PM: Optimal value: 3.284e-01
(CVXPY) Sep 20 07:46:04 PM: Compilation took 6.640e-03 seconds
(CVXPY) Sep 20 07:46:04 PM: Solver (including time spent in interface) took 1.837e-02 seconds
Iteration: 15, Objective: 0.3284
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:05 PM: Your problem has 667 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:05 PM: Finished problem compilation (took 6.668e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 667
  constraints   = 1167
  nnz(P)        = 0
  nnz(A)        = 8530
  cones (total) = 1
    : Nonnegative = 1,  numel = 1167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9945e-01  +5.0158e+02  5.01e+02  9.58e-01  3.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.6584e-01  +1.0814e+02  1.08e+02  4.18e-01  2.00e+01  3.85e-03  5.64e-01  5.95e-01  
  2  +5.2241e-01  +1.2277e+01  1.18e+01  1.21e-01  7.56e+00  1.69e-02  2.28e-01  9.90e-01  
  3  +5.0806e-01  +3.1902e+00  2.68e+00  4.16e-02  2.85e+00  2.63e-03  9.95e-02  6.78e-01  
  4  +5.0626e-01  +2.9209e+00  2.41e+00  2.86e-02  2.00e+00  3.28e-03  6.83e-02  3.27e-01  
  5  +5.0248e-01  +2.6409e+00  2.14e+00  2.47e-02  1.71e+00  1.89e-03  6.35e-02  3.21e-01  
  6  +4.8618e-01  +1.8837e+00  1.40e+00  4.75e-03  3.43e-01  4.68e-03  1.15e-02  8.26e-01  
  7  +4.6414e-01  +1.4759e+00  1.01e+00  3.03e-03  2.15e-01  2.73e-03  7.76e-03  4.45e-01  
  8  +4.2772e-01  +9.4161e-01  5.14e-01  1.51e-03  1.05e-01  2.50e-05  4.32e-03  7.80e-01  
  9  +3.8529e-01  +6.3081e-01  2.46e-01  6.65e-04  4.55e-02  2.84e-05  2.18e-03  5.84e-01  
 10  +3.6502e-01  +5.2368e-01  1.59e-01  4.06e-04  2.77e-02  3.08e-05  1.44e-03  4.89e-01  
 11  +3.5324e-01  +4.6196e-01  1.09e-01  2.69e-04  1.84e-02  3.01e-05  1.01e-03  5.20e-01  
 12  +3.4024e-01  +3.9582e-01  5.56e-02  1.34e-04  9.17e-03  1.61e-05  5.35e-04  5.14e-01  
 13  +3.3268e-01  +3.5853e-01  2.58e-02  6.11e-05  4.20e-03  8.26e-06  2.57e-04  6.29e-01  
 14  +3.2693e-01  +3.3161e-01  4.68e-03  1.09e-05  7.51e-04  1.50e-06  4.84e-05  8.29e-01  
 15  +3.2572e-01  +3.2609e-01  3.69e-04  8.59e-07  5.89e-05  1.31e-07  3.85e-06  9.62e-01  
 16  +3.2560e-01  +3.2561e-01  3.87e-06  9.00e-09  6.17e-07  1.37e-09  4.04e-08  9.90e-01  
 17  +3.2560e-01  +3.2560e-01  3.87e-08  9.01e-11  6.17e-09  1.37e-11  4.05e-10  9.90e-01  
 18  +3.2560e-01  +3.2560e-01  3.87e-10  9.01e-13  6.17e-11  1.37e-13  4.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.7348ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:05 PM: Optimal value: 3.256e-01
(CVXPY) Sep 20 07:46:05 PM: Compilation took 6.668e-03 seconds
(CVXPY) Sep 20 07:46:05 PM: Solver (including time spent in interface) took 1.939e-02 seconds
Iteration: 16, Objective: 0.3256
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:05 PM: Your problem has 677 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:05 PM: Finished problem compilation (took 8.640e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 677
  constraints   = 1177
  nnz(P)        = 0
  nnz(A)        = 8625
  cones (total) = 1
    : Nonnegative = 1,  numel = 1177

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0170e+02  5.01e+02  9.58e-01  3.32e+01  1.00e+00  1.01e+00   ------   
  1  +5.6442e-01  +1.0829e+02  1.08e+02  4.19e-01  1.99e+01  3.85e-03  5.64e-01  5.95e-01  
  2  +5.2149e-01  +1.2363e+01  1.18e+01  1.21e-01  7.51e+00  1.71e-02  2.28e-01  9.90e-01  
  3  +5.0806e-01  +3.2912e+00  2.78e+00  4.07e-02  2.79e+00  3.02e-03  9.64e-02  6.63e-01  
  4  +5.0658e-01  +3.0816e+00  2.57e+00  2.99e-02  2.09e+00  3.59e-03  7.07e-02  2.76e-01  
  5  +5.0259e-01  +2.7852e+00  2.28e+00  2.59e-02  1.79e+00  2.11e-03  6.57e-02  3.13e-01  
  6  +4.8670e-01  +1.9683e+00  1.48e+00  5.38e-03  3.86e-01  4.73e-03  1.30e-02  8.09e-01  
  7  +4.6665e-01  +1.5889e+00  1.12e+00  3.53e-03  2.50e-01  3.08e-03  8.98e-03  4.20e-01  
  8  +4.5261e-01  +1.3944e+00  9.42e-01  2.76e-03  1.94e-01  2.12e-03  7.27e-03  3.20e-01  
  9  +4.1950e-01  +9.3005e-01  5.11e-01  1.56e-03  1.07e-01  1.82e-05  4.62e-03  7.99e-01  
 10  +3.7262e-01  +5.6073e-01  1.88e-01  5.08e-04  3.44e-02  1.38e-05  1.75e-03  6.64e-01  
 11  +3.5674e-01  +4.8313e-01  1.26e-01  3.24e-04  2.20e-02  1.94e-05  1.19e-03  4.66e-01  
 12  +3.4282e-01  +4.1418e-01  7.14e-02  1.77e-04  1.20e-02  1.38e-05  6.96e-04  5.01e-01  
 13  +3.3688e-01  +3.8602e-01  4.91e-02  1.19e-04  8.14e-03  1.08e-05  4.84e-04  3.82e-01  
 14  +3.2555e-01  +3.3185e-01  6.30e-03  1.49e-05  1.02e-03  2.23e-06  6.56e-05  9.68e-01  
 15  +3.2391e-01  +3.2477e-01  8.59e-04  2.03e-06  1.39e-04  3.03e-07  9.10e-06  8.72e-01  
 16  +3.2366e-01  +3.2368e-01  2.19e-05  5.17e-08  3.53e-06  7.58e-09  2.33e-07  9.75e-01  
 17  +3.2365e-01  +3.2365e-01  2.19e-07  5.18e-10  3.53e-08  7.59e-11  2.33e-09  9.90e-01  
 18  +3.2365e-01  +3.2365e-01  2.19e-09  5.18e-12  3.54e-10  7.60e-13  2.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.6377ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:05 PM: Optimal value: 3.237e-01
(CVXPY) Sep 20 07:46:05 PM: Compilation took 8.640e-03 seconds
(CVXPY) Sep 20 07:46:05 PM: Solver (including time spent in interface) took 2.041e-02 seconds
Iteration: 17, Objective: 0.3237
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:05 PM: Your problem has 687 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:05 PM: Finished problem compilation (took 7.697e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 687
  constraints   = 1187
  nnz(P)        = 0
  nnz(A)        = 8735
  cones (total) = 1
    : Nonnegative = 1,  numel = 1187

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0168e+02  5.01e+02  9.58e-01  3.31e+01  1.00e+00  1.01e+00   ------   
  1  +5.6412e-01  +1.0829e+02  1.08e+02  4.20e-01  1.98e+01  3.85e-03  5.64e-01  5.95e-01  
  2  +5.2119e-01  +1.2380e+01  1.19e+01  1.21e-01  7.44e+00  1.71e-02  2.28e-01  9.90e-01  
  3  +5.0796e-01  +3.2802e+00  2.77e+00  3.99e-02  2.72e+00  3.07e-03  9.42e-02  6.64e-01  
  4  +5.0665e-01  +3.1075e+00  2.60e+00  3.00e-02  2.08e+00  3.62e-03  7.07e-02  2.59e-01  
  5  +5.0259e-01  +2.8162e+00  2.31e+00  2.60e-02  1.78e+00  2.15e-03  6.56e-02  3.17e-01  
  6  +4.8675e-01  +1.9950e+00  1.51e+00  5.52e-03  3.95e-01  4.69e-03  1.34e-02  8.03e-01  
  7  +4.6248e-01  +1.5267e+00  1.06e+00  3.29e-03  2.32e-01  2.71e-03  8.45e-03  5.00e-01  
  8  +4.4955e-01  +1.3334e+00  8.84e-01  2.66e-03  1.86e-01  1.67e-03  7.09e-03  3.25e-01  
  9  +4.0411e-01  +7.8000e-01  3.76e-01  1.07e-03  7.33e-02  1.53e-05  3.29e-03  8.47e-01  
 10  +3.7208e-01  +5.7601e-01  2.04e-01  5.49e-04  3.71e-02  1.83e-05  1.89e-03  4.97e-01  
 11  +3.4932e-01  +4.5116e-01  1.02e-01  2.59e-04  1.75e-02  1.87e-05  9.84e-04  6.20e-01  
 12  +3.3838e-01  +3.9635e-01  5.80e-02  1.42e-04  9.68e-03  1.35e-05  5.72e-04  5.35e-01  
 13  +3.3170e-01  +3.6384e-01  3.21e-02  7.74e-05  5.27e-03  8.84e-06  3.25e-04  5.65e-01  
 14  +3.2448e-01  +3.3020e-01  5.72e-03  1.35e-05  9.21e-04  1.64e-06  6.04e-05  8.46e-01  
 15  +3.2297e-01  +3.2347e-01  4.98e-04  1.17e-06  7.94e-05  1.80e-07  5.35e-06  9.85e-01  
 16  +3.2280e-01  +3.2281e-01  5.41e-06  1.27e-08  8.60e-07  1.93e-09  5.83e-08  9.89e-01  
 17  +3.2280e-01  +3.2280e-01  5.42e-08  1.27e-10  8.62e-09  1.93e-11  5.84e-10  9.90e-01  
 18  +3.2280e-01  +3.2280e-01  5.42e-10  1.27e-12  8.63e-11  1.94e-13  5.85e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.8571ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:05 PM: Optimal value: 3.228e-01
(CVXPY) Sep 20 07:46:05 PM: Compilation took 7.697e-03 seconds
(CVXPY) Sep 20 07:46:05 PM: Solver (including time spent in interface) took 2.197e-02 seconds
Iteration: 18, Objective: 0.3228
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:05 PM: Your problem has 690 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:05 PM: Finished problem compilation (took 8.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 690
  constraints   = 1190
  nnz(P)        = 0
  nnz(A)        = 8765
  cones (total) = 1
    : Nonnegative = 1,  numel = 1190

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0170e+02  5.01e+02  9.58e-01  3.31e+01  1.00e+00  1.01e+00   ------   
  1  +5.6409e-01  +1.0826e+02  1.08e+02  4.20e-01  1.98e+01  3.85e-03  5.64e-01  5.95e-01  
  2  +5.2110e-01  +1.2372e+01  1.19e+01  1.21e-01  7.40e+00  1.71e-02  2.28e-01  9.90e-01  
  3  +5.0789e-01  +3.2654e+00  2.76e+00  3.95e-02  2.69e+00  3.08e-03  9.32e-02  6.66e-01  
  4  +5.0664e-01  +3.1062e+00  2.60e+00  2.99e-02  2.07e+00  3.62e-03  7.05e-02  2.53e-01  
  5  +5.0257e-01  +2.8183e+00  2.32e+00  2.59e-02  1.78e+00  2.15e-03  6.54e-02  3.17e-01  
  6  +4.8660e-01  +1.9985e+00  1.51e+00  5.50e-03  3.93e-01  4.71e-03  1.33e-02  8.04e-01  
  7  +4.6199e-01  +1.5342e+00  1.07e+00  3.25e-03  2.29e-01  2.78e-03  8.37e-03  5.02e-01  
  8  +4.4602e-01  +1.2776e+00  8.32e-01  2.51e-03  1.75e-01  1.36e-03  6.77e-03  3.95e-01  
  9  +3.9624e-01  +7.2366e-01  3.27e-01  9.01e-04  6.13e-02  1.59e-04  2.80e-03  7.72e-01  
 10  +3.6862e-01  +5.6211e-01  1.93e-01  5.08e-04  3.44e-02  9.05e-05  1.76e-03  4.60e-01  
 11  +3.4812e-01  +4.4901e-01  1.01e-01  2.53e-04  1.71e-02  4.74e-05  9.62e-04  6.13e-01  
 12  +3.3840e-01  +3.9878e-01  6.04e-02  1.48e-04  1.00e-02  2.85e-05  5.88e-04  4.75e-01  
 13  +3.3176e-01  +3.6557e-01  3.38e-02  8.14e-05  5.54e-03  1.57e-05  3.37e-04  5.30e-01  
 14  +3.2413e-01  +3.2882e-01  4.70e-03  1.12e-05  7.60e-04  2.03e-06  4.90e-05  8.85e-01  
 15  +3.2292e-01  +3.2334e-01  4.18e-04  9.91e-07  6.73e-05  1.72e-07  4.42e-06  9.33e-01  
 16  +3.2280e-01  +3.2281e-01  4.50e-06  1.07e-08  7.25e-07  1.84e-09  4.77e-08  9.89e-01  
 17  +3.2280e-01  +3.2280e-01  4.50e-08  1.07e-10  7.26e-09  1.84e-11  4.78e-10  9.90e-01  
 18  +3.2280e-01  +3.2280e-01  4.50e-10  1.07e-12  7.26e-11  1.84e-13  4.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.4239ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:05 PM: Optimal value: 3.228e-01
(CVXPY) Sep 20 07:46:05 PM: Compilation took 8.000e-03 seconds
(CVXPY) Sep 20 07:46:05 PM: Solver (including time spent in interface) took 2.161e-02 seconds
Iteration: 19, Objective: 0.3228
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:05 PM: Your problem has 699 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:05 PM: Finished problem compilation (took 7.632e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 699
  constraints   = 1199
  nnz(P)        = 0
  nnz(A)        = 8850
  cones (total) = 1
    : Nonnegative = 1,  numel = 1199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0166e+02  5.01e+02  9.59e-01  3.30e+01  1.00e+00  1.01e+00   ------   
  1  +5.6341e-01  +1.0831e+02  1.08e+02  4.20e-01  1.97e+01  3.85e-03  5.64e-01  5.95e-01  
  2  +5.2045e-01  +1.2407e+01  1.19e+01  1.20e-01  7.34e+00  1.71e-02  2.27e-01  9.90e-01  
  3  +5.0758e-01  +3.2021e+00  2.69e+00  3.74e-02  2.55e+00  3.13e-03  8.84e-02  6.74e-01  
  4  +5.0663e-01  +3.1092e+00  2.60e+00  2.95e-02  2.03e+00  3.64e-03  6.94e-02  2.24e-01  
  5  +5.0260e-01  +2.8824e+00  2.38e+00  2.58e-02  1.76e+00  2.28e-03  6.43e-02  3.23e-01  
  6  +4.8733e-01  +2.1048e+00  1.62e+00  6.07e-03  4.32e-01  4.67e-03  1.47e-02  7.79e-01  
  7  +4.6373e-01  +1.5791e+00  1.12e+00  3.61e-03  2.53e-01  2.57e-03  9.31e-03  4.99e-01  
  8  +4.4966e-01  +1.3826e+00  9.33e-01  2.78e-03  1.94e-01  1.83e-03  7.39e-03  3.20e-01  
  9  +4.1190e-01  +8.7180e-01  4.60e-01  1.38e-03  9.42e-02  1.60e-05  4.18e-03  8.23e-01  
 10  +3.6931e-01  +5.5671e-01  1.87e-01  5.11e-04  3.43e-02  1.92e-05  1.78e-03  6.51e-01  
 11  +3.5236e-01  +4.7021e-01  1.18e-01  3.02e-04  2.03e-02  2.20e-05  1.13e-03  5.24e-01  
 12  +3.3843e-01  +3.9865e-01  6.02e-02  1.50e-04  1.01e-02  1.45e-05  5.98e-04  5.92e-01  
 13  +3.3198e-01  +3.6751e-01  3.55e-02  8.63e-05  5.85e-03  9.71e-06  3.57e-04  5.09e-01  
 14  +3.2550e-01  +3.3710e-01  1.16e-02  2.75e-05  1.87e-03  3.51e-06  1.19e-04  7.36e-01  
 15  +3.2419e-01  +3.3143e-01  7.24e-03  1.67e-05  1.14e-03  2.46e-06  7.24e-05  6.14e-01  
 16  +3.2204e-01  +3.2246e-01  4.21e-04  9.57e-07  6.59e-05  1.46e-07  4.25e-06  9.58e-01  
 17  +3.2190e-01  +3.2191e-01  4.39e-06  9.98e-09  6.87e-07  1.52e-09  4.44e-08  9.90e-01  
 18  +3.2190e-01  +3.2190e-01  4.39e-08  9.98e-11  6.87e-09  1.52e-11  4.44e-10  9.90e-01  
 19  +3.2190e-01  +3.2190e-01  4.39e-10  9.98e-13  6.87e-11  1.52e-13  4.44e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.7998ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:05 PM: Optimal value: 3.219e-01
(CVXPY) Sep 20 07:46:05 PM: Compilation took 7.632e-03 seconds
(CVXPY) Sep 20 07:46:05 PM: Solver (including time spent in interface) took 2.302e-02 seconds
Iteration: 20, Objective: 0.3219
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:05 PM: Your problem has 704 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:05 PM: Finished problem compilation (took 8.620e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 704
  constraints   = 1204
  nnz(P)        = 0
  nnz(A)        = 8902
  cones (total) = 1
    : Nonnegative = 1,  numel = 1204

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0165e+02  5.01e+02  9.59e-01  3.29e+01  1.00e+00  1.01e+00   ------   
  1  +5.6296e-01  +1.0834e+02  1.08e+02  4.21e-01  1.96e+01  3.86e-03  5.64e-01  5.95e-01  
  2  +5.2010e-01  +1.2435e+01  1.19e+01  1.20e-01  7.31e+00  1.72e-02  2.27e-01  9.90e-01  
  3  +5.0732e-01  +3.1346e+00  2.63e+00  3.58e-02  2.44e+00  3.13e-03  8.48e-02  6.83e-01  
  4  +5.0650e-01  +3.0734e+00  2.57e+00  2.87e-02  1.98e+00  3.61e-03  6.77e-02  2.09e-01  
  5  +5.0257e-01  +2.9057e+00  2.40e+00  2.53e-02  1.73e+00  2.37e-03  6.28e-02  3.27e-01  
  6  +4.8753e-01  +2.1754e+00  1.69e+00  6.38e-03  4.53e-01  4.71e-03  1.55e-02  7.61e-01  
  7  +4.5311e-01  +1.3367e+00  8.84e-01  2.81e-03  1.95e-01  1.37e-03  7.49e-03  7.04e-01  
  8  +4.4155e-01  +1.1523e+00  7.11e-01  2.39e-03  1.64e-01  7.16e-04  6.65e-03  3.05e-01  
  9  +3.9861e-01  +7.6917e-01  3.71e-01  1.06e-03  7.14e-02  2.21e-04  3.29e-03  7.11e-01  
 10  +3.7140e-01  +5.8717e-01  2.16e-01  5.90e-04  3.97e-02  1.18e-04  2.03e-03  4.38e-01  
 11  +3.4979e-01  +4.6165e-01  1.12e-01  2.89e-04  1.94e-02  5.84e-05  1.09e-03  5.94e-01  
 12  +3.3824e-01  +4.0110e-01  6.29e-02  1.58e-04  1.06e-02  3.18e-05  6.29e-04  5.03e-01  
 13  +3.2944e-01  +3.5665e-01  2.72e-02  6.65e-05  4.50e-03  1.32e-05  2.79e-04  6.42e-01  
 14  +3.2533e-01  +3.3679e-01  1.15e-02  2.75e-05  1.87e-03  5.46e-06  1.19e-04  6.57e-01  
 15  +3.2361e-01  +3.2919e-01  5.58e-03  1.30e-05  8.88e-04  2.52e-06  5.68e-05  6.83e-01  
 16  +3.2196e-01  +3.2212e-01  1.64e-04  3.79e-07  2.59e-05  6.50e-08  1.69e-06  9.88e-01  
 17  +3.2190e-01  +3.2190e-01  1.66e-06  3.83e-09  2.62e-07  6.57e-10  1.71e-08  9.90e-01  
 18  +3.2190e-01  +3.2190e-01  1.66e-08  3.84e-11  2.62e-09  6.57e-12  1.71e-10  9.90e-01  
 19  +3.2190e-01  +3.2190e-01  1.66e-10  3.84e-13  2.63e-11  6.58e-14  1.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.1653ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:05 PM: Optimal value: 3.219e-01
(CVXPY) Sep 20 07:46:05 PM: Compilation took 8.620e-03 seconds
(CVXPY) Sep 20 07:46:05 PM: Solver (including time spent in interface) took 2.338e-02 seconds
Iteration: 21, Objective: 0.3219
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:06 PM: Your problem has 712 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:06 PM: Finished problem compilation (took 8.691e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 712
  constraints   = 1212
  nnz(P)        = 0
  nnz(A)        = 8988
  cones (total) = 1
    : Nonnegative = 1,  numel = 1212

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0165e+02  5.01e+02  9.59e-01  3.28e+01  1.00e+00  1.01e+00   ------   
  1  +5.6262e-01  +1.0834e+02  1.08e+02  4.21e-01  1.95e+01  3.86e-03  5.64e-01  5.95e-01  
  2  +5.1972e-01  +1.2446e+01  1.19e+01  1.20e-01  7.25e+00  1.72e-02  2.27e-01  9.90e-01  
  3  +5.0704e-01  +3.0618e+00  2.55e+00  3.43e-02  2.33e+00  3.11e-03  8.13e-02  6.91e-01  
  4  +5.0635e-01  +3.0350e+00  2.53e+00  2.80e-02  1.93e+00  3.58e-03  6.61e-02  2.00e-01  
  5  +5.0249e-01  +2.9492e+00  2.45e+00  2.46e-02  1.68e+00  2.48e-03  6.05e-02  3.57e-01  
  6  +4.8787e-01  +2.2438e+00  1.76e+00  6.74e-03  4.78e-01  4.63e-03  1.64e-02  7.36e-01  
  7  +4.6117e-01  +1.5607e+00  1.10e+00  3.68e-03  2.56e-01  2.11e-03  9.60e-03  5.61e-01  
  8  +4.4670e-01  +1.3767e+00  9.30e-01  2.79e-03  1.93e-01  1.54e-03  7.50e-03  3.46e-01  
  9  +4.1357e-01  +9.1682e-01  5.03e-01  1.57e-03  1.06e-01  1.31e-05  4.76e-03  8.46e-01  
 10  +3.6740e-01  +5.4783e-01  1.80e-01  4.97e-04  3.33e-02  1.36e-05  1.75e-03  6.84e-01  
 11  +3.5580e-01  +4.9188e-01  1.36e-01  3.58e-04  2.40e-02  2.14e-05  1.31e-03  4.22e-01  
 12  +3.4381e-01  +4.3027e-01  8.65e-02  2.21e-04  1.48e-02  1.58e-05  8.56e-04  4.10e-01  
 13  +3.3262e-01  +3.7359e-01  4.10e-02  1.02e-04  6.85e-03  8.54e-06  4.21e-04  5.68e-01  
 14  +3.2582e-01  +3.3959e-01  1.38e-02  3.38e-05  2.27e-03  3.67e-06  1.46e-04  7.58e-01  
 15  +3.2377e-01  +3.3055e-01  6.79e-03  1.62e-05  1.09e-03  2.10e-06  7.16e-05  6.81e-01  
 16  +3.2194e-01  +3.2268e-01  7.47e-04  1.77e-06  1.19e-04  2.27e-07  8.05e-06  8.99e-01  
 17  +3.2171e-01  +3.2173e-01  2.24e-05  5.27e-08  3.55e-06  6.82e-09  2.43e-07  9.72e-01  
 18  +3.2170e-01  +3.2170e-01  2.24e-07  5.28e-10  3.56e-08  6.83e-11  2.43e-09  9.90e-01  
 19  +3.2170e-01  +3.2170e-01  2.24e-09  5.28e-12  3.56e-10  6.84e-13  2.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.3087ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:06 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:06 PM: Optimal value: 3.217e-01
(CVXPY) Sep 20 07:46:06 PM: Compilation took 8.691e-03 seconds
(CVXPY) Sep 20 07:46:06 PM: Solver (including time spent in interface) took 2.500e-02 seconds
Iteration: 22, Objective: 0.3217
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:06 PM: Your problem has 722 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:06 PM: Finished problem compilation (took 7.691e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:06 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 722
  constraints   = 1222
  nnz(P)        = 0
  nnz(A)        = 9092
  cones (total) = 1
    : Nonnegative = 1,  numel = 1222

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0152e+02  5.01e+02  9.59e-01  3.27e+01  1.00e+00  1.01e+00   ------   
  1  +5.6191e-01  +1.0841e+02  1.08e+02  4.22e-01  1.94e+01  3.86e-03  5.63e-01  5.95e-01  
  2  +5.1897e-01  +1.2478e+01  1.20e+01  1.20e-01  7.20e+00  1.73e-02  2.27e-01  9.90e-01  
  3  +5.0645e-01  +2.8960e+00  2.39e+00  3.11e-02  2.11e+00  3.03e-03  7.42e-02  7.12e-01  
  4  +5.0605e-01  +2.9610e+00  2.45e+00  2.66e-02  1.82e+00  3.47e-03  6.28e-02  1.93e-01  
  5  +5.0199e-01  +3.0974e+00  2.60e+00  2.23e-02  1.52e+00  2.84e-03  5.37e-02  4.64e-01  
  6  +4.8779e-01  +2.3723e+00  1.88e+00  7.42e-03  5.23e-01  4.29e-03  1.81e-02  6.68e-01  
  7  +4.6308e-01  +1.6485e+00  1.19e+00  4.17e-03  2.89e-01  2.11e-03  1.09e-02  5.32e-01  
  8  +4.4595e-01  +1.4737e+00  1.03e+00  2.96e-03  2.04e-01  1.79e-03  7.90e-03  3.81e-01  
  9  +4.1393e-01  +9.2404e-01  5.10e-01  1.59e-03  1.08e-01  1.47e-05  4.80e-03  7.82e-01  
 10  +3.6758e-01  +5.5317e-01  1.86e-01  5.13e-04  3.42e-02  2.61e-05  1.79e-03  7.35e-01  
 11  +3.5569e-01  +4.9624e-01  1.41e-01  3.68e-04  2.46e-02  3.19e-05  1.34e-03  4.66e-01  
 12  +3.4495e-01  +4.3970e-01  9.48e-02  2.43e-04  1.62e-02  2.54e-05  9.27e-04  4.46e-01  
 13  +3.3194e-01  +3.7265e-01  4.07e-02  1.02e-04  6.81e-03  1.13e-05  4.16e-04  5.90e-01  
 14  +3.2532e-01  +3.4015e-01  1.48e-02  3.62e-05  2.43e-03  4.59e-06  1.54e-04  7.15e-01  
 15  +3.2272e-01  +3.2866e-01  5.94e-03  1.41e-05  9.52e-04  2.02e-06  6.17e-05  7.48e-01  
 16  +3.2098e-01  +3.2125e-01  2.69e-04  6.33e-07  4.28e-05  8.88e-08  2.83e-06  9.60e-01  
 17  +3.2090e-01  +3.2090e-01  2.80e-06  6.58e-09  4.45e-07  9.22e-10  2.95e-08  9.90e-01  
 18  +3.2090e-01  +3.2090e-01  2.80e-08  6.58e-11  4.45e-09  9.23e-12  2.95e-10  9.90e-01  
 19  +3.2090e-01  +3.2090e-01  2.80e-10  6.59e-13  4.45e-11  9.24e-14  2.96e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.4111ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:06 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:06 PM: Optimal value: 3.209e-01
(CVXPY) Sep 20 07:46:06 PM: Compilation took 7.691e-03 seconds
(CVXPY) Sep 20 07:46:06 PM: Solver (including time spent in interface) took 2.405e-02 seconds
Iteration: 23, Objective: 0.3209
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:06 PM: Your problem has 732 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:06 PM: Finished problem compilation (took 9.658e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 732
  constraints   = 1232
  nnz(P)        = 0
  nnz(A)        = 9170
  cones (total) = 1
    : Nonnegative = 1,  numel = 1232

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0154e+02  5.01e+02  9.59e-01  3.26e+01  1.00e+00  1.01e+00   ------   
  1  +5.6080e-01  +1.0845e+02  1.08e+02  4.22e-01  1.93e+01  3.86e-03  5.63e-01  5.95e-01  
  2  +5.1805e-01  +1.2551e+01  1.20e+01  1.19e-01  7.14e+00  1.74e-02  2.27e-01  9.90e-01  
  3  +5.0558e-01  +2.6312e+00  2.13e+00  2.66e-02  1.82e+00  2.84e-03  6.39e-02  7.49e-01  
  4  +5.0526e-01  +2.7642e+00  2.26e+00  2.33e-02  1.61e+00  3.24e-03  5.52e-02  2.14e-01  
  5  +5.0017e-01  +3.1352e+00  2.63e+00  1.76e-02  1.22e+00  3.30e-03  4.17e-02  5.89e-01  
  6  +4.8416e-01  +2.3269e+00  1.84e+00  6.97e-03  4.90e-01  3.80e-03  1.70e-02  5.99e-01  
  7  +4.5938e-01  +1.7590e+00  1.30e+00  4.14e-03  2.87e-01  2.52e-03  1.06e-02  4.96e-01  
  8  +4.4347e-01  +1.5582e+00  1.11e+00  3.09e-03  2.13e-01  1.92e-03  8.17e-03  3.73e-01  
  9  +4.1097e-01  +9.3738e-01  5.26e-01  1.66e-03  1.11e-01  1.49e-05  5.00e-03  8.19e-01  
 10  +3.6297e-01  +5.3133e-01  1.68e-01  4.68e-04  3.11e-02  1.56e-05  1.64e-03  7.31e-01  
 11  +3.5188e-01  +4.8121e-01  1.29e-01  3.41e-04  2.26e-02  2.23e-05  1.24e-03  4.20e-01  
 12  +3.3926e-01  +4.1885e-01  7.96e-02  2.02e-04  1.34e-02  1.68e-05  7.79e-04  4.67e-01  
 13  +3.2848e-01  +3.6581e-01  3.73e-02  9.26e-05  6.18e-03  8.72e-06  3.79e-04  5.70e-01  
 14  +3.2211e-01  +3.3578e-01  1.37e-02  3.30e-05  2.21e-03  3.71e-06  1.41e-04  7.03e-01  
 15  +3.1925e-01  +3.2352e-01  4.27e-03  1.01e-05  6.76e-04  1.30e-06  4.46e-05  7.81e-01  
 16  +3.1795e-01  +3.1808e-01  1.37e-04  3.19e-07  2.15e-05  3.94e-08  1.45e-06  9.72e-01  
 17  +3.1790e-01  +3.1790e-01  1.37e-06  3.20e-09  2.15e-07  3.95e-10  1.45e-08  9.90e-01  
 18  +3.1790e-01  +3.1790e-01  1.37e-08  3.20e-11  2.15e-09  3.95e-12  1.46e-10  9.90e-01  
 19  +3.1790e-01  +3.1790e-01  1.37e-10  3.20e-13  2.15e-11  3.96e-14  1.46e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.6436ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:06 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:06 PM: Optimal value: 3.179e-01
(CVXPY) Sep 20 07:46:06 PM: Compilation took 9.658e-03 seconds
(CVXPY) Sep 20 07:46:06 PM: Solver (including time spent in interface) took 2.602e-02 seconds
Iteration: 24, Objective: 0.3179
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:46:06 PM: Your problem has 734 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:46:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:46:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:46:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:46:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:46:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:46:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:46:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:46:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:46:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:46:06 PM: Finished problem compilation (took 7.669e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 734
  constraints   = 1234
  nnz(P)        = 0
  nnz(A)        = 9200
  cones (total) = 1
    : Nonnegative = 1,  numel = 1234

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0154e+02  5.01e+02  9.59e-01  3.26e+01  1.00e+00  1.01e+00   ------   
  1  +5.6070e-01  +1.0847e+02  1.08e+02  4.23e-01  1.93e+01  3.87e-03  5.63e-01  5.94e-01  
  2  +5.1798e-01  +1.2557e+01  1.20e+01  1.19e-01  7.13e+00  1.74e-02  2.27e-01  9.90e-01  
  3  +5.0548e-01  +2.6006e+00  2.10e+00  2.62e-02  1.79e+00  2.81e-03  6.29e-02  7.53e-01  
  4  +5.0516e-01  +2.7401e+00  2.23e+00  2.30e-02  1.58e+00  3.21e-03  5.44e-02  2.18e-01  
  5  +4.9989e-01  +3.1263e+00  2.63e+00  1.71e-02  1.18e+00  3.35e-03  4.05e-02  5.98e-01  
  6  +4.8360e-01  +2.3063e+00  1.82e+00  6.89e-03  4.83e-01  3.70e-03  1.68e-02  5.93e-01  
  7  +4.6042e-01  +1.7974e+00  1.34e+00  4.26e-03  2.95e-01  2.63e-03  1.09e-02  4.59e-01  
  8  +4.4309e-01  +1.5837e+00  1.14e+00  3.10e-03  2.13e-01  2.08e-03  8.19e-03  3.73e-01  
  9  +4.0984e-01  +9.3751e-01  5.28e-01  1.65e-03  1.11e-01  1.58e-05  5.00e-03  8.31e-01  
 10  +3.6343e-01  +5.3810e-01  1.75e-01  4.87e-04  3.23e-02  1.59e-05  1.71e-03  7.17e-01  
 11  +3.4822e-01  +4.6571e-01  1.17e-01  3.07e-04  2.04e-02  2.31e-05  1.13e-03  5.40e-01  
 12  +3.3748e-01  +4.1156e-01  7.41e-02  1.88e-04  1.25e-02  1.74e-05  7.32e-04  4.66e-01  
 13  +3.2637e-01  +3.5655e-01  3.02e-02  7.47e-05  4.98e-03  7.75e-06  3.10e-04  6.35e-01  
 14  +3.2080e-01  +3.3024e-01  9.43e-03  2.27e-05  1.52e-03  2.81e-06  9.86e-05  7.62e-01  
 15  +3.1854e-01  +3.2047e-01  1.92e-03  4.57e-06  3.06e-04  6.66e-07  2.04e-05  9.24e-01  
 16  +3.1791e-01  +3.1795e-01  3.61e-05  8.53e-08  5.72e-06  1.19e-08  3.87e-07  9.83e-01  
 17  +3.1790e-01  +3.1790e-01  3.61e-07  8.53e-10  5.72e-08  1.19e-10  3.87e-09  9.90e-01  
 18  +3.1790e-01  +3.1790e-01  3.61e-09  8.53e-12  5.72e-10  1.19e-12  3.87e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.0229ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:46:06 PM: Problem status: optimal
(CVXPY) Sep 20 07:46:06 PM: Optimal value: 3.179e-01
(CVXPY) Sep 20 07:46:06 PM: Compilation took 7.669e-03 seconds
(CVXPY) Sep 20 07:46:06 PM: Solver (including time spent in interface) took 2.412e-02 seconds
FULL MODEL:
  Accruacy: 0.615
  Our objective: 0.22999999999999995

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0)                       <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.03)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.014)
 OR (x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1)                                             <-- (term's our objective: 0.022)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 7.2258827686309814
Best over terms:
  Our final objective: 0.030000000000000034
    Its accruacy: 0.515
    Its hamming distance: 6
  Shortest hamming distance: 2
    Its our objective: 0.024000000000000025
  Highest accruacy: 0.515
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

