Command:
python test_script.py -s constant_subclass -d 9 -n 50000 --seed 21 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.00168
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 9.

Computed total variation: 0.08308000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:11 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:11 PM: Finished problem compilation (took 1.543e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 300019
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8095e-01  +5.4248e+03  5.42e+03  4.36e-01  1.71e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3208e-01  +6.1486e+02  6.14e+02  1.78e-01  8.95e+01  1.62e-02  2.78e-01  9.28e-01  
  3  +5.0908e-01  +1.6055e+02  1.60e+02  1.50e-01  7.61e+01  4.52e-05  2.60e-01  2.60e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.71e-02  2.37e+01  5.20e-06  1.97e-01  4.43e-01  
  5  +5.0000e-01  +1.0776e+00  5.78e-01  1.72e-03  8.98e-01  2.20e-05  1.93e-01  2.02e-01  
  6  +5.0000e-01  +6.6788e-01  1.68e-01  5.01e-04  2.62e-01  5.49e-06  6.10e-02  7.20e-01  
  7  +5.0000e-01  +5.7580e-01  7.58e-02  2.26e-04  1.18e-01  2.27e-06  2.80e-02  6.02e-01  
  8  +5.0000e-01  +5.1346e-01  1.35e-02  4.01e-05  2.10e-02  3.58e-07  4.44e-03  9.52e-01  
  9  +5.0000e-01  +5.1772e-01  1.77e-02  5.27e-05  2.76e-02  7.05e-07  2.13e-03  7.43e-01  
 10  +5.0000e-01  +5.1730e-01  1.73e-02  4.88e-05  2.55e-02  2.08e-06  5.31e-04  8.47e-01  
 11  +4.9972e-01  +5.1548e-01  1.58e-02  2.28e-06  1.19e-03  1.30e-04  7.26e-06  9.87e-01  
 12  +4.9892e-01  +5.1181e-01  1.29e-02  6.36e-07  3.34e-04  3.27e-04  2.02e-06  7.41e-01  
 13  +4.9815e-01  +5.0605e-01  7.90e-03  4.18e-07  2.19e-04  8.15e-05  1.38e-06  5.67e-01  
 14  +4.9813e-01  +5.0576e-01  7.63e-03  4.11e-07  2.15e-04  6.17e-05  1.37e-06  1.77e-01  
 15  +4.9741e-01  +5.0209e-01  4.68e-03  2.33e-07  1.22e-04  1.97e-05  8.14e-07  6.26e-01  
 16  +4.9703e-01  +5.0036e-01  3.33e-03  1.55e-07  8.13e-05  1.07e-05  5.61e-07  4.61e-01  
 17  +4.9682e-01  +4.9932e-01  2.50e-03  1.10e-07  5.77e-05  1.12e-07  4.06e-07  9.71e-01  
 18  +4.9615e-01  +4.9664e-01  4.92e-04  2.00e-08  1.05e-05  2.00e-08  7.92e-08  8.20e-01  
 19  +4.9607e-01  +4.9632e-01  2.49e-04  1.00e-08  5.27e-06  2.65e-09  4.00e-08  9.90e-01  
 20  +4.9598e-01  +4.9599e-01  4.50e-06  1.80e-10  9.42e-08  4.73e-11  7.24e-10  9.83e-01  
 21  +4.9598e-01  +4.9598e-01  4.50e-08  1.80e-12  9.42e-10  4.73e-13  7.25e-12  9.90e-01  
 22  +4.9598e-01  +4.9598e-01  4.60e-10  1.84e-14  9.63e-12  1.01e-14  1.48e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 604.3969ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:11 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:11 PM: Optimal value: 4.960e-01
(CVXPY) Sep 20 08:11:11 PM: Compilation took 1.543e-01 seconds
(CVXPY) Sep 20 08:11:11 PM: Solver (including time spent in interface) took 6.453e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4960
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:12 PM: Your problem has 25029 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:12 PM: Finished problem compilation (took 1.551e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25029
  constraints   = 50029
  nnz(P)        = 0
  nnz(A)        = 327551
  cones (total) = 1
    : Nonnegative = 1,  numel = 50029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.65e+02  1.00e+00  1.00e+00   ------   
  1  +5.8095e-01  +5.4249e+03  5.42e+03  4.36e-01  1.73e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3207e-01  +6.1475e+02  6.14e+02  1.78e-01  9.07e+01  1.62e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6052e+02  1.60e+02  1.50e-01  7.71e+01  4.52e-05  2.60e-01  2.60e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.40e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.0747e+00  5.75e-01  1.71e-03  9.06e-01  2.21e-05  1.93e-01  2.05e-01  
  6  +5.0000e-01  +7.4089e-01  2.41e-01  7.18e-04  3.81e-01  8.25e-06  8.43e-02  6.29e-01  
  7  +5.0000e-01  +6.5442e-01  1.54e-01  4.60e-04  2.44e-01  4.99e-06  5.36e-02  4.36e-01  
  8  +5.0000e-01  +6.0602e-01  1.06e-01  3.16e-04  1.68e-01  2.81e-06  3.33e-02  5.83e-01  
  9  +5.0000e-01  +5.7180e-01  7.18e-02  2.14e-04  1.14e-01  2.04e-06  1.87e-02  5.18e-01  
 10  +5.0000e-01  +5.6101e-01  6.10e-02  1.82e-04  9.64e-02  2.04e-06  1.06e-02  5.41e-01  
 11  +4.9999e-01  +5.3542e-01  3.54e-02  9.96e-05  5.29e-02  6.66e-06  1.11e-03  9.90e-01  
 12  +4.9915e-01  +5.3399e-01  3.48e-02  5.35e-06  2.84e-03  3.89e-04  1.79e-05  9.85e-01  
 13  +4.9766e-01  +5.2660e-01  2.89e-02  2.08e-06  1.11e-03  6.87e-04  6.97e-06  6.34e-01  
 14  +4.9757e-01  +5.2541e-01  2.78e-02  2.02e-06  1.08e-03  5.77e-04  6.80e-06  1.12e-01  
 15  +4.9694e-01  +5.2077e-01  2.38e-02  1.68e-06  8.93e-04  3.93e-04  5.72e-06  2.85e-01  
 16  +4.9626e-01  +5.1547e-01  1.92e-02  1.27e-06  6.77e-04  1.34e-04  4.40e-06  5.90e-01  
 17  +4.9617e-01  +5.1486e-01  1.87e-02  1.27e-06  6.77e-04  1.22e-04  4.40e-06  3.12e-02  
 18  +4.9517e-01  +5.0927e-01  1.41e-02  8.87e-07  4.72e-04  8.45e-05  3.11e-06  3.47e-01  
 19  +4.9508e-01  +5.0872e-01  1.36e-02  8.81e-07  4.68e-04  7.34e-05  3.10e-06  6.40e-02  
 20  +4.9512e-01  +5.0852e-01  1.34e-02  8.32e-07  4.42e-04  3.10e-05  2.94e-06  5.56e-01  
 21  +4.9319e-01  +4.9823e-01  5.04e-03  2.83e-07  1.50e-04  7.15e-06  1.02e-06  7.67e-01  
 22  +4.9214e-01  +4.9267e-01  5.35e-04  2.95e-08  1.57e-05  1.49e-07  1.11e-07  9.54e-01  
 23  +4.9200e-01  +4.9202e-01  1.29e-05  7.26e-10  3.86e-07  2.45e-09  2.81e-09  9.76e-01  
 24  +4.9200e-01  +4.9200e-01  1.29e-07  7.26e-12  3.86e-09  2.44e-11  2.82e-11  9.90e-01  
 25  +4.9200e-01  +4.9200e-01  2.78e-09  1.57e-13  8.32e-11  2.38e-13  2.89e-13  9.78e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 772.4175ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:13 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:13 PM: Optimal value: 4.920e-01
(CVXPY) Sep 20 08:11:13 PM: Compilation took 1.551e-01 seconds
(CVXPY) Sep 20 08:11:13 PM: Solver (including time spent in interface) took 8.137e-01 seconds
Iteration: 2, Objective: 0.4920
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:13 PM: Your problem has 25039 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:13 PM: Finished problem compilation (took 1.819e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25039
  constraints   = 50039
  nnz(P)        = 0
  nnz(A)        = 353195
  cones (total) = 1
    : Nonnegative = 1,  numel = 50039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.68e+02  1.00e+00  1.00e+00   ------   
  1  +5.8094e-01  +5.4250e+03  5.42e+03  4.36e-01  1.75e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3206e-01  +6.1465e+02  6.14e+02  1.78e-01  9.18e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6049e+02  1.60e+02  1.50e-01  7.80e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.43e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.0924e+00  5.92e-01  1.77e-03  9.46e-01  2.22e-05  1.93e-01  2.00e-01  
  6  +5.0001e-01  +8.3799e-01  3.38e-01  1.01e-03  5.40e-01  7.37e-06  9.72e-02  9.30e-01  
  7  +5.0001e-01  +7.2495e-01  2.25e-01  6.71e-04  3.60e-01  2.62e-06  6.23e-02  9.71e-01  
  8  +5.0000e-01  +5.8214e-01  8.21e-02  2.45e-04  1.31e-01  1.09e-06  2.41e-02  6.66e-01  
  9  +5.0000e-01  +5.3881e-01  3.88e-02  1.16e-04  6.21e-02  8.84e-07  6.45e-03  8.30e-01  
 10  +5.0000e-01  +5.5913e-01  5.91e-02  1.67e-04  8.95e-02  3.13e-06  1.85e-03  9.90e-01  
 11  +4.9965e-01  +5.5023e-01  5.06e-02  8.51e-06  4.58e-03  1.63e-04  2.81e-05  9.85e-01  
 12  +4.9916e-01  +5.4599e-01  4.68e-02  4.36e-06  2.35e-03  2.70e-04  1.43e-05  5.13e-01  
 13  +4.9872e-01  +5.3266e-01  3.39e-02  3.34e-06  1.80e-03  3.76e-05  1.09e-05  6.96e-01  
 14  +4.9882e-01  +5.3272e-01  3.39e-02  3.24e-06  1.74e-03  3.05e-05  1.05e-05  2.09e-01  
 15  +4.9806e-01  +5.2788e-01  2.98e-02  2.19e-06  1.18e-03  2.78e-05  7.10e-06  4.54e-01  
 16  +4.9804e-01  +5.2780e-01  2.98e-02  2.19e-06  1.18e-03  2.67e-05  7.09e-06  3.18e-02  
 17  +4.9775e-01  +5.2630e-01  2.86e-02  1.88e-06  1.01e-03  2.45e-05  6.10e-06  2.32e-01  
 18  +4.9767e-01  +5.2587e-01  2.82e-02  1.86e-06  1.00e-03  2.06e-05  6.03e-06  1.30e-01  
 19  +4.9724e-01  +5.2396e-01  2.67e-02  1.58e-06  8.53e-04  1.95e-05  5.15e-06  1.98e-01  
 20  +4.9681e-01  +5.2217e-01  2.54e-02  1.54e-06  8.32e-04  1.50e-05  5.13e-06  1.17e-01  
 21  +4.9634e-01  +5.1999e-01  2.37e-02  1.35e-06  7.27e-04  1.23e-05  4.48e-06  2.42e-01  
 22  +4.9587e-01  +5.1743e-01  2.16e-02  1.15e-06  6.20e-04  1.31e-07  3.81e-06  8.58e-01  
 23  +4.9314e-01  +5.0634e-01  1.32e-02  5.77e-07  3.10e-04  9.07e-08  1.95e-06  5.65e-01  
 24  +4.9068e-01  +4.9601e-01  5.32e-03  2.12e-07  1.14e-04  4.43e-08  7.37e-07  8.41e-01  
 25  +4.8938e-01  +4.9090e-01  1.52e-03  5.81e-08  3.12e-05  1.66e-08  2.10e-07  9.90e-01  
 26  +4.8883e-01  +4.8889e-01  6.61e-05  2.51e-09  1.35e-06  5.68e-10  9.52e-09  9.60e-01  
 27  +4.8880e-01  +4.8880e-01  6.69e-07  2.54e-11  1.37e-08  5.69e-12  9.72e-11  9.90e-01  
 28  +4.8880e-01  +4.8880e-01  6.69e-09  2.54e-13  1.37e-10  5.69e-14  9.72e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 984.7865ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:14 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:14 PM: Optimal value: 4.888e-01
(CVXPY) Sep 20 08:11:14 PM: Compilation took 1.819e-01 seconds
(CVXPY) Sep 20 08:11:14 PM: Solver (including time spent in interface) took 1.031e+00 seconds
Iteration: 3, Objective: 0.4888
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:14 PM: Your problem has 25049 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:14 PM: Finished problem compilation (took 1.897e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25049
  constraints   = 50049
  nnz(P)        = 0
  nnz(A)        = 370693
  cones (total) = 1
    : Nonnegative = 1,  numel = 50049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.69e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4251e+03  5.42e+03  4.36e-01  1.76e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3205e-01  +6.1461e+02  6.14e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6047e+02  1.60e+02  1.50e-01  7.84e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7628e+01  1.71e+01  4.71e-02  2.44e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.1625e+00  6.63e-01  1.98e-03  1.06e+00  2.22e-05  1.93e-01  1.80e-01  
  6  +5.0001e-01  +9.5346e-01  4.53e-01  1.35e-03  7.28e-01  9.99e-06  1.20e-01  8.56e-01  
  7  +5.0001e-01  +7.7500e-01  2.75e-01  8.20e-04  4.42e-01  3.69e-06  7.41e-02  9.90e-01  
  8  +5.0000e-01  +6.0351e-01  1.04e-01  3.09e-04  1.66e-01  1.55e-06  3.08e-02  6.29e-01  
  9  +5.0000e-01  +5.8400e-01  8.40e-02  2.50e-04  1.35e-01  1.06e-06  1.91e-02  6.36e-01  
 10  +5.0000e-01  +5.4148e-01  4.15e-02  1.23e-04  6.65e-02  1.24e-06  4.20e-03  8.47e-01  
 11  +4.9999e-01  +5.5031e-01  5.03e-02  1.18e-04  6.35e-02  6.96e-06  6.95e-04  9.90e-01  
 12  +4.9950e-01  +5.4804e-01  4.85e-02  6.16e-06  3.33e-03  2.27e-04  1.99e-05  9.71e-01  
 13  +4.9902e-01  +5.4181e-01  4.28e-02  3.64e-06  1.97e-03  2.59e-04  1.17e-05  5.39e-01  
 14  +4.9843e-01  +5.3634e-01  3.79e-02  2.88e-06  1.56e-03  2.17e-04  9.16e-06  3.22e-01  
 15  +4.9808e-01  +5.3349e-01  3.54e-02  2.42e-06  1.31e-03  1.83e-04  7.66e-06  2.93e-01  
 16  +4.9813e-01  +5.3295e-01  3.48e-02  2.38e-06  1.29e-03  1.44e-04  7.49e-06  1.87e-01  
 17  +4.9771e-01  +5.3058e-01  3.29e-02  2.00e-06  1.08e-03  1.31e-04  6.27e-06  2.54e-01  
 18  +4.9772e-01  +5.2991e-01  3.22e-02  1.93e-06  1.04e-03  9.47e-05  6.03e-06  2.54e-01  
 19  +4.9753e-01  +5.2843e-01  3.09e-02  1.81e-06  9.81e-04  6.27e-05  5.68e-06  3.02e-01  
 20  +4.9715e-01  +5.2603e-01  2.89e-02  1.60e-06  8.66e-04  1.70e-05  5.03e-06  6.50e-01  
 21  +4.9695e-01  +5.2532e-01  2.84e-02  1.59e-06  8.61e-04  1.51e-05  5.01e-06  6.94e-02  
 22  +4.9472e-01  +5.1614e-01  2.14e-02  9.88e-07  5.34e-04  9.94e-06  3.14e-06  5.02e-01  
 23  +4.9187e-01  +5.0491e-01  1.30e-02  5.38e-07  2.91e-04  5.03e-06  1.75e-06  5.14e-01  
 24  +4.9047e-01  +4.9891e-01  8.44e-03  3.23e-07  1.75e-04  4.80e-07  1.06e-06  8.77e-01  
 25  +4.8842e-01  +4.9147e-01  3.05e-03  1.12e-07  6.05e-05  1.52e-07  3.77e-07  6.81e-01  
 26  +4.8736e-01  +4.8772e-01  3.61e-04  1.29e-08  6.95e-06  1.24e-08  4.46e-08  9.24e-01  
 27  +4.8720e-01  +4.8721e-01  6.52e-06  2.29e-10  1.24e-07  1.83e-10  8.09e-10  9.86e-01  
 28  +4.8720e-01  +4.8720e-01  6.52e-08  2.29e-12  1.24e-09  1.83e-12  8.09e-12  9.90e-01  
 29  +4.8720e-01  +4.8720e-01  6.60e-10  2.32e-14  1.25e-11  3.07e-14  1.32e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0389167s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:15 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:15 PM: Optimal value: 4.872e-01
(CVXPY) Sep 20 08:11:15 PM: Compilation took 1.897e-01 seconds
(CVXPY) Sep 20 08:11:15 PM: Solver (including time spent in interface) took 1.086e+00 seconds
Iteration: 4, Objective: 0.4872
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:16 PM: Your problem has 25059 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:16 PM: Finished problem compilation (took 2.182e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25059
  constraints   = 50059
  nnz(P)        = 0
  nnz(A)        = 381704
  cones (total) = 1
    : Nonnegative = 1,  numel = 50059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4252e+03  5.42e+03  4.37e-01  1.76e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3205e-01  +6.1452e+02  6.14e+02  1.78e-01  9.23e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6044e+02  1.60e+02  1.50e-01  7.85e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7629e+01  1.71e+01  4.71e-02  2.45e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0001e-01  +1.1783e+00  6.78e-01  2.02e-03  1.09e+00  2.22e-05  1.93e-01  1.76e-01  
  6  +5.0001e-01  +8.3936e-01  3.39e-01  1.01e-03  5.46e-01  9.54e-06  1.04e-01  5.87e-01  
  7  +5.0001e-01  +6.9185e-01  1.92e-01  5.72e-04  3.09e-01  4.59e-06  5.95e-02  6.07e-01  
  8  +5.0000e-01  +6.3015e-01  1.30e-01  3.88e-04  2.10e-01  2.62e-06  3.64e-02  6.04e-01  
  9  +5.0000e-01  +5.8587e-01  8.59e-02  2.56e-04  1.38e-01  1.87e-06  1.87e-02  6.04e-01  
 10  +5.0000e-01  +5.7160e-01  7.16e-02  2.13e-04  1.15e-01  2.03e-06  6.90e-03  8.62e-01  
 11  +4.9996e-01  +5.5045e-01  5.05e-02  8.22e-05  4.45e-02  2.21e-05  3.54e-04  9.63e-01  
 12  +4.9936e-01  +5.4827e-01  4.89e-02  7.92e-06  4.29e-03  2.86e-04  2.59e-05  9.28e-01  
 13  +4.9871e-01  +5.4352e-01  4.48e-02  3.99e-06  2.16e-03  4.11e-04  1.29e-05  6.40e-01  
 14  +4.9837e-01  +5.4155e-01  4.32e-02  3.42e-06  1.86e-03  4.13e-04  1.10e-05  1.97e-01  
 15  +4.9837e-01  +5.4089e-01  4.25e-02  3.38e-06  1.83e-03  3.55e-04  1.08e-05  1.24e-01  
 16  +4.9770e-01  +5.3731e-01  3.96e-02  2.69e-06  1.46e-03  3.48e-04  8.59e-06  2.72e-01  
 17  +4.9769e-01  +5.3553e-01  3.78e-02  2.46e-06  1.33e-03  1.25e-04  7.81e-06  5.95e-01  
 18  +4.9735e-01  +5.3355e-01  3.62e-02  2.17e-06  1.18e-03  5.57e-05  6.90e-06  5.58e-01  
 19  +4.9721e-01  +5.3306e-01  3.58e-02  2.16e-06  1.17e-03  5.26e-05  6.86e-06  3.96e-02  
 20  +4.9416e-01  +5.2046e-01  2.63e-02  1.23e-06  6.69e-04  1.77e-05  3.98e-06  7.72e-01  
 21  +4.9105e-01  +5.0740e-01  1.64e-02  7.13e-07  3.86e-04  1.86e-07  2.35e-06  8.60e-01  
 22  +4.8777e-01  +4.9472e-01  6.95e-03  2.70e-07  1.46e-04  6.74e-08  9.15e-07  9.46e-01  
 23  +4.8625e-01  +4.8921e-01  2.95e-03  1.08e-07  5.87e-05  3.22e-08  3.76e-07  7.83e-01  
 24  +4.8623e-01  +4.8914e-01  2.90e-03  1.08e-07  5.83e-05  3.17e-08  3.75e-07  8.68e-02  
 25  +4.8588e-01  +4.8792e-01  2.03e-03  7.43e-08  4.03e-05  2.27e-08  2.61e-07  4.07e-01  
 26  +4.8533e-01  +4.8599e-01  6.56e-04  2.35e-08  1.27e-05  8.17e-09  8.36e-08  9.90e-01  
 27  +4.8506e-01  +4.8507e-01  8.29e-06  2.95e-10  1.60e-07  1.02e-10  1.06e-09  9.89e-01  
 28  +4.8506e-01  +4.8506e-01  8.29e-08  2.95e-12  1.60e-09  1.02e-12  1.06e-11  9.90e-01  
 29  +4.8506e-01  +4.8506e-01  8.34e-10  2.97e-14  1.61e-11  1.34e-14  1.38e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1036632s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:17 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:17 PM: Optimal value: 4.851e-01
(CVXPY) Sep 20 08:11:17 PM: Compilation took 2.182e-01 seconds
(CVXPY) Sep 20 08:11:17 PM: Solver (including time spent in interface) took 1.158e+00 seconds
Iteration: 5, Objective: 0.4851
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:17 PM: Your problem has 25069 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:17 PM: Finished problem compilation (took 2.062e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25069
  constraints   = 50069
  nnz(P)        = 0
  nnz(A)        = 389622
  cones (total) = 1
    : Nonnegative = 1,  numel = 50069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8092e-01  +5.4254e+03  5.42e+03  4.37e-01  1.76e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3203e-01  +6.1440e+02  6.14e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6041e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.45e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0001e-01  +1.2172e+00  7.17e-01  2.14e-03  1.15e+00  2.22e-05  1.93e-01  1.68e-01  
  6  +5.0001e-01  +8.0680e-01  3.07e-01  9.15e-04  4.95e-01  8.39e-06  9.50e-02  5.74e-01  
  7  +5.0001e-01  +6.7125e-01  1.71e-01  5.11e-04  2.76e-01  3.93e-06  5.19e-02  6.53e-01  
  8  +5.0001e-01  +6.2745e-01  1.27e-01  3.80e-04  2.06e-01  2.35e-06  3.21e-02  6.54e-01  
  9  +5.0000e-01  +5.9027e-01  9.03e-02  2.69e-04  1.46e-01  1.95e-06  1.60e-02  6.12e-01  
 10  +5.0000e-01  +5.9054e-01  9.05e-02  2.68e-04  1.45e-01  1.49e-06  6.97e-03  9.90e-01  
 11  +4.9998e-01  +5.6892e-01  6.89e-02  1.22e-04  6.61e-02  1.16e-05  5.46e-04  9.31e-01  
 12  +4.9929e-01  +5.6550e-01  6.62e-02  5.81e-06  3.15e-03  3.17e-04  1.87e-05  9.66e-01  
 13  +4.9890e-01  +5.6056e-01  6.17e-02  5.02e-06  2.72e-03  2.94e-04  1.61e-05  1.93e-01  
 14  +4.9878e-01  +5.5592e-01  5.71e-02  4.75e-06  2.58e-03  2.10e-04  1.52e-05  2.19e-01  
 15  +4.9848e-01  +5.5088e-01  5.24e-02  4.19e-06  2.27e-03  1.51e-04  1.34e-05  3.02e-01  
 16  +4.9817e-01  +5.4793e-01  4.98e-02  3.72e-06  2.02e-03  1.32e-04  1.19e-05  2.17e-01  
 17  +4.9780e-01  +5.4154e-01  4.37e-02  3.22e-06  1.75e-03  3.78e-05  1.03e-05  6.19e-01  
 18  +4.9579e-01  +5.3107e-01  3.53e-02  1.91e-06  1.04e-03  3.07e-05  6.12e-06  5.48e-01  
 19  +4.9530e-01  +5.2924e-01  3.39e-02  1.89e-06  1.03e-03  2.77e-05  6.12e-06  2.07e-02  
 20  +4.9528e-01  +5.2915e-01  3.39e-02  1.89e-06  1.03e-03  2.74e-05  6.12e-06  6.21e-03  
 21  +4.9412e-01  +5.2424e-01  3.01e-02  1.56e-06  8.44e-04  1.84e-05  5.06e-06  3.59e-01  
 22  +4.9405e-01  +5.2382e-01  2.98e-02  1.53e-06  8.30e-04  1.48e-05  4.98e-06  1.67e-01  
 23  +4.9017e-01  +5.0796e-01  1.78e-02  7.68e-07  4.17e-04  7.18e-06  2.57e-06  5.81e-01  
 24  +4.8848e-01  +5.0053e-01  1.21e-02  4.86e-07  2.64e-04  8.75e-07  1.67e-06  8.39e-01  
 25  +4.8487e-01  +4.8685e-01  1.98e-03  7.48e-08  4.06e-05  2.54e-08  2.71e-07  9.57e-01  
 26  +4.8423e-01  +4.8461e-01  3.75e-04  1.39e-08  7.55e-06  4.41e-09  5.18e-08  9.90e-01  
 27  +4.8408e-01  +4.8409e-01  4.03e-06  1.50e-10  8.11e-08  4.70e-11  5.60e-10  9.89e-01  
 28  +4.8408e-01  +4.8408e-01  4.03e-08  1.50e-12  8.11e-10  4.70e-13  5.60e-12  9.90e-01  
 29  +4.8408e-01  +4.8408e-01  4.04e-10  1.50e-14  8.13e-12  5.32e-15  6.30e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 990.1879ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:19 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:19 PM: Optimal value: 4.841e-01
(CVXPY) Sep 20 08:11:19 PM: Compilation took 2.062e-01 seconds
(CVXPY) Sep 20 08:11:19 PM: Solver (including time spent in interface) took 1.041e+00 seconds
Iteration: 6, Objective: 0.4841
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:19 PM: Your problem has 25079 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:19 PM: Finished problem compilation (took 2.040e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25079
  constraints   = 50079
  nnz(P)        = 0
  nnz(A)        = 399658
  cones (total) = 1
    : Nonnegative = 1,  numel = 50079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8091e-01  +5.4255e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3203e-01  +6.1436e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6040e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7631e+01  1.71e+01  4.71e-02  2.45e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0001e-01  +1.2414e+00  7.41e-01  2.21e-03  1.19e+00  2.22e-05  1.93e-01  1.62e-01  
  6  +5.0001e-01  +7.8535e-01  2.85e-01  8.51e-04  4.61e-01  7.34e-06  8.78e-02  6.21e-01  
  7  +5.0000e-01  +6.5483e-01  1.55e-01  4.62e-04  2.50e-01  3.86e-06  4.75e-02  5.53e-01  
  8  +5.0000e-01  +6.3336e-01  1.33e-01  3.98e-04  2.15e-01  2.87e-06  3.37e-02  5.21e-01  
  9  +5.0000e-01  +5.9189e-01  9.19e-02  2.74e-04  1.48e-01  2.56e-06  1.64e-02  5.67e-01  
 10  +5.0000e-01  +5.7916e-01  7.92e-02  2.35e-04  1.27e-01  4.18e-06  6.36e-03  6.54e-01  
 11  +4.9989e-01  +5.6037e-01  6.05e-02  7.72e-05  4.19e-02  5.34e-05  3.04e-04  9.90e-01  
 12  +4.9864e-01  +5.5521e-01  5.66e-02  7.53e-06  4.09e-03  6.00e-04  2.46e-05  9.19e-01  
 13  +4.9861e-01  +5.5340e-01  5.48e-02  6.63e-06  3.60e-03  5.25e-04  2.15e-05  2.83e-01  
 14  +4.9881e-01  +5.5090e-01  5.21e-02  6.07e-06  3.30e-03  2.98e-04  1.95e-05  4.59e-01  
 15  +4.9825e-01  +5.4678e-01  4.85e-02  4.38e-06  2.38e-03  2.83e-04  1.40e-05  4.50e-01  
 16  +4.9819e-01  +5.4593e-01  4.77e-02  4.22e-06  2.29e-03  2.37e-04  1.34e-05  1.80e-01  
 17  +4.9799e-01  +5.4453e-01  4.65e-02  3.89e-06  2.11e-03  2.14e-04  1.23e-05  1.76e-01  
 18  +4.9807e-01  +5.4333e-01  4.53e-02  3.60e-06  1.96e-03  5.93e-05  1.13e-05  6.75e-01  
 19  +4.9787e-01  +5.4208e-01  4.42e-02  3.37e-06  1.83e-03  3.45e-05  1.06e-05  4.12e-01  
 20  +4.9730e-01  +5.3905e-01  4.17e-02  2.89e-06  1.57e-03  1.09e-05  9.11e-06  6.79e-01  
 21  +4.9637e-01  +5.3496e-01  3.86e-02  2.40e-06  1.30e-03  1.21e-07  7.60e-06  9.10e-01  
 22  +4.9570e-01  +5.3202e-01  3.63e-02  2.11e-06  1.15e-03  1.33e-07  6.70e-06  2.00e-01  
 23  +4.9541e-01  +5.3091e-01  3.55e-02  2.08e-06  1.13e-03  1.57e-07  6.61e-06  2.12e-01  
 24  +4.9309e-01  +5.2086e-01  2.78e-02  1.40e-06  7.61e-04  1.38e-07  4.50e-06  3.63e-01  
 25  +4.9200e-01  +5.1613e-01  2.41e-02  1.14e-06  6.21e-04  1.74e-07  3.69e-06  6.43e-01  
 26  +4.8961e-01  +5.0597e-01  1.64e-02  7.00e-07  3.80e-04  1.51e-07  2.28e-06  9.90e-01  
 27  +4.8611e-01  +4.9201e-01  5.90e-03  2.33e-07  1.27e-04  5.60e-08  7.76e-07  8.57e-01  
 28  +4.8483e-01  +4.8704e-01  2.22e-03  8.54e-08  4.64e-05  2.21e-08  2.88e-07  7.01e-01  
 29  +4.8416e-01  +4.8456e-01  3.98e-04  1.47e-08  8.01e-06  4.58e-09  5.03e-08  8.92e-01  
 30  +4.8399e-01  +4.8402e-01  2.53e-05  8.83e-10  4.80e-07  2.86e-10  3.10e-09  9.62e-01  
 31  +4.8398e-01  +4.8398e-01  2.53e-07  8.83e-12  4.79e-09  2.87e-12  3.11e-11  9.90e-01  
 32  +4.8398e-01  +4.8398e-01  2.53e-09  8.83e-14  4.79e-11  2.87e-14  3.11e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1521713s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:20 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:20 PM: Optimal value: 4.840e-01
(CVXPY) Sep 20 08:11:20 PM: Compilation took 2.040e-01 seconds
(CVXPY) Sep 20 08:11:20 PM: Solver (including time spent in interface) took 1.202e+00 seconds
Iteration: 7, Objective: 0.4840
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:20 PM: Your problem has 25089 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:21 PM: Finished problem compilation (took 2.364e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25089
  constraints   = 50089
  nnz(P)        = 0
  nnz(A)        = 408323
  cones (total) = 1
    : Nonnegative = 1,  numel = 50089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8090e-01  +5.4256e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3202e-01  +6.1428e+02  6.14e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6037e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.71e-02  2.45e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0001e-01  +1.2364e+00  7.36e-01  2.20e-03  1.19e+00  2.22e-05  1.93e-01  1.64e-01  
  6  +5.0001e-01  +6.9604e-01  1.96e-01  5.85e-04  3.17e-01  3.65e-06  6.04e-02  9.01e-01  
  7  +5.0001e-01  +6.5211e-01  1.52e-01  4.54e-04  2.46e-01  2.63e-06  4.23e-02  4.74e-01  
  8  +5.0001e-01  +6.2718e-01  1.27e-01  3.79e-04  2.06e-01  2.06e-06  2.88e-02  5.00e-01  
  9  +5.0001e-01  +6.1591e-01  1.16e-01  3.46e-04  1.87e-01  1.62e-06  1.83e-02  6.30e-01  
 10  +5.0000e-01  +5.9147e-01  9.15e-02  2.71e-04  1.47e-01  1.99e-06  6.67e-03  7.78e-01  
 11  +4.9995e-01  +5.6105e-01  6.11e-02  7.66e-05  4.16e-02  2.37e-05  2.95e-04  9.86e-01  
 12  +4.9964e-01  +5.5980e-01  6.02e-02  1.30e-05  7.06e-03  1.61e-04  4.20e-05  8.61e-01  
 13  +4.9926e-01  +5.5633e-01  5.71e-02  6.41e-06  3.49e-03  2.56e-04  2.05e-05  6.50e-01  
 14  +4.9838e-01  +5.5153e-01  5.31e-02  3.85e-06  2.09e-03  3.51e-04  1.23e-05  4.45e-01  
 15  +4.9816e-01  +5.5006e-01  5.19e-02  3.66e-06  1.99e-03  3.18e-04  1.17e-05  1.28e-01  
 16  +4.9770e-01  +5.4657e-01  4.89e-02  3.40e-06  1.85e-03  2.18e-04  1.08e-05  2.88e-01  
 17  +4.9699e-01  +5.4237e-01  4.54e-02  3.01e-06  1.64e-03  1.50e-04  9.61e-06  3.25e-01  
 18  +4.9568e-01  +5.3580e-01  4.01e-02  2.40e-06  1.31e-03  1.12e-04  7.71e-06  3.39e-01  
 19  +4.9515e-01  +5.3301e-01  3.79e-02  2.18e-06  1.19e-03  4.73e-05  7.02e-06  5.04e-01  
 20  +4.9423e-01  +5.2889e-01  3.47e-02  1.87e-06  1.02e-03  3.14e-05  6.03e-06  3.54e-01  
 21  +4.9217e-01  +5.1937e-01  2.72e-02  1.34e-06  7.31e-04  3.40e-07  4.37e-06  8.62e-01  
 22  +4.8967e-01  +5.0917e-01  1.95e-02  8.87e-07  4.82e-04  2.13e-07  2.92e-06  5.30e-01  
 23  +4.8843e-01  +5.0402e-01  1.56e-02  6.55e-07  3.56e-04  1.48e-07  2.17e-06  9.90e-01  
 24  +4.8679e-01  +4.9736e-01  1.06e-02  4.28e-07  2.33e-04  1.10e-07  1.43e-06  8.06e-01  
 25  +4.8571e-01  +4.9311e-01  7.40e-03  2.93e-07  1.59e-04  7.80e-08  9.86e-07  3.73e-01  
 26  +4.8562e-01  +4.9268e-01  7.06e-03  2.74e-07  1.49e-04  7.91e-08  9.20e-07  4.56e-01  
 27  +4.8538e-01  +4.9172e-01  6.34e-03  2.45e-07  1.33e-04  7.21e-08  8.23e-07  2.26e-01  
 28  +4.8513e-01  +4.9061e-01  5.49e-03  2.11e-07  1.15e-04  6.73e-08  7.09e-07  9.90e-01  
 29  +4.8420e-01  +4.8713e-01  2.93e-03  1.12e-07  6.07e-05  3.61e-08  3.78e-07  5.83e-01  
 30  +4.8415e-01  +4.8695e-01  2.80e-03  1.06e-07  5.79e-05  3.45e-08  3.60e-07  1.26e-01  
 31  +4.8389e-01  +4.8599e-01  2.10e-03  7.95e-08  4.32e-05  2.59e-08  2.70e-07  9.90e-01  
 32  +4.8349e-01  +4.8452e-01  1.02e-03  3.88e-08  2.11e-05  1.23e-08  1.33e-07  9.90e-01  
 33  +4.8325e-01  +4.8360e-01  3.55e-04  1.34e-08  7.30e-06  4.32e-09  4.59e-08  7.39e-01  
 34  +4.8314e-01  +4.8319e-01  5.42e-05  2.04e-09  1.11e-06  6.66e-10  6.98e-09  9.38e-01  
 35  +4.8312e-01  +4.8312e-01  5.48e-07  2.06e-11  1.12e-08  6.73e-12  7.07e-11  9.90e-01  
 36  +4.8312e-01  +4.8312e-01  5.49e-09  2.07e-13  1.12e-10  6.99e-14  7.33e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2662221s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:22 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:22 PM: Optimal value: 4.831e-01
(CVXPY) Sep 20 08:11:22 PM: Compilation took 2.364e-01 seconds
(CVXPY) Sep 20 08:11:22 PM: Solver (including time spent in interface) took 1.317e+00 seconds
Iteration: 8, Objective: 0.4831
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:22 PM: Your problem has 25099 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:22 PM: Finished problem compilation (took 2.010e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25099
  constraints   = 50099
  nnz(P)        = 0
  nnz(A)        = 417946
  cones (total) = 1
    : Nonnegative = 1,  numel = 50099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8089e-01  +5.4258e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3201e-01  +6.1416e+02  6.14e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0906e-01  +1.6034e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7634e+01  1.71e+01  4.71e-02  2.46e+01  5.20e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.2506e+00  7.51e-01  2.24e-03  1.21e+00  2.23e-05  1.93e-01  1.62e-01  
  6  +5.0001e-01  +7.2485e-01  2.25e-01  6.71e-04  3.64e-01  5.01e-06  6.92e-02  7.80e-01  
  7  +5.0001e-01  +6.6256e-01  1.63e-01  4.85e-04  2.63e-01  3.29e-06  4.50e-02  5.45e-01  
  8  +5.0000e-01  +6.2179e-01  1.22e-01  3.63e-04  1.97e-01  2.34e-06  2.53e-02  6.48e-01  
  9  +5.0000e-01  +6.0725e-01  1.07e-01  3.20e-04  1.74e-01  2.48e-06  1.48e-02  5.14e-01  
 10  +4.9999e-01  +5.7095e-01  7.10e-02  1.99e-04  1.08e-01  7.83e-06  2.09e-03  8.96e-01  
 11  +4.9921e-01  +5.6459e-01  6.54e-02  1.21e-05  6.58e-03  3.63e-04  3.89e-05  9.90e-01  
 12  +4.9853e-01  +5.6052e-01  6.20e-02  6.82e-06  3.72e-03  5.38e-04  2.18e-05  5.06e-01  
 13  +4.9871e-01  +5.5821e-01  5.95e-02  6.25e-06  3.41e-03  3.47e-04  1.99e-05  4.05e-01  
 14  +4.9873e-01  +5.5786e-01  5.91e-02  6.20e-06  3.38e-03  3.22e-04  1.97e-05  7.28e-02  
 15  +4.9892e-01  +5.5653e-01  5.76e-02  6.03e-06  3.29e-03  1.79e-04  1.91e-05  4.14e-01  
 16  +4.9830e-01  +5.5348e-01  5.52e-02  4.49e-06  2.44e-03  2.06e-04  1.42e-05  2.99e-01  
 17  +4.9797e-01  +5.5123e-01  5.33e-02  4.03e-06  2.20e-03  1.62e-04  1.28e-05  2.96e-01  
 18  +4.9760e-01  +5.4865e-01  5.11e-02  3.75e-06  2.04e-03  9.90e-05  1.19e-05  3.78e-01  
 19  +4.9663e-01  +5.4316e-01  4.65e-02  3.24e-06  1.77e-03  1.52e-05  1.04e-05  7.62e-01  
 20  +4.9319e-01  +5.2786e-01  3.47e-02  1.86e-06  1.01e-03  9.66e-06  6.02e-06  5.93e-01  
 21  +4.9311e-01  +5.2752e-01  3.44e-02  1.84e-06  1.00e-03  8.88e-06  5.99e-06  6.48e-02  
 22  +4.9220e-01  +5.2350e-01  3.13e-02  1.63e-06  8.89e-04  6.17e-06  5.32e-06  2.86e-01  
 23  +4.9208e-01  +5.2300e-01  3.09e-02  1.58e-06  8.59e-04  2.97e-06  5.14e-06  4.74e-01  
 24  +4.8825e-01  +5.0664e-01  1.84e-02  8.49e-07  4.62e-04  1.46e-06  2.82e-06  5.25e-01  
 25  +4.8827e-01  +5.0670e-01  1.84e-02  8.29e-07  4.51e-04  1.17e-06  2.74e-06  2.45e-01  
 26  +4.8553e-01  +4.9537e-01  9.85e-03  4.11e-07  2.24e-04  4.54e-07  1.38e-06  6.47e-01  
 27  +4.8436e-01  +4.9061e-01  6.25e-03  2.47e-07  1.34e-04  7.28e-08  8.30e-07  9.90e-01  
 28  +4.8371e-01  +4.8808e-01  4.38e-03  1.70e-07  9.27e-05  5.13e-08  5.75e-07  3.34e-01  
 29  +4.8364e-01  +4.8784e-01  4.20e-03  1.65e-07  9.00e-05  4.82e-08  5.66e-07  2.49e-01  
 30  +4.8329e-01  +4.8645e-01  3.16e-03  1.24e-07  6.75e-05  3.65e-08  4.26e-07  3.60e-01  
 31  +4.8316e-01  +4.8594e-01  2.78e-03  1.08e-07  5.90e-05  3.24e-08  3.72e-07  2.76e-01  
 32  +4.8311e-01  +4.8573e-01  2.62e-03  1.02e-07  5.54e-05  3.10e-08  3.48e-07  3.87e-01  
 33  +4.8278e-01  +4.8450e-01  1.72e-03  6.61e-08  3.60e-05  2.06e-08  2.26e-07  4.60e-01  
 34  +4.8277e-01  +4.8448e-01  1.71e-03  6.53e-08  3.55e-05  2.05e-08  2.23e-07  1.28e-01  
 35  +4.8231e-01  +4.8277e-01  4.60e-04  1.72e-08  9.36e-06  5.59e-09  5.97e-08  9.06e-01  
 36  +4.8213e-01  +4.8216e-01  2.48e-05  8.88e-10  4.83e-07  3.15e-10  3.20e-09  9.84e-01  
 37  +4.8212e-01  +4.8212e-01  2.50e-07  8.93e-12  4.86e-09  3.17e-12  3.22e-11  9.90e-01  
 38  +4.8212e-01  +4.8212e-01  2.50e-09  8.93e-14  4.86e-11  3.17e-14  3.22e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3474942s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:24 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:24 PM: Optimal value: 4.821e-01
(CVXPY) Sep 20 08:11:24 PM: Compilation took 2.010e-01 seconds
(CVXPY) Sep 20 08:11:24 PM: Solver (including time spent in interface) took 1.394e+00 seconds
Iteration: 9, Objective: 0.4821
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:24 PM: Your problem has 25109 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:24 PM: Finished problem compilation (took 2.152e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25109
  constraints   = 50109
  nnz(P)        = 0
  nnz(A)        = 426346
  cones (total) = 1
    : Nonnegative = 1,  numel = 50109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8089e-01  +5.4258e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3200e-01  +6.1413e+02  6.14e+02  1.78e-01  9.27e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0906e-01  +1.6033e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7634e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2288e+00  7.29e-01  2.18e-03  1.18e+00  2.23e-05  1.93e-01  1.67e-01  
  6  +5.0001e-01  +7.2648e-01  2.26e-01  6.76e-04  3.67e-01  5.29e-06  7.00e-02  7.72e-01  
  7  +5.0001e-01  +6.7039e-01  1.70e-01  5.09e-04  2.76e-01  3.67e-06  4.75e-02  4.97e-01  
  8  +5.0000e-01  +6.3073e-01  1.31e-01  3.90e-04  2.12e-01  2.56e-06  2.78e-02  6.46e-01  
  9  +5.0000e-01  +6.1153e-01  1.12e-01  3.32e-04  1.81e-01  2.64e-06  1.60e-02  5.18e-01  
 10  +5.0000e-01  +5.8684e-01  8.68e-02  2.52e-04  1.37e-01  4.74e-06  3.59e-03  9.59e-01  
 11  +4.9985e-01  +5.6991e-01  7.01e-02  4.81e-05  2.62e-02  7.21e-05  1.65e-04  9.90e-01  
 12  +4.9866e-01  +5.6486e-01  6.62e-02  6.13e-06  3.35e-03  5.62e-04  1.95e-05  8.83e-01  
 13  +4.9859e-01  +5.6239e-01  6.38e-02  5.68e-06  3.10e-03  4.65e-04  1.80e-05  2.26e-01  
 14  +4.9857e-01  +5.5959e-01  6.10e-02  5.31e-06  2.89e-03  3.27e-04  1.68e-05  3.12e-01  
 15  +4.9855e-01  +5.5852e-01  6.00e-02  5.23e-06  2.85e-03  2.78e-04  1.65e-05  1.33e-01  
 16  +4.9809e-01  +5.5555e-01  5.75e-02  4.45e-06  2.43e-03  2.64e-04  1.40e-05  2.35e-01  
 17  +4.9809e-01  +5.5499e-01  5.69e-02  4.43e-06  2.41e-03  2.28e-04  1.40e-05  1.13e-01  
 18  +4.9767e-01  +5.5271e-01  5.50e-02  3.94e-06  2.15e-03  2.21e-04  1.24e-05  1.61e-01  
 19  +4.9742e-01  +5.5055e-01  5.31e-02  3.81e-06  2.08e-03  1.53e-04  1.21e-05  2.55e-01  
 20  +4.9659e-01  +5.4587e-01  4.93e-02  3.29e-06  1.79e-03  8.95e-05  1.04e-05  4.39e-01  
 21  +4.9536e-01  +5.3969e-01  4.43e-02  2.74e-06  1.50e-03  5.74e-05  8.77e-06  3.81e-01  
 22  +4.9268e-01  +5.2728e-01  3.46e-02  1.87e-06  1.02e-03  3.86e-05  6.06e-06  4.17e-01  
 23  +4.9243e-01  +5.2569e-01  3.33e-02  1.77e-06  9.67e-04  1.77e-05  5.75e-06  4.62e-01  
 24  +4.9054e-01  +5.1722e-01  2.67e-02  1.34e-06  7.31e-04  1.16e-05  4.37e-06  3.54e-01  
 25  +4.8957e-01  +5.1283e-01  2.33e-02  1.11e-06  6.04e-04  6.07e-06  3.62e-06  4.75e-01  
 26  +4.8720e-01  +5.0264e-01  1.54e-02  6.81e-07  3.71e-04  2.22e-06  2.24e-06  6.40e-01  
 27  +4.8700e-01  +5.0173e-01  1.47e-02  6.26e-07  3.41e-04  1.13e-06  2.06e-06  5.35e-01  
 28  +4.8593e-01  +4.9717e-01  1.12e-02  4.62e-07  2.52e-04  2.43e-07  1.53e-06  8.58e-01  
 29  +4.8460e-01  +4.9169e-01  7.09e-03  2.83e-07  1.55e-04  8.28e-08  9.45e-07  9.90e-01  
 30  +4.8424e-01  +4.9025e-01  6.02e-03  2.39e-07  1.30e-04  7.05e-08  7.98e-07  2.59e-01  
 31  +4.8367e-01  +4.8794e-01  4.27e-03  1.67e-07  9.11e-05  5.14e-08  5.61e-07  8.21e-01  
 32  +4.8366e-01  +4.8791e-01  4.25e-03  1.66e-07  9.06e-05  5.12e-08  5.58e-07  3.54e-02  
 33  +4.8356e-01  +4.8752e-01  3.96e-03  1.56e-07  8.51e-05  4.70e-08  5.29e-07  8.10e-01  
 34  +4.8313e-01  +4.8585e-01  2.72e-03  1.06e-07  5.79e-05  3.24e-08  3.61e-07  3.65e-01  
 35  +4.8296e-01  +4.8519e-01  2.23e-03  8.60e-08  4.69e-05  2.70e-08  2.92e-07  7.01e-01  
 36  +4.8257e-01  +4.8376e-01  1.18e-03  4.49e-08  2.45e-05  1.44e-08  1.54e-07  5.97e-01  
 37  +4.8228e-01  +4.8268e-01  3.98e-04  1.48e-08  8.04e-06  4.87e-09  5.16e-08  7.51e-01  
 38  +4.8226e-01  +4.8260e-01  3.42e-04  1.26e-08  6.87e-06  4.19e-09  4.43e-08  4.34e-01  
 39  +4.8213e-01  +4.8214e-01  1.30e-05  4.67e-10  2.55e-07  1.64e-10  1.68e-09  9.90e-01  
 40  +4.8212e-01  +4.8212e-01  1.31e-07  4.69e-12  2.56e-09  1.64e-12  1.69e-11  9.90e-01  
 41  +4.8212e-01  +4.8212e-01  1.31e-09  4.70e-14  2.56e-11  1.65e-14  1.69e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4560554s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:26 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:26 PM: Optimal value: 4.821e-01
(CVXPY) Sep 20 08:11:26 PM: Compilation took 2.152e-01 seconds
(CVXPY) Sep 20 08:11:26 PM: Solver (including time spent in interface) took 1.504e+00 seconds
Iteration: 10, Objective: 0.4821
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:26 PM: Your problem has 25119 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:26 PM: Finished problem compilation (took 2.058e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25119
  constraints   = 50119
  nnz(P)        = 0
  nnz(A)        = 431659
  cones (total) = 1
    : Nonnegative = 1,  numel = 50119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8089e-01  +5.4257e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3200e-01  +6.1409e+02  6.14e+02  1.78e-01  9.27e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0906e-01  +1.6031e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2177e+00  7.18e-01  2.14e-03  1.16e+00  2.24e-05  1.93e-01  1.71e-01  
  6  +5.0001e-01  +7.2297e-01  2.23e-01  6.66e-04  3.62e-01  5.17e-06  6.85e-02  8.00e-01  
  7  +5.0000e-01  +6.5697e-01  1.57e-01  4.69e-04  2.55e-01  3.79e-06  4.45e-02  4.12e-01  
  8  +5.0000e-01  +6.4082e-01  1.41e-01  4.20e-04  2.29e-01  3.37e-06  3.28e-02  3.93e-01  
  9  +5.0001e-01  +6.3623e-01  1.36e-01  4.06e-04  2.21e-01  2.10e-06  1.76e-02  9.07e-01  
 10  +5.0000e-01  +6.0938e-01  1.09e-01  3.21e-04  1.75e-01  3.62e-06  6.01e-03  6.75e-01  
 11  +4.9990e-01  +5.7883e-01  7.89e-02  7.73e-05  4.21e-02  4.68e-05  2.77e-04  9.75e-01  
 12  +4.9832e-01  +5.7240e-01  7.41e-02  5.17e-06  2.82e-03  7.30e-04  1.63e-05  9.41e-01  
 13  +4.9788e-01  +5.6646e-01  6.86e-02  4.68e-06  2.55e-03  5.56e-04  1.47e-05  2.45e-01  
 14  +4.9771e-01  +5.6427e-01  6.66e-02  4.39e-06  2.39e-03  4.89e-04  1.38e-05  1.61e-01  
 15  +4.9750e-01  +5.6180e-01  6.43e-02  4.17e-06  2.27e-03  4.12e-04  1.31e-05  1.61e-01  
 16  +4.9682e-01  +5.5492e-01  5.81e-02  3.87e-06  2.11e-03  2.29e-04  1.22e-05  3.34e-01  
 17  +4.9428e-01  +5.4145e-01  4.72e-02  2.68e-06  1.46e-03  1.70e-04  8.58e-06  4.06e-01  
 18  +4.9300e-01  +5.3499e-01  4.20e-02  2.29e-06  1.25e-03  1.30e-04  7.37e-06  2.43e-01  
 19  +4.9229e-01  +5.3084e-01  3.85e-02  2.04e-06  1.11e-03  7.52e-05  6.58e-06  3.74e-01  
 20  +4.9220e-01  +5.3024e-01  3.80e-02  2.01e-06  1.10e-03  6.48e-05  6.51e-06  1.12e-01  
 21  +4.9191e-01  +5.2875e-01  3.68e-02  1.93e-06  1.05e-03  5.32e-05  6.23e-06  1.62e-01  
 22  +4.9167e-01  +5.2657e-01  3.49e-02  1.79e-06  9.77e-04  7.65e-06  5.80e-06  7.23e-01  
 23  +4.8981e-01  +5.1858e-01  2.88e-02  1.40e-06  7.65e-04  5.40e-06  4.59e-06  3.05e-01  
 24  +4.8803e-01  +5.1069e-01  2.27e-02  1.02e-06  5.57e-04  5.79e-08  3.37e-06  9.32e-01  
 25  +4.8696e-01  +5.0627e-01  1.93e-02  8.51e-07  4.64e-04  5.92e-08  2.82e-06  2.16e-01  
 26  +4.8620e-01  +5.0295e-01  1.67e-02  7.03e-07  3.83e-04  1.74e-07  2.34e-06  9.59e-01  
 27  +4.8477e-01  +4.9718e-01  1.24e-02  5.10e-07  2.78e-04  1.29e-07  1.72e-06  3.35e-01  
 28  +4.8439e-01  +4.9561e-01  1.12e-02  4.55e-07  2.48e-04  1.24e-07  1.54e-06  7.01e-01  
 29  +4.8290e-01  +4.8976e-01  6.87e-03  2.72e-07  1.48e-04  7.61e-08  9.41e-07  4.55e-01  
 30  +4.8207e-01  +4.8647e-01  4.40e-03  1.71e-07  9.32e-05  5.16e-08  6.00e-07  9.90e-01  
 31  +4.8142e-01  +4.8406e-01  2.64e-03  1.01e-07  5.51e-05  3.09e-08  3.61e-07  4.42e-01  
 32  +4.8138e-01  +4.8388e-01  2.50e-03  9.57e-08  5.22e-05  2.93e-08  3.42e-07  1.24e-01  
 33  +4.8130e-01  +4.8356e-01  2.26e-03  8.64e-08  4.71e-05  2.65e-08  3.09e-07  4.96e-01  
 34  +4.8109e-01  +4.8279e-01  1.70e-03  6.47e-08  3.53e-05  2.00e-08  2.33e-07  4.06e-01  
 35  +4.8105e-01  +4.8261e-01  1.56e-03  5.94e-08  3.24e-05  1.83e-08  2.14e-07  8.72e-01  
 36  +4.8052e-01  +4.8073e-01  2.09e-04  7.80e-09  4.25e-06  2.43e-09  2.88e-08  8.83e-01  
 37  +4.8044e-01  +4.8045e-01  9.94e-06  3.71e-10  2.02e-07  1.16e-10  1.37e-09  9.90e-01  
 38  +4.8044e-01  +4.8044e-01  9.95e-08  3.71e-12  2.02e-09  1.16e-12  1.38e-11  9.90e-01  
 39  +4.8044e-01  +4.8044e-01  1.00e-09  3.74e-14  2.04e-11  1.68e-14  1.97e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3172197s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:27 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:27 PM: Optimal value: 4.804e-01
(CVXPY) Sep 20 08:11:27 PM: Compilation took 2.058e-01 seconds
(CVXPY) Sep 20 08:11:27 PM: Solver (including time spent in interface) took 1.365e+00 seconds
Iteration: 11, Objective: 0.4804
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:28 PM: Your problem has 25129 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:28 PM: Finished problem compilation (took 2.134e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25129
  constraints   = 50129
  nnz(P)        = 0
  nnz(A)        = 435685
  cones (total) = 1
    : Nonnegative = 1,  numel = 50129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8088e-01  +5.4257e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3200e-01  +6.1406e+02  6.14e+02  1.78e-01  9.27e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6030e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2007e+00  7.01e-01  2.09e-03  1.13e+00  2.24e-05  1.93e-01  1.76e-01  
  6  +5.0001e-01  +7.4912e-01  2.49e-01  7.44e-04  4.04e-01  6.25e-06  7.61e-02  7.56e-01  
  7  +5.0000e-01  +6.6548e-01  1.65e-01  4.94e-04  2.69e-01  4.35e-06  4.75e-02  4.26e-01  
  8  +5.0000e-01  +6.4160e-01  1.42e-01  4.23e-04  2.30e-01  3.76e-06  3.31e-02  4.27e-01  
  9  +5.0000e-01  +6.3490e-01  1.35e-01  4.02e-04  2.19e-01  3.36e-06  2.30e-02  5.08e-01  
 10  +5.0000e-01  +6.1630e-01  1.16e-01  3.45e-04  1.87e-01  2.34e-06  8.93e-03  9.90e-01  
 11  +4.9997e-01  +5.8681e-01  8.68e-02  1.59e-04  8.65e-02  1.74e-05  7.10e-04  9.32e-01  
 12  +4.9881e-01  +5.8164e-01  8.28e-02  6.84e-06  3.73e-03  5.33e-04  2.15e-05  9.70e-01  
 13  +4.9856e-01  +5.7799e-01  7.94e-02  6.21e-06  3.39e-03  4.98e-04  1.95e-05  1.55e-01  
 14  +4.9843e-01  +5.7256e-01  7.41e-02  5.77e-06  3.15e-03  3.67e-04  1.81e-05  2.48e-01  
 15  +4.9827e-01  +5.6823e-01  7.00e-02  5.35e-06  2.92e-03  2.73e-04  1.68e-05  2.56e-01  
 16  +4.9765e-01  +5.6394e-01  6.63e-02  4.53e-06  2.47e-03  2.57e-04  1.43e-05  2.26e-01  
 17  +4.9753e-01  +5.6239e-01  6.49e-02  4.51e-06  2.46e-03  2.27e-04  1.42e-05  7.17e-02  
 18  +4.9621e-01  +5.5409e-01  5.79e-02  3.62e-06  1.98e-03  1.74e-04  1.15e-05  3.37e-01  
 19  +4.9387e-01  +5.4142e-01  4.76e-02  2.68e-06  1.46e-03  1.20e-04  8.58e-06  3.75e-01  
 20  +4.9322e-01  +5.3779e-01  4.46e-02  2.46e-06  1.34e-03  9.16e-05  7.91e-06  2.15e-01  
 21  +4.9220e-01  +5.3284e-01  4.06e-02  2.16e-06  1.18e-03  7.50e-05  6.96e-06  1.96e-01  
 22  +4.9166e-01  +5.2921e-01  3.76e-02  1.95e-06  1.06e-03  3.51e-05  6.30e-06  4.60e-01  
 23  +4.9127e-01  +5.2725e-01  3.60e-02  1.84e-06  1.00e-03  2.65e-05  5.96e-06  2.20e-01  
 24  +4.8875e-01  +5.1579e-01  2.70e-02  1.28e-06  6.96e-04  6.59e-06  4.18e-06  6.93e-01  
 25  +4.8697e-01  +5.0831e-01  2.13e-02  9.58e-07  5.23e-04  4.35e-06  3.16e-06  3.54e-01  
 26  +4.8677e-01  +5.0742e-01  2.06e-02  9.18e-07  5.01e-04  3.81e-06  3.04e-06  1.29e-01  
 27  +4.8625e-01  +5.0518e-01  1.89e-02  8.24e-07  4.49e-04  2.77e-06  2.73e-06  2.84e-01  
 28  +4.8602e-01  +5.0414e-01  1.81e-02  7.77e-07  4.24e-04  2.13e-06  2.58e-06  2.49e-01  
 29  +4.8572e-01  +5.0287e-01  1.71e-02  7.26e-07  3.96e-04  1.68e-06  2.41e-06  2.25e-01  
 30  +4.8509e-01  +5.0006e-01  1.50e-02  6.07e-07  3.31e-04  1.35e-07  2.02e-06  9.90e-01  
 31  +4.8298e-01  +4.9178e-01  8.80e-03  3.48e-07  1.90e-04  8.43e-08  1.18e-06  5.65e-01  
 32  +4.8235e-01  +4.8926e-01  6.91e-03  2.71e-07  1.48e-04  7.20e-08  9.29e-07  5.02e-01  
 33  +4.8187e-01  +4.8740e-01  5.53e-03  2.15e-07  1.17e-04  5.96e-08  7.44e-07  3.89e-01  
 34  +4.8064e-01  +4.8271e-01  2.07e-03  7.86e-08  4.28e-05  2.47e-08  2.80e-07  9.90e-01  
 35  +4.8015e-01  +4.8093e-01  7.88e-04  2.94e-08  1.60e-05  9.36e-09  1.07e-07  6.30e-01  
 36  +4.7986e-01  +4.7992e-01  5.73e-05  2.11e-09  1.15e-06  6.74e-10  7.83e-09  9.90e-01  
 37  +4.7984e-01  +4.7984e-01  5.96e-07  2.19e-11  1.20e-08  7.01e-12  8.14e-11  9.90e-01  
 38  +4.7984e-01  +4.7984e-01  5.96e-09  2.19e-13  1.20e-10  7.01e-14  8.14e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2935424s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:29 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:29 PM: Optimal value: 4.798e-01
(CVXPY) Sep 20 08:11:29 PM: Compilation took 2.134e-01 seconds
(CVXPY) Sep 20 08:11:29 PM: Solver (including time spent in interface) took 1.341e+00 seconds
Iteration: 12, Objective: 0.4798
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:29 PM: Your problem has 25139 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:30 PM: Finished problem compilation (took 2.184e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25139
  constraints   = 50139
  nnz(P)        = 0
  nnz(A)        = 442649
  cones (total) = 1
    : Nonnegative = 1,  numel = 50139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8088e-01  +5.4257e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3199e-01  +6.1400e+02  6.13e+02  1.78e-01  9.27e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6028e+02  1.60e+02  1.50e-01  7.89e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2329e+00  7.33e-01  2.19e-03  1.19e+00  2.24e-05  1.93e-01  1.68e-01  
  6  +5.0001e-01  +7.6011e-01  2.60e-01  7.77e-04  4.22e-01  6.46e-06  7.86e-02  7.19e-01  
  7  +5.0000e-01  +6.6381e-01  1.64e-01  4.89e-04  2.66e-01  4.14e-06  4.58e-02  5.12e-01  
  8  +5.0000e-01  +6.4136e-01  1.41e-01  4.22e-04  2.30e-01  3.64e-06  3.11e-02  4.54e-01  
  9  +5.0000e-01  +6.3456e-01  1.35e-01  4.01e-04  2.18e-01  3.46e-06  2.14e-02  4.82e-01  
 10  +5.0000e-01  +6.0148e-01  1.01e-01  2.98e-04  1.62e-01  5.03e-06  5.63e-03  9.14e-01  
 11  +4.9971e-01  +5.7605e-01  7.63e-02  4.03e-05  2.20e-02  1.36e-04  1.35e-04  9.89e-01  
 12  +4.9868e-01  +5.7185e-01  7.32e-02  9.64e-06  5.26e-03  5.52e-04  3.08e-05  7.80e-01  
 13  +4.9850e-01  +5.6854e-01  7.00e-02  7.78e-06  4.25e-03  4.90e-04  2.47e-05  3.93e-01  
 14  +4.9855e-01  +5.6549e-01  6.69e-02  6.75e-06  3.69e-03  3.03e-04  2.13e-05  4.98e-01  
 15  +4.9821e-01  +5.6240e-01  6.42e-02  5.52e-06  3.01e-03  2.32e-04  1.74e-05  4.53e-01  
 16  +4.9815e-01  +5.6194e-01  6.38e-02  5.46e-06  2.98e-03  2.17e-04  1.72e-05  6.54e-02  
 17  +4.9731e-01  +5.5688e-01  5.96e-02  4.42e-06  2.41e-03  1.43e-04  1.40e-05  4.97e-01  
 18  +4.9362e-01  +5.3934e-01  4.57e-02  2.47e-06  1.35e-03  1.22e-04  7.94e-06  5.31e-01  
 19  +4.9332e-01  +5.3793e-01  4.46e-02  2.40e-06  1.31e-03  1.08e-04  7.71e-06  9.86e-02  
 20  +4.9187e-01  +5.3146e-01  3.96e-02  2.06e-06  1.13e-03  7.22e-05  6.68e-06  3.01e-01  
 21  +4.9113e-01  +5.2807e-01  3.69e-02  1.89e-06  1.03e-03  4.55e-05  6.14e-06  3.24e-01  
 22  +4.8994e-01  +5.2298e-01  3.30e-02  1.63e-06  8.89e-04  2.45e-05  5.32e-06  4.22e-01  
 23  +4.8895e-01  +5.1878e-01  2.98e-02  1.43e-06  7.81e-04  1.95e-05  4.70e-06  2.09e-01  
 24  +4.8807e-01  +5.1484e-01  2.68e-02  1.22e-06  6.66e-04  4.45e-06  4.01e-06  7.19e-01  
 25  +4.8649e-01  +5.0842e-01  2.19e-02  9.62e-07  5.25e-04  2.04e-06  3.20e-06  5.32e-01  
 26  +4.8397e-01  +4.9808e-01  1.41e-02  5.90e-07  3.22e-04  1.13e-06  1.99e-06  4.60e-01  
 27  +4.8368e-01  +4.9677e-01  1.31e-02  5.33e-07  2.91e-04  5.96e-07  1.80e-06  5.42e-01  
 28  +4.8252e-01  +4.9224e-01  9.72e-03  3.86e-07  2.11e-04  4.24e-07  1.33e-06  3.07e-01  
 29  +4.8223e-01  +4.9099e-01  8.76e-03  3.43e-07  1.87e-04  2.23e-07  1.18e-06  6.10e-01  
 30  +4.8202e-01  +4.9017e-01  8.15e-03  3.17e-07  1.73e-04  1.71e-07  1.09e-06  3.82e-01  
 31  +4.8057e-01  +4.8475e-01  4.18e-03  1.58e-07  8.64e-05  8.34e-08  5.60e-07  5.44e-01  
 32  +4.7927e-01  +4.7994e-01  6.70e-04  2.47e-08  1.35e-05  8.22e-09  8.98e-08  9.90e-01  
 33  +4.7902e-01  +4.7906e-01  4.03e-05  1.47e-09  8.03e-07  4.91e-10  5.41e-09  9.45e-01  
 34  +4.7900e-01  +4.7900e-01  4.17e-07  1.52e-11  8.31e-09  5.08e-12  5.61e-11  9.90e-01  
 35  +4.7900e-01  +4.7900e-01  4.17e-09  1.52e-13  8.31e-11  5.08e-14  5.61e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2303552s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:31 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:31 PM: Optimal value: 4.790e-01
(CVXPY) Sep 20 08:11:31 PM: Compilation took 2.184e-01 seconds
(CVXPY) Sep 20 08:11:31 PM: Solver (including time spent in interface) took 1.279e+00 seconds
Iteration: 13, Objective: 0.4790
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:31 PM: Your problem has 25149 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:31 PM: Finished problem compilation (took 2.201e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25149
  constraints   = 50149
  nnz(P)        = 0
  nnz(A)        = 447332
  cones (total) = 1
    : Nonnegative = 1,  numel = 50149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8087e-01  +5.4257e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3199e-01  +6.1395e+02  6.13e+02  1.78e-01  9.27e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6027e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.1899e+00  6.90e-01  2.06e-03  1.12e+00  2.25e-05  1.93e-01  1.80e-01  
  6  +5.0001e-01  +7.3839e-01  2.38e-01  7.12e-04  3.87e-01  6.09e-06  7.28e-02  7.72e-01  
  7  +5.0000e-01  +6.7575e-01  1.76e-01  5.25e-04  2.86e-01  4.43e-06  4.77e-02  4.72e-01  
  8  +5.0000e-01  +6.5792e-01  1.58e-01  4.71e-04  2.57e-01  3.82e-06  3.35e-02  4.74e-01  
  9  +5.0001e-01  +6.4278e-01  1.43e-01  4.25e-04  2.32e-01  2.90e-06  1.69e-02  8.35e-01  
 10  +5.0000e-01  +6.2341e-01  1.23e-01  3.61e-04  1.96e-01  5.46e-06  5.95e-03  6.65e-01  
 11  +4.9977e-01  +5.8117e-01  8.14e-02  5.00e-05  2.73e-02  1.06e-04  1.70e-04  9.90e-01  
 12  +4.9823e-01  +5.7494e-01  7.67e-02  6.97e-06  3.81e-03  7.43e-04  2.22e-05  8.71e-01  
 13  +4.9800e-01  +5.7213e-01  7.41e-02  6.16e-06  3.37e-03  6.61e-04  1.95e-05  2.55e-01  
 14  +4.9799e-01  +5.6918e-01  7.12e-02  5.83e-06  3.18e-03  4.45e-04  1.85e-05  3.19e-01  
 15  +4.9784e-01  +5.6700e-01  6.92e-02  5.46e-06  2.98e-03  3.42e-04  1.73e-05  2.63e-01  
 16  +4.9765e-01  +5.6457e-01  6.69e-02  5.30e-06  2.89e-03  2.42e-04  1.68e-05  2.54e-01  
 17  +4.9514e-01  +5.5213e-01  5.70e-02  3.37e-06  1.84e-03  2.37e-04  1.08e-05  4.34e-01  
 18  +4.9286e-01  +5.4053e-01  4.77e-02  2.70e-06  1.47e-03  1.26e-04  8.73e-06  4.19e-01  
 19  +4.9163e-01  +5.3487e-01  4.32e-02  2.35e-06  1.28e-03  1.01e-04  7.64e-06  2.12e-01  
 20  +4.9039e-01  +5.2887e-01  3.85e-02  1.98e-06  1.08e-03  4.20e-05  6.47e-06  5.30e-01  
 21  +4.9029e-01  +5.2841e-01  3.81e-02  1.96e-06  1.07e-03  3.87e-05  6.41e-06  6.82e-02  
 22  +4.8965e-01  +5.2539e-01  3.57e-02  1.77e-06  9.66e-04  4.00e-07  5.81e-06  8.51e-01  
 23  +4.8537e-01  +5.0716e-01  2.18e-02  9.85e-07  5.38e-04  2.25e-07  3.31e-06  5.34e-01  
 24  +4.8470e-01  +5.0422e-01  1.95e-02  8.58e-07  4.69e-04  2.00e-07  2.89e-06  3.78e-01  
 25  +4.8274e-01  +4.9607e-01  1.33e-02  5.60e-07  3.06e-04  1.36e-07  1.91e-06  6.07e-01  
 26  +4.8239e-01  +4.9450e-01  1.21e-02  4.88e-07  2.67e-04  1.34e-07  1.67e-06  8.25e-01  
 27  +4.8078e-01  +4.8820e-01  7.42e-03  2.92e-07  1.59e-04  8.28e-08  1.01e-06  5.10e-01  
 28  +4.7888e-01  +4.8099e-01  2.11e-03  7.91e-08  4.32e-05  2.45e-08  2.84e-07  9.06e-01  
 29  +4.7852e-01  +4.7968e-01  1.16e-03  4.30e-08  2.34e-05  1.37e-08  1.56e-07  9.90e-01  
 30  +4.7807e-01  +4.7811e-01  3.62e-05  1.33e-09  7.23e-07  4.16e-10  4.88e-09  9.78e-01  
 31  +4.7806e-01  +4.7806e-01  3.63e-07  1.33e-11  7.25e-09  4.17e-12  4.90e-11  9.90e-01  
 32  +4.7806e-01  +4.7806e-01  3.63e-09  1.33e-13  7.25e-11  4.17e-14  4.90e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2378444s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:33 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:33 PM: Optimal value: 4.781e-01
(CVXPY) Sep 20 08:11:33 PM: Compilation took 2.201e-01 seconds
(CVXPY) Sep 20 08:11:33 PM: Solver (including time spent in interface) took 1.287e+00 seconds
Iteration: 14, Objective: 0.4781
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:33 PM: Your problem has 25159 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:33 PM: Finished problem compilation (took 2.551e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25159
  constraints   = 50159
  nnz(P)        = 0
  nnz(A)        = 451779
  cones (total) = 1
    : Nonnegative = 1,  numel = 50159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8087e-01  +5.4256e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3198e-01  +6.1392e+02  6.13e+02  1.78e-01  9.27e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6026e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.1972e+00  6.97e-01  2.08e-03  1.13e+00  2.25e-05  1.93e-01  1.78e-01  
  6  +5.0001e-01  +7.6654e-01  2.67e-01  7.96e-04  4.33e-01  7.02e-06  8.06e-02  7.23e-01  
  7  +5.0000e-01  +6.7070e-01  1.71e-01  5.10e-04  2.78e-01  4.57e-06  4.71e-02  5.12e-01  
  8  +5.0000e-01  +6.5128e-01  1.51e-01  4.52e-04  2.46e-01  4.01e-06  3.18e-02  4.93e-01  
  9  +5.0001e-01  +6.5221e-01  1.52e-01  4.54e-04  2.47e-01  2.95e-06  1.83e-02  8.17e-01  
 10  +5.0000e-01  +6.3037e-01  1.30e-01  3.83e-04  2.08e-01  5.05e-06  6.99e-03  6.36e-01  
 11  +4.9988e-01  +5.9358e-01  9.37e-02  9.89e-05  5.40e-02  5.70e-05  3.64e-04  9.72e-01  
 12  +4.9851e-01  +5.8751e-01  8.90e-02  9.23e-06  5.05e-03  6.53e-04  2.95e-05  9.19e-01  
 13  +4.9861e-01  +5.8486e-01  8.63e-02  8.91e-06  4.87e-03  5.52e-04  2.83e-05  1.57e-01  
 14  +4.9838e-01  +5.7594e-01  7.76e-02  6.91e-06  3.78e-03  3.77e-04  2.19e-05  5.16e-01  
 15  +4.9832e-01  +5.7038e-01  7.21e-02  6.19e-06  3.38e-03  1.84e-04  1.96e-05  5.14e-01  
 16  +4.9741e-01  +5.6135e-01  6.39e-02  4.63e-06  2.53e-03  2.95e-05  1.47e-05  9.17e-01  
 17  +4.9557e-01  +5.5268e-01  5.71e-02  3.54e-06  1.94e-03  2.78e-05  1.13e-05  2.74e-01  
 18  +4.9115e-01  +5.3232e-01  4.12e-02  2.19e-06  1.20e-03  1.30e-05  7.14e-06  5.77e-01  
 19  +4.9105e-01  +5.3198e-01  4.09e-02  2.14e-06  1.17e-03  1.10e-05  6.95e-06  1.59e-01  
 20  +4.9075e-01  +5.3085e-01  4.01e-02  2.08e-06  1.14e-03  7.70e-06  6.77e-06  2.59e-01  
 21  +4.8856e-01  +5.2161e-01  3.30e-02  1.61e-06  8.78e-04  5.75e-06  5.28e-06  2.87e-01  
 22  +4.8744e-01  +5.1713e-01  2.97e-02  1.38e-06  7.56e-04  3.75e-06  4.58e-06  3.53e-01  
 23  +4.8587e-01  +5.1075e-01  2.49e-02  1.12e-06  6.10e-04  2.74e-06  3.73e-06  2.81e-01  
 24  +4.8414e-01  +5.0350e-01  1.94e-02  8.17e-07  4.46e-04  7.43e-07  2.76e-06  7.48e-01  
 25  +4.8305e-01  +4.9916e-01  1.61e-02  6.66e-07  3.64e-04  5.65e-07  2.26e-06  2.69e-01  
 26  +4.8191e-01  +4.9430e-01  1.24e-02  4.92e-07  2.69e-04  1.35e-07  1.68e-06  9.90e-01  
 27  +4.8036e-01  +4.8829e-01  7.93e-03  3.09e-07  1.69e-04  9.01e-08  1.07e-06  6.91e-01  
 28  +4.7900e-01  +4.8313e-01  4.13e-03  1.58e-07  8.61e-05  4.75e-08  5.53e-07  6.02e-01  
 29  +4.7859e-01  +4.8156e-01  2.97e-03  1.13e-07  6.15e-05  3.48e-08  3.98e-07  9.60e-01  
 30  +4.7776e-01  +4.7850e-01  7.47e-04  2.79e-08  1.52e-05  8.77e-09  1.00e-07  7.69e-01  
 31  +4.7748e-01  +4.7754e-01  5.63e-05  2.06e-09  1.13e-06  6.65e-10  7.57e-09  9.52e-01  
 32  +4.7746e-01  +4.7746e-01  6.08e-07  2.22e-11  1.21e-08  7.19e-12  8.19e-11  9.89e-01  
 33  +4.7746e-01  +4.7746e-01  6.08e-09  2.22e-13  1.21e-10  7.19e-14  8.19e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3614578s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:34 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:34 PM: Optimal value: 4.775e-01
(CVXPY) Sep 20 08:11:34 PM: Compilation took 2.551e-01 seconds
(CVXPY) Sep 20 08:11:34 PM: Solver (including time spent in interface) took 1.413e+00 seconds
Iteration: 15, Objective: 0.4775
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:35 PM: Your problem has 25169 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:35 PM: Finished problem compilation (took 2.545e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25169
  constraints   = 50169
  nnz(P)        = 0
  nnz(A)        = 455020
  cones (total) = 1
    : Nonnegative = 1,  numel = 50169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8087e-01  +5.4257e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3198e-01  +6.1385e+02  6.13e+02  1.78e-01  9.27e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6023e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2195e+00  7.20e-01  2.15e-03  1.17e+00  2.25e-05  1.93e-01  1.73e-01  
  6  +5.0001e-01  +7.4553e-01  2.46e-01  7.33e-04  3.99e-01  6.39e-06  7.50e-02  7.12e-01  
  7  +5.0000e-01  +6.5968e-01  1.60e-01  4.77e-04  2.60e-01  4.33e-06  4.31e-02  5.24e-01  
  8  +5.0000e-01  +6.5965e-01  1.60e-01  4.77e-04  2.60e-01  4.06e-06  3.51e-02  3.55e-01  
  9  +5.0000e-01  +6.5025e-01  1.50e-01  4.48e-04  2.44e-01  3.61e-06  2.14e-02  6.39e-01  
 10  +4.9999e-01  +6.1074e-01  1.11e-01  3.24e-04  1.76e-01  7.22e-06  5.31e-03  7.90e-01  
 11  +4.9982e-01  +5.8913e-01  8.93e-02  8.36e-05  4.57e-02  8.59e-05  3.02e-04  9.90e-01  
 12  +4.9875e-01  +5.8467e-01  8.59e-02  1.39e-05  7.59e-03  5.43e-04  4.48e-05  8.53e-01  
 13  +4.9837e-01  +5.7798e-01  7.96e-02  9.36e-06  5.11e-03  5.40e-04  2.99e-05  5.31e-01  
 14  +4.9837e-01  +5.7525e-01  7.69e-02  8.43e-06  4.61e-03  4.27e-04  2.69e-05  3.11e-01  
 15  +4.9770e-01  +5.6881e-01  7.11e-02  5.98e-06  3.27e-03  3.42e-04  1.90e-05  5.68e-01  
 16  +4.9769e-01  +5.6858e-01  7.09e-02  5.96e-06  3.26e-03  3.27e-04  1.90e-05  3.83e-02  
 17  +4.9690e-01  +5.6295e-01  6.60e-02  4.88e-06  2.67e-03  1.98e-04  1.56e-05  5.16e-01  
 18  +4.9517e-01  +5.5409e-01  5.89e-02  3.79e-06  2.07e-03  1.54e-04  1.22e-05  3.71e-01  
 19  +4.9380e-01  +5.4713e-01  5.33e-02  3.26e-06  1.78e-03  9.35e-05  1.05e-05  3.74e-01  
 20  +4.9273e-01  +5.4141e-01  4.87e-02  2.87e-06  1.57e-03  1.74e-05  9.30e-06  6.86e-01  
 21  +4.9170e-01  +5.3679e-01  4.51e-02  2.52e-06  1.38e-03  5.27e-06  8.20e-06  6.17e-01  
 22  +4.8936e-01  +5.2664e-01  3.73e-02  1.91e-06  1.04e-03  3.42e-06  6.28e-06  3.91e-01  
 23  +4.8754e-01  +5.1898e-01  3.14e-02  1.50e-06  8.21e-04  2.03e-06  4.97e-06  4.35e-01  
 24  +4.8717e-01  +5.1744e-01  3.03e-02  1.40e-06  7.63e-04  1.09e-06  4.64e-06  4.91e-01  
 25  +4.8477e-01  +5.0769e-01  2.29e-02  9.89e-07  5.40e-04  5.80e-07  3.33e-06  5.40e-01  
 26  +4.8395e-01  +5.0417e-01  2.02e-02  8.40e-07  4.59e-04  2.94e-07  2.84e-06  7.20e-01  
 27  +4.8143e-01  +4.9436e-01  1.29e-02  5.15e-07  2.81e-04  1.71e-07  1.78e-06  5.50e-01  
 28  +4.8042e-01  +4.9030e-01  9.87e-03  3.86e-07  2.11e-04  1.22e-07  1.35e-06  5.85e-01  
 29  +4.7860e-01  +4.8339e-01  4.79e-03  1.82e-07  9.94e-05  5.77e-08  6.54e-07  6.72e-01  
 30  +4.7712e-01  +4.7786e-01  7.48e-04  2.78e-08  1.52e-05  8.61e-09  1.03e-07  9.90e-01  
 31  +4.7692e-01  +4.7715e-01  2.36e-04  8.74e-09  4.77e-06  2.75e-09  3.26e-08  9.90e-01  
 32  +4.7682e-01  +4.7682e-01  3.01e-06  1.12e-10  6.09e-08  3.51e-11  4.17e-10  9.89e-01  
 33  +4.7682e-01  +4.7682e-01  3.01e-08  1.12e-12  6.09e-10  3.51e-13  4.17e-12  9.90e-01  
 34  +4.7682e-01  +4.7682e-01  3.02e-10  1.12e-14  6.11e-12  4.08e-15  4.82e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3350908s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:36 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:36 PM: Optimal value: 4.768e-01
(CVXPY) Sep 20 08:11:36 PM: Compilation took 2.545e-01 seconds
(CVXPY) Sep 20 08:11:36 PM: Solver (including time spent in interface) took 1.386e+00 seconds
Iteration: 16, Objective: 0.4768
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:37 PM: Your problem has 25179 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:37 PM: Finished problem compilation (took 2.594e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25179
  constraints   = 50179
  nnz(P)        = 0
  nnz(A)        = 459966
  cones (total) = 1
    : Nonnegative = 1,  numel = 50179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8087e-01  +5.4256e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3198e-01  +6.1385e+02  6.13e+02  1.78e-01  9.27e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6023e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7629e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2299e+00  7.30e-01  2.18e-03  1.18e+00  2.25e-05  1.93e-01  1.71e-01  
  6  +5.0001e-01  +7.4667e-01  2.47e-01  7.37e-04  4.01e-01  6.33e-06  7.50e-02  7.12e-01  
  7  +5.0000e-01  +6.6566e-01  1.66e-01  4.95e-04  2.69e-01  4.43e-06  4.48e-02  4.94e-01  
  8  +5.0000e-01  +6.5832e-01  1.58e-01  4.73e-04  2.58e-01  4.19e-06  3.48e-02  3.55e-01  
  9  +5.0000e-01  +6.3603e-01  1.36e-01  4.06e-04  2.21e-01  4.37e-06  1.89e-02  5.81e-01  
 10  +4.9998e-01  +5.9640e-01  9.64e-02  2.70e-04  1.47e-01  1.36e-05  2.75e-03  9.31e-01  
 11  +4.9910e-01  +5.9095e-01  9.18e-02  2.48e-05  1.36e-02  4.11e-04  8.17e-05  9.75e-01  
 12  +4.9816e-01  +5.8218e-01  8.40e-02  1.12e-05  6.10e-03  7.04e-04  3.60e-05  6.63e-01  
 13  +4.9829e-01  +5.7877e-01  8.05e-02  9.86e-06  5.39e-03  5.38e-04  3.16e-05  3.54e-01  
 14  +4.9844e-01  +5.7647e-01  7.80e-02  9.20e-06  5.03e-03  3.96e-04  2.94e-05  3.11e-01  
 15  +4.9755e-01  +5.7155e-01  7.40e-02  6.53e-06  3.57e-03  4.66e-04  2.09e-05  3.41e-01  
 16  +4.9758e-01  +5.7109e-01  7.35e-02  6.46e-06  3.53e-03  4.24e-04  2.06e-05  8.61e-02  
 17  +4.9715e-01  +5.6799e-01  7.08e-02  5.68e-06  3.10e-03  3.67e-04  1.81e-05  2.65e-01  
 18  +4.9560e-01  +5.5782e-01  6.22e-02  4.21e-06  2.30e-03  2.11e-04  1.35e-05  5.67e-01  
 19  +4.9157e-01  +5.3795e-01  4.64e-02  2.55e-06  1.39e-03  1.22e-04  8.33e-06  5.67e-01  
 20  +4.9153e-01  +5.3774e-01  4.62e-02  2.54e-06  1.39e-03  1.17e-04  8.31e-06  3.52e-02  
 21  +4.8986e-01  +5.3008e-01  4.02e-02  2.09e-06  1.14e-03  7.49e-05  6.86e-06  3.59e-01  
 22  +4.8847e-01  +5.2390e-01  3.54e-02  1.74e-06  9.52e-04  4.67e-05  5.74e-06  3.79e-01  
 23  +4.8839e-01  +5.2366e-01  3.53e-02  1.74e-06  9.48e-04  4.45e-05  5.72e-06  3.63e-02  
 24  +4.8601e-01  +5.1362e-01  2.76e-02  1.26e-06  6.91e-04  2.36e-05  4.22e-06  4.72e-01  
 25  +4.8516e-01  +5.1002e-01  2.49e-02  1.10e-06  5.98e-04  1.24e-05  3.67e-06  4.66e-01  
 26  +4.8318e-01  +5.0199e-01  1.88e-02  7.88e-07  4.30e-04  5.22e-06  2.68e-06  5.72e-01  
 27  +4.8137e-01  +4.9464e-01  1.33e-02  5.35e-07  2.92e-04  1.35e-06  1.85e-06  7.39e-01  
 28  +4.8037e-01  +4.9066e-01  1.03e-02  4.07e-07  2.22e-04  7.28e-07  1.42e-06  4.92e-01  
 29  +4.7856e-01  +4.8375e-01  5.19e-03  2.00e-07  1.09e-04  3.34e-07  7.19e-07  5.43e-01  
 30  +4.7761e-01  +4.8002e-01  2.41e-03  9.15e-08  5.00e-05  3.11e-08  3.35e-07  9.90e-01  
 31  +4.7691e-01  +4.7749e-01  5.80e-04  2.18e-08  1.19e-05  7.34e-09  8.15e-08  7.84e-01  
 32  +4.7668e-01  +4.7669e-01  8.62e-06  3.22e-10  1.76e-07  1.05e-10  1.22e-09  9.87e-01  
 33  +4.7668e-01  +4.7668e-01  8.62e-08  3.22e-12  1.76e-09  1.05e-12  1.22e-11  9.90e-01  
 34  +4.7668e-01  +4.7668e-01  8.65e-10  3.23e-14  1.77e-11  1.28e-14  1.48e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2812612s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:38 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:38 PM: Optimal value: 4.767e-01
(CVXPY) Sep 20 08:11:38 PM: Compilation took 2.594e-01 seconds
(CVXPY) Sep 20 08:11:38 PM: Solver (including time spent in interface) took 1.333e+00 seconds
Iteration: 17, Objective: 0.4767
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:38 PM: Your problem has 25189 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:39 PM: Finished problem compilation (took 2.523e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25189
  constraints   = 50189
  nnz(P)        = 0
  nnz(A)        = 463396
  cones (total) = 1
    : Nonnegative = 1,  numel = 50189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8087e-01  +5.4256e+03  5.42e+03  4.37e-01  1.78e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3197e-01  +6.1381e+02  6.13e+02  1.78e-01  9.27e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6022e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7629e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2134e+00  7.13e-01  2.13e-03  1.16e+00  2.26e-05  1.93e-01  1.75e-01  
  6  +5.0001e-01  +7.5069e-01  2.51e-01  7.49e-04  4.08e-01  6.66e-06  7.64e-02  7.05e-01  
  7  +5.0000e-01  +6.7871e-01  1.79e-01  5.34e-04  2.91e-01  4.68e-06  4.73e-02  5.24e-01  
  8  +5.0000e-01  +6.6058e-01  1.61e-01  4.80e-04  2.61e-01  4.30e-06  3.34e-02  4.23e-01  
  9  +5.0000e-01  +6.4448e-01  1.44e-01  4.30e-04  2.34e-01  3.92e-06  1.57e-02  8.14e-01  
 10  +4.9999e-01  +6.1776e-01  1.18e-01  3.32e-04  1.81e-01  9.21e-06  3.58e-03  8.64e-01  
 11  +4.9936e-01  +6.0206e-01  1.03e-01  2.77e-05  1.52e-02  2.93e-04  9.03e-05  9.80e-01  
 12  +4.9854e-01  +5.9231e-01  9.38e-02  1.17e-05  6.40e-03  5.58e-04  3.74e-05  6.57e-01  
 13  +4.9863e-01  +5.8645e-01  8.78e-02  1.02e-05  5.56e-03  4.18e-04  3.24e-05  3.61e-01  
 14  +4.9873e-01  +5.7973e-01  8.10e-02  8.69e-06  4.75e-03  2.40e-04  2.75e-05  5.12e-01  
 15  +4.9837e-01  +5.7582e-01  7.75e-02  7.08e-06  3.87e-03  2.10e-04  2.24e-05  3.77e-01  
 16  +4.9804e-01  +5.7322e-01  7.52e-02  6.32e-06  3.46e-03  1.86e-04  2.00e-05  2.38e-01  
 17  +4.9769e-01  +5.6874e-01  7.10e-02  5.87e-06  3.21e-03  8.64e-05  1.86e-05  4.95e-01  
 18  +4.9622e-01  +5.6135e-01  6.51e-02  4.48e-06  2.45e-03  8.17e-05  1.43e-05  3.22e-01  
 19  +4.9383e-01  +5.4949e-01  5.57e-02  3.38e-06  1.85e-03  5.73e-05  1.09e-05  3.98e-01  
 20  +4.9222e-01  +5.4196e-01  4.97e-02  2.85e-06  1.56e-03  4.70e-05  9.25e-06  2.15e-01  
 21  +4.9143e-01  +5.3822e-01  4.68e-02  2.60e-06  1.42e-03  3.54e-05  8.46e-06  2.39e-01  
 22  +4.9023e-01  +5.3281e-01  4.26e-02  2.27e-06  1.24e-03  2.87e-05  7.41e-06  2.08e-01  
 23  +4.8972e-01  +5.3050e-01  4.08e-02  2.12e-06  1.16e-03  2.12e-05  6.91e-06  2.52e-01  
 24  +4.8909e-01  +5.2766e-01  3.86e-02  1.94e-06  1.06e-03  1.05e-05  6.37e-06  4.54e-01  
 25  +4.8663e-01  +5.1713e-01  3.05e-02  1.44e-06  7.88e-04  7.35e-06  4.77e-06  3.27e-01  
 26  +4.8545e-01  +5.1215e-01  2.67e-02  1.22e-06  6.64e-04  5.19e-06  4.04e-06  3.07e-01  
 27  +4.8345e-01  +5.0373e-01  2.03e-02  8.70e-07  4.75e-04  2.24e-06  2.92e-06  5.80e-01  
 28  +4.8288e-01  +5.0120e-01  1.83e-02  7.57e-07  4.14e-04  1.08e-06  2.55e-06  5.69e-01  
 29  +4.8137e-01  +4.9518e-01  1.38e-02  5.53e-07  3.02e-04  4.75e-07  1.88e-06  6.23e-01  
 30  +4.8068e-01  +4.9234e-01  1.17e-02  4.58e-07  2.50e-04  2.06e-07  1.56e-06  7.63e-01  
 31  +4.7970e-01  +4.8858e-01  8.88e-03  3.44e-07  1.88e-04  1.50e-07  1.18e-06  3.47e-01  
 32  +4.7873e-01  +4.8474e-01  6.00e-03  2.29e-07  1.25e-04  7.17e-08  7.95e-07  9.90e-01  
 33  +4.7747e-01  +4.8009e-01  2.63e-03  9.85e-08  5.38e-05  3.12e-08  3.48e-07  6.00e-01  
 34  +4.7674e-01  +4.7744e-01  6.93e-04  2.58e-08  1.41e-05  8.14e-09  9.25e-08  7.52e-01  
 35  +4.7651e-01  +4.7657e-01  6.32e-05  2.34e-09  1.28e-06  7.08e-10  8.55e-09  9.23e-01  
 36  +4.7648e-01  +4.7648e-01  9.05e-07  3.34e-11  1.82e-08  1.00e-11  1.23e-10  9.89e-01  
 37  +4.7648e-01  +4.7648e-01  9.05e-09  3.34e-13  1.82e-10  1.00e-13  1.23e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3831082s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:40 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:40 PM: Optimal value: 4.765e-01
(CVXPY) Sep 20 08:11:40 PM: Compilation took 2.523e-01 seconds
(CVXPY) Sep 20 08:11:40 PM: Solver (including time spent in interface) took 1.432e+00 seconds
Iteration: 18, Objective: 0.4765
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:40 PM: Your problem has 25199 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:41 PM: Finished problem compilation (took 2.455e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25199
  constraints   = 50199
  nnz(P)        = 0
  nnz(A)        = 466945
  cones (total) = 1
    : Nonnegative = 1,  numel = 50199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8087e-01  +5.4255e+03  5.42e+03  4.37e-01  1.78e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3198e-01  +6.1380e+02  6.13e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6021e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7627e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2211e+00  7.21e-01  2.15e-03  1.17e+00  2.26e-05  1.93e-01  1.73e-01  
  6  +5.0001e-01  +7.4875e-01  2.49e-01  7.43e-04  4.05e-01  6.50e-06  7.55e-02  7.12e-01  
  7  +5.0000e-01  +6.7397e-01  1.74e-01  5.20e-04  2.83e-01  4.67e-06  4.62e-02  4.99e-01  
  8  +5.0000e-01  +6.5068e-01  1.51e-01  4.50e-04  2.45e-01  4.12e-06  2.57e-02  6.71e-01  
  9  +5.0000e-01  +6.2600e-01  1.26e-01  3.73e-04  2.03e-01  6.10e-06  8.36e-03  8.29e-01  
 10  +4.9986e-01  +6.0938e-01  1.10e-01  1.44e-04  7.88e-02  6.61e-05  5.67e-04  9.41e-01  
 11  +4.9873e-01  +6.0353e-01  1.05e-01  1.91e-05  1.04e-02  5.63e-04  6.19e-05  8.93e-01  
 12  +4.9894e-01  +5.9905e-01  1.00e-01  1.83e-05  9.99e-03  4.49e-04  5.91e-05  1.95e-01  
 13  +4.9947e-01  +5.8450e-01  8.50e-02  1.47e-05  8.04e-03  1.33e-04  4.70e-05  7.57e-01  
 14  +4.9863e-01  +5.7385e-01  7.52e-02  5.50e-06  3.01e-03  1.79e-04  1.74e-05  9.90e-01  
 15  +4.9833e-01  +5.7235e-01  7.40e-02  5.29e-06  2.89e-03  1.48e-04  1.67e-05  1.92e-01  
 16  +4.9822e-01  +5.7182e-01  7.36e-02  5.27e-06  2.88e-03  1.42e-04  1.67e-05  3.03e-02  
 17  +4.9620e-01  +5.6184e-01  6.56e-02  4.02e-06  2.20e-03  1.07e-04  1.28e-05  4.29e-01  
 18  +4.9493e-01  +5.5579e-01  6.09e-02  3.70e-06  2.02e-03  7.61e-05  1.19e-05  2.32e-01  
 19  +4.9206e-01  +5.4239e-01  5.03e-02  2.87e-06  1.57e-03  4.22e-05  9.35e-06  4.22e-01  
 20  +4.9133e-01  +5.3916e-01  4.78e-02  2.66e-06  1.45e-03  3.35e-05  8.68e-06  2.00e-01  
 21  +4.9116e-01  +5.3845e-01  4.73e-02  2.61e-06  1.43e-03  2.83e-05  8.54e-06  1.35e-01  
 22  +4.8942e-01  +5.3073e-01  4.13e-02  2.17e-06  1.19e-03  2.31e-05  7.14e-06  2.11e-01  
 23  +4.8934e-01  +5.3043e-01  4.11e-02  2.15e-06  1.18e-03  2.13e-05  7.09e-06  7.00e-02  
 24  +4.8815e-01  +5.2532e-01  3.72e-02  1.87e-06  1.02e-03  1.25e-05  6.19e-06  3.92e-01  
 25  +4.8473e-01  +5.1054e-01  2.58e-02  1.19e-06  6.53e-04  4.49e-06  4.01e-06  6.26e-01  
 26  +4.8383e-01  +5.0668e-01  2.29e-02  1.03e-06  5.61e-04  3.38e-06  3.45e-06  2.72e-01  
 27  +4.8328e-01  +5.0412e-01  2.08e-02  8.84e-07  4.83e-04  7.35e-07  2.96e-06  8.19e-01  
 28  +4.8321e-01  +5.0386e-01  2.06e-02  8.75e-07  4.78e-04  6.81e-07  2.93e-06  9.69e-02  
 29  +4.8075e-01  +4.9384e-01  1.31e-02  5.35e-07  2.92e-04  3.44e-07  1.81e-06  5.58e-01  
 30  +4.7944e-01  +4.8836e-01  8.92e-03  3.54e-07  1.93e-04  1.42e-07  1.21e-06  7.98e-01  
 31  +4.7866e-01  +4.8533e-01  6.67e-03  2.59e-07  1.42e-04  9.27e-08  8.91e-07  6.17e-01  
 32  +4.7769e-01  +4.8158e-01  3.90e-03  1.48e-07  8.08e-05  4.91e-08  5.13e-07  8.09e-01  
 33  +4.7656e-01  +4.7746e-01  8.94e-04  3.28e-08  1.79e-05  1.14e-08  1.16e-07  8.42e-01  
 34  +4.7634e-01  +4.7670e-01  3.58e-04  1.28e-08  6.97e-06  4.56e-09  4.54e-08  7.05e-01  
 35  +4.7620e-01  +4.7621e-01  5.29e-06  1.88e-10  1.03e-07  6.71e-11  6.70e-10  9.86e-01  
 36  +4.7620e-01  +4.7620e-01  5.29e-08  1.88e-12  1.03e-09  6.71e-13  6.71e-12  9.90e-01  
 37  +4.7620e-01  +4.7620e-01  5.33e-10  1.89e-14  1.03e-11  9.16e-15  9.01e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.393612s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:42 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:42 PM: Optimal value: 4.762e-01
(CVXPY) Sep 20 08:11:42 PM: Compilation took 2.455e-01 seconds
(CVXPY) Sep 20 08:11:42 PM: Solver (including time spent in interface) took 1.446e+00 seconds
Iteration: 19, Objective: 0.4762
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:42 PM: Your problem has 25209 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:42 PM: Finished problem compilation (took 2.554e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25209
  constraints   = 50209
  nnz(P)        = 0
  nnz(A)        = 471548
  cones (total) = 1
    : Nonnegative = 1,  numel = 50209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8087e-01  +5.4255e+03  5.42e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3197e-01  +6.1378e+02  6.13e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6020e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7628e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2115e+00  7.12e-01  2.13e-03  1.16e+00  2.26e-05  1.93e-01  1.76e-01  
  6  +5.0001e-01  +7.3665e-01  2.37e-01  7.07e-04  3.85e-01  6.15e-06  7.21e-02  7.40e-01  
  7  +5.0000e-01  +6.9202e-01  1.92e-01  5.74e-04  3.13e-01  5.01e-06  5.19e-02  3.83e-01  
  8  +5.0000e-01  +6.7897e-01  1.79e-01  5.35e-04  2.91e-01  4.30e-06  3.71e-02  5.06e-01  
  9  +5.0000e-01  +6.2789e-01  1.28e-01  3.81e-04  2.07e-01  4.26e-06  1.33e-02  8.22e-01  
 10  +4.9997e-01  +6.1226e-01  1.12e-01  2.89e-04  1.58e-01  1.80e-05  2.08e-03  8.95e-01  
 11  +4.9910e-01  +6.0746e-01  1.08e-01  2.57e-05  1.41e-02  4.11e-04  8.39e-05  9.60e-01  
 12  +4.9841e-01  +5.9680e-01  9.84e-02  1.32e-05  7.23e-03  6.05e-04  4.25e-05  5.94e-01  
 13  +4.9879e-01  +5.8910e-01  9.03e-02  1.18e-05  6.46e-03  3.55e-04  3.78e-05  4.36e-01  
 14  +4.9853e-01  +5.7903e-01  8.05e-02  8.04e-06  4.40e-03  2.28e-04  2.55e-05  7.12e-01  
 15  +4.9853e-01  +5.7773e-01  7.92e-02  7.76e-06  4.25e-03  1.77e-04  2.46e-05  2.37e-01  
 16  +4.9733e-01  +5.6931e-01  7.20e-02  5.16e-06  2.83e-03  1.12e-04  1.64e-05  7.34e-01  
 17  +4.9500e-01  +5.5765e-01  6.26e-02  3.82e-06  2.09e-03  9.66e-05  1.23e-05  3.41e-01  
 18  +4.9303e-01  +5.4788e-01  5.49e-02  3.26e-06  1.78e-03  4.47e-05  1.06e-05  4.53e-01  
 19  +4.9226e-01  +5.4429e-01  5.20e-02  3.01e-06  1.64e-03  2.77e-05  9.78e-06  3.39e-01  
 20  +4.9175e-01  +5.4209e-01  5.03e-02  2.89e-06  1.58e-03  1.73e-05  9.44e-06  3.08e-01  
 21  +4.8776e-01  +5.2411e-01  3.63e-02  1.84e-06  1.01e-03  5.48e-06  6.10e-06  6.67e-01  
 22  +4.8620e-01  +5.1727e-01  3.11e-02  1.47e-06  8.06e-04  2.66e-06  4.90e-06  5.28e-01  
 23  +4.8615e-01  +5.1707e-01  3.09e-02  1.46e-06  7.98e-04  2.41e-06  4.85e-06  9.63e-02  
 24  +4.8393e-01  +5.0772e-01  2.38e-02  1.06e-06  5.81e-04  1.53e-06  3.56e-06  3.99e-01  
 25  +4.8388e-01  +5.0748e-01  2.36e-02  1.05e-06  5.72e-04  1.30e-06  3.50e-06  1.70e-01  
 26  +4.8277e-01  +5.0295e-01  2.02e-02  8.70e-07  4.75e-04  9.91e-07  2.92e-06  2.74e-01  
 27  +4.8132e-01  +4.9687e-01  1.55e-02  6.41e-07  3.50e-04  3.96e-07  2.17e-06  6.96e-01  
 28  +4.8005e-01  +4.9174e-01  1.17e-02  4.69e-07  2.56e-04  2.34e-07  1.60e-06  5.41e-01  
 29  +4.7835e-01  +4.8499e-01  6.63e-03  2.56e-07  1.40e-04  9.27e-08  8.85e-07  8.48e-01  
 30  +4.7829e-01  +4.8474e-01  6.44e-03  2.49e-07  1.36e-04  8.70e-08  8.60e-07  2.30e-01  
 31  +4.7738e-01  +4.8124e-01  3.86e-03  1.46e-07  7.98e-05  4.61e-08  5.10e-07  9.90e-01  
 32  +4.7653e-01  +4.7813e-01  1.59e-03  5.93e-08  3.24e-05  1.92e-08  2.10e-07  8.21e-01  
 33  +4.7639e-01  +4.7760e-01  1.21e-03  4.46e-08  2.44e-05  1.47e-08  1.58e-07  6.90e-01  
 34  +4.7620e-01  +4.7691e-01  7.15e-04  2.60e-08  1.42e-05  8.73e-09  9.27e-08  9.90e-01  
 35  +4.7593e-01  +4.7599e-01  6.42e-05  2.31e-09  1.26e-06  7.87e-10  8.29e-09  9.42e-01  
 36  +4.7590e-01  +4.7590e-01  6.65e-07  2.39e-11  1.30e-08  8.15e-12  8.58e-11  9.90e-01  
 37  +4.7590e-01  +4.7590e-01  6.65e-09  2.39e-13  1.30e-10  8.15e-14  8.58e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4140655s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:44 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:44 PM: Optimal value: 4.759e-01
(CVXPY) Sep 20 08:11:44 PM: Compilation took 2.554e-01 seconds
(CVXPY) Sep 20 08:11:44 PM: Solver (including time spent in interface) took 1.462e+00 seconds
Iteration: 20, Objective: 0.4759
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:44 PM: Your problem has 25219 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:44 PM: Finished problem compilation (took 2.567e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25219
  constraints   = 50219
  nnz(P)        = 0
  nnz(A)        = 475758
  cones (total) = 1
    : Nonnegative = 1,  numel = 50219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4258e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3196e-01  +6.1370e+02  6.13e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6019e+02  1.60e+02  1.50e-01  7.88e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7635e+01  1.71e+01  4.71e-02  2.47e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2015e+00  7.02e-01  2.10e-03  1.14e+00  2.26e-05  1.93e-01  1.79e-01  
  6  +5.0001e-01  +7.4035e-01  2.40e-01  7.18e-04  3.91e-01  6.43e-06  7.34e-02  7.29e-01  
  7  +5.0000e-01  +6.7576e-01  1.76e-01  5.25e-04  2.86e-01  4.83e-06  4.64e-02  4.78e-01  
  8  +5.0001e-01  +6.8931e-01  1.89e-01  5.65e-04  3.08e-01  3.80e-06  3.14e-02  7.42e-01  
  9  +5.0000e-01  +6.3362e-01  1.34e-01  3.97e-04  2.16e-01  4.89e-06  1.12e-02  6.80e-01  
 10  +4.9994e-01  +6.0194e-01  1.02e-01  2.04e-04  1.11e-01  3.04e-05  9.93e-04  9.90e-01  
 11  +4.9887e-01  +5.9732e-01  9.84e-02  1.73e-05  9.46e-03  5.08e-04  5.59e-05  9.44e-01  
 12  +4.9909e-01  +5.8597e-01  8.69e-02  1.27e-05  6.93e-03  2.88e-04  4.05e-05  6.83e-01  
 13  +4.9910e-01  +5.8141e-01  8.23e-02  1.00e-05  5.48e-03  1.85e-04  3.19e-05  6.09e-01  
 14  +4.9890e-01  +5.7580e-01  7.69e-02  7.21e-06  3.94e-03  4.63e-05  2.28e-05  9.90e-01  
 15  +4.9874e-01  +5.7505e-01  7.63e-02  6.92e-06  3.79e-03  3.99e-05  2.19e-05  1.84e-01  
 16  +4.9662e-01  +5.6451e-01  6.79e-02  4.06e-06  2.22e-03  4.68e-05  1.29e-05  5.12e-01  
 17  +4.9467e-01  +5.5521e-01  6.05e-02  3.47e-06  1.90e-03  3.76e-05  1.11e-05  2.05e-01  
 18  +4.9284e-01  +5.4692e-01  5.41e-02  3.07e-06  1.68e-03  2.09e-05  9.95e-06  3.60e-01  
 19  +4.9212e-01  +5.4377e-01  5.17e-02  2.87e-06  1.57e-03  1.82e-05  9.33e-06  1.33e-01  
 20  +4.9102e-01  +5.3915e-01  4.81e-02  2.63e-06  1.44e-03  1.08e-05  8.60e-06  3.44e-01  
 21  +4.8768e-01  +5.2452e-01  3.68e-02  1.84e-06  1.01e-03  6.94e-06  6.11e-06  3.90e-01  
 22  +4.8727e-01  +5.2280e-01  3.55e-02  1.75e-06  9.58e-04  5.53e-06  5.82e-06  1.98e-01  
 23  +4.8457e-01  +5.1115e-01  2.66e-02  1.20e-06  6.54e-04  8.04e-07  4.00e-06  8.36e-01  
 24  +4.8338e-01  +5.0618e-01  2.28e-02  9.89e-07  5.40e-04  5.13e-07  3.32e-06  4.66e-01  
 25  +4.8176e-01  +4.9950e-01  1.77e-02  7.48e-07  4.09e-04  3.75e-07  2.53e-06  3.19e-01  
 26  +4.8167e-01  +4.9907e-01  1.74e-02  7.29e-07  3.98e-04  3.36e-07  2.47e-06  1.92e-01  
 27  +4.8034e-01  +4.9362e-01  1.33e-02  5.43e-07  2.97e-04  2.30e-07  1.85e-06  4.25e-01  
 28  +4.7937e-01  +4.8954e-01  1.02e-02  4.06e-07  2.22e-04  1.44e-07  1.39e-06  6.57e-01  
 29  +4.7855e-01  +4.8632e-01  7.77e-03  3.05e-07  1.67e-04  1.08e-07  1.05e-06  3.31e-01  
 30  +4.7775e-01  +4.8324e-01  5.49e-03  2.11e-07  1.15e-04  7.58e-08  7.32e-07  3.81e-01  
 31  +4.7762e-01  +4.8269e-01  5.07e-03  1.95e-07  1.06e-04  6.28e-08  6.81e-07  6.30e-01  
 32  +4.7702e-01  +4.8042e-01  3.40e-03  1.29e-07  7.04e-05  4.17e-08  4.55e-07  5.16e-01  
 33  +4.7681e-01  +4.7967e-01  2.86e-03  1.07e-07  5.86e-05  3.49e-08  3.78e-07  4.41e-01  
 34  +4.7628e-01  +4.7777e-01  1.49e-03  5.46e-08  2.99e-05  1.83e-08  1.95e-07  5.46e-01  
 35  +4.7599e-01  +4.7669e-01  7.05e-04  2.57e-08  1.41e-05  8.60e-09  9.22e-08  9.41e-01  
 36  +4.7571e-01  +4.7573e-01  2.35e-05  8.48e-10  4.63e-07  2.84e-10  3.06e-09  9.90e-01  
 37  +4.7570e-01  +4.7570e-01  2.43e-07  8.79e-12  4.80e-09  2.95e-12  3.18e-11  9.90e-01  
 38  +4.7570e-01  +4.7570e-01  3.94e-09  1.42e-13  7.77e-11  5.87e-14  6.23e-13  9.84e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4201015s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:46 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:46 PM: Optimal value: 4.757e-01
(CVXPY) Sep 20 08:11:46 PM: Compilation took 2.567e-01 seconds
(CVXPY) Sep 20 08:11:46 PM: Solver (including time spent in interface) took 1.473e+00 seconds
Iteration: 21, Objective: 0.4757
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:46 PM: Your problem has 25229 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:46 PM: Finished problem compilation (took 2.630e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25229
  constraints   = 50229
  nnz(P)        = 0
  nnz(A)        = 479279
  cones (total) = 1
    : Nonnegative = 1,  numel = 50229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4259e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3196e-01  +6.1367e+02  6.13e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6019e+02  1.60e+02  1.50e-01  7.87e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7636e+01  1.71e+01  4.71e-02  2.47e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.1865e+00  6.87e-01  2.05e-03  1.12e+00  2.26e-05  1.92e-01  1.83e-01  
  6  +5.0000e-01  +7.6267e-01  2.63e-01  7.85e-04  4.28e-01  7.54e-06  8.06e-02  6.73e-01  
  7  +5.0000e-01  +6.7486e-01  1.75e-01  5.23e-04  2.85e-01  5.32e-06  4.77e-02  4.83e-01  
  8  +5.0000e-01  +6.7351e-01  1.74e-01  5.18e-04  2.82e-01  4.80e-06  3.37e-02  5.44e-01  
  9  +5.0000e-01  +6.3328e-01  1.33e-01  3.96e-04  2.16e-01  5.11e-06  1.11e-02  9.01e-01  
 10  +4.9991e-01  +5.9889e-01  9.90e-02  1.61e-04  8.77e-02  4.65e-05  6.84e-04  9.90e-01  
 11  +4.9884e-01  +5.9457e-01  9.57e-02  1.78e-05  9.73e-03  5.21e-04  5.78e-05  9.16e-01  
 12  +4.9901e-01  +5.9054e-01  9.15e-02  1.59e-05  8.68e-03  3.97e-04  5.12e-05  3.51e-01  
 13  +4.9874e-01  +5.8647e-01  8.77e-02  1.15e-05  6.28e-03  4.14e-04  3.69e-05  4.48e-01  
 14  +4.9874e-01  +5.8209e-01  8.33e-02  9.38e-06  5.13e-03  2.76e-04  2.99e-05  5.45e-01  
 15  +4.9844e-01  +5.7896e-01  8.05e-02  7.69e-06  4.21e-03  2.28e-04  2.45e-05  4.26e-01  
 16  +4.9667e-01  +5.6717e-01  7.05e-02  4.64e-06  2.54e-03  1.24e-04  1.48e-05  8.53e-01  
 17  +4.9478e-01  +5.5789e-01  6.31e-02  3.92e-06  2.14e-03  8.16e-05  1.26e-05  3.48e-01  
 18  +4.9376e-01  +5.5318e-01  5.94e-02  3.61e-06  1.98e-03  5.63e-05  1.17e-05  2.71e-01  
 19  +4.9182e-01  +5.4444e-01  5.26e-02  3.01e-06  1.65e-03  3.72e-05  9.86e-06  3.38e-01  
 20  +4.9017e-01  +5.3702e-01  4.68e-02  2.56e-06  1.40e-03  2.11e-05  8.44e-06  3.99e-01  
 21  +4.8813e-01  +5.2803e-01  3.99e-02  2.06e-06  1.12e-03  1.24e-05  6.84e-06  4.02e-01  
 22  +4.8497e-01  +5.1431e-01  2.93e-02  1.39e-06  7.63e-04  5.49e-06  4.71e-06  5.50e-01  
 23  +4.8293e-01  +5.0554e-01  2.26e-02  1.02e-06  5.58e-04  3.05e-06  3.47e-06  4.61e-01  
 24  +4.8202e-01  +5.0159e-01  1.96e-02  8.56e-07  4.68e-04  1.85e-06  2.92e-06  4.21e-01  
 25  +4.8183e-01  +5.0068e-01  1.89e-02  8.13e-07  4.44e-04  1.25e-06  2.77e-06  3.62e-01  
 26  +4.7945e-01  +4.9083e-01  1.14e-02  4.75e-07  2.60e-04  6.05e-07  1.64e-06  5.39e-01  
 27  +4.7895e-01  +4.8866e-01  9.71e-03  3.99e-07  2.18e-04  3.49e-07  1.38e-06  5.08e-01  
 28  +4.7775e-01  +4.8378e-01  6.04e-03  2.44e-07  1.34e-04  2.07e-07  8.49e-07  4.27e-01  
 29  +4.7761e-01  +4.8324e-01  5.62e-03  2.27e-07  1.24e-04  1.77e-07  7.87e-07  1.84e-01  
 30  +4.7734e-01  +4.8213e-01  4.79e-03  1.92e-07  1.05e-04  1.36e-07  6.68e-07  2.83e-01  
 31  +4.7684e-01  +4.8007e-01  3.23e-03  1.28e-07  7.01e-05  3.79e-08  4.48e-07  9.90e-01  
 32  +4.7617e-01  +4.7751e-01  1.33e-03  5.25e-08  2.87e-05  1.55e-08  1.85e-07  7.32e-01  
 33  +4.7616e-01  +4.7747e-01  1.30e-03  5.12e-08  2.80e-05  1.51e-08  1.80e-07  1.97e-01  
 34  +4.7587e-01  +4.7635e-01  4.78e-04  1.87e-08  1.02e-05  5.56e-09  6.59e-08  7.36e-01  
 35  +4.7573e-01  +4.7582e-01  9.08e-05  3.52e-09  1.92e-06  1.05e-09  1.25e-08  8.85e-01  
 36  +4.7569e-01  +4.7569e-01  9.94e-07  3.85e-11  2.11e-08  1.15e-11  1.37e-10  9.90e-01  
 37  +4.7569e-01  +4.7569e-01  9.94e-09  3.85e-13  2.11e-10  1.15e-13  1.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4249351s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:48 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:48 PM: Optimal value: 4.757e-01
(CVXPY) Sep 20 08:11:48 PM: Compilation took 2.630e-01 seconds
(CVXPY) Sep 20 08:11:48 PM: Solver (including time spent in interface) took 1.473e+00 seconds
Iteration: 22, Objective: 0.4757
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:48 PM: Your problem has 25239 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:48 PM: Finished problem compilation (took 2.633e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:48 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25239
  constraints   = 50239
  nnz(P)        = 0
  nnz(A)        = 483134
  cones (total) = 1
    : Nonnegative = 1,  numel = 50239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4260e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3195e-01  +6.1358e+02  6.13e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6015e+02  1.60e+02  1.50e-01  7.87e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7636e+01  1.71e+01  4.71e-02  2.47e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2040e+00  7.04e-01  2.10e-03  1.14e+00  2.26e-05  1.93e-01  1.79e-01  
  6  +5.0000e-01  +7.4702e-01  2.47e-01  7.38e-04  4.02e-01  6.89e-06  7.56e-02  6.89e-01  
  7  +5.0000e-01  +6.6862e-01  1.69e-01  5.04e-04  2.75e-01  4.96e-06  4.37e-02  5.30e-01  
  8  +5.0000e-01  +6.5445e-01  1.54e-01  4.61e-04  2.52e-01  5.06e-06  2.98e-02  4.11e-01  
  9  +5.0000e-01  +6.5145e-01  1.51e-01  4.48e-04  2.44e-01  6.33e-06  9.90e-03  9.90e-01  
 10  +4.9989e-01  +6.0302e-01  1.03e-01  1.47e-04  8.06e-02  5.46e-05  5.96e-04  9.87e-01  
 11  +4.9906e-01  +5.9907e-01  1.00e-01  2.25e-05  1.23e-02  4.20e-04  7.36e-05  8.79e-01  
 12  +4.9877e-01  +5.9178e-01  9.30e-02  1.45e-05  7.93e-03  4.48e-04  4.68e-05  5.64e-01  
 13  +4.9831e-01  +5.8687e-01  8.86e-02  1.03e-05  5.62e-03  4.80e-04  3.29e-05  4.42e-01  
 14  +4.9830e-01  +5.8421e-01  8.59e-02  9.34e-06  5.11e-03  3.70e-04  2.99e-05  3.17e-01  
 15  +4.9787e-01  +5.8141e-01  8.35e-02  7.93e-06  4.34e-03  3.74e-04  2.54e-05  2.22e-01  
 16  +4.9758e-01  +5.7683e-01  7.92e-02  6.81e-06  3.73e-03  2.15e-04  2.18e-05  5.17e-01  
 17  +4.9746e-01  +5.7568e-01  7.82e-02  6.72e-06  3.68e-03  1.79e-04  2.15e-05  1.49e-01  
 18  +4.9653e-01  +5.7083e-01  7.43e-02  5.65e-06  3.09e-03  1.74e-04  1.81e-05  2.16e-01  
 19  +4.9612e-01  +5.6764e-01  7.15e-02  5.37e-06  2.94e-03  8.16e-05  1.73e-05  4.56e-01  
 20  +4.9487e-01  +5.6162e-01  6.67e-02  4.56e-06  2.49e-03  7.58e-05  1.48e-05  1.96e-01  
 21  +4.9293e-01  +5.5163e-01  5.87e-02  3.70e-06  2.03e-03  1.46e-05  1.21e-05  7.23e-01  
 22  +4.9086e-01  +5.4219e-01  5.13e-02  2.97e-06  1.63e-03  1.00e-05  9.80e-06  3.55e-01  
 23  +4.8775e-01  +5.2813e-01  4.04e-02  2.10e-06  1.15e-03  2.31e-06  7.01e-06  7.25e-01  
 24  +4.8757e-01  +5.2735e-01  3.98e-02  2.05e-06  1.12e-03  2.04e-06  6.84e-06  1.26e-01  
 25  +4.8398e-01  +5.1163e-01  2.77e-02  1.31e-06  7.15e-04  1.06e-06  4.44e-06  5.14e-01  
 26  +4.8242e-01  +5.0484e-01  2.24e-02  1.00e-06  5.48e-04  5.38e-07  3.42e-06  5.89e-01  
 27  +4.8155e-01  +5.0112e-01  1.96e-02  8.54e-07  4.67e-04  4.12e-07  2.92e-06  3.20e-01  
 28  +4.8141e-01  +5.0046e-01  1.90e-02  8.25e-07  4.51e-04  3.49e-07  2.82e-06  2.74e-01  
 29  +4.7942e-01  +4.9219e-01  1.28e-02  5.38e-07  2.94e-04  2.16e-07  1.86e-06  4.48e-01  
 30  +4.7938e-01  +4.9196e-01  1.26e-02  5.26e-07  2.88e-04  1.98e-07  1.82e-06  2.16e-01  
 31  +4.7772e-01  +4.8513e-01  7.41e-03  3.05e-07  1.67e-04  1.12e-07  1.06e-06  4.88e-01  
 32  +4.7720e-01  +4.8296e-01  5.76e-03  2.34e-07  1.28e-04  8.16e-08  8.18e-07  4.37e-01  
 33  +4.7713e-01  +4.8266e-01  5.53e-03  2.25e-07  1.23e-04  7.41e-08  7.93e-07  2.28e-01  
 34  +4.7684e-01  +4.8149e-01  4.64e-03  1.88e-07  1.03e-04  6.10e-08  6.64e-07  2.73e-01  
 35  +4.7649e-01  +4.7999e-01  3.50e-03  1.41e-07  7.70e-05  4.18e-08  4.97e-07  7.59e-01  
 36  +4.7625e-01  +4.7908e-01  2.83e-03  1.13e-07  6.18e-05  3.36e-08  3.99e-07  3.23e-01  
 37  +4.7583e-01  +4.7743e-01  1.60e-03  6.35e-08  3.47e-05  1.83e-08  2.25e-07  9.54e-01  
 38  +4.7581e-01  +4.7733e-01  1.52e-03  6.06e-08  3.31e-05  1.73e-08  2.14e-07  4.54e-01  
 39  +4.7551e-01  +4.7621e-01  6.99e-04  2.75e-08  1.50e-05  7.97e-09  9.79e-08  6.07e-01  
 40  +4.7551e-01  +4.7621e-01  7.03e-04  2.73e-08  1.49e-05  8.11e-09  9.71e-08  1.00e-01  
 41  +4.7534e-01  +4.7559e-01  2.47e-04  9.39e-09  5.13e-06  2.90e-09  3.36e-08  6.83e-01  
 42  +4.7526e-01  +4.7530e-01  4.16e-05  1.52e-09  8.29e-07  5.16e-10  5.61e-09  9.48e-01  
 43  +4.7524e-01  +4.7524e-01  6.33e-07  2.30e-11  1.26e-08  7.84e-12  8.53e-11  9.90e-01  
 44  +4.7524e-01  +4.7524e-01  6.33e-09  2.30e-13  1.26e-10  7.86e-14  8.54e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7210018s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:50 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:50 PM: Optimal value: 4.752e-01
(CVXPY) Sep 20 08:11:50 PM: Compilation took 2.633e-01 seconds
(CVXPY) Sep 20 08:11:50 PM: Solver (including time spent in interface) took 1.774e+00 seconds
Iteration: 23, Objective: 0.4752
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:50 PM: Your problem has 25249 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:51 PM: Finished problem compilation (took 2.782e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25249
  constraints   = 50249
  nnz(P)        = 0
  nnz(A)        = 487698
  cones (total) = 1
    : Nonnegative = 1,  numel = 50249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4260e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1351e+02  6.13e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6013e+02  1.60e+02  1.50e-01  7.87e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7636e+01  1.71e+01  4.71e-02  2.47e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2210e+00  7.21e-01  2.16e-03  1.17e+00  2.26e-05  1.93e-01  1.75e-01  
  6  +5.0001e-01  +7.2987e-01  2.30e-01  6.87e-04  3.75e-01  6.07e-06  7.00e-02  7.28e-01  
  7  +5.0000e-01  +6.7578e-01  1.76e-01  5.25e-04  2.86e-01  4.83e-06  4.45e-02  4.82e-01  
  8  +5.0001e-01  +6.8685e-01  1.87e-01  5.58e-04  3.04e-01  4.31e-06  3.01e-02  6.64e-01  
  9  +5.0000e-01  +6.4567e-01  1.46e-01  4.33e-04  2.36e-01  6.09e-06  1.16e-02  6.44e-01  
 10  +4.9990e-01  +6.0445e-01  1.05e-01  1.73e-04  9.47e-02  5.06e-05  7.50e-04  9.90e-01  
 11  +4.9879e-01  +5.9939e-01  1.01e-01  2.02e-05  1.11e-02  5.39e-04  6.62e-05  9.13e-01  
 12  +4.9871e-01  +5.9485e-01  9.61e-02  1.60e-05  8.78e-03  5.03e-04  5.20e-05  3.91e-01  
 13  +4.9870e-01  +5.8677e-01  8.81e-02  1.13e-05  6.18e-03  3.31e-04  3.62e-05  7.03e-01  
 14  +4.9839e-01  +5.8379e-01  8.54e-02  9.01e-06  4.93e-03  3.07e-04  2.88e-05  3.91e-01  
 15  +4.9841e-01  +5.8286e-01  8.45e-02  8.74e-06  4.79e-03  2.48e-04  2.79e-05  2.10e-01  
 16  +4.9796e-01  +5.8024e-01  8.23e-02  7.44e-06  4.07e-03  2.46e-04  2.37e-05  2.37e-01  
 17  +4.9757e-01  +5.7580e-01  7.82e-02  6.68e-06  3.66e-03  8.97e-05  2.13e-05  6.36e-01  
 18  +4.9575e-01  +5.6668e-01  7.09e-02  4.85e-06  2.65e-03  8.39e-05  1.56e-05  3.86e-01  
 19  +4.9321e-01  +5.5426e-01  6.11e-02  3.72e-06  2.03e-03  5.67e-05  1.21e-05  4.02e-01  
 20  +4.9311e-01  +5.5387e-01  6.08e-02  3.70e-06  2.02e-03  5.34e-05  1.20e-05  4.35e-02  
 21  +4.9125e-01  +5.4529e-01  5.40e-02  3.10e-06  1.70e-03  3.95e-05  1.01e-05  2.80e-01  
 22  +4.8949e-01  +5.3735e-01  4.79e-02  2.61e-06  1.43e-03  2.36e-05  8.63e-06  3.77e-01  
 23  +4.8614e-01  +5.2242e-01  3.63e-02  1.82e-06  9.93e-04  1.20e-05  6.08e-06  4.92e-01  
 24  +4.8539e-01  +5.1906e-01  3.37e-02  1.64e-06  8.99e-04  9.15e-06  5.52e-06  2.41e-01  
 25  +4.8242e-01  +5.0616e-01  2.37e-02  1.09e-06  5.96e-04  5.35e-06  3.71e-06  4.29e-01  
 26  +4.8231e-01  +5.0560e-01  2.33e-02  1.05e-06  5.76e-04  4.13e-06  3.59e-06  2.40e-01  
 27  +4.8077e-01  +4.9910e-01  1.83e-02  8.06e-07  4.41e-04  3.07e-06  2.77e-06  2.72e-01  
 28  +4.8044e-01  +4.9762e-01  1.72e-02  7.46e-07  4.08e-04  2.31e-06  2.56e-06  2.62e-01  
 29  +4.7782e-01  +4.8665e-01  8.82e-03  3.68e-07  2.01e-04  8.70e-07  1.28e-06  6.39e-01  
 30  +4.7747e-01  +4.8516e-01  7.68e-03  3.17e-07  1.73e-04  6.67e-07  1.11e-06  2.56e-01  
 31  +4.7715e-01  +4.8381e-01  6.66e-03  2.73e-07  1.49e-04  4.97e-07  9.52e-07  2.79e-01  
 32  +4.7680e-01  +4.8219e-01  5.38e-03  2.18e-07  1.19e-04  1.19e-07  7.62e-07  8.65e-01  
 33  +4.7617e-01  +4.7970e-01  3.53e-03  1.42e-07  7.75e-05  7.54e-08  4.97e-07  3.96e-01  
 34  +4.7610e-01  +4.7938e-01  3.28e-03  1.32e-07  7.23e-05  5.41e-08  4.65e-07  5.11e-01  
 35  +4.7576e-01  +4.7804e-01  2.28e-03  9.10e-08  4.98e-05  2.81e-08  3.20e-07  8.76e-01  
 36  +4.7558e-01  +4.7734e-01  1.76e-03  6.99e-08  3.82e-05  2.09e-08  2.46e-07  6.16e-01  
 37  +4.7544e-01  +4.7680e-01  1.35e-03  5.37e-08  2.94e-05  1.55e-08  1.89e-07  9.90e-01  
 38  +4.7525e-01  +4.7604e-01  7.92e-04  3.13e-08  1.71e-05  9.05e-09  1.11e-07  5.71e-01  
 39  +4.7504e-01  +4.7527e-01  2.23e-04  8.75e-09  4.78e-06  2.57e-09  3.11e-08  8.71e-01  
 40  +4.7497e-01  +4.7500e-01  2.90e-05  1.14e-09  6.21e-07  3.31e-10  4.05e-09  9.18e-01  
 41  +4.7496e-01  +4.7496e-01  9.88e-07  3.87e-11  2.12e-08  1.13e-11  1.38e-10  9.68e-01  
 42  +4.7496e-01  +4.7496e-01  9.90e-09  3.88e-13  2.12e-10  1.13e-13  1.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.663972s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:52 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:52 PM: Optimal value: 4.750e-01
(CVXPY) Sep 20 08:11:52 PM: Compilation took 2.782e-01 seconds
(CVXPY) Sep 20 08:11:52 PM: Solver (including time spent in interface) took 1.712e+00 seconds
Iteration: 24, Objective: 0.4750
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:53 PM: Your problem has 25259 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:53 PM: Finished problem compilation (took 2.708e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25259
  constraints   = 50259
  nnz(P)        = 0
  nnz(A)        = 492227
  cones (total) = 1
    : Nonnegative = 1,  numel = 50259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4263e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1351e+02  6.13e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6014e+02  1.60e+02  1.50e-01  7.87e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7642e+01  1.71e+01  4.72e-02  2.47e+01  5.21e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2431e+00  7.43e-01  2.22e-03  1.21e+00  2.26e-05  1.93e-01  1.69e-01  
  6  +5.0001e-01  +7.5307e-01  2.53e-01  7.57e-04  4.12e-01  6.67e-06  7.62e-02  6.80e-01  
  7  +5.0000e-01  +6.7214e-01  1.72e-01  5.15e-04  2.81e-01  4.83e-06  4.42e-02  5.21e-01  
  8  +5.0000e-01  +6.6497e-01  1.65e-01  4.93e-04  2.69e-01  4.72e-06  2.68e-02  6.20e-01  
  9  +4.9999e-01  +6.3173e-01  1.32e-01  3.89e-04  2.12e-01  8.14e-06  8.00e-03  7.87e-01  
 10  +4.9990e-01  +6.0905e-01  1.09e-01  1.87e-04  1.02e-01  4.96e-05  8.26e-04  9.90e-01  
 11  +4.9904e-01  +6.0492e-01  1.06e-01  2.73e-05  1.50e-02  4.32e-04  9.01e-05  8.92e-01  
 12  +4.9875e-01  +5.9961e-01  1.01e-01  1.91e-05  1.04e-02  4.98e-04  6.21e-05  4.24e-01  
 13  +4.9883e-01  +5.8654e-01  8.77e-02  1.19e-05  6.52e-03  2.88e-04  3.81e-05  8.41e-01  
 14  +4.9858e-01  +5.8406e-01  8.55e-02  9.55e-06  5.23e-03  2.64e-04  3.04e-05  4.05e-01  
 15  +4.9827e-01  +5.8214e-01  8.39e-02  8.27e-06  4.53e-03  2.64e-04  2.64e-05  2.19e-01  
 16  +4.9807e-01  +5.7950e-01  8.14e-02  7.58e-06  4.15e-03  1.72e-04  2.41e-05  4.03e-01  
 17  +4.9673e-01  +5.7243e-01  7.57e-02  5.58e-06  3.05e-03  1.67e-04  1.78e-05  3.91e-01  
 18  +4.9571e-01  +5.6724e-01  7.15e-02  4.92e-06  2.69e-03  1.42e-04  1.58e-05  2.21e-01  
 19  +4.9354e-01  +5.5635e-01  6.28e-02  3.93e-06  2.15e-03  8.71e-05  1.27e-05  4.27e-01  
 20  +4.9321e-01  +5.5477e-01  6.16e-02  3.83e-06  2.10e-03  6.90e-05  1.24e-05  1.70e-01  
 21  +4.9047e-01  +5.4216e-01  5.17e-02  2.91e-06  1.59e-03  5.32e-05  9.56e-06  3.02e-01  
 22  +4.8890e-01  +5.3507e-01  4.62e-02  2.48e-06  1.36e-03  2.79e-05  8.20e-06  4.37e-01  
 23  +4.8644e-01  +5.2421e-01  3.78e-02  1.90e-06  1.04e-03  1.83e-05  6.36e-06  3.54e-01  
 24  +4.8595e-01  +5.2189e-01  3.59e-02  1.76e-06  9.64e-04  1.14e-05  5.90e-06  3.61e-01  
 25  +4.8278e-01  +5.0823e-01  2.54e-02  1.17e-06  6.42e-04  6.74e-06  4.00e-06  4.17e-01  
 26  +4.8139e-01  +5.0197e-01  2.06e-02  8.99e-07  4.92e-04  2.03e-06  3.08e-06  7.09e-01  
 27  +4.8053e-01  +4.9831e-01  1.78e-02  7.63e-07  4.18e-04  1.17e-06  2.62e-06  4.55e-01  
 28  +4.7766e-01  +4.8640e-01  8.73e-03  3.62e-07  1.98e-04  4.20e-07  1.27e-06  6.65e-01  
 29  +4.7656e-01  +4.8187e-01  5.31e-03  2.16e-07  1.18e-04  1.91e-07  7.63e-07  6.01e-01  
 30  +4.7650e-01  +4.8160e-01  5.11e-03  2.08e-07  1.14e-04  1.61e-07  7.39e-07  1.93e-01  
 31  +4.7592e-01  +4.7927e-01  3.35e-03  1.35e-07  7.41e-05  8.13e-08  4.83e-07  5.81e-01  
 32  +4.7587e-01  +4.7906e-01  3.19e-03  1.28e-07  6.99e-05  7.15e-08  4.55e-07  2.09e-01  
 33  +4.7541e-01  +4.7722e-01  1.81e-03  7.22e-08  3.95e-05  2.07e-08  2.58e-07  9.90e-01  
 34  +4.7505e-01  +4.7584e-01  7.90e-04  3.14e-08  1.72e-05  8.88e-09  1.13e-07  9.90e-01  
 35  +4.7480e-01  +4.7486e-01  6.91e-05  2.73e-09  1.49e-06  7.80e-10  9.89e-09  9.29e-01  
 36  +4.7477e-01  +4.7477e-01  7.61e-07  3.01e-11  1.64e-08  8.58e-12  1.09e-10  9.89e-01  
 37  +4.7477e-01  +4.7477e-01  7.61e-09  3.01e-13  1.64e-10  8.58e-14  1.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4651753s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:54 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:54 PM: Optimal value: 4.748e-01
(CVXPY) Sep 20 08:11:54 PM: Compilation took 2.708e-01 seconds
(CVXPY) Sep 20 08:11:54 PM: Solver (including time spent in interface) took 1.513e+00 seconds
Iteration: 25, Objective: 0.4748
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:55 PM: Your problem has 25269 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:55 PM: Finished problem compilation (took 2.750e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25269
  constraints   = 50269
  nnz(P)        = 0
  nnz(A)        = 497423
  cones (total) = 1
    : Nonnegative = 1,  numel = 50269

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4260e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1343e+02  6.13e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6011e+02  1.60e+02  1.50e-01  7.87e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7636e+01  1.71e+01  4.71e-02  2.47e+01  5.21e-06  1.96e-01  4.46e-01  
  5  +5.0000e-01  +1.1794e+00  6.79e-01  2.03e-03  1.11e+00  2.27e-05  1.92e-01  1.86e-01  
  6  +5.0000e-01  +7.6594e-01  2.66e-01  7.95e-04  4.34e-01  7.94e-06  8.16e-02  6.54e-01  
  7  +5.0000e-01  +6.9130e-01  1.91e-01  5.72e-04  3.12e-01  5.82e-06  5.07e-02  4.90e-01  
  8  +5.0000e-01  +6.7870e-01  1.79e-01  5.34e-04  2.91e-01  5.10e-06  3.10e-02  6.56e-01  
  9  +5.0000e-01  +6.5938e-01  1.59e-01  4.75e-04  2.59e-01  6.21e-06  1.76e-02  4.72e-01  
 10  +4.9998e-01  +6.3107e-01  1.31e-01  3.69e-04  2.01e-01  1.20e-05  3.91e-03  9.90e-01  
 11  +4.9929e-01  +6.2218e-01  1.23e-01  3.75e-05  2.06e-02  3.27e-04  1.24e-04  9.70e-01  
 12  +4.9858e-01  +6.0569e-01  1.07e-01  1.61e-05  8.83e-03  5.36e-04  5.23e-05  7.02e-01  
 13  +4.9896e-01  +5.9487e-01  9.59e-02  1.38e-05  7.57e-03  2.62e-04  4.43e-05  5.54e-01  
 14  +4.9840e-01  +5.9063e-01  9.22e-02  9.85e-06  5.40e-03  3.15e-04  3.15e-05  3.51e-01  
 15  +4.9831e-01  +5.8774e-01  8.94e-02  8.77e-06  4.80e-03  2.57e-04  2.80e-05  3.12e-01  
 16  +4.9798e-01  +5.8407e-01  8.61e-02  7.66e-06  4.20e-03  2.09e-04  2.44e-05  3.25e-01  
 17  +4.9662e-01  +5.7486e-01  7.82e-02  5.70e-06  3.12e-03  1.62e-04  1.82e-05  4.82e-01  
 18  +4.9568e-01  +5.6983e-01  7.42e-02  5.06e-06  2.77e-03  1.49e-04  1.62e-05  1.63e-01  
 19  +4.9546e-01  +5.6835e-01  7.29e-02  4.98e-06  2.73e-03  1.24e-04  1.60e-05  1.33e-01  
 20  +4.9275e-01  +5.5433e-01  6.16e-02  3.70e-06  2.02e-03  7.33e-05  1.20e-05  4.81e-01  
 21  +4.9253e-01  +5.5324e-01  6.07e-02  3.64e-06  1.99e-03  6.58e-05  1.18e-05  8.49e-02  
 22  +4.9058e-01  +5.4406e-01  5.35e-02  3.01e-06  1.65e-03  4.04e-05  9.87e-06  3.76e-01  
 23  +4.8852e-01  +5.3449e-01  4.60e-02  2.43e-06  1.33e-03  2.22e-05  8.03e-06  4.35e-01  
 24  +4.8725e-01  +5.2873e-01  4.15e-02  2.10e-06  1.15e-03  1.27e-05  6.95e-06  4.08e-01  
 25  +4.8579e-01  +5.2233e-01  3.65e-02  1.78e-06  9.74e-04  8.61e-06  5.94e-06  3.17e-01  
 26  +4.8388e-01  +5.1398e-01  3.01e-02  1.40e-06  7.65e-04  4.64e-06  4.70e-06  4.58e-01  
 27  +4.8061e-01  +5.0001e-01  1.94e-02  8.49e-07  4.65e-04  2.32e-06  2.90e-06  5.12e-01  
 28  +4.7944e-01  +4.9494e-01  1.55e-02  6.57e-07  3.60e-04  1.27e-06  2.26e-06  4.85e-01  
 29  +4.7769e-01  +4.8741e-01  9.72e-03  3.97e-07  2.17e-04  2.16e-07  1.37e-06  8.99e-01  
 30  +4.7647e-01  +4.8254e-01  6.06e-03  2.45e-07  1.34e-04  1.27e-07  8.53e-07  4.55e-01  
 31  +4.7637e-01  +4.8205e-01  5.69e-03  2.30e-07  1.26e-04  9.44e-08  8.03e-07  4.74e-01  
 32  +4.7585e-01  +4.8003e-01  4.17e-03  1.68e-07  9.18e-05  6.84e-08  5.89e-07  3.01e-01  
 33  +4.7570e-01  +4.7939e-01  3.69e-03  1.48e-07  8.10e-05  5.33e-08  5.20e-07  4.64e-01  
 34  +4.7520e-01  +4.7745e-01  2.25e-03  8.96e-08  4.90e-05  3.12e-08  3.16e-07  5.25e-01  
 35  +4.7498e-01  +4.7657e-01  1.60e-03  6.35e-08  3.47e-05  2.02e-08  2.24e-07  6.43e-01  
 36  +4.7480e-01  +4.7587e-01  1.07e-03  4.26e-08  2.33e-05  1.23e-08  1.51e-07  9.90e-01  
 37  +4.7451e-01  +4.7478e-01  2.74e-04  1.08e-08  5.93e-06  3.13e-09  3.85e-08  7.87e-01  
 38  +4.7442e-01  +4.7445e-01  2.82e-05  1.11e-09  6.10e-07  3.19e-10  3.97e-09  9.90e-01  
 39  +4.7441e-01  +4.7441e-01  4.30e-07  1.70e-11  9.31e-09  4.87e-12  6.06e-11  9.85e-01  
 40  +4.7441e-01  +4.7441e-01  4.30e-09  1.70e-13  9.31e-11  4.87e-14  6.06e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5863775s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:56 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:56 PM: Optimal value: 4.744e-01
(CVXPY) Sep 20 08:11:56 PM: Compilation took 2.750e-01 seconds
(CVXPY) Sep 20 08:11:56 PM: Solver (including time spent in interface) took 1.638e+00 seconds
Iteration: 26, Objective: 0.4744
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:57 PM: Your problem has 25279 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:57 PM: Finished problem compilation (took 2.801e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25279
  constraints   = 50279
  nnz(P)        = 0
  nnz(A)        = 499822
  cones (total) = 1
    : Nonnegative = 1,  numel = 50279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4259e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1340e+02  6.13e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6009e+02  1.60e+02  1.50e-01  7.87e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7635e+01  1.71e+01  4.71e-02  2.47e+01  5.21e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.1862e+00  6.86e-01  2.05e-03  1.12e+00  2.27e-05  1.92e-01  1.85e-01  
  6  +5.0000e-01  +7.5980e-01  2.60e-01  7.77e-04  4.24e-01  7.71e-06  7.97e-02  6.57e-01  
  7  +5.0000e-01  +6.7894e-01  1.79e-01  5.35e-04  2.92e-01  5.37e-06  4.53e-02  5.82e-01  
  8  +5.0000e-01  +6.5087e-01  1.51e-01  4.51e-04  2.46e-01  5.55e-06  2.37e-02  6.10e-01  
  9  +5.0000e-01  +6.6310e-01  1.63e-01  4.81e-04  2.63e-01  5.77e-06  9.69e-03  9.90e-01  
 10  +4.9990e-01  +6.3894e-01  1.39e-01  2.00e-04  1.09e-01  4.93e-05  8.07e-04  9.21e-01  
 11  +4.9889e-01  +6.3231e-01  1.33e-01  2.33e-05  1.28e-02  4.89e-04  7.60e-05  9.06e-01  
 12  +4.9868e-01  +6.1308e-01  1.14e-01  1.53e-05  8.38e-03  4.36e-04  4.93e-05  5.39e-01  
 13  +4.9873e-01  +6.0956e-01  1.11e-01  1.47e-05  8.05e-03  3.82e-04  4.72e-05  1.35e-01  
 14  +4.9824e-01  +5.9799e-01  9.97e-02  1.01e-05  5.56e-03  3.50e-04  3.24e-05  5.02e-01  
 15  +4.9840e-01  +5.9376e-01  9.54e-02  9.78e-06  5.36e-03  2.38e-04  3.12e-05  2.82e-01  
 16  +4.9796e-01  +5.8970e-01  9.17e-02  8.21e-06  4.50e-03  2.29e-04  2.62e-05  2.64e-01  
 17  +4.9767e-01  +5.8659e-01  8.89e-02  7.44e-06  4.07e-03  2.00e-04  2.37e-05  2.21e-01  
 18  +4.9698e-01  +5.7733e-01  8.04e-02  6.39e-06  3.50e-03  7.63e-05  2.04e-05  6.01e-01  
 19  +4.9626e-01  +5.7276e-01  7.65e-02  5.78e-06  3.16e-03  5.03e-05  1.85e-05  3.59e-01  
 20  +4.9324e-01  +5.5778e-01  6.45e-02  3.92e-06  2.14e-03  4.54e-05  1.27e-05  3.78e-01  
 21  +4.9219e-01  +5.5268e-01  6.05e-02  3.56e-06  1.95e-03  3.52e-05  1.16e-05  2.19e-01  
 22  +4.9059e-01  +5.4496e-01  5.44e-02  3.07e-06  1.68e-03  2.10e-05  1.01e-05  3.67e-01  
 23  +4.8789e-01  +5.3266e-01  4.48e-02  2.35e-06  1.28e-03  1.30e-05  7.79e-06  3.88e-01  
 24  +4.8652e-01  +5.2648e-01  4.00e-02  2.01e-06  1.10e-03  9.43e-06  6.71e-06  2.83e-01  
 25  +4.8521e-01  +5.2047e-01  3.53e-02  1.69e-06  9.26e-04  4.57e-06  5.67e-06  5.00e-01  
 26  +4.8372e-01  +5.1401e-01  3.03e-02  1.41e-06  7.71e-04  3.09e-06  4.76e-06  3.29e-01  
 27  +4.8187e-01  +5.0604e-01  2.42e-02  1.08e-06  5.93e-04  1.95e-06  3.69e-06  3.88e-01  
 28  +4.8035e-01  +4.9951e-01  1.92e-02  8.34e-07  4.56e-04  1.20e-06  2.86e-06  4.10e-01  
 29  +4.7824e-01  +4.9061e-01  1.24e-02  5.22e-07  2.86e-04  6.27e-07  1.81e-06  5.03e-01  
 30  +4.7671e-01  +4.8407e-01  7.37e-03  3.03e-07  1.66e-04  2.11e-07  1.06e-06  7.38e-01  
 31  +4.7641e-01  +4.8272e-01  6.31e-03  2.58e-07  1.41e-04  8.81e-08  9.01e-07  8.65e-01  
 32  +4.7550e-01  +4.7908e-01  3.58e-03  1.45e-07  7.95e-05  4.94e-08  5.13e-07  4.70e-01  
 33  +4.7518e-01  +4.7782e-01  2.64e-03  1.07e-07  5.83e-05  3.10e-08  3.78e-07  8.37e-01  
 34  +4.7506e-01  +4.7734e-01  2.28e-03  9.21e-08  5.04e-05  2.67e-08  3.26e-07  2.23e-01  
 35  +4.7480e-01  +4.7630e-01  1.50e-03  6.04e-08  3.30e-05  1.69e-08  2.14e-07  9.90e-01  
 36  +4.7451e-01  +4.7520e-01  6.85e-04  2.74e-08  1.50e-05  7.73e-09  9.76e-08  7.37e-01  
 37  +4.7438e-01  +4.7469e-01  3.09e-04  1.23e-08  6.75e-06  3.47e-09  4.41e-08  9.90e-01  
 38  +4.7431e-01  +4.7441e-01  1.04e-04  4.14e-09  2.26e-06  1.16e-09  1.48e-08  8.15e-01  
 39  +4.7427e-01  +4.7428e-01  3.30e-06  1.32e-10  7.20e-08  3.69e-11  4.70e-10  9.74e-01  
 40  +4.7427e-01  +4.7427e-01  4.51e-08  1.80e-12  9.86e-10  5.04e-13  6.43e-12  9.86e-01  
 41  +4.7427e-01  +4.7427e-01  4.52e-10  1.81e-14  9.86e-12  5.04e-15  6.43e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6099845s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:59 PM: Problem status: optimal
(CVXPY) Sep 20 08:11:59 PM: Optimal value: 4.743e-01
(CVXPY) Sep 20 08:11:59 PM: Compilation took 2.801e-01 seconds
(CVXPY) Sep 20 08:11:59 PM: Solver (including time spent in interface) took 1.663e+00 seconds
Iteration: 27, Objective: 0.4743
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:11:59 PM: Your problem has 25289 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:11:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:11:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:11:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:11:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:11:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:11:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:11:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:11:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:11:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:11:59 PM: Finished problem compilation (took 3.065e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:11:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25289
  constraints   = 50289
  nnz(P)        = 0
  nnz(A)        = 502791
  cones (total) = 1
    : Nonnegative = 1,  numel = 50289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4259e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1339e+02  6.13e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6009e+02  1.60e+02  1.50e-01  7.86e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7635e+01  1.71e+01  4.71e-02  2.47e+01  5.21e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.1908e+00  6.91e-01  2.07e-03  1.12e+00  2.27e-05  1.92e-01  1.84e-01  
  6  +5.0000e-01  +7.5583e-01  2.56e-01  7.65e-04  4.17e-01  7.54e-06  7.84e-02  6.61e-01  
  7  +5.0000e-01  +6.7013e-01  1.70e-01  5.09e-04  2.78e-01  5.42e-06  4.39e-02  5.33e-01  
  8  +5.0000e-01  +6.5200e-01  1.52e-01  4.54e-04  2.48e-01  5.85e-06  2.30e-02  6.40e-01  
  9  +4.9999e-01  +6.4832e-01  1.48e-01  4.31e-04  2.35e-01  1.01e-05  6.34e-03  9.90e-01  
 10  +4.9963e-01  +6.3214e-01  1.33e-01  8.43e-05  4.61e-02  1.75e-04  2.92e-04  9.57e-01  
 11  +4.9846e-01  +6.2139e-01  1.23e-01  2.12e-05  1.16e-02  6.47e-04  6.91e-05  7.82e-01  
 12  +4.9861e-01  +6.1497e-01  1.16e-01  1.94e-05  1.06e-02  5.39e-04  6.29e-05  2.22e-01  
 13  +4.9760e-01  +6.0321e-01  1.06e-01  1.11e-05  6.08e-03  7.03e-04  3.58e-05  5.20e-01  
 14  +4.9776e-01  +6.0043e-01  1.03e-01  1.09e-05  5.96e-03  5.91e-04  3.50e-05  1.36e-01  
 15  +4.9722e-01  +5.9473e-01  9.75e-02  8.85e-06  4.85e-03  5.74e-04  2.84e-05  2.81e-01  
 16  +4.9750e-01  +5.8919e-01  9.17e-02  8.20e-06  4.49e-03  3.32e-04  2.62e-05  4.00e-01  
 17  +4.9721e-01  +5.7956e-01  8.23e-02  6.97e-06  3.82e-03  9.69e-05  2.22e-05  6.88e-01  
 18  +4.9579e-01  +5.7139e-01  7.56e-02  5.42e-06  2.97e-03  6.56e-05  1.74e-05  4.95e-01  
 19  +4.9404e-01  +5.6272e-01  6.87e-02  4.42e-06  2.42e-03  5.83e-05  1.43e-05  2.41e-01  
 20  +4.9305e-01  +5.5763e-01  6.46e-02  4.03e-06  2.21e-03  3.78e-05  1.31e-05  3.19e-01  
 21  +4.9011e-01  +5.4319e-01  5.31e-02  3.02e-06  1.65e-03  7.56e-06  9.91e-06  7.20e-01  
 22  +4.8863e-01  +5.3666e-01  4.80e-02  2.60e-06  1.42e-03  5.90e-06  8.60e-06  2.41e-01  
 23  +4.8650e-01  +5.2728e-01  4.08e-02  2.06e-06  1.13e-03  3.46e-06  6.88e-06  4.26e-01  
 24  +4.8553e-01  +5.2309e-01  3.76e-02  1.84e-06  1.01e-03  2.48e-06  6.18e-06  2.92e-01  
 25  +4.8317e-01  +5.1297e-01  2.98e-02  1.39e-06  7.60e-04  1.57e-06  4.71e-06  3.89e-01  
 26  +4.8106e-01  +5.0383e-01  2.28e-02  1.01e-06  5.55e-04  8.35e-07  3.46e-06  5.11e-01  
 27  +4.7804e-01  +4.9090e-01  1.29e-02  5.44e-07  2.98e-04  2.84e-07  1.89e-06  7.36e-01  
 28  +4.7671e-01  +4.8540e-01  8.69e-03  3.62e-07  1.98e-04  1.77e-07  1.27e-06  4.26e-01  
 29  +4.7554e-01  +4.8052e-01  4.98e-03  2.05e-07  1.12e-04  8.57e-08  7.21e-07  6.23e-01  
 30  +4.7509e-01  +4.7866e-01  3.57e-03  1.46e-07  7.99e-05  5.64e-08  5.16e-07  4.50e-01  
 31  +4.7468e-01  +4.7694e-01  2.27e-03  9.23e-08  5.05e-05  2.78e-08  3.27e-07  8.55e-01  
 32  +4.7426e-01  +4.7531e-01  1.05e-03  4.27e-08  2.33e-05  1.23e-08  1.52e-07  7.59e-01  
 33  +4.7407e-01  +4.7454e-01  4.74e-04  1.92e-08  1.05e-05  5.44e-09  6.87e-08  7.23e-01  
 34  +4.7395e-01  +4.7409e-01  1.43e-04  5.81e-09  3.18e-06  1.59e-09  2.08e-08  9.90e-01  
 35  +4.7390e-01  +4.7391e-01  4.78e-06  1.94e-10  1.06e-07  5.28e-11  6.95e-10  9.71e-01  
 36  +4.7390e-01  +4.7390e-01  5.77e-08  2.34e-12  1.28e-09  6.37e-13  8.38e-12  9.88e-01  
 37  +4.7390e-01  +4.7390e-01  7.01e-10  2.84e-14  1.55e-11  8.11e-15  1.06e-13  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.492768s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:01 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:01 PM: Optimal value: 4.739e-01
(CVXPY) Sep 20 08:12:01 PM: Compilation took 3.065e-01 seconds
(CVXPY) Sep 20 08:12:01 PM: Solver (including time spent in interface) took 1.546e+00 seconds
Iteration: 28, Objective: 0.4739
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:01 PM: Your problem has 25299 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:01 PM: Finished problem compilation (took 2.920e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25299
  constraints   = 50299
  nnz(P)        = 0
  nnz(A)        = 506763
  cones (total) = 1
    : Nonnegative = 1,  numel = 50299

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4258e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1337e+02  6.13e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6008e+02  1.60e+02  1.50e-01  7.86e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7634e+01  1.71e+01  4.72e-02  2.47e+01  5.21e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.1921e+00  6.92e-01  2.07e-03  1.13e+00  2.27e-05  1.92e-01  1.83e-01  
  6  +5.0000e-01  +7.5767e-01  2.58e-01  7.71e-04  4.20e-01  7.56e-06  7.87e-02  6.62e-01  
  7  +5.0000e-01  +6.7076e-01  1.71e-01  5.11e-04  2.79e-01  5.43e-06  4.40e-02  5.32e-01  
  8  +5.0000e-01  +6.4057e-01  1.41e-01  4.20e-04  2.29e-01  6.11e-06  2.18e-02  5.94e-01  
  9  +5.0000e-01  +6.6246e-01  1.62e-01  4.79e-04  2.61e-01  6.98e-06  9.18e-03  9.90e-01  
 10  +4.9989e-01  +6.4403e-01  1.44e-01  2.15e-04  1.18e-01  5.45e-05  8.84e-04  9.09e-01  
 11  +4.9865e-01  +6.3590e-01  1.37e-01  2.28e-05  1.25e-02  6.00e-04  7.43e-05  9.16e-01  
 12  +4.9892e-01  +6.1714e-01  1.18e-01  1.85e-05  1.01e-02  3.84e-04  5.97e-05  4.45e-01  
 13  +4.9811e-01  +6.0832e-01  1.10e-01  1.15e-05  6.29e-03  5.06e-04  3.68e-05  4.41e-01  
 14  +4.9823e-01  +6.0233e-01  1.04e-01  1.08e-05  5.91e-03  3.73e-04  3.44e-05  2.51e-01  
 15  +4.9761e-01  +5.9743e-01  9.98e-02  8.78e-06  4.81e-03  3.94e-04  2.80e-05  2.30e-01  
 16  +4.9775e-01  +5.9118e-01  9.34e-02  8.19e-06  4.49e-03  2.30e-04  2.61e-05  3.79e-01  
 17  +4.9753e-01  +5.8429e-01  8.68e-02  7.48e-06  4.10e-03  1.13e-04  2.38e-05  4.72e-01  
 18  +4.9535e-01  +5.7262e-01  7.73e-02  5.08e-06  2.78e-03  1.20e-04  1.63e-05  3.63e-01  
 19  +4.9495e-01  +5.6971e-01  7.48e-02  4.94e-06  2.70e-03  9.00e-05  1.59e-05  1.94e-01  
 20  +4.9486e-01  +5.6913e-01  7.43e-02  4.92e-06  2.69e-03  8.28e-05  1.58e-05  5.89e-02  
 21  +4.9425e-01  +5.6583e-01  7.16e-02  4.63e-06  2.54e-03  7.35e-05  1.49e-05  1.23e-01  
 22  +4.9159e-01  +5.5135e-01  5.98e-02  3.55e-06  1.94e-03  1.94e-05  1.16e-05  6.68e-01  
 23  +4.9113e-01  +5.4910e-01  5.80e-02  3.39e-06  1.86e-03  1.44e-05  1.11e-05  2.24e-01  
 24  +4.8875e-01  +5.3812e-01  4.94e-02  2.67e-06  1.46e-03  6.03e-06  8.81e-06  5.55e-01  
 25  +4.8654e-01  +5.2835e-01  4.18e-02  2.11e-06  1.16e-03  3.64e-06  7.04e-06  4.09e-01  
 26  +4.8596e-01  +5.2579e-01  3.98e-02  1.97e-06  1.08e-03  2.70e-06  6.60e-06  2.59e-01  
 27  +4.8361e-01  +5.1564e-01  3.20e-02  1.51e-06  8.26e-04  1.83e-06  5.10e-06  3.46e-01  
 28  +4.8023e-01  +5.0099e-01  2.08e-02  9.05e-07  4.96e-04  5.14e-07  3.10e-06  7.62e-01  
 29  +4.7845e-01  +4.9355e-01  1.51e-02  6.40e-07  3.50e-04  3.24e-07  2.21e-06  4.44e-01  
 30  +4.7752e-01  +4.8926e-01  1.17e-02  4.82e-07  2.64e-04  1.30e-07  1.67e-06  9.88e-01  
 31  +4.7624e-01  +4.8417e-01  7.93e-03  3.23e-07  1.77e-04  8.83e-08  1.13e-06  4.77e-01  
 32  +4.7509e-01  +4.7959e-01  4.50e-03  1.81e-07  9.90e-05  5.10e-08  6.40e-07  9.90e-01  
 33  +4.7424e-01  +4.7631e-01  2.06e-03  8.22e-08  4.50e-05  2.34e-08  2.95e-07  9.24e-01  
 34  +4.7368e-01  +4.7416e-01  4.80e-04  1.90e-08  1.04e-05  5.40e-09  6.91e-08  7.89e-01  
 35  +4.7350e-01  +4.7352e-01  1.31e-05  5.14e-10  2.81e-07  1.44e-10  1.89e-09  9.86e-01  
 36  +4.7350e-01  +4.7350e-01  1.31e-07  5.17e-12  2.83e-09  1.45e-12  1.90e-11  9.90e-01  
 37  +4.7350e-01  +4.7350e-01  2.04e-09  8.02e-14  4.39e-11  2.25e-14  2.94e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5079648s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:03 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:03 PM: Optimal value: 4.735e-01
(CVXPY) Sep 20 08:12:03 PM: Compilation took 2.920e-01 seconds
(CVXPY) Sep 20 08:12:03 PM: Solver (including time spent in interface) took 1.561e+00 seconds
Iteration: 29, Objective: 0.4735
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:03 PM: Your problem has 25309 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:03 PM: Finished problem compilation (took 2.981e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25309
  constraints   = 50309
  nnz(P)        = 0
  nnz(A)        = 510023
  cones (total) = 1
    : Nonnegative = 1,  numel = 50309

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4258e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1333e+02  6.13e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6007e+02  1.60e+02  1.50e-01  7.86e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7633e+01  1.71e+01  4.72e-02  2.47e+01  5.21e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.1923e+00  6.92e-01  2.07e-03  1.13e+00  2.27e-05  1.92e-01  1.84e-01  
  6  +5.0000e-01  +7.5960e-01  2.60e-01  7.77e-04  4.24e-01  7.62e-06  7.92e-02  6.61e-01  
  7  +5.0000e-01  +6.6954e-01  1.70e-01  5.07e-04  2.77e-01  5.51e-06  4.39e-02  5.17e-01  
  8  +5.0000e-01  +6.5091e-01  1.51e-01  4.51e-04  2.46e-01  6.16e-06  2.22e-02  6.53e-01  
  9  +5.0000e-01  +6.6032e-01  1.60e-01  4.71e-04  2.57e-01  7.38e-06  8.35e-03  9.90e-01  
 10  +4.9979e-01  +6.3652e-01  1.37e-01  1.25e-04  6.86e-02  9.93e-05  4.54e-04  9.49e-01  
 11  +4.9885e-01  +6.2807e-01  1.29e-01  2.52e-05  1.38e-02  5.00e-04  8.21e-05  8.28e-01  
 12  +4.9844e-01  +6.1954e-01  1.21e-01  1.76e-05  9.65e-03  5.75e-04  5.70e-05  3.86e-01  
 13  +4.9877e-01  +6.0581e-01  1.07e-01  1.47e-05  8.06e-03  3.35e-04  4.71e-05  4.86e-01  
 14  +4.9847e-01  +6.0155e-01  1.03e-01  1.19e-05  6.52e-03  3.44e-04  3.81e-05  2.83e-01  
 15  +4.9827e-01  +5.9338e-01  9.51e-02  9.37e-06  5.14e-03  2.42e-04  2.99e-05  5.11e-01  
 16  +4.9821e-01  +5.9099e-01  9.28e-02  9.09e-06  4.98e-03  1.92e-04  2.90e-05  2.00e-01  
 17  +4.9606e-01  +5.7718e-01  8.11e-02  5.33e-06  2.92e-03  1.93e-04  1.70e-05  5.87e-01  
 18  +4.9478e-01  +5.6971e-01  7.49e-02  4.79e-06  2.62e-03  1.37e-04  1.54e-05  2.70e-01  
 19  +4.9290e-01  +5.5997e-01  6.71e-02  4.02e-06  2.20e-03  1.02e-04  1.30e-05  2.81e-01  
 20  +4.9275e-01  +5.5924e-01  6.65e-02  4.00e-06  2.19e-03  9.30e-05  1.30e-05  6.59e-02  
 21  +4.9138e-01  +5.5238e-01  6.10e-02  3.53e-06  1.93e-03  6.22e-05  1.15e-05  3.09e-01  
 22  +4.8939e-01  +5.4289e-01  5.35e-02  2.94e-06  1.61e-03  3.40e-05  9.69e-06  4.17e-01  
 23  +4.8699e-01  +5.3210e-01  4.51e-02  2.32e-06  1.27e-03  2.52e-05  7.75e-06  2.84e-01  
 24  +4.8561e-01  +5.2589e-01  4.03e-02  1.99e-06  1.09e-03  1.79e-05  6.68e-06  2.92e-01  
 25  +4.8380e-01  +5.1797e-01  3.42e-02  1.62e-06  8.85e-04  1.23e-05  5.47e-06  3.21e-01  
 26  +4.8159e-01  +5.0818e-01  2.66e-02  1.18e-06  6.47e-04  3.51e-06  4.04e-06  6.95e-01  
 27  +4.8006e-01  +5.0174e-01  2.17e-02  9.36e-07  5.12e-04  2.39e-06  3.22e-06  3.39e-01  
 28  +4.7939e-01  +4.9893e-01  1.95e-02  8.28e-07  4.53e-04  1.82e-06  2.85e-06  2.63e-01  
 29  +4.7869e-01  +4.9587e-01  1.72e-02  7.10e-07  3.88e-04  8.62e-07  2.45e-06  5.81e-01  
 30  +4.7679e-01  +4.8828e-01  1.15e-02  4.64e-07  2.54e-04  4.99e-07  1.63e-06  4.45e-01  
 31  +4.7523e-01  +4.8197e-01  6.74e-03  2.68e-07  1.46e-04  2.21e-07  9.51e-07  6.08e-01  
 32  +4.7428e-01  +4.7828e-01  4.00e-03  1.55e-07  8.50e-05  9.36e-08  5.60e-07  6.74e-01  
 33  +4.7363e-01  +4.7580e-01  2.17e-03  8.27e-08  4.52e-05  2.82e-08  3.02e-07  9.36e-01  
 34  +4.7291e-01  +4.7321e-01  2.93e-04  1.10e-08  6.00e-06  3.74e-09  4.09e-08  8.90e-01  
 35  +4.7280e-01  +4.7281e-01  7.62e-06  2.84e-10  1.56e-07  9.12e-11  1.06e-09  9.90e-01  
 36  +4.7280e-01  +4.7280e-01  7.64e-08  2.85e-12  1.56e-09  9.14e-13  1.07e-11  9.90e-01  
 37  +4.7280e-01  +4.7280e-01  7.69e-10  2.88e-14  1.57e-11  1.21e-14  1.40e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5028075s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:05 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:05 PM: Optimal value: 4.728e-01
(CVXPY) Sep 20 08:12:05 PM: Compilation took 2.981e-01 seconds
(CVXPY) Sep 20 08:12:05 PM: Solver (including time spent in interface) took 1.554e+00 seconds
Iteration: 30, Objective: 0.4728
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:05 PM: Your problem has 25319 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:05 PM: Finished problem compilation (took 3.110e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25319
  constraints   = 50319
  nnz(P)        = 0
  nnz(A)        = 512831
  cones (total) = 1
    : Nonnegative = 1,  numel = 50319

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4258e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1333e+02  6.13e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6007e+02  1.60e+02  1.50e-01  7.86e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7633e+01  1.71e+01  4.72e-02  2.47e+01  5.21e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.1916e+00  6.92e-01  2.07e-03  1.13e+00  2.27e-05  1.92e-01  1.84e-01  
  6  +5.0000e-01  +7.6540e-01  2.65e-01  7.94e-04  4.33e-01  7.83e-06  8.07e-02  6.54e-01  
  7  +5.0000e-01  +6.6882e-01  1.69e-01  5.05e-04  2.76e-01  5.54e-06  4.37e-02  5.30e-01  
  8  +5.0000e-01  +6.5566e-01  1.56e-01  4.65e-04  2.54e-01  6.15e-06  2.37e-02  6.18e-01  
  9  +4.9998e-01  +6.3651e-01  1.37e-01  3.89e-04  2.12e-01  1.59e-05  4.48e-03  9.90e-01  
 10  +4.9933e-01  +6.2592e-01  1.27e-01  5.78e-05  3.16e-02  3.10e-04  1.96e-04  9.62e-01  
 11  +4.9899e-01  +6.1108e-01  1.12e-01  2.96e-05  1.62e-02  4.18e-04  9.74e-05  6.65e-01  
 12  +4.9871e-01  +6.0601e-01  1.07e-01  2.13e-05  1.16e-02  4.76e-04  6.93e-05  3.92e-01  
 13  +4.9839e-01  +6.0035e-01  1.02e-01  1.53e-05  8.41e-03  5.06e-04  4.96e-05  4.23e-01  
 14  +4.9821e-01  +5.9681e-01  9.86e-02  1.27e-05  6.97e-03  4.85e-04  4.09e-05  3.09e-01  
 15  +4.9817e-01  +5.9229e-01  9.41e-02  1.06e-05  5.80e-03  3.71e-04  3.39e-05  4.36e-01  
 16  +4.9807e-01  +5.8880e-01  9.07e-02  9.47e-06  5.19e-03  2.70e-04  3.03e-05  3.70e-01  
 17  +4.9746e-01  +5.8417e-01  8.67e-02  7.75e-06  4.25e-03  2.28e-04  2.48e-05  3.82e-01  
 18  +4.9581e-01  +5.7563e-01  7.98e-02  5.73e-06  3.14e-03  2.41e-04  1.84e-05  2.96e-01  
 19  +4.9370e-01  +5.6391e-01  7.02e-02  4.50e-06  2.46e-03  1.51e-04  1.46e-05  4.43e-01  
 20  +4.9360e-01  +5.6344e-01  6.98e-02  4.49e-06  2.46e-03  1.43e-04  1.45e-05  3.86e-02  
 21  +4.9110e-01  +5.5145e-01  6.04e-02  3.51e-06  1.92e-03  1.16e-04  1.15e-05  2.74e-01  
 22  +4.8992e-01  +5.4596e-01  5.60e-02  3.14e-06  1.72e-03  8.73e-05  1.04e-05  2.45e-01  
 23  +4.8760e-01  +5.3545e-01  4.78e-02  2.51e-06  1.38e-03  6.17e-05  8.36e-06  3.12e-01  
 24  +4.8633e-01  +5.2975e-01  4.34e-02  2.19e-06  1.20e-03  4.40e-05  7.33e-06  2.86e-01  
 25  +4.8500e-01  +5.2390e-01  3.89e-02  1.90e-06  1.04e-03  3.29e-05  6.38e-06  2.54e-01  
 26  +4.8285e-01  +5.1451e-01  3.17e-02  1.47e-06  8.02e-04  1.81e-05  4.98e-06  4.44e-01  
 27  +4.8082e-01  +5.0591e-01  2.51e-02  1.12e-06  6.10e-04  1.25e-05  3.83e-06  3.22e-01  
 28  +4.7998e-01  +5.0204e-01  2.21e-02  9.45e-07  5.17e-04  5.43e-06  3.25e-06  5.70e-01  
 29  +4.7781e-01  +4.9302e-01  1.52e-02  6.29e-07  3.44e-04  1.95e-06  2.19e-06  6.50e-01  
 30  +4.7582e-01  +4.8501e-01  9.19e-03  3.70e-07  2.03e-04  9.69e-07  1.31e-06  5.17e-01  
 31  +4.7482e-01  +4.8099e-01  6.17e-03  2.43e-07  1.33e-04  3.41e-07  8.65e-07  6.97e-01  
 32  +4.7436e-01  +4.7920e-01  4.84e-03  1.88e-07  1.03e-04  1.73e-07  6.76e-07  5.66e-01  
 33  +4.7341e-01  +4.7567e-01  2.25e-03  8.59e-08  4.70e-05  7.53e-08  3.14e-07  5.83e-01  
 34  +4.7279e-01  +4.7338e-01  5.89e-04  2.21e-08  1.21e-05  7.28e-09  8.21e-08  9.90e-01  
 35  +4.7257e-01  +4.7258e-01  1.37e-05  5.08e-10  2.78e-07  1.67e-10  1.90e-09  9.81e-01  
 36  +4.7256e-01  +4.7256e-01  1.39e-07  5.15e-12  2.82e-09  1.69e-12  1.93e-11  9.90e-01  
 37  +4.7256e-01  +4.7256e-01  1.39e-09  5.17e-14  2.84e-11  2.26e-14  2.55e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5469434s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:07 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:07 PM: Optimal value: 4.726e-01
(CVXPY) Sep 20 08:12:07 PM: Compilation took 3.110e-01 seconds
(CVXPY) Sep 20 08:12:07 PM: Solver (including time spent in interface) took 1.601e+00 seconds
Iteration: 31, Objective: 0.4726
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:07 PM: Your problem has 25329 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:08 PM: Finished problem compilation (took 3.098e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25329
  constraints   = 50329
  nnz(P)        = 0
  nnz(A)        = 515449
  cones (total) = 1
    : Nonnegative = 1,  numel = 50329

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4259e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3192e-01  +6.1328e+02  6.13e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6005e+02  1.60e+02  1.50e-01  7.86e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7635e+01  1.71e+01  4.72e-02  2.47e+01  5.21e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.1904e+00  6.90e-01  2.07e-03  1.12e+00  2.27e-05  1.92e-01  1.84e-01  
  6  +5.0000e-01  +7.3941e-01  2.39e-01  7.16e-04  3.91e-01  6.92e-06  7.31e-02  7.02e-01  
  7  +5.0000e-01  +6.7482e-01  1.75e-01  5.23e-04  2.85e-01  5.46e-06  4.32e-02  5.18e-01  
  8  +5.0000e-01  +6.6240e-01  1.62e-01  4.85e-04  2.65e-01  6.02e-06  2.31e-02  6.44e-01  
  9  +4.9999e-01  +6.5274e-01  1.53e-01  4.43e-04  2.42e-01  1.04e-05  6.29e-03  9.77e-01  
 10  +4.9956e-01  +6.3603e-01  1.36e-01  7.40e-05  4.06e-02  2.06e-04  2.53e-04  9.63e-01  
 11  +4.9831e-01  +6.2103e-01  1.23e-01  1.91e-05  1.04e-02  6.91e-04  6.21e-05  7.91e-01  
 12  +4.9842e-01  +6.1343e-01  1.15e-01  1.66e-05  9.07e-03  5.68e-04  5.35e-05  3.04e-01  
 13  +4.9787e-01  +6.0854e-01  1.11e-01  1.26e-05  6.93e-03  6.48e-04  4.07e-05  2.84e-01  
 14  +4.9843e-01  +5.9739e-01  9.90e-02  1.11e-05  6.06e-03  2.69e-04  3.53e-05  5.78e-01  
 15  +4.9803e-01  +5.9386e-01  9.58e-02  9.21e-06  5.05e-03  2.64e-04  2.94e-05  2.71e-01  
 16  +4.9748e-01  +5.8066e-01  8.32e-02  7.09e-06  3.89e-03  5.14e-06  2.26e-05  9.90e-01  
 17  +4.9685e-01  +5.7764e-01  8.08e-02  6.35e-06  3.48e-03  5.05e-06  2.03e-05  1.50e-01  
 18  +4.9540e-01  +5.7095e-01  7.55e-02  5.36e-06  2.94e-03  2.53e-06  1.73e-05  5.77e-01  
 19  +4.9394e-01  +5.6412e-01  7.02e-02  4.57e-06  2.51e-03  2.27e-06  1.48e-05  2.15e-01  
 20  +4.9378e-01  +5.6347e-01  6.97e-02  4.55e-06  2.49e-03  2.09e-06  1.47e-05  7.57e-02  
 21  +4.9095e-01  +5.5046e-01  5.95e-02  3.46e-06  1.89e-03  1.71e-06  1.14e-05  3.04e-01  
 22  +4.9009e-01  +5.4670e-01  5.66e-02  3.21e-06  1.76e-03  1.39e-06  1.06e-05  2.13e-01  
 23  +4.8796e-01  +5.3737e-01  4.94e-02  2.64e-06  1.45e-03  1.08e-06  8.79e-06  2.80e-01  
 24  +4.8682e-01  +5.3235e-01  4.55e-02  2.35e-06  1.29e-03  8.45e-07  7.86e-06  2.83e-01  
 25  +4.8428e-01  +5.2141e-01  3.71e-02  1.80e-06  9.85e-04  6.01e-07  6.09e-06  3.71e-01  
 26  +4.8367e-01  +5.1870e-01  3.50e-02  1.65e-06  9.03e-04  4.80e-07  5.59e-06  3.62e-01  
 27  +4.8020e-01  +5.0413e-01  2.39e-02  1.06e-06  5.80e-04  3.01e-07  3.66e-06  4.67e-01  
 28  +4.7990e-01  +5.0277e-01  2.29e-02  9.99e-07  5.47e-04  2.76e-07  3.45e-06  2.35e-01  
 29  +4.7764e-01  +4.9342e-01  1.58e-02  6.63e-07  3.63e-04  1.82e-07  2.32e-06  5.01e-01  
 30  +4.7654e-01  +4.8882e-01  1.23e-02  5.05e-07  2.77e-04  1.39e-07  1.78e-06  4.36e-01  
 31  +4.7410e-01  +4.7899e-01  4.89e-03  1.94e-07  1.06e-04  5.49e-08  6.94e-07  8.13e-01  
 32  +4.7393e-01  +4.7834e-01  4.41e-03  1.72e-07  9.41e-05  4.99e-08  6.19e-07  4.10e-01  
 33  +4.7344e-01  +4.7652e-01  3.08e-03  1.18e-07  6.47e-05  3.50e-08  4.29e-07  4.34e-01  
 34  +4.7325e-01  +4.7577e-01  2.51e-03  9.61e-08  5.26e-05  2.87e-08  3.50e-07  8.65e-01  
 35  +4.7269e-01  +4.7376e-01  1.07e-03  4.00e-08  2.19e-05  1.22e-08  1.48e-07  6.42e-01  
 36  +4.7237e-01  +4.7260e-01  2.29e-04  8.53e-09  4.67e-06  2.64e-09  3.17e-08  9.90e-01  
 37  +4.7228e-01  +4.7228e-01  3.34e-06  1.24e-10  6.77e-08  3.84e-11  4.62e-10  9.86e-01  
 38  +4.7228e-01  +4.7228e-01  3.35e-08  1.24e-12  6.79e-10  3.85e-13  4.63e-12  9.90e-01  
 39  +4.7228e-01  +4.7228e-01  3.38e-10  1.25e-14  6.84e-12  5.46e-15  6.46e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5869092s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:09 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:09 PM: Optimal value: 4.723e-01
(CVXPY) Sep 20 08:12:09 PM: Compilation took 3.098e-01 seconds
(CVXPY) Sep 20 08:12:09 PM: Solver (including time spent in interface) took 1.642e+00 seconds
Iteration: 32, Objective: 0.4723
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:09 PM: Your problem has 25339 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:10 PM: Finished problem compilation (took 3.186e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25339
  constraints   = 50339
  nnz(P)        = 0
  nnz(A)        = 516984
  cones (total) = 1
    : Nonnegative = 1,  numel = 50339

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8081e-01  +5.4262e+03  5.43e+03  4.38e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3192e-01  +6.1332e+02  6.13e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0904e-01  +1.6007e+02  1.60e+02  1.50e-01  7.86e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7642e+01  1.71e+01  4.72e-02  2.47e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.1945e+00  6.95e-01  2.08e-03  1.13e+00  2.27e-05  1.92e-01  1.83e-01  
  6  +5.0000e-01  +7.5124e-01  2.51e-01  7.52e-04  4.10e-01  7.23e-06  7.62e-02  6.90e-01  
  7  +5.0000e-01  +6.8006e-01  1.80e-01  5.39e-04  2.94e-01  5.52e-06  4.46e-02  5.31e-01  
  8  +5.0000e-01  +6.6108e-01  1.61e-01  4.82e-04  2.63e-01  6.00e-06  2.48e-02  5.78e-01  
  9  +4.9999e-01  +6.5950e-01  1.60e-01  4.71e-04  2.57e-01  8.63e-06  9.60e-03  8.42e-01  
 10  +4.9981e-01  +6.3668e-01  1.37e-01  1.70e-04  9.30e-02  9.06e-05  6.62e-04  9.41e-01  
 11  +4.9870e-01  +6.2024e-01  1.22e-01  2.65e-05  1.45e-02  5.70e-04  8.73e-05  8.96e-01  
 12  +4.9901e-01  +6.0890e-01  1.10e-01  2.17e-05  1.19e-02  3.73e-04  7.07e-05  4.95e-01  
 13  +4.9867e-01  +6.0420e-01  1.06e-01  1.57e-05  8.60e-03  4.25e-04  5.07e-05  3.84e-01  
 14  +4.9871e-01  +5.9649e-01  9.78e-02  1.23e-05  6.74e-03  2.71e-04  3.94e-05  5.91e-01  
 15  +4.9836e-01  +5.8996e-01  9.16e-02  8.85e-06  4.85e-03  1.78e-04  2.82e-05  6.88e-01  
 16  +4.9826e-01  +5.8889e-01  9.06e-02  8.65e-06  4.74e-03  1.46e-04  2.76e-05  1.83e-01  
 17  +4.9604e-01  +5.7702e-01  8.10e-02  5.23e-06  2.86e-03  1.68e-04  1.67e-05  4.89e-01  
 18  +4.9472e-01  +5.7031e-01  7.56e-02  4.67e-06  2.56e-03  1.43e-04  1.50e-05  1.77e-01  
 19  +4.9331e-01  +5.6325e-01  6.99e-02  4.20e-06  2.30e-03  1.05e-04  1.36e-05  2.46e-01  
 20  +4.9316e-01  +5.6253e-01  6.94e-02  4.18e-06  2.29e-03  9.77e-05  1.36e-05  4.99e-02  
 21  +4.9112e-01  +5.5302e-01  6.19e-02  3.52e-06  1.93e-03  7.83e-05  1.15e-05  2.27e-01  
 22  +4.8960e-01  +5.4583e-01  5.62e-02  3.10e-06  1.70e-03  3.65e-05  1.03e-05  4.55e-01  
 23  +4.8747e-01  +5.3628e-01  4.88e-02  2.54e-06  1.39e-03  1.87e-05  8.50e-06  4.55e-01  
 24  +4.8675e-01  +5.3308e-01  4.63e-02  2.34e-06  1.28e-03  9.75e-06  7.84e-06  4.38e-01  
 25  +4.8418e-01  +5.2206e-01  3.79e-02  1.81e-06  9.93e-04  7.22e-06  6.16e-06  2.78e-01  
 26  +4.8308e-01  +5.1737e-01  3.43e-02  1.60e-06  8.75e-04  5.35e-06  5.45e-06  2.63e-01  
 27  +4.8012e-01  +5.0488e-01  2.48e-02  1.09e-06  5.98e-04  3.11e-06  3.79e-06  4.31e-01  
 28  +4.7937e-01  +5.0139e-01  2.20e-02  9.37e-07  5.13e-04  1.46e-06  3.25e-06  5.67e-01  
 29  +4.7615e-01  +4.8811e-01  1.20e-02  4.86e-07  2.66e-04  1.08e-07  1.72e-06  9.90e-01  
 30  +4.7415e-01  +4.8011e-01  5.96e-03  2.38e-07  1.30e-04  5.90e-08  8.57e-07  7.06e-01  
 31  +4.7366e-01  +4.7814e-01  4.48e-03  1.77e-07  9.69e-05  4.79e-08  6.42e-07  6.95e-01  
 32  +4.7284e-01  +4.7500e-01  2.16e-03  8.45e-08  4.63e-05  2.35e-08  3.11e-07  6.82e-01  
 33  +4.7227e-01  +4.7290e-01  6.26e-04  2.41e-08  1.32e-05  6.95e-09  9.00e-08  8.79e-01  
 34  +4.7205e-01  +4.7207e-01  2.30e-05  8.85e-10  4.84e-07  2.56e-10  3.32e-09  9.66e-01  
 35  +4.7204e-01  +4.7204e-01  2.34e-07  8.97e-12  4.91e-09  2.60e-12  3.37e-11  9.90e-01  
 36  +4.7204e-01  +4.7204e-01  2.35e-09  9.01e-14  4.93e-11  3.12e-14  4.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5088817s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:11 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:11 PM: Optimal value: 4.720e-01
(CVXPY) Sep 20 08:12:11 PM: Compilation took 3.186e-01 seconds
(CVXPY) Sep 20 08:12:11 PM: Solver (including time spent in interface) took 1.567e+00 seconds
Iteration: 33, Objective: 0.4720
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:12 PM: Your problem has 25349 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:12 PM: Finished problem compilation (took 3.258e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25349
  constraints   = 50349
  nnz(P)        = 0
  nnz(A)        = 519214
  cones (total) = 1
    : Nonnegative = 1,  numel = 50349

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8081e-01  +5.4262e+03  5.43e+03  4.38e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3192e-01  +6.1330e+02  6.13e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0904e-01  +1.6007e+02  1.60e+02  1.50e-01  7.85e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7644e+01  1.71e+01  4.72e-02  2.47e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.1919e+00  6.92e-01  2.07e-03  1.13e+00  2.27e-05  1.92e-01  1.84e-01  
  6  +5.0000e-01  +7.4469e-01  2.45e-01  7.32e-04  3.99e-01  7.08e-06  7.45e-02  6.96e-01  
  7  +5.0000e-01  +6.8497e-01  1.85e-01  5.53e-04  3.02e-01  5.59e-06  4.57e-02  5.15e-01  
  8  +5.0000e-01  +6.6709e-01  1.67e-01  5.00e-04  2.73e-01  5.90e-06  2.57e-02  5.93e-01  
  9  +5.0000e-01  +6.6210e-01  1.62e-01  4.79e-04  2.61e-01  8.15e-06  9.85e-03  8.51e-01  
 10  +4.9984e-01  +6.3968e-01  1.40e-01  1.88e-04  1.03e-01  7.78e-05  7.47e-04  9.34e-01  
 11  +4.9854e-01  +6.2355e-01  1.25e-01  2.34e-05  1.28e-02  6.41e-04  7.69e-05  9.14e-01  
 12  +4.9828e-01  +6.1559e-01  1.17e-01  1.76e-05  9.65e-03  6.54e-04  5.74e-05  3.71e-01  
 13  +4.9815e-01  +6.0896e-01  1.11e-01  1.44e-05  7.90e-03  5.94e-04  4.67e-05  3.32e-01  
 14  +4.9813e-01  +6.0132e-01  1.03e-01  1.18e-05  6.47e-03  4.49e-04  3.80e-05  4.30e-01  
 15  +4.9797e-01  +5.9508e-01  9.71e-02  9.68e-06  5.30e-03  3.32e-04  3.11e-05  4.52e-01  
 16  +4.9790e-01  +5.9333e-01  9.54e-02  9.39e-06  5.14e-03  2.87e-04  3.01e-05  1.45e-01  
 17  +4.9714e-01  +5.8721e-01  9.01e-02  7.63e-06  4.18e-03  2.43e-04  2.45e-05  3.69e-01  
 18  +4.9423e-01  +5.7112e-01  7.69e-02  4.82e-06  2.64e-03  2.37e-04  1.56e-05  4.52e-01  
 19  +4.9373e-01  +5.6786e-01  7.41e-02  4.64e-06  2.54e-03  1.79e-04  1.50e-05  1.99e-01  
 20  +4.9260e-01  +5.6159e-01  6.90e-02  4.20e-06  2.30e-03  1.07e-04  1.37e-05  3.50e-01  
 21  +4.9076e-01  +5.5278e-01  6.20e-02  3.57e-06  1.95e-03  8.37e-05  1.17e-05  2.44e-01  
 22  +4.8894e-01  +5.4407e-01  5.51e-02  3.01e-06  1.65e-03  5.46e-05  1.00e-05  3.36e-01  
 23  +4.8757e-01  +5.3781e-01  5.02e-02  2.64e-06  1.44e-03  4.27e-05  8.81e-06  2.25e-01  
 24  +4.8600e-01  +5.3072e-01  4.47e-02  2.24e-06  1.23e-03  2.78e-05  7.53e-06  3.43e-01  
 25  +4.8435e-01  +5.2336e-01  3.90e-02  1.86e-06  1.02e-03  1.58e-05  6.32e-06  4.18e-01  
 26  +4.8253e-01  +5.1513e-01  3.26e-02  1.47e-06  8.04e-04  2.56e-06  5.01e-06  7.88e-01  
 27  +4.8001e-01  +5.0468e-01  2.47e-02  1.07e-06  5.85e-04  1.59e-06  3.70e-06  3.92e-01  
 28  +4.7817e-01  +4.9692e-01  1.88e-02  7.87e-07  4.31e-04  8.09e-07  2.75e-06  5.35e-01  
 29  +4.7509e-01  +4.8430e-01  9.21e-03  3.73e-07  2.04e-04  2.33e-07  1.33e-06  7.69e-01  
 30  +4.7460e-01  +4.8227e-01  7.67e-03  3.09e-07  1.69e-04  1.71e-07  1.11e-06  3.47e-01  
 31  +4.7443e-01  +4.8158e-01  7.15e-03  2.88e-07  1.57e-04  1.54e-07  1.03e-06  1.33e-01  
 32  +4.7337e-01  +4.7731e-01  3.94e-03  1.57e-07  8.61e-05  5.60e-08  5.69e-07  8.44e-01  
 33  +4.7306e-01  +4.7607e-01  3.01e-03  1.20e-07  6.57e-05  3.88e-08  4.36e-07  5.84e-01  
 34  +4.7257e-01  +4.7421e-01  1.64e-03  6.53e-08  3.57e-05  1.95e-08  2.39e-07  7.83e-01  
 35  +4.7254e-01  +4.7408e-01  1.54e-03  6.12e-08  3.35e-05  1.80e-08  2.24e-07  2.98e-01  
 36  +4.7212e-01  +4.7251e-01  3.87e-04  1.54e-08  8.40e-06  4.42e-09  5.67e-08  8.40e-01  
 37  +4.7203e-01  +4.7217e-01  1.40e-04  5.54e-09  3.03e-06  1.59e-09  2.05e-08  6.70e-01  
 38  +4.7201e-01  +4.7207e-01  6.83e-05  2.71e-09  1.48e-06  7.53e-10  1.00e-08  8.99e-01  
 39  +4.7198e-01  +4.7198e-01  8.69e-07  3.44e-11  1.88e-08  9.56e-12  1.28e-10  9.88e-01  
 40  +4.7198e-01  +4.7198e-01  8.70e-09  3.45e-13  1.89e-10  9.58e-14  1.28e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.669387s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:14 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:14 PM: Optimal value: 4.720e-01
(CVXPY) Sep 20 08:12:14 PM: Compilation took 3.258e-01 seconds
(CVXPY) Sep 20 08:12:14 PM: Solver (including time spent in interface) took 1.722e+00 seconds
Iteration: 34, Objective: 0.4720
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:14 PM: Your problem has 25359 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:14 PM: Finished problem compilation (took 3.488e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25359
  constraints   = 50359
  nnz(P)        = 0
  nnz(A)        = 522090
  cones (total) = 1
    : Nonnegative = 1,  numel = 50359

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8081e-01  +5.4263e+03  5.43e+03  4.38e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3191e-01  +6.1323e+02  6.13e+02  1.78e-01  9.23e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0903e-01  +1.6006e+02  1.60e+02  1.50e-01  7.85e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7647e+01  1.71e+01  4.72e-02  2.47e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.1893e+00  6.89e-01  2.06e-03  1.12e+00  2.27e-05  1.92e-01  1.85e-01  
  6  +5.0000e-01  +7.2164e-01  2.22e-01  6.63e-04  3.62e-01  6.29e-06  6.77e-02  7.39e-01  
  7  +5.0000e-01  +6.7917e-01  1.79e-01  5.36e-04  2.93e-01  5.46e-06  4.33e-02  4.76e-01  
  8  +5.0000e-01  +6.6158e-01  1.62e-01  4.83e-04  2.63e-01  6.25e-06  2.19e-02  6.53e-01  
  9  +4.9998e-01  +6.4797e-01  1.48e-01  4.27e-04  2.33e-01  1.41e-05  5.68e-03  8.73e-01  
 10  +4.9913e-01  +6.2132e-01  1.22e-01  4.39e-05  2.41e-02  4.00e-04  1.48e-04  9.84e-01  
 11  +4.9853e-01  +6.1341e-01  1.15e-01  2.42e-05  1.33e-02  6.01e-04  8.00e-05  5.42e-01  
 12  +4.9832e-01  +6.0786e-01  1.10e-01  1.86e-05  1.02e-02  6.07e-04  6.09e-05  3.73e-01  
 13  +4.9836e-01  +5.9944e-01  1.01e-01  1.39e-05  7.64e-03  4.37e-04  4.51e-05  5.80e-01  
 14  +4.9775e-01  +5.9245e-01  9.47e-02  9.52e-06  5.22e-03  4.10e-04  3.06e-05  5.54e-01  
 15  +4.9772e-01  +5.9183e-01  9.41e-02  9.47e-06  5.19e-03  3.80e-04  3.05e-05  6.55e-02  
 16  +4.9544e-01  +5.7812e-01  8.27e-02  5.56e-06  3.04e-03  3.75e-04  1.79e-05  6.00e-01  
 17  +4.9384e-01  +5.6945e-01  7.56e-02  4.75e-06  2.60e-03  3.10e-04  1.54e-05  2.31e-01  
 18  +4.9343e-01  +5.6698e-01  7.36e-02  4.59e-06  2.51e-03  2.60e-04  1.49e-05  1.37e-01  
 19  +4.9328e-01  +5.6611e-01  7.28e-02  4.55e-06  2.49e-03  2.35e-04  1.48e-05  7.41e-02  
 20  +4.9118e-01  +5.5588e-01  6.47e-02  3.76e-06  2.06e-03  1.96e-04  1.24e-05  2.23e-01  
 21  +4.8954e-01  +5.4778e-01  5.82e-02  3.25e-06  1.78e-03  1.20e-04  1.08e-05  3.56e-01  
 22  +4.8815e-01  +5.4144e-01  5.33e-02  2.86e-06  1.56e-03  9.60e-05  9.52e-06  2.09e-01  
 23  +4.8690e-01  +5.3572e-01  4.88e-02  2.51e-06  1.38e-03  7.25e-05  8.43e-06  2.50e-01  
 24  +4.8617e-01  +5.3233e-01  4.62e-02  2.31e-06  1.27e-03  4.92e-05  7.78e-06  3.01e-01  
 25  +4.8406e-01  +5.2313e-01  3.91e-02  1.87e-06  1.02e-03  3.23e-05  6.34e-06  3.41e-01  
 26  +4.8128e-01  +5.1115e-01  2.99e-02  1.35e-06  7.40e-04  1.88e-05  4.65e-06  4.18e-01  
 27  +4.7940e-01  +5.0320e-01  2.38e-02  1.04e-06  5.69e-04  1.31e-05  3.61e-06  3.11e-01  
 28  +4.7897e-01  +5.0121e-01  2.22e-02  9.54e-07  5.22e-04  9.02e-06  3.32e-06  3.20e-01  
 29  +4.7686e-01  +4.9247e-01  1.56e-02  6.50e-07  3.56e-04  5.01e-06  2.29e-06  4.49e-01  
 30  +4.7506e-01  +4.8501e-01  9.95e-03  4.03e-07  2.20e-04  1.84e-06  1.44e-06  6.45e-01  
 31  +4.7454e-01  +4.8284e-01  8.30e-03  3.33e-07  1.82e-04  1.14e-06  1.19e-06  4.02e-01  
 32  +4.7354e-01  +4.7890e-01  5.37e-03  2.13e-07  1.17e-04  6.06e-07  7.71e-07  4.77e-01  
 33  +4.7341e-01  +4.7832e-01  4.90e-03  1.94e-07  1.06e-04  2.98e-07  7.01e-07  5.63e-01  
 34  +4.7284e-01  +4.7611e-01  3.27e-03  1.29e-07  7.04e-05  1.14e-07  4.68e-07  6.84e-01  
 35  +4.7234e-01  +4.7422e-01  1.88e-03  7.35e-08  4.02e-05  4.74e-08  2.70e-07  6.64e-01  
 36  +4.7184e-01  +4.7235e-01  5.16e-04  2.00e-08  1.10e-05  9.26e-09  7.42e-08  8.67e-01  
 37  +4.7166e-01  +4.7171e-01  4.93e-05  1.90e-09  1.04e-06  8.16e-10  7.09e-09  9.24e-01  
 38  +4.7164e-01  +4.7164e-01  5.36e-07  2.07e-11  1.13e-08  8.88e-12  7.71e-11  9.89e-01  
 39  +4.7164e-01  +4.7164e-01  5.37e-09  2.07e-13  1.13e-10  8.89e-14  7.72e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6609769s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:16 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:16 PM: Optimal value: 4.716e-01
(CVXPY) Sep 20 08:12:16 PM: Compilation took 3.488e-01 seconds
(CVXPY) Sep 20 08:12:16 PM: Solver (including time spent in interface) took 1.715e+00 seconds
Iteration: 35, Objective: 0.4716
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:16 PM: Your problem has 25362 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:17 PM: Finished problem compilation (took 3.323e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25362
  constraints   = 50362
  nnz(P)        = 0
  nnz(A)        = 522946
  cones (total) = 1
    : Nonnegative = 1,  numel = 50362

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8081e-01  +5.4263e+03  5.43e+03  4.38e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3191e-01  +6.1321e+02  6.13e+02  1.78e-01  9.23e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0903e-01  +1.6005e+02  1.60e+02  1.50e-01  7.85e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7647e+01  1.71e+01  4.72e-02  2.47e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0000e-01  +1.1647e+00  6.65e-01  1.99e-03  1.08e+00  2.28e-05  1.92e-01  1.92e-01  
  6  +5.0000e-01  +7.2031e-01  2.20e-01  6.59e-04  3.60e-01  6.56e-06  6.79e-02  7.40e-01  
  7  +5.0000e-01  +6.7280e-01  1.73e-01  5.17e-04  2.82e-01  5.68e-06  4.18e-02  4.83e-01  
  8  +5.0000e-01  +6.6283e-01  1.63e-01  4.87e-04  2.65e-01  6.70e-06  2.17e-02  6.48e-01  
  9  +4.9998e-01  +6.5015e-01  1.50e-01  4.36e-04  2.38e-01  1.41e-05  6.30e-03  8.30e-01  
 10  +4.9948e-01  +6.3192e-01  1.32e-01  8.26e-05  4.52e-02  2.41e-04  2.89e-04  9.65e-01  
 11  +4.9839e-01  +6.1491e-01  1.17e-01  2.39e-05  1.31e-02  6.72e-04  7.91e-05  8.02e-01  
 12  +4.9798e-01  +6.0907e-01  1.11e-01  1.75e-05  9.57e-03  7.41e-04  5.72e-05  3.80e-01  
 13  +4.9832e-01  +6.0390e-01  1.06e-01  1.58e-05  8.66e-03  5.22e-04  5.13e-05  3.67e-01  
 14  +4.9731e-01  +5.9530e-01  9.80e-02  9.62e-06  5.27e-03  6.18e-04  3.11e-05  5.35e-01  
 15  +4.9732e-01  +5.9460e-01  9.73e-02  9.58e-06  5.25e-03  5.78e-04  3.09e-05  5.42e-02  
 16  +4.9542e-01  +5.8207e-01  8.66e-02  6.18e-06  3.38e-03  5.44e-04  2.00e-05  5.26e-01  
 17  +4.9372e-01  +5.7182e-01  7.81e-02  5.08e-06  2.79e-03  4.18e-04  1.66e-05  3.11e-01  
 18  +4.9222e-01  +5.6396e-01  7.17e-02  4.39e-06  2.41e-03  3.62e-04  1.44e-05  1.89e-01  
 19  +4.9202e-01  +5.6200e-01  7.00e-02  4.28e-06  2.35e-03  2.71e-04  1.41e-05  2.02e-01  
 20  +4.9014e-01  +5.5269e-01  6.25e-02  3.59e-06  1.97e-03  2.10e-04  1.19e-05  2.56e-01  
 21  +4.8860e-01  +5.4473e-01  5.61e-02  3.07e-06  1.68e-03  1.25e-04  1.03e-05  3.78e-01  
 22  +4.8709e-01  +5.3774e-01  5.06e-02  2.65e-06  1.45e-03  9.49e-05  8.91e-06  2.48e-01  
 23  +4.8566e-01  +5.3114e-01  4.55e-02  2.28e-06  1.25e-03  6.14e-05  7.71e-06  3.42e-01  
 24  +4.8450e-01  +5.2580e-01  4.13e-02  2.00e-06  1.10e-03  3.90e-05  6.81e-06  3.47e-01  
 25  +4.8211e-01  +5.1552e-01  3.34e-02  1.55e-06  8.47e-04  2.73e-05  5.32e-06  3.09e-01  
 26  +4.8020e-01  +5.0704e-01  2.68e-02  1.18e-06  6.47e-04  1.19e-05  4.09e-06  5.57e-01  
 27  +4.7848e-01  +4.9931e-01  2.08e-02  8.71e-07  4.77e-04  1.25e-07  3.04e-06  9.74e-01  
 28  +4.7633e-01  +4.9053e-01  1.42e-02  5.81e-07  3.18e-04  1.36e-07  2.05e-06  8.20e-01  
 29  +4.7421e-01  +4.8211e-01  7.90e-03  3.19e-07  1.75e-04  7.71e-08  1.15e-06  5.36e-01  
 30  +4.7397e-01  +4.8108e-01  7.11e-03  2.86e-07  1.57e-04  7.23e-08  1.03e-06  3.64e-01  
 31  +4.7275e-01  +4.7621e-01  3.46e-03  1.38e-07  7.57e-05  3.76e-08  5.03e-07  8.60e-01  
 32  +4.7249e-01  +4.7520e-01  2.71e-03  1.08e-07  5.92e-05  2.95e-08  3.94e-07  3.45e-01  
 33  +4.7218e-01  +4.7398e-01  1.80e-03  7.16e-08  3.92e-05  2.00e-08  2.62e-07  9.47e-01  
 34  +4.7176e-01  +4.7241e-01  6.46e-04  2.56e-08  1.40e-05  7.20e-09  9.42e-08  7.38e-01  
 35  +4.7159e-01  +4.7174e-01  1.56e-04  6.19e-09  3.39e-06  1.71e-09  2.28e-08  9.19e-01  
 36  +4.7153e-01  +4.7153e-01  3.38e-06  1.34e-10  7.34e-08  3.72e-11  4.95e-10  9.80e-01  
 37  +4.7153e-01  +4.7153e-01  3.46e-08  1.37e-12  7.50e-10  3.80e-13  5.05e-12  9.90e-01  
 38  +4.7153e-01  +4.7153e-01  3.52e-10  1.40e-14  7.64e-12  3.96e-15  5.27e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.608795s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:18 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:18 PM: Optimal value: 4.715e-01
(CVXPY) Sep 20 08:12:18 PM: Compilation took 3.323e-01 seconds
(CVXPY) Sep 20 08:12:18 PM: Solver (including time spent in interface) took 1.662e+00 seconds
Iteration: 36, Objective: 0.4715
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:18 PM: Your problem has 25372 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:19 PM: Finished problem compilation (took 3.341e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25372
  constraints   = 50372
  nnz(P)        = 0
  nnz(A)        = 525078
  cones (total) = 1
    : Nonnegative = 1,  numel = 50372

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8081e-01  +5.4262e+03  5.43e+03  4.38e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3191e-01  +6.1322e+02  6.13e+02  1.78e-01  9.23e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0903e-01  +1.6005e+02  1.60e+02  1.50e-01  7.85e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7644e+01  1.71e+01  4.72e-02  2.47e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0000e-01  +1.1654e+00  6.65e-01  1.99e-03  1.08e+00  2.28e-05  1.92e-01  1.92e-01  
  6  +5.0000e-01  +7.3424e-01  2.34e-01  7.01e-04  3.82e-01  7.18e-06  7.23e-02  7.00e-01  
  7  +5.0000e-01  +6.7402e-01  1.74e-01  5.21e-04  2.84e-01  5.95e-06  4.36e-02  4.74e-01  
  8  +5.0000e-01  +6.5592e-01  1.56e-01  4.66e-04  2.54e-01  7.06e-06  2.22e-02  6.13e-01  
  9  +4.9998e-01  +6.5503e-01  1.55e-01  4.53e-04  2.47e-01  1.31e-05  7.17e-03  8.75e-01  
 10  +4.9952e-01  +6.2897e-01  1.29e-01  8.67e-05  4.75e-02  2.23e-04  3.06e-04  9.73e-01  
 11  +4.9808e-01  +6.1851e-01  1.20e-01  2.23e-05  1.22e-02  8.11e-04  7.36e-05  7.80e-01  
 12  +4.9835e-01  +6.1148e-01  1.13e-01  1.93e-05  1.05e-02  6.24e-04  6.30e-05  3.65e-01  
 13  +4.9855e-01  +6.0075e-01  1.02e-01  1.44e-05  7.89e-03  3.83e-04  4.65e-05  6.42e-01  
 14  +4.9796e-01  +5.9456e-01  9.66e-02  9.88e-06  5.41e-03  3.81e-04  3.18e-05  5.24e-01  
 15  +4.9793e-01  +5.9345e-01  9.55e-02  9.73e-06  5.33e-03  3.31e-04  3.13e-05  1.27e-01  
 16  +4.9688e-01  +5.8754e-01  9.07e-02  7.50e-06  4.11e-03  3.52e-04  2.42e-05  2.87e-01  
 17  +4.9639e-01  +5.8343e-01  8.70e-02  6.88e-06  3.77e-03  2.54e-04  2.22e-05  3.06e-01  
 18  +4.9361e-01  +5.6878e-01  7.52e-02  4.78e-06  2.62e-03  2.19e-04  1.56e-05  4.13e-01  
 19  +4.9272e-01  +5.6431e-01  7.16e-02  4.41e-06  2.42e-03  1.90e-04  1.44e-05  1.46e-01  
 20  +4.9211e-01  +5.6070e-01  6.86e-02  4.21e-06  2.31e-03  1.13e-04  1.38e-05  3.26e-01  
 21  +4.9016e-01  +5.5153e-01  6.14e-02  3.53e-06  1.94e-03  9.11e-05  1.17e-05  2.32e-01  
 22  +4.8888e-01  +5.4534e-01  5.65e-02  3.12e-06  1.71e-03  5.23e-05  1.04e-05  3.90e-01  
 23  +4.8575e-01  +5.3132e-01  4.56e-02  2.30e-06  1.26e-03  2.87e-05  7.79e-06  4.58e-01  
 24  +4.8555e-01  +5.3041e-01  4.49e-02  2.24e-06  1.23e-03  2.34e-05  7.59e-06  1.70e-01  
 25  +4.8303e-01  +5.1960e-01  3.66e-02  1.73e-06  9.46e-04  1.36e-05  5.92e-06  4.13e-01  
 26  +4.7959e-01  +5.0496e-01  2.54e-02  1.13e-06  6.17e-04  6.62e-06  3.93e-06  5.11e-01  
 27  +4.7856e-01  +5.0050e-01  2.19e-02  9.49e-07  5.19e-04  4.26e-06  3.33e-06  3.70e-01  
 28  +4.7628e-01  +4.9105e-01  1.48e-02  6.20e-07  3.39e-04  2.32e-06  2.20e-06  4.61e-01  
 29  +4.7568e-01  +4.8829e-01  1.26e-02  5.18e-07  2.83e-04  1.03e-06  1.84e-06  5.98e-01  
 30  +4.7529e-01  +4.8668e-01  1.14e-02  4.65e-07  2.55e-04  7.32e-07  1.66e-06  3.23e-01  
 31  +4.7312e-01  +4.7805e-01  4.93e-03  1.98e-07  1.08e-04  1.39e-07  7.19e-07  8.61e-01  
 32  +4.7303e-01  +4.7769e-01  4.66e-03  1.87e-07  1.02e-04  1.25e-07  6.79e-07  1.31e-01  
 33  +4.7225e-01  +4.7466e-01  2.41e-03  9.61e-08  5.26e-05  3.20e-08  3.53e-07  9.33e-01  
 34  +4.7178e-01  +4.7289e-01  1.11e-03  4.40e-08  2.41e-05  1.43e-08  1.63e-07  6.10e-01  
 35  +4.7176e-01  +4.7281e-01  1.05e-03  4.15e-08  2.27e-05  1.33e-08  1.54e-07  1.65e-01  
 36  +4.7153e-01  +4.7195e-01  4.24e-04  1.67e-08  9.12e-06  5.18e-09  6.22e-08  7.22e-01  
 37  +4.7139e-01  +4.7146e-01  6.32e-05  2.47e-09  1.35e-06  7.29e-10  9.26e-09  9.20e-01  
 38  +4.7137e-01  +4.7137e-01  9.06e-07  3.54e-11  1.94e-08  1.04e-11  1.33e-10  9.86e-01  
 39  +4.7137e-01  +4.7137e-01  9.12e-09  3.57e-13  1.95e-10  1.05e-13  1.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7123337s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:21 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:21 PM: Optimal value: 4.714e-01
(CVXPY) Sep 20 08:12:21 PM: Compilation took 3.341e-01 seconds
(CVXPY) Sep 20 08:12:21 PM: Solver (including time spent in interface) took 1.765e+00 seconds
Iteration: 37, Objective: 0.4714
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:21 PM: Your problem has 25378 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:21 PM: Finished problem compilation (took 3.449e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25378
  constraints   = 50378
  nnz(P)        = 0
  nnz(A)        = 526444
  cones (total) = 1
    : Nonnegative = 1,  numel = 50378

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8081e-01  +5.4261e+03  5.43e+03  4.38e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3191e-01  +6.1319e+02  6.13e+02  1.78e-01  9.23e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0903e-01  +1.6004e+02  1.60e+02  1.50e-01  7.85e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7643e+01  1.71e+01  4.72e-02  2.47e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0000e-01  +1.1666e+00  6.67e-01  2.00e-03  1.09e+00  2.28e-05  1.92e-01  1.91e-01  
  6  +5.0000e-01  +7.3587e-01  2.36e-01  7.06e-04  3.85e-01  7.25e-06  7.28e-02  6.94e-01  
  7  +5.0000e-01  +6.7581e-01  1.76e-01  5.26e-04  2.87e-01  6.00e-06  4.42e-02  4.72e-01  
  8  +5.0000e-01  +6.5859e-01  1.59e-01  4.74e-04  2.59e-01  7.01e-06  2.29e-02  6.12e-01  
  9  +4.9998e-01  +6.5556e-01  1.56e-01  4.55e-04  2.48e-01  1.29e-05  7.40e-03  8.64e-01  
 10  +4.9950e-01  +6.2625e-01  1.27e-01  8.30e-05  4.54e-02  2.31e-04  2.92e-04  9.77e-01  
 11  +4.9810e-01  +6.1612e-01  1.18e-01  2.22e-05  1.21e-02  8.01e-04  7.33e-05  7.72e-01  
 12  +4.9822e-01  +6.1024e-01  1.12e-01  1.88e-05  1.03e-02  6.73e-04  6.15e-05  3.51e-01  
 13  +4.9845e-01  +6.0025e-01  1.02e-01  1.42e-05  7.77e-03  4.14e-04  4.58e-05  6.35e-01  
 14  +4.9796e-01  +5.9459e-01  9.66e-02  1.01e-05  5.55e-03  3.88e-04  3.26e-05  5.14e-01  
 15  +4.9794e-01  +5.9340e-01  9.55e-02  9.97e-06  5.46e-03  3.31e-04  3.20e-05  1.43e-01  
 16  +4.9573e-01  +5.8090e-01  8.52e-02  5.87e-06  3.22e-03  3.76e-04  1.89e-05  5.28e-01  
 17  +4.9445e-01  +5.7352e-01  7.91e-02  5.20e-06  2.85e-03  2.87e-04  1.69e-05  2.57e-01  
 18  +4.9362e-01  +5.6927e-01  7.56e-02  4.82e-06  2.64e-03  2.57e-04  1.57e-05  1.27e-01  
 19  +4.9264e-01  +5.6357e-01  7.09e-02  4.44e-06  2.43e-03  1.47e-04  1.46e-05  3.60e-01  
 20  +4.8944e-01  +5.4840e-01  5.90e-02  3.31e-06  1.81e-03  1.08e-04  1.10e-05  3.36e-01  
 21  +4.8904e-01  +5.4635e-01  5.73e-02  3.17e-06  1.74e-03  8.15e-05  1.06e-05  2.20e-01  
 22  +4.8590e-01  +5.3228e-01  4.64e-02  2.36e-06  1.29e-03  5.21e-05  7.95e-06  3.85e-01  
 23  +4.8486e-01  +5.2771e-01  4.28e-02  2.10e-06  1.15e-03  3.49e-05  7.11e-06  3.22e-01  
 24  +4.8204e-01  +5.1559e-01  3.36e-02  1.55e-06  8.48e-04  1.31e-05  5.33e-06  5.85e-01  
 25  +4.7914e-01  +5.0309e-01  2.40e-02  1.04e-06  5.68e-04  3.54e-06  3.62e-06  7.18e-01  
 26  +4.7773e-01  +4.9729e-01  1.96e-02  8.32e-07  4.55e-04  2.73e-06  2.92e-06  2.34e-01  
 27  +4.7622e-01  +4.9058e-01  1.44e-02  5.86e-07  3.21e-04  2.29e-07  2.07e-06  9.66e-01  
 28  +4.7542e-01  +4.8740e-01  1.20e-02  4.85e-07  2.65e-04  1.84e-07  1.72e-06  2.80e-01  
 29  +4.7535e-01  +4.8712e-01  1.18e-02  4.77e-07  2.61e-04  1.73e-07  1.70e-06  1.64e-01  
 30  +4.7526e-01  +4.8672e-01  1.15e-02  4.65e-07  2.54e-04  1.61e-07  1.65e-06  2.10e-01  
 31  +4.7414e-01  +4.8234e-01  8.20e-03  3.30e-07  1.81e-04  1.12e-07  1.19e-06  3.71e-01  
 32  +4.7397e-01  +4.8160e-01  7.64e-03  3.06e-07  1.68e-04  9.81e-08  1.10e-06  3.97e-01  
 33  +4.7314e-01  +4.7835e-01  5.21e-03  2.08e-07  1.14e-04  6.21e-08  7.51e-07  7.35e-01  
 34  +4.7254e-01  +4.7603e-01  3.49e-03  1.39e-07  7.62e-05  4.04e-08  5.07e-07  6.56e-01  
 35  +4.7192e-01  +4.7369e-01  1.77e-03  7.01e-08  3.84e-05  2.01e-08  2.57e-07  7.26e-01  
 36  +4.7183e-01  +4.7333e-01  1.50e-03  5.94e-08  3.25e-05  1.70e-08  2.18e-07  3.12e-01  
 37  +4.7151e-01  +4.7215e-01  6.36e-04  2.51e-08  1.37e-05  7.19e-09  9.27e-08  6.96e-01  
 38  +4.7144e-01  +4.7186e-01  4.26e-04  1.68e-08  9.19e-06  4.77e-09  6.20e-08  5.48e-01  
 39  +4.7133e-01  +4.7145e-01  1.29e-04  5.07e-09  2.78e-06  1.42e-09  1.88e-08  9.88e-01  
 40  +4.7128e-01  +4.7129e-01  8.66e-06  3.40e-10  1.86e-07  9.49e-11  1.26e-09  9.36e-01  
 41  +4.7128e-01  +4.7128e-01  9.35e-08  3.68e-12  2.01e-09  1.03e-12  1.37e-11  9.89e-01  
 42  +4.7128e-01  +4.7128e-01  9.36e-10  3.68e-14  2.01e-11  1.03e-14  1.37e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8552818s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:23 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:23 PM: Optimal value: 4.713e-01
(CVXPY) Sep 20 08:12:23 PM: Compilation took 3.449e-01 seconds
(CVXPY) Sep 20 08:12:23 PM: Solver (including time spent in interface) took 1.911e+00 seconds
Iteration: 38, Objective: 0.4713
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:23 PM: Your problem has 25388 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:24 PM: Finished problem compilation (took 3.645e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25388
  constraints   = 50388
  nnz(P)        = 0
  nnz(A)        = 528625
  cones (total) = 1
    : Nonnegative = 1,  numel = 50388

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8082e-01  +5.4260e+03  5.43e+03  4.38e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3191e-01  +6.1317e+02  6.13e+02  1.78e-01  9.23e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0903e-01  +1.6002e+02  1.60e+02  1.50e-01  7.84e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7640e+01  1.71e+01  4.72e-02  2.47e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0000e-01  +1.1518e+00  6.52e-01  1.95e-03  1.06e+00  2.28e-05  1.92e-01  1.96e-01  
  6  +5.0000e-01  +7.3509e-01  2.35e-01  7.04e-04  3.84e-01  7.49e-06  7.32e-02  6.89e-01  
  7  +5.0000e-01  +6.7526e-01  1.75e-01  5.25e-04  2.86e-01  6.21e-06  4.40e-02  4.81e-01  
  8  +5.0000e-01  +6.5739e-01  1.57e-01  4.71e-04  2.57e-01  7.36e-06  2.29e-02  5.95e-01  
  9  +4.9996e-01  +6.4688e-01  1.47e-01  4.11e-04  2.24e-01  2.23e-05  4.20e-03  9.82e-01  
 10  +4.9903e-01  +6.3683e-01  1.38e-01  5.38e-05  2.94e-02  4.47e-04  1.83e-04  9.59e-01  
 11  +4.9864e-01  +6.1762e-01  1.19e-01  2.79e-05  1.53e-02  5.43e-04  9.25e-05  6.76e-01  
 12  +4.9820e-01  +6.1291e-01  1.15e-01  2.02e-05  1.11e-02  6.50e-04  6.62e-05  3.49e-01  
 13  +4.9883e-01  +5.9900e-01  1.00e-01  1.50e-05  8.22e-03  2.44e-04  4.83e-05  8.03e-01  
 14  +4.9830e-01  +5.9578e-01  9.75e-02  1.10e-05  6.05e-03  2.86e-04  3.55e-05  3.38e-01  
 15  +4.9841e-01  +5.9289e-01  9.45e-02  1.01e-05  5.56e-03  1.40e-04  3.25e-05  5.50e-01  
 16  +4.9735e-01  +5.8692e-01  8.96e-02  7.33e-06  4.02e-03  1.41e-04  2.35e-05  4.33e-01  
 17  +4.9413e-01  +5.7013e-01  7.60e-02  4.62e-06  2.53e-03  1.04e-04  1.50e-05  6.03e-01  
 18  +4.9339e-01  +5.6656e-01  7.32e-02  4.38e-06  2.40e-03  9.08e-05  1.42e-05  1.22e-01  
 19  +4.9248e-01  +5.6218e-01  6.97e-02  4.19e-06  2.29e-03  5.83e-05  1.37e-05  2.75e-01  
 20  +4.9056e-01  +5.5334e-01  6.28e-02  3.59e-06  1.97e-03  4.37e-05  1.18e-05  2.58e-01  
 21  +4.8869e-01  +5.4494e-01  5.62e-02  3.07e-06  1.68e-03  2.62e-05  1.02e-05  3.71e-01  
 22  +4.8712e-01  +5.3804e-01  5.09e-02  2.66e-06  1.46e-03  1.87e-05  8.92e-06  2.85e-01  
 23  +4.8558e-01  +5.3139e-01  4.58e-02  2.28e-06  1.25e-03  1.18e-05  7.71e-06  3.65e-01  
 24  +4.8397e-01  +5.2449e-01  4.05e-02  1.93e-06  1.06e-03  6.79e-06  6.57e-06  4.11e-01  
 25  +4.8372e-01  +5.2341e-01  3.97e-02  1.87e-06  1.03e-03  4.99e-06  6.37e-06  2.57e-01  
 26  +4.8027e-01  +5.0902e-01  2.87e-02  1.28e-06  6.99e-04  2.75e-06  4.42e-06  4.59e-01  
 27  +4.7979e-01  +5.0674e-01  2.69e-02  1.16e-06  6.37e-04  1.58e-06  4.03e-06  4.65e-01  
 28  +4.7653e-01  +4.9345e-01  1.69e-02  7.02e-07  3.84e-04  7.31e-07  2.48e-06  5.61e-01  
 29  +4.7508e-01  +4.8750e-01  1.24e-02  5.05e-07  2.76e-04  4.41e-07  1.80e-06  4.44e-01  
 30  +4.7463e-01  +4.8558e-01  1.10e-02  4.41e-07  2.42e-04  3.20e-07  1.57e-06  3.53e-01  
 31  +4.7354e-01  +4.8128e-01  7.74e-03  3.09e-07  1.69e-04  2.07e-07  1.11e-06  3.89e-01  
 32  +4.7305e-01  +4.7924e-01  6.19e-03  2.45e-07  1.34e-04  1.23e-07  8.84e-07  5.65e-01  
 33  +4.7169e-01  +4.7402e-01  2.33e-03  9.15e-08  5.01e-05  3.93e-08  3.34e-07  7.55e-01  
 34  +4.7149e-01  +4.7323e-01  1.75e-03  6.82e-08  3.73e-05  2.59e-08  2.50e-07  5.31e-01  
 35  +4.7144e-01  +4.7305e-01  1.61e-03  6.29e-08  3.44e-05  2.32e-08  2.30e-07  1.93e-01  
 36  +4.7112e-01  +4.7187e-01  7.48e-04  2.91e-08  1.59e-05  9.61e-09  1.07e-07  7.67e-01  
 37  +4.7104e-01  +4.7157e-01  5.25e-04  2.04e-08  1.12e-05  5.90e-09  7.50e-08  9.90e-01  
 38  +4.7086e-01  +4.7092e-01  5.95e-05  2.30e-09  1.26e-06  6.68e-10  8.49e-09  8.99e-01  
 39  +4.7084e-01  +4.7084e-01  7.08e-07  2.74e-11  1.50e-08  7.96e-12  1.01e-10  9.88e-01  
 40  +4.7084e-01  +4.7084e-01  7.09e-09  2.74e-13  1.50e-10  7.96e-14  1.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7414502s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:26 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:26 PM: Optimal value: 4.708e-01
(CVXPY) Sep 20 08:12:26 PM: Compilation took 3.645e-01 seconds
(CVXPY) Sep 20 08:12:26 PM: Solver (including time spent in interface) took 1.799e+00 seconds
Iteration: 39, Objective: 0.4708
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:26 PM: Your problem has 25398 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:26 PM: Finished problem compilation (took 3.570e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25398
  constraints   = 50398
  nnz(P)        = 0
  nnz(A)        = 530671
  cones (total) = 1
    : Nonnegative = 1,  numel = 50398

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8082e-01  +5.4260e+03  5.43e+03  4.38e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3191e-01  +6.1316e+02  6.13e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0903e-01  +1.6002e+02  1.60e+02  1.50e-01  7.84e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7641e+01  1.71e+01  4.72e-02  2.47e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.1901e+00  6.90e-01  2.07e-03  1.12e+00  2.28e-05  1.92e-01  1.85e-01  
  6  +5.0000e-01  +7.3707e-01  2.37e-01  7.10e-04  3.87e-01  6.98e-06  7.25e-02  6.93e-01  
  7  +5.0000e-01  +6.7395e-01  1.74e-01  5.21e-04  2.84e-01  5.75e-06  4.31e-02  4.81e-01  
  8  +5.0000e-01  +6.5703e-01  1.57e-01  4.69e-04  2.56e-01  6.97e-06  2.17e-02  6.23e-01  
  9  +4.9997e-01  +6.5365e-01  1.54e-01  4.34e-04  2.37e-01  1.77e-05  4.73e-03  9.90e-01  
 10  +4.9915e-01  +6.4100e-01  1.42e-01  5.35e-05  2.93e-02  3.92e-04  1.81e-04  9.65e-01  
 11  +4.9847e-01  +6.1782e-01  1.19e-01  2.26e-05  1.24e-02  6.00e-04  7.42e-05  7.40e-01  
 12  +4.9816e-01  +6.1249e-01  1.14e-01  1.74e-05  9.52e-03  6.36e-04  5.67e-05  3.35e-01  
 13  +4.9858e-01  +6.0182e-01  1.03e-01  1.41e-05  7.71e-03  3.27e-04  4.53e-05  6.20e-01  
 14  +4.9807e-01  +5.9815e-01  1.00e-01  1.08e-05  5.93e-03  3.59e-04  3.48e-05  3.15e-01  
 15  +4.9823e-01  +5.9386e-01  9.56e-02  9.96e-06  5.46e-03  1.73e-04  3.19e-05  5.32e-01  
 16  +4.9623e-01  +5.8267e-01  8.64e-02  5.96e-06  3.27e-03  1.95e-04  1.91e-05  5.35e-01  
 17  +4.9406e-01  +5.7014e-01  7.61e-02  4.98e-06  2.73e-03  8.32e-05  1.62e-05  5.24e-01  
 18  +4.9401e-01  +5.6992e-01  7.59e-02  4.98e-06  2.73e-03  8.11e-05  1.62e-05  1.81e-02  
 19  +4.9230e-01  +5.6180e-01  6.95e-02  4.26e-06  2.33e-03  7.12e-05  1.40e-05  1.86e-01  
 20  +4.8979e-01  +5.5007e-01  6.03e-02  3.44e-06  1.88e-03  4.43e-05  1.14e-05  3.79e-01  
 21  +4.8857e-01  +5.4455e-01  5.60e-02  3.07e-06  1.68e-03  2.52e-05  1.02e-05  3.95e-01  
 22  +4.8690e-01  +5.3721e-01  5.03e-02  2.63e-06  1.44e-03  1.93e-05  8.82e-06  2.48e-01  
 23  +4.8549e-01  +5.3110e-01  4.56e-02  2.28e-06  1.25e-03  1.34e-05  7.69e-06  3.12e-01  
 24  +4.8378e-01  +5.2387e-01  4.01e-02  1.91e-06  1.04e-03  7.03e-06  6.48e-06  4.58e-01  
 25  +4.7989e-01  +5.0761e-01  2.77e-02  1.23e-06  6.75e-04  3.99e-06  4.28e-06  4.40e-01  
 26  +4.7791e-01  +4.9943e-01  2.15e-02  9.26e-07  5.07e-04  2.79e-06  3.25e-06  3.13e-01  
 27  +4.7733e-01  +4.9661e-01  1.93e-02  8.05e-07  4.41e-04  1.46e-06  2.83e-06  5.20e-01  
 28  +4.7574e-01  +4.9021e-01  1.45e-02  5.91e-07  3.23e-04  8.51e-07  2.09e-06  4.46e-01  
 29  +4.7534e-01  +4.8857e-01  1.32e-02  5.36e-07  2.94e-04  6.96e-07  1.90e-06  2.10e-01  
 30  +4.7423e-01  +4.8381e-01  9.58e-03  3.81e-07  2.09e-04  1.16e-07  1.36e-06  9.90e-01  
 31  +4.7318e-01  +4.7983e-01  6.65e-03  2.64e-07  1.44e-04  7.87e-08  9.50e-07  4.86e-01  
 32  +4.7209e-01  +4.7568e-01  3.59e-03  1.42e-07  7.76e-05  4.19e-08  5.17e-07  6.05e-01  
 33  +4.7182e-01  +4.7462e-01  2.80e-03  1.10e-07  6.03e-05  3.22e-08  4.02e-07  6.42e-01  
 34  +4.7099e-01  +4.7155e-01  5.55e-04  2.18e-08  1.19e-05  6.34e-09  8.01e-08  8.47e-01  
 35  +4.7099e-01  +4.7153e-01  5.43e-04  2.11e-08  1.16e-05  6.19e-09  7.78e-08  2.81e-01  
 36  +4.7089e-01  +4.7114e-01  2.58e-04  1.01e-08  5.51e-06  2.88e-09  3.71e-08  9.90e-01  
 37  +4.7080e-01  +4.7084e-01  4.11e-05  1.60e-09  8.74e-07  4.59e-10  5.90e-09  8.48e-01  
 38  +4.7079e-01  +4.7079e-01  4.22e-07  1.64e-11  8.98e-09  4.71e-12  6.06e-11  9.90e-01  
 39  +4.7079e-01  +4.7079e-01  4.37e-09  1.70e-13  9.28e-11  4.99e-14  6.41e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7082988s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:28 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:28 PM: Optimal value: 4.708e-01
(CVXPY) Sep 20 08:12:28 PM: Compilation took 3.570e-01 seconds
(CVXPY) Sep 20 08:12:28 PM: Solver (including time spent in interface) took 1.766e+00 seconds
Iteration: 40, Objective: 0.4708
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:28 PM: Your problem has 25406 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:29 PM: Finished problem compilation (took 3.501e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25406
  constraints   = 50406
  nnz(P)        = 0
  nnz(A)        = 532896
  cones (total) = 1
    : Nonnegative = 1,  numel = 50406

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4260e+03  5.43e+03  4.38e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3191e-01  +6.1313e+02  6.13e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0903e-01  +1.6001e+02  1.60e+02  1.50e-01  7.84e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7640e+01  1.71e+01  4.72e-02  2.47e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.1902e+00  6.90e-01  2.07e-03  1.13e+00  2.28e-05  1.92e-01  1.85e-01  
  6  +5.0000e-01  +7.4111e-01  2.41e-01  7.22e-04  3.94e-01  7.14e-06  7.37e-02  6.84e-01  
  7  +5.0000e-01  +6.7240e-01  1.72e-01  5.16e-04  2.82e-01  5.76e-06  4.26e-02  5.01e-01  
  8  +5.0000e-01  +6.5515e-01  1.55e-01  4.64e-04  2.53e-01  7.33e-06  1.97e-02  6.76e-01  
  9  +4.9995e-01  +6.4048e-01  1.41e-01  3.75e-04  2.05e-01  2.88e-05  3.07e-03  9.47e-01  
 10  +4.9882e-01  +6.2894e-01  1.30e-01  4.22e-05  2.31e-02  5.40e-04  1.43e-04  9.60e-01  
 11  +4.9858e-01  +6.1655e-01  1.18e-01  2.70e-05  1.48e-02  5.71e-04  8.96e-05  5.53e-01  
 12  +4.9822e-01  +6.1210e-01  1.14e-01  2.02e-05  1.11e-02  6.50e-04  6.66e-05  3.35e-01  
 13  +4.9842e-01  +6.0638e-01  1.08e-01  1.75e-05  9.58e-03  4.93e-04  5.69e-05  3.90e-01  
 14  +4.9814e-01  +5.9783e-01  9.97e-02  1.17e-05  6.42e-03  4.01e-04  3.78e-05  6.54e-01  
 15  +4.9832e-01  +5.9529e-01  9.70e-02  1.10e-05  6.04e-03  2.43e-04  3.54e-05  4.20e-01  
 16  +4.9631e-01  +5.8363e-01  8.73e-02  6.09e-06  3.34e-03  2.81e-04  1.96e-05  6.21e-01  
 17  +4.9434e-01  +5.7306e-01  7.87e-02  5.03e-06  2.76e-03  2.07e-04  1.64e-05  3.27e-01  
 18  +4.9340e-01  +5.6829e-01  7.49e-02  4.65e-06  2.55e-03  1.80e-04  1.52e-05  1.42e-01  
 19  +4.9313e-01  +5.6680e-01  7.37e-02  4.59e-06  2.52e-03  1.50e-04  1.50e-05  1.25e-01  
 20  +4.9004e-01  +5.5197e-01  6.19e-02  3.51e-06  1.92e-03  1.04e-04  1.16e-05  3.52e-01  
 21  +4.8939e-01  +5.4882e-01  5.94e-02  3.31e-06  1.81e-03  6.82e-05  1.10e-05  3.01e-01  
 22  +4.8735e-01  +5.3971e-01  5.24e-02  2.76e-06  1.51e-03  5.12e-05  9.26e-06  2.65e-01  
 23  +4.8626e-01  +5.3489e-01  4.86e-02  2.48e-06  1.36e-03  3.77e-05  8.35e-06  2.59e-01  
 24  +4.8501e-01  +5.2945e-01  4.44e-02  2.19e-06  1.20e-03  2.85e-05  7.41e-06  2.47e-01  
 25  +4.8391e-01  +5.2458e-01  4.07e-02  1.92e-06  1.05e-03  1.07e-05  6.54e-06  5.78e-01  
 26  +4.8044e-01  +5.1005e-01  2.96e-02  1.32e-06  7.24e-04  6.94e-06  4.58e-06  3.61e-01  
 27  +4.7854e-01  +5.0212e-01  2.36e-02  1.02e-06  5.57e-04  4.62e-06  3.55e-06  3.45e-01  
 28  +4.7738e-01  +4.9710e-01  1.97e-02  8.26e-07  4.52e-04  2.46e-06  2.90e-06  4.89e-01  
 29  +4.7643e-01  +4.9308e-01  1.66e-02  6.84e-07  3.74e-04  1.29e-06  2.41e-06  5.07e-01  
 30  +4.7546e-01  +4.8924e-01  1.38e-02  5.60e-07  3.06e-04  1.01e-06  1.98e-06  2.24e-01  
 31  +4.7474e-01  +4.8596e-01  1.12e-02  4.47e-07  2.45e-04  1.37e-07  1.59e-06  9.90e-01  
 32  +4.7466e-01  +4.8567e-01  1.10e-02  4.38e-07  2.40e-04  1.34e-07  1.56e-06  6.33e-02  
 33  +4.7359e-01  +4.8156e-01  7.97e-03  3.15e-07  1.73e-04  9.51e-08  1.13e-06  4.82e-01  
 34  +4.7228e-01  +4.7656e-01  4.28e-03  1.68e-07  9.19e-05  5.00e-08  6.08e-07  7.26e-01  
 35  +4.7130e-01  +4.7288e-01  1.58e-03  6.14e-08  3.36e-05  1.84e-08  2.25e-07  7.19e-01  
 36  +4.7095e-01  +4.7157e-01  6.23e-04  2.41e-08  1.32e-05  7.03e-09  8.87e-08  9.77e-01  
 37  +4.7072e-01  +4.7074e-01  2.00e-05  7.75e-10  4.24e-07  2.25e-10  2.86e-09  9.72e-01  
 38  +4.7071e-01  +4.7071e-01  2.08e-07  8.03e-12  4.39e-09  2.33e-12  2.96e-11  9.90e-01  
 39  +4.7071e-01  +4.7071e-01  2.08e-09  8.04e-14  4.40e-11  2.37e-14  3.01e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6863747s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:30 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:30 PM: Optimal value: 4.707e-01
(CVXPY) Sep 20 08:12:30 PM: Compilation took 3.501e-01 seconds
(CVXPY) Sep 20 08:12:30 PM: Solver (including time spent in interface) took 1.737e+00 seconds
Iteration: 41, Objective: 0.4707
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:31 PM: Your problem has 25410 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:31 PM: Finished problem compilation (took 3.556e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25410
  constraints   = 50410
  nnz(P)        = 0
  nnz(A)        = 533705
  cones (total) = 1
    : Nonnegative = 1,  numel = 50410

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4259e+03  5.43e+03  4.38e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3191e-01  +6.1313e+02  6.13e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0903e-01  +1.6001e+02  1.60e+02  1.50e-01  7.84e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7639e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.1887e+00  6.89e-01  2.06e-03  1.12e+00  2.28e-05  1.92e-01  1.85e-01  
  6  +5.0000e-01  +7.3008e-01  2.30e-01  6.89e-04  3.76e-01  6.82e-06  7.07e-02  6.97e-01  
  7  +5.0000e-01  +6.7295e-01  1.73e-01  5.18e-04  2.83e-01  5.78e-06  4.25e-02  4.76e-01  
  8  +5.0000e-01  +6.5803e-01  1.58e-01  4.72e-04  2.58e-01  7.32e-06  2.00e-02  6.75e-01  
  9  +4.9996e-01  +6.4819e-01  1.48e-01  4.12e-04  2.25e-01  2.17e-05  4.05e-03  9.40e-01  
 10  +4.9896e-01  +6.3722e-01  1.38e-01  4.76e-05  2.61e-02  4.74e-04  1.62e-04  9.63e-01  
 11  +4.9857e-01  +6.2055e-01  1.22e-01  2.65e-05  1.45e-02  5.68e-04  8.79e-05  6.17e-01  
 12  +4.9818e-01  +6.1571e-01  1.18e-01  1.99e-05  1.09e-02  6.52e-04  6.53e-05  3.24e-01  
 13  +4.9840e-01  +6.0615e-01  1.08e-01  1.57e-05  8.63e-03  4.45e-04  5.11e-05  5.30e-01  
 14  +4.9782e-01  +5.9962e-01  1.02e-01  1.10e-05  6.04e-03  4.56e-04  3.56e-05  4.71e-01  
 15  +4.9792e-01  +5.9766e-01  9.97e-02  1.08e-05  5.92e-03  3.55e-04  3.49e-05  2.08e-01  
 16  +4.9554e-01  +5.8348e-01  8.79e-02  5.97e-06  3.27e-03  4.17e-04  1.93e-05  5.70e-01  
 17  +4.9495e-01  +5.7964e-01  8.47e-02  5.67e-06  3.11e-03  3.53e-04  1.84e-05  1.44e-01  
 18  +4.9272e-01  +5.6788e-01  7.52e-02  4.58e-06  2.51e-03  2.98e-04  1.50e-05  2.48e-01  
 19  +4.9265e-01  +5.6748e-01  7.48e-02  4.57e-06  2.50e-03  2.86e-04  1.50e-05  2.79e-02  
 20  +4.8997e-01  +5.5384e-01  6.39e-02  3.62e-06  1.98e-03  1.97e-04  1.20e-05  3.34e-01  
 21  +4.8923e-01  +5.5000e-01  6.08e-02  3.38e-06  1.85e-03  1.49e-04  1.12e-05  2.19e-01  
 22  +4.8752e-01  +5.4186e-01  5.43e-02  2.89e-06  1.58e-03  1.08e-04  9.68e-06  2.78e-01  
 23  +4.8550e-01  +5.3233e-01  4.68e-02  2.34e-06  1.28e-03  5.79e-05  7.93e-06  4.45e-01  
 24  +4.8469e-01  +5.2870e-01  4.40e-02  2.15e-06  1.18e-03  4.40e-05  7.28e-06  2.36e-01  
 25  +4.8383e-01  +5.2463e-01  4.08e-02  1.92e-06  1.05e-03  1.89e-05  6.54e-06  5.28e-01  
 26  +4.8089e-01  +5.1224e-01  3.13e-02  1.41e-06  7.70e-04  1.27e-05  4.86e-06  3.37e-01  
 27  +4.7873e-01  +5.0314e-01  2.44e-02  1.06e-06  5.78e-04  8.12e-06  3.69e-06  3.66e-01  
 28  +4.7739e-01  +4.9732e-01  1.99e-02  8.34e-07  4.57e-04  4.03e-06  2.93e-06  5.18e-01  
 29  +4.7636e-01  +4.9298e-01  1.66e-02  6.83e-07  3.74e-04  2.12e-06  2.41e-06  4.90e-01  
 30  +4.7537e-01  +4.8902e-01  1.37e-02  5.54e-07  3.03e-04  1.61e-06  1.97e-06  2.48e-01  
 31  +4.7472e-01  +4.8596e-01  1.12e-02  4.48e-07  2.45e-04  1.45e-07  1.60e-06  9.90e-01  
 32  +4.7436e-01  +4.8458e-01  1.02e-02  4.07e-07  2.23e-04  1.30e-07  1.45e-06  1.81e-01  
 33  +4.7294e-01  +4.7919e-01  6.24e-03  2.46e-07  1.35e-04  7.82e-08  8.90e-07  4.62e-01  
 34  +4.7221e-01  +4.7638e-01  4.17e-03  1.63e-07  8.93e-05  5.04e-08  5.93e-07  6.00e-01  
 35  +4.7129e-01  +4.7292e-01  1.63e-03  6.33e-08  3.46e-05  1.94e-08  2.32e-07  6.94e-01  
 36  +4.7113e-01  +4.7231e-01  1.18e-03  4.58e-08  2.51e-05  1.35e-08  1.68e-07  8.43e-01  
 37  +4.7089e-01  +4.7144e-01  5.45e-04  2.11e-08  1.16e-05  6.16e-09  7.80e-08  7.90e-01  
 38  +4.7069e-01  +4.7071e-01  1.37e-05  5.30e-10  2.90e-07  1.53e-10  1.96e-09  9.79e-01  
 39  +4.7069e-01  +4.7069e-01  1.38e-07  5.35e-12  2.93e-09  1.55e-12  1.98e-11  9.90e-01  
 40  +4.7069e-01  +4.7069e-01  1.39e-09  5.39e-14  2.95e-11  1.61e-14  2.06e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7222323s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:33 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:33 PM: Optimal value: 4.707e-01
(CVXPY) Sep 20 08:12:33 PM: Compilation took 3.556e-01 seconds
(CVXPY) Sep 20 08:12:33 PM: Solver (including time spent in interface) took 1.776e+00 seconds
Iteration: 42, Objective: 0.4707
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:33 PM: Your problem has 25420 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:33 PM: Finished problem compilation (took 3.730e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25420
  constraints   = 50420
  nnz(P)        = 0
  nnz(A)        = 535751
  cones (total) = 1
    : Nonnegative = 1,  numel = 50420

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4259e+03  5.43e+03  4.38e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3190e-01  +6.1310e+02  6.13e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0903e-01  +1.6000e+02  1.59e+02  1.50e-01  7.84e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7638e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.1924e+00  6.92e-01  2.07e-03  1.13e+00  2.28e-05  1.92e-01  1.85e-01  
  6  +5.0000e-01  +7.4312e-01  2.43e-01  7.28e-04  3.97e-01  7.21e-06  7.42e-02  6.79e-01  
  7  +5.0000e-01  +6.7376e-01  1.74e-01  5.20e-04  2.84e-01  5.85e-06  4.32e-02  4.89e-01  
  8  +5.0000e-01  +6.6125e-01  1.61e-01  4.82e-04  2.63e-01  7.16e-06  2.21e-02  6.25e-01  
  9  +4.9996e-01  +6.3992e-01  1.40e-01  3.89e-04  2.12e-01  2.51e-05  3.83e-03  8.97e-01  
 10  +4.9918e-01  +6.1899e-01  1.20e-01  5.72e-05  3.13e-02  3.77e-04  1.98e-04  9.77e-01  
 11  +4.9887e-01  +6.1206e-01  1.13e-01  3.50e-05  1.92e-02  4.78e-04  1.18e-04  5.56e-01  
 12  +4.9879e-01  +6.0632e-01  1.08e-01  2.52e-05  1.38e-02  4.57e-04  8.35e-05  5.20e-01  
 13  +4.9821e-01  +5.9646e-01  9.83e-02  1.27e-05  6.97e-03  4.99e-04  4.13e-05  8.32e-01  
 14  +4.9797e-01  +5.9466e-01  9.67e-02  1.09e-05  5.96e-03  4.76e-04  3.52e-05  2.85e-01  
 15  +4.9803e-01  +5.9311e-01  9.51e-02  1.03e-05  5.67e-03  3.22e-04  3.34e-05  3.56e-01  
 16  +4.9739e-01  +5.8888e-01  9.15e-02  8.23e-06  4.51e-03  2.46e-04  2.65e-05  4.96e-01  
 17  +4.9548e-01  +5.7912e-01  8.36e-02  5.91e-06  3.24e-03  2.47e-04  1.92e-05  3.63e-01  
 18  +4.9256e-01  +5.6448e-01  7.19e-02  4.41e-06  2.41e-03  1.96e-04  1.45e-05  3.52e-01  
 19  +4.9251e-01  +5.6424e-01  7.17e-02  4.40e-06  2.41e-03  1.91e-04  1.45e-05  1.62e-02  
 20  +4.9038e-01  +5.5409e-01  6.37e-02  3.71e-06  2.03e-03  1.24e-04  1.23e-05  3.38e-01  
 21  +4.8960e-01  +5.5054e-01  6.09e-02  3.46e-06  1.90e-03  9.91e-05  1.15e-05  1.92e-01  
 22  +4.8759e-01  +5.4153e-01  5.39e-02  2.90e-06  1.59e-03  7.67e-05  9.74e-06  2.49e-01  
 23  +4.8705e-01  +5.3910e-01  5.20e-02  2.74e-06  1.50e-03  6.11e-05  9.24e-06  1.93e-01  
 24  +4.8518e-01  +5.3097e-01  4.58e-02  2.30e-06  1.26e-03  4.56e-05  7.80e-06  2.67e-01  
 25  +4.8432e-01  +5.2727e-01  4.30e-02  2.10e-06  1.15e-03  3.44e-05  7.14e-06  2.44e-01  
 26  +4.8144e-01  +5.1500e-01  3.36e-02  1.54e-06  8.45e-04  1.66e-05  5.33e-06  5.02e-01  
 27  +4.7944e-01  +5.0665e-01  2.72e-02  1.21e-06  6.62e-04  1.22e-05  4.22e-06  2.74e-01  
 28  +4.7670e-01  +4.9494e-01  1.82e-02  7.67e-07  4.20e-04  3.86e-06  2.71e-06  6.86e-01  
 29  +4.7559e-01  +4.9034e-01  1.47e-02  6.07e-07  3.32e-04  2.41e-06  2.16e-06  3.95e-01  
 30  +4.7506e-01  +4.8815e-01  1.31e-02  5.33e-07  2.91e-04  1.85e-06  1.90e-06  2.51e-01  
 31  +4.7470e-01  +4.8646e-01  1.18e-02  4.73e-07  2.59e-04  6.85e-07  1.69e-06  6.75e-01  
 32  +4.7416e-01  +4.8429e-01  1.01e-02  4.05e-07  2.22e-04  4.14e-07  1.45e-06  4.63e-01  
 33  +4.7265e-01  +4.7852e-01  5.87e-03  2.31e-07  1.26e-04  2.15e-07  8.38e-07  5.08e-01  
 34  +4.7180e-01  +4.7527e-01  3.47e-03  1.35e-07  7.41e-05  1.11e-07  4.96e-07  5.12e-01  
 35  +4.7167e-01  +4.7474e-01  3.07e-03  1.20e-07  6.55e-05  7.71e-08  4.39e-07  4.18e-01  
 36  +4.7093e-01  +4.7197e-01  1.05e-03  4.04e-08  2.21e-05  2.35e-08  1.50e-07  7.26e-01  
 37  +4.7057e-01  +4.7069e-01  1.19e-04  4.47e-09  2.45e-06  1.47e-09  1.69e-08  9.90e-01  
 38  +4.7052e-01  +4.7052e-01  1.42e-06  5.36e-11  2.93e-08  1.76e-11  2.03e-10  9.88e-01  
 39  +4.7052e-01  +4.7052e-01  1.42e-08  5.36e-13  2.93e-10  1.76e-13  2.03e-12  9.90e-01  
 40  +4.7052e-01  +4.7052e-01  1.43e-10  5.35e-15  2.95e-12  2.30e-15  2.62e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7620352s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:35 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:35 PM: Optimal value: 4.705e-01
(CVXPY) Sep 20 08:12:35 PM: Compilation took 3.730e-01 seconds
(CVXPY) Sep 20 08:12:35 PM: Solver (including time spent in interface) took 1.814e+00 seconds
Iteration: 43, Objective: 0.4705
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:35 PM: Your problem has 25422 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:36 PM: Finished problem compilation (took 3.648e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25422
  constraints   = 50422
  nnz(P)        = 0
  nnz(A)        = 536995
  cones (total) = 1
    : Nonnegative = 1,  numel = 50422

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4259e+03  5.43e+03  4.38e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3190e-01  +6.1308e+02  6.13e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0903e-01  +1.5999e+02  1.59e+02  1.50e-01  7.84e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7637e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.1910e+00  6.91e-01  2.07e-03  1.13e+00  2.28e-05  1.92e-01  1.85e-01  
  6  +5.0000e-01  +7.3855e-01  2.39e-01  7.14e-04  3.90e-01  7.09e-06  7.30e-02  6.83e-01  
  7  +5.0000e-01  +6.7119e-01  1.71e-01  5.13e-04  2.80e-01  5.80e-06  4.21e-02  4.99e-01  
  8  +5.0000e-01  +6.5787e-01  1.58e-01  4.72e-04  2.58e-01  7.36e-06  2.08e-02  6.30e-01  
  9  +4.9995e-01  +6.3937e-01  1.39e-01  3.74e-04  2.04e-01  3.00e-05  3.13e-03  9.35e-01  
 10  +4.9907e-01  +6.2426e-01  1.25e-01  5.34e-05  2.92e-02  4.26e-04  1.84e-04  9.60e-01  
 11  +4.9878e-01  +6.1559e-01  1.17e-01  3.33e-05  1.82e-02  5.12e-04  1.12e-04  5.47e-01  
 12  +4.9876e-01  +6.0808e-01  1.09e-01  2.41e-05  1.32e-02  4.59e-04  7.93e-05  5.38e-01  
 13  +4.9804e-01  +5.9825e-01  1.00e-01  1.25e-05  6.87e-03  5.46e-04  4.07e-05  7.38e-01  
 14  +4.9777e-01  +5.9620e-01  9.84e-02  1.08e-05  5.94e-03  5.39e-04  3.51e-05  2.36e-01  
 15  +4.9787e-01  +5.9410e-01  9.62e-02  1.04e-05  5.68e-03  3.67e-04  3.35e-05  3.33e-01  
 16  +4.9766e-01  +5.9194e-01  9.43e-02  9.37e-06  5.13e-03  2.98e-04  3.02e-05  2.99e-01  
 17  +4.9566e-01  +5.8177e-01  8.61e-02  6.22e-06  3.41e-03  3.46e-04  2.02e-05  3.75e-01  
 18  +4.9338e-01  +5.6965e-01  7.63e-02  4.89e-06  2.68e-03  2.60e-04  1.60e-05  3.57e-01  
 19  +4.9323e-01  +5.6880e-01  7.56e-02  4.84e-06  2.65e-03  2.43e-04  1.59e-05  5.50e-02  
 20  +4.9016e-01  +5.5338e-01  6.32e-02  3.70e-06  2.02e-03  1.13e-04  1.23e-05  5.17e-01  
 21  +4.8953e-01  +5.5049e-01  6.10e-02  3.49e-06  1.91e-03  9.26e-05  1.17e-05  1.70e-01  
 22  +4.8739e-01  +5.4079e-01  5.34e-02  2.88e-06  1.58e-03  7.28e-05  9.70e-06  2.44e-01  
 23  +4.8696e-01  +5.3882e-01  5.19e-02  2.75e-06  1.50e-03  5.84e-05  9.27e-06  1.87e-01  
 24  +4.8517e-01  +5.3099e-01  4.58e-02  2.31e-06  1.26e-03  4.23e-05  7.84e-06  2.90e-01  
 25  +4.8419e-01  +5.2675e-01  4.26e-02  2.08e-06  1.14e-03  3.06e-05  7.08e-06  2.73e-01  
 26  +4.8140e-01  +5.1490e-01  3.35e-02  1.54e-06  8.46e-04  1.72e-05  5.34e-06  4.32e-01  
 27  +4.7928e-01  +5.0599e-01  2.67e-02  1.19e-06  6.50e-04  1.23e-05  4.15e-06  2.94e-01  
 28  +4.7837e-01  +5.0202e-01  2.36e-02  1.02e-06  5.61e-04  8.06e-06  3.59e-06  3.55e-01  
 29  +4.7618e-01  +4.9297e-01  1.68e-02  7.02e-07  3.84e-04  4.46e-06  2.49e-06  4.56e-01  
 30  +4.7512e-01  +4.8856e-01  1.34e-02  5.50e-07  3.01e-04  2.81e-06  1.96e-06  3.90e-01  
 31  +4.7487e-01  +4.8746e-01  1.26e-02  5.13e-07  2.81e-04  2.01e-06  1.83e-06  2.91e-01  
 32  +4.7394e-01  +4.8372e-01  9.78e-03  3.94e-07  2.15e-04  1.33e-06  1.42e-06  3.53e-01  
 33  +4.7323e-01  +4.8088e-01  7.65e-03  3.05e-07  1.67e-04  8.31e-07  1.10e-06  3.92e-01  
 34  +4.7252e-01  +4.7794e-01  5.42e-03  2.13e-07  1.16e-04  1.49e-07  7.72e-07  8.95e-01  
 35  +4.7183e-01  +4.7539e-01  3.55e-03  1.39e-07  7.58e-05  9.10e-08  5.07e-07  4.19e-01  
 36  +4.7179e-01  +4.7521e-01  3.42e-03  1.33e-07  7.30e-05  7.93e-08  4.88e-07  2.00e-01  
 37  +4.7090e-01  +4.7190e-01  1.00e-03  3.88e-08  2.12e-05  1.94e-08  1.44e-07  7.96e-01  
 38  +4.7074e-01  +4.7130e-01  5.64e-04  2.15e-08  1.17e-05  6.93e-09  8.05e-08  9.34e-01  
 39  +4.7053e-01  +4.7057e-01  3.59e-05  1.35e-09  7.41e-07  4.42e-10  5.12e-09  9.39e-01  
 40  +4.7052e-01  +4.7052e-01  3.80e-07  1.43e-11  7.83e-09  4.68e-12  5.43e-11  9.90e-01  
 41  +4.7052e-01  +4.7052e-01  3.80e-09  1.43e-13  7.83e-11  4.68e-14  5.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7917714s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:38 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:38 PM: Optimal value: 4.705e-01
(CVXPY) Sep 20 08:12:38 PM: Compilation took 3.648e-01 seconds
(CVXPY) Sep 20 08:12:38 PM: Solver (including time spent in interface) took 1.846e+00 seconds
Iteration: 44, Objective: 0.4705
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:38 PM: Your problem has 25427 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:38 PM: Finished problem compilation (took 3.633e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:38 PM: Invoking solver CLARABEL  to obtain a solution.
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres   -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25427
  constraints   = 50427
  nnz(P)        = 0
  nnz(A)        = 538582
  cones (total) = 1
    : Nonnegative = 1,  numel = 50427

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4258e+03  5.43e+03  4.38e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3190e-01  +6.1308e+02  6.13e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0903e-01  +1.5999e+02  1.59e+02  1.50e-01  7.84e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7636e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.1902e+00  6.90e-01  2.07e-03  1.13e+00  2.28e-05  1.92e-01  1.85e-01  
  6  +5.0000e-01  +7.3997e-01  2.40e-01  7.19e-04  3.92e-01  7.15e-06  7.34e-02  6.81e-01  
  7  +5.0000e-01  +6.7103e-01  1.71e-01  5.12e-04  2.80e-01  5.82e-06  4.21e-02  5.00e-01  
  8  +5.0000e-01  +6.5761e-01  1.58e-01  4.71e-04  2.57e-01  7.38e-06  2.09e-02  6.30e-01  
  9  +4.9995e-01  +6.3957e-01  1.40e-01  3.75e-04  2.05e-01  2.99e-05  3.16e-03  9.33e-01  
 10  +4.9908e-01  +6.2344e-01  1.24e-01  5.39e-05  2.95e-02  4.20e-04  1.86e-04  9.62e-01  
 11  +4.9880e-01  +6.1542e-01  1.17e-01  3.40e-05  1.86e-02  5.07e-04  1.14e-04  5.33e-01  
 12  +4.9873e-01  +6.0835e-01  1.10e-01  2.44e-05  1.34e-02  4.76e-04  8.06e-05  5.22e-01  
 13  +4.9815e-01  +5.9668e-01  9.85e-02  1.23e-05  6.74e-03  4.94e-04  3.99e-05  8.38e-01  
 14  +4.9790e-01  +5.9499e-01  9.71e-02  1.07e-05  5.89e-03  4.88e-04  3.48e-05  2.24e-01  
 15  +4.9797e-01  +5.9293e-01  9.50e-02  1.01e-05  5.53e-03  3.07e-04  3.26e-05  4.07e-01  
 16  +4.9767e-01  +5.9071e-01  9.30e-02  9.00e-06  4.93e-03  2.50e-04  2.90e-05  3.17e-01  
 17  +4.9569e-01  +5.8076e-01  8.51e-02  6.08e-06  3.33e-03  2.85e-04  1.97e-05  3.65e-01  
 18  +4.9336e-01  +5.6868e-01  7.53e-02  4.80e-06  2.63e-03  2.08e-04  1.57e-05  3.67e-01  
 19  +4.9328e-01  +5.6827e-01  7.50e-02  4.78e-06  2.62e-03  2.00e-04  1.57e-05  2.83e-02  
 20  +4.9023e-01  +5.5347e-01  6.32e-02  3.68e-06  2.02e-03  1.19e-04  1.22e-05  4.22e-01  
 21  +4.8918e-01  +5.4866e-01  5.95e-02  3.35e-06  1.84e-03  9.47e-05  1.12e-05  2.04e-01  
 22  +4.8720e-01  +5.3979e-01  5.26e-02  2.81e-06  1.54e-03  7.03e-05  9.45e-06  2.72e-01  
 23  +4.8657e-01  +5.3697e-01  5.04e-02  2.62e-06  1.44e-03  5.04e-05  8.85e-06  2.68e-01  
 24  +4.8478e-01  +5.2923e-01  4.44e-02  2.21e-06  1.21e-03  3.83e-05  7.51e-06  2.55e-01  
 25  +4.8376e-01  +5.2487e-01  4.11e-02  1.98e-06  1.08e-03  2.63e-05  6.77e-06  3.02e-01  
 26  +4.8050e-01  +5.1099e-01  3.05e-02  1.38e-06  7.54e-04  1.26e-05  4.78e-06  5.15e-01  
 27  +4.7865e-01  +5.0326e-01  2.46e-02  1.07e-06  5.88e-04  8.42e-06  3.76e-06  3.38e-01  
 28  +4.7721e-01  +4.9718e-01  2.00e-02  8.48e-07  4.64e-04  5.27e-06  2.99e-06  3.84e-01  
 29  +4.7539e-01  +4.8967e-01  1.43e-02  5.89e-07  3.22e-04  2.90e-06  2.10e-06  4.64e-01  
 30  +4.7539e-01  +4.8965e-01  1.43e-02  5.88e-07  3.22e-04  2.88e-06  2.10e-06  8.02e-03  
 31  +4.7538e-01  +4.8954e-01  1.42e-02  5.82e-07  3.18e-04  2.57e-06  2.07e-06  1.20e-01  
 32  +4.7453e-01  +4.8610e-01  1.16e-02  4.68e-07  2.56e-04  1.60e-06  1.67e-06  3.95e-01  
 33  +4.7441e-01  +4.8554e-01  1.11e-02  4.48e-07  2.45e-04  1.33e-06  1.60e-06  1.84e-01  
 34  +4.7339e-01  +4.8151e-01  8.11e-03  3.24e-07  1.77e-04  7.17e-07  1.17e-06  4.80e-01  
 35  +4.7255e-01  +4.7819e-01  5.64e-03  2.23e-07  1.22e-04  3.64e-07  8.09e-07  5.23e-01  
 36  +4.7216e-01  +4.7665e-01  4.48e-03  1.75e-07  9.60e-05  1.57e-07  6.39e-07  6.51e-01  
 37  +4.7206e-01  +4.7623e-01  4.17e-03  1.63e-07  8.92e-05  1.21e-07  5.94e-07  3.06e-01  
 38  +4.7094e-01  +4.7205e-01  1.11e-03  4.32e-08  2.37e-05  2.75e-08  1.60e-07  7.94e-01  
 39  +4.7080e-01  +4.7152e-01  7.19e-04  2.75e-08  1.51e-05  1.30e-08  1.03e-07  6.80e-01  
 40  +4.7056e-01  +4.7064e-01  8.72e-05  3.30e-09  1.81e-06  1.54e-09  1.25e-08  8.89e-01  
 41  +4.7052e-01  +4.7052e-01  1.23e-06  4.64e-11  2.54e-08  2.04e-11  1.76e-10  9.88e-01  
 42  +4.7052e-01  +4.7052e-01  1.23e-08  4.63e-13  2.54e-10  2.04e-13  1.76e-12  9.90e-01  
 43  +4.7052e-01  +4.7052e-01  1.27e-10  4.79e-15  2.61e-12  5.18e-15  4.21e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8759189s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:40 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:40 PM: Optimal value: 4.705e-01
(CVXPY) Sep 20 08:12:40 PM: Compilation took 3.633e-01 seconds
(CVXPY) Sep 20 08:12:40 PM: Solver (including time spent in interface) took 1.931e+00 seconds
Iteration: 45, Objective: 0.4705
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:12:40 PM: Your problem has 25428 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:12:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:12:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:12:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:12:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:12:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:12:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:12:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:12:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:12:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:12:41 PM: Finished problem compilation (took 3.740e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25428
  constraints   = 50428
  nnz(P)        = 0
  nnz(A)        = 538797
  cones (total) = 1
    : Nonnegative = 1,  numel = 50428

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4258e+03  5.43e+03  4.38e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3191e-01  +6.1308e+02  6.13e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0903e-01  +1.5999e+02  1.59e+02  1.50e-01  7.84e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7636e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.1906e+00  6.91e-01  2.07e-03  1.13e+00  2.28e-05  1.92e-01  1.85e-01  
  6  +5.0000e-01  +7.4065e-01  2.41e-01  7.21e-04  3.93e-01  7.16e-06  7.36e-02  6.80e-01  
  7  +5.0000e-01  +6.7073e-01  1.71e-01  5.11e-04  2.79e-01  5.82e-06  4.21e-02  5.00e-01  
  8  +5.0000e-01  +6.5925e-01  1.59e-01  4.76e-04  2.60e-01  7.29e-06  2.18e-02  6.06e-01  
  9  +4.9996e-01  +6.4132e-01  1.41e-01  3.94e-04  2.15e-01  2.54e-05  3.95e-03  8.86e-01  
 10  +4.9911e-01  +6.1995e-01  1.21e-01  5.52e-05  3.02e-02  4.07e-04  1.91e-04  9.78e-01  
 11  +4.9888e-01  +6.1267e-01  1.14e-01  3.55e-05  1.94e-02  4.74e-04  1.20e-04  5.43e-01  
 12  +4.9884e-01  +6.0596e-01  1.07e-01  2.51e-05  1.37e-02  4.33e-04  8.29e-05  5.70e-01  
 13  +4.9834e-01  +5.9978e-01  1.01e-01  1.50e-05  8.22e-03  5.02e-04  4.88e-05  6.28e-01  
 14  +4.9792e-01  +5.9643e-01  9.85e-02  1.14e-05  6.27e-03  5.10e-04  3.71e-05  3.96e-01  
 15  +4.9799e-01  +5.9532e-01  9.73e-02  1.12e-05  6.14e-03  4.03e-04  3.63e-05  2.13e-01  
 16  +4.9689e-01  +5.8899e-01  9.21e-02  8.04e-06  4.40e-03  4.23e-04  2.60e-05  4.06e-01  
 17  +4.9530e-01  +5.8011e-01  8.48e-02  6.18e-06  3.39e-03  3.66e-04  2.01e-05  3.77e-01  
 18  +4.9319e-01  +5.6887e-01  7.57e-02  4.91e-06  2.69e-03  2.72e-04  1.61e-05  3.60e-01  
 19  +4.9310e-01  +5.6832e-01  7.52e-02  4.89e-06  2.68e-03  2.53e-04  1.61e-05  5.34e-02  
 20  +4.8943e-01  +5.5036e-01  6.09e-02  3.48e-06  1.91e-03  1.58e-04  1.16e-05  4.42e-01  
 21  +4.8911e-01  +5.4886e-01  5.98e-02  3.38e-06  1.85e-03  1.38e-04  1.13e-05  1.13e-01  
 22  +4.8743e-01  +5.4118e-01  5.37e-02  2.89e-06  1.58e-03  1.01e-04  9.73e-06  2.77e-01  
 23  +4.8664e-01  +5.3760e-01  5.10e-02  2.67e-06  1.46e-03  7.55e-05  8.99e-06  2.46e-01  
 24  +4.8486e-01  +5.2982e-01  4.50e-02  2.25e-06  1.23e-03  6.06e-05  7.65e-06  2.18e-01  
 25  +4.8387e-01  +5.2554e-01  4.17e-02  2.02e-06  1.11e-03  4.58e-05  6.91e-06  2.45e-01  
 26  +4.8112e-01  +5.1379e-01  3.27e-02  1.50e-06  8.21e-04  2.52e-05  5.19e-06  4.44e-01  
 27  +4.7914e-01  +5.0549e-01  2.63e-02  1.17e-06  6.40e-04  1.85e-05  4.09e-06  2.75e-01  
 28  +4.7771e-01  +4.9920e-01  2.15e-02  9.17e-07  5.02e-04  8.66e-06  3.22e-06  5.38e-01  
 29  +4.7539e-01  +4.8970e-01  1.43e-02  5.90e-07  3.23e-04  4.32e-06  2.10e-06  5.09e-01  
 30  +4.7539e-01  +4.8968e-01  1.43e-02  5.89e-07  3.22e-04  4.29e-06  2.10e-06  8.12e-03  
 31  +4.7530e-01  +4.8913e-01  1.38e-02  5.63e-07  3.08e-04  3.03e-06  2.00e-06  3.16e-01  
 32  +4.7467e-01  +4.8636e-01  1.17e-02  4.69e-07  2.57e-04  9.65e-07  1.67e-06  7.15e-01  
 33  +4.7402e-01  +4.8380e-01  9.78e-03  3.89e-07  2.13e-04  5.42e-07  1.40e-06  4.87e-01  
 34  +4.7332e-01  +4.8110e-01  7.78e-03  3.09e-07  1.69e-04  3.58e-07  1.11e-06  3.73e-01  
 35  +4.7197e-01  +4.7590e-01  3.93e-03  1.54e-07  8.41e-05  7.64e-08  5.61e-07  8.86e-01  
 36  +4.7145e-01  +4.7394e-01  2.49e-03  9.73e-08  5.32e-05  4.13e-08  3.57e-07  5.74e-01  
 37  +4.7083e-01  +4.7163e-01  8.04e-04  3.11e-08  1.70e-05  1.08e-08  1.15e-07  8.71e-01  
 38  +4.7064e-01  +4.7095e-01  3.08e-04  1.17e-08  6.41e-06  3.65e-09  4.40e-08  9.07e-01  
 39  +4.7052e-01  +4.7054e-01  1.09e-05  4.12e-10  2.26e-07  1.30e-10  1.56e-09  9.67e-01  
 40  +4.7052e-01  +4.7052e-01  1.10e-07  4.15e-12  2.27e-09  1.31e-12  1.57e-11  9.90e-01  
 41  +4.7052e-01  +4.7052e-01  1.10e-09  4.15e-14  2.27e-11  1.31e-14  1.57e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8277145s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:12:43 PM: Problem status: optimal
(CVXPY) Sep 20 08:12:43 PM: Optimal value: 4.705e-01
(CVXPY) Sep 20 08:12:43 PM: Compilation took 3.740e-01 seconds
(CVXPY) Sep 20 08:12:43 PM: Solver (including time spent in interface) took 1.880e+00 seconds
FULL MODEL:
  Accruacy: 0.508
  Our objective: 0.016000000000000028

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.00116)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.00076)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.00024)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.00044)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.00188)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.00044)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.00044)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.00056)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.00048)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.00068)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.00076)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.00052)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.00132)
 OR (x1 = 0 AND x2 = 1 AND x7 = 0 AND x8 = 1)                                                        <-- (term's our objective: 0.00572)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 125.83206295967102
Best over terms:
  Our final objective: 0.005719999999999968
    Its accruacy: 0.50286
    Its hamming distance: 9
  Shortest hamming distance: 5
    Its our objective: 0.0011599999999999944
  Highest accruacy: 0.50286
   dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 124 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 125 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 126 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 127 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 128 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 129 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 130 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 131 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 132 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 133 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 134 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 135 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 136 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 137 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 138 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

