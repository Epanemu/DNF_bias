Command:
python test_script.py -s constant_subclass -d 6 -n 5000 --seed 21 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0172
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 6.

Computed total variation: 0.0968
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:24 PM: Your problem has 2513 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:24 PM: Finished problem compilation (took 1.603e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2513
  constraints   = 5013
  nnz(P)        = 0
  nnz(A)        = 22513
  cones (total) = 1
    : Nonnegative = 1,  numel = 5013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5007e+03  2.50e+03  9.79e-01  6.97e+01  1.00e+00  1.00e+00   ------   
  1  +5.9311e-01  +5.1464e+02  5.14e+02  3.83e-01  4.22e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4182e-01  +6.8293e+01  6.78e+01  1.47e-01  2.04e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.1005e-01  +1.6859e+01  1.63e+01  1.03e-01  1.40e+01  2.85e-05  2.38e-01  1.30e-01  
  4  +5.0023e-01  +9.9770e-01  4.97e-01  4.78e-03  6.66e-01  6.53e-06  1.19e-01  9.90e-01  
  5  +5.0002e-01  +5.7215e-01  7.21e-02  6.84e-04  9.59e-02  1.34e-06  2.42e-02  8.22e-01  
  6  +4.9998e-01  +5.6702e-01  6.70e-02  6.21e-04  8.71e-02  2.88e-06  7.57e-03  7.53e-01  
  7  +4.9773e-01  +5.6429e-01  6.66e-02  6.78e-05  9.58e-03  8.52e-05  2.18e-04  9.80e-01  
  8  +4.9258e-01  +5.3301e-01  4.04e-02  2.07e-05  2.93e-03  1.09e-04  6.72e-05  7.22e-01  
  9  +4.8637e-01  +5.0106e-01  1.47e-02  6.83e-06  9.64e-04  1.83e-05  2.45e-05  7.41e-01  
 10  +4.8239e-01  +4.8432e-01  1.93e-03  7.82e-07  1.10e-04  1.87e-07  3.15e-06  9.77e-01  
 11  +4.8171e-01  +4.8174e-01  2.93e-05  1.17e-08  1.65e-06  2.73e-09  4.80e-08  9.90e-01  
 12  +4.8170e-01  +4.8170e-01  2.93e-07  1.17e-10  1.65e-08  2.73e-11  4.80e-10  9.90e-01  
 13  +4.8170e-01  +4.8170e-01  2.93e-09  1.17e-12  1.65e-10  2.78e-13  4.88e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 35.2657ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:24 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:24 PM: Optimal value: 4.817e-01
(CVXPY) Sep 20 07:35:24 PM: Compilation took 1.603e-02 seconds
(CVXPY) Sep 20 07:35:24 PM: Solver (including time spent in interface) took 3.994e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4817
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:24 PM: Your problem has 2523 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:24 PM: Finished problem compilation (took 1.451e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2523
  constraints   = 5023
  nnz(P)        = 0
  nnz(A)        = 26091
  cones (total) = 1
    : Nonnegative = 1,  numel = 5023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5009e+03  2.50e+03  9.79e-01  7.19e+01  1.00e+00  1.00e+00   ------   
  1  +5.9295e-01  +5.1492e+02  5.14e+02  3.84e-01  4.35e+01  3.92e-03  5.26e-01  6.26e-01  
  2  +5.4159e-01  +6.8057e+01  6.75e+01  1.46e-01  2.09e+01  1.15e-02  2.44e-01  8.28e-01  
  3  +5.0997e-01  +1.6782e+01  1.63e+01  1.03e-01  1.44e+01  2.86e-05  2.38e-01  1.33e-01  
  4  +5.0042e-01  +1.3124e+00  8.12e-01  7.81e-03  1.12e+00  7.08e-06  1.47e-01  7.51e-01  
  5  +5.0010e-01  +7.3104e-01  2.31e-01  2.20e-03  3.17e-01  2.70e-06  6.39e-02  6.10e-01  
  6  +5.0005e-01  +6.4123e-01  1.41e-01  1.34e-03  1.93e-01  2.01e-06  2.84e-02  7.04e-01  
  7  +4.9994e-01  +6.1454e-01  1.15e-01  9.72e-04  1.40e-01  4.73e-06  6.76e-03  8.18e-01  
  8  +4.9687e-01  +5.9459e-01  9.77e-02  8.31e-05  1.21e-02  9.14e-05  2.66e-04  9.63e-01  
  9  +4.9507e-01  +5.8277e-01  8.77e-02  6.14e-05  8.94e-03  9.15e-05  1.97e-04  2.95e-01  
 10  +4.9455e-01  +5.7216e-01  7.76e-02  5.18e-05  7.55e-03  3.70e-05  1.66e-04  5.54e-01  
 11  +4.9300e-01  +5.5952e-01  6.65e-02  4.25e-05  6.19e-03  1.34e-05  1.35e-04  6.36e-01  
 12  +4.9084e-01  +5.4657e-01  5.57e-02  3.24e-05  4.72e-03  9.39e-06  1.03e-04  4.13e-01  
 13  +4.8533e-01  +5.2175e-01  3.64e-02  1.54e-05  2.24e-03  7.58e-06  4.86e-05  5.75e-01  
 14  +4.8264e-01  +5.1200e-01  2.94e-02  1.40e-05  2.04e-03  4.53e-06  4.86e-05  2.84e-02  
 15  +4.7548e-01  +4.8728e-01  1.18e-02  4.09e-06  5.95e-04  2.75e-06  1.34e-05  7.81e-01  
 16  +4.7108e-01  +4.7303e-01  1.95e-03  6.49e-07  9.44e-05  3.97e-07  2.18e-06  8.66e-01  
 17  +4.7023e-01  +4.7029e-01  6.47e-05  2.14e-08  3.11e-06  1.04e-08  7.22e-08  9.90e-01  
 18  +4.7020e-01  +4.7020e-01  6.47e-07  2.14e-10  3.11e-08  1.04e-10  7.22e-10  9.90e-01  
 19  +4.7020e-01  +4.7020e-01  6.48e-09  2.14e-12  3.11e-10  1.04e-12  7.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 54.3661ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:24 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:24 PM: Optimal value: 4.702e-01
(CVXPY) Sep 20 07:35:24 PM: Compilation took 1.451e-02 seconds
(CVXPY) Sep 20 07:35:24 PM: Solver (including time spent in interface) took 5.918e-02 seconds
Iteration: 2, Objective: 0.4702
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:24 PM: Your problem has 2533 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:24 PM: Finished problem compilation (took 1.621e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2533
  constraints   = 5033
  nnz(P)        = 0
  nnz(A)        = 27942
  cones (total) = 1
    : Nonnegative = 1,  numel = 5033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5009e+03  2.50e+03  9.79e-01  7.25e+01  1.00e+00  1.00e+00   ------   
  1  +5.9281e-01  +5.1509e+02  5.14e+02  3.84e-01  4.38e+01  3.92e-03  5.27e-01  6.26e-01  
  2  +5.4145e-01  +6.7928e+01  6.74e+01  1.46e-01  2.10e+01  1.16e-02  2.44e-01  8.29e-01  
  3  +5.0994e-01  +1.6751e+01  1.62e+01  1.03e-01  1.44e+01  2.86e-05  2.38e-01  1.35e-01  
  4  +5.0039e-01  +1.2692e+00  7.69e-01  7.41e-03  1.07e+00  7.06e-06  1.42e-01  7.82e-01  
  5  +5.0008e-01  +7.0392e-01  2.04e-01  1.94e-03  2.82e-01  2.59e-06  5.61e-02  6.47e-01  
  6  +5.0005e-01  +6.6271e-01  1.63e-01  1.54e-03  2.24e-01  2.60e-06  3.13e-02  5.28e-01  
  7  +4.9987e-01  +6.2158e-01  1.22e-01  9.62e-04  1.40e-01  7.11e-06  5.56e-03  8.93e-01  
  8  +4.9764e-01  +6.0793e-01  1.10e-01  1.44e-04  2.11e-02  7.11e-05  4.63e-04  9.19e-01  
  9  +4.9791e-01  +6.0456e-01  1.07e-01  1.28e-04  1.89e-02  4.99e-05  4.06e-04  4.21e-01  
 10  +4.9369e-01  +5.7547e-01  8.18e-02  4.49e-05  6.59e-03  6.81e-05  1.39e-04  8.74e-01  
 11  +4.9238e-01  +5.7077e-01  7.84e-02  4.01e-05  5.90e-03  5.67e-05  1.24e-04  2.47e-01  
 12  +4.9153e-01  +5.6694e-01  7.54e-02  3.92e-05  5.76e-03  4.54e-05  1.22e-04  1.45e-01  
 13  +4.8494e-01  +5.4026e-01  5.53e-02  2.49e-05  3.66e-03  2.71e-05  7.90e-05  4.90e-01  
 14  +4.7501e-01  +5.0029e-01  2.53e-02  1.00e-05  1.47e-03  8.95e-06  3.29e-05  6.75e-01  
 15  +4.7491e-01  +4.9987e-01  2.50e-02  9.90e-06  1.45e-03  8.39e-06  3.25e-05  8.25e-02  
 16  +4.7006e-01  +4.8211e-01  1.21e-02  4.44e-06  6.51e-04  1.86e-06  1.51e-05  8.77e-01  
 17  +4.6601e-01  +4.6775e-01  1.74e-03  6.06e-07  8.89e-05  2.49e-07  2.14e-06  9.27e-01  
 18  +4.6538e-01  +4.6558e-01  1.99e-04  6.89e-08  1.01e-05  2.82e-08  2.44e-07  8.96e-01  
 19  +4.6530e-01  +4.6530e-01  2.38e-06  8.24e-10  1.21e-07  3.33e-10  2.93e-09  9.90e-01  
 20  +4.6530e-01  +4.6530e-01  2.38e-08  8.24e-12  1.21e-09  3.35e-12  2.95e-11  9.90e-01  
 21  +4.6530e-01  +4.6530e-01  2.38e-10  8.25e-14  1.21e-11  3.38e-14  2.97e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 61.2368ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:25 PM: Optimal value: 4.653e-01
(CVXPY) Sep 20 07:35:25 PM: Compilation took 1.621e-02 seconds
(CVXPY) Sep 20 07:35:25 PM: Solver (including time spent in interface) took 6.625e-02 seconds
Iteration: 3, Objective: 0.4653
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:25 PM: Your problem has 2543 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:25 PM: Finished problem compilation (took 1.602e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2543
  constraints   = 5043
  nnz(P)        = 0
  nnz(A)        = 29528
  cones (total) = 1
    : Nonnegative = 1,  numel = 5043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.79e-01  7.28e+01  1.00e+00  1.00e+00   ------   
  1  +5.9261e-01  +5.1533e+02  5.15e+02  3.85e-01  4.40e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4133e-01  +6.7818e+01  6.73e+01  1.46e-01  2.10e+01  1.16e-02  2.44e-01  8.31e-01  
  3  +5.0992e-01  +1.6733e+01  1.62e+01  1.03e-01  1.45e+01  2.87e-05  2.37e-01  1.36e-01  
  4  +5.0050e-01  +1.4391e+00  9.39e-01  9.05e-03  1.31e+00  7.32e-06  1.53e-01  6.89e-01  
  5  +5.0008e-01  +7.1064e-01  2.11e-01  2.01e-03  2.93e-01  2.62e-06  5.74e-02  6.86e-01  
  6  +5.0006e-01  +7.2484e-01  2.25e-01  2.13e-03  3.10e-01  3.36e-06  3.48e-02  5.99e-01  
  7  +4.9982e-01  +6.9264e-01  1.93e-01  1.35e-03  1.97e-01  9.63e-06  6.70e-03  9.11e-01  
  8  +4.9654e-01  +6.5204e-01  1.55e-01  1.55e-04  2.29e-02  8.98e-05  5.19e-04  9.26e-01  
  9  +4.9489e-01  +6.3197e-01  1.37e-01  1.12e-04  1.65e-02  8.15e-05  3.62e-04  4.14e-01  
 10  +4.9441e-01  +6.2463e-01  1.30e-01  8.61e-05  1.27e-02  6.94e-05  2.71e-04  4.64e-01  
 11  +4.9369e-01  +6.1819e-01  1.24e-01  8.51e-05  1.26e-02  6.12e-05  2.71e-04  3.40e-02  
 12  +4.9232e-01  +6.0809e-01  1.16e-01  6.88e-05  1.02e-02  5.21e-05  2.17e-04  3.51e-01  
 13  +4.8919e-01  +5.7752e-01  8.83e-02  4.90e-05  7.23e-03  5.51e-07  1.56e-04  9.45e-01  
 14  +4.8227e-01  +5.4777e-01  6.55e-02  3.00e-05  4.42e-03  9.76e-07  9.70e-05  4.39e-01  
 15  +4.7635e-01  +5.2124e-01  4.49e-02  1.90e-05  2.80e-03  4.65e-06  6.32e-05  9.90e-01  
 16  +4.7211e-01  +5.0494e-01  3.28e-02  1.32e-05  1.94e-03  3.31e-06  4.44e-05  6.66e-01  
 17  +4.6571e-01  +4.8041e-01  1.47e-02  5.58e-06  8.22e-04  1.45e-06  1.94e-05  6.02e-01  
 18  +4.6175e-01  +4.6551e-01  3.76e-03  1.35e-06  1.99e-04  4.57e-07  4.81e-06  9.88e-01  
 19  +4.6040e-01  +4.6089e-01  4.88e-04  1.73e-07  2.55e-05  5.93e-08  6.25e-07  8.75e-01  
 20  +4.6021e-01  +4.6023e-01  2.00e-05  7.06e-09  1.04e-06  2.48e-09  2.56e-08  9.90e-01  
 21  +4.6020e-01  +4.6020e-01  2.00e-07  7.08e-11  1.04e-08  2.49e-11  2.57e-10  9.90e-01  
 22  +4.6020e-01  +4.6020e-01  2.00e-09  7.08e-13  1.04e-10  2.51e-13  2.59e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 68.0476ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:25 PM: Optimal value: 4.602e-01
(CVXPY) Sep 20 07:35:25 PM: Compilation took 1.602e-02 seconds
(CVXPY) Sep 20 07:35:25 PM: Solver (including time spent in interface) took 7.261e-02 seconds
Iteration: 4, Objective: 0.4602
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:25 PM: Your problem has 2553 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:25 PM: Finished problem compilation (took 1.868e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2553
  constraints   = 5053
  nnz(P)        = 0
  nnz(A)        = 31041
  cones (total) = 1
    : Nonnegative = 1,  numel = 5053

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.79e-01  7.32e+01  1.00e+00  1.00e+00   ------   
  1  +5.9252e-01  +5.1545e+02  5.15e+02  3.85e-01  4.42e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4123e-01  +6.7710e+01  6.72e+01  1.46e-01  2.10e+01  1.16e-02  2.43e-01  8.32e-01  
  3  +5.0990e-01  +1.6712e+01  1.62e+01  1.03e-01  1.45e+01  2.88e-05  2.37e-01  1.37e-01  
  4  +5.0052e-01  +1.4798e+00  9.79e-01  9.45e-03  1.37e+00  7.39e-06  1.55e-01  6.71e-01  
  5  +5.0009e-01  +7.3688e-01  2.37e-01  2.26e-03  3.32e-01  2.82e-06  6.24e-02  6.59e-01  
  6  +5.0006e-01  +7.3392e-01  2.34e-01  2.22e-03  3.26e-01  3.48e-06  3.81e-02  5.34e-01  
  7  +5.0002e-01  +7.9046e-01  2.90e-01  2.30e-03  3.39e-01  6.20e-06  1.33e-02  9.90e-01  
  8  +4.9739e-01  +6.9858e-01  2.01e-01  1.94e-04  2.89e-02  7.25e-05  6.43e-04  9.54e-01  
  9  +4.9579e-01  +6.6743e-01  1.72e-01  1.46e-04  2.16e-02  5.74e-05  4.77e-04  3.86e-01  
 10  +4.9363e-01  +6.2220e-01  1.29e-01  9.22e-05  1.37e-02  2.24e-05  2.96e-04  7.50e-01  
 11  +4.9303e-01  +6.1536e-01  1.22e-01  7.43e-05  1.10e-02  1.71e-05  2.35e-04  5.53e-01  
 12  +4.9210e-01  +6.1012e-01  1.18e-01  6.76e-05  1.00e-02  1.58e-05  2.14e-04  2.09e-01  
 13  +4.9019e-01  +5.9806e-01  1.08e-01  6.23e-05  9.25e-03  1.17e-05  2.00e-04  3.07e-01  
 14  +4.8581e-01  +5.7731e-01  9.15e-02  4.69e-05  6.96e-03  1.02e-05  1.53e-04  2.91e-01  
 15  +4.7823e-01  +5.4217e-01  6.39e-02  2.92e-05  4.33e-03  6.52e-06  9.81e-05  4.89e-01  
 16  +4.7286e-01  +5.1558e-01  4.27e-02  1.82e-05  2.70e-03  3.67e-06  6.30e-05  9.90e-01  
 17  +4.6312e-01  +4.7725e-01  1.41e-02  5.59e-06  8.28e-04  1.09e-06  2.04e-05  7.13e-01  
 18  +4.6083e-01  +4.6854e-01  7.71e-03  2.96e-06  4.39e-04  6.61e-07  1.11e-05  5.96e-01  
 19  +4.5843e-01  +4.5952e-01  1.09e-03  4.11e-07  6.08e-05  1.19e-07  1.57e-06  9.90e-01  
 20  +4.5804e-01  +4.5813e-01  9.21e-05  3.47e-08  5.13e-06  1.01e-08  1.34e-07  9.33e-01  
 21  +4.5800e-01  +4.5800e-01  1.00e-06  3.77e-10  5.57e-08  1.10e-10  1.45e-09  9.90e-01  
 22  +4.5800e-01  +4.5800e-01  1.00e-08  3.77e-12  5.57e-10  1.10e-12  1.45e-11  9.90e-01  
 23  +4.5800e-01  +4.5800e-01  1.00e-10  3.77e-14  5.57e-12  1.10e-14  1.46e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.1194ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:25 PM: Optimal value: 4.580e-01
(CVXPY) Sep 20 07:35:25 PM: Compilation took 1.868e-02 seconds
(CVXPY) Sep 20 07:35:25 PM: Solver (including time spent in interface) took 7.613e-02 seconds
Iteration: 5, Objective: 0.4580
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:25 PM: Your problem has 2563 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:25 PM: Finished problem compilation (took 1.704e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2563
  constraints   = 5063
  nnz(P)        = 0
  nnz(A)        = 32238
  cones (total) = 1
    : Nonnegative = 1,  numel = 5063

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5010e+03  2.50e+03  9.79e-01  7.33e+01  1.00e+00  1.00e+00   ------   
  1  +5.9250e-01  +5.1536e+02  5.15e+02  3.85e-01  4.42e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4117e-01  +6.7631e+01  6.71e+01  1.46e-01  2.10e+01  1.16e-02  2.43e-01  8.32e-01  
  3  +5.0988e-01  +1.6692e+01  1.62e+01  1.03e-01  1.45e+01  2.88e-05  2.37e-01  1.38e-01  
  4  +5.0044e-01  +1.3440e+00  8.44e-01  8.15e-03  1.19e+00  7.21e-06  1.46e-01  7.43e-01  
  5  +5.0009e-01  +7.3908e-01  2.39e-01  2.28e-03  3.36e-01  2.95e-06  6.11e-02  6.25e-01  
  6  +5.0006e-01  +7.4130e-01  2.41e-01  2.28e-03  3.36e-01  3.91e-06  3.44e-02  5.97e-01  
  7  +4.9976e-01  +7.4391e-01  2.44e-01  1.44e-03  2.13e-01  1.31e-05  6.24e-03  9.90e-01  
  8  +4.9570e-01  +6.8927e-01  1.94e-01  1.54e-04  2.29e-02  1.13e-04  5.10e-04  9.19e-01  
  9  +4.9418e-01  +6.5300e-01  1.59e-01  1.20e-04  1.79e-02  6.36e-05  3.92e-04  4.55e-01  
 10  +4.9265e-01  +6.3676e-01  1.44e-01  9.42e-05  1.40e-02  5.33e-05  3.03e-04  3.74e-01  
 11  +4.9263e-01  +6.3461e-01  1.42e-01  9.20e-05  1.37e-02  4.93e-05  2.95e-04  9.14e-02  
 12  +4.9313e-01  +6.2676e-01  1.34e-01  8.32e-05  1.24e-02  2.71e-05  2.64e-04  5.02e-01  
 13  +4.8981e-01  +6.0410e-01  1.14e-01  6.20e-05  9.22e-03  1.43e-05  1.99e-04  6.81e-01  
 14  +4.8367e-01  +5.7385e-01  9.02e-02  4.33e-05  6.44e-03  1.11e-05  1.42e-04  3.50e-01  
 15  +4.8061e-01  +5.5752e-01  7.69e-02  3.57e-05  5.31e-03  8.02e-06  1.19e-04  4.54e-01  
 16  +4.7578e-01  +5.3544e-01  5.97e-02  2.63e-05  3.90e-03  5.64e-06  8.93e-05  5.21e-01  
 17  +4.6587e-01  +4.9380e-01  2.79e-02  1.13e-05  1.67e-03  2.40e-06  4.03e-05  7.27e-01  
 18  +4.6081e-01  +4.7373e-01  1.29e-02  5.03e-06  7.46e-04  1.11e-06  1.86e-05  5.89e-01  
 19  +4.6024e-01  +4.7126e-01  1.10e-02  4.25e-06  6.31e-04  1.02e-06  1.58e-05  3.63e-01  
 20  +4.5664e-01  +4.5756e-01  9.20e-04  3.48e-07  5.16e-05  7.83e-08  1.34e-06  9.20e-01  
 21  +4.5630e-01  +4.5631e-01  1.05e-05  3.97e-09  5.88e-07  8.77e-10  1.54e-08  9.89e-01  
 22  +4.5630e-01  +4.5630e-01  1.05e-07  3.98e-11  5.90e-09  8.79e-12  1.54e-10  9.90e-01  
 23  +4.5630e-01  +4.5630e-01  1.05e-09  3.98e-13  5.90e-11  8.85e-14  1.55e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 69.5939ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:25 PM: Optimal value: 4.563e-01
(CVXPY) Sep 20 07:35:25 PM: Compilation took 1.704e-02 seconds
(CVXPY) Sep 20 07:35:25 PM: Solver (including time spent in interface) took 7.537e-02 seconds
Iteration: 6, Objective: 0.4563
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:25 PM: Your problem has 2564 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:25 PM: Finished problem compilation (took 1.801e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2564
  constraints   = 5064
  nnz(P)        = 0
  nnz(A)        = 32343
  cones (total) = 1
    : Nonnegative = 1,  numel = 5064

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5010e+03  2.50e+03  9.79e-01  7.34e+01  1.00e+00  1.00e+00   ------   
  1  +5.9249e-01  +5.1536e+02  5.15e+02  3.85e-01  4.42e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4117e-01  +6.7624e+01  6.71e+01  1.46e-01  2.10e+01  1.16e-02  2.43e-01  8.32e-01  
  3  +5.0988e-01  +1.6689e+01  1.62e+01  1.03e-01  1.45e+01  2.88e-05  2.37e-01  1.38e-01  
  4  +5.0045e-01  +1.3562e+00  8.56e-01  8.27e-03  1.20e+00  7.23e-06  1.47e-01  7.36e-01  
  5  +5.0009e-01  +7.3670e-01  2.37e-01  2.26e-03  3.33e-01  2.92e-06  6.06e-02  6.32e-01  
  6  +5.0006e-01  +7.3308e-01  2.33e-01  2.21e-03  3.25e-01  3.80e-06  3.52e-02  5.43e-01  
  7  +4.9970e-01  +7.5007e-01  2.50e-01  1.41e-03  2.09e-01  1.49e-05  6.00e-03  9.90e-01  
  8  +4.9510e-01  +6.8504e-01  1.90e-01  1.44e-04  2.15e-02  1.25e-04  4.79e-04  9.21e-01  
  9  +4.9375e-01  +6.5708e-01  1.63e-01  1.19e-04  1.77e-02  8.46e-05  3.88e-04  3.55e-01  
 10  +4.9267e-01  +6.4698e-01  1.54e-01  1.01e-04  1.51e-02  7.78e-05  3.26e-04  2.43e-01  
 11  +4.9105e-01  +6.3537e-01  1.44e-01  8.08e-05  1.20e-02  7.37e-05  2.58e-04  2.99e-01  
 12  +4.9133e-01  +6.2974e-01  1.38e-01  7.86e-05  1.17e-02  5.53e-05  2.50e-04  2.09e-01  
 13  +4.8789e-01  +5.9857e-01  1.11e-01  5.35e-05  7.95e-03  1.75e-05  1.72e-04  7.94e-01  
 14  +4.7813e-01  +5.4982e-01  7.17e-02  3.17e-05  4.71e-03  9.87e-06  1.06e-04  4.46e-01  
 15  +4.7472e-01  +5.3409e-01  5.94e-02  2.54e-05  3.77e-03  7.69e-06  8.63e-05  2.86e-01  
 16  +4.6796e-01  +5.0344e-01  3.55e-02  1.44e-05  2.14e-03  3.92e-06  5.08e-05  6.35e-01  
 17  +4.5854e-01  +4.6487e-01  6.32e-03  2.43e-06  3.60e-04  5.66e-07  9.07e-06  8.55e-01  
 18  +4.5747e-01  +4.6069e-01  3.22e-03  1.23e-06  1.82e-04  3.00e-07  4.66e-06  5.72e-01  
 19  +4.5640e-01  +4.5665e-01  2.50e-04  9.46e-08  1.40e-05  2.70e-08  3.66e-07  9.90e-01  
 20  +4.5630e-01  +4.5630e-01  2.54e-06  9.58e-10  1.42e-07  2.73e-10  3.71e-09  9.90e-01  
 21  +4.5630e-01  +4.5630e-01  2.54e-08  9.59e-12  1.42e-09  2.73e-12  3.71e-11  9.90e-01  
 22  +4.5630e-01  +4.5630e-01  2.54e-10  9.59e-14  1.42e-11  2.73e-14  3.72e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 68.8299ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:25 PM: Optimal value: 4.563e-01
(CVXPY) Sep 20 07:35:25 PM: Compilation took 1.801e-02 seconds
(CVXPY) Sep 20 07:35:25 PM: Solver (including time spent in interface) took 7.409e-02 seconds
FULL MODEL:
  Accruacy: 0.5336
  Our objective: 0.06720000000000004

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.0072)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.0068)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.0084)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.0208)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.0044)
 OR (x2 = 1 AND x3 = 0 AND x4 = 0)                                  <-- (term's our objective: 0.0172)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.5308756828308105
Best over terms:
  Our final objective: 0.020799999999999992
    Its accruacy: 0.5104
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.020799999999999992
  Highest accruacy: 0.5104
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

