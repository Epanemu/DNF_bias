Command:
python test_script.py -s constant_subclass -d 9 -n 50000 --seed 43 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.00244
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 9.

Computed total variation: 0.08264
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:02 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:02 PM: Finished problem compilation (took 1.835e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 300019
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8095e-01  +5.4248e+03  5.42e+03  4.36e-01  1.71e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3208e-01  +6.1486e+02  6.14e+02  1.78e-01  8.95e+01  1.62e-02  2.78e-01  9.28e-01  
  3  +5.0908e-01  +1.6055e+02  1.60e+02  1.50e-01  7.61e+01  4.52e-05  2.60e-01  2.60e-01  
  4  +5.0136e-01  +1.7631e+01  1.71e+01  4.71e-02  2.37e+01  5.20e-06  1.97e-01  4.43e-01  
  5  +5.0000e-01  +1.0794e+00  5.79e-01  1.73e-03  9.01e-01  2.21e-05  1.93e-01  2.02e-01  
  6  +5.0000e-01  +7.0209e-01  2.02e-01  6.02e-04  3.15e-01  6.71e-06  7.21e-02  6.76e-01  
  7  +5.0000e-01  +5.8569e-01  8.57e-02  2.55e-04  1.34e-01  2.70e-06  3.12e-02  6.12e-01  
  8  +5.0000e-01  +5.2444e-01  2.44e-02  7.29e-05  3.81e-02  8.28e-07  7.55e-03  8.56e-01  
  9  +5.0000e-01  +5.2819e-01  2.82e-02  8.38e-05  4.38e-02  1.70e-06  3.06e-03  7.44e-01  
 10  +4.9999e-01  +5.2722e-01  2.72e-02  7.43e-05  3.89e-02  5.22e-06  6.83e-04  9.17e-01  
 11  +4.9933e-01  +5.2477e-01  2.54e-02  3.13e-06  1.64e-03  3.05e-04  1.03e-05  9.85e-01  
 12  +4.9884e-01  +5.2236e-01  2.35e-02  1.95e-06  1.02e-03  4.03e-04  6.45e-06  3.89e-01  
 13  +4.9814e-01  +5.1366e-01  1.55e-02  9.91e-07  5.20e-04  1.07e-04  3.37e-06  8.56e-01  
 14  +4.9682e-01  +5.0767e-01  1.08e-02  5.87e-07  3.08e-04  5.52e-05  2.09e-06  5.22e-01  
 15  +4.9650e-01  +5.0630e-01  9.80e-03  5.03e-07  2.64e-04  4.34e-05  1.82e-06  2.35e-01  
 16  +4.9634e-01  +5.0544e-01  9.10e-03  4.48e-07  2.35e-04  1.12e-05  1.63e-06  6.60e-01  
 17  +4.9549e-01  +5.0203e-01  6.54e-03  2.99e-07  1.57e-04  6.59e-06  1.12e-06  4.19e-01  
 18  +4.9508e-01  +5.0030e-01  5.21e-03  2.27e-07  1.19e-04  6.90e-08  8.56e-07  9.44e-01  
 19  +4.9405e-01  +4.9630e-01  2.25e-03  9.29e-08  4.87e-05  2.81e-08  3.64e-07  6.22e-01  
 20  +4.9390e-01  +4.9568e-01  1.78e-03  7.23e-08  3.79e-05  1.78e-08  2.84e-07  9.90e-01  
 21  +4.9330e-01  +4.9340e-01  9.96e-05  3.99e-09  2.09e-06  9.42e-10  1.61e-08  9.60e-01  
 22  +4.9326e-01  +4.9326e-01  1.10e-06  4.39e-11  2.30e-08  1.04e-11  1.77e-10  9.90e-01  
 23  +4.9326e-01  +4.9326e-01  1.10e-08  4.40e-13  2.31e-10  1.19e-13  2.02e-12  9.90e-01  
 24  +4.9326e-01  +4.9326e-01  1.10e-10  4.41e-15  2.31e-12  1.36e-15  2.29e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 735.4466ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:03 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:03 PM: Optimal value: 4.933e-01
(CVXPY) Sep 20 08:04:03 PM: Compilation took 1.835e-01 seconds
(CVXPY) Sep 20 08:04:03 PM: Solver (including time spent in interface) took 7.842e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4933
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:03 PM: Your problem has 25029 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:03 PM: Finished problem compilation (took 1.645e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25029
  constraints   = 50029
  nnz(P)        = 0
  nnz(A)        = 327733
  cones (total) = 1
    : Nonnegative = 1,  numel = 50029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.64e+02  1.00e+00  1.00e+00   ------   
  1  +5.8095e-01  +5.4249e+03  5.42e+03  4.36e-01  1.73e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3207e-01  +6.1477e+02  6.14e+02  1.78e-01  9.05e+01  1.62e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6052e+02  1.60e+02  1.50e-01  7.70e+01  4.52e-05  2.60e-01  2.60e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.40e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.0742e+00  5.74e-01  1.71e-03  9.04e-01  2.21e-05  1.93e-01  2.05e-01  
  6  +5.0000e-01  +6.9989e-01  2.00e-01  5.96e-04  3.15e-01  6.79e-06  7.13e-02  6.79e-01  
  7  +5.0000e-01  +5.8925e-01  8.93e-02  2.66e-04  1.41e-01  2.42e-06  3.10e-02  7.17e-01  
  8  +5.0000e-01  +5.7819e-01  7.82e-02  2.33e-04  1.23e-01  1.90e-06  2.52e-02  3.22e-01  
  9  +5.0000e-01  +5.4317e-01  4.32e-02  1.29e-04  6.81e-02  5.82e-07  1.06e-02  9.21e-01  
 10  +5.0000e-01  +5.2710e-01  2.71e-02  8.06e-05  4.27e-02  7.26e-07  3.28e-03  7.22e-01  
 11  +4.9997e-01  +5.2564e-01  2.57e-02  3.66e-05  1.94e-02  1.25e-05  1.46e-04  9.90e-01  
 12  +4.9933e-01  +5.2348e-01  2.41e-02  1.78e-06  9.45e-04  2.95e-04  5.64e-06  9.61e-01  
 13  +4.9889e-01  +5.2033e-01  2.14e-02  1.49e-06  7.90e-04  2.45e-04  4.77e-06  2.24e-01  
 14  +4.9889e-01  +5.1969e-01  2.08e-02  1.46e-06  7.73e-04  1.92e-04  4.67e-06  1.67e-01  
 15  +4.9874e-01  +5.1840e-01  1.97e-02  1.35e-06  7.17e-04  1.51e-04  4.35e-06  1.95e-01  
 16  +4.9852e-01  +5.1648e-01  1.80e-02  1.24e-06  6.59e-04  8.64e-05  4.04e-06  3.30e-01  
 17  +4.9795e-01  +5.1362e-01  1.57e-02  9.69e-07  5.14e-04  6.92e-05  3.21e-06  2.91e-01  
 18  +4.9789e-01  +5.1319e-01  1.53e-02  9.52e-07  5.05e-04  5.38e-05  3.16e-06  1.68e-01  
 19  +4.9658e-01  +5.0726e-01  1.07e-02  5.45e-07  2.89e-04  3.61e-05  1.88e-06  4.60e-01  
 20  +4.9655e-01  +5.0706e-01  1.05e-02  5.38e-07  2.85e-04  3.01e-05  1.86e-06  1.35e-01  
 21  +4.9646e-01  +5.0641e-01  9.95e-03  4.87e-07  2.58e-04  1.05e-05  1.68e-06  5.95e-01  
 22  +4.9520e-01  +5.0117e-01  5.96e-03  2.65e-07  1.41e-04  5.43e-06  9.51e-07  4.88e-01  
 23  +4.9517e-01  +5.0098e-01  5.81e-03  2.58e-07  1.37e-04  4.14e-06  9.27e-07  2.25e-01  
 24  +4.9369e-01  +4.9492e-01  1.23e-03  5.04e-08  2.67e-05  3.07e-07  1.94e-07  8.85e-01  
 25  +4.9327e-01  +4.9329e-01  2.21e-05  8.86e-10  4.70e-07  3.00e-09  3.57e-09  9.84e-01  
 26  +4.9326e-01  +4.9326e-01  2.21e-07  8.85e-12  4.69e-09  3.00e-11  3.57e-11  9.90e-01  
 27  +4.9326e-01  +4.9326e-01  2.24e-09  8.96e-14  4.76e-11  5.12e-13  5.95e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 862.6773ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:04 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:04 PM: Optimal value: 4.933e-01
(CVXPY) Sep 20 08:04:04 PM: Compilation took 1.645e-01 seconds
(CVXPY) Sep 20 08:04:04 PM: Solver (including time spent in interface) took 9.072e-01 seconds
Iteration: 2, Objective: 0.4933
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:04 PM: Your problem has 25039 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:04 PM: Finished problem compilation (took 1.706e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25039
  constraints   = 50039
  nnz(P)        = 0
  nnz(A)        = 356788
  cones (total) = 1
    : Nonnegative = 1,  numel = 50039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.68e+02  1.00e+00  1.00e+00   ------   
  1  +5.8094e-01  +5.4250e+03  5.42e+03  4.36e-01  1.75e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3206e-01  +6.1470e+02  6.14e+02  1.78e-01  9.18e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6050e+02  1.60e+02  1.50e-01  7.80e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7629e+01  1.71e+01  4.71e-02  2.43e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.0647e+00  5.65e-01  1.68e-03  9.02e-01  2.22e-05  1.93e-01  2.10e-01  
  6  +5.0000e-01  +7.1397e-01  2.14e-01  6.38e-04  3.42e-01  7.69e-06  7.65e-02  6.42e-01  
  7  +5.0000e-01  +5.9994e-01  9.99e-02  2.98e-04  1.60e-01  3.19e-06  3.43e-02  6.63e-01  
  8  +5.0000e-01  +5.9345e-01  9.34e-02  2.79e-04  1.50e-01  2.73e-06  2.94e-02  2.72e-01  
  9  +5.0000e-01  +5.8199e-01  8.20e-02  2.44e-04  1.31e-01  1.69e-06  2.08e-02  6.22e-01  
 10  +5.0000e-01  +5.6246e-01  6.25e-02  1.86e-04  9.99e-02  5.27e-07  9.96e-03  9.90e-01  
 11  +5.0000e-01  +5.3043e-01  3.04e-02  8.72e-05  4.68e-02  1.21e-06  1.12e-03  9.90e-01  
 12  +4.9986e-01  +5.3448e-01  3.46e-02  7.07e-06  3.80e-03  6.36e-05  2.34e-05  9.90e-01  
 13  +4.9936e-01  +5.3189e-01  3.25e-02  1.91e-06  1.03e-03  2.14e-04  6.22e-06  7.49e-01  
 14  +4.9898e-01  +5.2909e-01  3.01e-02  1.86e-06  1.00e-03  1.72e-04  6.03e-06  8.86e-02  
 15  +4.9842e-01  +5.2444e-01  2.60e-02  1.78e-06  9.59e-04  7.78e-05  5.70e-06  3.34e-01  
 16  +4.9830e-01  +5.2318e-01  2.49e-02  1.72e-06  9.25e-04  4.28e-05  5.43e-06  3.68e-01  
 17  +4.9761e-01  +5.1941e-01  2.18e-02  1.34e-06  7.21e-04  3.77e-05  4.18e-06  2.80e-01  
 18  +4.9751e-01  +5.1899e-01  2.15e-02  1.32e-06  7.12e-04  3.13e-05  4.14e-06  1.27e-01  
 19  +4.9634e-01  +5.1325e-01  1.69e-02  8.86e-07  4.77e-04  2.46e-05  2.75e-06  3.96e-01  
 20  +4.9638e-01  +5.1339e-01  1.70e-02  8.71e-07  4.69e-04  2.34e-05  2.70e-06  7.97e-02  
 21  +4.9639e-01  +5.1345e-01  1.71e-02  7.92e-07  4.26e-04  1.36e-05  2.44e-06  4.65e-01  
 22  +4.9617e-01  +5.1266e-01  1.65e-02  7.17e-07  3.86e-04  1.01e-05  2.20e-06  2.99e-01  
 23  +4.9600e-01  +5.1197e-01  1.60e-02  7.13e-07  3.84e-04  8.70e-06  2.20e-06  6.89e-02  
 24  +4.9464e-01  +5.0660e-01  1.20e-02  4.98e-07  2.68e-04  4.77e-06  1.55e-06  4.46e-01  
 25  +4.9426e-01  +5.0437e-01  1.01e-02  3.97e-07  2.14e-04  7.16e-08  1.24e-06  9.07e-01  
 26  +4.9187e-01  +4.9574e-01  3.86e-03  1.37e-07  7.35e-05  3.21e-08  4.36e-07  7.59e-01  
 27  +4.9147e-01  +4.9407e-01  2.60e-03  8.82e-08  4.75e-05  3.60e-08  2.85e-07  9.90e-01  
 28  +4.9067e-01  +4.9143e-01  7.55e-04  2.50e-08  1.34e-05  1.06e-08  8.19e-08  8.65e-01  
 29  +4.9035e-01  +4.9036e-01  1.35e-05  4.43e-10  2.39e-07  1.88e-10  1.46e-09  9.83e-01  
 30  +4.9034e-01  +4.9034e-01  1.35e-07  4.43e-12  2.39e-09  1.88e-12  1.46e-11  9.90e-01  
 31  +4.9034e-01  +4.9034e-01  1.36e-09  4.47e-14  2.40e-11  2.51e-14  1.93e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0645116s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:05 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:05 PM: Optimal value: 4.903e-01
(CVXPY) Sep 20 08:04:05 PM: Compilation took 1.706e-01 seconds
(CVXPY) Sep 20 08:04:05 PM: Solver (including time spent in interface) took 1.109e+00 seconds
Iteration: 3, Objective: 0.4903
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:06 PM: Your problem has 25049 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:06 PM: Finished problem compilation (took 1.873e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25049
  constraints   = 50049
  nnz(P)        = 0
  nnz(A)        = 373847
  cones (total) = 1
    : Nonnegative = 1,  numel = 50049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.69e+02  1.00e+00  1.00e+00   ------   
  1  +5.8094e-01  +5.4251e+03  5.42e+03  4.37e-01  1.76e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3206e-01  +6.1463e+02  6.14e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6047e+02  1.60e+02  1.50e-01  7.84e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7628e+01  1.71e+01  4.71e-02  2.44e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.1281e+00  6.28e-01  1.87e-03  1.01e+00  2.22e-05  1.93e-01  1.90e-01  
  6  +5.0000e-01  +7.2943e-01  2.29e-01  6.84e-04  3.69e-01  7.19e-06  7.79e-02  6.38e-01  
  7  +5.0000e-01  +6.3365e-01  1.34e-01  3.99e-04  2.15e-01  4.01e-06  4.44e-02  5.09e-01  
  8  +5.0000e-01  +5.9873e-01  9.87e-02  2.94e-04  1.59e-01  2.63e-06  2.79e-02  5.54e-01  
  9  +5.0000e-01  +5.7277e-01  7.28e-02  2.17e-04  1.17e-01  1.86e-06  1.42e-02  7.03e-01  
 10  +5.0000e-01  +5.7642e-01  7.64e-02  2.27e-04  1.23e-01  1.03e-06  9.24e-03  8.28e-01  
 11  +5.0000e-01  +5.6885e-01  6.88e-02  2.05e-04  1.10e-01  2.83e-07  7.33e-03  7.13e-01  
 12  +5.0000e-01  +5.4474e-01  4.47e-02  1.02e-04  5.48e-02  1.72e-06  5.78e-04  9.43e-01  
 13  +4.9986e-01  +5.4424e-01  4.44e-02  4.55e-06  2.46e-03  6.53e-05  1.49e-05  9.74e-01  
 14  +4.9955e-01  +5.4100e-01  4.15e-02  2.87e-06  1.55e-03  8.12e-05  9.34e-06  4.75e-01  
 15  +4.9877e-01  +5.3460e-01  3.58e-02  2.75e-06  1.49e-03  4.95e-05  8.96e-06  1.77e-01  
 16  +4.9854e-01  +5.3259e-01  3.40e-02  2.66e-06  1.44e-03  3.44e-05  8.63e-06  2.34e-01  
 17  +4.9804e-01  +5.2848e-01  3.04e-02  2.36e-06  1.28e-03  1.62e-05  7.63e-06  4.44e-01  
 18  +4.9802e-01  +5.2807e-01  3.00e-02  2.31e-06  1.25e-03  1.23e-05  7.41e-06  2.18e-01  
 19  +4.9723e-01  +5.2340e-01  2.62e-02  1.72e-06  9.33e-04  1.00e-05  5.48e-06  3.71e-01  
 20  +4.9729e-01  +5.2387e-01  2.66e-02  1.66e-06  9.00e-04  8.89e-06  5.26e-06  1.78e-01  
 21  +4.9721e-01  +5.2341e-01  2.62e-02  1.63e-06  8.82e-04  6.64e-06  5.13e-06  2.21e-01  
 22  +4.9624e-01  +5.1884e-01  2.26e-02  1.18e-06  6.40e-04  5.38e-06  3.69e-06  3.98e-01  
 23  +4.9600e-01  +5.1808e-01  2.21e-02  1.17e-06  6.34e-04  5.04e-06  3.69e-06  1.63e-02  
 24  +4.9368e-01  +5.0778e-01  1.41e-02  6.16e-07  3.33e-04  3.16e-06  1.94e-06  5.33e-01  
 25  +4.9351e-01  +5.0667e-01  1.32e-02  5.63e-07  3.04e-04  2.09e-06  1.77e-06  3.33e-01  
 26  +4.9305e-01  +5.0392e-01  1.09e-02  4.46e-07  2.41e-04  2.17e-08  1.41e-06  9.50e-01  
 27  +4.9164e-01  +4.9851e-01  6.87e-03  2.71e-07  1.46e-04  2.26e-08  8.65e-07  4.67e-01  
 28  +4.9062e-01  +4.9449e-01  3.87e-03  1.46e-07  7.90e-05  4.80e-08  4.72e-07  9.90e-01  
 29  +4.8974e-01  +4.9123e-01  1.48e-03  5.49e-08  2.97e-05  1.84e-08  1.80e-07  6.90e-01  
 30  +4.8944e-01  +4.9010e-01  6.59e-04  2.37e-08  1.28e-05  8.75e-09  7.79e-08  8.17e-01  
 31  +4.8921e-01  +4.8931e-01  1.05e-04  3.53e-09  1.91e-06  1.59e-09  1.19e-08  9.43e-01  
 32  +4.8917e-01  +4.8918e-01  1.57e-05  5.28e-10  2.85e-07  2.22e-10  1.78e-09  9.84e-01  
 33  +4.8916e-01  +4.8916e-01  1.62e-07  5.42e-12  2.93e-09  2.28e-12  1.83e-11  9.90e-01  
 34  +4.8916e-01  +4.8916e-01  1.62e-09  5.42e-14  2.93e-11  2.28e-14  1.83e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3949579s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:07 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:07 PM: Optimal value: 4.892e-01
(CVXPY) Sep 20 08:04:07 PM: Compilation took 1.873e-01 seconds
(CVXPY) Sep 20 08:04:07 PM: Solver (including time spent in interface) took 1.445e+00 seconds
Iteration: 4, Objective: 0.4892
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:08 PM: Your problem has 25059 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:08 PM: Finished problem compilation (took 3.228e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25059
  constraints   = 50059
  nnz(P)        = 0
  nnz(A)        = 392673
  cones (total) = 1
    : Nonnegative = 1,  numel = 50059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4253e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3205e-01  +6.1453e+02  6.14e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6045e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.46e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.1657e+00  6.66e-01  1.99e-03  1.07e+00  2.22e-05  1.93e-01  1.79e-01  
  6  +5.0000e-01  +7.2360e-01  2.24e-01  6.67e-04  3.62e-01  6.56e-06  7.47e-02  6.42e-01  
  7  +5.0000e-01  +6.3824e-01  1.38e-01  4.12e-04  2.24e-01  3.50e-06  4.37e-02  5.87e-01  
  8  +5.0000e-01  +6.1670e-01  1.17e-01  3.48e-04  1.89e-01  2.65e-06  3.26e-02  4.23e-01  
  9  +5.0000e-01  +6.0238e-01  1.02e-01  3.05e-04  1.66e-01  1.70e-06  2.25e-02  6.26e-01  
 10  +5.0000e-01  +5.7502e-01  7.50e-02  2.23e-04  1.21e-01  1.53e-06  1.10e-02  6.11e-01  
 11  +4.9999e-01  +5.3817e-01  3.82e-02  1.05e-04  5.69e-02  5.15e-06  9.84e-04  9.90e-01  
 12  +4.9949e-01  +5.3740e-01  3.79e-02  6.39e-06  3.47e-03  2.34e-04  2.08e-05  9.80e-01  
 13  +4.9901e-01  +5.3521e-01  3.62e-02  3.74e-06  2.04e-03  3.44e-04  1.21e-05  4.71e-01  
 14  +4.9893e-01  +5.3479e-01  3.59e-02  3.51e-06  1.91e-03  3.05e-04  1.13e-05  1.99e-01  
 15  +4.9888e-01  +5.3440e-01  3.55e-02  3.37e-06  1.83e-03  2.28e-04  1.08e-05  2.81e-01  
 16  +4.9853e-01  +5.3248e-01  3.40e-02  2.79e-06  1.52e-03  2.00e-04  8.86e-06  3.36e-01  
 17  +4.9844e-01  +5.3199e-01  3.35e-02  2.62e-06  1.42e-03  9.45e-05  8.25e-06  5.23e-01  
 18  +4.9825e-01  +5.3124e-01  3.30e-02  2.43e-06  1.32e-03  5.28e-05  7.68e-06  4.43e-01  
 19  +4.9813e-01  +5.3097e-01  3.28e-02  2.33e-06  1.27e-03  3.53e-05  7.35e-06  3.31e-01  
 20  +4.9758e-01  +5.2846e-01  3.09e-02  1.95e-06  1.06e-03  3.01e-05  6.17e-06  2.89e-01  
 21  +4.9672e-01  +5.2434e-01  2.76e-02  1.61e-06  8.75e-04  1.54e-05  5.08e-06  4.92e-01  
 22  +4.9663e-01  +5.2401e-01  2.74e-02  1.61e-06  8.73e-04  1.46e-05  5.08e-06  3.37e-02  
 23  +4.9459e-01  +5.1523e-01  2.06e-02  1.04e-06  5.66e-04  7.91e-06  3.31e-06  5.35e-01  
 24  +4.9308e-01  +5.0866e-01  1.56e-02  7.08e-07  3.85e-04  8.72e-08  2.27e-06  8.99e-01  
 25  +4.9155e-01  +5.0259e-01  1.10e-02  4.59e-07  2.50e-04  1.12e-07  1.49e-06  9.90e-01  
 26  +4.8888e-01  +4.9226e-01  3.38e-03  1.29e-07  7.04e-05  3.36e-08  4.31e-07  7.65e-01  
 27  +4.8782e-01  +4.8843e-01  6.06e-04  2.19e-08  1.19e-05  6.77e-09  7.57e-08  9.13e-01  
 28  +4.8770e-01  +4.8803e-01  3.32e-04  1.18e-08  6.40e-06  4.24e-09  4.13e-08  9.90e-01  
 29  +4.8757e-01  +4.8758e-01  1.66e-05  5.85e-10  3.18e-07  2.13e-10  2.07e-09  9.56e-01  
 30  +4.8756e-01  +4.8756e-01  1.68e-07  5.89e-12  3.20e-09  2.15e-12  2.09e-11  9.90e-01  
 31  +4.8756e-01  +4.8756e-01  1.69e-09  5.94e-14  3.23e-11  2.16e-14  2.08e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3602553s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:11 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:11 PM: Optimal value: 4.876e-01
(CVXPY) Sep 20 08:04:11 PM: Compilation took 3.228e-01 seconds
(CVXPY) Sep 20 08:04:11 PM: Solver (including time spent in interface) took 2.454e+00 seconds
Iteration: 5, Objective: 0.4876
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:11 PM: Your problem has 25069 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:11 PM: Finished problem compilation (took 2.976e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25069
  constraints   = 50069
  nnz(P)        = 0
  nnz(A)        = 403739
  cones (total) = 1
    : Nonnegative = 1,  numel = 50069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8092e-01  +5.4255e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3204e-01  +6.1444e+02  6.14e+02  1.78e-01  9.28e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6042e+02  1.60e+02  1.50e-01  7.89e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.71e-02  2.46e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0001e-01  +1.1811e+00  6.81e-01  2.03e-03  1.10e+00  2.22e-05  1.93e-01  1.76e-01  
  6  +5.0001e-01  +7.8358e-01  2.84e-01  8.46e-04  4.59e-01  7.71e-06  8.93e-02  6.52e-01  
  7  +5.0000e-01  +6.3908e-01  1.39e-01  4.15e-04  2.25e-01  2.94e-06  4.30e-02  7.44e-01  
  8  +5.0000e-01  +6.0004e-01  1.00e-01  2.98e-04  1.62e-01  2.09e-06  2.65e-02  5.08e-01  
  9  +5.0000e-01  +6.0510e-01  1.05e-01  3.13e-04  1.70e-01  1.59e-06  2.30e-02  4.57e-01  
 10  +5.0000e-01  +5.8513e-01  8.51e-02  2.54e-04  1.38e-01  1.58e-06  1.37e-02  4.42e-01  
 11  +5.0000e-01  +5.7348e-01  7.35e-02  2.18e-04  1.18e-01  2.06e-06  6.51e-03  5.87e-01  
 12  +4.9997e-01  +5.4528e-01  4.53e-02  8.07e-05  4.39e-02  1.73e-05  3.62e-04  9.73e-01  
 13  +4.9888e-01  +5.4143e-01  4.25e-02  3.57e-06  1.95e-03  5.00e-04  1.14e-05  9.69e-01  
 14  +4.9855e-01  +5.3883e-01  4.03e-02  3.12e-06  1.70e-03  4.28e-04  9.97e-06  2.58e-01  
 15  +4.9853e-01  +5.3807e-01  3.95e-02  3.03e-06  1.65e-03  3.38e-04  9.64e-06  2.08e-01  
 16  +4.9845e-01  +5.3642e-01  3.80e-02  2.87e-06  1.56e-03  1.81e-04  9.11e-06  4.28e-01  
 17  +4.9840e-01  +5.3597e-01  3.76e-02  2.82e-06  1.53e-03  1.55e-04  8.94e-06  1.35e-01  
 18  +4.9783e-01  +5.3324e-01  3.54e-02  2.33e-06  1.27e-03  1.43e-04  7.41e-06  2.62e-01  
 19  +4.9767e-01  +5.3224e-01  3.46e-02  2.24e-06  1.22e-03  1.04e-04  7.12e-06  2.52e-01  
 20  +4.9722e-01  +5.2954e-01  3.23e-02  2.07e-06  1.13e-03  3.86e-05  6.59e-06  5.29e-01  
 21  +4.9649e-01  +5.2633e-01  2.98e-02  1.76e-06  9.61e-04  2.32e-05  5.61e-06  4.27e-01  
 22  +4.9642e-01  +5.2609e-01  2.97e-02  1.75e-06  9.53e-04  2.13e-05  5.57e-06  6.52e-02  
 23  +4.9487e-01  +5.1950e-01  2.46e-02  1.29e-06  7.04e-04  1.67e-05  4.14e-06  3.24e-01  
 24  +4.9241e-01  +5.0912e-01  1.67e-02  7.70e-07  4.19e-04  4.01e-06  2.50e-06  7.28e-01  
 25  +4.9001e-01  +4.9946e-01  9.46e-03  3.89e-07  2.12e-04  7.70e-07  1.29e-06  7.97e-01  
 26  +4.8889e-01  +4.9525e-01  6.36e-03  2.51e-07  1.37e-04  4.82e-07  8.49e-07  3.88e-01  
 27  +4.8873e-01  +4.9452e-01  5.79e-03  2.24e-07  1.22e-04  1.96e-07  7.61e-07  6.80e-01  
 28  +4.8708e-01  +4.8849e-01  1.42e-03  5.22e-08  2.84e-05  4.19e-08  1.85e-07  7.95e-01  
 29  +4.8654e-01  +4.8658e-01  3.93e-05  1.42e-09  7.73e-07  6.68e-10  5.16e-09  9.90e-01  
 30  +4.8652e-01  +4.8652e-01  3.95e-07  1.42e-11  7.76e-09  6.71e-12  5.18e-11  9.90e-01  
 31  +4.8652e-01  +4.8652e-01  3.95e-09  1.42e-13  7.76e-11  6.71e-14  5.18e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.2850008s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:14 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:14 PM: Optimal value: 4.865e-01
(CVXPY) Sep 20 08:04:14 PM: Compilation took 2.976e-01 seconds
(CVXPY) Sep 20 08:04:14 PM: Solver (including time spent in interface) took 2.366e+00 seconds
Iteration: 6, Objective: 0.4865
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:14 PM: Your problem has 25079 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:14 PM: Finished problem compilation (took 3.237e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25079
  constraints   = 50079
  nnz(P)        = 0
  nnz(A)        = 416332
  cones (total) = 1
    : Nonnegative = 1,  numel = 50079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8091e-01  +5.4256e+03  5.42e+03  4.37e-01  1.78e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3203e-01  +6.1438e+02  6.14e+02  1.78e-01  9.30e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6040e+02  1.60e+02  1.50e-01  7.91e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7634e+01  1.71e+01  4.71e-02  2.47e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0001e-01  +1.1823e+00  6.82e-01  2.04e-03  1.11e+00  2.22e-05  1.93e-01  1.76e-01  
  6  +5.0001e-01  +7.7478e-01  2.75e-01  8.20e-04  4.46e-01  7.56e-06  8.71e-02  6.45e-01  
  7  +5.0001e-01  +6.8797e-01  1.88e-01  5.61e-04  3.05e-01  4.05e-06  5.62e-02  6.26e-01  
  8  +5.0000e-01  +5.8925e-01  8.92e-02  2.66e-04  1.45e-01  2.17e-06  2.44e-02  6.16e-01  
  9  +5.0000e-01  +5.8335e-01  8.33e-02  2.49e-04  1.35e-01  2.12e-06  1.71e-02  4.19e-01  
 10  +5.0000e-01  +5.8865e-01  8.86e-02  2.64e-04  1.44e-01  1.22e-06  9.01e-03  9.78e-01  
 11  +5.0000e-01  +5.5304e-01  5.30e-02  1.40e-04  7.62e-02  3.62e-06  1.07e-03  9.90e-01  
 12  +4.9974e-01  +5.5186e-01  5.21e-02  9.74e-06  5.32e-03  1.18e-04  3.13e-05  9.71e-01  
 13  +4.9911e-01  +5.4619e-01  4.71e-02  3.31e-06  1.81e-03  2.72e-04  1.05e-05  7.51e-01  
 14  +4.9862e-01  +5.4217e-01  4.35e-02  3.05e-06  1.66e-03  2.14e-04  9.62e-06  1.95e-01  
 15  +4.9855e-01  +5.4144e-01  4.29e-02  3.03e-06  1.66e-03  1.95e-04  9.57e-06  5.98e-02  
 16  +4.9798e-01  +5.3795e-01  4.00e-02  2.56e-06  1.40e-03  1.63e-04  8.09e-06  2.78e-01  
 17  +4.9771e-01  +5.3565e-01  3.79e-02  2.36e-06  1.29e-03  7.58e-05  7.43e-06  4.90e-01  
 18  +4.9755e-01  +5.3476e-01  3.72e-02  2.32e-06  1.27e-03  6.36e-05  7.31e-06  1.25e-01  
 19  +4.9665e-01  +5.3012e-01  3.35e-02  1.99e-06  1.09e-03  3.37e-05  6.31e-06  4.34e-01  
 20  +4.9479e-01  +5.2181e-01  2.70e-02  1.41e-06  7.72e-04  2.35e-05  4.52e-06  3.97e-01  
 21  +4.9299e-01  +5.1366e-01  2.07e-02  1.00e-06  5.47e-04  9.90e-06  3.24e-06  5.45e-01  
 22  +4.9282e-01  +5.1251e-01  1.97e-02  9.31e-07  5.08e-04  4.67e-06  3.02e-06  4.82e-01  
 23  +4.8946e-01  +4.9854e-01  9.08e-03  3.89e-07  2.12e-04  1.68e-06  1.29e-06  6.36e-01  
 24  +4.8866e-01  +4.9527e-01  6.61e-03  2.74e-07  1.50e-04  9.89e-07  9.16e-07  4.27e-01  
 25  +4.8854e-01  +4.9469e-01  6.15e-03  2.49e-07  1.36e-04  4.12e-07  8.35e-07  6.30e-01  
 26  +4.8823e-01  +4.9346e-01  5.22e-03  2.10e-07  1.15e-04  3.08e-07  7.08e-07  2.75e-01  
 27  +4.8697e-01  +4.8852e-01  1.55e-03  6.08e-08  3.32e-05  1.99e-08  2.10e-07  9.90e-01  
 28  +4.8644e-01  +4.8652e-01  8.18e-05  3.18e-09  1.74e-06  9.70e-10  1.12e-08  9.55e-01  
 29  +4.8641e-01  +4.8641e-01  1.40e-06  5.43e-11  2.97e-08  1.59e-11  1.93e-10  9.83e-01  
 30  +4.8641e-01  +4.8641e-01  1.41e-08  5.50e-13  3.00e-10  1.59e-13  1.93e-12  9.90e-01  
 31  +4.8641e-01  +4.8641e-01  4.23e-10  1.65e-14  8.98e-12  1.52e-15  2.02e-14  9.69e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.1217593s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:16 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:16 PM: Optimal value: 4.864e-01
(CVXPY) Sep 20 08:04:16 PM: Compilation took 3.237e-01 seconds
(CVXPY) Sep 20 08:04:16 PM: Solver (including time spent in interface) took 2.200e+00 seconds
Iteration: 7, Objective: 0.4864
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:17 PM: Your problem has 25089 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:17 PM: Finished problem compilation (took 2.903e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25089
  constraints   = 50089
  nnz(P)        = 0
  nnz(A)        = 423925
  cones (total) = 1
    : Nonnegative = 1,  numel = 50089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8090e-01  +5.4259e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3202e-01  +6.1426e+02  6.14e+02  1.78e-01  9.31e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6037e+02  1.60e+02  1.50e-01  7.91e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7638e+01  1.71e+01  4.71e-02  2.47e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0001e-01  +1.1876e+00  6.88e-01  2.05e-03  1.12e+00  2.22e-05  1.93e-01  1.75e-01  
  6  +5.0001e-01  +8.3276e-01  3.33e-01  9.93e-04  5.41e-01  8.83e-06  1.00e-01  6.52e-01  
  7  +5.0001e-01  +6.9457e-01  1.95e-01  5.81e-04  3.16e-01  3.46e-06  5.58e-02  8.17e-01  
  8  +5.0001e-01  +6.3147e-01  1.31e-01  3.92e-04  2.14e-01  2.22e-06  3.44e-02  5.27e-01  
  9  +5.0001e-01  +6.0741e-01  1.07e-01  3.20e-04  1.75e-01  1.47e-06  2.11e-02  6.64e-01  
 10  +5.0000e-01  +5.7464e-01  7.46e-02  2.22e-04  1.21e-01  1.24e-06  7.21e-03  8.89e-01  
 11  +4.9999e-01  +5.5697e-01  5.70e-02  1.24e-04  6.77e-02  7.76e-06  6.53e-04  9.60e-01  
 12  +4.9938e-01  +5.5434e-01  5.50e-02  5.38e-06  2.94e-03  2.79e-04  1.71e-05  9.74e-01  
 13  +4.9910e-01  +5.5192e-01  5.28e-02  4.48e-06  2.45e-03  2.91e-04  1.42e-05  2.14e-01  
 14  +4.9907e-01  +5.5083e-01  5.18e-02  4.45e-06  2.43e-03  2.59e-04  1.41e-05  8.03e-02  
 15  +4.9858e-01  +5.4701e-01  4.84e-02  3.64e-06  1.99e-03  2.48e-04  1.15e-05  2.61e-01  
 16  +4.9854e-01  +5.4497e-01  4.64e-02  3.52e-06  1.93e-03  1.71e-04  1.11e-05  2.58e-01  
 17  +4.9829e-01  +5.4189e-01  4.36e-02  3.17e-06  1.73e-03  1.04e-04  1.00e-05  3.94e-01  
 18  +4.9818e-01  +5.4059e-01  4.24e-02  3.11e-06  1.70e-03  7.80e-05  9.80e-06  2.04e-01  
 19  +4.9763e-01  +5.3777e-01  4.01e-02  2.67e-06  1.46e-03  7.17e-05  8.41e-06  2.18e-01  
 20  +4.9722e-01  +5.3478e-01  3.76e-02  2.48e-06  1.35e-03  2.94e-05  7.84e-06  4.93e-01  
 21  +4.9720e-01  +5.3470e-01  3.75e-02  2.47e-06  1.35e-03  2.89e-05  7.83e-06  1.31e-02  
 22  +4.9548e-01  +5.2690e-01  3.14e-02  1.78e-06  9.75e-04  1.41e-05  5.69e-06  5.81e-01  
 23  +4.9404e-01  +5.2035e-01  2.63e-02  1.39e-06  7.60e-04  6.85e-06  4.47e-06  4.91e-01  
 24  +4.9337e-01  +5.1702e-01  2.36e-02  1.20e-06  6.54e-04  1.59e-06  3.86e-06  6.82e-01  
 25  +4.9038e-01  +5.0438e-01  1.40e-02  6.38e-07  3.49e-04  5.85e-07  2.09e-06  6.44e-01  
 26  +4.8891e-01  +4.9819e-01  9.28e-03  4.06e-07  2.22e-04  3.51e-07  1.34e-06  4.24e-01  
 27  +4.8766e-01  +4.9277e-01  5.11e-03  2.10e-07  1.15e-04  5.56e-08  6.97e-07  9.90e-01  
 28  +4.8650e-01  +4.8806e-01  1.56e-03  6.34e-08  3.47e-05  1.70e-08  2.13e-07  7.25e-01  
 29  +4.8609e-01  +4.8645e-01  3.57e-04  1.43e-08  7.83e-06  4.15e-09  4.89e-08  9.82e-01  
 30  +4.8600e-01  +4.8609e-01  9.12e-05  3.60e-09  1.97e-06  1.06e-09  1.26e-08  7.88e-01  
 31  +4.8596e-01  +4.8597e-01  6.51e-06  2.46e-10  1.35e-07  1.10e-10  1.31e-09  9.90e-01  
 32  +4.8596e-01  +4.8596e-01  9.14e-08  3.39e-12  1.85e-09  5.16e-12  4.33e-11  9.90e-01  
 33  +4.8596e-01  +4.8596e-01  9.21e-10  3.41e-14  1.87e-11  6.17e-14  5.14e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3849434s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:20 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:20 PM: Optimal value: 4.860e-01
(CVXPY) Sep 20 08:04:20 PM: Compilation took 2.903e-01 seconds
(CVXPY) Sep 20 08:04:20 PM: Solver (including time spent in interface) took 2.455e+00 seconds
Iteration: 8, Objective: 0.4860
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:20 PM: Your problem has 25099 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:20 PM: Finished problem compilation (took 3.640e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25099
  constraints   = 50099
  nnz(P)        = 0
  nnz(A)        = 433487
  cones (total) = 1
    : Nonnegative = 1,  numel = 50099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8089e-01  +5.4260e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3201e-01  +6.1417e+02  6.14e+02  1.78e-01  9.32e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6035e+02  1.60e+02  1.50e-01  7.92e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7640e+01  1.71e+01  4.71e-02  2.47e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0001e-01  +1.1902e+00  6.90e-01  2.06e-03  1.12e+00  2.23e-05  1.93e-01  1.75e-01  
  6  +5.0001e-01  +8.7002e-01  3.70e-01  1.10e-03  6.02e-01  9.60e-06  1.08e-01  6.62e-01  
  7  +5.0001e-01  +7.2323e-01  2.23e-01  6.66e-04  3.63e-01  3.96e-06  6.26e-02  8.08e-01  
  8  +5.0000e-01  +6.1472e-01  1.15e-01  3.42e-04  1.87e-01  1.94e-06  2.96e-02  6.92e-01  
  9  +5.0000e-01  +6.0806e-01  1.08e-01  3.22e-04  1.76e-01  1.74e-06  2.23e-02  4.06e-01  
 10  +5.0000e-01  +5.8336e-01  8.34e-02  2.48e-04  1.35e-01  1.88e-06  9.43e-03  6.99e-01  
 11  +4.9998e-01  +5.5473e-01  5.48e-02  1.21e-04  6.60e-02  1.29e-05  6.56e-04  9.68e-01  
 12  +4.9922e-01  +5.5204e-01  5.28e-02  6.99e-06  3.83e-03  3.52e-04  2.26e-05  9.66e-01  
 13  +4.9857e-01  +5.4806e-01  4.95e-02  4.30e-06  2.35e-03  4.47e-04  1.37e-05  4.89e-01  
 14  +4.9849e-01  +5.4694e-01  4.85e-02  4.03e-06  2.21e-03  3.80e-04  1.28e-05  2.10e-01  
 15  +4.9825e-01  +5.4487e-01  4.66e-02  3.60e-06  1.97e-03  2.96e-04  1.14e-05  3.14e-01  
 16  +4.9812e-01  +5.4365e-01  4.55e-02  3.31e-06  1.81e-03  2.17e-04  1.05e-05  3.27e-01  
 17  +4.9785e-01  +5.4186e-01  4.40e-02  3.13e-06  1.71e-03  1.34e-04  9.93e-06  3.56e-01  
 18  +4.9625e-01  +5.3434e-01  3.81e-02  2.23e-06  1.22e-03  1.18e-04  7.08e-06  3.76e-01  
 19  +4.9399e-01  +5.2422e-01  3.02e-02  1.59e-06  8.68e-04  8.13e-05  5.10e-06  3.76e-01  
 20  +4.9234e-01  +5.1617e-01  2.38e-02  1.19e-06  6.49e-04  8.51e-07  3.85e-06  8.43e-01  
 21  +4.8926e-01  +5.0310e-01  1.38e-02  6.14e-07  3.36e-04  5.56e-08  2.02e-06  9.90e-01  
 22  +4.8740e-01  +4.9536e-01  7.96e-03  3.30e-07  1.81e-04  7.11e-08  1.10e-06  8.53e-01  
 23  +4.8637e-01  +4.9125e-01  4.88e-03  1.96e-07  1.07e-04  4.72e-08  6.58e-07  5.57e-01  
 24  +4.8637e-01  +4.9125e-01  4.88e-03  1.96e-07  1.07e-04  4.74e-08  6.57e-07  1.62e-02  
 25  +4.8626e-01  +4.9084e-01  4.58e-03  1.81e-07  9.93e-05  4.87e-08  6.11e-07  4.60e-01  
 26  +4.8594e-01  +4.8960e-01  3.67e-03  1.43e-07  7.83e-05  4.00e-08  4.86e-07  3.60e-01  
 27  +4.8582e-01  +4.8914e-01  3.32e-03  1.28e-07  7.01e-05  3.94e-08  4.37e-07  8.95e-01  
 28  +4.8500e-01  +4.8609e-01  1.09e-03  4.05e-08  2.22e-05  1.30e-08  1.43e-07  7.07e-01  
 29  +4.8466e-01  +4.8485e-01  1.91e-04  6.97e-09  3.81e-06  2.32e-09  2.52e-08  9.89e-01  
 30  +4.8458e-01  +4.8458e-01  3.16e-06  1.14e-10  6.26e-08  3.80e-11  4.16e-10  9.84e-01  
 31  +4.8458e-01  +4.8458e-01  3.16e-08  1.14e-12  6.26e-10  3.81e-13  4.16e-12  9.90e-01  
 32  +4.8458e-01  +4.8458e-01  3.22e-10  1.16e-14  6.38e-12  7.59e-15  7.99e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.6995567s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:23 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:23 PM: Optimal value: 4.846e-01
(CVXPY) Sep 20 08:04:23 PM: Compilation took 3.640e-01 seconds
(CVXPY) Sep 20 08:04:23 PM: Solver (including time spent in interface) took 2.788e+00 seconds
Iteration: 9, Objective: 0.4846
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:23 PM: Your problem has 25109 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:24 PM: Finished problem compilation (took 3.421e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25109
  constraints   = 50109
  nnz(P)        = 0
  nnz(A)        = 442056
  cones (total) = 1
    : Nonnegative = 1,  numel = 50109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8089e-01  +5.4260e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3200e-01  +6.1415e+02  6.14e+02  1.78e-01  9.32e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0906e-01  +1.6034e+02  1.60e+02  1.50e-01  7.93e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7639e+01  1.71e+01  4.71e-02  2.47e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0001e-01  +1.1932e+00  6.93e-01  2.07e-03  1.13e+00  2.23e-05  1.93e-01  1.74e-01  
  6  +5.0001e-01  +8.4874e-01  3.49e-01  1.04e-03  5.68e-01  9.12e-06  1.03e-01  6.59e-01  
  7  +5.0001e-01  +6.9070e-01  1.91e-01  5.69e-04  3.11e-01  2.95e-06  5.29e-02  9.27e-01  
  8  +5.0001e-01  +6.2431e-01  1.24e-01  3.71e-04  2.03e-01  2.05e-06  3.08e-02  4.97e-01  
  9  +5.0000e-01  +5.9962e-01  9.96e-02  2.97e-04  1.62e-01  1.70e-06  1.63e-02  6.67e-01  
 10  +5.0000e-01  +5.9415e-01  9.41e-02  2.80e-04  1.53e-01  1.85e-06  1.01e-02  5.06e-01  
 11  +5.0000e-01  +5.6995e-01  7.00e-02  1.91e-04  1.04e-01  4.74e-06  1.68e-03  9.90e-01  
 12  +4.9946e-01  +5.6506e-01  6.56e-02  8.98e-06  4.92e-03  2.46e-04  2.88e-05  9.84e-01  
 13  +4.9889e-01  +5.5982e-01  6.09e-02  5.29e-06  2.90e-03  3.43e-04  1.68e-05  4.70e-01  
 14  +4.9863e-01  +5.5575e-01  5.71e-02  4.68e-06  2.57e-03  2.80e-04  1.48e-05  2.59e-01  
 15  +4.9862e-01  +5.5319e-01  5.46e-02  4.49e-06  2.46e-03  1.99e-04  1.42e-05  2.52e-01  
 16  +4.9810e-01  +5.4936e-01  5.13e-02  3.64e-06  2.00e-03  1.80e-04  1.15e-05  3.13e-01  
 17  +4.9808e-01  +5.4912e-01  5.10e-02  3.64e-06  1.99e-03  1.76e-04  1.15e-05  1.59e-02  
 18  +4.9774e-01  +5.4698e-01  4.92e-02  3.29e-06  1.80e-03  1.60e-04  1.04e-05  1.78e-01  
 19  +4.9732e-01  +5.4357e-01  4.62e-02  3.08e-06  1.69e-03  1.02e-04  9.77e-06  3.05e-01  
 20  +4.9549e-01  +5.3448e-01  3.90e-02  2.23e-06  1.22e-03  7.88e-05  7.12e-06  3.86e-01  
 21  +4.9383e-01  +5.2541e-01  3.16e-02  1.72e-06  9.43e-04  1.44e-05  5.55e-06  6.91e-01  
 22  +4.9080e-01  +5.1207e-01  2.13e-02  1.02e-06  5.59e-04  6.00e-06  3.33e-06  6.01e-01  
 23  +4.9051e-01  +5.1054e-01  2.00e-02  9.24e-07  5.06e-04  2.92e-06  3.02e-06  5.02e-01  
 24  +4.8804e-01  +5.0017e-01  1.21e-02  5.21e-07  2.85e-04  1.03e-06  1.72e-06  6.51e-01  
 25  +4.8637e-01  +4.9326e-01  6.89e-03  2.82e-07  1.55e-04  3.14e-07  9.41e-07  7.30e-01  
 26  +4.8495e-01  +4.8748e-01  2.53e-03  1.01e-07  5.51e-05  3.58e-08  3.40e-07  9.69e-01  
 27  +4.8443e-01  +4.8542e-01  9.95e-04  3.91e-08  2.14e-05  1.35e-08  1.34e-07  7.12e-01  
 28  +4.8412e-01  +4.8434e-01  2.17e-04  8.06e-09  4.42e-06  2.68e-09  2.92e-08  9.63e-01  
 29  +4.8404e-01  +4.8405e-01  4.10e-06  1.50e-10  8.22e-08  5.04e-11  5.51e-10  9.82e-01  
 30  +4.8404e-01  +4.8404e-01  4.10e-08  1.50e-12  8.21e-10  5.05e-13  5.52e-12  9.90e-01  
 31  +4.8404e-01  +4.8404e-01  4.32e-10  1.58e-14  8.66e-12  1.94e-14  1.91e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.5169385s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:26 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:26 PM: Optimal value: 4.840e-01
(CVXPY) Sep 20 08:04:26 PM: Compilation took 3.421e-01 seconds
(CVXPY) Sep 20 08:04:26 PM: Solver (including time spent in interface) took 2.597e+00 seconds
Iteration: 10, Objective: 0.4840
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:27 PM: Your problem has 25119 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:27 PM: Finished problem compilation (took 3.439e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25119
  constraints   = 50119
  nnz(P)        = 0
  nnz(A)        = 448715
  cones (total) = 1
    : Nonnegative = 1,  numel = 50119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8089e-01  +5.4260e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3200e-01  +6.1410e+02  6.14e+02  1.78e-01  9.33e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0906e-01  +1.6032e+02  1.60e+02  1.50e-01  7.93e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7639e+01  1.71e+01  4.71e-02  2.48e+01  5.20e-06  1.96e-01  4.44e-01  
  5  +5.0000e-01  +1.1618e+00  6.62e-01  1.98e-03  1.08e+00  2.23e-05  1.93e-01  1.83e-01  
  6  +5.0001e-01  +8.5681e-01  3.57e-01  1.07e-03  5.82e-01  9.70e-06  1.06e-01  6.65e-01  
  7  +5.0001e-01  +7.0861e-01  2.09e-01  6.23e-04  3.40e-01  3.58e-06  5.77e-02  8.72e-01  
  8  +5.0000e-01  +6.1522e-01  1.15e-01  3.44e-04  1.88e-01  2.04e-06  2.82e-02  6.42e-01  
  9  +5.0000e-01  +6.0026e-01  1.00e-01  2.99e-04  1.63e-01  1.97e-06  1.64e-02  5.67e-01  
 10  +5.0000e-01  +5.7633e-01  7.63e-02  2.22e-04  1.22e-01  3.65e-06  3.51e-03  9.59e-01  
 11  +4.9992e-01  +5.7045e-01  7.05e-02  7.44e-05  4.07e-02  3.80e-05  2.76e-04  9.45e-01  
 12  +4.9894e-01  +5.6555e-01  6.66e-02  6.57e-06  3.61e-03  4.57e-04  2.12e-05  9.23e-01  
 13  +4.9841e-01  +5.5853e-01  6.01e-02  5.12e-06  2.81e-03  4.05e-04  1.64e-05  3.45e-01  
 14  +4.9836e-01  +5.5513e-01  5.68e-02  4.50e-06  2.47e-03  2.89e-04  1.43e-05  3.66e-01  
 15  +4.9814e-01  +5.5236e-01  5.42e-02  3.91e-06  2.14e-03  2.35e-04  1.24e-05  3.10e-01  
 16  +4.9806e-01  +5.5134e-01  5.33e-02  3.84e-06  2.11e-03  2.10e-04  1.22e-05  9.38e-02  
 17  +4.9764e-01  +5.4858e-01  5.09e-02  3.44e-06  1.89e-03  1.83e-04  1.09e-05  2.06e-01  
 18  +4.9673e-01  +5.4250e-01  4.58e-02  2.92e-06  1.60e-03  1.11e-04  9.32e-06  4.01e-01  
 19  +4.9461e-01  +5.3162e-01  3.70e-02  2.08e-06  1.14e-03  6.09e-05  6.70e-06  5.07e-01  
 20  +4.9300e-01  +5.2403e-01  3.10e-02  1.63e-06  8.95e-04  3.93e-05  5.30e-06  3.59e-01  
 21  +4.9242e-01  +5.2100e-01  2.86e-02  1.46e-06  8.02e-04  2.45e-05  4.75e-06  3.45e-01  
 22  +4.8951e-01  +5.0824e-01  1.87e-02  8.69e-07  4.76e-04  1.17e-05  2.86e-06  5.31e-01  
 23  +4.8789e-01  +5.0129e-01  1.34e-02  5.85e-07  3.21e-04  6.35e-06  1.94e-06  4.76e-01  
 24  +4.8776e-01  +5.0059e-01  1.28e-02  5.50e-07  3.02e-04  4.20e-06  1.83e-06  3.45e-01  
 25  +4.8668e-01  +4.9614e-01  9.46e-03  3.95e-07  2.16e-04  2.79e-06  1.32e-06  3.46e-01  
 26  +4.8589e-01  +4.9275e-01  6.86e-03  2.76e-07  1.51e-04  6.65e-07  9.28e-07  7.83e-01  
 27  +4.8524e-01  +4.9019e-01  4.95e-03  1.96e-07  1.07e-04  4.62e-07  6.65e-07  3.15e-01  
 28  +4.8442e-01  +4.8703e-01  2.61e-03  1.00e-07  5.49e-05  2.22e-07  3.46e-07  5.36e-01  
 29  +4.8426e-01  +4.8641e-01  2.15e-03  8.17e-08  4.48e-05  1.21e-07  2.84e-07  5.01e-01  
 30  +4.8373e-01  +4.8447e-01  7.38e-04  2.72e-08  1.49e-05  2.09e-08  9.73e-08  8.72e-01  
 31  +4.8345e-01  +4.8349e-01  3.41e-05  1.24e-09  6.78e-07  5.17e-10  4.50e-09  9.90e-01  
 32  +4.8344e-01  +4.8344e-01  3.45e-07  1.25e-11  6.85e-09  5.22e-12  4.56e-11  9.90e-01  
 33  +4.8344e-01  +4.8344e-01  3.45e-09  1.25e-13  6.85e-11  5.22e-14  4.56e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7095711s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:30 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:30 PM: Optimal value: 4.834e-01
(CVXPY) Sep 20 08:04:30 PM: Compilation took 3.439e-01 seconds
(CVXPY) Sep 20 08:04:30 PM: Solver (including time spent in interface) took 2.790e+00 seconds
Iteration: 11, Objective: 0.4834
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:30 PM: Your problem has 25129 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:31 PM: Finished problem compilation (took 3.553e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25129
  constraints   = 50129
  nnz(P)        = 0
  nnz(A)        = 455772
  cones (total) = 1
    : Nonnegative = 1,  numel = 50129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8087e-01  +5.4263e+03  5.43e+03  4.37e-01  1.78e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3198e-01  +6.1393e+02  6.13e+02  1.78e-01  9.33e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6028e+02  1.60e+02  1.50e-01  7.93e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7643e+01  1.71e+01  4.71e-02  2.48e+01  5.20e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2375e+00  7.38e-01  2.20e-03  1.20e+00  2.23e-05  1.93e-01  1.65e-01  
  6  +5.0001e-01  +8.6204e-01  3.62e-01  1.08e-03  5.91e-01  9.50e-06  1.06e-01  5.77e-01  
  7  +5.0001e-01  +7.1374e-01  2.14e-01  6.38e-04  3.49e-01  4.20e-06  5.99e-02  7.55e-01  
  8  +5.0001e-01  +6.4638e-01  1.46e-01  4.37e-04  2.39e-01  2.59e-06  3.53e-02  6.20e-01  
  9  +5.0001e-01  +6.3178e-01  1.32e-01  3.93e-04  2.15e-01  2.10e-06  2.43e-02  5.28e-01  
 10  +5.0000e-01  +5.8090e-01  8.09e-02  2.40e-04  1.31e-01  2.79e-06  6.60e-03  7.86e-01  
 11  +4.9999e-01  +5.7687e-01  7.69e-02  2.03e-04  1.11e-01  7.00e-06  1.56e-03  9.90e-01  
 12  +4.9934e-01  +5.7273e-01  7.34e-02  1.04e-05  5.70e-03  2.98e-04  3.35e-05  9.79e-01  
 13  +4.9902e-01  +5.6546e-01  6.64e-02  7.06e-06  3.88e-03  2.89e-04  2.27e-05  4.98e-01  
 14  +4.9901e-01  +5.6512e-01  6.61e-02  7.06e-06  3.88e-03  2.81e-04  2.26e-05  1.56e-02  
 15  +4.9887e-01  +5.6135e-01  6.25e-02  6.18e-06  3.39e-03  2.30e-04  1.97e-05  3.00e-01  
 16  +4.9874e-01  +5.5907e-01  6.03e-02  5.59e-06  3.07e-03  1.94e-04  1.78e-05  2.47e-01  
 17  +4.9836e-01  +5.5637e-01  5.80e-02  4.67e-06  2.56e-03  1.91e-04  1.48e-05  2.50e-01  
 18  +4.9835e-01  +5.5561e-01  5.73e-02  4.62e-06  2.54e-03  1.65e-04  1.47e-05  1.18e-01  
 19  +4.9785e-01  +5.5206e-01  5.42e-02  3.88e-06  2.13e-03  1.31e-04  1.23e-05  3.61e-01  
 20  +4.9751e-01  +5.4900e-01  5.15e-02  3.59e-06  1.97e-03  7.30e-05  1.14e-05  4.11e-01  
 21  +4.9638e-01  +5.4325e-01  4.69e-02  2.93e-06  1.61e-03  5.57e-05  9.36e-06  3.44e-01  
 22  +4.9401e-01  +5.3081e-01  3.68e-02  2.12e-06  1.16e-03  5.97e-07  6.86e-06  8.57e-01  
 23  +4.9197e-01  +5.2197e-01  3.00e-02  1.57e-06  8.63e-04  3.79e-07  5.13e-06  5.11e-01  
 24  +4.8975e-01  +5.1233e-01  2.26e-02  1.05e-06  5.78e-04  1.65e-07  3.47e-06  9.90e-01  
 25  +4.8645e-01  +4.9876e-01  1.23e-02  5.24e-07  2.87e-04  9.99e-08  1.76e-06  7.01e-01  
 26  +4.8582e-01  +4.9633e-01  1.05e-02  4.32e-07  2.37e-04  9.43e-08  1.46e-06  4.09e-01  
 27  +4.8458e-01  +4.9156e-01  6.99e-03  2.77e-07  1.52e-04  6.44e-08  9.49e-07  4.18e-01  
 28  +4.8317e-01  +4.8624e-01  3.07e-03  1.16e-07  6.37e-05  3.09e-08  4.08e-07  7.25e-01  
 29  +4.8232e-01  +4.8311e-01  7.84e-04  2.89e-08  1.59e-05  8.10e-09  1.04e-07  7.97e-01  
 30  +4.8210e-01  +4.8228e-01  1.83e-04  6.69e-09  3.67e-06  2.19e-09  2.44e-08  9.90e-01  
 31  +4.8202e-01  +4.8203e-01  7.35e-06  2.68e-10  1.47e-07  8.80e-11  9.83e-10  9.90e-01  
 32  +4.8202e-01  +4.8202e-01  7.37e-08  2.68e-12  1.47e-09  8.82e-13  9.85e-12  9.90e-01  
 33  +4.8202e-01  +4.8202e-01  7.44e-10  2.71e-14  1.49e-11  1.32e-14  1.45e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8497313s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:34 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:34 PM: Optimal value: 4.820e-01
(CVXPY) Sep 20 08:04:34 PM: Compilation took 3.553e-01 seconds
(CVXPY) Sep 20 08:04:34 PM: Solver (including time spent in interface) took 2.926e+00 seconds
Iteration: 12, Objective: 0.4820
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:34 PM: Your problem has 25139 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:34 PM: Finished problem compilation (took 3.668e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25139
  constraints   = 50139
  nnz(P)        = 0
  nnz(A)        = 464911
  cones (total) = 1
    : Nonnegative = 1,  numel = 50139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.74e+02  1.00e+00  1.00e+00   ------   
  1  +5.8087e-01  +5.4263e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3198e-01  +6.1389e+02  6.13e+02  1.78e-01  9.34e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6026e+02  1.60e+02  1.50e-01  7.94e+01  4.53e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7643e+01  1.71e+01  4.71e-02  2.48e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0000e-01  +1.1540e+00  6.54e-01  1.95e-03  1.07e+00  2.24e-05  1.93e-01  1.87e-01  
  6  +5.0001e-01  +8.0140e-01  3.01e-01  9.00e-04  4.93e-01  8.66e-06  9.30e-02  6.62e-01  
  7  +5.0000e-01  +6.9082e-01  1.91e-01  5.70e-04  3.12e-01  4.71e-06  5.47e-02  6.18e-01  
  8  +5.0000e-01  +6.4054e-01  1.41e-01  4.20e-04  2.30e-01  2.98e-06  3.16e-02  6.78e-01  
  9  +5.0000e-01  +6.0280e-01  1.03e-01  3.07e-04  1.68e-01  2.92e-06  1.41e-02  6.58e-01  
 10  +4.9999e-01  +5.8596e-01  8.60e-02  2.48e-04  1.36e-01  7.57e-06  3.30e-03  8.06e-01  
 11  +4.9963e-01  +5.6960e-01  7.00e-02  3.17e-05  1.74e-02  1.72e-04  1.06e-04  9.90e-01  
 12  +4.9855e-01  +5.6363e-01  6.51e-02  8.46e-06  4.65e-03  5.78e-04  2.71e-05  7.68e-01  
 13  +4.9859e-01  +5.6292e-01  6.43e-02  8.31e-06  4.57e-03  5.34e-04  2.66e-05  8.83e-02  
 14  +4.9839e-01  +5.6039e-01  6.20e-02  6.66e-06  3.66e-03  4.98e-04  2.12e-05  3.68e-01  
 15  +4.9846e-01  +5.5949e-01  6.10e-02  6.49e-06  3.57e-03  4.21e-04  2.06e-05  1.60e-01  
 16  +4.9820e-01  +5.5772e-01  5.95e-02  5.49e-06  3.02e-03  4.11e-04  1.74e-05  2.61e-01  
 17  +4.9821e-01  +5.5676e-01  5.85e-02  5.35e-06  2.94e-03  3.37e-04  1.70e-05  1.81e-01  
 18  +4.9743e-01  +5.5210e-01  5.47e-02  4.07e-06  2.24e-03  2.93e-04  1.29e-05  4.21e-01  
 19  +4.9715e-01  +5.5038e-01  5.32e-02  3.78e-06  2.08e-03  2.53e-04  1.20e-05  1.90e-01  
 20  +4.9627e-01  +5.4451e-01  4.82e-02  3.20e-06  1.76e-03  9.04e-05  1.02e-05  6.11e-01  
 21  +4.9439e-01  +5.3594e-01  4.16e-02  2.44e-06  1.34e-03  6.84e-05  7.85e-06  3.52e-01  
 22  +4.9199e-01  +5.2504e-01  3.30e-02  1.77e-06  9.71e-04  3.16e-05  5.75e-06  5.24e-01  
 23  +4.9029e-01  +5.1733e-01  2.70e-02  1.34e-06  7.34e-04  6.94e-06  4.38e-06  7.12e-01  
 24  +4.8736e-01  +5.0497e-01  1.76e-02  7.97e-07  4.38e-04  2.70e-06  2.65e-06  6.08e-01  
 25  +4.8688e-01  +5.0302e-01  1.61e-02  7.17e-07  3.94e-04  2.21e-06  2.39e-06  1.95e-01  
 26  +4.8391e-01  +4.9091e-01  7.00e-03  2.86e-07  1.57e-04  5.35e-07  9.77e-07  7.75e-01  
 27  +4.8336e-01  +4.8878e-01  5.41e-03  2.16e-07  1.19e-04  3.24e-07  7.45e-07  4.31e-01  
 28  +4.8223e-01  +4.8443e-01  2.19e-03  8.40e-08  4.62e-05  5.49e-08  2.96e-07  8.93e-01  
 29  +4.8164e-01  +4.8230e-01  6.63e-04  2.44e-08  1.34e-05  8.17e-09  8.86e-08  9.90e-01  
 30  +4.8141e-01  +4.8147e-01  6.74e-05  2.46e-09  1.35e-06  8.17e-10  9.02e-09  9.47e-01  
 31  +4.8138e-01  +4.8139e-01  6.57e-06  2.40e-10  1.32e-07  7.88e-11  8.80e-10  9.90e-01  
 32  +4.8138e-01  +4.8138e-01  6.59e-08  2.40e-12  1.32e-09  7.90e-13  8.83e-12  9.90e-01  
 33  +4.8138e-01  +4.8138e-01  6.70e-10  2.44e-14  1.34e-11  1.45e-14  1.56e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8266065s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:37 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:37 PM: Optimal value: 4.814e-01
(CVXPY) Sep 20 08:04:37 PM: Compilation took 3.668e-01 seconds
(CVXPY) Sep 20 08:04:37 PM: Solver (including time spent in interface) took 2.912e+00 seconds
Iteration: 13, Objective: 0.4814
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:38 PM: Your problem has 25149 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:38 PM: Finished problem compilation (took 3.883e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25149
  constraints   = 50149
  nnz(P)        = 0
  nnz(A)        = 471320
  cones (total) = 1
    : Nonnegative = 1,  numel = 50149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.74e+02  1.00e+00  1.00e+00   ------   
  1  +5.8086e-01  +5.4263e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3197e-01  +6.1382e+02  6.13e+02  1.78e-01  9.34e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6024e+02  1.60e+02  1.50e-01  7.94e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7642e+01  1.71e+01  4.71e-02  2.48e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2571e+00  7.57e-01  2.26e-03  1.24e+00  2.23e-05  1.93e-01  1.62e-01  
  6  +5.0001e-01  +8.2127e-01  3.21e-01  9.59e-04  5.26e-01  8.16e-06  9.47e-02  6.17e-01  
  7  +5.0001e-01  +6.9506e-01  1.95e-01  5.82e-04  3.19e-01  4.16e-06  5.40e-02  6.74e-01  
  8  +5.0000e-01  +6.3544e-01  1.35e-01  4.04e-04  2.22e-01  2.76e-06  2.93e-02  6.62e-01  
  9  +5.0000e-01  +6.1181e-01  1.12e-01  3.33e-04  1.83e-01  2.97e-06  1.53e-02  5.64e-01  
 10  +4.9999e-01  +5.8110e-01  8.11e-02  2.25e-04  1.24e-01  9.06e-06  2.19e-03  9.71e-01  
 11  +4.9906e-01  +5.7533e-01  7.63e-02  1.29e-05  7.09e-03  4.27e-04  4.13e-05  9.82e-01  
 12  +4.9875e-01  +5.7237e-01  7.36e-02  9.75e-06  5.37e-03  4.88e-04  3.11e-05  3.07e-01  
 13  +4.9878e-01  +5.6893e-01  7.02e-02  8.26e-06  4.54e-03  3.96e-04  2.63e-05  3.70e-01  
 14  +4.9910e-01  +5.6399e-01  6.49e-02  7.50e-06  4.13e-03  1.58e-04  2.37e-05  5.98e-01  
 15  +4.9888e-01  +5.6237e-01  6.35e-02  6.36e-06  3.50e-03  1.56e-04  2.01e-05  2.61e-01  
 16  +4.9884e-01  +5.6069e-01  6.18e-02  5.90e-06  3.25e-03  9.55e-05  1.86e-05  4.28e-01  
 17  +4.9849e-01  +5.5878e-01  6.03e-02  5.05e-06  2.78e-03  9.10e-05  1.59e-05  2.60e-01  
 18  +4.9802e-01  +5.5590e-01  5.79e-02  4.45e-06  2.45e-03  6.39e-05  1.41e-05  3.87e-01  
 19  +4.9736e-01  +5.5226e-01  5.49e-02  4.00e-06  2.20e-03  3.76e-05  1.27e-05  4.26e-01  
 20  +4.9439e-01  +5.3886e-01  4.45e-02  2.49e-06  1.37e-03  2.70e-05  8.01e-06  5.58e-01  
 21  +4.9211e-01  +5.2879e-01  3.67e-02  1.94e-06  1.06e-03  1.78e-05  6.30e-06  3.35e-01  
 22  +4.9093e-01  +5.2376e-01  3.28e-02  1.68e-06  9.21e-04  1.15e-05  5.50e-06  3.28e-01  
 23  +4.8835e-01  +5.1289e-01  2.45e-02  1.16e-06  6.37e-04  4.83e-06  3.86e-06  5.59e-01  
 24  +4.8664e-01  +5.0569e-01  1.90e-02  8.44e-07  4.64e-04  1.57e-06  2.85e-06  6.69e-01  
 25  +4.8588e-01  +5.0250e-01  1.66e-02  7.12e-07  3.92e-04  7.45e-07  2.41e-06  5.71e-01  
 26  +4.8336e-01  +4.9233e-01  8.97e-03  3.70e-07  2.03e-04  3.27e-07  1.28e-06  5.80e-01  
 27  +4.8142e-01  +4.8461e-01  3.19e-03  1.26e-07  6.92e-05  3.59e-08  4.53e-07  9.90e-01  
 28  +4.8093e-01  +4.8276e-01  1.83e-03  7.14e-08  3.92e-05  2.08e-08  2.64e-07  9.90e-01  
 29  +4.8031e-01  +4.8050e-01  1.89e-04  7.21e-09  3.96e-06  2.09e-09  2.75e-08  9.50e-01  
 30  +4.8024e-01  +4.8024e-01  2.31e-06  8.78e-11  4.83e-08  2.54e-11  3.37e-10  9.88e-01  
 31  +4.8024e-01  +4.8024e-01  2.31e-08  8.78e-13  4.83e-10  2.54e-13  3.37e-12  9.90e-01  
 32  +4.8024e-01  +4.8024e-01  2.33e-10  8.87e-15  4.88e-12  3.86e-15  5.02e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.6963973s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:41 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:41 PM: Optimal value: 4.802e-01
(CVXPY) Sep 20 08:04:41 PM: Compilation took 3.883e-01 seconds
(CVXPY) Sep 20 08:04:41 PM: Solver (including time spent in interface) took 2.779e+00 seconds
Iteration: 14, Objective: 0.4802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:41 PM: Your problem has 25159 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:42 PM: Finished problem compilation (took 4.315e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25159
  constraints   = 50159
  nnz(P)        = 0
  nnz(A)        = 478715
  cones (total) = 1
    : Nonnegative = 1,  numel = 50159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.74e+02  1.00e+00  1.00e+00   ------   
  1  +5.8086e-01  +5.4263e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3197e-01  +6.1379e+02  6.13e+02  1.78e-01  9.35e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6023e+02  1.60e+02  1.50e-01  7.95e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7642e+01  1.71e+01  4.71e-02  2.48e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2606e+00  7.61e-01  2.27e-03  1.24e+00  2.24e-05  1.93e-01  1.62e-01  
  6  +5.0001e-01  +7.6078e-01  2.61e-01  7.79e-04  4.27e-01  6.32e-06  7.85e-02  7.01e-01  
  7  +5.0001e-01  +6.9180e-01  1.92e-01  5.73e-04  3.14e-01  4.38e-06  5.27e-02  4.86e-01  
  8  +5.0000e-01  +6.4235e-01  1.42e-01  4.25e-04  2.33e-01  3.39e-06  3.11e-02  5.40e-01  
  9  +5.0000e-01  +6.1676e-01  1.17e-01  3.48e-04  1.91e-01  3.65e-06  1.56e-02  5.95e-01  
 10  +4.9998e-01  +5.8295e-01  8.30e-02  2.24e-04  1.23e-01  1.30e-05  1.90e-03  9.89e-01  
 11  +4.9916e-01  +5.7860e-01  7.94e-02  1.82e-05  1.00e-02  3.82e-04  5.92e-05  9.70e-01  
 12  +4.9845e-01  +5.7039e-01  7.19e-02  9.11e-06  5.02e-03  5.40e-04  2.92e-05  6.50e-01  
 13  +4.9852e-01  +5.7026e-01  7.17e-02  9.00e-06  4.95e-03  5.08e-04  2.88e-05  7.50e-02  
 14  +4.9851e-01  +5.6813e-01  6.96e-02  7.69e-06  4.23e-03  4.23e-04  2.45e-05  3.64e-01  
 15  +4.9873e-01  +5.6502e-01  6.63e-02  6.81e-06  3.75e-03  2.06e-04  2.15e-05  5.78e-01  
 16  +4.9868e-01  +5.6411e-01  6.54e-02  6.48e-06  3.57e-03  1.69e-04  2.04e-05  2.27e-01  
 17  +4.9807e-01  +5.6033e-01  6.23e-02  4.86e-06  2.68e-03  1.38e-04  1.54e-05  5.16e-01  
 18  +4.9796e-01  +5.5983e-01  6.19e-02  4.85e-06  2.67e-03  1.31e-04  1.53e-05  3.78e-02  
 19  +4.9672e-01  +5.5390e-01  5.72e-02  3.75e-06  2.06e-03  1.31e-04  1.19e-05  2.79e-01  
 20  +4.9550e-01  +5.4754e-01  5.20e-02  3.32e-06  1.83e-03  5.86e-05  1.06e-05  4.77e-01  
 21  +4.9361e-01  +5.3898e-01  4.54e-02  2.63e-06  1.45e-03  4.87e-05  8.50e-06  2.59e-01  
 22  +4.9360e-01  +5.3892e-01  4.53e-02  2.63e-06  1.45e-03  4.80e-05  8.50e-06  1.12e-02  
 23  +4.9165e-01  +5.3008e-01  3.84e-02  2.09e-06  1.15e-03  2.87e-05  6.82e-06  3.91e-01  
 24  +4.8969e-01  +5.2142e-01  3.17e-02  1.62e-06  8.91e-04  1.48e-05  5.34e-06  4.64e-01  
 25  +4.8494e-01  +5.0091e-01  1.60e-02  7.21e-07  3.97e-04  4.28e-06  2.44e-06  7.01e-01  
 26  +4.8480e-01  +5.0022e-01  1.54e-02  6.88e-07  3.79e-04  3.40e-06  2.33e-06  2.18e-01  
 27  +4.8370e-01  +4.9555e-01  1.19e-02  5.09e-07  2.80e-04  1.63e-06  1.73e-06  5.42e-01  
 28  +4.8365e-01  +4.9532e-01  1.17e-02  5.00e-07  2.75e-04  1.33e-06  1.70e-06  1.95e-01  
 29  +4.8330e-01  +4.9380e-01  1.05e-02  4.41e-07  2.42e-04  6.12e-07  1.50e-06  6.01e-01  
 30  +4.8317e-01  +4.9323e-01  1.01e-02  4.21e-07  2.32e-04  4.95e-07  1.44e-06  2.31e-01  
 31  +4.8206e-01  +4.8869e-01  6.62e-03  2.75e-07  1.51e-04  3.06e-07  9.47e-07  3.92e-01  
 32  +4.8089e-01  +4.8384e-01  2.95e-03  1.21e-07  6.64e-05  3.70e-08  4.20e-07  9.90e-01  
 33  +4.8023e-01  +4.8118e-01  9.50e-04  3.86e-08  2.12e-05  1.18e-08  1.35e-07  7.39e-01  
 34  +4.8015e-01  +4.8088e-01  7.27e-04  2.93e-08  1.61e-05  8.73e-09  1.03e-07  5.17e-01  
 35  +4.8011e-01  +4.8072e-01  6.06e-04  2.45e-08  1.35e-05  6.88e-09  8.60e-08  8.37e-01  
 36  +4.7999e-01  +4.8022e-01  2.31e-04  9.27e-09  5.10e-06  2.64e-09  3.27e-08  6.57e-01  
 37  +4.7992e-01  +4.7997e-01  4.79e-05  1.91e-09  1.05e-06  5.42e-10  6.76e-09  9.90e-01  
 38  +4.7991e-01  +4.7991e-01  6.61e-07  2.64e-11  1.45e-08  7.46e-12  9.34e-11  9.87e-01  
 39  +4.7991e-01  +4.7991e-01  6.62e-09  2.64e-13  1.45e-10  7.47e-14  9.34e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.33125s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:45 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:45 PM: Optimal value: 4.799e-01
(CVXPY) Sep 20 08:04:45 PM: Compilation took 4.315e-01 seconds
(CVXPY) Sep 20 08:04:45 PM: Solver (including time spent in interface) took 3.421e+00 seconds
Iteration: 15, Objective: 0.4799
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:46 PM: Your problem has 25169 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:46 PM: Finished problem compilation (took 4.058e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25169
  constraints   = 50169
  nnz(P)        = 0
  nnz(A)        = 486760
  cones (total) = 1
    : Nonnegative = 1,  numel = 50169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.74e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4263e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3196e-01  +6.1370e+02  6.13e+02  1.78e-01  9.35e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6021e+02  1.60e+02  1.50e-01  7.95e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7641e+01  1.71e+01  4.71e-02  2.49e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2321e+00  7.32e-01  2.19e-03  1.20e+00  2.24e-05  1.93e-01  1.69e-01  
  6  +5.0001e-01  +7.6050e-01  2.60e-01  7.78e-04  4.27e-01  6.53e-06  7.87e-02  7.13e-01  
  7  +5.0001e-01  +6.9009e-01  1.90e-01  5.68e-04  3.12e-01  4.61e-06  5.24e-02  4.66e-01  
  8  +5.0000e-01  +6.3690e-01  1.37e-01  4.09e-04  2.24e-01  3.75e-06  2.99e-02  5.08e-01  
  9  +5.0000e-01  +6.1662e-01  1.17e-01  3.48e-04  1.91e-01  4.39e-06  1.44e-02  6.26e-01  
 10  +4.9998e-01  +6.0154e-01  1.02e-01  2.87e-04  1.58e-01  1.29e-05  3.19e-03  8.22e-01  
 11  +4.9935e-01  +5.8600e-01  8.67e-02  3.19e-05  1.76e-02  3.00e-04  1.06e-04  9.81e-01  
 12  +4.9860e-01  +5.7616e-01  7.76e-02  1.29e-05  7.13e-03  5.40e-04  4.20e-05  7.38e-01  
 13  +4.9879e-01  +5.7495e-01  7.62e-02  1.25e-05  6.88e-03  4.41e-04  4.03e-05  2.10e-01  
 14  +4.9843e-01  +5.7275e-01  7.43e-02  9.71e-06  5.35e-03  5.05e-04  3.13e-05  2.75e-01  
 15  +4.9855e-01  +5.7003e-01  7.15e-02  8.50e-06  4.68e-03  3.56e-04  2.72e-05  4.25e-01  
 16  +4.9834e-01  +5.6809e-01  6.98e-02  7.25e-06  3.99e-03  3.36e-04  2.31e-05  2.81e-01  
 17  +4.9798e-01  +5.6414e-01  6.62e-02  5.73e-06  3.16e-03  2.32e-04  1.83e-05  5.39e-01  
 18  +4.9777e-01  +5.6248e-01  6.47e-02  5.37e-06  2.96e-03  1.78e-04  1.71e-05  2.74e-01  
 19  +4.9743e-01  +5.5994e-01  6.25e-02  4.93e-06  2.72e-03  1.12e-04  1.57e-05  3.93e-01  
 20  +4.9625e-01  +5.5447e-01  5.82e-02  3.98e-06  2.19e-03  1.13e-04  1.28e-05  2.11e-01  
 21  +4.9567e-01  +5.5131e-01  5.56e-02  3.74e-06  2.06e-03  7.31e-05  1.20e-05  3.11e-01  
 22  +4.9231e-01  +5.3597e-01  4.37e-02  2.42e-06  1.33e-03  5.82e-05  7.92e-06  4.00e-01  
 23  +4.9027e-01  +5.2671e-01  3.64e-02  1.91e-06  1.05e-03  3.95e-05  6.31e-06  3.23e-01  
 24  +4.8831e-01  +5.1787e-01  2.96e-02  1.46e-06  8.01e-04  1.59e-05  4.86e-06  5.59e-01  
 25  +4.8811e-01  +5.1696e-01  2.88e-02  1.41e-06  7.74e-04  1.31e-05  4.70e-06  1.69e-01  
 26  +4.8764e-01  +5.1473e-01  2.71e-02  1.27e-06  6.98e-04  3.57e-06  4.25e-06  6.86e-01  
 27  +4.8394e-01  +4.9895e-01  1.50e-02  6.66e-07  3.67e-04  1.65e-06  2.28e-06  5.29e-01  
 28  +4.8212e-01  +4.9117e-01  9.06e-03  3.88e-07  2.13e-04  7.16e-07  1.34e-06  5.85e-01  
 29  +4.8210e-01  +4.9109e-01  8.99e-03  3.82e-07  2.10e-04  6.36e-07  1.32e-06  1.41e-01  
 30  +4.8115e-01  +4.8711e-01  5.96e-03  2.47e-07  1.36e-04  2.46e-07  8.62e-07  6.75e-01  
 31  +4.8009e-01  +4.8282e-01  2.73e-03  1.11e-07  6.09e-05  8.18e-08  3.92e-07  7.22e-01  
 32  +4.8004e-01  +4.8263e-01  2.59e-03  1.04e-07  5.74e-05  6.64e-08  3.70e-07  2.76e-01  
 33  +4.8004e-01  +4.8263e-01  2.59e-03  1.04e-07  5.74e-05  6.53e-08  3.70e-07  2.22e-02  
 34  +4.7955e-01  +4.8069e-01  1.14e-03  4.53e-08  2.50e-05  2.53e-08  1.62e-07  6.57e-01  
 35  +4.7944e-01  +4.8025e-01  8.10e-04  3.23e-08  1.78e-05  9.58e-09  1.15e-07  9.60e-01  
 36  +4.7919e-01  +4.7927e-01  8.33e-05  3.30e-09  1.82e-06  9.36e-10  1.19e-08  9.87e-01  
 37  +4.7916e-01  +4.7916e-01  9.35e-07  3.70e-11  2.04e-08  1.05e-11  1.33e-10  9.89e-01  
 38  +4.7916e-01  +4.7916e-01  9.35e-09  3.70e-13  2.04e-10  1.05e-13  1.33e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.2926514s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:49 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:49 PM: Optimal value: 4.792e-01
(CVXPY) Sep 20 08:04:49 PM: Compilation took 4.058e-01 seconds
(CVXPY) Sep 20 08:04:49 PM: Solver (including time spent in interface) took 3.375e+00 seconds
Iteration: 16, Objective: 0.4792
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:50 PM: Your problem has 25179 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:50 PM: Finished problem compilation (took 4.530e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25179
  constraints   = 50179
  nnz(P)        = 0
  nnz(A)        = 492704
  cones (total) = 1
    : Nonnegative = 1,  numel = 50179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.74e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4263e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3196e-01  +6.1367e+02  6.13e+02  1.78e-01  9.35e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6020e+02  1.60e+02  1.50e-01  7.95e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7642e+01  1.71e+01  4.71e-02  2.49e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2381e+00  7.38e-01  2.21e-03  1.21e+00  2.24e-05  1.93e-01  1.68e-01  
  6  +5.0001e-01  +7.1868e-01  2.19e-01  6.53e-04  3.59e-01  5.32e-06  6.73e-02  7.53e-01  
  7  +5.0000e-01  +6.5755e-01  1.58e-01  4.71e-04  2.59e-01  3.95e-06  4.19e-02  4.88e-01  
  8  +5.0000e-01  +6.4278e-01  1.43e-01  4.26e-04  2.34e-01  3.53e-06  2.57e-02  6.07e-01  
  9  +5.0000e-01  +6.1074e-01  1.11e-01  3.29e-04  1.81e-01  5.29e-06  9.23e-03  6.75e-01  
 10  +4.9996e-01  +6.0323e-01  1.03e-01  2.58e-04  1.42e-01  2.19e-05  1.71e-03  8.46e-01  
 11  +4.9886e-01  +5.9477e-01  9.59e-02  1.97e-05  1.08e-02  5.18e-04  6.39e-05  9.65e-01  
 12  +4.9850e-01  +5.8141e-01  8.29e-02  1.13e-05  6.23e-03  5.17e-04  3.62e-05  6.49e-01  
 13  +4.9865e-01  +5.7846e-01  7.98e-02  1.05e-05  5.78e-03  4.10e-04  3.34e-05  2.65e-01  
 14  +4.9873e-01  +5.7335e-01  7.46e-02  8.38e-06  4.62e-03  2.62e-04  2.66e-05  5.66e-01  
 15  +4.9836e-01  +5.7083e-01  7.25e-02  6.80e-06  3.75e-03  2.68e-04  2.16e-05  2.85e-01  
 16  +4.9840e-01  +5.6791e-01  6.95e-02  6.37e-06  3.51e-03  1.30e-04  2.01e-05  5.07e-01  
 17  +4.9769e-01  +5.6369e-01  6.60e-02  5.19e-06  2.86e-03  1.08e-04  1.65e-05  3.81e-01  
 18  +4.9482e-01  +5.4875e-01  5.39e-02  3.16e-06  1.74e-03  4.58e-05  1.01e-05  8.01e-01  
 19  +4.9136e-01  +5.3280e-01  4.14e-02  2.23e-06  1.23e-03  2.65e-05  7.27e-06  4.22e-01  
 20  +4.9034e-01  +5.2830e-01  3.80e-02  1.98e-06  1.09e-03  1.80e-05  6.49e-06  3.00e-01  
 21  +4.8840e-01  +5.1981e-01  3.14e-02  1.56e-06  8.58e-04  9.33e-06  5.15e-06  4.56e-01  
 22  +4.8774e-01  +5.1676e-01  2.90e-02  1.38e-06  7.63e-04  2.72e-06  4.59e-06  6.63e-01  
 23  +4.8628e-01  +5.1048e-01  2.42e-02  1.13e-06  6.20e-04  2.08e-06  3.75e-06  2.46e-01  
 24  +4.8437e-01  +5.0230e-01  1.79e-02  7.96e-07  4.39e-04  9.07e-07  2.68e-06  5.91e-01  
 25  +4.8435e-01  +5.0221e-01  1.79e-02  7.92e-07  4.36e-04  8.58e-07  2.66e-06  6.54e-02  
 26  +4.8286e-01  +4.9587e-01  1.30e-02  5.62e-07  3.10e-04  5.01e-07  1.91e-06  4.58e-01  
 27  +4.8264e-01  +4.9486e-01  1.22e-02  5.19e-07  2.86e-04  3.39e-07  1.76e-06  4.39e-01  
 28  +4.8205e-01  +4.9235e-01  1.03e-02  4.32e-07  2.38e-04  2.23e-07  1.47e-06  4.73e-01  
 29  +4.8127e-01  +4.8910e-01  7.84e-03  3.26e-07  1.80e-04  1.61e-07  1.12e-06  3.19e-01  
 30  +4.8006e-01  +4.8412e-01  4.06e-03  1.66e-07  9.12e-05  4.70e-08  5.72e-07  9.90e-01  
 31  +4.7940e-01  +4.8145e-01  2.05e-03  8.30e-08  4.57e-05  2.34e-08  2.89e-07  9.08e-01  
 32  +4.7935e-01  +4.8124e-01  1.89e-03  7.65e-08  4.22e-05  2.15e-08  2.66e-07  4.60e-01  
 33  +4.7900e-01  +4.7989e-01  8.85e-04  3.56e-08  1.96e-05  1.01e-08  1.25e-07  5.42e-01  
 34  +4.7882e-01  +4.7917e-01  3.50e-04  1.40e-08  7.70e-06  3.99e-09  4.91e-08  7.14e-01  
 35  +4.7874e-01  +4.7886e-01  1.26e-04  5.02e-09  2.76e-06  1.45e-09  1.77e-08  6.71e-01  
 36  +4.7871e-01  +4.7876e-01  4.78e-05  1.90e-09  1.05e-06  5.46e-10  6.69e-09  9.14e-01  
 37  +4.7869e-01  +4.7870e-01  1.22e-06  4.83e-11  2.66e-08  1.39e-11  1.70e-10  9.75e-01  
 38  +4.7869e-01  +4.7869e-01  1.22e-08  4.83e-13  2.66e-10  1.39e-13  1.70e-12  9.90e-01  
 39  +4.7869e-01  +4.7869e-01  1.22e-10  4.86e-15  2.68e-12  1.81e-15  2.20e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.4592255s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:54 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:54 PM: Optimal value: 4.787e-01
(CVXPY) Sep 20 08:04:54 PM: Compilation took 4.530e-01 seconds
(CVXPY) Sep 20 08:04:54 PM: Solver (including time spent in interface) took 3.555e+00 seconds
Iteration: 17, Objective: 0.4787
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:54 PM: Your problem has 25189 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:55 PM: Finished problem compilation (took 4.379e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25189
  constraints   = 50189
  nnz(P)        = 0
  nnz(A)        = 497021
  cones (total) = 1
    : Nonnegative = 1,  numel = 50189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.75e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4264e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3195e-01  +6.1365e+02  6.13e+02  1.78e-01  9.35e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6019e+02  1.60e+02  1.50e-01  7.95e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7643e+01  1.71e+01  4.71e-02  2.49e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2358e+00  7.36e-01  2.20e-03  1.20e+00  2.25e-05  1.93e-01  1.69e-01  
  6  +5.0001e-01  +7.4646e-01  2.46e-01  7.36e-04  4.04e-01  6.36e-06  7.52e-02  6.95e-01  
  7  +5.0000e-01  +6.5854e-01  1.59e-01  4.74e-04  2.60e-01  4.22e-06  4.24e-02  5.49e-01  
  8  +5.0000e-01  +6.3478e-01  1.35e-01  4.02e-04  2.21e-01  4.14e-06  2.65e-02  4.59e-01  
  9  +5.0000e-01  +6.3284e-01  1.33e-01  3.93e-04  2.16e-01  4.74e-06  9.27e-03  9.90e-01  
 10  +4.9997e-01  +6.2014e-01  1.20e-01  2.81e-04  1.54e-01  2.03e-05  1.63e-03  8.32e-01  
 11  +4.9892e-01  +6.0438e-01  1.05e-01  1.75e-05  9.66e-03  4.90e-04  5.62e-05  9.71e-01  
 12  +4.9875e-01  +5.9568e-01  9.69e-02  1.33e-05  7.34e-03  4.66e-04  4.24e-05  3.74e-01  
 13  +4.9887e-01  +5.8329e-01  8.44e-02  1.01e-05  5.59e-03  2.80e-04  3.21e-05  5.69e-01  
 14  +4.9901e-01  +5.7887e-01  7.99e-02  9.39e-06  5.18e-03  1.79e-04  2.96e-05  3.77e-01  
 15  +4.9919e-01  +5.7508e-01  7.59e-02  8.72e-06  4.81e-03  8.33e-05  2.75e-05  5.36e-01  
 16  +4.9875e-01  +5.7266e-01  7.39e-02  6.69e-06  3.69e-03  9.73e-05  2.11e-05  2.74e-01  
 17  +4.9836e-01  +5.6853e-01  7.02e-02  5.60e-06  3.09e-03  4.95e-05  1.76e-05  6.18e-01  
 18  +4.9728e-01  +5.6268e-01  6.54e-02  4.55e-06  2.51e-03  2.87e-05  1.44e-05  5.53e-01  
 19  +4.9463e-01  +5.5025e-01  5.56e-02  3.26e-06  1.80e-03  1.98e-05  1.04e-05  4.75e-01  
 20  +4.9278e-01  +5.4206e-01  4.93e-02  2.80e-06  1.54e-03  1.08e-05  9.05e-06  3.92e-01  
 21  +4.8986e-01  +5.2933e-01  3.95e-02  2.08e-06  1.15e-03  2.34e-06  6.86e-06  6.97e-01  
 22  +4.8680e-01  +5.1645e-01  2.97e-02  1.44e-06  7.93e-04  1.48e-06  4.82e-06  4.00e-01  
 23  +4.8670e-01  +5.1601e-01  2.93e-02  1.40e-06  7.73e-04  1.21e-06  4.69e-06  2.14e-01  
 24  +4.8489e-01  +5.0849e-01  2.36e-02  1.06e-06  5.86e-04  5.60e-07  3.59e-06  6.09e-01  
 25  +4.8446e-01  +5.0669e-01  2.22e-02  9.85e-07  5.43e-04  4.57e-07  3.33e-06  2.74e-01  
 26  +4.8356e-01  +5.0290e-01  1.93e-02  8.31e-07  4.58e-04  3.01e-07  2.82e-06  5.43e-01  
 27  +4.8067e-01  +4.9125e-01  1.06e-02  4.39e-07  2.42e-04  1.57e-07  1.52e-06  5.09e-01  
 28  +4.7970e-01  +4.8721e-01  7.51e-03  3.02e-07  1.66e-04  9.06e-08  1.05e-06  8.40e-01  
 29  +4.7876e-01  +4.8355e-01  4.79e-03  1.90e-07  1.05e-04  5.74e-08  6.70e-07  4.59e-01  
 30  +4.7856e-01  +4.8268e-01  4.12e-03  1.64e-07  9.02e-05  4.82e-08  5.77e-07  6.21e-01  
 31  +4.7798e-01  +4.8044e-01  2.47e-03  9.75e-08  5.37e-05  2.88e-08  3.46e-07  4.24e-01  
 32  +4.7753e-01  +4.7872e-01  1.19e-03  4.68e-08  2.58e-05  1.38e-08  1.67e-07  6.68e-01  
 33  +4.7728e-01  +4.7773e-01  4.54e-04  1.78e-08  9.83e-06  5.26e-09  6.38e-08  6.32e-01  
 34  +4.7718e-01  +4.7737e-01  1.89e-04  7.40e-09  4.08e-06  2.16e-09  2.65e-08  9.88e-01  
 35  +4.7712e-01  +4.7712e-01  7.63e-06  2.98e-10  1.64e-07  8.70e-11  1.07e-09  9.61e-01  
 36  +4.7711e-01  +4.7711e-01  7.68e-08  3.00e-12  1.65e-09  8.76e-13  1.08e-11  9.90e-01  
 37  +4.7711e-01  +4.7711e-01  7.69e-10  3.01e-14  1.66e-11  9.16e-15  1.12e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.4567907s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:58 PM: Problem status: optimal
(CVXPY) Sep 20 08:04:58 PM: Optimal value: 4.771e-01
(CVXPY) Sep 20 08:04:58 PM: Compilation took 4.379e-01 seconds
(CVXPY) Sep 20 08:04:58 PM: Solver (including time spent in interface) took 3.543e+00 seconds
Iteration: 18, Objective: 0.4771
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:04:59 PM: Your problem has 25199 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:04:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:04:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:04:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:04:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:04:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:04:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:04:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:04:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:04:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:04:59 PM: Finished problem compilation (took 4.595e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:04:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25199
  constraints   = 50199
  nnz(P)        = 0
  nnz(A)        = 501551
  cones (total) = 1
    : Nonnegative = 1,  numel = 50199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.75e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4263e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3195e-01  +6.1362e+02  6.13e+02  1.78e-01  9.35e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6018e+02  1.60e+02  1.50e-01  7.95e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7643e+01  1.71e+01  4.71e-02  2.49e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.1837e+00  6.84e-01  2.04e-03  1.12e+00  2.25e-05  1.93e-01  1.82e-01  
  6  +5.0000e-01  +7.2635e-01  2.26e-01  6.76e-04  3.72e-01  6.16e-06  7.03e-02  7.42e-01  
  7  +5.0000e-01  +6.6532e-01  1.65e-01  4.94e-04  2.71e-01  4.51e-06  4.35e-02  5.20e-01  
  8  +5.0000e-01  +6.5829e-01  1.58e-01  4.73e-04  2.60e-01  3.69e-06  2.57e-02  7.38e-01  
  9  +5.0000e-01  +6.0561e-01  1.06e-01  3.11e-04  1.71e-01  5.21e-06  5.79e-03  9.51e-01  
 10  +4.9984e-01  +5.9078e-01  9.09e-02  7.96e-05  4.39e-02  7.78e-05  2.83e-04  9.90e-01  
 11  +4.9874e-01  +5.8532e-01  8.66e-02  1.19e-05  6.56e-03  5.36e-04  3.81e-05  8.67e-01  
 12  +4.9857e-01  +5.8209e-01  8.35e-02  9.90e-06  5.46e-03  5.17e-04  3.16e-05  2.94e-01  
 13  +4.9876e-01  +5.7866e-01  7.99e-02  8.93e-06  4.92e-03  3.53e-04  2.83e-05  3.95e-01  
 14  +4.9831e-01  +5.7285e-01  7.45e-02  6.40e-06  3.53e-03  2.82e-04  2.02e-05  5.79e-01  
 15  +4.9828e-01  +5.7236e-01  7.41e-02  6.34e-06  3.50e-03  2.63e-04  2.00e-05  6.57e-02  
 16  +4.9782e-01  +5.6901e-01  7.12e-02  5.44e-06  3.00e-03  2.07e-04  1.72e-05  3.64e-01  
 17  +4.9772e-01  +5.6818e-01  7.05e-02  5.38e-06  2.97e-03  1.87e-04  1.71e-05  8.46e-02  
 18  +4.9651e-01  +5.6103e-01  6.45e-02  4.41e-06  2.43e-03  1.03e-04  1.40e-05  5.26e-01  
 19  +4.9462e-01  +5.5215e-01  5.75e-02  3.49e-06  1.92e-03  8.82e-05  1.12e-05  2.81e-01  
 20  +4.9405e-01  +5.4911e-01  5.51e-02  3.36e-06  1.85e-03  5.02e-05  1.08e-05  3.34e-01  
 21  +4.9162e-01  +5.3826e-01  4.66e-02  2.59e-06  1.43e-03  4.10e-05  8.46e-06  2.62e-01  
 22  +4.8891e-01  +5.2599e-01  3.71e-02  1.90e-06  1.05e-03  7.21e-06  6.31e-06  7.29e-01  
 23  +4.8634e-01  +5.1510e-01  2.88e-02  1.38e-06  7.61e-04  4.79e-06  4.64e-06  3.55e-01  
 24  +4.8621e-01  +5.1450e-01  2.83e-02  1.34e-06  7.36e-04  3.61e-06  4.49e-06  2.53e-01  
 25  +4.8231e-01  +4.9826e-01  1.60e-02  6.90e-07  3.81e-04  1.14e-06  2.37e-06  6.89e-01  
 26  +4.8190e-01  +4.9645e-01  1.45e-02  6.16e-07  3.40e-04  7.11e-07  2.12e-06  4.34e-01  
 27  +4.7938e-01  +4.8626e-01  6.88e-03  2.81e-07  1.55e-04  2.61e-07  9.85e-07  6.60e-01  
 28  +4.7857e-01  +4.8296e-01  4.39e-03  1.77e-07  9.78e-05  1.52e-07  6.25e-07  4.47e-01  
 29  +4.7814e-01  +4.8128e-01  3.14e-03  1.25e-07  6.90e-05  1.01e-07  4.43e-07  3.73e-01  
 30  +4.7796e-01  +4.8051e-01  2.55e-03  1.01e-07  5.57e-05  3.49e-08  3.58e-07  9.06e-01  
 31  +4.7764e-01  +4.7929e-01  1.65e-03  6.52e-08  3.59e-05  2.23e-08  2.32e-07  4.06e-01  
 32  +4.7765e-01  +4.7928e-01  1.64e-03  6.46e-08  3.56e-05  2.17e-08  2.30e-07  1.37e-01  
 33  +4.7725e-01  +4.7775e-01  5.03e-04  1.98e-08  1.09e-05  6.07e-09  7.09e-08  8.77e-01  
 34  +4.7711e-01  +4.7721e-01  1.00e-04  3.95e-09  2.18e-06  1.20e-09  1.42e-08  8.39e-01  
 35  +4.7708e-01  +4.7709e-01  1.23e-05  4.84e-10  2.67e-07  1.40e-10  1.74e-09  9.90e-01  
 36  +4.7707e-01  +4.7707e-01  1.28e-07  5.05e-12  2.79e-09  1.47e-12  1.81e-11  9.90e-01  
 37  +4.7707e-01  +4.7707e-01  1.29e-09  5.06e-14  2.79e-11  1.51e-14  1.87e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.5519366s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:03 PM: Problem status: optimal
(CVXPY) Sep 20 08:05:03 PM: Optimal value: 4.771e-01
(CVXPY) Sep 20 08:05:03 PM: Compilation took 4.595e-01 seconds
(CVXPY) Sep 20 08:05:03 PM: Solver (including time spent in interface) took 3.653e+00 seconds
Iteration: 19, Objective: 0.4771
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:05:03 PM: Your problem has 25209 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:05:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:05:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:05:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:05:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:05:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:05:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:05:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:05:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:05:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:05:04 PM: Finished problem compilation (took 4.854e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25209
  constraints   = 50209
  nnz(P)        = 0
  nnz(A)        = 505943
  cones (total) = 1
    : Nonnegative = 1,  numel = 50209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.75e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4263e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3195e-01  +6.1357e+02  6.13e+02  1.78e-01  9.35e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6017e+02  1.60e+02  1.50e-01  7.95e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7643e+01  1.71e+01  4.71e-02  2.49e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.1904e+00  6.90e-01  2.06e-03  1.13e+00  2.26e-05  1.93e-01  1.81e-01  
  6  +5.0000e-01  +7.3229e-01  2.32e-01  6.94e-04  3.82e-01  6.28e-06  7.16e-02  7.37e-01  
  7  +5.0000e-01  +6.6796e-01  1.68e-01  5.02e-04  2.76e-01  4.54e-06  4.37e-02  5.35e-01  
  8  +5.0001e-01  +6.6705e-01  1.67e-01  4.99e-04  2.74e-01  3.79e-06  2.86e-02  6.68e-01  
  9  +5.0000e-01  +6.2475e-01  1.25e-01  3.71e-04  2.04e-01  5.13e-06  1.05e-02  6.82e-01  
 10  +4.9995e-01  +5.9934e-01  9.94e-02  2.16e-04  1.19e-01  2.64e-05  1.13e-03  9.90e-01  
 11  +4.9897e-01  +5.9446e-01  9.55e-02  1.86e-05  1.03e-02  4.66e-04  6.00e-05  9.47e-01  
 12  +4.9870e-01  +5.8771e-01  8.90e-02  1.30e-05  7.19e-03  4.82e-04  4.17e-05  4.58e-01  
 13  +4.9894e-01  +5.7799e-01  7.91e-02  9.56e-06  5.28e-03  2.26e-04  3.03e-05  7.51e-01  
 14  +4.9888e-01  +5.7660e-01  7.77e-02  8.67e-06  4.78e-03  1.97e-04  2.74e-05  2.63e-01  
 15  +4.9870e-01  +5.7485e-01  7.61e-02  7.65e-06  4.22e-03  1.75e-04  2.42e-05  2.81e-01  
 16  +4.9827e-01  +5.7242e-01  7.41e-02  6.38e-06  3.52e-03  1.77e-04  2.02e-05  2.55e-01  
 17  +4.9792e-01  +5.6937e-01  7.15e-02  5.77e-06  3.18e-03  1.17e-04  1.83e-05  3.96e-01  
 18  +4.9716e-01  +5.6466e-01  6.75e-02  5.08e-06  2.80e-03  6.27e-05  1.61e-05  4.98e-01  
 19  +4.9590e-01  +5.5870e-01  6.28e-02  4.23e-06  2.33e-03  5.39e-05  1.35e-05  2.79e-01  
 20  +4.9452e-01  +5.5202e-01  5.75e-02  3.69e-06  2.04e-03  2.47e-05  1.19e-05  4.91e-01  
 21  +4.9117e-01  +5.3698e-01  4.58e-02  2.55e-06  1.41e-03  1.51e-05  8.36e-06  4.68e-01  
 22  +4.8911e-01  +5.2805e-01  3.89e-02  2.04e-06  1.12e-03  4.04e-06  6.75e-06  6.54e-01  
 23  +4.8603e-01  +5.1481e-01  2.88e-02  1.39e-06  7.68e-04  2.26e-06  4.69e-06  4.57e-01  
 24  +4.8522e-01  +5.1134e-01  2.61e-02  1.22e-06  6.74e-04  1.56e-06  4.13e-06  3.41e-01  
 25  +4.8238e-01  +4.9941e-01  1.70e-02  7.46e-07  4.11e-04  4.75e-07  2.56e-06  7.34e-01  
 26  +4.8134e-01  +4.9490e-01  1.36e-02  5.72e-07  3.15e-04  1.94e-07  1.97e-06  8.25e-01  
 27  +4.7947e-01  +4.8725e-01  7.79e-03  3.23e-07  1.78e-04  1.03e-07  1.13e-06  6.09e-01  
 28  +4.7770e-01  +4.8006e-01  2.36e-03  9.67e-08  5.33e-05  2.66e-08  3.44e-07  9.71e-01  
 29  +4.7741e-01  +4.7889e-01  1.48e-03  6.06e-08  3.34e-05  1.64e-08  2.16e-07  9.90e-01  
 30  +4.7703e-01  +4.7739e-01  3.63e-04  1.49e-08  8.19e-06  4.02e-09  5.33e-08  7.62e-01  
 31  +4.7693e-01  +4.7700e-01  7.28e-05  2.97e-09  1.64e-06  8.02e-10  1.07e-08  9.34e-01  
 32  +4.7690e-01  +4.7692e-01  1.18e-05  4.79e-10  2.64e-07  1.32e-10  1.74e-09  8.64e-01  
 33  +4.7690e-01  +4.7690e-01  2.35e-07  9.56e-12  5.27e-09  2.61e-12  3.47e-11  9.90e-01  
 34  +4.7690e-01  +4.7690e-01  2.35e-09  9.57e-14  5.27e-11  2.61e-14  3.47e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.1420726s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:07 PM: Problem status: optimal
(CVXPY) Sep 20 08:05:07 PM: Optimal value: 4.769e-01
(CVXPY) Sep 20 08:05:07 PM: Compilation took 4.854e-01 seconds
(CVXPY) Sep 20 08:05:07 PM: Solver (including time spent in interface) took 3.234e+00 seconds
Iteration: 20, Objective: 0.4769
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:05:08 PM: Your problem has 25219 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:05:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:05:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:05:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:05:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:05:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:05:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:05:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:05:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:05:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:05:08 PM: Finished problem compilation (took 5.028e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25219
  constraints   = 50219
  nnz(P)        = 0
  nnz(A)        = 509779
  cones (total) = 1
    : Nonnegative = 1,  numel = 50219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.75e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4264e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1355e+02  6.13e+02  1.78e-01  9.35e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6017e+02  1.60e+02  1.50e-01  7.95e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7645e+01  1.71e+01  4.72e-02  2.49e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2003e+00  7.00e-01  2.09e-03  1.15e+00  2.26e-05  1.93e-01  1.78e-01  
  6  +5.0001e-01  +7.2007e-01  2.20e-01  6.58e-04  3.62e-01  5.74e-06  6.78e-02  7.60e-01  
  7  +5.0000e-01  +6.7615e-01  1.76e-01  5.26e-04  2.89e-01  4.44e-06  4.47e-02  5.17e-01  
  8  +5.0000e-01  +6.5855e-01  1.59e-01  4.74e-04  2.60e-01  3.90e-06  2.76e-02  6.06e-01  
  9  +5.0000e-01  +6.2759e-01  1.28e-01  3.78e-04  2.08e-01  4.76e-06  9.34e-03  8.54e-01  
 10  +4.9991e-01  +6.0003e-01  1.00e-01  1.48e-04  8.17e-02  4.66e-05  6.01e-04  9.61e-01  
 11  +4.9820e-01  +5.9130e-01  9.31e-02  1.00e-05  5.52e-03  7.91e-04  3.20e-05  9.47e-01  
 12  +4.9798e-01  +5.8815e-01  9.02e-02  8.54e-06  4.72e-03  7.71e-04  2.72e-05  2.44e-01  
 13  +4.9802e-01  +5.8385e-01  8.58e-02  7.86e-06  4.34e-03  5.98e-04  2.49e-05  2.62e-01  
 14  +4.9781e-01  +5.8163e-01  8.38e-02  7.04e-06  3.89e-03  5.73e-04  2.24e-05  1.82e-01  
 15  +4.9791e-01  +5.7995e-01  8.20e-02  6.91e-06  3.81e-03  4.74e-04  2.19e-05  1.57e-01  
 16  +4.9731e-01  +5.7568e-01  7.84e-02  5.78e-06  3.19e-03  4.46e-04  1.83e-05  2.64e-01  
 17  +4.9688e-01  +5.7128e-01  7.44e-02  5.28e-06  2.91e-03  3.41e-04  1.68e-05  2.61e-01  
 18  +4.9644e-01  +5.6587e-01  6.94e-02  5.01e-06  2.77e-03  1.78e-04  1.60e-05  3.81e-01  
 19  +4.9275e-01  +5.4792e-01  5.52e-02  3.05e-06  1.68e-03  1.54e-04  9.86e-06  4.59e-01  
 20  +4.9129e-01  +5.4047e-01  4.92e-02  2.66e-06  1.47e-03  9.41e-05  8.69e-06  3.29e-01  
 21  +4.8847e-01  +5.2697e-01  3.85e-02  1.96e-06  1.08e-03  2.65e-05  6.50e-06  6.31e-01  
 22  +4.8565e-01  +5.1461e-01  2.90e-02  1.37e-06  7.58e-04  1.41e-05  4.62e-06  4.66e-01  
 23  +4.8430e-01  +5.0873e-01  2.44e-02  1.11e-06  6.13e-04  7.67e-06  3.76e-06  4.53e-01  
 24  +4.8130e-01  +4.9609e-01  1.48e-02  6.35e-07  3.50e-04  2.91e-06  2.19e-06  6.21e-01  
 25  +4.8008e-01  +4.9078e-01  1.07e-02  4.42e-07  2.44e-04  4.38e-07  1.53e-06  8.83e-01  
 26  +4.7892e-01  +4.8603e-01  7.11e-03  2.89e-07  1.59e-04  8.58e-08  1.01e-06  9.90e-01  
 27  +4.7737e-01  +4.7990e-01  2.53e-03  1.02e-07  5.63e-05  3.03e-08  3.62e-07  6.85e-01  
 28  +4.7673e-01  +4.7738e-01  6.55e-04  2.62e-08  1.44e-05  7.58e-09  9.36e-08  9.24e-01  
 29  +4.7654e-01  +4.7669e-01  1.53e-04  5.92e-09  3.27e-06  1.78e-09  2.16e-08  8.75e-01  
 30  +4.7648e-01  +4.7648e-01  3.01e-06  1.16e-10  6.39e-08  3.50e-11  4.23e-10  9.83e-01  
 31  +4.7648e-01  +4.7648e-01  3.01e-08  1.16e-12  6.39e-10  3.50e-13  4.24e-12  9.90e-01  
 32  +4.7648e-01  +4.7648e-01  3.05e-10  1.18e-14  6.47e-12  5.73e-15  6.76e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.1480234s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:11 PM: Problem status: optimal
(CVXPY) Sep 20 08:05:11 PM: Optimal value: 4.765e-01
(CVXPY) Sep 20 08:05:11 PM: Compilation took 5.028e-01 seconds
(CVXPY) Sep 20 08:05:11 PM: Solver (including time spent in interface) took 3.251e+00 seconds
Iteration: 21, Objective: 0.4765
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:05:12 PM: Your problem has 25229 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:05:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:05:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:05:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:05:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:05:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:05:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:05:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:05:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:05:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:05:12 PM: Finished problem compilation (took 4.829e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25229
  constraints   = 50229
  nnz(P)        = 0
  nnz(A)        = 514226
  cones (total) = 1
    : Nonnegative = 1,  numel = 50229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.75e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4265e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1346e+02  6.13e+02  1.78e-01  9.35e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6015e+02  1.60e+02  1.50e-01  7.95e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7646e+01  1.71e+01  4.72e-02  2.49e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2307e+00  7.31e-01  2.18e-03  1.20e+00  2.26e-05  1.93e-01  1.71e-01  
  6  +5.0001e-01  +7.2347e-01  2.23e-01  6.68e-04  3.67e-01  5.63e-06  6.80e-02  7.51e-01  
  7  +5.0000e-01  +6.6931e-01  1.69e-01  5.06e-04  2.78e-01  4.37e-06  4.24e-02  5.19e-01  
  8  +5.0000e-01  +6.4948e-01  1.49e-01  4.46e-04  2.45e-01  4.21e-06  2.33e-02  6.46e-01  
  9  +5.0000e-01  +6.2997e-01  1.30e-01  3.85e-04  2.12e-01  6.78e-06  9.40e-03  6.33e-01  
 10  +4.9988e-01  +5.9851e-01  9.86e-02  1.51e-04  8.34e-02  5.93e-05  6.26e-04  9.90e-01  
 11  +4.9897e-01  +5.9368e-01  9.47e-02  2.34e-05  1.29e-02  4.55e-04  7.64e-05  8.79e-01  
 12  +4.9860e-01  +5.8907e-01  9.05e-02  1.61e-05  8.89e-03  5.39e-04  5.20e-05  4.20e-01  
 13  +4.9870e-01  +5.8178e-01  8.31e-02  1.18e-05  6.51e-03  3.43e-04  3.76e-05  6.66e-01  
 14  +4.9861e-01  +5.7924e-01  8.06e-02  9.64e-06  5.32e-03  2.77e-04  3.07e-05  4.49e-01  
 15  +4.9841e-01  +5.7736e-01  7.90e-02  8.19e-06  4.52e-03  2.53e-04  2.60e-05  3.18e-01  
 16  +4.9828e-01  +5.7576e-01  7.75e-02  7.57e-06  4.18e-03  1.97e-04  2.40e-05  3.05e-01  
 17  +4.9756e-01  +5.7158e-01  7.40e-02  5.96e-06  3.29e-03  1.73e-04  1.89e-05  4.04e-01  
 18  +4.9734e-01  +5.6992e-01  7.26e-02  5.82e-06  3.21e-03  1.34e-04  1.85e-05  2.00e-01  
 19  +4.9595e-01  +5.6199e-01  6.60e-02  4.63e-06  2.56e-03  3.34e-05  1.48e-05  7.77e-01  
 20  +4.9130e-01  +5.4039e-01  4.91e-02  2.65e-06  1.46e-03  2.08e-05  8.62e-06  6.00e-01  
 21  +4.9042e-01  +5.3643e-01  4.60e-02  2.45e-06  1.35e-03  1.33e-05  8.02e-06  3.09e-01  
 22  +4.8781e-01  +5.2491e-01  3.71e-02  1.87e-06  1.03e-03  4.84e-06  6.20e-06  5.76e-01  
 23  +4.8684e-01  +5.2054e-01  3.37e-02  1.64e-06  9.04e-04  2.30e-06  5.45e-06  5.11e-01  
 24  +4.8431e-01  +5.0968e-01  2.54e-02  1.16e-06  6.39e-04  7.10e-07  3.90e-06  7.10e-01  
 25  +4.8136e-01  +4.9726e-01  1.59e-02  6.93e-07  3.82e-04  3.92e-07  2.37e-06  4.80e-01  
 26  +4.8028e-01  +4.9267e-01  1.24e-02  5.27e-07  2.91e-04  2.57e-07  1.82e-06  4.45e-01  
 27  +4.7874e-01  +4.8620e-01  7.46e-03  3.08e-07  1.70e-04  1.02e-07  1.07e-06  8.23e-01  
 28  +4.7766e-01  +4.8188e-01  4.22e-03  1.72e-07  9.47e-05  5.70e-08  6.08e-07  4.77e-01  
 29  +4.7718e-01  +4.7998e-01  2.79e-03  1.13e-07  6.22e-05  3.66e-08  4.03e-07  4.56e-01  
 30  +4.7655e-01  +4.7748e-01  9.27e-04  3.69e-08  2.03e-05  1.20e-08  1.34e-07  6.96e-01  
 31  +4.7638e-01  +4.7682e-01  4.37e-04  1.72e-08  9.51e-06  5.45e-09  6.28e-08  6.51e-01  
 32  +4.7634e-01  +4.7666e-01  3.22e-04  1.26e-08  6.95e-06  3.61e-09  4.63e-08  9.44e-01  
 33  +4.7624e-01  +4.7628e-01  4.60e-05  1.77e-09  9.74e-07  5.15e-10  6.62e-09  8.95e-01  
 34  +4.7622e-01  +4.7622e-01  1.02e-06  3.86e-11  2.13e-08  1.14e-11  1.47e-10  9.90e-01  
 35  +4.7622e-01  +4.7622e-01  1.02e-08  3.86e-13  2.13e-10  1.17e-13  1.51e-12  9.90e-01  
 36  +4.7622e-01  +4.7622e-01  1.02e-10  3.83e-15  2.13e-12  1.17e-15  1.51e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.5616635s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:16 PM: Problem status: optimal
(CVXPY) Sep 20 08:05:16 PM: Optimal value: 4.762e-01
(CVXPY) Sep 20 08:05:16 PM: Compilation took 4.829e-01 seconds
(CVXPY) Sep 20 08:05:16 PM: Solver (including time spent in interface) took 3.651e+00 seconds
Iteration: 22, Objective: 0.4762
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:05:16 PM: Your problem has 25239 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:05:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:05:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:05:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:05:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:05:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:05:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:05:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:05:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:05:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:05:17 PM: Finished problem compilation (took 4.757e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:17 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25239
  constraints   = 50239
  nnz(P)        = 0
  nnz(A)        = 517913
  cones (total) = 1
    : Nonnegative = 1,  numel = 50239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.75e+02  1.00e+00  1.00e+00   ------   
  1  +5.8082e-01  +5.4265e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1348e+02  6.13e+02  1.78e-01  9.34e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6016e+02  1.60e+02  1.50e-01  7.94e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7648e+01  1.71e+01  4.72e-02  2.49e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2237e+00  7.24e-01  2.16e-03  1.19e+00  2.26e-05  1.93e-01  1.73e-01  
  6  +5.0001e-01  +7.3692e-01  2.37e-01  7.08e-04  3.89e-01  6.15e-06  7.19e-02  7.29e-01  
  7  +5.0000e-01  +6.7728e-01  1.77e-01  5.30e-04  2.91e-01  4.66e-06  4.53e-02  5.06e-01  
  8  +5.0000e-01  +6.5400e-01  1.54e-01  4.60e-04  2.53e-01  4.34e-06  2.62e-02  6.02e-01  
  9  +5.0000e-01  +6.3257e-01  1.33e-01  3.94e-04  2.16e-01  6.23e-06  1.02e-02  7.20e-01  
 10  +4.9993e-01  +6.0377e-01  1.04e-01  2.02e-04  1.11e-01  3.76e-05  9.62e-04  9.90e-01  
 11  +4.9892e-01  +5.9838e-01  9.95e-02  2.15e-05  1.19e-02  4.82e-04  7.00e-05  9.28e-01  
 12  +4.9848e-01  +5.9305e-01  9.46e-02  1.48e-05  8.17e-03  5.76e-04  4.77e-05  4.01e-01  
 13  +4.9859e-01  +5.8827e-01  8.97e-02  1.30e-05  7.19e-03  4.42e-04  4.17e-05  3.46e-01  
 14  +4.9846e-01  +5.8163e-01  8.32e-02  9.60e-06  5.30e-03  3.21e-04  3.06e-05  5.91e-01  
 15  +4.9826e-01  +5.7890e-01  8.06e-02  7.93e-06  4.38e-03  2.77e-04  2.52e-05  3.83e-01  
 16  +4.9820e-01  +5.7697e-01  7.88e-02  7.44e-06  4.11e-03  2.02e-04  2.36e-05  3.15e-01  
 17  +4.9754e-01  +5.7332e-01  7.58e-02  6.10e-06  3.37e-03  1.95e-04  1.94e-05  2.90e-01  
 18  +4.9631e-01  +5.6393e-01  6.76e-02  4.90e-06  2.70e-03  1.42e-05  1.56e-05  8.96e-01  
 19  +4.9434e-01  +5.5490e-01  6.06e-02  3.82e-06  2.11e-03  1.15e-05  1.23e-05  3.44e-01  
 20  +4.9163e-01  +5.4249e-01  5.09e-02  2.94e-06  1.62e-03  4.66e-06  9.61e-06  5.68e-01  
 21  +4.8891e-01  +5.3052e-01  4.16e-02  2.22e-06  1.22e-03  2.10e-06  7.36e-06  5.39e-01  
 22  +4.8511e-01  +5.1408e-01  2.90e-02  1.40e-06  7.75e-04  1.20e-06  4.74e-06  4.67e-01  
 23  +4.8496e-01  +5.1349e-01  2.85e-02  1.37e-06  7.56e-04  1.13e-06  4.64e-06  7.47e-02  
 24  +4.8396e-01  +5.0926e-01  2.53e-02  1.18e-06  6.48e-04  8.55e-07  3.99e-06  2.90e-01  
 25  +4.8304e-01  +5.0541e-01  2.24e-02  1.01e-06  5.56e-04  6.12e-07  3.44e-06  3.51e-01  
 26  +4.8009e-01  +4.9321e-01  1.31e-02  5.60e-07  3.09e-04  3.16e-07  1.95e-06  5.25e-01  
 27  +4.7781e-01  +4.8385e-01  6.04e-03  2.42e-07  1.33e-04  6.69e-08  8.59e-07  9.90e-01  
 28  +4.7762e-01  +4.8313e-01  5.50e-03  2.19e-07  1.21e-04  6.13e-08  7.79e-07  2.68e-01  
 29  +4.7750e-01  +4.8265e-01  5.15e-03  2.03e-07  1.12e-04  5.76e-08  7.26e-07  2.59e-01  
 30  +4.7714e-01  +4.8125e-01  4.11e-03  1.62e-07  8.93e-05  4.64e-08  5.82e-07  9.90e-01  
 31  +4.7621e-01  +4.7776e-01  1.55e-03  5.99e-08  3.30e-05  1.77e-08  2.20e-07  7.10e-01  
 32  +4.7566e-01  +4.7576e-01  9.94e-05  3.77e-09  2.08e-06  1.10e-09  1.41e-08  9.82e-01  
 33  +4.7562e-01  +4.7562e-01  1.13e-06  4.28e-11  2.36e-08  1.24e-11  1.60e-10  9.89e-01  
 34  +4.7562e-01  +4.7562e-01  1.13e-08  4.28e-13  2.36e-10  1.24e-13  1.60e-12  9.90e-01  
 35  +4.7562e-01  +4.7562e-01  1.14e-10  4.36e-15  2.38e-12  1.75e-15  2.22e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.204547s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:20 PM: Problem status: optimal
(CVXPY) Sep 20 08:05:20 PM: Optimal value: 4.756e-01
(CVXPY) Sep 20 08:05:20 PM: Compilation took 4.757e-01 seconds
(CVXPY) Sep 20 08:05:20 PM: Solver (including time spent in interface) took 3.299e+00 seconds
Iteration: 23, Objective: 0.4756
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:05:21 PM: Your problem has 25249 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:05:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:05:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:05:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:05:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:05:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:05:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:05:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:05:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:05:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:05:21 PM: Finished problem compilation (took 5.521e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25249
  constraints   = 50249
  nnz(P)        = 0
  nnz(A)        = 520856
  cones (total) = 1
    : Nonnegative = 1,  numel = 50249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.75e+02  1.00e+00  1.00e+00   ------   
  1  +5.8082e-01  +5.4264e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1348e+02  6.13e+02  1.78e-01  9.34e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6015e+02  1.60e+02  1.50e-01  7.94e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7647e+01  1.71e+01  4.72e-02  2.49e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2282e+00  7.28e-01  2.18e-03  1.19e+00  2.26e-05  1.93e-01  1.72e-01  
  6  +5.0001e-01  +7.4739e-01  2.47e-01  7.40e-04  4.07e-01  6.53e-06  7.50e-02  7.00e-01  
  7  +5.0000e-01  +6.7828e-01  1.78e-01  5.33e-04  2.93e-01  4.66e-06  4.50e-02  5.65e-01  
  8  +5.0000e-01  +6.5225e-01  1.52e-01  4.55e-04  2.50e-01  4.52e-06  2.67e-02  5.29e-01  
  9  +5.0000e-01  +6.3164e-01  1.32e-01  3.91e-04  2.15e-01  6.72e-06  1.08e-02  6.74e-01  
 10  +4.9990e-01  +6.0335e-01  1.03e-01  1.89e-04  1.04e-01  4.92e-05  8.60e-04  9.90e-01  
 11  +4.9880e-01  +5.9753e-01  9.87e-02  2.24e-05  1.24e-02  5.35e-04  7.34e-05  9.15e-01  
 12  +4.9883e-01  +5.9046e-01  9.16e-02  1.71e-05  9.42e-03  4.33e-04  5.52e-05  5.05e-01  
 13  +4.9863e-01  +5.8745e-01  8.88e-02  1.37e-05  7.57e-03  4.42e-04  4.41e-05  3.15e-01  
 14  +4.9841e-01  +5.8209e-01  8.37e-02  1.00e-05  5.52e-03  3.71e-04  3.19e-05  5.47e-01  
 15  +4.9824e-01  +5.7979e-01  8.15e-02  8.34e-06  4.61e-03  3.26e-04  2.66e-05  3.64e-01  
 16  +4.9824e-01  +5.7887e-01  8.06e-02  8.15e-06  4.50e-03  2.77e-04  2.59e-05  1.63e-01  
 17  +4.9755e-01  +5.7440e-01  7.68e-02  6.22e-06  3.44e-03  2.38e-04  1.98e-05  4.62e-01  
 18  +4.9725e-01  +5.7166e-01  7.44e-02  5.96e-06  3.29e-03  1.56e-04  1.90e-05  3.20e-01  
 19  +4.9358e-01  +5.5391e-01  6.03e-02  3.35e-06  1.85e-03  1.34e-04  1.08e-05  5.96e-01  
 20  +4.9039e-01  +5.3892e-01  4.85e-02  2.59e-06  1.43e-03  7.20e-05  8.54e-06  3.95e-01  
 21  +4.8972e-01  +5.3574e-01  4.60e-02  2.44e-06  1.35e-03  4.94e-05  8.07e-06  2.65e-01  
 22  +4.8548e-01  +5.1684e-01  3.14e-02  1.52e-06  8.36e-04  1.38e-05  5.13e-06  6.67e-01  
 23  +4.8506e-01  +5.1512e-01  3.01e-02  1.43e-06  7.88e-04  1.21e-05  4.84e-06  1.37e-01  
 24  +4.8467e-01  +5.1349e-01  2.88e-02  1.35e-06  7.44e-04  1.02e-05  4.58e-06  1.62e-01  
 25  +4.8367e-01  +5.0933e-01  2.57e-02  1.17e-06  6.46e-04  8.06e-06  4.00e-06  2.16e-01  
 26  +4.8171e-01  +5.0106e-01  1.93e-02  8.23e-07  4.54e-04  9.48e-07  2.85e-06  8.73e-01  
 27  +4.7870e-01  +4.8897e-01  1.03e-02  4.17e-07  2.30e-04  2.66e-07  1.48e-06  7.75e-01  
 28  +4.7829e-01  +4.8723e-01  8.94e-03  3.61e-07  1.99e-04  1.86e-07  1.28e-06  4.36e-01  
 29  +4.7712e-01  +4.8270e-01  5.58e-03  2.21e-07  1.22e-04  1.07e-07  7.97e-07  4.81e-01  
 30  +4.7707e-01  +4.8247e-01  5.40e-03  2.12e-07  1.17e-04  9.58e-08  7.67e-07  2.24e-01  
 31  +4.7681e-01  +4.8137e-01  4.56e-03  1.78e-07  9.83e-05  5.45e-08  6.46e-07  9.08e-01  
 32  +4.7580e-01  +4.7762e-01  1.82e-03  7.00e-08  3.86e-05  2.17e-08  2.59e-07  6.84e-01  
 33  +4.7530e-01  +4.7581e-01  5.12e-04  1.93e-08  1.07e-05  5.75e-09  7.26e-08  9.90e-01  
 34  +4.7511e-01  +4.7512e-01  1.56e-05  5.84e-10  3.22e-07  1.75e-10  2.21e-09  9.76e-01  
 35  +4.7510e-01  +4.7510e-01  1.56e-07  5.85e-12  3.23e-09  1.75e-12  2.21e-11  9.90e-01  
 36  +4.7510e-01  +4.7510e-01  1.57e-09  5.88e-14  3.25e-11  2.26e-14  2.83e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6190961s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:25 PM: Problem status: optimal
(CVXPY) Sep 20 08:05:25 PM: Optimal value: 4.751e-01
(CVXPY) Sep 20 08:05:25 PM: Compilation took 5.521e-01 seconds
(CVXPY) Sep 20 08:05:25 PM: Solver (including time spent in interface) took 3.732e+00 seconds
Iteration: 24, Objective: 0.4751
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:05:25 PM: Your problem has 25259 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:05:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:05:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:05:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:05:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:05:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:05:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:05:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:05:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:05:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:05:26 PM: Finished problem compilation (took 4.833e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25259
  constraints   = 50259
  nnz(P)        = 0
  nnz(A)        = 524036
  cones (total) = 1
    : Nonnegative = 1,  numel = 50259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.75e+02  1.00e+00  1.00e+00   ------   
  1  +5.8081e-01  +5.4265e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3192e-01  +6.1340e+02  6.13e+02  1.78e-01  9.34e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6013e+02  1.60e+02  1.50e-01  7.94e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7650e+01  1.71e+01  4.72e-02  2.49e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2313e+00  7.31e-01  2.19e-03  1.20e+00  2.26e-05  1.93e-01  1.72e-01  
  6  +5.0001e-01  +7.4330e-01  2.43e-01  7.27e-04  4.00e-01  6.53e-06  7.38e-02  6.89e-01  
  7  +5.0000e-01  +6.7225e-01  1.72e-01  5.15e-04  2.83e-01  4.83e-06  4.32e-02  5.45e-01  
  8  +5.0000e-01  +6.5338e-01  1.53e-01  4.58e-04  2.52e-01  4.99e-06  2.52e-02  5.53e-01  
  9  +4.9999e-01  +6.3045e-01  1.30e-01  3.79e-04  2.08e-01  9.87e-06  5.50e-03  9.90e-01  
 10  +4.9933e-01  +6.0993e-01  1.11e-01  4.01e-05  2.21e-02  3.10e-04  1.33e-04  9.82e-01  
 11  +4.9846e-01  +5.9785e-01  9.94e-02  1.57e-05  8.64e-03  6.02e-04  5.06e-05  7.29e-01  
 12  +4.9839e-01  +5.9345e-01  9.51e-02  1.27e-05  7.03e-03  5.42e-04  4.09e-05  3.72e-01  
 13  +4.9848e-01  +5.8642e-01  8.79e-02  9.75e-06  5.39e-03  3.21e-04  3.12e-05  6.48e-01  
 14  +4.9849e-01  +5.8552e-01  8.70e-02  9.55e-06  5.27e-03  2.78e-04  3.04e-05  1.47e-01  
 15  +4.9793e-01  +5.8224e-01  8.43e-02  7.67e-06  4.24e-03  2.90e-04  2.45e-05  2.82e-01  
 16  +4.9697e-01  +5.7372e-01  7.68e-02  5.85e-06  3.23e-03  9.83e-05  1.87e-05  7.89e-01  
 17  +4.9345e-01  +5.5692e-01  6.35e-02  3.69e-06  2.04e-03  7.72e-05  1.20e-05  5.24e-01  
 18  +4.9129e-01  +5.4709e-01  5.58e-02  3.12e-06  1.72e-03  5.28e-05  1.03e-05  2.89e-01  
 19  +4.8918e-01  +5.3779e-01  4.86e-02  2.60e-06  1.44e-03  3.44e-05  8.68e-06  3.22e-01  
 20  +4.8661e-01  +5.2668e-01  4.01e-02  2.02e-06  1.11e-03  1.81e-05  6.84e-06  4.47e-01  
 21  +4.8646e-01  +5.2603e-01  3.96e-02  1.98e-06  1.09e-03  1.47e-05  6.70e-06  1.74e-01  
 22  +4.8477e-01  +5.1887e-01  3.41e-02  1.64e-06  9.04e-04  1.08e-05  5.62e-06  2.67e-01  
 23  +4.8375e-01  +5.1460e-01  3.08e-02  1.45e-06  7.98e-04  8.62e-06  4.99e-06  2.10e-01  
 24  +4.8240e-01  +5.0892e-01  2.65e-02  1.20e-06  6.64e-04  5.90e-06  4.19e-06  3.22e-01  
 25  +4.7849e-01  +4.9269e-01  1.42e-02  5.96e-07  3.29e-04  6.88e-07  2.14e-06  8.72e-01  
 26  +4.7793e-01  +4.9033e-01  1.24e-02  5.14e-07  2.84e-04  4.51e-07  1.85e-06  4.12e-01  
 27  +4.7522e-01  +4.7959e-01  4.38e-03  1.76e-07  9.72e-05  1.21e-07  6.56e-07  7.60e-01  
 28  +4.7508e-01  +4.7905e-01  3.97e-03  1.59e-07  8.78e-05  1.06e-07  5.94e-07  1.40e-01  
 29  +4.7486e-01  +4.7812e-01  3.26e-03  1.30e-07  7.15e-05  4.94e-08  4.85e-07  7.86e-01  
 30  +4.7434e-01  +4.7618e-01  1.83e-03  7.21e-08  3.98e-05  2.70e-08  2.73e-07  5.04e-01  
 31  +4.7379e-01  +4.7412e-01  3.33e-04  1.29e-08  7.12e-06  4.76e-09  4.97e-08  8.40e-01  
 32  +4.7367e-01  +4.7369e-01  1.82e-05  7.00e-10  3.86e-07  2.10e-10  2.72e-09  9.87e-01  
 33  +4.7366e-01  +4.7366e-01  1.82e-07  7.00e-12  3.86e-09  2.11e-12  2.72e-11  9.90e-01  
 34  +4.7366e-01  +4.7366e-01  1.82e-09  7.00e-14  3.86e-11  2.11e-14  2.72e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.2125887s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:29 PM: Problem status: optimal
(CVXPY) Sep 20 08:05:29 PM: Optimal value: 4.737e-01
(CVXPY) Sep 20 08:05:29 PM: Compilation took 4.833e-01 seconds
(CVXPY) Sep 20 08:05:29 PM: Solver (including time spent in interface) took 3.302e+00 seconds
Iteration: 25, Objective: 0.4737
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:05:30 PM: Your problem has 25269 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:05:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:05:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:05:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:05:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:05:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:05:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:05:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:05:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:05:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:05:30 PM: Finished problem compilation (took 4.955e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25269
  constraints   = 50269
  nnz(P)        = 0
  nnz(A)        = 527426
  cones (total) = 1
    : Nonnegative = 1,  numel = 50269

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.75e+02  1.00e+00  1.00e+00   ------   
  1  +5.8082e-01  +5.4264e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1340e+02  6.13e+02  1.78e-01  9.34e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6012e+02  1.60e+02  1.50e-01  7.94e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7648e+01  1.71e+01  4.72e-02  2.49e+01  5.21e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.1997e+00  7.00e-01  2.09e-03  1.15e+00  2.27e-05  1.92e-01  1.81e-01  
  6  +5.0000e-01  +7.6129e-01  2.61e-01  7.81e-04  4.30e-01  7.51e-06  7.94e-02  6.65e-01  
  7  +5.0000e-01  +6.9557e-01  1.96e-01  5.85e-04  3.22e-01  5.69e-06  5.05e-02  4.94e-01  
  8  +5.0000e-01  +6.6407e-01  1.64e-01  4.90e-04  2.70e-01  5.56e-06  3.09e-02  4.69e-01  
  9  +4.9999e-01  +6.4139e-01  1.41e-01  4.21e-04  2.31e-01  8.12e-06  1.27e-02  6.60e-01  
 10  +4.9984e-01  +6.1186e-01  1.12e-01  1.89e-04  1.04e-01  7.61e-05  8.36e-04  9.72e-01  
 11  +4.9880e-01  +6.0728e-01  1.08e-01  3.34e-05  1.84e-02  5.37e-04  1.12e-04  8.68e-01  
 12  +4.9938e-01  +5.9909e-01  9.97e-02  3.08e-05  1.70e-02  2.50e-04  1.01e-04  5.40e-01  
 13  +4.9884e-01  +5.9660e-01  9.78e-02  1.76e-05  9.73e-03  4.19e-04  5.71e-05  4.45e-01  
 14  +4.9867e-01  +5.9164e-01  9.30e-02  1.27e-05  7.00e-03  3.74e-04  4.07e-05  5.55e-01  
 15  +4.9845e-01  +5.8725e-01  8.88e-02  9.51e-06  5.26e-03  2.84e-04  3.04e-05  5.91e-01  
 16  +4.9837e-01  +5.8441e-01  8.60e-02  8.38e-06  4.63e-03  1.40e-04  2.67e-05  6.00e-01  
 17  +4.9657e-01  +5.7507e-01  7.85e-02  5.34e-06  2.95e-03  1.38e-04  1.71e-05  5.55e-01  
 18  +4.9290e-01  +5.5708e-01  6.42e-02  3.71e-06  2.05e-03  1.02e-04  1.21e-05  4.10e-01  
 19  +4.9044e-01  +5.4564e-01  5.52e-02  3.06e-06  1.69e-03  6.98e-05  1.01e-05  2.90e-01  
 20  +4.8864e-01  +5.3768e-01  4.90e-02  2.62e-06  1.44e-03  4.22e-05  8.75e-06  3.58e-01  
 21  +4.8794e-01  +5.3461e-01  4.67e-02  2.45e-06  1.35e-03  3.06e-05  8.24e-06  2.45e-01  
 22  +4.8329e-01  +5.1436e-01  3.11e-02  1.48e-06  8.19e-04  1.24e-05  5.13e-06  5.76e-01  
 23  +4.8270e-01  +5.1190e-01  2.92e-02  1.37e-06  7.54e-04  1.03e-05  4.74e-06  1.82e-01  
 24  +4.8247e-01  +5.1082e-01  2.84e-02  1.30e-06  7.19e-04  7.09e-06  4.52e-06  3.11e-01  
 25  +4.8079e-01  +5.0385e-01  2.31e-02  1.03e-06  5.66e-04  5.00e-06  3.61e-06  3.02e-01  
 26  +4.8027e-01  +5.0158e-01  2.13e-02  9.31e-07  5.14e-04  3.56e-06  3.28e-06  3.03e-01  
 27  +4.7865e-01  +4.9487e-01  1.62e-02  6.91e-07  3.81e-04  2.34e-06  2.47e-06  3.51e-01  
 28  +4.7749e-01  +4.8996e-01  1.25e-02  5.20e-07  2.87e-04  1.10e-06  1.88e-06  5.55e-01  
 29  +4.7592e-01  +4.8340e-01  7.48e-03  3.04e-07  1.68e-04  9.37e-08  1.11e-06  9.90e-01  
 30  +4.7433e-01  +4.7721e-01  2.88e-03  1.15e-07  6.34e-05  3.51e-08  4.31e-07  6.96e-01  
 31  +4.7432e-01  +4.7716e-01  2.84e-03  1.14e-07  6.29e-05  3.42e-08  4.30e-07  2.02e-02  
 32  +4.7430e-01  +4.7709e-01  2.78e-03  1.12e-07  6.16e-05  3.33e-08  4.21e-07  8.17e-02  
 33  +4.7426e-01  +4.7692e-01  2.67e-03  1.06e-07  5.85e-05  3.17e-08  3.99e-07  1.91e-01  
 34  +4.7368e-01  +4.7474e-01  1.07e-03  4.19e-08  2.31e-05  1.17e-08  1.61e-07  9.28e-01  
 35  +4.7332e-01  +4.7341e-01  9.42e-05  3.67e-09  2.02e-06  9.96e-10  1.43e-08  9.90e-01  
 36  +4.7328e-01  +4.7328e-01  9.67e-07  3.75e-11  2.07e-08  1.02e-11  1.47e-10  9.90e-01  
 37  +4.7328e-01  +4.7328e-01  9.67e-09  3.75e-13  2.07e-10  1.02e-13  1.47e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.3024152s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:33 PM: Problem status: optimal
(CVXPY) Sep 20 08:05:33 PM: Optimal value: 4.733e-01
(CVXPY) Sep 20 08:05:33 PM: Compilation took 4.955e-01 seconds
(CVXPY) Sep 20 08:05:33 PM: Solver (including time spent in interface) took 3.395e+00 seconds
Iteration: 26, Objective: 0.4733
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:05:34 PM: Your problem has 25279 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:05:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:05:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:05:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:05:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:05:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:05:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:05:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:05:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:05:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:05:34 PM: Finished problem compilation (took 5.665e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25279
  constraints   = 50279
  nnz(P)        = 0
  nnz(A)        = 529870
  cones (total) = 1
    : Nonnegative = 1,  numel = 50279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.75e+02  1.00e+00  1.00e+00   ------   
  1  +5.8081e-01  +5.4264e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3192e-01  +6.1336e+02  6.13e+02  1.78e-01  9.33e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6011e+02  1.60e+02  1.50e-01  7.93e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7648e+01  1.71e+01  4.72e-02  2.49e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0003e-01  +1.4816e+00  9.82e-01  2.94e-03  1.61e+00  2.24e-05  1.93e-01  1.28e-01  
  6  +5.0001e-01  +7.6025e-01  2.60e-01  7.78e-04  4.28e-01  5.14e-06  7.41e-02  6.77e-01  
  7  +5.0001e-01  +6.9959e-01  2.00e-01  5.97e-04  3.28e-01  4.11e-06  5.00e-02  4.32e-01  
  8  +5.0001e-01  +6.8213e-01  1.82e-01  5.44e-04  2.99e-01  3.90e-06  3.42e-02  4.67e-01  
  9  +5.0000e-01  +6.4101e-01  1.41e-01  4.20e-04  2.31e-01  5.32e-06  1.30e-02  6.77e-01  
 10  +4.9989e-01  +6.1053e-01  1.11e-01  1.82e-04  1.00e-01  5.30e-05  7.80e-04  9.85e-01  
 11  +4.9873e-01  +6.0512e-01  1.06e-01  2.09e-05  1.16e-02  5.67e-04  6.84e-05  9.14e-01  
 12  +4.9850e-01  +5.9862e-01  1.00e-01  1.51e-05  8.32e-03  5.56e-04  4.87e-05  4.78e-01  
 13  +4.9886e-01  +5.9175e-01  9.29e-02  1.24e-05  6.87e-03  2.69e-04  3.98e-05  6.56e-01  
 14  +4.9869e-01  +5.8747e-01  8.88e-02  9.35e-06  5.16e-03  1.76e-04  2.97e-05  6.69e-01  
 15  +4.9816e-01  +5.8189e-01  8.37e-02  6.90e-06  3.81e-03  3.54e-05  2.19e-05  9.90e-01  
 16  +4.9622e-01  +5.7243e-01  7.62e-02  4.89e-06  2.70e-03  3.70e-05  1.56e-05  3.51e-01  
 17  +4.9316e-01  +5.5769e-01  6.45e-02  3.79e-06  2.09e-03  2.62e-05  1.23e-05  3.36e-01  
 18  +4.9029e-01  +5.4452e-01  5.42e-02  3.02e-06  1.67e-03  1.65e-05  1.00e-05  3.45e-01  
 19  +4.8827e-01  +5.3579e-01  4.75e-02  2.52e-06  1.39e-03  1.05e-05  8.43e-06  3.49e-01  
 20  +4.8807e-01  +5.3492e-01  4.69e-02  2.47e-06  1.36e-03  9.17e-06  8.29e-06  1.16e-01  
 21  +4.8638e-01  +5.2778e-01  4.14e-02  2.08e-06  1.15e-03  2.74e-06  7.05e-06  6.43e-01  
 22  +4.8326e-01  +5.1441e-01  3.11e-02  1.47e-06  8.11e-04  1.69e-06  5.08e-06  3.99e-01  
 23  +4.8320e-01  +5.1410e-01  3.09e-02  1.45e-06  7.99e-04  1.53e-06  5.00e-06  1.12e-01  
 24  +4.8239e-01  +5.1060e-01  2.82e-02  1.28e-06  7.09e-04  1.01e-06  4.46e-06  3.92e-01  
 25  +4.7928e-01  +4.9758e-01  1.83e-02  7.92e-07  4.37e-04  5.24e-07  2.82e-06  5.18e-01  
 26  +4.7860e-01  +4.9464e-01  1.60e-02  6.82e-07  3.76e-04  3.79e-07  2.44e-06  3.66e-01  
 27  +4.7715e-01  +4.8868e-01  1.15e-02  4.81e-07  2.65e-04  2.46e-07  1.74e-06  4.03e-01  
 28  +4.7602e-01  +4.8378e-01  7.76e-03  3.16e-07  1.74e-04  8.94e-08  1.15e-06  9.58e-01  
 29  +4.7435e-01  +4.7728e-01  2.93e-03  1.17e-07  6.46e-05  3.33e-08  4.39e-07  7.11e-01  
 30  +4.7434e-01  +4.7723e-01  2.89e-03  1.16e-07  6.40e-05  3.24e-08  4.38e-07  2.82e-02  
 31  +4.7431e-01  +4.7711e-01  2.80e-03  1.12e-07  6.19e-05  3.13e-08  4.23e-07  1.25e-01  
 32  +4.7423e-01  +4.7682e-01  2.59e-03  1.03e-07  5.67e-05  2.90e-08  3.87e-07  2.40e-01  
 33  +4.7360e-01  +4.7446e-01  8.59e-04  3.37e-08  1.86e-05  9.32e-09  1.30e-07  9.17e-01  
 34  +4.7331e-01  +4.7338e-01  6.96e-05  2.70e-09  1.49e-06  7.36e-10  1.06e-08  9.90e-01  
 35  +4.7328e-01  +4.7328e-01  7.05e-07  2.73e-11  1.51e-08  7.45e-12  1.07e-10  9.90e-01  
 36  +4.7328e-01  +4.7328e-01  7.05e-09  2.74e-13  1.51e-10  7.45e-14  1.07e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.2985231s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:38 PM: Problem status: optimal
(CVXPY) Sep 20 08:05:38 PM: Optimal value: 4.733e-01
(CVXPY) Sep 20 08:05:38 PM: Compilation took 5.665e-01 seconds
(CVXPY) Sep 20 08:05:38 PM: Solver (including time spent in interface) took 3.390e+00 seconds
Iteration: 27, Objective: 0.4733
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:05:38 PM: Your problem has 25289 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:05:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:05:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:05:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:05:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:05:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:05:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:05:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:05:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:05:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:05:39 PM: Finished problem compilation (took 5.219e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25289
  constraints   = 50289
  nnz(P)        = 0
  nnz(A)        = 533510
  cones (total) = 1
    : Nonnegative = 1,  numel = 50289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.75e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4262e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3192e-01  +6.1336e+02  6.13e+02  1.78e-01  9.33e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6010e+02  1.60e+02  1.50e-01  7.93e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7644e+01  1.71e+01  4.72e-02  2.49e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0003e-01  +1.4665e+00  9.66e-01  2.89e-03  1.58e+00  2.24e-05  1.93e-01  1.30e-01  
  6  +5.0001e-01  +7.5908e-01  2.59e-01  7.75e-04  4.26e-01  5.19e-06  7.40e-02  6.75e-01  
  7  +5.0001e-01  +6.9195e-01  1.92e-01  5.74e-04  3.16e-01  4.06e-06  4.75e-02  4.70e-01  
  8  +5.0001e-01  +6.7436e-01  1.74e-01  5.21e-04  2.87e-01  4.00e-06  3.16e-02  4.61e-01  
  9  +5.0000e-01  +6.3885e-01  1.39e-01  4.13e-04  2.27e-01  6.05e-06  1.13e-02  7.03e-01  
 10  +4.9989e-01  +6.1998e-01  1.20e-01  1.97e-04  1.09e-01  5.64e-05  8.46e-04  9.51e-01  
 11  +4.9848e-01  +6.1338e-01  1.15e-01  2.01e-05  1.11e-02  6.78e-04  6.56e-05  9.23e-01  
 12  +4.9829e-01  +6.0405e-01  1.06e-01  1.47e-05  8.10e-03  6.24e-04  4.73e-05  4.67e-01  
 13  +4.9818e-01  +5.9817e-01  1.00e-01  1.19e-05  6.59e-03  5.37e-04  3.83e-05  3.83e-01  
 14  +4.9817e-01  +5.9349e-01  9.53e-02  1.03e-05  5.66e-03  4.10e-04  3.28e-05  3.85e-01  
 15  +4.9798e-01  +5.8881e-01  9.08e-02  8.63e-06  4.77e-03  3.02e-04  2.75e-05  4.32e-01  
 16  +4.9768e-01  +5.8410e-01  8.64e-02  7.69e-06  4.25e-03  1.83e-04  2.45e-05  4.49e-01  
 17  +4.9558e-01  +5.7296e-01  7.74e-02  5.17e-06  2.86e-03  1.71e-04  1.66e-05  4.73e-01  
 18  +4.9143e-01  +5.5218e-01  6.07e-02  3.45e-06  1.90e-03  1.09e-04  1.13e-05  4.78e-01  
 19  +4.9041e-01  +5.4713e-01  5.67e-02  3.19e-06  1.76e-03  5.60e-05  1.06e-05  3.93e-01  
 20  +4.8838e-01  +5.3776e-01  4.94e-02  2.65e-06  1.46e-03  2.75e-05  8.84e-06  4.60e-01  
 21  +4.8639e-01  +5.2877e-01  4.24e-02  2.14e-06  1.18e-03  7.74e-06  7.21e-06  6.52e-01  
 22  +4.8246e-01  +5.1187e-01  2.94e-02  1.37e-06  7.55e-04  4.49e-06  4.71e-06  4.37e-01  
 23  +4.8201e-01  +5.1002e-01  2.80e-02  1.27e-06  7.03e-04  3.57e-06  4.40e-06  2.22e-01  
 24  +4.8053e-01  +5.0394e-01  2.34e-02  1.02e-06  5.62e-04  1.92e-06  3.55e-06  4.84e-01  
 25  +4.7942e-01  +4.9938e-01  2.00e-02  8.51e-07  4.69e-04  1.47e-06  2.99e-06  2.55e-01  
 26  +4.7785e-01  +4.9282e-01  1.50e-02  6.18e-07  3.41e-04  6.87e-07  2.19e-06  5.77e-01  
 27  +4.7716e-01  +4.8991e-01  1.28e-02  5.20e-07  2.87e-04  4.44e-07  1.85e-06  4.21e-01  
 28  +4.7634e-01  +4.8635e-01  1.00e-02  4.01e-07  2.21e-04  1.15e-07  1.44e-06  9.90e-01  
 29  +4.7432e-01  +4.7859e-01  4.26e-03  1.68e-07  9.28e-05  4.81e-08  6.17e-07  7.04e-01  
 30  +4.7352e-01  +4.7557e-01  2.05e-03  7.99e-08  4.41e-05  2.30e-08  2.98e-07  5.91e-01  
 31  +4.7315e-01  +4.7416e-01  1.01e-03  3.90e-08  2.15e-05  1.12e-08  1.47e-07  9.90e-01  
 32  +4.7278e-01  +4.7284e-01  5.83e-05  2.23e-09  1.23e-06  6.41e-10  8.54e-09  9.54e-01  
 33  +4.7276e-01  +4.7276e-01  6.13e-07  2.34e-11  1.29e-08  6.73e-12  8.98e-11  9.90e-01  
 34  +4.7276e-01  +4.7276e-01  6.13e-09  2.34e-13  1.29e-10  6.73e-14  8.98e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.9304543s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:05:42 PM: Problem status: optimal
(CVXPY) Sep 20 08:05:42 PM: Optimal value: 4.728e-01
(CVXPY) Sep 20 08:05:42 PM: Compilation took 5.219e-01 seconds
(CVXPY) Sep 20 08:05:42 PM: Solver (including time spent in interface) took 3.019e+00 seconds
FULL MODEL:
  Accruacy: 0.50874
  Our objective: 0.017480000000000107

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.00272)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.00108)
 OR (x3 = 1)                                                                                         <-- (term's our objective: 0.01368)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 130.71789860725403
Best over terms:
  Our final objective: 0.013680000000000081
    Its accruacy: 0.50684
    Its hamming distance: 10
  Shortest hamming distance: 1
    Its our objective: 0.0027200000000000045
  Highest accruacy: 0.50684
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

