Command:
python test_script.py -s constant_subclass -d 9 -n 50 --seed 43 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 9.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:46 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:46 PM: Finished problem compilation (took 7.533e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 319
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9516e-01  +2.6234e+01  2.57e+01  8.36e-01  6.92e+00  1.00e+00  1.08e+00   ------   
  1  +5.6471e-01  +5.8036e+00  5.24e+00  3.66e-01  4.03e+00  3.74e-03  6.09e-01  5.97e-01  
  2  +4.8305e-01  +1.2107e+00  7.28e-01  8.39e-02  1.14e+00  2.08e-02  2.31e-01  9.90e-01  
  3  +4.2438e-01  +7.4259e-01  3.18e-01  2.19e-02  3.13e-01  1.27e-02  7.29e-02  7.68e-01  
  4  +3.9706e-01  +5.2909e-01  1.32e-01  7.89e-03  1.12e-01  4.63e-03  3.05e-02  6.45e-01  
  5  +3.7743e-01  +4.4409e-01  6.67e-02  3.06e-03  4.37e-02  2.00e-03  1.42e-02  6.66e-01  
  6  +3.6180e-01  +3.6679e-01  5.00e-03  2.22e-04  3.16e-03  4.14e-05  1.13e-03  9.79e-01  
  7  +3.6012e-01  +3.6017e-01  5.09e-05  2.25e-06  3.21e-05  4.13e-07  1.16e-05  9.90e-01  
  8  +3.6010e-01  +3.6010e-01  5.09e-07  2.25e-08  3.21e-07  4.13e-09  1.16e-07  9.90e-01  
  9  +3.6010e-01  +3.6010e-01  5.09e-09  2.25e-10  3.21e-09  4.13e-11  1.16e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 395.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:46 PM: Optimal value: 3.601e-01
(CVXPY) Sep 20 07:55:46 PM: Compilation took 7.533e-03 seconds
(CVXPY) Sep 20 07:55:46 PM: Solver (including time spent in interface) took 9.980e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3601
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:46 PM: Your problem has 54 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:46 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 54
  constraints   = 79
  nnz(P)        = 0
  nnz(A)        = 368
  cones (total) = 1
    : Nonnegative = 1,  numel = 79

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8364e-01  +2.7436e+01  2.70e+01  8.47e-01  6.76e+00  1.00e+00  1.13e+00   ------   
  1  +4.9504e-01  +5.9841e+00  5.49e+00  3.68e-01  3.79e+00  3.84e-03  6.20e-01  6.03e-01  
  2  +3.5625e-01  +1.4356e+00  1.08e+00  8.68e-02  1.11e+00  2.34e-02  2.34e-01  9.08e-01  
  3  +2.8802e-01  +6.5287e-01  3.65e-01  2.58e-02  3.31e-01  6.43e-03  8.57e-02  7.68e-01  
  4  +2.5401e-01  +4.4697e-01  1.93e-01  1.17e-02  1.60e-01  2.78e-03  4.64e-02  6.77e-01  
  5  +2.2535e-01  +2.5021e-01  2.49e-02  1.49e-03  2.00e-02  2.36e-04  6.97e-03  8.63e-01  
  6  +2.2047e-01  +2.2083e-01  3.60e-04  2.17e-05  2.90e-04  2.89e-06  1.06e-04  9.85e-01  
  7  +2.2040e-01  +2.2041e-01  1.13e-05  6.94e-07  9.19e-06  7.15e-08  3.47e-06  9.69e-01  
  8  +2.2040e-01  +2.2040e-01  1.13e-07  6.97e-09  9.21e-08  7.16e-10  3.49e-08  9.90e-01  
  9  +2.2040e-01  +2.2040e-01  1.13e-09  6.98e-11  9.23e-10  7.17e-12  3.50e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 445.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:46 PM: Optimal value: 2.204e-01
(CVXPY) Sep 20 07:55:46 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:55:46 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Iteration: 2, Objective: 0.2204
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:46 PM: Your problem has 64 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:46 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 64
  constraints   = 89
  nnz(P)        = 0
  nnz(A)        = 433
  cones (total) = 1
    : Nonnegative = 1,  numel = 89

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7560e-01  +2.7327e+01  2.69e+01  8.56e-01  6.72e+00  1.00e+00  1.12e+00   ------   
  1  +4.4876e-01  +6.0521e+00  5.60e+00  3.80e-01  3.69e+00  3.95e-03  6.16e-01  5.94e-01  
  2  +3.0992e-01  +1.2366e+00  9.27e-01  7.62e-02  9.53e-01  2.40e-02  2.00e-01  9.69e-01  
  3  +2.6657e-01  +5.9918e-01  3.33e-01  2.63e-02  3.30e-01  8.28e-03  7.74e-02  7.20e-01  
  4  +2.2606e-01  +4.0602e-01  1.80e-01  9.42e-03  1.35e-01  4.70e-03  3.06e-02  8.19e-01  
  5  +1.9708e-01  +3.0719e-01  1.10e-01  4.64e-03  6.92e-02  2.71e-03  1.63e-02  5.82e-01  
  6  +1.6645e-01  +1.8169e-01  1.52e-02  6.10e-04  9.20e-03  2.64e-04  2.27e-03  9.11e-01  
  7  +1.6076e-01  +1.6112e-01  3.63e-04  1.46e-05  2.19e-04  4.34e-06  5.55e-05  9.76e-01  
  8  +1.6061e-01  +1.6062e-01  1.43e-05  6.09e-07  8.73e-06  9.00e-08  2.50e-06  9.65e-01  
  9  +1.6060e-01  +1.6060e-01  1.45e-07  6.17e-09  8.81e-08  9.11e-10  2.56e-08  9.90e-01  
 10  +1.6060e-01  +1.6060e-01  1.45e-09  6.17e-11  8.81e-10  9.12e-12  2.56e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 551µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:46 PM: Optimal value: 1.606e-01
(CVXPY) Sep 20 07:55:46 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:55:46 PM: Solver (including time spent in interface) took 1.009e-03 seconds
Iteration: 3, Objective: 0.1606
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:46 PM: Your problem has 74 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:46 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 74
  constraints   = 99
  nnz(P)        = 0
  nnz(A)        = 476
  cones (total) = 1
    : Nonnegative = 1,  numel = 99

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7047e-01  +2.7551e+01  2.71e+01  8.64e-01  6.54e+00  1.00e+00  1.14e+00   ------   
  1  +4.0764e-01  +6.0979e+00  5.69e+00  3.86e-01  3.53e+00  4.00e-03  6.20e-01  5.93e-01  
  2  +2.2232e-01  +1.4813e+00  1.26e+00  8.31e-02  1.00e+00  2.54e-02  2.12e-01  8.98e-01  
  3  +1.6342e-01  +4.9799e-01  3.35e-01  2.04e-02  2.60e-01  9.40e-03  5.92e-02  7.63e-01  
  4  +1.2620e-01  +2.9905e-01  1.73e-01  9.31e-03  1.27e-01  4.88e-03  2.90e-02  5.94e-01  
  5  +1.0039e-01  +1.7766e-01  7.73e-02  3.70e-03  5.31e-02  2.21e-03  1.23e-02  6.11e-01  
  6  +8.2306e-02  +8.7843e-02  5.54e-03  2.59e-04  3.73e-03  1.21e-04  8.96e-04  9.39e-01  
  7  +8.0857e-02  +8.1029e-02  1.73e-04  8.38e-06  1.19e-04  1.59e-06  2.96e-05  9.67e-01  
  8  +8.0802e-02  +8.0811e-02  8.18e-06  4.20e-07  5.76e-06  8.54e-08  1.55e-06  9.51e-01  
  9  +8.0800e-02  +8.0800e-02  8.18e-08  4.20e-09  5.77e-08  8.54e-10  1.55e-08  9.90e-01  
 10  +8.0800e-02  +8.0800e-02  8.20e-10  4.21e-11  5.78e-10  8.54e-12  1.55e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 579.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:46 PM: Optimal value: 8.080e-02
(CVXPY) Sep 20 07:55:46 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:55:46 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Iteration: 4, Objective: 0.0808
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:46 PM: Your problem has 79 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:46 PM: Finished problem compilation (took 4.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 79
  constraints   = 104
  nnz(P)        = 0
  nnz(A)        = 498
  cones (total) = 1
    : Nonnegative = 1,  numel = 104

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6319e-01  +2.7508e+01  2.70e+01  8.66e-01  6.47e+00  1.00e+00  1.12e+00   ------   
  1  +3.5837e-01  +6.3054e+00  5.95e+00  3.93e-01  3.51e+00  4.17e-03  6.15e-01  5.74e-01  
  2  +2.0507e-01  +1.7078e+00  1.50e+00  1.09e-01  1.25e+00  2.50e-02  2.50e-01  8.21e-01  
  3  +1.4968e-01  +5.4845e-01  3.99e-01  2.70e-02  3.31e-01  1.01e-02  7.34e-02  7.39e-01  
  4  +9.8565e-02  +2.4696e-01  1.48e-01  8.75e-03  1.13e-01  3.74e-03  2.72e-02  7.07e-01  
  5  +7.5979e-02  +1.3809e-01  6.21e-02  3.35e-03  4.47e-02  1.42e-03  1.11e-02  6.52e-01  
  6  +6.1675e-02  +6.5039e-02  3.36e-03  1.78e-04  2.37e-03  6.38e-05  6.15e-04  9.49e-01  
  7  +6.0873e-02  +6.1074e-02  2.02e-04  1.12e-05  1.45e-04  1.83e-06  4.03e-05  9.35e-01  
  8  +6.0806e-02  +6.0821e-02  1.49e-05  8.76e-07  1.07e-05  1.22e-07  3.55e-06  9.38e-01  
  9  +6.0800e-02  +6.0800e-02  1.73e-07  1.02e-08  1.24e-07  1.38e-09  4.21e-08  9.88e-01  
 10  +6.0800e-02  +6.0800e-02  1.73e-09  1.02e-10  1.24e-09  1.38e-11  4.22e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 574.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:46 PM: Optimal value: 6.080e-02
(CVXPY) Sep 20 07:55:46 PM: Compilation took 4.008e-03 seconds
(CVXPY) Sep 20 07:55:46 PM: Solver (including time spent in interface) took 9.990e-04 seconds
Iteration: 5, Objective: 0.0608
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:47 PM: Your problem has 89 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:47 PM: Finished problem compilation (took 4.530e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 89
  constraints   = 114
  nnz(P)        = 0
  nnz(A)        = 530
  cones (total) = 1
    : Nonnegative = 1,  numel = 114

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5565e-01  +2.7249e+01  2.68e+01  8.71e-01  6.28e+00  1.00e+00  1.11e+00   ------   
  1  +2.6590e-01  +6.3575e+00  6.09e+00  3.85e-01  3.27e+00  4.47e-03  5.87e-01  5.69e-01  
  2  +1.3011e-01  +1.5306e+00  1.40e+00  1.03e-01  1.12e+00  2.42e-02  2.28e-01  8.30e-01  
  3  +8.4620e-02  +3.1414e-01  2.30e-01  1.79e-02  2.03e-01  5.63e-03  4.71e-02  8.36e-01  
  4  +5.6512e-02  +2.0728e-01  1.51e-01  1.02e-02  1.20e-01  3.46e-03  2.99e-02  5.00e-01  
  5  +2.8165e-02  +6.3496e-02  3.53e-02  2.15e-03  2.62e-02  6.43e-04  7.00e-03  8.51e-01  
  6  +2.1208e-02  +2.2802e-02  1.59e-03  9.69e-05  1.17e-03  2.29e-05  3.24e-04  9.56e-01  
  7  +2.0870e-02  +2.1067e-02  1.97e-04  1.31e-05  1.47e-04  3.13e-07  5.12e-05  9.78e-01  
  8  +2.0804e-02  +2.0815e-02  1.08e-05  7.28e-07  7.92e-06  3.48e-08  3.24e-06  9.59e-01  
  9  +2.0800e-02  +2.0800e-02  1.13e-07  7.63e-09  8.28e-08  3.62e-10  3.46e-08  9.89e-01  
 10  +2.0800e-02  +2.0800e-02  1.13e-09  7.64e-11  8.29e-10  3.63e-12  3.46e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 621.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:47 PM: Optimal value: 2.080e-02
(CVXPY) Sep 20 07:55:47 PM: Compilation took 4.530e-03 seconds
(CVXPY) Sep 20 07:55:47 PM: Solver (including time spent in interface) took 9.918e-04 seconds
Iteration: 6, Objective: 0.0208
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:47 PM: Your problem has 99 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:47 PM: Finished problem compilation (took 4.519e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 99
  constraints   = 124
  nnz(P)        = 0
  nnz(A)        = 550
  cones (total) = 1
    : Nonnegative = 1,  numel = 124

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5035e-01  +2.7417e+01  2.70e+01  8.76e-01  6.07e+00  1.00e+00  1.11e+00   ------   
  1  +2.0142e-01  +6.6503e+00  6.45e+00  3.90e-01  3.16e+00  4.70e-03  5.88e-01  5.50e-01  
  2  +1.0541e-01  +1.0363e+00  9.31e-01  7.45e-02  7.97e-01  2.64e-02  1.73e-01  9.79e-01  
  3  +6.8461e-02  +2.4035e-01  1.72e-01  1.44e-02  1.55e-01  5.17e-03  3.82e-02  8.14e-01  
  4  +5.5012e-02  +2.0616e-01  1.51e-01  1.04e-02  1.24e-01  4.46e-03  2.92e-02  3.76e-01  
  5  +2.1812e-02  +8.3720e-02  6.19e-02  3.22e-03  4.37e-02  2.02e-03  1.03e-02  6.87e-01  
  6  +2.5161e-03  +6.7066e-03  4.19e-03  2.12e-04  2.90e-03  2.12e-05  7.06e-04  9.90e-01  
  7  +1.3720e-03  +2.3166e-03  9.45e-04  4.97e-05  6.67e-04  4.58e-06  1.74e-04  7.80e-01  
  8  +1.0721e-03  +1.2334e-03  1.61e-04  8.76e-06  1.14e-04  1.24e-06  3.40e-05  9.39e-01  
  9  +1.0020e-03  +1.0062e-03  4.23e-06  2.32e-07  2.99e-06  2.81e-08  9.35e-07  9.76e-01  
 10  +1.0000e-03  +1.0001e-03  4.23e-08  2.32e-09  2.99e-08  2.81e-10  9.37e-09  9.90e-01  
 11  +1.0000e-03  +1.0000e-03  4.23e-10  2.32e-11  3.00e-10  2.81e-12  9.37e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 687.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:47 PM: Optimal value: 1.000e-03
(CVXPY) Sep 20 07:55:47 PM: Compilation took 4.519e-03 seconds
(CVXPY) Sep 20 07:55:47 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Iteration: 7, Objective: 0.0010
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:47 PM: Your problem has 109 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:47 PM: Finished problem compilation (took 4.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 109
  constraints   = 134
  nnz(P)        = 0
  nnz(A)        = 588
  cones (total) = 1
    : Nonnegative = 1,  numel = 134

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.3809e-01  +2.7442e+01  2.70e+01  8.80e-01  5.95e+00  1.00e+00  1.11e+00   ------   
  1  +1.0009e-01  +7.0359e+00  6.94e+00  4.00e-01  3.09e+00  5.05e-03  5.87e-01  5.63e-01  
  2  +7.8939e-02  +9.9389e-01  9.15e-01  8.27e-02  8.27e-01  2.87e-02  1.87e-01  9.90e-01  
  3  +5.0981e-02  +2.2671e-01  1.76e-01  1.67e-02  1.66e-01  5.92e-03  4.33e-02  8.09e-01  
  4  +2.5385e-02  +1.1210e-01  8.67e-02  6.65e-03  7.35e-02  2.69e-03  1.92e-02  6.98e-01  
  5  +9.4934e-03  +5.0707e-02  4.12e-02  2.81e-03  3.33e-02  6.39e-04  8.63e-03  8.24e-01  
  6  +1.5638e-03  +4.4843e-03  2.92e-03  1.90e-04  2.29e-03  4.17e-05  6.08e-04  9.31e-01  
  7  +1.1151e-03  +1.8363e-03  7.21e-04  4.89e-05  5.77e-04  8.55e-06  1.66e-04  7.48e-01  
  8  +9.5980e-04  +1.1635e-03  2.04e-04  1.34e-05  1.59e-04  1.82e-06  5.22e-05  8.74e-01  
  9  +9.0371e-04  +9.1612e-04  1.24e-05  8.23e-07  9.70e-06  1.01e-07  3.32e-06  9.45e-01  
 10  +9.0004e-04  +9.0017e-04  1.27e-07  8.46e-09  9.95e-08  1.03e-09  3.42e-08  9.90e-01  
 11  +9.0000e-04  +9.0000e-04  1.27e-09  8.46e-11  9.96e-10  1.03e-11  3.42e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 709.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:47 PM: Optimal value: 9.000e-04
(CVXPY) Sep 20 07:55:47 PM: Compilation took 4.001e-03 seconds
(CVXPY) Sep 20 07:55:47 PM: Solver (including time spent in interface) took 1.520e-03 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 0 AND x2 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x8 = 0)            <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0)                       <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x8 = 1)                       <-- (term's our objective: 0.2)
 OR (x1 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.16)
 OR (x2 = 0 AND x3 = 1 AND x5 = 0 AND x7 = 1)                       <-- (term's our objective: 0.2)
 OR (x2 = 0 AND x3 = 1 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.2)
 OR (x3 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.16)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.0466971397399902
Best over terms:
  Our final objective: 0.19999999999999996
    Its accruacy: 0.6
    Its hamming distance: 9
  Shortest hamming distance: 7
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

