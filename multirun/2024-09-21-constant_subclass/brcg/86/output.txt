Command:
python test_script.py -s constant_subclass -d 3 -n 50 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 3.

Computed total variation: 0.36
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:49 PM: Your problem has 32 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:49 PM: Finished problem compilation (took 5.923e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 57
  nnz(P)        = 0
  nnz(A)        = 157
  cones (total) = 1
    : Nonnegative = 1,  numel = 57

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9028e-01  +2.5840e+01  2.53e+01  8.08e-01  5.02e+00  1.00e+00  1.07e+00   ------   
  1  +6.0794e-01  +5.0847e+00  4.48e+00  2.55e-01  2.41e+00  4.21e-03  4.69e-01  6.96e-01  
  2  +5.1941e-01  +9.2865e-01  4.09e-01  4.07e-02  4.33e-01  8.81e-03  1.16e-01  9.55e-01  
  3  +5.0595e-01  +9.0929e-01  4.03e-01  2.48e-02  2.71e-01  1.13e-02  7.40e-02  4.33e-01  
  4  +4.6530e-01  +6.9191e-01  2.27e-01  1.04e-02  1.14e-01  5.67e-03  3.65e-02  6.26e-01  
  5  +4.2688e-01  +4.5288e-01  2.60e-02  1.32e-03  1.44e-02  4.23e-05  5.75e-03  9.35e-01  
  6  +4.2020e-01  +4.2058e-01  3.77e-04  1.89e-05  2.05e-04  4.72e-07  8.57e-05  9.86e-01  
  7  +4.2010e-01  +4.2010e-01  3.76e-06  1.89e-07  2.05e-06  4.72e-09  8.58e-07  9.90e-01  
  8  +4.2010e-01  +4.2010e-01  3.76e-08  1.89e-09  2.05e-08  4.72e-11  8.58e-09  9.90e-01  
  9  +4.2010e-01  +4.2010e-01  3.76e-10  1.89e-11  2.05e-10  4.72e-13  8.58e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 239.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:49 PM: Optimal value: 4.201e-01
(CVXPY) Sep 20 07:26:49 PM: Compilation took 5.923e-03 seconds
(CVXPY) Sep 20 07:26:49 PM: Solver (including time spent in interface) took 5.090e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:49 PM: Your problem has 36 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:49 PM: Finished problem compilation (took 2.996e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 61
  nnz(P)        = 0
  nnz(A)        = 189
  cones (total) = 1
    : Nonnegative = 1,  numel = 61

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8290e-01  +2.6500e+01  2.60e+01  8.16e-01  5.26e+00  1.00e+00  1.12e+00   ------   
  1  +5.7654e-01  +5.2258e+00  4.65e+00  2.69e-01  2.57e+00  4.12e-03  5.03e-01  6.87e-01  
  2  +5.0532e-01  +1.3291e+00  8.24e-01  6.85e-02  7.62e-01  9.48e-03  1.82e-01  7.88e-01  
  3  +4.2992e-01  +1.0186e+00  5.89e-01  2.69e-02  3.08e-01  9.97e-03  8.34e-02  6.84e-01  
  4  +3.6321e-01  +5.5832e-01  1.95e-01  8.15e-03  9.23e-02  2.97e-03  3.09e-02  6.74e-01  
  5  +3.2348e-01  +3.3269e-01  9.21e-03  4.12e-04  4.58e-03  5.93e-05  1.95e-03  9.69e-01  
  6  +3.2049e-01  +3.2108e-01  5.86e-04  2.63e-05  2.92e-04  4.09e-06  1.28e-04  9.35e-01  
  7  +3.2045e-01  +3.2103e-01  5.77e-04  2.20e-05  2.47e-04  4.71e-06  1.05e-04  2.82e-01  
  8  +3.2025e-01  +3.2035e-01  1.03e-04  4.00e-06  4.49e-05  1.02e-06  1.90e-05  9.90e-01  
  9  +3.2020e-01  +3.2020e-01  1.27e-06  4.83e-08  5.43e-07  1.19e-08  2.31e-07  9.88e-01  
 10  +3.2020e-01  +3.2020e-01  1.27e-08  4.83e-10  5.43e-09  1.19e-10  2.31e-09  9.90e-01  
 11  +3.2020e-01  +3.2020e-01  1.27e-10  4.83e-12  5.43e-11  1.19e-12  2.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 247.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:49 PM: Optimal value: 3.202e-01
(CVXPY) Sep 20 07:26:49 PM: Compilation took 2.996e-03 seconds
(CVXPY) Sep 20 07:26:49 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.68
  Our objective: 0.36

IF 
    (x0 = 0 AND x2 = 0)            <-- (term's our objective: 0.28)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1) <-- (term's our objective: 0.08)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.3492741584777832
Best over terms:
  Our final objective: 0.28
    Its accruacy: 0.64
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.28
  Highest accruacy: 0.64
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

