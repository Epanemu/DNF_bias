Command:
python test_script.py -s constant_subclass -d 6 -n 10 --seed 43 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 6.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:12 PM: Your problem has 18 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:12 PM: Finished problem compilation (took 9.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 18
  constraints   = 23
  nnz(P)        = 0
  nnz(A)        = 58
  cones (total) = 1
    : Nonnegative = 1,  numel = 23

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.9927e-01  +5.9467e+00  5.55e+00  7.48e-01  2.58e+00  1.00e+00  1.28e+00   ------   
  1  +4.1427e-01  +1.1296e+00  7.15e-01  2.46e-01  1.04e+00  3.68e-03  5.44e-01  7.58e-01  
  2  +2.5608e-01  +3.7403e-01  1.18e-01  4.03e-02  1.86e-01  5.90e-03  1.28e-01  8.40e-01  
  3  +2.0341e-01  +2.1207e-01  8.67e-03  2.81e-03  1.32e-02  3.32e-04  1.04e-02  9.40e-01  
  4  +2.0020e-01  +2.0039e-01  1.90e-04  6.22e-05  2.91e-04  6.66e-06  2.35e-04  9.78e-01  
  5  +2.0011e-01  +2.0012e-01  9.62e-06  2.77e-06  1.32e-05  2.65e-07  1.31e-05  9.69e-01  
  6  +2.0010e-01  +2.0010e-01  1.10e-07  3.12e-08  1.50e-07  2.98e-09  1.55e-07  9.88e-01  
  7  +2.0010e-01  +2.0010e-01  1.10e-09  3.11e-10  1.50e-09  2.98e-11  1.55e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 177.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:12 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:12 PM: Optimal value: 2.001e-01
(CVXPY) Sep 20 07:33:12 PM: Compilation took 9.007e-03 seconds
(CVXPY) Sep 20 07:33:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:12 PM: Your problem has 28 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:12 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 28
  constraints   = 33
  nnz(P)        = 0
  nnz(A)        = 94
  cones (total) = 1
    : Nonnegative = 1,  numel = 33

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.0992e-01  +6.1796e+00  5.87e+00  7.90e-01  2.87e+00  1.00e+00  1.33e+00   ------   
  1  +1.6942e-01  +9.7514e-01  8.06e-01  2.70e-01  1.06e+00  4.17e-03  5.24e-01  7.40e-01  
  2  +3.5928e-02  +2.0753e-01  1.72e-01  5.63e-02  2.57e-01  1.01e-02  1.65e-01  8.14e-01  
  3  +5.6967e-03  +3.7972e-02  3.23e-02  9.18e-03  4.66e-02  2.30e-03  3.12e-02  8.66e-01  
  4  +3.0461e-04  +7.7822e-04  4.74e-04  1.38e-04  6.98e-04  2.85e-05  4.80e-04  9.85e-01  
  5  +2.1652e-04  +2.4897e-04  3.25e-05  1.17e-05  5.28e-05  2.47e-07  4.19e-05  9.14e-01  
  6  +2.0038e-04  +2.0137e-04  9.95e-07  3.74e-07  1.61e-06  3.26e-08  1.49e-06  9.79e-01  
  7  +2.0000e-04  +2.0001e-04  9.93e-09  3.73e-09  1.61e-08  3.25e-10  1.49e-08  9.90e-01  
  8  +2.0000e-04  +2.0000e-04  9.93e-11  3.74e-11  1.61e-10  3.25e-12  1.49e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 166.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:12 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:12 PM: Optimal value: 2.000e-04
(CVXPY) Sep 20 07:33:12 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:33:12 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Iteration: 2, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:12 PM: Your problem has 29 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:12 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 29
  constraints   = 34
  nnz(P)        = 0
  nnz(A)        = 97
  cones (total) = 1
    : Nonnegative = 1,  numel = 34

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +2.9287e-01  +6.1658e+00  5.87e+00  7.92e-01  2.87e+00  1.00e+00  1.32e+00   ------   
  1  +1.2665e-01  +9.6160e-01  8.35e-01  2.76e-01  1.07e+00  4.27e-03  5.25e-01  7.26e-01  
  2  +1.2291e-02  +1.4487e-01  1.33e-01  4.89e-02  2.12e-01  7.62e-03  1.36e-01  8.35e-01  
  3  +6.8615e-04  +7.0064e-03  6.32e-03  2.28e-03  1.02e-02  5.07e-04  7.08e-03  9.56e-01  
  4  +2.2300e-04  +5.1136e-04  2.88e-04  1.09e-04  4.81e-04  1.82e-05  3.39e-04  9.52e-01  
  5  +1.9657e-04  +2.5865e-04  6.21e-05  2.74e-05  1.10e-04  3.07e-06  9.00e-05  8.11e-01  
  6  +1.9943e-04  +2.0366e-04  4.23e-06  1.88e-06  7.50e-06  2.21e-07  6.38e-06  9.30e-01  
  7  +1.9999e-04  +2.0004e-04  4.24e-08  1.88e-08  7.51e-08  2.22e-09  6.39e-08  9.90e-01  
  8  +2.0000e-04  +2.0000e-04  4.24e-10  1.88e-10  7.51e-10  2.22e-11  6.40e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 171.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:12 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:12 PM: Optimal value: 2.000e-04
(CVXPY) Sep 20 07:33:12 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:33:12 PM: Solver (including time spent in interface) took 9.999e-04 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x3 = 1 AND x5 = 0) <-- (term's our objective: 0.8)
 OR (x4 = 0)            <-- (term's our objective: 0.4)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4567694664001465
Best over terms:
  Our final objective: 0.8
    Its accruacy: 0.9
    Its hamming distance: 6
  Shortest hamming distance: 5
    Its our objective: 0.4
  Highest accruacy: 0.9
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

