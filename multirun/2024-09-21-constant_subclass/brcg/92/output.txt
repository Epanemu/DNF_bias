Command:
python test_script.py -s constant_subclass -d 3 -n 100 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.19999999999999998
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 3.

Computed total variation: 0.28
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:04 PM: Your problem has 57 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:04 PM: Finished problem compilation (took 5.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 57
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 307
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9499e-01  +5.0939e+01  5.04e+01  8.54e-01  7.27e+00  1.00e+00  1.04e+00   ------   
  1  +6.1279e-01  +9.7175e+00  9.10e+00  2.67e-01  3.59e+00  4.23e-03  4.53e-01  6.96e-01  
  2  +5.3266e-01  +1.5632e+00  1.03e+00  5.95e-02  9.16e-01  8.01e-03  1.47e-01  8.72e-01  
  3  +5.2109e-01  +1.3571e+00  8.36e-01  3.48e-02  5.45e-01  1.01e-02  8.98e-02  4.26e-01  
  4  +5.0098e-01  +1.2179e+00  7.17e-01  2.22e-02  3.50e-01  8.34e-03  6.16e-02  5.36e-01  
  5  +4.6678e-01  +9.0712e-01  4.40e-01  9.17e-03  1.46e-01  6.59e-03  2.78e-02  5.61e-01  
  6  +4.1304e-01  +4.8997e-01  7.69e-02  1.82e-03  2.81e-02  2.69e-04  7.36e-03  9.43e-01  
  7  +3.9120e-01  +3.9482e-01  3.63e-03  7.73e-05  1.19e-03  7.40e-06  3.84e-04  9.72e-01  
  8  +3.9011e-01  +3.9015e-01  3.67e-05  7.80e-07  1.21e-05  7.44e-08  3.91e-06  9.90e-01  
  9  +3.9010e-01  +3.9010e-01  3.67e-07  7.80e-09  1.21e-07  7.44e-10  3.91e-08  9.90e-01  
 10  +3.9010e-01  +3.9010e-01  3.67e-09  7.80e-11  1.21e-09  7.44e-12  3.91e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 393.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:04 PM: Optimal value: 3.901e-01
(CVXPY) Sep 20 07:27:04 PM: Compilation took 5.508e-03 seconds
(CVXPY) Sep 20 07:27:04 PM: Solver (including time spent in interface) took 9.999e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:04 PM: Your problem has 60 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:04 PM: Finished problem compilation (took 4.155e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 60
  constraints   = 110
  nnz(P)        = 0
  nnz(A)        = 362
  cones (total) = 1
    : Nonnegative = 1,  numel = 110

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9309e-01  +5.0966e+01  5.05e+01  8.57e-01  7.71e+00  1.00e+00  1.05e+00   ------   
  1  +6.0408e-01  +9.8746e+00  9.27e+00  2.79e-01  3.84e+00  4.18e-03  4.71e-01  6.86e-01  
  2  +5.2984e-01  +1.5149e+00  9.85e-01  5.68e-02  9.24e-01  8.87e-03  1.41e-01  9.08e-01  
  3  +5.2041e-01  +1.3461e+00  8.26e-01  3.56e-02  5.87e-01  1.04e-02  9.15e-02  3.83e-01  
  4  +5.0408e-01  +1.2498e+00  7.46e-01  2.55e-02  4.22e-01  8.83e-03  6.95e-02  4.43e-01  
  5  +4.6959e-01  +9.3231e-01  4.63e-01  9.65e-03  1.62e-01  8.16e-03  2.82e-02  6.02e-01  
  6  +4.3732e-01  +7.4189e-01  3.05e-01  5.43e-03  9.07e-02  5.35e-03  1.67e-02  4.79e-01  
  7  +4.1402e-01  +6.1438e-01  2.00e-01  3.48e-03  5.77e-02  3.14e-03  1.14e-02  3.95e-01  
  8  +3.7503e-01  +4.1430e-01  3.93e-02  6.94e-04  1.13e-02  2.22e-04  2.63e-03  9.28e-01  
  9  +3.6118e-01  +3.6357e-01  2.39e-03  4.19e-05  6.81e-04  1.29e-05  1.70e-04  9.90e-01  
 10  +3.6011e-01  +3.6014e-01  2.41e-05  4.22e-07  6.86e-06  1.28e-07  1.73e-06  9.90e-01  
 11  +3.6010e-01  +3.6010e-01  2.41e-07  4.22e-09  6.86e-08  1.28e-09  1.73e-08  9.90e-01  
 12  +3.6010e-01  +3.6010e-01  2.41e-09  4.22e-11  6.86e-10  1.28e-11  1.73e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 377.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:04 PM: Optimal value: 3.601e-01
(CVXPY) Sep 20 07:27:04 PM: Compilation took 4.155e-03 seconds
(CVXPY) Sep 20 07:27:04 PM: Solver (including time spent in interface) took 9.995e-04 seconds
Iteration: 2, Objective: 0.3601
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:04 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:04 PM: Finished problem compilation (took 3.688e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 370
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9290e-01  +5.0900e+01  5.04e+01  8.58e-01  7.71e+00  1.00e+00  1.05e+00   ------   
  1  +6.0123e-01  +9.9437e+00  9.34e+00  2.84e-01  3.88e+00  4.15e-03  4.80e-01  6.80e-01  
  2  +5.2908e-01  +1.5342e+00  1.01e+00  5.83e-02  9.42e-01  9.21e-03  1.45e-01  9.10e-01  
  3  +5.1556e-01  +1.2753e+00  7.60e-01  3.22e-02  5.29e-01  1.03e-02  8.43e-02  4.50e-01  
  4  +4.9342e-01  +1.1520e+00  6.59e-01  1.79e-02  2.97e-01  1.05e-02  5.00e-02  5.52e-01  
  5  +4.4673e-01  +8.0524e-01  3.59e-01  6.53e-03  1.09e-01  6.98e-03  1.99e-02  6.50e-01  
  6  +4.0088e-01  +5.1269e-01  1.12e-01  2.37e-03  3.86e-02  5.22e-05  8.47e-03  8.30e-01  
  7  +3.8367e-01  +4.4650e-01  6.28e-02  1.16e-03  1.89e-02  5.07e-05  4.31e-03  5.19e-01  
  8  +3.6977e-01  +3.9281e-01  2.30e-02  4.18e-04  6.77e-03  1.47e-04  1.63e-03  9.90e-01  
  9  +3.6034e-01  +3.6091e-01  5.73e-04  1.02e-05  1.65e-04  2.04e-06  4.15e-05  9.80e-01  
 10  +3.6011e-01  +3.6012e-01  1.26e-05  2.24e-07  3.61e-06  6.20e-08  9.22e-07  9.90e-01  
 11  +3.6010e-01  +3.6010e-01  1.26e-07  2.24e-09  3.61e-08  6.20e-10  9.22e-09  9.90e-01  
 12  +3.6010e-01  +3.6010e-01  1.26e-09  2.24e-11  3.61e-10  6.20e-12  9.22e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 386.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:04 PM: Optimal value: 3.601e-01
(CVXPY) Sep 20 07:27:04 PM: Compilation took 3.688e-03 seconds
(CVXPY) Sep 20 07:27:04 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.64
  Our objective: 0.28

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.28)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.506962776184082
Best over terms:
  Our final objective: 0.28
    Its accruacy: 0.64
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.28
  Highest accruacy: 0.64
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

