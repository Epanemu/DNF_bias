Command:
python test_script.py -s constant_subclass -d 9 -n 50000 --seed 56 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.00224
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 9.

Computed total variation: 0.08184
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:14 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:14 PM: Finished problem compilation (took 1.630e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 300019
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8095e-01  +5.4248e+03  5.42e+03  4.36e-01  1.71e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3208e-01  +6.1486e+02  6.14e+02  1.78e-01  8.95e+01  1.62e-02  2.78e-01  9.28e-01  
  3  +5.0908e-01  +1.6055e+02  1.60e+02  1.50e-01  7.61e+01  4.52e-05  2.60e-01  2.60e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.71e-02  2.37e+01  5.20e-06  1.97e-01  4.43e-01  
  5  +5.0000e-01  +1.0766e+00  5.77e-01  1.72e-03  8.97e-01  2.20e-05  1.93e-01  2.02e-01  
  6  +5.0000e-01  +6.6691e-01  1.67e-01  4.98e-04  2.60e-01  5.48e-06  6.06e-02  7.22e-01  
  7  +5.0000e-01  +5.4392e-01  4.39e-02  1.31e-04  6.85e-02  1.18e-06  1.62e-02  8.17e-01  
  8  +5.0000e-01  +5.2148e-01  2.15e-02  6.40e-05  3.35e-02  6.62e-07  5.78e-03  7.68e-01  
  9  +5.0000e-01  +5.1207e-01  1.21e-02  3.58e-05  1.87e-02  1.18e-06  1.11e-03  8.43e-01  
 10  +4.9983e-01  +5.1741e-01  1.76e-02  7.02e-06  3.68e-03  7.70e-05  2.28e-05  9.88e-01  
 11  +4.9862e-01  +5.1292e-01  1.43e-02  7.53e-07  3.95e-04  5.54e-04  2.35e-06  8.98e-01  
 12  +4.9796e-01  +5.0502e-01  7.06e-03  4.43e-07  2.32e-04  4.66e-06  1.43e-06  6.82e-01  
 13  +4.9653e-01  +4.9813e-01  1.60e-03  7.71e-08  4.04e-05  9.03e-07  2.67e-07  8.50e-01  
 14  +4.9633e-01  +4.9752e-01  1.19e-03  5.04e-08  2.64e-05  1.61e-08  1.91e-07  9.90e-01  
 15  +4.9595e-01  +4.9598e-01  2.94e-05  1.18e-09  6.18e-07  3.83e-10  4.73e-09  9.76e-01  
 16  +4.9594e-01  +4.9594e-01  2.94e-07  1.17e-11  6.16e-09  3.85e-12  4.75e-11  9.90e-01  
 17  +4.9594e-01  +4.9594e-01  2.94e-09  1.18e-13  6.16e-11  3.85e-14  4.75e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 493.4861ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:15 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:15 PM: Optimal value: 4.959e-01
(CVXPY) Sep 20 08:06:15 PM: Compilation took 1.630e-01 seconds
(CVXPY) Sep 20 08:06:15 PM: Solver (including time spent in interface) took 5.369e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4959
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:15 PM: Your problem has 25029 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:15 PM: Finished problem compilation (took 1.675e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25029
  constraints   = 50029
  nnz(P)        = 0
  nnz(A)        = 333924
  cones (total) = 1
    : Nonnegative = 1,  numel = 50029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.66e+02  1.00e+00  1.00e+00   ------   
  1  +5.8095e-01  +5.4249e+03  5.42e+03  4.36e-01  1.74e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3207e-01  +6.1475e+02  6.14e+02  1.78e-01  9.11e+01  1.62e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6052e+02  1.60e+02  1.50e-01  7.74e+01  4.52e-05  2.60e-01  2.60e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.41e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.0752e+00  5.75e-01  1.72e-03  9.11e-01  2.21e-05  1.93e-01  2.05e-01  
  6  +5.0000e-01  +7.1204e-01  2.12e-01  6.32e-04  3.37e-01  7.21e-06  7.51e-02  6.65e-01  
  7  +5.0000e-01  +6.1624e-01  1.16e-01  3.47e-04  1.85e-01  3.86e-06  4.09e-02  4.98e-01  
  8  +5.0000e-01  +5.5404e-01  5.40e-02  1.61e-04  8.58e-02  1.39e-06  1.59e-02  8.29e-01  
  9  +5.0000e-01  +5.6433e-01  6.43e-02  1.92e-04  1.02e-01  8.12e-07  9.40e-03  9.90e-01  
 10  +5.0000e-01  +5.2902e-01  2.90e-02  8.34e-05  4.44e-02  1.95e-06  1.10e-03  8.96e-01  
 11  +4.9974e-01  +5.2925e-01  2.95e-02  5.42e-06  2.89e-03  1.17e-04  1.77e-05  9.85e-01  
 12  +4.9903e-01  +5.2525e-01  2.62e-02  1.81e-06  9.66e-04  2.81e-04  5.86e-06  6.98e-01  
 13  +4.9882e-01  +5.2369e-01  2.49e-02  1.72e-06  9.17e-04  2.36e-04  5.57e-06  1.34e-01  
 14  +4.9847e-01  +5.2070e-01  2.22e-02  1.63e-06  8.72e-04  1.33e-04  5.34e-06  2.68e-01  
 15  +4.9829e-01  +5.1905e-01  2.08e-02  1.51e-06  8.08e-04  7.11e-05  4.94e-06  3.87e-01  
 16  +4.9761e-01  +5.1514e-01  1.75e-02  1.10e-06  5.86e-04  5.92e-05  3.59e-06  3.37e-01  
 17  +4.9753e-01  +5.1475e-01  1.72e-02  1.08e-06  5.78e-04  4.70e-05  3.52e-06  1.71e-01  
 18  +4.9717e-01  +5.1290e-01  1.57e-02  8.68e-07  4.64e-04  4.11e-05  2.79e-06  3.01e-01  
 19  +4.9717e-01  +5.1291e-01  1.57e-02  8.68e-07  4.64e-04  3.94e-05  2.78e-06  3.76e-02  
 20  +4.9659e-01  +5.1021e-01  1.36e-02  5.70e-07  3.04e-04  1.65e-05  1.78e-06  7.62e-01  
 21  +4.9655e-01  +5.1008e-01  1.35e-02  5.70e-07  3.04e-04  1.61e-05  1.78e-06  7.75e-03  
 22  +4.9636e-01  +5.0938e-01  1.30e-02  5.63e-07  3.01e-04  1.34e-05  1.77e-06  9.00e-02  
 23  +4.9556e-01  +5.0646e-01  1.09e-02  4.37e-07  2.34e-04  8.33e-06  1.39e-06  3.93e-01  
 24  +4.9453e-01  +5.0245e-01  7.92e-03  2.92e-07  1.56e-04  4.15e-06  9.32e-07  5.13e-01  
 25  +4.9446e-01  +5.0170e-01  7.24e-03  2.69e-07  1.43e-04  1.91e-06  8.60e-07  4.80e-01  
 26  +4.9290e-01  +4.9618e-01  3.28e-03  1.13e-07  6.06e-05  7.24e-07  3.69e-07  6.15e-01  
 27  +4.9270e-01  +4.9536e-01  2.67e-03  9.07e-08  4.84e-05  4.71e-07  2.95e-07  3.66e-01  
 28  +4.9222e-01  +4.9355e-01  1.32e-03  4.38e-08  2.34e-05  1.88e-08  1.43e-07  9.90e-01  
 29  +4.9165e-01  +4.9170e-01  5.73e-05  1.87e-09  1.00e-06  7.87e-10  6.18e-09  9.63e-01  
 30  +4.9162e-01  +4.9162e-01  5.82e-07  1.91e-11  1.02e-08  8.02e-12  6.28e-11  9.90e-01  
 31  +4.9162e-01  +4.9162e-01  5.85e-09  1.91e-13  1.02e-10  9.83e-14  7.64e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0079942s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:16 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:16 PM: Optimal value: 4.916e-01
(CVXPY) Sep 20 08:06:16 PM: Compilation took 1.675e-01 seconds
(CVXPY) Sep 20 08:06:16 PM: Solver (including time spent in interface) took 1.054e+00 seconds
Iteration: 2, Objective: 0.4916
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:16 PM: Your problem has 25039 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:16 PM: Finished problem compilation (took 1.949e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25039
  constraints   = 50039
  nnz(P)        = 0
  nnz(A)        = 367538
  cones (total) = 1
    : Nonnegative = 1,  numel = 50039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8094e-01  +5.4250e+03  5.42e+03  4.36e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3206e-01  +6.1467e+02  6.14e+02  1.78e-01  9.28e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6049e+02  1.60e+02  1.50e-01  7.89e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7629e+01  1.71e+01  4.71e-02  2.46e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.0687e+00  5.69e-01  1.70e-03  9.18e-01  2.22e-05  1.93e-01  2.08e-01  
  6  +5.0000e-01  +7.0152e-01  2.02e-01  6.01e-04  3.26e-01  7.05e-06  7.18e-02  6.74e-01  
  7  +5.0000e-01  +6.0637e-01  1.06e-01  3.17e-04  1.72e-01  3.61e-06  3.66e-02  5.55e-01  
  8  +5.0000e-01  +5.4887e-01  4.89e-02  1.46e-04  7.91e-02  1.95e-06  1.29e-02  7.40e-01  
  9  +5.0000e-01  +5.5382e-01  5.38e-02  1.60e-04  8.71e-02  2.16e-06  8.42e-03  6.03e-01  
 10  +4.9999e-01  +5.4188e-01  4.19e-02  1.19e-04  6.45e-02  6.06e-06  1.35e-03  9.90e-01  
 11  +4.9949e-01  +5.3752e-01  3.80e-02  9.06e-06  4.93e-03  2.35e-04  2.96e-05  9.80e-01  
 12  +4.9864e-01  +5.3018e-01  3.15e-02  3.27e-06  1.78e-03  4.29e-04  1.05e-05  7.32e-01  
 13  +4.9823e-01  +5.2579e-01  2.76e-02  2.41e-06  1.31e-03  3.22e-04  7.67e-06  4.40e-01  
 14  +4.9838e-01  +5.2617e-01  2.78e-02  2.36e-06  1.28e-03  2.50e-04  7.47e-06  2.39e-01  
 15  +4.9837e-01  +5.2504e-01  2.67e-02  2.12e-06  1.16e-03  1.49e-04  6.67e-06  4.29e-01  
 16  +4.9801e-01  +5.2296e-01  2.49e-02  1.73e-06  9.42e-04  1.40e-04  5.42e-06  2.56e-01  
 17  +4.9786e-01  +5.2199e-01  2.41e-02  1.70e-06  9.27e-04  1.10e-04  5.34e-06  1.50e-01  
 18  +4.9650e-01  +5.1500e-01  1.85e-02  9.69e-07  5.27e-04  8.93e-05  3.04e-06  5.26e-01  
 19  +4.9650e-01  +5.1500e-01  1.85e-02  9.38e-07  5.11e-04  7.17e-05  2.93e-06  2.09e-01  
 20  +4.9616e-01  +5.1344e-01  1.73e-02  8.13e-07  4.42e-04  4.43e-05  2.54e-06  4.01e-01  
 21  +4.9613e-01  +5.1330e-01  1.72e-02  8.12e-07  4.42e-04  4.32e-05  2.54e-06  1.28e-02  
 22  +4.9504e-01  +5.0870e-01  1.37e-02  6.23e-07  3.39e-04  1.88e-05  1.97e-06  4.88e-01  
 23  +4.9384e-01  +5.0386e-01  1.00e-02  4.16e-07  2.26e-04  1.21e-05  1.33e-06  4.06e-01  
 24  +4.9364e-01  +5.0248e-01  8.83e-03  3.44e-07  1.87e-04  1.03e-06  1.11e-06  8.57e-01  
 25  +4.9356e-01  +5.0211e-01  8.56e-03  3.38e-07  1.84e-04  7.93e-07  1.09e-06  2.04e-01  
 26  +4.9242e-01  +4.9798e-01  5.56e-03  2.09e-07  1.14e-04  4.61e-07  6.87e-07  4.26e-01  
 27  +4.9200e-01  +4.9626e-01  4.25e-03  1.53e-07  8.35e-05  4.71e-08  5.06e-07  9.90e-01  
 28  +4.9038e-01  +4.9065e-01  2.72e-04  9.37e-09  5.10e-06  2.88e-09  3.21e-08  9.90e-01  
 29  +4.9026e-01  +4.9026e-01  2.89e-06  9.90e-11  5.39e-08  3.04e-11  3.42e-10  9.89e-01  
 30  +4.9026e-01  +4.9026e-01  2.89e-08  9.90e-13  5.39e-10  3.04e-13  3.42e-12  9.90e-01  
 31  +4.9026e-01  +4.9026e-01  2.93e-10  1.00e-14  5.46e-12  5.05e-15  5.54e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0961188s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:18 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:18 PM: Optimal value: 4.903e-01
(CVXPY) Sep 20 08:06:18 PM: Compilation took 1.949e-01 seconds
(CVXPY) Sep 20 08:06:18 PM: Solver (including time spent in interface) took 1.149e+00 seconds
Iteration: 3, Objective: 0.4903
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:18 PM: Your problem has 25049 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:18 PM: Finished problem compilation (took 1.945e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25049
  constraints   = 50049
  nnz(P)        = 0
  nnz(A)        = 385379
  cones (total) = 1
    : Nonnegative = 1,  numel = 50049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8094e-01  +5.4251e+03  5.42e+03  4.37e-01  1.78e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3206e-01  +6.1463e+02  6.14e+02  1.78e-01  9.33e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6047e+02  1.60e+02  1.50e-01  7.93e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7629e+01  1.71e+01  4.71e-02  2.47e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.0637e+00  5.64e-01  1.68e-03  9.15e-01  2.22e-05  1.93e-01  2.11e-01  
  6  +5.0000e-01  +7.4067e-01  2.41e-01  7.18e-04  3.92e-01  8.73e-06  8.50e-02  6.09e-01  
  7  +5.0000e-01  +6.3530e-01  1.35e-01  4.04e-04  2.20e-01  3.93e-06  4.41e-02  6.80e-01  
  8  +5.0000e-01  +5.8220e-01  8.22e-02  2.45e-04  1.34e-01  2.65e-06  2.26e-02  5.49e-01  
  9  +5.0000e-01  +5.6853e-01  6.85e-02  2.04e-04  1.11e-01  2.96e-06  1.16e-02  5.71e-01  
 10  +4.9997e-01  +5.5553e-01  5.56e-02  1.47e-04  8.05e-02  1.50e-05  1.25e-03  9.69e-01  
 11  +4.9923e-01  +5.5270e-01  5.35e-02  1.41e-05  7.70e-03  3.50e-04  4.96e-05  9.61e-01  
 12  +4.9922e-01  +5.4755e-01  4.83e-02  9.52e-06  5.21e-03  2.89e-04  3.31e-05  6.17e-01  
 13  +4.9936e-01  +5.4199e-01  4.26e-02  6.01e-06  3.29e-03  9.76e-05  2.06e-05  9.90e-01  
 14  +4.9893e-01  +5.3889e-01  4.00e-02  3.65e-06  2.00e-03  4.41e-05  1.23e-05  9.90e-01  
 15  +4.9866e-01  +5.3730e-01  3.86e-02  3.29e-06  1.80e-03  3.90e-05  1.10e-05  2.21e-01  
 16  +4.9860e-01  +5.3696e-01  3.84e-02  3.26e-06  1.78e-03  3.38e-05  1.09e-05  1.21e-01  
 17  +4.9735e-01  +5.2980e-01  3.24e-02  2.16e-06  1.18e-03  2.44e-05  7.11e-06  5.66e-01  
 18  +4.9692e-01  +5.2792e-01  3.10e-02  1.86e-06  1.02e-03  2.35e-05  6.10e-06  1.92e-01  
 19  +4.9645e-01  +5.2630e-01  2.99e-02  1.83e-06  1.00e-03  2.16e-05  6.10e-06  8.07e-03  
 20  +4.9552e-01  +5.2298e-01  2.75e-02  1.50e-06  8.20e-04  2.58e-06  4.97e-06  8.12e-01  
 21  +4.9232e-01  +5.0842e-01  1.61e-02  7.69e-07  4.21e-04  1.20e-06  2.61e-06  5.62e-01  
 22  +4.9134e-01  +5.0393e-01  1.26e-02  5.54e-07  3.03e-04  6.23e-07  1.90e-06  5.46e-01  
 23  +4.9105e-01  +5.0288e-01  1.18e-02  5.33e-07  2.91e-04  5.34e-07  1.90e-06  2.77e-02  
 24  +4.9104e-01  +5.0283e-01  1.18e-02  5.25e-07  2.87e-04  4.79e-07  1.86e-06  1.51e-01  
 25  +4.8944e-01  +4.9586e-01  6.41e-03  2.71e-07  1.48e-04  1.95e-07  9.75e-07  6.38e-01  
 26  +4.8891e-01  +4.9398e-01  5.07e-03  2.06e-07  1.13e-04  1.46e-07  7.42e-07  3.26e-01  
 27  +4.8882e-01  +4.9356e-01  4.74e-03  1.90e-07  1.04e-04  9.49e-08  6.86e-07  5.23e-01  
 28  +4.8798e-01  +4.9035e-01  2.37e-03  9.20e-08  5.03e-05  2.64e-08  3.40e-07  9.90e-01  
 29  +4.8723e-01  +4.8758e-01  3.48e-04  1.33e-08  7.27e-06  3.79e-09  5.06e-08  8.62e-01  
 30  +4.8710e-01  +4.8711e-01  6.65e-06  2.53e-10  1.38e-07  7.19e-11  9.69e-10  9.81e-01  
 31  +4.8710e-01  +4.8710e-01  6.65e-08  2.53e-12  1.38e-09  7.19e-13  9.70e-12  9.90e-01  
 32  +4.8710e-01  +4.8710e-01  6.69e-10  2.55e-14  1.39e-11  9.33e-15  1.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0647755s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:19 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:19 PM: Optimal value: 4.871e-01
(CVXPY) Sep 20 08:06:19 PM: Compilation took 1.945e-01 seconds
(CVXPY) Sep 20 08:06:19 PM: Solver (including time spent in interface) took 1.111e+00 seconds
Iteration: 4, Objective: 0.4871
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:19 PM: Your problem has 25059 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:19 PM: Finished problem compilation (took 1.865e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25059
  constraints   = 50059
  nnz(P)        = 0
  nnz(A)        = 398900
  cones (total) = 1
    : Nonnegative = 1,  numel = 50059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.8094e-01  +5.4251e+03  5.42e+03  4.37e-01  1.78e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3205e-01  +6.1459e+02  6.14e+02  1.78e-01  9.35e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6046e+02  1.60e+02  1.50e-01  7.95e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7627e+01  1.71e+01  4.71e-02  2.48e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.1550e+00  6.55e-01  1.95e-03  1.07e+00  2.22e-05  1.93e-01  1.82e-01  
  6  +5.0000e-01  +7.8791e-01  2.88e-01  8.59e-04  4.70e-01  8.43e-06  9.25e-02  6.14e-01  
  7  +5.0000e-01  +6.4703e-01  1.47e-01  4.39e-04  2.40e-01  3.20e-06  4.54e-02  7.61e-01  
  8  +5.0000e-01  +5.8846e-01  8.85e-02  2.64e-04  1.44e-01  1.86e-06  2.21e-02  6.92e-01  
  9  +5.0000e-01  +5.8252e-01  8.25e-02  2.46e-04  1.35e-01  1.88e-06  1.29e-02  6.03e-01  
 10  +5.0000e-01  +5.7757e-01  7.76e-02  2.28e-04  1.25e-01  1.82e-06  4.74e-03  9.90e-01  
 11  +4.9991e-01  +5.5815e-01  5.82e-02  3.74e-05  2.05e-02  4.21e-05  1.32e-04  9.77e-01  
 12  +4.9896e-01  +5.5389e-01  5.49e-02  3.59e-06  1.97e-03  4.36e-04  1.18e-05  9.11e-01  
 13  +4.9864e-01  +5.5103e-01  5.24e-02  3.39e-06  1.86e-03  3.90e-04  1.11e-05  1.08e-01  
 14  +4.9848e-01  +5.4819e-01  4.97e-02  3.33e-06  1.83e-03  3.01e-04  1.08e-05  1.45e-01  
 15  +4.9807e-01  +5.4499e-01  4.69e-02  2.95e-06  1.62e-03  2.63e-04  9.61e-06  2.03e-01  
 16  +4.9794e-01  +5.4320e-01  4.53e-02  2.84e-06  1.56e-03  2.03e-04  9.24e-06  1.95e-01  
 17  +4.9734e-01  +5.3816e-01  4.08e-02  2.59e-06  1.42e-03  1.19e-04  8.49e-06  3.19e-01  
 18  +4.9697e-01  +5.3526e-01  3.83e-02  2.45e-06  1.35e-03  7.60e-05  8.08e-06  2.75e-01  
 19  +4.9542e-01  +5.2626e-01  3.08e-02  1.85e-06  1.02e-03  6.37e-06  6.20e-06  7.82e-01  
 20  +4.9176e-01  +5.0958e-01  1.78e-02  8.79e-07  4.82e-04  1.30e-06  3.02e-06  7.99e-01  
 21  +4.8975e-01  +5.0066e-01  1.09e-02  4.77e-07  2.62e-04  2.13e-07  1.68e-06  8.77e-01  
 22  +4.8951e-01  +4.9980e-01  1.03e-02  4.63e-07  2.54e-04  1.87e-07  1.68e-06  1.18e-02  
 23  +4.8895e-01  +4.9754e-01  8.59e-03  3.57e-07  1.96e-04  9.74e-08  1.28e-06  9.41e-01  
 24  +4.8691e-01  +4.8945e-01  2.55e-03  1.02e-07  5.61e-05  2.70e-08  3.87e-07  8.38e-01  
 25  +4.8609e-01  +4.8633e-01  2.40e-04  9.43e-09  5.18e-06  2.48e-09  3.71e-08  9.90e-01  
 26  +4.8600e-01  +4.8600e-01  2.56e-06  1.00e-10  5.51e-08  2.64e-11  3.98e-10  9.89e-01  
 27  +4.8600e-01  +4.8600e-01  2.56e-08  1.00e-12  5.51e-10  2.64e-13  3.98e-12  9.90e-01  
 28  +4.8600e-01  +4.8600e-01  2.58e-10  1.02e-14  5.54e-12  3.35e-15  5.00e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 894.4792ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:20 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:20 PM: Optimal value: 4.860e-01
(CVXPY) Sep 20 08:06:20 PM: Compilation took 1.865e-01 seconds
(CVXPY) Sep 20 08:06:20 PM: Solver (including time spent in interface) took 9.390e-01 seconds
Iteration: 5, Objective: 0.4860
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:20 PM: Your problem has 25069 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:21 PM: Finished problem compilation (took 1.761e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25069
  constraints   = 50069
  nnz(P)        = 0
  nnz(A)        = 407188
  cones (total) = 1
    : Nonnegative = 1,  numel = 50069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.74e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4251e+03  5.42e+03  4.37e-01  1.79e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3205e-01  +6.1455e+02  6.14e+02  1.78e-01  9.36e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6044e+02  1.60e+02  1.50e-01  7.96e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7626e+01  1.71e+01  4.71e-02  2.48e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0001e-01  +1.1726e+00  6.73e-01  2.01e-03  1.10e+00  2.22e-05  1.93e-01  1.78e-01  
  6  +5.0000e-01  +8.1665e-01  3.17e-01  9.45e-04  5.17e-01  9.33e-06  1.00e-01  5.57e-01  
  7  +5.0001e-01  +6.6986e-01  1.70e-01  5.07e-04  2.77e-01  3.36e-06  5.06e-02  8.21e-01  
  8  +5.0000e-01  +6.1029e-01  1.10e-01  3.29e-04  1.80e-01  2.30e-06  2.90e-02  5.08e-01  
  9  +5.0000e-01  +5.9557e-01  9.56e-02  2.85e-04  1.56e-01  2.23e-06  1.97e-02  3.83e-01  
 10  +5.0000e-01  +5.9769e-01  9.77e-02  2.90e-04  1.59e-01  1.31e-06  9.70e-03  9.90e-01  
 11  +4.9999e-01  +5.5947e-01  5.95e-02  1.36e-04  7.45e-02  7.27e-06  7.81e-04  9.31e-01  
 12  +4.9936e-01  +5.5716e-01  5.78e-02  5.68e-06  3.12e-03  2.91e-04  1.85e-05  9.76e-01  
 13  +4.9879e-01  +5.5290e-01  5.41e-02  4.07e-06  2.24e-03  3.35e-04  1.32e-05  3.35e-01  
 14  +4.9878e-01  +5.5147e-01  5.27e-02  4.03e-06  2.22e-03  2.78e-04  1.30e-05  1.26e-01  
 15  +4.9852e-01  +5.4865e-01  5.01e-02  3.68e-06  2.02e-03  2.29e-04  1.18e-05  2.27e-01  
 16  +4.9797e-01  +5.4451e-01  4.65e-02  3.12e-06  1.71e-03  1.81e-04  1.00e-05  3.17e-01  
 17  +4.9769e-01  +5.4233e-01  4.46e-02  2.89e-06  1.59e-03  1.33e-04  9.29e-06  2.74e-01  
 18  +4.9729e-01  +5.3973e-01  4.24e-02  2.79e-06  1.53e-03  9.62e-05  9.04e-06  1.97e-01  
 19  +4.9545e-01  +5.3032e-01  3.49e-02  2.04e-06  1.12e-03  6.14e-05  6.69e-06  4.26e-01  
 20  +4.9275e-01  +5.1760e-01  2.49e-02  1.29e-06  7.10e-04  3.35e-05  4.30e-06  4.87e-01  
 21  +4.9266e-01  +5.1665e-01  2.40e-02  1.21e-06  6.63e-04  1.65e-05  4.02e-06  4.68e-01  
 22  +4.8909e-01  +5.0104e-01  1.19e-02  5.39e-07  2.96e-04  6.67e-06  1.84e-06  5.98e-01  
 23  +4.8906e-01  +5.0095e-01  1.19e-02  5.31e-07  2.92e-04  6.43e-06  1.82e-06  5.06e-02  
 24  +4.8874e-01  +4.9972e-01  1.10e-02  4.78e-07  2.63e-04  1.27e-06  1.71e-06  7.33e-01  
 25  +4.8839e-01  +4.9811e-01  9.72e-03  4.20e-07  2.31e-04  9.70e-07  1.51e-06  2.55e-01  
 26  +4.8784e-01  +4.9590e-01  8.07e-03  3.31e-07  1.82e-04  3.62e-07  1.18e-06  7.46e-01  
 27  +4.8699e-01  +4.9263e-01  5.64e-03  2.26e-07  1.24e-04  2.39e-07  8.18e-07  3.58e-01  
 28  +4.8663e-01  +4.9118e-01  4.55e-03  1.80e-07  9.90e-05  6.43e-08  6.53e-07  9.32e-01  
 29  +4.8537e-01  +4.8643e-01  1.06e-03  4.07e-08  2.24e-05  1.38e-08  1.54e-07  8.40e-01  
 30  +4.8499e-01  +4.8501e-01  1.91e-05  7.29e-10  4.00e-07  2.26e-10  2.80e-09  9.90e-01  
 31  +4.8498e-01  +4.8498e-01  1.91e-07  7.30e-12  4.01e-09  2.27e-12  2.81e-11  9.90e-01  
 32  +4.8498e-01  +4.8498e-01  1.93e-09  7.34e-14  4.03e-11  2.94e-14  3.60e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0048899s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:22 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:22 PM: Optimal value: 4.850e-01
(CVXPY) Sep 20 08:06:22 PM: Compilation took 1.761e-01 seconds
(CVXPY) Sep 20 08:06:22 PM: Solver (including time spent in interface) took 1.049e+00 seconds
Iteration: 6, Objective: 0.4850
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:22 PM: Your problem has 25079 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:22 PM: Finished problem compilation (took 2.086e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25079
  constraints   = 50079
  nnz(P)        = 0
  nnz(A)        = 413304
  cones (total) = 1
    : Nonnegative = 1,  numel = 50079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.74e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4251e+03  5.42e+03  4.37e-01  1.79e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3204e-01  +6.1448e+02  6.14e+02  1.78e-01  9.36e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6042e+02  1.60e+02  1.50e-01  7.96e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7626e+01  1.71e+01  4.71e-02  2.48e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0001e-01  +1.1953e+00  6.95e-01  2.08e-03  1.13e+00  2.23e-05  1.93e-01  1.73e-01  
  6  +5.0001e-01  +8.2653e-01  3.27e-01  9.74e-04  5.34e-01  9.09e-06  1.00e-01  5.84e-01  
  7  +5.0001e-01  +6.9792e-01  1.98e-01  5.91e-04  3.23e-01  4.27e-06  5.85e-02  6.88e-01  
  8  +5.0000e-01  +6.1803e-01  1.18e-01  3.52e-04  1.93e-01  2.64e-06  3.18e-02  5.39e-01  
  9  +5.0000e-01  +6.0913e-01  1.09e-01  3.25e-04  1.78e-01  2.19e-06  2.23e-02  5.20e-01  
 10  +5.0000e-01  +5.8639e-01  8.64e-02  2.57e-04  1.41e-01  2.39e-06  1.02e-02  6.35e-01  
 11  +5.0000e-01  +5.7385e-01  7.39e-02  2.12e-04  1.16e-01  3.79e-06  2.70e-03  9.90e-01  
 12  +4.9974e-01  +5.6784e-01  6.81e-02  2.19e-05  1.20e-02  1.21e-04  7.23e-05  9.75e-01  
 13  +4.9894e-01  +5.6208e-01  6.31e-02  5.75e-06  3.16e-03  4.10e-04  1.85e-05  7.66e-01  
 14  +4.9875e-01  +5.5582e-01  5.71e-02  4.83e-06  2.66e-03  2.99e-04  1.55e-05  3.65e-01  
 15  +4.9870e-01  +5.5176e-01  5.31e-02  4.52e-06  2.48e-03  1.92e-04  1.44e-05  3.16e-01  
 16  +4.9868e-01  +5.5091e-01  5.22e-02  4.46e-06  2.45e-03  1.73e-04  1.42e-05  8.56e-02  
 17  +4.9801e-01  +5.4604e-01  4.80e-02  3.42e-06  1.88e-03  1.56e-04  1.09e-05  3.69e-01  
 18  +4.9781e-01  +5.4490e-01  4.71e-02  3.37e-06  1.85e-03  1.39e-04  1.08e-05  6.83e-02  
 19  +4.9735e-01  +5.4224e-01  4.49e-02  3.03e-06  1.67e-03  1.25e-04  9.72e-06  1.71e-01  
 20  +4.9701e-01  +5.3861e-01  4.16e-02  2.84e-06  1.56e-03  4.46e-05  9.12e-06  5.16e-01  
 21  +4.9541e-01  +5.3104e-01  3.56e-02  2.11e-06  1.16e-03  3.66e-05  6.80e-06  3.36e-01  
 22  +4.9484e-01  +5.2706e-01  3.22e-02  1.86e-06  1.02e-03  3.75e-07  6.02e-06  8.15e-01  
 23  +4.9170e-01  +5.1339e-01  2.17e-02  1.08e-06  5.93e-04  2.45e-07  3.53e-06  5.03e-01  
 24  +4.9146e-01  +5.1234e-01  2.09e-02  1.02e-06  5.60e-04  2.29e-07  3.33e-06  1.78e-01  
 25  +4.9081e-01  +5.0928e-01  1.85e-02  8.52e-07  4.68e-04  1.73e-07  2.79e-06  7.68e-01  
 26  +4.8770e-01  +4.9642e-01  8.72e-03  3.73e-07  2.05e-04  7.98e-08  1.24e-06  8.27e-01  
 27  +4.8673e-01  +4.9224e-01  5.51e-03  2.28e-07  1.25e-04  6.14e-08  7.61e-07  9.90e-01  
 28  +4.8510e-01  +4.8567e-01  5.70e-04  2.34e-08  1.28e-05  6.30e-09  7.91e-08  9.28e-01  
 29  +4.8491e-01  +4.8494e-01  2.83e-05  1.16e-09  6.37e-07  3.02e-10  3.95e-09  9.63e-01  
 30  +4.8490e-01  +4.8490e-01  2.95e-07  1.21e-11  6.64e-09  3.15e-12  4.12e-11  9.90e-01  
 31  +4.8490e-01  +4.8490e-01  2.95e-09  1.21e-13  6.64e-11  3.15e-14  4.12e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0753177s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:23 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:23 PM: Optimal value: 4.849e-01
(CVXPY) Sep 20 08:06:23 PM: Compilation took 2.086e-01 seconds
(CVXPY) Sep 20 08:06:23 PM: Solver (including time spent in interface) took 1.126e+00 seconds
Iteration: 7, Objective: 0.4849
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:23 PM: Your problem has 25089 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:24 PM: Finished problem compilation (took 1.996e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25089
  constraints   = 50089
  nnz(P)        = 0
  nnz(A)        = 422557
  cones (total) = 1
    : Nonnegative = 1,  numel = 50089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.74e+02  1.00e+00  1.00e+00   ------   
  1  +5.8092e-01  +5.4252e+03  5.42e+03  4.37e-01  1.79e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3203e-01  +6.1441e+02  6.14e+02  1.78e-01  9.36e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6040e+02  1.60e+02  1.50e-01  7.96e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7626e+01  1.71e+01  4.71e-02  2.48e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0001e-01  +1.1926e+00  6.93e-01  2.07e-03  1.13e+00  2.23e-05  1.93e-01  1.75e-01  
  6  +5.0001e-01  +8.1910e-01  3.19e-01  9.52e-04  5.22e-01  8.98e-06  9.81e-02  5.90e-01  
  7  +5.0001e-01  +7.4966e-01  2.50e-01  7.45e-04  4.08e-01  5.88e-06  7.23e-02  5.05e-01  
  8  +5.0000e-01  +6.5137e-01  1.51e-01  4.52e-04  2.48e-01  3.59e-06  4.16e-02  5.08e-01  
  9  +5.0000e-01  +6.0472e-01  1.05e-01  3.12e-04  1.71e-01  2.64e-06  2.10e-02  6.51e-01  
 10  +5.0001e-01  +6.1742e-01  1.17e-01  3.49e-04  1.92e-01  1.29e-06  1.21e-02  9.90e-01  
 11  +5.0000e-01  +5.7142e-01  7.14e-02  1.86e-04  1.02e-01  4.77e-06  1.37e-03  9.14e-01  
 12  +4.9948e-01  +5.6883e-01  6.93e-02  8.06e-06  4.43e-03  2.36e-04  2.58e-05  9.81e-01  
 13  +4.9898e-01  +5.6495e-01  6.60e-02  5.27e-06  2.90e-03  3.15e-04  1.68e-05  3.82e-01  
 14  +4.9855e-01  +5.6021e-01  6.17e-02  4.55e-06  2.50e-03  2.78e-04  1.45e-05  2.37e-01  
 15  +4.9844e-01  +5.5819e-01  5.98e-02  4.50e-06  2.48e-03  2.34e-04  1.44e-05  1.00e-01  
 16  +4.9772e-01  +5.5273e-01  5.50e-02  3.75e-06  2.06e-03  2.02e-04  1.19e-05  2.71e-01  
 17  +4.9745e-01  +5.5012e-01  5.27e-02  3.47e-06  1.91e-03  1.60e-04  1.11e-05  2.25e-01  
 18  +4.9729e-01  +5.4873e-01  5.14e-02  3.41e-06  1.88e-03  1.40e-04  1.09e-05  9.71e-02  
 19  +4.9687e-01  +5.4377e-01  4.69e-02  3.15e-06  1.74e-03  5.10e-05  1.01e-05  5.05e-01  
 20  +4.9641e-01  +5.4106e-01  4.47e-02  2.95e-06  1.63e-03  2.83e-05  9.49e-06  3.80e-01  
 21  +4.9513e-01  +5.3395e-01  3.88e-02  2.38e-06  1.31e-03  6.63e-06  7.70e-06  6.90e-01  
 22  +4.9499e-01  +5.3329e-01  3.83e-02  2.33e-06  1.28e-03  5.34e-06  7.55e-06  1.70e-01  
 23  +4.9126e-01  +5.1678e-01  2.55e-02  1.28e-06  7.06e-04  3.33e-06  4.22e-06  5.15e-01  
 24  +4.9065e-01  +5.1360e-01  2.29e-02  1.08e-06  5.96e-04  1.95e-07  3.58e-06  8.93e-01  
 25  +4.8756e-01  +5.0073e-01  1.32e-02  5.77e-07  3.17e-04  1.15e-07  1.95e-06  8.61e-01  
 26  +4.8625e-01  +4.9531e-01  9.06e-03  3.80e-07  2.09e-04  8.85e-08  1.31e-06  7.38e-01  
 27  +4.8541e-01  +4.9185e-01  6.45e-03  2.65e-07  1.46e-04  6.75e-08  9.30e-07  6.84e-01  
 28  +4.8423e-01  +4.8721e-01  2.98e-03  1.20e-07  6.58e-05  3.11e-08  4.36e-07  6.35e-01  
 29  +4.8372e-01  +4.8522e-01  1.50e-03  5.94e-08  3.27e-05  1.59e-08  2.22e-07  6.54e-01  
 30  +4.8347e-01  +4.8424e-01  7.71e-04  3.03e-08  1.67e-05  8.46e-09  1.15e-07  9.90e-01  
 31  +4.8322e-01  +4.8334e-01  1.18e-04  4.61e-09  2.53e-06  1.29e-09  1.80e-08  8.63e-01  
 32  +4.8318e-01  +4.8318e-01  2.60e-06  1.01e-10  5.54e-08  2.77e-11  3.95e-10  9.90e-01  
 33  +4.8318e-01  +4.8318e-01  2.60e-08  1.01e-12  5.55e-10  2.77e-13  3.95e-12  9.90e-01  
 34  +4.8318e-01  +4.8318e-01  2.63e-10  1.02e-14  5.61e-12  4.30e-15  5.99e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1352315s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:25 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:25 PM: Optimal value: 4.832e-01
(CVXPY) Sep 20 08:06:25 PM: Compilation took 1.996e-01 seconds
(CVXPY) Sep 20 08:06:25 PM: Solver (including time spent in interface) took 1.182e+00 seconds
Iteration: 8, Objective: 0.4832
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:25 PM: Your problem has 25099 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:25 PM: Finished problem compilation (took 2.218e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25099
  constraints   = 50099
  nnz(P)        = 0
  nnz(A)        = 432220
  cones (total) = 1
    : Nonnegative = 1,  numel = 50099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.74e+02  1.00e+00  1.00e+00   ------   
  1  +5.8091e-01  +5.4254e+03  5.42e+03  4.37e-01  1.79e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3202e-01  +6.1432e+02  6.14e+02  1.78e-01  9.37e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6037e+02  1.60e+02  1.50e-01  7.97e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7628e+01  1.71e+01  4.71e-02  2.49e+01  5.21e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.2014e+00  7.01e-01  2.09e-03  1.15e+00  2.23e-05  1.93e-01  1.73e-01  
  6  +5.0001e-01  +8.1265e-01  3.13e-01  9.33e-04  5.12e-01  8.48e-06  9.50e-02  6.29e-01  
  7  +5.0001e-01  +7.4402e-01  2.44e-01  7.28e-04  4.00e-01  5.56e-06  6.94e-02  5.14e-01  
  8  +5.0000e-01  +6.2150e-01  1.21e-01  3.63e-04  1.99e-01  2.83e-06  3.16e-02  6.61e-01  
  9  +5.0000e-01  +6.1394e-01  1.14e-01  3.40e-04  1.86e-01  2.34e-06  1.70e-02  7.90e-01  
 10  +5.0000e-01  +5.8708e-01  8.71e-02  2.55e-04  1.40e-01  4.08e-06  4.40e-03  8.56e-01  
 11  +4.9976e-01  +5.7417e-01  7.44e-02  3.63e-05  2.00e-02  1.11e-04  1.22e-04  9.77e-01  
 12  +4.9888e-01  +5.6944e-01  7.06e-02  8.31e-06  4.58e-03  4.63e-04  2.68e-05  7.91e-01  
 13  +4.9881e-01  +5.6583e-01  6.70e-02  6.99e-06  3.85e-03  4.09e-04  2.25e-05  3.17e-01  
 14  +4.9891e-01  +5.6181e-01  6.29e-02  6.55e-06  3.61e-03  2.58e-04  2.10e-05  3.49e-01  
 15  +4.9801e-01  +5.5490e-01  5.69e-02  4.20e-06  2.31e-03  2.65e-04  1.34e-05  5.20e-01  
 16  +4.9766e-01  +5.5246e-01  5.48e-02  3.87e-06  2.13e-03  2.29e-04  1.24e-05  1.87e-01  
 17  +4.9663e-01  +5.4515e-01  4.85e-02  3.23e-06  1.78e-03  1.17e-04  1.04e-05  4.80e-01  
 18  +4.9603e-01  +5.4196e-01  4.59e-02  2.94e-06  1.62e-03  9.58e-05  9.43e-06  2.04e-01  
 19  +4.9455e-01  +5.3324e-01  3.87e-02  2.35e-06  1.29e-03  1.01e-06  7.58e-06  8.37e-01  
 20  +4.9406e-01  +5.3100e-01  3.69e-02  2.17e-06  1.20e-03  7.38e-07  7.02e-06  3.16e-01  
 21  +4.9275e-01  +5.2510e-01  3.24e-02  1.77e-06  9.75e-04  5.53e-07  5.73e-06  3.56e-01  
 22  +4.9179e-01  +5.2103e-01  2.92e-02  1.46e-06  8.03e-04  2.27e-07  4.71e-06  8.88e-01  
 23  +4.9060e-01  +5.1584e-01  2.52e-02  1.20e-06  6.64e-04  2.00e-07  3.91e-06  3.24e-01  
 24  +4.8813e-01  +5.0498e-01  1.68e-02  7.39e-07  4.07e-04  1.54e-07  2.42e-06  9.90e-01  
 25  +4.8540e-01  +4.9373e-01  8.33e-03  3.42e-07  1.88e-04  8.52e-08  1.13e-06  9.27e-01  
 26  +4.8413e-01  +4.8859e-01  4.46e-03  1.78e-07  9.81e-05  4.93e-08  5.94e-07  7.99e-01  
 27  +4.8311e-01  +4.8451e-01  1.39e-03  5.52e-08  3.04e-05  1.55e-08  1.85e-07  7.24e-01  
 28  +4.8275e-01  +4.8306e-01  3.06e-04  1.20e-08  6.62e-06  3.70e-09  4.05e-08  9.78e-01  
 29  +4.8265e-01  +4.8269e-01  3.84e-05  1.47e-09  8.09e-07  4.80e-10  5.03e-09  9.90e-01  
 30  +4.8264e-01  +4.8264e-01  4.97e-07  1.90e-11  1.05e-08  6.21e-12  6.51e-11  9.87e-01  
 31  +4.8264e-01  +4.8264e-01  4.97e-09  1.90e-13  1.05e-10  6.21e-14  6.51e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1482547s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:26 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:26 PM: Optimal value: 4.826e-01
(CVXPY) Sep 20 08:06:26 PM: Compilation took 2.218e-01 seconds
(CVXPY) Sep 20 08:06:26 PM: Solver (including time spent in interface) took 1.203e+00 seconds
Iteration: 9, Objective: 0.4826
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:27 PM: Your problem has 25109 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:27 PM: Finished problem compilation (took 2.145e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25109
  constraints   = 50109
  nnz(P)        = 0
  nnz(A)        = 438830
  cones (total) = 1
    : Nonnegative = 1,  numel = 50109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.75e+02  1.00e+00  1.00e+00   ------   
  1  +5.8090e-01  +5.4255e+03  5.42e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3202e-01  +6.1426e+02  6.14e+02  1.78e-01  9.38e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6035e+02  1.60e+02  1.50e-01  7.97e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7628e+01  1.71e+01  4.71e-02  2.49e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.1752e+00  6.75e-01  2.02e-03  1.11e+00  2.24e-05  1.93e-01  1.81e-01  
  6  +5.0001e-01  +8.5201e-01  3.52e-01  1.05e-03  5.77e-01  1.06e-05  1.08e-01  5.18e-01  
  7  +5.0001e-01  +7.5403e-01  2.54e-01  7.58e-04  4.16e-01  5.82e-06  7.13e-02  6.64e-01  
  8  +5.0001e-01  +6.5487e-01  1.55e-01  4.62e-04  2.54e-01  2.78e-06  3.79e-02  7.57e-01  
  9  +5.0000e-01  +6.2117e-01  1.21e-01  3.61e-04  1.99e-01  2.36e-06  2.20e-02  5.44e-01  
 10  +5.0000e-01  +5.7365e-01  7.37e-02  2.17e-04  1.19e-01  4.09e-06  4.42e-03  8.81e-01  
 11  +4.9987e-01  +5.7330e-01  7.34e-02  7.28e-05  4.01e-02  6.12e-05  2.66e-04  9.52e-01  
 12  +4.9922e-01  +5.7020e-01  7.10e-02  1.38e-05  7.64e-03  3.42e-04  4.49e-05  8.35e-01  
 13  +4.9932e-01  +5.6367e-01  6.43e-02  1.00e-05  5.54e-03  2.22e-04  3.22e-05  6.67e-01  
 14  +4.9929e-01  +5.6126e-01  6.20e-02  7.94e-06  4.38e-03  1.79e-04  2.53e-05  5.06e-01  
 15  +4.9940e-01  +5.5874e-01  5.93e-02  6.74e-06  3.72e-03  6.34e-05  2.14e-05  7.71e-01  
 16  +4.9893e-01  +5.5637e-01  5.74e-02  4.73e-06  2.61e-03  7.44e-05  1.50e-05  4.05e-01  
 17  +4.9873e-01  +5.5535e-01  5.66e-02  4.47e-06  2.47e-03  6.46e-05  1.42e-05  1.88e-01  
 18  +4.9694e-01  +5.4661e-01  4.97e-02  2.94e-06  1.62e-03  4.47e-05  9.37e-06  6.49e-01  
 19  +4.9505e-01  +5.3797e-01  4.29e-02  2.38e-06  1.31e-03  3.45e-05  7.65e-06  2.65e-01  
 20  +4.9392e-01  +5.3306e-01  3.91e-02  2.13e-06  1.18e-03  2.28e-05  6.89e-06  2.89e-01  
 21  +4.9156e-01  +5.2276e-01  3.12e-02  1.60e-06  8.81e-04  1.24e-05  5.22e-06  4.33e-01  
 22  +4.8935e-01  +5.1322e-01  2.39e-02  1.14e-06  6.30e-04  5.79e-06  3.77e-06  5.17e-01  
 23  +4.8710e-01  +5.0367e-01  1.66e-02  7.43e-07  4.09e-04  2.90e-06  2.47e-06  5.10e-01  
 24  +4.8639e-01  +5.0063e-01  1.42e-02  5.96e-07  3.28e-04  9.45e-08  1.99e-06  9.90e-01  
 25  +4.8427e-01  +4.9207e-01  7.79e-03  3.15e-07  1.74e-04  7.92e-08  1.07e-06  8.70e-01  
 26  +4.8313e-01  +4.8739e-01  4.26e-03  1.71e-07  9.42e-05  4.82e-08  5.84e-07  8.90e-01  
 27  +4.8200e-01  +4.8295e-01  9.44e-04  3.77e-08  2.08e-05  1.06e-08  1.31e-07  8.71e-01  
 28  +4.8170e-01  +4.8180e-01  9.61e-05  3.82e-09  2.11e-06  1.07e-09  1.34e-08  9.28e-01  
 29  +4.8167e-01  +4.8169e-01  1.31e-05  5.21e-10  2.87e-07  1.49e-10  1.83e-09  9.50e-01  
 30  +4.8167e-01  +4.8167e-01  1.76e-07  7.02e-12  3.87e-09  2.00e-12  2.47e-11  9.87e-01  
 31  +4.8167e-01  +4.8167e-01  2.45e-09  9.74e-14  5.37e-11  2.79e-14  3.42e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0727307s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:28 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:28 PM: Optimal value: 4.817e-01
(CVXPY) Sep 20 08:06:28 PM: Compilation took 2.145e-01 seconds
(CVXPY) Sep 20 08:06:28 PM: Solver (including time spent in interface) took 1.121e+00 seconds
Iteration: 10, Objective: 0.4817
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:28 PM: Your problem has 25119 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:28 PM: Finished problem compilation (took 1.988e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25119
  constraints   = 50119
  nnz(P)        = 0
  nnz(A)        = 443473
  cones (total) = 1
    : Nonnegative = 1,  numel = 50119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.75e+02  1.00e+00  1.00e+00   ------   
  1  +5.8090e-01  +5.4254e+03  5.42e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3201e-01  +6.1423e+02  6.14e+02  1.78e-01  9.38e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6034e+02  1.60e+02  1.50e-01  7.97e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7627e+01  1.71e+01  4.71e-02  2.49e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0002e-01  +1.3677e+00  8.68e-01  2.59e-03  1.42e+00  2.22e-05  1.94e-01  1.41e-01  
  6  +5.0001e-01  +9.3060e-01  4.31e-01  1.29e-03  7.06e-01  1.00e-05  1.16e-01  4.88e-01  
  7  +5.0001e-01  +7.8037e-01  2.80e-01  8.37e-04  4.60e-01  5.19e-06  7.51e-02  6.99e-01  
  8  +5.0001e-01  +6.4353e-01  1.44e-01  4.28e-04  2.35e-01  2.75e-06  3.69e-02  6.19e-01  
  9  +5.0000e-01  +6.1253e-01  1.13e-01  3.36e-04  1.84e-01  2.35e-06  1.88e-02  6.77e-01  
 10  +5.0000e-01  +5.8719e-01  8.72e-02  2.55e-04  1.40e-01  4.54e-06  4.16e-03  9.32e-01  
 11  +4.9975e-01  +5.7975e-01  8.00e-02  3.91e-05  2.16e-02  1.19e-04  1.32e-04  9.72e-01  
 12  +4.9899e-01  +5.7519e-01  7.62e-02  1.06e-05  5.85e-03  4.19e-04  3.41e-05  7.52e-01  
 13  +4.9903e-01  +5.7005e-01  7.10e-02  8.86e-06  4.89e-03  3.24e-04  2.83e-05  3.97e-01  
 14  +4.9928e-01  +5.6466e-01  6.54e-02  7.78e-06  4.29e-03  1.51e-04  2.47e-05  5.77e-01  
 15  +4.9919e-01  +5.5883e-01  5.96e-02  5.63e-06  3.11e-03  3.96e-05  1.78e-05  9.55e-01  
 16  +4.9862e-01  +5.5597e-01  5.74e-02  4.34e-06  2.39e-03  3.61e-05  1.37e-05  4.36e-01  
 17  +4.9805e-01  +5.5322e-01  5.52e-02  3.83e-06  2.11e-03  3.29e-05  1.21e-05  2.16e-01  
 18  +4.9757e-01  +5.5095e-01  5.34e-02  3.59e-06  1.98e-03  2.71e-05  1.14e-05  1.99e-01  
 19  +4.9611e-01  +5.4410e-01  4.80e-02  3.10e-06  1.71e-03  9.05e-06  9.88e-06  5.98e-01  
 20  +4.9492e-01  +5.3891e-01  4.40e-02  2.66e-06  1.47e-03  5.65e-06  8.52e-06  3.91e-01  
 21  +4.9362e-01  +5.3326e-01  3.96e-02  2.28e-06  1.26e-03  1.61e-06  7.35e-06  6.43e-01  
 22  +4.9198e-01  +5.2632e-01  3.43e-02  1.81e-06  9.99e-04  8.40e-08  5.88e-06  9.52e-01  
 23  +4.9002e-01  +5.1800e-01  2.80e-02  1.38e-06  7.59e-04  1.18e-07  4.50e-06  4.44e-01  
 24  +4.8632e-01  +5.0237e-01  1.61e-02  7.11e-07  3.92e-04  9.22e-08  2.36e-06  6.38e-01  
 25  +4.8586e-01  +5.0046e-01  1.46e-02  6.30e-07  3.47e-04  1.03e-07  2.10e-06  3.53e-01  
 26  +4.8432e-01  +4.9417e-01  9.85e-03  4.09e-07  2.26e-04  7.55e-08  1.37e-06  4.46e-01  
 27  +4.8382e-01  +4.9213e-01  8.30e-03  3.35e-07  1.85e-04  8.19e-08  1.13e-06  6.63e-01  
 28  +4.8191e-01  +4.8455e-01  2.64e-03  1.05e-07  5.76e-05  2.65e-08  3.58e-07  7.43e-01  
 29  +4.8129e-01  +4.8208e-01  7.92e-04  3.11e-08  1.72e-05  9.36e-09  1.07e-07  9.90e-01  
 30  +4.8103e-01  +4.8112e-01  9.01e-05  3.53e-09  1.95e-06  1.07e-09  1.22e-08  8.92e-01  
 31  +4.8100e-01  +4.8101e-01  6.62e-06  2.59e-10  1.43e-07  7.86e-11  8.99e-10  9.28e-01  
 32  +4.8100e-01  +4.8100e-01  3.14e-07  1.23e-11  6.78e-09  3.72e-12  4.26e-11  9.74e-01  
 33  +4.8100e-01  +4.8100e-01  3.15e-09  1.23e-13  6.80e-11  3.73e-14  4.28e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0854865s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:30 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:30 PM: Optimal value: 4.810e-01
(CVXPY) Sep 20 08:06:30 PM: Compilation took 1.988e-01 seconds
(CVXPY) Sep 20 08:06:30 PM: Solver (including time spent in interface) took 1.131e+00 seconds
Iteration: 11, Objective: 0.4810
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:30 PM: Your problem has 25129 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:30 PM: Finished problem compilation (took 1.931e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25129
  constraints   = 50129
  nnz(P)        = 0
  nnz(A)        = 448363
  cones (total) = 1
    : Nonnegative = 1,  numel = 50129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.75e+02  1.00e+00  1.00e+00   ------   
  1  +5.8089e-01  +5.4256e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3200e-01  +6.1411e+02  6.14e+02  1.78e-01  9.38e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0906e-01  +1.6031e+02  1.60e+02  1.50e-01  7.97e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7629e+01  1.71e+01  4.71e-02  2.49e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0002e-01  +1.3015e+00  8.01e-01  2.39e-03  1.31e+00  2.24e-05  1.93e-01  1.54e-01  
  6  +5.0001e-01  +9.3208e-01  4.32e-01  1.29e-03  7.09e-01  1.06e-05  1.17e-01  5.54e-01  
  7  +5.0001e-01  +7.9027e-01  2.90e-01  8.67e-04  4.76e-01  4.19e-06  7.12e-02  9.90e-01  
  8  +5.0001e-01  +6.2964e-01  1.30e-01  3.87e-04  2.13e-01  2.11e-06  2.99e-02  6.99e-01  
  9  +5.0000e-01  +6.1431e-01  1.14e-01  3.41e-04  1.87e-01  2.34e-06  1.72e-02  5.07e-01  
 10  +5.0000e-01  +6.0356e-01  1.04e-01  3.05e-04  1.68e-01  4.11e-06  6.22e-03  7.27e-01  
 11  +4.9995e-01  +5.9442e-01  9.45e-02  1.61e-04  8.84e-02  2.85e-05  6.98e-04  9.09e-01  
 12  +4.9923e-01  +5.9096e-01  9.17e-02  1.69e-05  9.33e-03  3.45e-04  5.47e-05  9.22e-01  
 13  +4.9929e-01  +5.7565e-01  7.64e-02  1.11e-05  6.12e-03  2.25e-04  3.55e-05  6.85e-01  
 14  +4.9917e-01  +5.7075e-01  7.16e-02  8.58e-06  4.73e-03  1.84e-04  2.73e-05  4.86e-01  
 15  +4.9895e-01  +5.6714e-01  6.82e-02  6.91e-06  3.82e-03  1.51e-04  2.19e-05  4.37e-01  
 16  +4.9785e-01  +5.5657e-01  5.87e-02  4.19e-06  2.31e-03  5.68e-05  1.33e-05  9.51e-01  
 17  +4.9739e-01  +5.5438e-01  5.70e-02  3.89e-06  2.15e-03  4.67e-05  1.23e-05  2.20e-01  
 18  +4.9722e-01  +5.5382e-01  5.66e-02  3.87e-06  2.14e-03  4.37e-05  1.23e-05  4.74e-02  
 19  +4.9570e-01  +5.4676e-01  5.11e-02  3.20e-06  1.77e-03  2.64e-05  1.02e-05  4.38e-01  
 20  +4.9394e-01  +5.3877e-01  4.48e-02  2.58e-06  1.42e-03  2.07e-05  8.27e-06  2.84e-01  
 21  +4.9296e-01  +5.3450e-01  4.15e-02  2.32e-06  1.28e-03  1.39e-05  7.46e-06  2.99e-01  
 22  +4.9098e-01  +5.2575e-01  3.48e-02  1.80e-06  9.94e-04  2.85e-07  5.86e-06  8.54e-01  
 23  +4.8934e-01  +5.1865e-01  2.93e-02  1.44e-06  7.93e-04  2.40e-07  4.70e-06  3.33e-01  
 24  +4.8910e-01  +5.1747e-01  2.84e-02  1.36e-06  7.49e-04  2.40e-07  4.45e-06  4.94e-01  
 25  +4.8744e-01  +5.1038e-01  2.29e-02  1.05e-06  5.82e-04  1.95e-07  3.48e-06  2.98e-01  
 26  +4.8693e-01  +5.0813e-01  2.12e-02  9.51e-07  5.25e-04  1.88e-07  3.14e-06  3.28e-01  
 27  +4.8342e-01  +4.9334e-01  9.92e-03  4.12e-07  2.27e-04  9.30e-08  1.38e-06  7.76e-01  
 28  +4.8290e-01  +4.9117e-01  8.28e-03  3.35e-07  1.85e-04  8.67e-08  1.13e-06  6.19e-01  
 29  +4.8234e-01  +4.8895e-01  6.61e-03  2.64e-07  1.46e-04  7.05e-08  8.91e-07  3.14e-01  
 30  +4.8218e-01  +4.8828e-01  6.11e-03  2.42e-07  1.33e-04  6.71e-08  8.17e-07  3.19e-01  
 31  +4.8208e-01  +4.8778e-01  5.70e-03  2.27e-07  1.25e-04  6.48e-08  7.67e-07  5.00e-01  
 32  +4.8173e-01  +4.8642e-01  4.69e-03  1.86e-07  1.03e-04  5.36e-08  6.29e-07  2.93e-01  
 33  +4.8150e-01  +4.8548e-01  3.98e-03  1.56e-07  8.60e-05  4.76e-08  5.28e-07  9.90e-01  
 34  +4.8034e-01  +4.8099e-01  6.47e-04  2.52e-08  1.39e-05  7.61e-09  8.65e-08  9.90e-01  
 35  +4.8016e-01  +4.8031e-01  1.55e-04  5.96e-09  3.29e-06  1.85e-09  2.07e-08  8.67e-01  
 36  +4.8012e-01  +4.8016e-01  4.67e-05  1.79e-09  9.90e-07  5.61e-10  6.22e-09  9.72e-01  
 37  +4.8010e-01  +4.8010e-01  6.83e-07  2.62e-11  1.44e-08  8.20e-12  9.10e-11  9.85e-01  
 38  +4.8010e-01  +4.8010e-01  6.83e-09  2.62e-13  1.45e-10  8.20e-14  9.10e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2340807s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:31 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:31 PM: Optimal value: 4.801e-01
(CVXPY) Sep 20 08:06:31 PM: Compilation took 1.931e-01 seconds
(CVXPY) Sep 20 08:06:31 PM: Solver (including time spent in interface) took 1.283e+00 seconds
Iteration: 12, Objective: 0.4801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:31 PM: Your problem has 25139 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:32 PM: Finished problem compilation (took 2.366e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25139
  constraints   = 50139
  nnz(P)        = 0
  nnz(A)        = 456235
  cones (total) = 1
    : Nonnegative = 1,  numel = 50139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.75e+02  1.00e+00  1.00e+00   ------   
  1  +5.8088e-01  +5.4256e+03  5.43e+03  4.37e-01  1.79e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3200e-01  +6.1407e+02  6.14e+02  1.78e-01  9.38e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6030e+02  1.60e+02  1.50e-01  7.98e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.49e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0002e-01  +1.3089e+00  8.09e-01  2.42e-03  1.33e+00  2.24e-05  1.93e-01  1.52e-01  
  6  +5.0001e-01  +9.3625e-01  4.36e-01  1.30e-03  7.16e-01  1.06e-05  1.18e-01  5.46e-01  
  7  +5.0001e-01  +7.8600e-01  2.86e-01  8.54e-04  4.70e-01  4.22e-06  7.04e-02  9.79e-01  
  8  +5.0001e-01  +6.8842e-01  1.88e-01  5.62e-04  3.09e-01  2.86e-06  4.39e-02  4.83e-01  
  9  +5.0001e-01  +6.2693e-01  1.27e-01  3.79e-04  2.08e-01  1.60e-06  1.90e-02  8.97e-01  
 10  +5.0001e-01  +6.2066e-01  1.21e-01  3.57e-04  1.96e-01  1.09e-06  8.19e-03  9.90e-01  
 11  +5.0000e-01  +6.0780e-01  1.08e-01  2.45e-04  1.35e-01  4.89e-06  1.34e-03  8.48e-01  
 12  +4.9959e-01  +6.0280e-01  1.03e-01  1.03e-05  5.67e-03  1.87e-04  3.24e-05  9.77e-01  
 13  +4.9920e-01  +5.9518e-01  9.60e-02  7.46e-06  4.12e-03  2.10e-04  2.35e-05  3.33e-01  
 14  +4.9914e-01  +5.8632e-01  8.72e-02  7.17e-06  3.96e-03  1.37e-04  2.26e-05  2.30e-01  
 15  +4.9892e-01  +5.8079e-01  8.19e-02  6.50e-06  3.59e-03  1.13e-04  2.05e-05  2.17e-01  
 16  +4.9861e-01  +5.7192e-01  7.33e-02  5.87e-06  3.25e-03  6.28e-05  1.85e-05  3.86e-01  
 17  +4.9741e-01  +5.6178e-01  6.44e-02  4.34e-06  2.40e-03  4.76e-05  1.37e-05  4.57e-01  
 18  +4.9723e-01  +5.6067e-01  6.34e-02  4.31e-06  2.38e-03  4.34e-05  1.37e-05  5.54e-02  
 19  +4.9643e-01  +5.5546e-01  5.90e-02  3.84e-06  2.12e-03  3.31e-05  1.22e-05  2.58e-01  
 20  +4.9629e-01  +5.5430e-01  5.80e-02  3.77e-06  2.08e-03  2.86e-05  1.20e-05  1.12e-01  
 21  +4.9433e-01  +5.4309e-01  4.88e-02  2.93e-06  1.62e-03  1.26e-05  9.37e-06  5.40e-01  
 22  +4.9165e-01  +5.2957e-01  3.79e-02  2.06e-06  1.14e-03  1.37e-07  6.68e-06  8.74e-01  
 23  +4.9030e-01  +5.2366e-01  3.34e-02  1.70e-06  9.41e-04  1.74e-07  5.55e-06  4.40e-01  
 24  +4.8912e-01  +5.1866e-01  2.95e-02  1.44e-06  7.94e-04  1.94e-07  4.72e-06  4.80e-01  
 25  +4.8527e-01  +5.0216e-01  1.69e-02  7.41e-07  4.09e-04  1.36e-07  2.48e-06  7.98e-01  
 26  +4.8459e-01  +4.9910e-01  1.45e-02  6.17e-07  3.41e-04  1.35e-07  2.06e-06  5.84e-01  
 27  +4.8172e-01  +4.8720e-01  5.48e-03  2.23e-07  1.23e-04  5.95e-08  7.56e-07  9.86e-01  
 28  +4.8046e-01  +4.8210e-01  1.64e-03  6.61e-08  3.65e-05  1.81e-08  2.27e-07  7.97e-01  
 29  +4.8023e-01  +4.8119e-01  9.53e-04  3.83e-08  2.11e-05  1.07e-08  1.32e-07  5.82e-01  
 30  +4.7994e-01  +4.8000e-01  6.37e-05  2.56e-09  1.41e-06  7.27e-10  8.81e-09  9.66e-01  
 31  +4.7992e-01  +4.7992e-01  4.43e-06  1.78e-10  9.81e-08  5.06e-11  6.12e-10  9.33e-01  
 32  +4.7992e-01  +4.7992e-01  4.59e-08  1.84e-12  1.02e-09  5.25e-13  6.35e-12  9.90e-01  
 33  +4.7992e-01  +4.7992e-01  4.86e-10  1.95e-14  1.08e-11  5.42e-15  6.55e-14  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3241117s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:33 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:33 PM: Optimal value: 4.799e-01
(CVXPY) Sep 20 08:06:33 PM: Compilation took 2.366e-01 seconds
(CVXPY) Sep 20 08:06:33 PM: Solver (including time spent in interface) took 1.377e+00 seconds
Iteration: 13, Objective: 0.4799
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:33 PM: Your problem has 25149 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:33 PM: Finished problem compilation (took 2.246e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25149
  constraints   = 50149
  nnz(P)        = 0
  nnz(A)        = 466431
  cones (total) = 1
    : Nonnegative = 1,  numel = 50149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.76e+02  1.00e+00  1.00e+00   ------   
  1  +5.8088e-01  +5.4257e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3199e-01  +6.1402e+02  6.13e+02  1.78e-01  9.40e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6028e+02  1.60e+02  1.50e-01  7.99e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.50e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2732e+00  7.73e-01  2.31e-03  1.27e+00  2.24e-05  1.93e-01  1.60e-01  
  6  +5.0001e-01  +8.0353e-01  3.04e-01  9.06e-04  5.00e-01  7.48e-06  8.91e-02  6.50e-01  
  7  +5.0001e-01  +7.4944e-01  2.49e-01  7.45e-04  4.11e-01  3.82e-06  5.94e-02  8.72e-01  
  8  +5.0001e-01  +6.6227e-01  1.62e-01  4.84e-04  2.67e-01  2.26e-06  3.21e-02  6.95e-01  
  9  +5.0000e-01  +6.1468e-01  1.15e-01  3.42e-04  1.88e-01  2.39e-06  1.29e-02  6.85e-01  
 10  +4.9999e-01  +5.9855e-01  9.86e-02  2.69e-04  1.48e-01  6.56e-06  2.38e-03  9.90e-01  
 11  +4.9955e-01  +5.9313e-01  9.36e-02  2.07e-05  1.15e-02  2.09e-04  6.69e-05  9.74e-01  
 12  +4.9846e-01  +5.8592e-01  8.75e-02  7.04e-06  3.90e-03  5.48e-04  2.24e-05  6.79e-01  
 13  +4.9826e-01  +5.7959e-01  8.13e-02  6.41e-06  3.55e-03  4.21e-04  2.04e-05  2.43e-01  
 14  +4.9821e-01  +5.7524e-01  7.70e-02  6.30e-06  3.49e-03  3.10e-04  2.00e-05  1.78e-01  
 15  +4.9707e-01  +5.6685e-01  6.98e-02  4.83e-06  2.67e-03  2.90e-04  1.54e-05  3.13e-01  
 16  +4.9691e-01  +5.6483e-01  6.79e-02  4.77e-06  2.64e-03  2.46e-04  1.53e-05  9.44e-02  
 17  +4.9564e-01  +5.5634e-01  6.07e-02  3.90e-06  2.16e-03  1.93e-04  1.25e-05  2.99e-01  
 18  +4.9554e-01  +5.5554e-01  6.00e-02  3.90e-06  2.16e-03  1.82e-04  1.25e-05  2.85e-02  
 19  +4.9447e-01  +5.4965e-01  5.52e-02  3.38e-06  1.87e-03  1.61e-04  1.09e-05  1.76e-01  
 20  +4.9207e-01  +5.3511e-01  4.30e-02  2.39e-06  1.32e-03  5.37e-05  7.75e-06  6.28e-01  
 21  +4.9178e-01  +5.3339e-01  4.16e-02  2.27e-06  1.26e-03  4.17e-05  7.38e-06  2.03e-01  
 22  +4.9040e-01  +5.2691e-01  3.65e-02  1.90e-06  1.05e-03  3.32e-05  6.20e-06  2.30e-01  
 23  +4.8932e-01  +5.2153e-01  3.22e-02  1.60e-06  8.83e-04  2.01e-05  5.22e-06  3.89e-01  
 24  +4.8917e-01  +5.2052e-01  3.13e-02  1.53e-06  8.49e-04  1.38e-05  5.03e-06  2.82e-01  
 25  +4.8689e-01  +5.1051e-01  2.36e-02  1.09e-06  6.03e-04  9.21e-06  3.61e-06  3.53e-01  
 26  +4.8677e-01  +5.0969e-01  2.29e-02  1.04e-06  5.77e-04  6.12e-06  3.46e-06  3.27e-01  
 27  +4.8432e-01  +4.9919e-01  1.49e-02  6.43e-07  3.56e-04  3.14e-06  2.16e-06  4.94e-01  
 28  +4.8328e-01  +4.9473e-01  1.14e-02  4.84e-07  2.68e-04  2.07e-06  1.64e-06  3.52e-01  
 29  +4.8202e-01  +4.8911e-01  7.09e-03  2.88e-07  1.59e-04  9.28e-08  9.76e-07  9.90e-01  
 30  +4.8105e-01  +4.8522e-01  4.17e-03  1.68e-07  9.29e-05  5.33e-08  5.73e-07  5.31e-01  
 31  +4.8041e-01  +4.8266e-01  2.25e-03  9.01e-08  4.99e-05  2.78e-08  3.09e-07  6.53e-01  
 32  +4.7979e-01  +4.8019e-01  3.99e-04  1.60e-08  8.83e-06  4.78e-09  5.50e-08  9.19e-01  
 33  +4.7967e-01  +4.7973e-01  5.55e-05  2.22e-09  1.23e-06  6.62e-10  7.65e-09  8.79e-01  
 34  +4.7966e-01  +4.7966e-01  6.00e-07  2.39e-11  1.32e-08  7.15e-12  8.27e-11  9.89e-01  
 35  +4.7966e-01  +4.7966e-01  6.00e-09  2.40e-13  1.33e-10  7.15e-14  8.27e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.156869s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:35 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:35 PM: Optimal value: 4.797e-01
(CVXPY) Sep 20 08:06:35 PM: Compilation took 2.246e-01 seconds
(CVXPY) Sep 20 08:06:35 PM: Solver (including time spent in interface) took 1.203e+00 seconds
Iteration: 14, Objective: 0.4797
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:35 PM: Your problem has 25159 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:35 PM: Finished problem compilation (took 2.101e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25159
  constraints   = 50159
  nnz(P)        = 0
  nnz(A)        = 471514
  cones (total) = 1
    : Nonnegative = 1,  numel = 50159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.76e+02  1.00e+00  1.00e+00   ------   
  1  +5.8087e-01  +5.4258e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3198e-01  +6.1394e+02  6.13e+02  1.78e-01  9.40e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6026e+02  1.60e+02  1.50e-01  7.99e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.71e-02  2.50e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2896e+00  7.90e-01  2.36e-03  1.30e+00  2.24e-05  1.93e-01  1.57e-01  
  6  +5.0001e-01  +7.6824e-01  2.68e-01  8.01e-04  4.42e-01  6.40e-06  7.98e-02  6.79e-01  
  7  +5.0001e-01  +7.4447e-01  2.44e-01  7.30e-04  4.03e-01  4.59e-06  6.17e-02  5.83e-01  
  8  +5.0001e-01  +6.5579e-01  1.56e-01  4.65e-04  2.57e-01  2.88e-06  3.26e-02  6.55e-01  
  9  +5.0000e-01  +6.1628e-01  1.16e-01  3.46e-04  1.91e-01  2.97e-06  1.27e-02  7.72e-01  
 10  +4.9999e-01  +6.0203e-01  1.02e-01  2.77e-04  1.53e-01  1.01e-05  2.40e-03  8.76e-01  
 11  +4.9908e-01  +5.9429e-01  9.52e-02  1.57e-05  8.70e-03  4.20e-04  5.06e-05  9.80e-01  
 12  +4.9892e-01  +5.9041e-01  9.15e-02  1.28e-05  7.07e-03  4.39e-04  4.10e-05  2.64e-01  
 13  +4.9898e-01  +5.6816e-01  6.92e-02  7.26e-06  4.02e-03  1.25e-04  2.31e-05  9.90e-01  
 14  +4.9874e-01  +5.6679e-01  6.81e-02  6.44e-06  3.57e-03  1.17e-04  2.04e-05  2.39e-01  
 15  +4.9834e-01  +5.6453e-01  6.62e-02  5.62e-06  3.11e-03  9.96e-05  1.78e-05  3.08e-01  
 16  +4.9796e-01  +5.6237e-01  6.44e-02  5.26e-06  2.92e-03  6.03e-05  1.67e-05  4.00e-01  
 17  +4.9711e-01  +5.5822e-01  6.11e-02  4.45e-06  2.46e-03  5.50e-05  1.42e-05  2.53e-01  
 18  +4.9640e-01  +5.5461e-01  5.82e-02  4.18e-06  2.32e-03  2.78e-05  1.34e-05  4.29e-01  
 19  +4.9555e-01  +5.5062e-01  5.51e-02  3.72e-06  2.06e-03  2.32e-05  1.19e-05  2.22e-01  
 20  +4.9517e-01  +5.4880e-01  5.36e-02  3.58e-06  1.98e-03  1.27e-05  1.15e-05  3.84e-01  
 21  +4.9345e-01  +5.4093e-01  4.75e-02  2.87e-06  1.59e-03  1.03e-05  9.27e-06  2.85e-01  
 22  +4.9298e-01  +5.3905e-01  4.61e-02  2.75e-06  1.52e-03  5.51e-06  8.94e-06  3.92e-01  
 23  +4.9199e-01  +5.3457e-01  4.26e-02  2.43e-06  1.35e-03  3.86e-06  7.93e-06  3.06e-01  
 24  +4.9076e-01  +5.2904e-01  3.83e-02  2.09e-06  1.16e-03  3.27e-06  6.84e-06  1.88e-01  
 25  +4.9011e-01  +5.2612e-01  3.60e-02  1.86e-06  1.03e-03  1.12e-06  6.10e-06  6.41e-01  
 26  +4.8880e-01  +5.2045e-01  3.16e-02  1.58e-06  8.73e-04  9.09e-07  5.19e-06  2.26e-01  
 27  +4.8692e-01  +5.1218e-01  2.53e-02  1.16e-06  6.44e-04  2.56e-07  3.86e-06  8.63e-01  
 28  +4.8505e-01  +5.0423e-01  1.92e-02  8.49e-07  4.70e-04  1.87e-07  2.84e-06  5.75e-01  
 29  +4.8340e-01  +4.9720e-01  1.38e-02  5.93e-07  3.28e-04  1.36e-07  2.00e-06  4.85e-01  
 30  +4.8208e-01  +4.9132e-01  9.24e-03  3.84e-07  2.13e-04  1.01e-07  1.30e-06  9.90e-01  
 31  +4.8101e-01  +4.8694e-01  5.93e-03  2.45e-07  1.36e-04  6.49e-08  8.40e-07  4.53e-01  
 32  +4.8042e-01  +4.8446e-01  4.03e-03  1.66e-07  9.17e-05  4.61e-08  5.69e-07  9.90e-01  
 33  +4.7982e-01  +4.8202e-01  2.21e-03  9.05e-08  5.01e-05  2.52e-08  3.13e-07  4.89e-01  
 34  +4.7930e-01  +4.7996e-01  6.57e-04  2.69e-08  1.49e-05  7.50e-09  9.33e-08  7.75e-01  
 35  +4.7920e-01  +4.7958e-01  3.75e-04  1.53e-08  8.45e-06  4.28e-09  5.32e-08  5.14e-01  
 36  +4.7916e-01  +4.7939e-01  2.36e-04  9.60e-09  5.31e-06  2.67e-09  3.36e-08  9.90e-01  
 37  +4.7908e-01  +4.7911e-01  2.41e-05  9.75e-10  5.40e-07  2.73e-10  3.43e-09  9.06e-01  
 38  +4.7907e-01  +4.7907e-01  3.44e-07  1.39e-11  7.69e-09  3.89e-12  4.89e-11  9.86e-01  
 39  +4.7907e-01  +4.7907e-01  3.45e-09  1.39e-13  7.70e-11  3.90e-14  4.90e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3781607s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:36 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:36 PM: Optimal value: 4.791e-01
(CVXPY) Sep 20 08:06:36 PM: Compilation took 2.101e-01 seconds
(CVXPY) Sep 20 08:06:36 PM: Solver (including time spent in interface) took 1.429e+00 seconds
Iteration: 15, Objective: 0.4791
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:37 PM: Your problem has 25169 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:37 PM: Finished problem compilation (took 2.802e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25169
  constraints   = 50169
  nnz(P)        = 0
  nnz(A)        = 477856
  cones (total) = 1
    : Nonnegative = 1,  numel = 50169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.76e+02  1.00e+00  1.00e+00   ------   
  1  +5.8086e-01  +5.4260e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3198e-01  +6.1387e+02  6.13e+02  1.78e-01  9.40e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6025e+02  1.60e+02  1.50e-01  7.99e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7636e+01  1.71e+01  4.71e-02  2.50e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2778e+00  7.78e-01  2.32e-03  1.28e+00  2.25e-05  1.93e-01  1.60e-01  
  6  +5.0001e-01  +7.3769e-01  2.38e-01  7.10e-04  3.92e-01  5.37e-06  7.11e-02  7.63e-01  
  7  +5.0001e-01  +7.2717e-01  2.27e-01  6.78e-04  3.74e-01  4.30e-06  5.77e-02  4.82e-01  
  8  +5.0000e-01  +6.3860e-01  1.39e-01  4.14e-04  2.28e-01  3.22e-06  2.93e-02  5.29e-01  
  9  +5.0000e-01  +6.3365e-01  1.34e-01  3.98e-04  2.20e-01  3.37e-06  1.47e-02  7.53e-01  
 10  +4.9999e-01  +6.1127e-01  1.11e-01  3.15e-04  1.74e-01  7.42e-06  3.52e-03  8.80e-01  
 11  +4.9953e-01  +5.8703e-01  8.75e-02  2.62e-05  1.45e-02  2.17e-04  8.55e-05  9.90e-01  
 12  +4.9869e-01  +5.8194e-01  8.33e-02  1.01e-05  5.57e-03  5.12e-04  3.22e-05  6.55e-01  
 13  +4.9857e-01  +5.7661e-01  7.80e-02  8.14e-06  4.51e-03  4.02e-04  2.59e-05  4.37e-01  
 14  +4.9836e-01  +5.7331e-01  7.50e-02  6.97e-06  3.86e-03  3.42e-04  2.21e-05  3.28e-01  
 15  +4.9817e-01  +5.7057e-01  7.24e-02  6.34e-06  3.52e-03  2.69e-04  2.01e-05  2.88e-01  
 16  +4.9730e-01  +5.6061e-01  6.33e-02  4.76e-06  2.64e-03  1.84e-05  1.51e-05  9.66e-01  
 17  +4.9434e-01  +5.4649e-01  5.21e-02  3.04e-06  1.69e-03  1.70e-05  9.74e-06  4.18e-01  
 18  +4.9428e-01  +5.4620e-01  5.19e-02  3.03e-06  1.68e-03  1.63e-05  9.73e-06  2.92e-02  
 19  +4.9313e-01  +5.4107e-01  4.79e-02  2.72e-06  1.51e-03  1.11e-05  8.76e-06  2.91e-01  
 20  +4.9294e-01  +5.4031e-01  4.74e-02  2.70e-06  1.50e-03  9.98e-06  8.72e-06  7.56e-02  
 21  +4.9099e-01  +5.3155e-01  4.06e-02  2.18e-06  1.21e-03  6.51e-06  7.09e-06  3.51e-01  
 22  +4.9051e-01  +5.2947e-01  3.90e-02  2.05e-06  1.14e-03  5.12e-06  6.68e-06  2.10e-01  
 23  +4.8947e-01  +5.2499e-01  3.55e-02  1.79e-06  9.90e-04  1.22e-06  5.84e-06  7.04e-01  
 24  +4.8801e-01  +5.1859e-01  3.06e-02  1.48e-06  8.20e-04  8.37e-07  4.86e-06  3.57e-01  
 25  +4.8676e-01  +5.1300e-01  2.62e-02  1.21e-06  6.68e-04  3.36e-07  3.99e-06  7.60e-01  
 26  +4.8350e-01  +4.9910e-01  1.56e-02  6.76e-07  3.75e-04  1.73e-07  2.27e-06  6.78e-01  
 27  +4.8292e-01  +4.9661e-01  1.37e-02  5.87e-07  3.25e-04  1.51e-07  1.97e-06  2.41e-01  
 28  +4.8053e-01  +4.8638e-01  5.86e-03  2.41e-07  1.33e-04  6.39e-08  8.21e-07  9.90e-01  
 29  +4.8018e-01  +4.8497e-01  4.79e-03  1.96e-07  1.09e-04  5.26e-08  6.70e-07  2.83e-01  
 30  +4.7948e-01  +4.8214e-01  2.66e-03  1.07e-07  5.93e-05  3.07e-08  3.68e-07  9.90e-01  
 31  +4.7910e-01  +4.8064e-01  1.55e-03  6.20e-08  3.43e-05  1.79e-08  2.14e-07  5.23e-01  
 32  +4.7884e-01  +4.7965e-01  8.08e-04  3.22e-08  1.78e-05  9.34e-09  1.12e-07  9.90e-01  
 33  +4.7858e-01  +4.7866e-01  8.09e-05  3.20e-09  1.77e-06  9.36e-10  1.12e-08  9.28e-01  
 34  +4.7855e-01  +4.7855e-01  1.04e-06  4.09e-11  2.27e-08  1.20e-11  1.43e-10  9.90e-01  
 35  +4.7855e-01  +4.7855e-01  1.05e-08  4.16e-13  2.30e-10  1.22e-13  1.45e-12  9.90e-01  
 36  +4.7855e-01  +4.7855e-01  1.31e-09  5.17e-14  2.86e-11  1.54e-14  1.82e-13  8.78e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5070489s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:39 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:39 PM: Optimal value: 4.786e-01
(CVXPY) Sep 20 08:06:39 PM: Compilation took 2.802e-01 seconds
(CVXPY) Sep 20 08:06:39 PM: Solver (including time spent in interface) took 1.566e+00 seconds
Iteration: 16, Objective: 0.4786
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:39 PM: Your problem has 25179 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:39 PM: Finished problem compilation (took 2.657e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25179
  constraints   = 50179
  nnz(P)        = 0
  nnz(A)        = 484374
  cones (total) = 1
    : Nonnegative = 1,  numel = 50179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.76e+02  1.00e+00  1.00e+00   ------   
  1  +5.8086e-01  +5.4260e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3197e-01  +6.1383e+02  6.13e+02  1.78e-01  9.40e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6024e+02  1.60e+02  1.50e-01  7.99e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7636e+01  1.71e+01  4.71e-02  2.50e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2654e+00  7.65e-01  2.29e-03  1.26e+00  2.25e-05  1.93e-01  1.63e-01  
  6  +5.0001e-01  +7.5210e-01  2.52e-01  7.53e-04  4.16e-01  6.29e-06  7.61e-02  6.82e-01  
  7  +5.0001e-01  +6.8941e-01  1.89e-01  5.66e-04  3.13e-01  4.55e-06  5.04e-02  4.94e-01  
  8  +5.0000e-01  +6.4825e-01  1.48e-01  4.43e-04  2.45e-01  3.98e-06  3.05e-02  4.86e-01  
  9  +5.0000e-01  +6.2597e-01  1.26e-01  3.75e-04  2.07e-01  4.75e-06  1.26e-02  7.55e-01  
 10  +4.9997e-01  +6.0346e-01  1.03e-01  2.62e-04  1.45e-01  1.74e-05  1.81e-03  9.90e-01  
 11  +4.9908e-01  +5.9873e-01  9.96e-02  2.12e-05  1.18e-02  4.19e-04  6.93e-05  9.62e-01  
 12  +4.9848e-01  +5.8981e-01  9.13e-02  1.19e-05  6.61e-03  5.64e-04  3.84e-05  5.54e-01  
 13  +4.9804e-01  +5.8433e-01  8.63e-02  9.14e-06  5.07e-03  5.78e-04  2.94e-05  3.33e-01  
 14  +4.9792e-01  +5.7555e-01  7.76e-02  7.29e-06  4.04e-03  3.37e-04  2.33e-05  5.48e-01  
 15  +4.9655e-01  +5.6703e-01  7.05e-02  5.15e-06  2.86e-03  3.41e-04  1.65e-05  3.77e-01  
 16  +4.9653e-01  +5.6687e-01  7.03e-02  5.15e-06  2.86e-03  3.38e-04  1.65e-05  5.28e-03  
 17  +4.9603e-01  +5.6329e-01  6.73e-02  4.79e-06  2.66e-03  2.80e-04  1.54e-05  1.81e-01  
 18  +4.9385e-01  +5.5134e-01  5.75e-02  3.55e-06  1.97e-03  2.27e-04  1.15e-05  3.44e-01  
 19  +4.9369e-01  +5.4887e-01  5.52e-02  3.38e-06  1.87e-03  1.18e-04  1.09e-05  3.99e-01  
 20  +4.9358e-01  +5.4828e-01  5.47e-02  3.34e-06  1.85e-03  1.09e-04  1.08e-05  6.50e-02  
 21  +4.9253e-01  +5.4305e-01  5.05e-02  2.95e-06  1.63e-03  8.24e-05  9.58e-06  2.52e-01  
 22  +4.9091e-01  +5.3425e-01  4.33e-02  2.39e-06  1.32e-03  1.85e-05  7.80e-06  6.75e-01  
 23  +4.9016e-01  +5.3066e-01  4.05e-02  2.16e-06  1.20e-03  8.79e-06  7.08e-06  4.69e-01  
 24  +4.8679e-01  +5.1576e-01  2.90e-02  1.41e-06  7.82e-04  5.44e-06  4.70e-06  4.13e-01  
 25  +4.8652e-01  +5.1442e-01  2.79e-02  1.33e-06  7.39e-04  3.52e-06  4.47e-06  3.40e-01  
 26  +4.8566e-01  +5.1038e-01  2.47e-02  1.14e-06  6.32e-04  1.72e-06  3.83e-06  5.24e-01  
 27  +4.8299e-01  +4.9884e-01  1.59e-02  7.03e-07  3.90e-04  9.67e-07  2.39e-06  4.47e-01  
 28  +4.8220e-01  +4.9518e-01  1.30e-02  5.52e-07  3.06e-04  2.39e-07  1.88e-06  8.74e-01  
 29  +4.7995e-01  +4.8580e-01  5.85e-03  2.44e-07  1.35e-04  8.81e-08  8.46e-07  7.45e-01  
 30  +4.7952e-01  +4.8406e-01  4.53e-03  1.88e-07  1.04e-04  6.65e-08  6.56e-07  2.97e-01  
 31  +4.7911e-01  +4.8231e-01  3.20e-03  1.32e-07  7.32e-05  3.70e-08  4.63e-07  9.22e-01  
 32  +4.7863e-01  +4.8034e-01  1.72e-03  7.09e-08  3.93e-05  1.92e-08  2.50e-07  9.90e-01  
 33  +4.7822e-01  +4.7873e-01  5.11e-04  2.11e-08  1.17e-05  5.64e-09  7.52e-08  8.05e-01  
 34  +4.7807e-01  +4.7813e-01  6.22e-05  2.57e-09  1.42e-06  6.76e-10  9.23e-09  9.90e-01  
 35  +4.7805e-01  +4.7805e-01  7.22e-07  2.98e-11  1.65e-08  7.81e-12  1.07e-10  9.89e-01  
 36  +4.7805e-01  +4.7805e-01  7.22e-09  2.98e-13  1.65e-10  7.81e-14  1.07e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3682135s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:40 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:40 PM: Optimal value: 4.780e-01
(CVXPY) Sep 20 08:06:40 PM: Compilation took 2.657e-01 seconds
(CVXPY) Sep 20 08:06:40 PM: Solver (including time spent in interface) took 1.422e+00 seconds
Iteration: 17, Objective: 0.4780
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:41 PM: Your problem has 25189 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:41 PM: Finished problem compilation (took 2.437e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25189
  constraints   = 50189
  nnz(P)        = 0
  nnz(A)        = 490408
  cones (total) = 1
    : Nonnegative = 1,  numel = 50189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.76e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4259e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3197e-01  +6.1380e+02  6.13e+02  1.78e-01  9.41e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6023e+02  1.60e+02  1.50e-01  8.00e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7636e+01  1.71e+01  4.71e-02  2.50e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2737e+00  7.74e-01  2.31e-03  1.27e+00  2.25e-05  1.93e-01  1.61e-01  
  6  +5.0001e-01  +7.5564e-01  2.56e-01  7.64e-04  4.22e-01  6.42e-06  7.71e-02  6.61e-01  
  7  +5.0001e-01  +7.0699e-01  2.07e-01  6.18e-04  3.42e-01  4.92e-06  5.54e-02  4.41e-01  
  8  +5.0000e-01  +6.4333e-01  1.43e-01  4.28e-04  2.37e-01  3.76e-06  2.86e-02  6.24e-01  
  9  +5.0000e-01  +6.3213e-01  1.32e-01  3.93e-04  2.17e-01  4.56e-06  1.34e-02  7.02e-01  
 10  +4.9997e-01  +6.1196e-01  1.12e-01  2.95e-04  1.63e-01  1.70e-05  2.27e-03  8.79e-01  
 11  +4.9911e-01  +5.8833e-01  8.92e-02  2.13e-05  1.18e-02  4.05e-04  6.98e-05  9.90e-01  
 12  +4.9856e-01  +5.8299e-01  8.44e-02  1.24e-05  6.87e-03  5.53e-04  4.02e-05  5.40e-01  
 13  +4.9850e-01  +5.7916e-01  8.07e-02  1.02e-05  5.68e-03  4.55e-04  3.30e-05  4.07e-01  
 14  +4.9820e-01  +5.7601e-01  7.78e-02  8.44e-06  4.69e-03  4.28e-04  2.71e-05  3.20e-01  
 15  +4.9801e-01  +5.6788e-01  6.99e-02  6.22e-06  3.45e-03  4.92e-05  1.98e-05  9.90e-01  
 16  +4.9726e-01  +5.6416e-01  6.69e-02  5.19e-06  2.88e-03  4.96e-05  1.66e-05  2.16e-01  
 17  +4.9725e-01  +5.6412e-01  6.69e-02  5.19e-06  2.88e-03  4.94e-05  1.66e-05  2.87e-03  
 18  +4.9710e-01  +5.6347e-01  6.64e-02  5.15e-06  2.86e-03  4.46e-05  1.64e-05  8.38e-02  
 19  +4.9515e-01  +5.5406e-01  5.89e-02  3.79e-06  2.10e-03  4.22e-05  1.22e-05  3.15e-01  
 20  +4.9427e-01  +5.4990e-01  5.56e-02  3.46e-06  1.92e-03  3.09e-05  1.12e-05  2.59e-01  
 21  +4.9398e-01  +5.4869e-01  5.47e-02  3.39e-06  1.88e-03  2.43e-05  1.10e-05  1.76e-01  
 22  +4.9257e-01  +5.4237e-01  4.98e-02  2.91e-06  1.61e-03  1.84e-05  9.45e-06  2.70e-01  
 23  +4.9231e-01  +5.4123e-01  4.89e-02  2.85e-06  1.58e-03  1.43e-05  9.29e-06  1.82e-01  
 24  +4.8965e-01  +5.2938e-01  3.97e-02  2.11e-06  1.17e-03  9.94e-06  6.96e-06  3.53e-01  
 25  +4.8941e-01  +5.2822e-01  3.88e-02  2.03e-06  1.12e-03  6.37e-06  6.69e-06  3.27e-01  
 26  +4.8820e-01  +5.2294e-01  3.47e-02  1.75e-06  9.73e-04  4.78e-06  5.82e-06  2.55e-01  
 27  +4.8702e-01  +5.1775e-01  3.07e-02  1.49e-06  8.26e-04  2.92e-06  4.96e-06  3.92e-01  
 28  +4.8579e-01  +5.1205e-01  2.63e-02  1.20e-06  6.64e-04  3.09e-08  4.01e-06  9.83e-01  
 29  +4.8196e-01  +4.9588e-01  1.39e-02  6.05e-07  3.35e-04  3.31e-08  2.07e-06  5.53e-01  
 30  +4.7986e-01  +4.8700e-01  7.14e-03  3.01e-07  1.67e-04  3.50e-08  1.05e-06  6.49e-01  
 31  +4.7918e-01  +4.8410e-01  4.92e-03  2.04e-07  1.13e-04  3.84e-08  7.15e-07  6.45e-01  
 32  +4.7879e-01  +4.8248e-01  3.69e-03  1.53e-07  8.46e-05  3.01e-08  5.36e-07  3.22e-01  
 33  +4.7830e-01  +4.8047e-01  2.17e-03  8.85e-08  4.91e-05  2.10e-08  3.12e-07  7.04e-01  
 34  +4.7829e-01  +4.8042e-01  2.13e-03  8.78e-08  4.87e-05  2.05e-08  3.11e-07  5.84e-02  
 35  +4.7826e-01  +4.8031e-01  2.05e-03  8.43e-08  4.67e-05  2.01e-08  2.98e-07  1.58e-01  
 36  +4.7797e-01  +4.7913e-01  1.16e-03  4.74e-08  2.63e-05  1.21e-08  1.68e-07  6.57e-01  
 37  +4.7795e-01  +4.7906e-01  1.11e-03  4.53e-08  2.51e-05  1.18e-08  1.60e-07  3.30e-01  
 38  +4.7777e-01  +4.7834e-01  5.71e-04  2.31e-08  1.28e-05  6.21e-09  8.21e-08  7.49e-01  
 39  +4.7758e-01  +4.7763e-01  4.97e-05  1.99e-09  1.10e-06  5.50e-10  7.12e-09  9.44e-01  
 40  +4.7757e-01  +4.7757e-01  9.90e-07  3.97e-11  2.20e-08  1.10e-11  1.42e-10  9.90e-01  
 41  +4.7757e-01  +4.7757e-01  9.90e-09  3.97e-13  2.20e-10  1.10e-13  1.42e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5567279s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:43 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:43 PM: Optimal value: 4.776e-01
(CVXPY) Sep 20 08:06:43 PM: Compilation took 2.437e-01 seconds
(CVXPY) Sep 20 08:06:43 PM: Solver (including time spent in interface) took 1.608e+00 seconds
Iteration: 18, Objective: 0.4776
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:43 PM: Your problem has 25199 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:43 PM: Finished problem compilation (took 2.902e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25199
  constraints   = 50199
  nnz(P)        = 0
  nnz(A)        = 494447
  cones (total) = 1
    : Nonnegative = 1,  numel = 50199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.76e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4259e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3197e-01  +6.1376e+02  6.13e+02  1.78e-01  9.40e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6023e+02  1.60e+02  1.50e-01  8.00e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7638e+01  1.71e+01  4.71e-02  2.50e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2888e+00  7.89e-01  2.36e-03  1.30e+00  2.25e-05  1.93e-01  1.58e-01  
  6  +5.0001e-01  +7.6652e-01  2.67e-01  7.96e-04  4.40e-01  6.51e-06  7.91e-02  6.68e-01  
  7  +5.0001e-01  +6.9556e-01  1.96e-01  5.84e-04  3.23e-01  4.75e-06  5.22e-02  4.62e-01  
  8  +5.0000e-01  +6.5223e-01  1.52e-01  4.55e-04  2.51e-01  3.80e-06  2.81e-02  6.65e-01  
  9  +5.0000e-01  +6.1598e-01  1.16e-01  3.42e-04  1.89e-01  5.84e-06  7.23e-03  9.17e-01  
 10  +4.9985e-01  +6.0551e-01  1.06e-01  1.23e-04  6.82e-02  7.13e-05  4.66e-04  9.49e-01  
 11  +4.9876e-01  +5.9968e-01  1.01e-01  1.74e-05  9.68e-03  5.46e-04  5.65e-05  8.82e-01  
 12  +4.9839e-01  +5.9445e-01  9.61e-02  1.29e-05  7.15e-03  6.05e-04  4.16e-05  3.51e-01  
 13  +4.9820e-01  +5.9053e-01  9.23e-02  1.09e-05  6.07e-03  5.82e-04  3.52e-05  2.52e-01  
 14  +4.9808e-01  +5.8631e-01  8.82e-02  9.50e-06  5.28e-03  5.12e-04  3.05e-05  2.73e-01  
 15  +4.9846e-01  +5.7870e-01  8.02e-02  8.35e-06  4.63e-03  1.88e-04  2.66e-05  6.30e-01  
 16  +4.9818e-01  +5.7143e-01  7.32e-02  6.43e-06  3.57e-03  2.74e-05  2.04e-05  9.46e-01  
 17  +4.9764e-01  +5.6850e-01  7.09e-02  5.75e-06  3.19e-03  1.21e-05  1.83e-05  5.98e-01  
 18  +4.9657e-01  +5.6340e-01  6.68e-02  4.70e-06  2.61e-03  1.19e-05  1.50e-05  2.38e-01  
 19  +4.9556e-01  +5.5876e-01  6.32e-02  4.37e-06  2.43e-03  5.93e-06  1.41e-05  4.41e-01  
 20  +4.9388e-01  +5.5130e-01  5.74e-02  3.61e-06  2.00e-03  4.13e-06  1.17e-05  3.75e-01  
 21  +4.9087e-01  +5.3781e-01  4.69e-02  2.63e-06  1.46e-03  2.94e-06  8.63e-06  3.76e-01  
 22  +4.8849e-01  +5.2721e-01  3.87e-02  2.02e-06  1.12e-03  1.14e-06  6.72e-06  6.04e-01  
 23  +4.8653e-01  +5.1864e-01  3.21e-02  1.58e-06  8.79e-04  7.03e-07  5.31e-06  4.43e-01  
 24  +4.8571e-01  +5.1489e-01  2.92e-02  1.38e-06  7.64e-04  4.06e-07  4.63e-06  6.06e-01  
 25  +4.8403e-01  +5.0768e-01  2.37e-02  1.07e-06  5.93e-04  2.61e-07  3.62e-06  6.56e-01  
 26  +4.8050e-01  +4.9273e-01  1.22e-02  5.31e-07  2.95e-04  1.28e-07  1.83e-06  5.70e-01  
 27  +4.7870e-01  +4.8505e-01  6.35e-03  2.69e-07  1.49e-04  6.70e-08  9.38e-07  7.39e-01  
 28  +4.7765e-01  +4.8066e-01  3.01e-03  1.26e-07  6.97e-05  3.28e-08  4.42e-07  9.25e-01  
 29  +4.7721e-01  +4.7887e-01  1.66e-03  6.93e-08  3.84e-05  1.81e-08  2.45e-07  5.70e-01  
 30  +4.7717e-01  +4.7870e-01  1.53e-03  6.38e-08  3.54e-05  1.67e-08  2.26e-07  3.07e-01  
 31  +4.7687e-01  +4.7748e-01  6.10e-04  2.54e-08  1.41e-05  6.66e-09  9.01e-08  8.96e-01  
 32  +4.7682e-01  +4.7729e-01  4.69e-04  1.95e-08  1.08e-05  5.12e-09  6.94e-08  3.19e-01  
 33  +4.7681e-01  +4.7726e-01  4.46e-04  1.86e-08  1.03e-05  4.85e-09  6.59e-08  4.14e-01  
 34  +4.7669e-01  +4.7678e-01  8.79e-05  3.67e-09  2.03e-06  9.55e-10  1.30e-08  8.68e-01  
 35  +4.7667e-01  +4.7667e-01  3.84e-06  1.60e-10  8.89e-08  4.16e-11  5.71e-10  9.57e-01  
 36  +4.7666e-01  +4.7666e-01  6.59e-08  2.75e-12  1.52e-09  7.14e-13  9.78e-12  9.83e-01  
 37  +4.7666e-01  +4.7666e-01  7.64e-10  3.18e-14  1.77e-11  7.89e-15  1.08e-13  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4483097s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:45 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:45 PM: Optimal value: 4.767e-01
(CVXPY) Sep 20 08:06:45 PM: Compilation took 2.902e-01 seconds
(CVXPY) Sep 20 08:06:45 PM: Solver (including time spent in interface) took 1.503e+00 seconds
Iteration: 19, Objective: 0.4767
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:45 PM: Your problem has 25209 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:45 PM: Finished problem compilation (took 2.631e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25209
  constraints   = 50209
  nnz(P)        = 0
  nnz(A)        = 496218
  cones (total) = 1
    : Nonnegative = 1,  numel = 50209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.76e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4260e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3196e-01  +6.1375e+02  6.13e+02  1.78e-01  9.40e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6022e+02  1.60e+02  1.50e-01  7.99e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7640e+01  1.71e+01  4.71e-02  2.50e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0002e-01  +1.3035e+00  8.03e-01  2.40e-03  1.32e+00  2.25e-05  1.93e-01  1.56e-01  
  6  +5.0001e-01  +7.1940e-01  2.19e-01  6.56e-04  3.62e-01  4.78e-06  6.56e-02  7.77e-01  
  7  +5.0001e-01  +6.8706e-01  1.87e-01  5.59e-04  3.09e-01  4.04e-06  4.79e-02  4.09e-01  
  8  +5.0000e-01  +6.4450e-01  1.44e-01  4.31e-04  2.39e-01  3.60e-06  2.51e-02  6.22e-01  
  9  +5.0000e-01  +6.3643e-01  1.36e-01  4.03e-04  2.23e-01  4.97e-06  8.71e-03  9.01e-01  
 10  +4.9992e-01  +6.1818e-01  1.18e-01  1.83e-04  1.02e-01  4.14e-05  7.60e-04  9.22e-01  
 11  +4.9881e-01  +6.1047e-01  1.12e-01  1.69e-05  9.37e-03  5.30e-04  5.44e-05  9.32e-01  
 12  +4.9861e-01  +5.9875e-01  1.00e-01  1.22e-05  6.75e-03  4.72e-04  3.89e-05  4.62e-01  
 13  +4.9864e-01  +5.9284e-01  9.42e-02  1.08e-05  5.97e-03  3.70e-04  3.44e-05  3.05e-01  
 14  +4.9838e-01  +5.8584e-01  8.75e-02  8.59e-06  4.77e-03  3.00e-04  2.73e-05  4.17e-01  
 15  +4.9817e-01  +5.7239e-01  7.42e-02  6.51e-06  3.61e-03  7.27e-06  2.07e-05  9.90e-01  
 16  +4.9804e-01  +5.7183e-01  7.38e-02  6.42e-06  3.56e-03  6.40e-06  2.04e-05  1.23e-01  
 17  +4.9654e-01  +5.6434e-01  6.78e-02  4.69e-06  2.60e-03  6.27e-06  1.50e-05  3.72e-01  
 18  +4.9643e-01  +5.6389e-01  6.75e-02  4.69e-06  2.60e-03  6.15e-06  1.50e-05  7.53e-03  
 19  +4.9539e-01  +5.5906e-01  6.37e-02  4.14e-06  2.30e-03  5.70e-06  1.33e-05  1.61e-01  
 20  +4.9358e-01  +5.5086e-01  5.73e-02  3.51e-06  1.95e-03  3.37e-06  1.14e-05  4.11e-01  
 21  +4.9066e-01  +5.3767e-01  4.70e-02  2.62e-06  1.45e-03  2.23e-06  8.61e-06  3.90e-01  
 22  +4.8765e-01  +5.2420e-01  3.65e-02  1.87e-06  1.04e-03  8.46e-07  6.23e-06  6.36e-01  
 23  +4.8607e-01  +5.1724e-01  3.12e-02  1.50e-06  8.30e-04  4.37e-07  5.01e-06  6.33e-01  
 24  +4.8581e-01  +5.1611e-01  3.03e-02  1.43e-06  7.91e-04  3.71e-07  4.78e-06  3.52e-01  
 25  +4.8364e-01  +5.0678e-01  2.31e-02  1.02e-06  5.67e-04  2.15e-07  3.45e-06  9.39e-01  
 26  +4.8245e-01  +5.0177e-01  1.93e-02  8.39e-07  4.66e-04  1.82e-07  2.85e-06  2.87e-01  
 27  +4.8076e-01  +4.9446e-01  1.37e-02  5.75e-07  3.19e-04  1.45e-07  1.97e-06  9.90e-01  
 28  +4.7840e-01  +4.8476e-01  6.36e-03  2.63e-07  1.46e-04  6.88e-08  9.17e-07  7.98e-01  
 29  +4.7796e-01  +4.8295e-01  4.99e-03  2.05e-07  1.14e-04  5.46e-08  7.19e-07  4.55e-01  
 30  +4.7719e-01  +4.7979e-01  2.60e-03  1.07e-07  5.93e-05  2.88e-08  3.77e-07  7.43e-01  
 31  +4.7684e-01  +4.7837e-01  1.54e-03  6.30e-08  3.50e-05  1.70e-08  2.23e-07  6.55e-01  
 32  +4.7648e-01  +4.7696e-01  4.77e-04  1.96e-08  1.09e-05  5.26e-09  7.00e-08  9.90e-01  
 33  +4.7632e-01  +4.7634e-01  2.04e-05  8.42e-10  4.67e-07  2.21e-10  3.01e-09  9.62e-01  
 34  +4.7632e-01  +4.7632e-01  2.13e-07  8.77e-12  4.87e-09  2.30e-12  3.14e-11  9.90e-01  
 35  +4.7632e-01  +4.7632e-01  2.53e-09  1.04e-13  5.79e-11  2.47e-14  3.38e-13  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3825288s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:46 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:46 PM: Optimal value: 4.763e-01
(CVXPY) Sep 20 08:06:46 PM: Compilation took 2.631e-01 seconds
(CVXPY) Sep 20 08:06:46 PM: Solver (including time spent in interface) took 1.435e+00 seconds
Iteration: 20, Objective: 0.4763
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:47 PM: Your problem has 25219 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:47 PM: Finished problem compilation (took 2.702e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25219
  constraints   = 50219
  nnz(P)        = 0
  nnz(A)        = 499683
  cones (total) = 1
    : Nonnegative = 1,  numel = 50219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.76e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4259e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3196e-01  +6.1375e+02  6.13e+02  1.78e-01  9.40e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6022e+02  1.60e+02  1.50e-01  7.99e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7639e+01  1.71e+01  4.71e-02  2.50e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.3003e+00  8.00e-01  2.39e-03  1.32e+00  2.25e-05  1.93e-01  1.57e-01  
  6  +5.0001e-01  +7.1802e-01  2.18e-01  6.51e-04  3.60e-01  4.77e-06  6.52e-02  7.79e-01  
  7  +5.0001e-01  +6.9243e-01  1.92e-01  5.75e-04  3.18e-01  4.04e-06  4.83e-02  4.38e-01  
  8  +5.0000e-01  +6.4269e-01  1.43e-01  4.26e-04  2.36e-01  3.59e-06  2.42e-02  6.29e-01  
  9  +5.0000e-01  +6.2845e-01  1.28e-01  3.81e-04  2.10e-01  5.69e-06  9.35e-03  7.13e-01  
 10  +4.9992e-01  +6.1340e-01  1.13e-01  2.04e-04  1.13e-01  4.24e-05  9.17e-04  9.22e-01  
 11  +4.9891e-01  +6.0632e-01  1.07e-01  2.23e-05  1.24e-02  4.91e-04  7.25e-05  9.26e-01  
 12  +4.9873e-01  +5.9409e-01  9.54e-02  1.44e-05  8.01e-03  4.56e-04  4.64e-05  5.81e-01  
 13  +4.9850e-01  +5.9097e-01  9.25e-02  1.19e-05  6.63e-03  4.70e-04  3.83e-05  2.56e-01  
 14  +4.9839e-01  +5.8537e-01  8.70e-02  9.78e-06  5.43e-03  3.75e-04  3.12e-05  4.12e-01  
 15  +4.9834e-01  +5.8026e-01  8.19e-02  8.29e-06  4.60e-03  2.37e-04  2.63e-05  4.95e-01  
 16  +4.9820e-01  +5.7504e-01  7.68e-02  6.98e-06  3.88e-03  8.14e-05  2.21e-05  7.27e-01  
 17  +4.9683e-01  +5.6684e-01  7.00e-02  4.93e-06  2.74e-03  3.85e-05  1.57e-05  7.65e-01  
 18  +4.9667e-01  +5.6619e-01  6.95e-02  4.91e-06  2.73e-03  3.67e-05  1.56e-05  3.10e-02  
 19  +4.9456e-01  +5.5628e-01  6.17e-02  3.83e-06  2.12e-03  2.61e-05  1.23e-05  4.05e-01  
 20  +4.9430e-01  +5.5509e-01  6.08e-02  3.78e-06  2.10e-03  2.22e-05  1.22e-05  1.15e-01  
 21  +4.9204e-01  +5.4491e-01  5.29e-02  3.02e-06  1.68e-03  1.80e-05  9.85e-06  2.54e-01  
 22  +4.8818e-01  +5.2770e-01  3.95e-02  2.05e-06  1.14e-03  5.87e-06  6.82e-06  6.27e-01  
 23  +4.8630e-01  +5.1948e-01  3.32e-02  1.63e-06  9.02e-04  2.89e-06  5.45e-06  5.02e-01  
 24  +4.8473e-01  +5.1258e-01  2.78e-02  1.28e-06  7.08e-04  5.01e-07  4.29e-06  8.39e-01  
 25  +4.8383e-01  +5.0877e-01  2.49e-02  1.13e-06  6.24e-04  4.33e-07  3.80e-06  1.73e-01  
 26  +4.8325e-01  +5.0630e-01  2.31e-02  1.02e-06  5.67e-04  3.57e-07  3.46e-06  3.11e-01  
 27  +4.8169e-01  +4.9972e-01  1.80e-02  7.75e-07  4.30e-04  2.13e-07  2.64e-06  7.36e-01  
 28  +4.7948e-01  +4.9061e-01  1.11e-02  4.69e-07  2.60e-04  1.29e-07  1.62e-06  4.39e-01  
 29  +4.7860e-01  +4.8693e-01  8.33e-03  3.47e-07  1.92e-04  9.55e-08  1.21e-06  4.48e-01  
 30  +4.7745e-01  +4.8214e-01  4.69e-03  1.92e-07  1.06e-04  5.24e-08  6.75e-07  9.90e-01  
 31  +4.7611e-01  +4.7689e-01  7.75e-04  3.13e-08  1.74e-05  8.58e-09  1.13e-07  9.90e-01  
 32  +4.7585e-01  +4.7589e-01  4.50e-05  1.81e-09  1.00e-06  4.96e-10  6.57e-09  9.49e-01  
 33  +4.7583e-01  +4.7583e-01  4.58e-07  1.84e-11  1.02e-08  5.05e-12  6.70e-11  9.90e-01  
 34  +4.7583e-01  +4.7583e-01  4.59e-09  1.84e-13  1.02e-10  5.05e-14  6.71e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.267973s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:48 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:48 PM: Optimal value: 4.758e-01
(CVXPY) Sep 20 08:06:48 PM: Compilation took 2.702e-01 seconds
(CVXPY) Sep 20 08:06:48 PM: Solver (including time spent in interface) took 1.321e+00 seconds
Iteration: 21, Objective: 0.4758
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:48 PM: Your problem has 25229 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:49 PM: Finished problem compilation (took 2.940e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25229
  constraints   = 50229
  nnz(P)        = 0
  nnz(A)        = 502192
  cones (total) = 1
    : Nonnegative = 1,  numel = 50229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.76e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4260e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3196e-01  +6.1376e+02  6.13e+02  1.78e-01  9.40e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6022e+02  1.60e+02  1.50e-01  7.99e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7641e+01  1.71e+01  4.71e-02  2.50e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0002e-01  +1.3047e+00  8.05e-01  2.41e-03  1.33e+00  2.25e-05  1.93e-01  1.56e-01  
  6  +5.0001e-01  +7.2026e-01  2.20e-01  6.58e-04  3.64e-01  4.90e-06  6.60e-02  7.59e-01  
  7  +5.0001e-01  +6.9014e-01  1.90e-01  5.68e-04  3.14e-01  4.08e-06  4.75e-02  4.58e-01  
  8  +5.0000e-01  +6.3410e-01  1.34e-01  4.00e-04  2.21e-01  3.83e-06  2.30e-02  5.78e-01  
  9  +5.0000e-01  +6.3178e-01  1.32e-01  3.91e-04  2.16e-01  5.84e-06  9.53e-03  7.52e-01  
 10  +4.9989e-01  +6.1242e-01  1.13e-01  1.78e-04  9.87e-02  5.25e-05  7.48e-04  9.36e-01  
 11  +4.9900e-01  +6.0688e-01  1.08e-01  2.51e-05  1.39e-02  4.46e-04  8.21e-05  8.95e-01  
 12  +4.9875e-01  +5.9468e-01  9.59e-02  1.52e-05  8.46e-03  4.59e-04  4.92e-05  6.07e-01  
 13  +4.9858e-01  +5.8925e-01  9.07e-02  1.17e-05  6.51e-03  4.26e-04  3.76e-05  4.16e-01  
 14  +4.9842e-01  +5.8295e-01  8.45e-02  9.16e-06  5.08e-03  3.17e-04  2.92e-05  5.13e-01  
 15  +4.9831e-01  +5.7711e-01  7.88e-02  7.46e-06  4.14e-03  1.39e-04  2.37e-05  6.89e-01  
 16  +4.9795e-01  +5.7327e-01  7.53e-02  6.47e-06  3.59e-03  4.96e-05  2.06e-05  6.97e-01  
 17  +4.9671e-01  +5.6729e-01  7.06e-02  4.98e-06  2.77e-03  5.08e-05  1.59e-05  2.91e-01  
 18  +4.9655e-01  +5.6662e-01  7.01e-02  4.97e-06  2.76e-03  4.86e-05  1.59e-05  2.52e-02  
 19  +4.9513e-01  +5.5990e-01  6.48e-02  4.21e-06  2.34e-03  3.72e-05  1.36e-05  3.10e-01  
 20  +4.9287e-01  +5.4948e-01  5.66e-02  3.38e-06  1.87e-03  2.26e-05  1.10e-05  4.14e-01  
 21  +4.9163e-01  +5.4394e-01  5.23e-02  3.01e-06  1.67e-03  1.66e-05  9.89e-06  2.53e-01  
 22  +4.8747e-01  +5.2552e-01  3.80e-02  1.95e-06  1.08e-03  8.30e-06  6.54e-06  5.14e-01  
 23  +4.8618e-01  +5.1984e-01  3.37e-02  1.66e-06  9.21e-04  5.37e-06  5.59e-06  3.53e-01  
 24  +4.8381e-01  +5.0961e-01  2.58e-02  1.19e-06  6.61e-04  2.03e-06  4.05e-06  6.20e-01  
 25  +4.8292e-01  +5.0582e-01  2.29e-02  1.04e-06  5.76e-04  1.61e-06  3.55e-06  2.24e-01  
 26  +4.8212e-01  +5.0212e-01  2.00e-02  8.65e-07  4.80e-04  1.64e-07  2.97e-06  9.90e-01  
 27  +4.8003e-01  +4.9347e-01  1.34e-02  5.73e-07  3.18e-04  1.12e-07  1.99e-06  3.80e-01  
 28  +4.7810e-01  +4.8551e-01  7.41e-03  3.10e-07  1.72e-04  6.89e-08  1.09e-06  6.64e-01  
 29  +4.7736e-01  +4.8245e-01  5.10e-03  2.12e-07  1.18e-04  4.87e-08  7.49e-07  4.15e-01  
 30  +4.7715e-01  +4.8157e-01  4.41e-03  1.81e-07  1.01e-04  4.61e-08  6.40e-07  6.36e-01  
 31  +4.7703e-01  +4.8105e-01  4.03e-03  1.65e-07  9.16e-05  4.25e-08  5.84e-07  2.56e-01  
 32  +4.7625e-01  +4.7792e-01  1.67e-03  6.83e-08  3.79e-05  1.86e-08  2.43e-07  9.90e-01  
 33  +4.7582e-01  +4.7623e-01  4.16e-04  1.70e-08  9.42e-06  4.59e-09  6.08e-08  9.21e-01  
 34  +4.7575e-01  +4.7599e-01  2.36e-04  9.62e-09  5.33e-06  2.59e-09  3.44e-08  7.59e-01  
 35  +4.7567e-01  +4.7568e-01  4.25e-06  1.73e-10  9.62e-08  4.65e-11  6.22e-10  9.89e-01  
 36  +4.7567e-01  +4.7567e-01  4.90e-08  2.00e-12  1.11e-09  5.35e-13  7.16e-12  9.88e-01  
 37  +4.7567e-01  +4.7567e-01  5.66e-10  2.31e-14  1.28e-11  6.13e-15  8.20e-14  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5874915s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:50 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:50 PM: Optimal value: 4.757e-01
(CVXPY) Sep 20 08:06:50 PM: Compilation took 2.940e-01 seconds
(CVXPY) Sep 20 08:06:50 PM: Solver (including time spent in interface) took 1.647e+00 seconds
Iteration: 22, Objective: 0.4757
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:51 PM: Your problem has 25239 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:51 PM: Finished problem compilation (took 2.928e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:51 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25239
  constraints   = 50239
  nnz(P)        = 0
  nnz(A)        = 505215
  cones (total) = 1
    : Nonnegative = 1,  numel = 50239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.76e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4259e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3196e-01  +6.1370e+02  6.13e+02  1.78e-01  9.39e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6020e+02  1.60e+02  1.50e-01  7.99e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7640e+01  1.71e+01  4.71e-02  2.50e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2853e+00  7.85e-01  2.35e-03  1.29e+00  2.26e-05  1.93e-01  1.60e-01  
  6  +5.0001e-01  +7.5913e-01  2.59e-01  7.75e-04  4.28e-01  6.55e-06  7.75e-02  6.45e-01  
  7  +5.0001e-01  +6.9304e-01  1.93e-01  5.77e-04  3.19e-01  4.72e-06  4.93e-02  5.37e-01  
  8  +5.0000e-01  +6.7306e-01  1.73e-01  5.17e-04  2.86e-01  4.09e-06  3.05e-02  6.13e-01  
  9  +5.0000e-01  +6.3133e-01  1.31e-01  3.90e-04  2.15e-01  5.55e-06  9.96e-03  7.93e-01  
 10  +4.9993e-01  +6.1401e-01  1.14e-01  2.15e-04  1.19e-01  3.84e-05  9.97e-04  9.41e-01  
 11  +4.9898e-01  +6.0905e-01  1.10e-01  2.39e-05  1.33e-02  4.60e-04  7.82e-05  9.22e-01  
 12  +4.9916e-01  +5.9835e-01  9.92e-02  1.93e-05  1.07e-02  3.15e-04  6.25e-05  4.84e-01  
 13  +4.9855e-01  +5.9402e-01  9.55e-02  1.20e-05  6.65e-03  4.53e-04  3.85e-05  4.19e-01  
 14  +4.9842e-01  +5.8712e-01  8.87e-02  9.55e-06  5.30e-03  3.39e-04  3.05e-05  4.74e-01  
 15  +4.9829e-01  +5.8348e-01  8.52e-02  8.46e-06  4.70e-03  2.58e-04  2.70e-05  3.49e-01  
 16  +4.9766e-01  +5.7849e-01  8.08e-02  6.81e-06  3.78e-03  2.25e-04  2.17e-05  3.73e-01  
 17  +4.9752e-01  +5.7616e-01  7.86e-02  6.57e-06  3.65e-03  1.53e-04  2.10e-05  2.93e-01  
 18  +4.9603e-01  +5.6805e-01  7.20e-02  4.93e-06  2.74e-03  1.35e-04  1.58e-05  3.90e-01  
 19  +4.9583e-01  +5.6716e-01  7.13e-02  4.92e-06  2.73e-03  1.30e-04  1.58e-05  1.60e-02  
 20  +4.9441e-01  +5.6013e-01  6.57e-02  4.18e-06  2.32e-03  1.08e-04  1.35e-05  2.45e-01  
 21  +4.9253e-01  +5.5027e-01  5.77e-02  3.49e-06  1.94e-03  3.84e-05  1.14e-05  5.64e-01  
 22  +4.9085e-01  +5.4247e-01  5.16e-02  2.95e-06  1.64e-03  2.43e-05  9.74e-06  3.57e-01  
 23  +4.8775e-01  +5.2827e-01  4.05e-02  2.10e-06  1.17e-03  6.38e-06  7.03e-06  6.82e-01  
 24  +4.8586e-01  +5.1981e-01  3.39e-02  1.63e-06  9.06e-04  8.65e-07  5.51e-06  8.15e-01  
 25  +4.8242e-01  +5.0508e-01  2.27e-02  1.03e-06  5.71e-04  4.92e-07  3.53e-06  4.68e-01  
 26  +4.8217e-01  +5.0394e-01  2.18e-02  9.75e-07  5.41e-04  3.98e-07  3.35e-06  3.08e-01  
 27  +4.8014e-01  +4.9527e-01  1.51e-02  6.54e-07  3.62e-04  2.28e-07  2.27e-06  5.76e-01  
 28  +4.8002e-01  +4.9473e-01  1.47e-02  6.29e-07  3.49e-04  2.07e-07  2.19e-06  2.63e-01  
 29  +4.7754e-01  +4.8446e-01  6.92e-03  2.88e-07  1.60e-04  9.06e-08  1.02e-06  6.52e-01  
 30  +4.7682e-01  +4.8146e-01  4.64e-03  1.91e-07  1.06e-04  5.56e-08  6.79e-07  6.95e-01  
 31  +4.7668e-01  +4.8085e-01  4.17e-03  1.71e-07  9.48e-05  4.92e-08  6.08e-07  3.08e-01  
 32  +4.7656e-01  +4.8037e-01  3.81e-03  1.56e-07  8.64e-05  4.49e-08  5.54e-07  1.39e-01  
 33  +4.7643e-01  +4.7980e-01  3.37e-03  1.39e-07  7.69e-05  3.73e-08  4.95e-07  8.60e-01  
 34  +4.7604e-01  +4.7825e-01  2.21e-03  9.05e-08  5.02e-05  2.45e-08  3.24e-07  4.45e-01  
 35  +4.7584e-01  +4.7749e-01  1.65e-03  6.68e-08  3.71e-05  1.83e-08  2.40e-07  6.68e-01  
 36  +4.7549e-01  +4.7612e-01  6.26e-04  2.52e-08  1.40e-05  6.97e-09  9.09e-08  8.67e-01  
 37  +4.7537e-01  +4.7565e-01  2.84e-04  1.13e-08  6.29e-06  3.14e-09  4.12e-08  8.33e-01  
 38  +4.7535e-01  +4.7558e-01  2.31e-04  9.23e-09  5.12e-06  2.54e-09  3.35e-08  5.96e-01  
 39  +4.7527e-01  +4.7528e-01  8.78e-06  3.49e-10  1.94e-07  9.71e-11  1.27e-09  9.72e-01  
 40  +4.7527e-01  +4.7527e-01  8.85e-08  3.53e-12  1.95e-09  9.80e-13  1.29e-11  9.90e-01  
 41  +4.7527e-01  +4.7527e-01  1.30e-09  5.20e-14  2.88e-11  1.45e-14  1.89e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6002831s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:53 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:53 PM: Optimal value: 4.753e-01
(CVXPY) Sep 20 08:06:53 PM: Compilation took 2.928e-01 seconds
(CVXPY) Sep 20 08:06:53 PM: Solver (including time spent in interface) took 1.656e+00 seconds
Iteration: 23, Objective: 0.4753
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:53 PM: Your problem has 25248 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:53 PM: Finished problem compilation (took 3.080e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25248
  constraints   = 50248
  nnz(P)        = 0
  nnz(A)        = 509703
  cones (total) = 1
    : Nonnegative = 1,  numel = 50248

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.76e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4259e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3195e-01  +6.1366e+02  6.13e+02  1.78e-01  9.39e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6018e+02  1.60e+02  1.50e-01  7.99e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7637e+01  1.71e+01  4.71e-02  2.50e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0001e-01  +1.2839e+00  7.84e-01  2.34e-03  1.29e+00  2.26e-05  1.93e-01  1.61e-01  
  6  +5.0001e-01  +7.5442e-01  2.54e-01  7.61e-04  4.21e-01  6.51e-06  7.64e-02  6.39e-01  
  7  +5.0000e-01  +6.7889e-01  1.79e-01  5.35e-04  2.96e-01  4.60e-06  4.49e-02  5.71e-01  
  8  +5.0000e-01  +6.5449e-01  1.54e-01  4.62e-04  2.55e-01  4.69e-06  2.74e-02  4.79e-01  
  9  +5.0000e-01  +6.4254e-01  1.43e-01  4.24e-04  2.34e-01  6.62e-06  1.17e-02  7.05e-01  
 10  +4.9992e-01  +6.1710e-01  1.17e-01  2.41e-04  1.33e-01  4.01e-05  1.21e-03  9.50e-01  
 11  +4.9896e-01  +6.1159e-01  1.13e-01  2.91e-05  1.62e-02  4.70e-04  9.62e-05  9.23e-01  
 12  +4.9880e-01  +6.0749e-01  1.09e-01  2.33e-05  1.29e-02  5.04e-04  7.64e-05  2.82e-01  
 13  +4.9920e-01  +5.9075e-01  9.15e-02  1.62e-05  8.98e-03  2.16e-04  5.22e-05  8.06e-01  
 14  +4.9891e-01  +5.8806e-01  8.92e-02  1.20e-05  6.66e-03  2.42e-04  3.85e-05  3.78e-01  
 15  +4.9831e-01  +5.8307e-01  8.48e-02  8.16e-06  4.53e-03  2.50e-04  2.61e-05  5.18e-01  
 16  +4.9829e-01  +5.8231e-01  8.40e-02  8.01e-06  4.45e-03  2.09e-04  2.56e-05  1.67e-01  
 17  +4.9770e-01  +5.7881e-01  8.11e-02  6.70e-06  3.72e-03  1.94e-04  2.14e-05  2.98e-01  
 18  +4.9711e-01  +5.7556e-01  7.85e-02  5.97e-06  3.32e-03  1.76e-04  1.91e-05  2.08e-01  
 19  +4.9576e-01  +5.6685e-01  7.11e-02  5.11e-06  2.84e-03  3.22e-05  1.65e-05  7.50e-01  
 20  +4.9466e-01  +5.6160e-01  6.69e-02  4.54e-06  2.52e-03  2.33e-05  1.48e-05  3.03e-01  
 21  +4.9182e-01  +5.4844e-01  5.66e-02  3.38e-06  1.88e-03  1.45e-05  1.11e-05  4.50e-01  
 22  +4.8997e-01  +5.4013e-01  5.02e-02  2.84e-06  1.58e-03  1.01e-05  9.44e-06  3.07e-01  
 23  +4.8737e-01  +5.2849e-01  4.11e-02  2.17e-06  1.20e-03  5.92e-06  7.31e-06  4.13e-01  
 24  +4.8509e-01  +5.1832e-01  3.32e-02  1.60e-06  8.87e-04  6.42e-08  5.44e-06  9.33e-01  
 25  +4.8319e-01  +5.1009e-01  2.69e-02  1.25e-06  6.93e-04  1.02e-07  4.30e-06  4.03e-01  
 26  +4.8193e-01  +5.0465e-01  2.27e-02  1.02e-06  5.66e-04  1.50e-07  3.53e-06  5.64e-01  
 27  +4.7990e-01  +4.9575e-01  1.58e-02  6.79e-07  3.77e-04  1.60e-07  2.38e-06  9.90e-01  
 28  +4.7961e-01  +4.9455e-01  1.49e-02  6.38e-07  3.54e-04  1.52e-07  2.24e-06  1.95e-01  
 29  +4.7838e-01  +4.8942e-01  1.10e-02  4.67e-07  2.59e-04  1.13e-07  1.65e-06  3.83e-01  
 30  +4.7838e-01  +4.8943e-01  1.11e-02  4.66e-07  2.58e-04  1.14e-07  1.65e-06  3.72e-02  
 31  +4.7834e-01  +4.8924e-01  1.09e-02  4.59e-07  2.55e-04  1.13e-07  1.63e-06  1.02e-01  
 32  +4.7728e-01  +4.8487e-01  7.59e-03  3.17e-07  1.76e-04  7.89e-08  1.13e-06  4.03e-01  
 33  +4.7679e-01  +4.8272e-01  5.93e-03  2.46e-07  1.37e-04  6.36e-08  8.83e-07  7.62e-01  
 34  +4.7625e-01  +4.8053e-01  4.28e-03  1.76e-07  9.79e-05  4.61e-08  6.37e-07  4.74e-01  
 35  +4.7605e-01  +4.7973e-01  3.68e-03  1.51e-07  8.37e-05  3.98e-08  5.46e-07  1.97e-01  
 36  +4.7601e-01  +4.7954e-01  3.54e-03  1.47e-07  8.14e-05  3.76e-08  5.36e-07  2.70e-01  
 37  +4.7544e-01  +4.7722e-01  1.78e-03  7.38e-08  4.09e-05  1.90e-08  2.71e-07  6.82e-01  
 38  +4.7538e-01  +4.7701e-01  1.63e-03  6.71e-08  3.72e-05  1.74e-08  2.46e-07  2.14e-01  
 39  +4.7524e-01  +4.7646e-01  1.22e-03  4.99e-08  2.77e-05  1.32e-08  1.83e-07  3.86e-01  
 40  +4.7500e-01  +4.7554e-01  5.38e-04  2.18e-08  1.21e-05  5.83e-09  8.05e-08  6.72e-01  
 41  +4.7486e-01  +4.7499e-01  1.29e-04  5.17e-09  2.87e-06  1.41e-09  1.92e-08  9.90e-01  
 42  +4.7481e-01  +4.7481e-01  3.56e-06  1.42e-10  7.86e-08  3.88e-11  5.28e-10  9.74e-01  
 43  +4.7481e-01  +4.7481e-01  4.73e-08  1.88e-12  1.04e-09  5.15e-13  7.01e-12  9.87e-01  
 44  +4.7481e-01  +4.7481e-01  9.01e-09  3.59e-13  1.99e-10  9.99e-14  1.34e-12  8.23e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8462992s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:55 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:55 PM: Optimal value: 4.748e-01
(CVXPY) Sep 20 08:06:55 PM: Compilation took 3.080e-01 seconds
(CVXPY) Sep 20 08:06:55 PM: Solver (including time spent in interface) took 1.907e+00 seconds
Iteration: 24, Objective: 0.4748
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:55 PM: Your problem has 25258 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:56 PM: Finished problem compilation (took 2.857e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25258
  constraints   = 50258
  nnz(P)        = 0
  nnz(A)        = 512360
  cones (total) = 1
    : Nonnegative = 1,  numel = 50258

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.76e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4260e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1353e+02  6.13e+02  1.78e-01  9.39e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6014e+02  1.60e+02  1.50e-01  7.98e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7638e+01  1.71e+01  4.71e-02  2.50e+01  5.21e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2510e+00  7.51e-01  2.25e-03  1.24e+00  2.26e-05  1.93e-01  1.68e-01  
  6  +5.0001e-01  +7.2800e-01  2.28e-01  6.82e-04  3.77e-01  6.06e-06  6.95e-02  6.82e-01  
  7  +5.0000e-01  +6.7807e-01  1.78e-01  5.32e-04  2.94e-01  4.92e-06  4.36e-02  5.14e-01  
  8  +5.0000e-01  +6.5695e-01  1.57e-01  4.69e-04  2.59e-01  5.29e-06  2.67e-02  4.57e-01  
  9  +4.9999e-01  +6.3980e-01  1.40e-01  4.12e-04  2.28e-01  9.79e-06  7.85e-03  8.49e-01  
 10  +4.9970e-01  +6.1072e-01  1.11e-01  9.92e-05  5.50e-02  1.41e-04  3.61e-04  9.88e-01  
 11  +4.9821e-01  +6.0298e-01  1.05e-01  1.83e-05  1.02e-02  7.68e-04  6.02e-05  8.40e-01  
 12  +4.9836e-01  +5.9773e-01  9.94e-02  1.53e-05  8.52e-03  6.03e-04  5.00e-05  4.12e-01  
 13  +4.9794e-01  +5.9451e-01  9.66e-02  1.20e-05  6.68e-03  6.66e-04  3.90e-05  2.90e-01  
 14  +4.9810e-01  +5.9138e-01  9.33e-02  1.07e-05  5.93e-03  4.92e-04  3.45e-05  3.78e-01  
 15  +4.9783e-01  +5.8742e-01  8.96e-02  8.85e-06  4.92e-03  4.03e-04  2.85e-05  4.01e-01  
 16  +4.9632e-01  +5.7399e-01  7.77e-02  5.51e-06  3.06e-03  1.61e-04  1.77e-05  8.98e-01  
 17  +4.9477e-01  +5.6641e-01  7.16e-02  4.67e-06  2.60e-03  1.29e-04  1.52e-05  2.73e-01  
 18  +4.9206e-01  +5.5329e-01  6.12e-02  3.69e-06  2.05e-03  6.99e-05  1.22e-05  4.50e-01  
 19  +4.8993e-01  +5.4333e-01  5.34e-02  3.06e-06  1.70e-03  3.23e-05  1.02e-05  4.75e-01  
 20  +4.8653e-01  +5.2782e-01  4.13e-02  2.16e-06  1.20e-03  3.49e-07  7.33e-06  8.69e-01  
 21  +4.8518e-01  +5.2189e-01  3.67e-02  1.85e-06  1.03e-03  3.08e-07  6.33e-06  2.29e-01  
 22  +4.8502e-01  +5.2118e-01  3.62e-02  1.80e-06  9.96e-04  3.03e-07  6.14e-06  2.23e-01  
 23  +4.8229e-01  +5.0935e-01  2.71e-02  1.27e-06  7.06e-04  2.26e-07  4.41e-06  3.55e-01  
 24  +4.8187e-01  +5.0742e-01  2.56e-02  1.17e-06  6.50e-04  2.22e-07  4.08e-06  4.37e-01  
 25  +4.8031e-01  +5.0076e-01  2.05e-02  9.15e-07  5.08e-04  1.79e-07  3.21e-06  2.75e-01  
 26  +4.7943e-01  +4.9681e-01  1.74e-02  7.52e-07  4.17e-04  1.66e-07  2.64e-06  6.75e-01  
 27  +4.7731e-01  +4.8791e-01  1.06e-02  4.47e-07  2.48e-04  1.05e-07  1.59e-06  6.48e-01  
 28  +4.7707e-01  +4.8688e-01  9.81e-03  4.12e-07  2.29e-04  9.86e-08  1.47e-06  2.28e-01  
 29  +4.7706e-01  +4.8683e-01  9.77e-03  4.10e-07  2.27e-04  9.87e-08  1.46e-06  7.24e-02  
 30  +4.7627e-01  +4.8360e-01  7.32e-03  3.05e-07  1.69e-04  7.42e-08  1.10e-06  2.89e-01  
 31  +4.7500e-01  +4.7834e-01  3.33e-03  1.36e-07  7.55e-05  3.60e-08  4.97e-07  9.90e-01  
 32  +4.7415e-01  +4.7503e-01  8.82e-04  3.53e-08  1.96e-05  9.58e-09  1.31e-07  7.94e-01  
 33  +4.7409e-01  +4.7482e-01  7.26e-04  2.90e-08  1.61e-05  7.86e-09  1.08e-07  4.21e-01  
 34  +4.7385e-01  +4.7391e-01  6.08e-05  2.42e-09  1.34e-06  6.55e-10  9.06e-09  9.29e-01  
 35  +4.7383e-01  +4.7384e-01  6.41e-06  2.55e-10  1.41e-07  6.89e-11  9.56e-10  9.59e-01  
 36  +4.7383e-01  +4.7383e-01  6.50e-08  2.59e-12  1.43e-09  7.00e-13  9.71e-12  9.90e-01  
 37  +4.7383e-01  +4.7383e-01  1.06e-09  4.21e-14  2.33e-11  1.14e-14  1.58e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6352933s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:57 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:57 PM: Optimal value: 4.738e-01
(CVXPY) Sep 20 08:06:57 PM: Compilation took 2.857e-01 seconds
(CVXPY) Sep 20 08:06:57 PM: Solver (including time spent in interface) took 1.688e+00 seconds
Iteration: 25, Objective: 0.4738
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:06:58 PM: Your problem has 25259 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:06:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:06:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:06:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:06:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:06:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:06:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:06:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:06:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:06:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:06:58 PM: Finished problem compilation (took 3.198e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25259
  constraints   = 50259
  nnz(P)        = 0
  nnz(A)        = 513946
  cones (total) = 1
    : Nonnegative = 1,  numel = 50259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.77e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4259e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1356e+02  6.13e+02  1.78e-01  9.39e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6014e+02  1.60e+02  1.50e-01  7.99e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7636e+01  1.71e+01  4.71e-02  2.50e+01  5.21e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2393e+00  7.39e-01  2.21e-03  1.22e+00  2.27e-05  1.93e-01  1.71e-01  
  6  +5.0000e-01  +7.2976e-01  2.30e-01  6.87e-04  3.80e-01  6.25e-06  7.03e-02  6.78e-01  
  7  +5.0000e-01  +6.7889e-01  1.79e-01  5.35e-04  2.96e-01  5.04e-06  4.40e-02  5.16e-01  
  8  +5.0000e-01  +6.5771e-01  1.58e-01  4.71e-04  2.61e-01  5.39e-06  2.71e-02  4.59e-01  
  9  +4.9999e-01  +6.4229e-01  1.42e-01  4.19e-04  2.32e-01  9.60e-06  8.03e-03  8.70e-01  
 10  +4.9976e-01  +6.1094e-01  1.11e-01  1.15e-04  6.37e-02  1.15e-04  4.29e-04  9.90e-01  
 11  +4.9819e-01  +6.0319e-01  1.05e-01  1.75e-05  9.74e-03  7.83e-04  5.76e-05  8.69e-01  
 12  +4.9844e-01  +5.9793e-01  9.95e-02  1.51e-05  8.39e-03  5.78e-04  4.90e-05  4.11e-01  
 13  +4.9800e-01  +5.9440e-01  9.64e-02  1.16e-05  6.46e-03  6.37e-04  3.76e-05  3.12e-01  
 14  +4.9814e-01  +5.9147e-01  9.33e-02  1.04e-05  5.81e-03  4.77e-04  3.37e-05  3.57e-01  
 15  +4.9794e-01  +5.8691e-01  8.90e-02  8.61e-06  4.78e-03  3.37e-04  2.77e-05  4.88e-01  
 16  +4.9673e-01  +5.7790e-01  8.12e-02  6.14e-06  3.41e-03  2.29e-04  1.98e-05  6.18e-01  
 17  +4.9551e-01  +5.7163e-01  7.61e-02  5.23e-06  2.90e-03  2.10e-04  1.69e-05  2.12e-01  
 18  +4.9396e-01  +5.6330e-01  6.93e-02  4.52e-06  2.51e-03  1.29e-04  1.48e-05  3.75e-01  
 19  +4.9240e-01  +5.5507e-01  6.27e-02  3.96e-06  2.20e-03  4.64e-05  1.31e-05  5.40e-01  
 20  +4.8947e-01  +5.4148e-01  5.20e-02  2.98e-06  1.65e-03  2.88e-05  9.97e-06  4.08e-01  
 21  +4.8601e-01  +5.2558e-01  3.96e-02  2.04e-06  1.13e-03  2.77e-06  6.95e-06  8.16e-01  
 22  +4.8518e-01  +5.2195e-01  3.68e-02  1.85e-06  1.03e-03  2.33e-06  6.32e-06  1.76e-01  
 23  +4.8487e-01  +5.2054e-01  3.57e-02  1.75e-06  9.71e-04  1.59e-06  5.98e-06  3.50e-01  
 24  +4.8250e-01  +5.1029e-01  2.78e-02  1.30e-06  7.22e-04  1.10e-06  4.50e-06  3.33e-01  
 25  +4.8168e-01  +5.0668e-01  2.50e-02  1.14e-06  6.30e-04  6.56e-07  3.95e-06  4.86e-01  
 26  +4.8049e-01  +5.0157e-01  2.11e-02  9.41e-07  5.22e-04  5.27e-07  3.29e-06  2.23e-01  
 27  +4.7899e-01  +4.9496e-01  1.60e-02  6.85e-07  3.80e-04  2.34e-07  2.41e-06  7.67e-01  
 28  +4.7820e-01  +4.9153e-01  1.33e-02  5.62e-07  3.12e-04  1.59e-07  1.98e-06  7.38e-01  
 29  +4.7673e-01  +4.8545e-01  8.72e-03  3.63e-07  2.02e-04  1.00e-07  1.30e-06  5.98e-01  
 30  +4.7575e-01  +4.8134e-01  5.59e-03  2.30e-07  1.28e-04  6.11e-08  8.31e-07  9.63e-01  
 31  +4.7450e-01  +4.7637e-01  1.87e-03  7.58e-08  4.20e-05  2.06e-08  2.79e-07  7.10e-01  
 32  +4.7403e-01  +4.7460e-01  5.67e-04  2.27e-08  1.26e-05  6.10e-09  8.45e-08  9.61e-01  
 33  +4.7385e-01  +4.7389e-01  4.61e-05  1.84e-09  1.02e-06  4.95e-10  6.88e-09  9.50e-01  
 34  +4.7383e-01  +4.7384e-01  3.80e-06  1.51e-10  8.38e-08  4.08e-11  5.67e-10  9.69e-01  
 35  +4.7383e-01  +4.7383e-01  3.83e-08  1.52e-12  8.46e-10  4.12e-13  5.73e-12  9.90e-01  
 36  +4.7383e-01  +4.7383e-01  7.61e-09  3.03e-13  1.68e-10  8.21e-14  1.14e-12  8.08e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4871636s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:06:59 PM: Problem status: optimal
(CVXPY) Sep 20 08:06:59 PM: Optimal value: 4.738e-01
(CVXPY) Sep 20 08:06:59 PM: Compilation took 3.198e-01 seconds
(CVXPY) Sep 20 08:06:59 PM: Solver (including time spent in interface) took 1.544e+00 seconds
Iteration: 26, Objective: 0.4738
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:00 PM: Your problem has 25269 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:00 PM: Finished problem compilation (took 2.937e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25269
  constraints   = 50269
  nnz(P)        = 0
  nnz(A)        = 518670
  cones (total) = 1
    : Nonnegative = 1,  numel = 50269

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.77e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4258e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1354e+02  6.13e+02  1.78e-01  9.39e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6013e+02  1.60e+02  1.50e-01  7.98e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7634e+01  1.71e+01  4.71e-02  2.50e+01  5.21e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2661e+00  7.66e-01  2.29e-03  1.26e+00  2.26e-05  1.93e-01  1.65e-01  
  6  +5.0001e-01  +7.3642e-01  2.36e-01  7.07e-04  3.91e-01  6.05e-06  7.11e-02  6.91e-01  
  7  +5.0000e-01  +6.8489e-01  1.85e-01  5.53e-04  3.06e-01  4.92e-06  4.58e-02  4.83e-01  
  8  +5.0000e-01  +6.6296e-01  1.63e-01  4.87e-04  2.69e-01  5.09e-06  2.75e-02  5.11e-01  
  9  +4.9999e-01  +6.4400e-01  1.44e-01  4.26e-04  2.36e-01  8.54e-06  9.35e-03  7.76e-01  
 10  +4.9975e-01  +6.1080e-01  1.11e-01  1.15e-04  6.39e-02  1.16e-04  4.30e-04  9.90e-01  
 11  +4.9836e-01  +6.0369e-01  1.05e-01  1.96e-05  1.09e-02  7.11e-04  6.45e-05  8.56e-01  
 12  +4.9834e-01  +5.9897e-01  1.01e-01  1.57e-05  8.72e-03  6.30e-04  5.12e-05  4.10e-01  
 13  +4.9842e-01  +5.9412e-01  9.57e-02  1.27e-05  7.03e-03  4.76e-04  4.09e-05  4.95e-01  
 14  +4.9827e-01  +5.8982e-01  9.15e-02  9.91e-06  5.51e-03  3.65e-04  3.18e-05  5.29e-01  
 15  +4.9803e-01  +5.8671e-01  8.87e-02  8.53e-06  4.74e-03  2.83e-04  2.74e-05  3.92e-01  
 16  +4.9625e-01  +5.7478e-01  7.85e-02  5.38e-06  2.99e-03  1.43e-04  1.73e-05  8.34e-01  
 17  +4.9508e-01  +5.6910e-01  7.40e-02  4.78e-06  2.66e-03  1.28e-04  1.55e-05  1.70e-01  
 18  +4.9328e-01  +5.6038e-01  6.71e-02  4.19e-06  2.33e-03  7.72e-05  1.37e-05  3.53e-01  
 19  +4.8935e-01  +5.4199e-01  5.26e-02  2.95e-06  1.64e-03  4.22e-05  9.90e-06  4.65e-01  
 20  +4.8724e-01  +5.3242e-01  4.52e-02  2.41e-06  1.34e-03  2.63e-05  8.18e-06  3.60e-01  
 21  +4.8385e-01  +5.1707e-01  3.32e-02  1.62e-06  8.98e-04  2.23e-06  5.57e-06  8.41e-01  
 22  +4.8380e-01  +5.1688e-01  3.31e-02  1.61e-06  8.91e-04  2.04e-06  5.53e-06  9.16e-02  
 23  +4.8208e-01  +5.0938e-01  2.73e-02  1.28e-06  7.09e-04  1.44e-06  4.44e-06  3.21e-01  
 24  +4.8158e-01  +5.0724e-01  2.57e-02  1.18e-06  6.55e-04  1.17e-06  4.11e-06  2.23e-01  
 25  +4.7974e-01  +4.9935e-01  1.96e-02  8.69e-07  4.82e-04  6.71e-07  3.05e-06  4.79e-01  
 26  +4.7820e-01  +4.9276e-01  1.46e-02  6.29e-07  3.49e-04  4.08e-07  2.23e-06  4.52e-01  
 27  +4.7687e-01  +4.8704e-01  1.02e-02  4.30e-07  2.39e-04  2.02e-07  1.54e-06  6.32e-01  
 28  +4.7618e-01  +4.8410e-01  7.92e-03  3.32e-07  1.84e-04  1.32e-07  1.19e-06  4.89e-01  
 29  +4.7570e-01  +4.8212e-01  6.42e-03  2.67e-07  1.48e-04  1.03e-07  9.63e-07  2.89e-01  
 30  +4.7520e-01  +4.8004e-01  4.84e-03  2.00e-07  1.11e-04  6.68e-08  7.22e-07  5.74e-01  
 31  +4.7497e-01  +4.7902e-01  4.06e-03  1.68e-07  9.32e-05  4.74e-08  6.08e-07  7.26e-01  
 32  +4.7494e-01  +4.7892e-01  3.98e-03  1.64e-07  9.11e-05  4.62e-08  5.94e-07  1.38e-01  
 33  +4.7441e-01  +4.7679e-01  2.38e-03  9.76e-08  5.41e-05  2.64e-08  3.55e-07  7.87e-01  
 34  +4.7393e-01  +4.7488e-01  9.46e-04  3.86e-08  2.14e-05  1.02e-08  1.41e-07  9.90e-01  
 35  +4.7382e-01  +4.7446e-01  6.36e-04  2.58e-08  1.43e-05  6.88e-09  9.45e-08  3.99e-01  
 36  +4.7382e-01  +4.7445e-01  6.29e-04  2.55e-08  1.42e-05  6.81e-09  9.36e-08  6.30e-02  
 37  +4.7368e-01  +4.7391e-01  2.30e-04  9.34e-09  5.18e-06  2.46e-09  3.43e-08  9.41e-01  
 38  +4.7367e-01  +4.7386e-01  1.95e-04  7.89e-09  4.38e-06  2.08e-09  2.90e-08  1.99e-01  
 39  +4.7366e-01  +4.7381e-01  1.54e-04  6.23e-09  3.46e-06  1.65e-09  2.29e-08  6.25e-01  
 40  +4.7361e-01  +4.7365e-01  3.42e-05  1.38e-09  7.68e-07  3.68e-10  5.09e-09  8.02e-01  
 41  +4.7360e-01  +4.7361e-01  3.43e-06  1.39e-10  7.69e-08  3.70e-11  5.11e-10  9.81e-01  
 42  +4.7360e-01  +4.7360e-01  3.64e-08  1.47e-12  8.17e-10  3.94e-13  5.45e-12  9.89e-01  
 43  +4.7360e-01  +4.7360e-01  3.65e-10  1.47e-14  8.17e-12  3.95e-15  5.46e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7883379s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:02 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:02 PM: Optimal value: 4.736e-01
(CVXPY) Sep 20 08:07:02 PM: Compilation took 2.937e-01 seconds
(CVXPY) Sep 20 08:07:02 PM: Solver (including time spent in interface) took 1.844e+00 seconds
Iteration: 27, Objective: 0.4736
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:02 PM: Your problem has 25279 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:02 PM: Finished problem compilation (took 3.151e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25279
  constraints   = 50279
  nnz(P)        = 0
  nnz(A)        = 521844
  cones (total) = 1
    : Nonnegative = 1,  numel = 50279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.77e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4258e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1351e+02  6.13e+02  1.78e-01  9.39e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6012e+02  1.60e+02  1.50e-01  7.98e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7634e+01  1.71e+01  4.71e-02  2.50e+01  5.21e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2564e+00  7.56e-01  2.26e-03  1.25e+00  2.27e-05  1.93e-01  1.68e-01  
  6  +5.0001e-01  +7.3796e-01  2.38e-01  7.12e-04  3.94e-01  6.29e-06  7.19e-02  6.75e-01  
  7  +5.0000e-01  +6.6719e-01  1.67e-01  5.00e-04  2.77e-01  4.77e-06  4.01e-02  5.75e-01  
  8  +5.0000e-01  +6.6403e-01  1.64e-01  4.90e-04  2.71e-01  5.23e-06  2.52e-02  5.32e-01  
  9  +4.9999e-01  +6.4411e-01  1.44e-01  4.17e-04  2.31e-01  1.02e-05  5.78e-03  9.90e-01  
 10  +4.9935e-01  +6.2261e-01  1.23e-01  4.48e-05  2.49e-02  3.00e-04  1.50e-04  9.80e-01  
 11  +4.9788e-01  +6.1210e-01  1.14e-01  1.43e-05  7.95e-03  8.31e-04  4.65e-05  7.11e-01  
 12  +4.9818e-01  +6.0547e-01  1.07e-01  1.27e-05  7.04e-03  6.08e-04  4.09e-05  3.52e-01  
 13  +4.9781e-01  +5.9909e-01  1.01e-01  9.82e-06  5.46e-03  5.72e-04  3.16e-05  3.82e-01  
 14  +4.9785e-01  +5.9591e-01  9.81e-02  9.53e-06  5.30e-03  4.55e-04  3.06e-05  1.86e-01  
 15  +4.9757e-01  +5.9341e-01  9.58e-02  8.73e-06  4.85e-03  4.35e-04  2.81e-05  1.48e-01  
 16  +4.9733e-01  +5.8418e-01  8.69e-02  7.36e-06  4.09e-03  1.45e-04  2.37e-05  6.79e-01  
 17  +4.9603e-01  +5.7761e-01  8.16e-02  5.92e-06  3.29e-03  1.50e-04  1.92e-05  2.12e-01  
 18  +4.9438e-01  +5.6888e-01  7.45e-02  4.91e-06  2.73e-03  1.20e-04  1.60e-05  2.93e-01  
 19  +4.9269e-01  +5.5960e-01  6.69e-02  4.24e-06  2.36e-03  5.84e-05  1.40e-05  4.48e-01  
 20  +4.9111e-01  +5.5206e-01  6.09e-02  3.67e-06  2.04e-03  4.81e-05  1.22e-05  2.04e-01  
 21  +4.9053e-01  +5.4899e-01  5.85e-02  3.45e-06  1.92e-03  2.85e-05  1.15e-05  3.50e-01  
 22  +4.8749e-01  +5.3500e-01  4.75e-02  2.58e-06  1.43e-03  1.80e-05  8.75e-06  3.86e-01  
 23  +4.8552e-01  +5.2581e-01  4.03e-02  2.03e-06  1.13e-03  4.52e-06  6.97e-06  6.93e-01  
 24  +4.8477e-01  +5.2249e-01  3.77e-02  1.86e-06  1.03e-03  3.12e-06  6.39e-06  3.12e-01  
 25  +4.8295e-01  +5.1425e-01  3.13e-02  1.45e-06  8.04e-04  2.24e-07  5.02e-06  9.35e-01  
 26  +4.8100e-01  +5.0591e-01  2.49e-02  1.12e-06  6.19e-04  1.99e-07  3.91e-06  5.09e-01  
 27  +4.7979e-01  +5.0077e-01  2.10e-02  9.24e-07  5.13e-04  1.72e-07  3.27e-06  2.55e-01  
 28  +4.7969e-01  +5.0028e-01  2.06e-02  9.02e-07  5.01e-04  1.77e-07  3.18e-06  2.17e-01  
 29  +4.7739e-01  +4.9055e-01  1.32e-02  5.63e-07  3.13e-04  1.14e-07  2.02e-06  4.25e-01  
 30  +4.7730e-01  +4.9010e-01  1.28e-02  5.46e-07  3.03e-04  1.15e-07  1.96e-06  1.86e-01  
 31  +4.7493e-01  +4.8021e-01  5.28e-03  2.20e-07  1.22e-04  5.19e-08  8.06e-07  8.37e-01  
 32  +4.7436e-01  +4.7786e-01  3.50e-03  1.45e-07  8.04e-05  3.60e-08  5.37e-07  7.36e-01  
 33  +4.7377e-01  +4.7548e-01  1.71e-03  7.04e-08  3.91e-05  1.79e-08  2.64e-07  9.27e-01  
 34  +4.7353e-01  +4.7453e-01  1.00e-03  4.12e-08  2.29e-05  1.05e-08  1.56e-07  9.90e-01  
 35  +4.7323e-01  +4.7338e-01  1.58e-04  6.47e-09  3.59e-06  1.63e-09  2.47e-08  9.13e-01  
 36  +4.7317e-01  +4.7317e-01  1.75e-06  7.19e-11  3.99e-08  1.81e-11  2.76e-10  9.89e-01  
 37  +4.7317e-01  +4.7317e-01  2.15e-08  8.81e-13  4.89e-10  2.21e-13  3.38e-12  9.88e-01  
 38  +4.7317e-01  +4.7317e-01  1.45e-09  5.94e-14  3.30e-11  1.51e-14  2.29e-13  9.33e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5434722s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:04 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:04 PM: Optimal value: 4.732e-01
(CVXPY) Sep 20 08:07:04 PM: Compilation took 3.151e-01 seconds
(CVXPY) Sep 20 08:07:04 PM: Solver (including time spent in interface) took 1.598e+00 seconds
Iteration: 28, Objective: 0.4732
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:04 PM: Your problem has 25289 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:05 PM: Finished problem compilation (took 3.461e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25289
  constraints   = 50289
  nnz(P)        = 0
  nnz(A)        = 525936
  cones (total) = 1
    : Nonnegative = 1,  numel = 50289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.77e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4258e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1350e+02  6.13e+02  1.78e-01  9.39e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6012e+02  1.60e+02  1.50e-01  7.98e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7633e+01  1.71e+01  4.71e-02  2.50e+01  5.21e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2631e+00  7.63e-01  2.28e-03  1.26e+00  2.27e-05  1.93e-01  1.66e-01  
  6  +5.0001e-01  +7.2913e-01  2.29e-01  6.85e-04  3.79e-01  5.95e-06  6.93e-02  6.90e-01  
  7  +5.0000e-01  +6.7450e-01  1.74e-01  5.22e-04  2.89e-01  4.87e-06  4.17e-02  5.29e-01  
  8  +5.0001e-01  +6.9757e-01  1.98e-01  5.90e-04  3.27e-01  4.57e-06  3.17e-02  5.67e-01  
  9  +5.0000e-01  +6.5490e-01  1.55e-01  4.60e-04  2.55e-01  6.74e-06  1.18e-02  6.66e-01  
 10  +4.9993e-01  +6.2339e-01  1.23e-01  2.52e-04  1.40e-01  3.56e-05  1.26e-03  9.90e-01  
 11  +4.9885e-01  +6.1771e-01  1.19e-01  2.48e-05  1.38e-02  5.16e-04  8.15e-05  9.36e-01  
 12  +4.9842e-01  +6.0091e-01  1.02e-01  1.36e-05  7.55e-03  5.10e-04  4.40e-05  7.18e-01  
 13  +4.9876e-01  +5.9633e-01  9.76e-02  1.26e-05  6.98e-03  2.87e-04  4.03e-05  4.66e-01  
 14  +4.9842e-01  +5.9278e-01  9.44e-02  9.81e-06  5.45e-03  2.71e-04  3.14e-05  4.03e-01  
 15  +4.9831e-01  +5.9067e-01  9.24e-02  8.91e-06  4.95e-03  2.12e-04  2.85e-05  3.24e-01  
 16  +4.9787e-01  +5.8562e-01  8.77e-02  7.65e-06  4.25e-03  9.79e-05  2.45e-05  6.19e-01  
 17  +4.9536e-01  +5.7304e-01  7.77e-02  4.85e-06  2.69e-03  1.06e-04  1.57e-05  4.40e-01  
 18  +4.9395e-01  +5.6603e-01  7.21e-02  4.44e-06  2.47e-03  7.52e-05  1.45e-05  2.40e-01  
 19  +4.9280e-01  +5.6044e-01  6.76e-02  4.12e-06  2.29e-03  5.46e-05  1.36e-05  2.27e-01  
 20  +4.8889e-01  +5.4202e-01  5.31e-02  2.95e-06  1.64e-03  2.56e-05  9.91e-06  5.07e-01  
 21  +4.8822e-01  +5.3909e-01  5.09e-02  2.76e-06  1.53e-03  1.61e-05  9.33e-06  3.32e-01  
 22  +4.8653e-01  +5.3157e-01  4.50e-02  2.35e-06  1.31e-03  1.20e-05  8.02e-06  2.52e-01  
 23  +4.8525e-01  +5.2575e-01  4.05e-02  2.04e-06  1.13e-03  6.13e-06  6.99e-06  4.63e-01  
 24  +4.8123e-01  +5.0820e-01  2.70e-02  1.26e-06  7.02e-04  2.94e-06  4.44e-06  5.16e-01  
 25  +4.8084e-01  +5.0645e-01  2.56e-02  1.18e-06  6.54e-04  2.02e-06  4.16e-06  3.31e-01  
 26  +4.7747e-01  +4.9196e-01  1.45e-02  6.34e-07  3.52e-04  8.48e-07  2.29e-06  5.94e-01  
 27  +4.7747e-01  +4.9194e-01  1.45e-02  6.32e-07  3.51e-04  8.21e-07  2.28e-06  4.21e-02  
 28  +4.7640e-01  +4.8740e-01  1.10e-02  4.71e-07  2.61e-04  5.26e-07  1.71e-06  3.97e-01  
 29  +4.7626e-01  +4.8674e-01  1.05e-02  4.45e-07  2.47e-04  3.97e-07  1.62e-06  3.11e-01  
 30  +4.7522e-01  +4.8244e-01  7.22e-03  3.02e-07  1.68e-04  2.39e-07  1.11e-06  4.36e-01  
 31  +4.7522e-01  +4.8241e-01  7.19e-03  3.01e-07  1.67e-04  2.33e-07  1.11e-06  3.16e-02  
 32  +4.7489e-01  +4.8105e-01  6.16e-03  2.57e-07  1.43e-04  1.78e-07  9.47e-07  2.80e-01  
 33  +4.7452e-01  +4.7944e-01  4.92e-03  2.04e-07  1.13e-04  9.03e-08  7.55e-07  6.69e-01  
 34  +4.7353e-01  +4.7544e-01  1.91e-03  7.88e-08  4.38e-05  2.31e-08  2.95e-07  9.23e-01  
 35  +4.7328e-01  +4.7447e-01  1.18e-03  4.87e-08  2.70e-05  1.39e-08  1.83e-07  5.23e-01  
 36  +4.7327e-01  +4.7440e-01  1.13e-03  4.64e-08  2.58e-05  1.27e-08  1.74e-07  3.71e-01  
 37  +4.7314e-01  +4.7387e-01  7.36e-04  3.02e-08  1.68e-05  8.07e-09  1.14e-07  5.88e-01  
 38  +4.7292e-01  +4.7304e-01  1.17e-04  4.80e-09  2.66e-06  1.26e-09  1.81e-08  9.17e-01  
 39  +4.7289e-01  +4.7289e-01  6.22e-06  2.54e-10  1.41e-07  6.64e-11  9.61e-10  9.51e-01  
 40  +4.7288e-01  +4.7288e-01  6.24e-08  2.55e-12  1.41e-09  6.67e-13  9.65e-12  9.90e-01  
 41  +4.7288e-01  +4.7288e-01  6.18e-09  2.52e-13  1.40e-10  6.63e-14  9.58e-13  9.02e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7826923s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:06 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:06 PM: Optimal value: 4.729e-01
(CVXPY) Sep 20 08:07:06 PM: Compilation took 3.461e-01 seconds
(CVXPY) Sep 20 08:07:06 PM: Solver (including time spent in interface) took 1.844e+00 seconds
Iteration: 29, Objective: 0.4729
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:07 PM: Your problem has 25299 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:07 PM: Finished problem compilation (took 3.110e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25299
  constraints   = 50299
  nnz(P)        = 0
  nnz(A)        = 529016
  cones (total) = 1
    : Nonnegative = 1,  numel = 50299

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.77e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4257e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1349e+02  6.13e+02  1.78e-01  9.39e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6011e+02  1.60e+02  1.50e-01  7.98e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7633e+01  1.71e+01  4.71e-02  2.50e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2493e+00  7.49e-01  2.24e-03  1.24e+00  2.27e-05  1.93e-01  1.70e-01  
  6  +5.0001e-01  +7.5521e-01  2.55e-01  7.63e-04  4.23e-01  7.01e-06  7.68e-02  6.40e-01  
  7  +5.0000e-01  +6.8260e-01  1.83e-01  5.46e-04  3.02e-01  5.24e-06  4.45e-02  5.64e-01  
  8  +5.0000e-01  +6.6993e-01  1.70e-01  5.08e-04  2.81e-01  5.56e-06  2.89e-02  4.58e-01  
  9  +4.9999e-01  +6.4820e-01  1.48e-01  4.39e-04  2.43e-01  9.19e-06  1.04e-02  7.29e-01  
 10  +4.9976e-01  +6.1672e-01  1.17e-01  1.38e-04  7.67e-02  1.14e-04  5.33e-04  9.86e-01  
 11  +4.9845e-01  +6.0989e-01  1.11e-01  2.48e-05  1.38e-02  6.78e-04  8.22e-05  8.52e-01  
 12  +4.9857e-01  +6.0359e-01  1.05e-01  1.96e-05  1.09e-02  5.51e-04  6.40e-05  4.77e-01  
 13  +4.9861e-01  +5.9484e-01  9.62e-02  1.32e-05  7.36e-03  3.71e-04  4.26e-05  7.48e-01  
 14  +4.9846e-01  +5.9242e-01  9.40e-02  1.10e-05  6.14e-03  3.17e-04  3.54e-05  3.98e-01  
 15  +4.9818e-01  +5.9058e-01  9.24e-02  9.61e-06  5.34e-03  3.09e-04  3.08e-05  2.32e-01  
 16  +4.9798e-01  +5.8613e-01  8.82e-02  8.19e-06  4.55e-03  1.00e-04  2.62e-05  7.55e-01  
 17  +4.9592e-01  +5.7605e-01  8.01e-02  5.37e-06  2.98e-03  1.11e-04  1.73e-05  4.19e-01  
 18  +4.9434e-01  +5.6829e-01  7.39e-02  4.67e-06  2.59e-03  9.37e-05  1.52e-05  2.05e-01  
 19  +4.9295e-01  +5.6153e-01  6.86e-02  4.21e-06  2.34e-03  7.06e-05  1.38e-05  2.28e-01  
 20  +4.8971e-01  +5.4592e-01  5.62e-02  3.29e-06  1.83e-03  7.51e-06  1.10e-05  7.43e-01  
 21  +4.8789e-01  +5.3795e-01  5.01e-02  2.76e-06  1.53e-03  4.43e-06  9.30e-06  4.07e-01  
 22  +4.8640e-01  +5.3136e-01  4.50e-02  2.37e-06  1.32e-03  2.64e-06  8.03e-06  4.05e-01  
 23  +4.8253e-01  +5.1436e-01  3.18e-02  1.54e-06  8.54e-04  1.19e-06  5.32e-06  5.71e-01  
 24  +4.8107e-01  +5.0792e-01  2.69e-02  1.25e-06  6.92e-04  7.35e-07  4.34e-06  4.49e-01  
 25  +4.7870e-01  +4.9772e-01  1.90e-02  8.46e-07  4.70e-04  4.25e-07  2.99e-06  4.92e-01  
 26  +4.7843e-01  +4.9647e-01  1.80e-02  7.90e-07  4.39e-04  3.53e-07  2.79e-06  2.84e-01  
 27  +4.7831e-01  +4.9595e-01  1.76e-02  7.69e-07  4.27e-04  3.33e-07  2.72e-06  9.67e-02  
 28  +4.7722e-01  +4.9124e-01  1.40e-02  5.94e-07  3.30e-04  1.88e-07  2.11e-06  7.24e-01  
 29  +4.7634e-01  +4.8756e-01  1.12e-02  4.72e-07  2.62e-04  1.34e-07  1.69e-06  6.14e-01  
 30  +4.7511e-01  +4.8248e-01  7.37e-03  3.07e-07  1.71e-04  8.57e-08  1.11e-06  5.19e-01  
 31  +4.7470e-01  +4.8073e-01  6.03e-03  2.50e-07  1.39e-04  6.83e-08  9.04e-07  5.28e-01  
 32  +4.7442e-01  +4.7960e-01  5.18e-03  2.14e-07  1.19e-04  5.86e-08  7.76e-07  1.91e-01  
 33  +4.7413e-01  +4.7837e-01  4.24e-03  1.75e-07  9.70e-05  4.62e-08  6.36e-07  7.74e-01  
 34  +4.7360e-01  +4.7625e-01  2.65e-03  1.09e-07  6.05e-05  2.89e-08  3.99e-07  4.31e-01  
 35  +4.7319e-01  +4.7462e-01  1.43e-03  5.87e-08  3.26e-05  1.56e-08  2.16e-07  4.95e-01  
 36  +4.7316e-01  +4.7450e-01  1.34e-03  5.49e-08  3.05e-05  1.45e-08  2.02e-07  3.83e-01  
 37  +4.7287e-01  +4.7337e-01  4.98e-04  2.03e-08  1.13e-05  5.37e-09  7.53e-08  6.74e-01  
 38  +4.7282e-01  +4.7315e-01  3.36e-04  1.37e-08  7.62e-06  3.61e-09  5.09e-08  5.30e-01  
 39  +4.7271e-01  +4.7273e-01  2.45e-05  9.98e-10  5.54e-07  2.61e-10  3.71e-09  9.47e-01  
 40  +4.7270e-01  +4.7270e-01  2.70e-07  1.10e-11  6.11e-09  2.89e-12  4.10e-11  9.89e-01  
 41  +4.7270e-01  +4.7270e-01  1.41e-08  5.75e-13  3.19e-10  1.52e-13  2.15e-12  9.48e-01  
 42  +4.7270e-01  +4.7270e-01  1.09e-09  4.47e-14  2.48e-11  1.18e-14  1.67e-13  9.23e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7289795s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:09 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:09 PM: Optimal value: 4.727e-01
(CVXPY) Sep 20 08:07:09 PM: Compilation took 3.110e-01 seconds
(CVXPY) Sep 20 08:07:09 PM: Solver (including time spent in interface) took 1.785e+00 seconds
Iteration: 30, Objective: 0.4727
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:09 PM: Your problem has 25309 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:09 PM: Finished problem compilation (took 3.568e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25309
  constraints   = 50309
  nnz(P)        = 0
  nnz(A)        = 531913
  cones (total) = 1
    : Nonnegative = 1,  numel = 50309

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.77e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4259e+03  5.43e+03  4.37e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1344e+02  6.13e+02  1.78e-01  9.38e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6010e+02  1.60e+02  1.50e-01  7.98e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7637e+01  1.71e+01  4.72e-02  2.50e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2647e+00  7.65e-01  2.29e-03  1.26e+00  2.27e-05  1.93e-01  1.66e-01  
  6  +5.0001e-01  +7.6113e-01  2.61e-01  7.81e-04  4.32e-01  6.97e-06  7.78e-02  6.41e-01  
  7  +5.0000e-01  +6.9485e-01  1.95e-01  5.83e-04  3.23e-01  5.35e-06  4.81e-02  5.20e-01  
  8  +5.0000e-01  +6.7538e-01  1.75e-01  5.24e-04  2.90e-01  5.45e-06  3.11e-02  4.60e-01  
  9  +4.9999e-01  +6.5616e-01  1.56e-01  4.62e-04  2.56e-01  8.06e-06  1.02e-02  8.70e-01  
 10  +4.9982e-01  +6.1704e-01  1.17e-01  1.46e-04  8.09e-02  8.59e-05  5.66e-04  9.90e-01  
 11  +4.9875e-01  +6.1194e-01  1.13e-01  2.53e-05  1.41e-02  5.50e-04  8.33e-05  8.55e-01  
 12  +4.9878e-01  +6.0306e-01  1.04e-01  1.81e-05  1.01e-02  4.43e-04  5.87e-05  5.92e-01  
 13  +4.9877e-01  +5.9644e-01  9.77e-02  1.33e-05  7.42e-03  3.17e-04  4.28e-05  6.36e-01  
 14  +4.9859e-01  +5.9148e-01  9.29e-02  9.71e-06  5.40e-03  1.90e-04  3.10e-05  7.40e-01  
 15  +4.9855e-01  +5.9102e-01  9.25e-02  9.62e-06  5.35e-03  1.70e-04  3.07e-05  1.09e-01  
 16  +4.9757e-01  +5.8581e-01  8.82e-02  7.12e-06  3.96e-03  1.84e-04  2.28e-05  3.52e-01  
 17  +4.9600e-01  +5.7749e-01  8.15e-02  5.65e-06  3.14e-03  1.51e-04  1.82e-05  3.69e-01  
 18  +4.9391e-01  +5.6709e-01  7.32e-02  4.60e-06  2.56e-03  1.25e-04  1.50e-05  2.71e-01  
 19  +4.9255e-01  +5.6055e-01  6.80e-02  4.11e-06  2.28e-03  1.06e-04  1.35e-05  1.72e-01  
 20  +4.9188e-01  +5.5731e-01  6.54e-02  3.94e-06  2.19e-03  7.71e-05  1.30e-05  2.17e-01  
 21  +4.9066e-01  +5.5165e-01  6.10e-02  3.56e-06  1.98e-03  6.24e-05  1.18e-05  1.92e-01  
 22  +4.8940e-01  +5.4578e-01  5.64e-02  3.18e-06  1.77e-03  2.94e-05  1.06e-05  4.63e-01  
 23  +4.8826e-01  +5.4067e-01  5.24e-02  2.87e-06  1.59e-03  2.10e-05  9.60e-06  2.64e-01  
 24  +4.8404e-01  +5.2181e-01  3.78e-02  1.88e-06  1.04e-03  1.20e-05  6.42e-06  4.49e-01  
 25  +4.8210e-01  +5.1342e-01  3.13e-02  1.48e-06  8.20e-04  7.70e-06  5.09e-06  3.75e-01  
 26  +4.8159e-01  +5.1103e-01  2.94e-02  1.33e-06  7.40e-04  2.58e-06  4.59e-06  6.61e-01  
 27  +4.7934e-01  +5.0148e-01  2.21e-02  9.60e-07  5.33e-04  8.45e-07  3.35e-06  7.07e-01  
 28  +4.7725e-01  +4.9264e-01  1.54e-02  6.51e-07  3.61e-04  4.21e-07  2.30e-06  5.72e-01  
 29  +4.7666e-01  +4.9011e-01  1.35e-02  5.65e-07  3.14e-04  3.36e-07  2.00e-06  2.54e-01  
 30  +4.7555e-01  +4.8538e-01  9.83e-03  4.06e-07  2.26e-04  1.69e-07  1.45e-06  6.77e-01  
 31  +4.7389e-01  +4.7863e-01  4.74e-03  1.94e-07  1.07e-04  6.66e-08  7.00e-07  7.59e-01  
 32  +4.7382e-01  +4.7833e-01  4.51e-03  1.84e-07  1.02e-04  6.15e-08  6.66e-07  1.76e-01  
 33  +4.7306e-01  +4.7528e-01  2.22e-03  9.02e-08  5.01e-05  2.59e-08  3.29e-07  8.71e-01  
 34  +4.7261e-01  +4.7355e-01  9.34e-04  3.78e-08  2.10e-05  1.07e-08  1.39e-07  6.76e-01  
 35  +4.7239e-01  +4.7269e-01  2.98e-04  1.21e-08  6.69e-06  3.25e-09  4.44e-08  9.49e-01  
 36  +4.7230e-01  +4.7234e-01  3.96e-05  1.60e-09  8.88e-07  4.31e-10  5.91e-09  8.74e-01  
 37  +4.7228e-01  +4.7228e-01  7.47e-07  3.01e-11  1.67e-08  8.09e-12  1.12e-10  9.90e-01  
 38  +4.7228e-01  +4.7228e-01  7.48e-09  3.02e-13  1.68e-10  8.11e-14  1.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6214724s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:11 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:11 PM: Optimal value: 4.723e-01
(CVXPY) Sep 20 08:07:11 PM: Compilation took 3.568e-01 seconds
(CVXPY) Sep 20 08:07:11 PM: Solver (including time spent in interface) took 1.683e+00 seconds
Iteration: 31, Objective: 0.4723
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:11 PM: Your problem has 25319 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:12 PM: Finished problem compilation (took 3.216e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25319
  constraints   = 50319
  nnz(P)        = 0
  nnz(A)        = 534497
  cones (total) = 1
    : Nonnegative = 1,  numel = 50319

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.77e+02  1.00e+00  1.00e+00   ------   
  1  +5.8082e-01  +5.4260e+03  5.43e+03  4.38e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1345e+02  6.13e+02  1.78e-01  9.38e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6011e+02  1.60e+02  1.50e-01  7.98e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7640e+01  1.71e+01  4.72e-02  2.50e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2839e+00  7.84e-01  2.35e-03  1.30e+00  2.27e-05  1.93e-01  1.62e-01  
  6  +5.0001e-01  +7.6182e-01  2.62e-01  7.83e-04  4.34e-01  6.76e-06  7.74e-02  6.46e-01  
  7  +5.0000e-01  +6.9761e-01  1.98e-01  5.91e-04  3.27e-01  5.20e-06  4.83e-02  5.26e-01  
  8  +5.0000e-01  +6.7261e-01  1.73e-01  5.16e-04  2.86e-01  5.32e-06  2.98e-02  4.77e-01  
  9  +4.9999e-01  +6.4675e-01  1.47e-01  4.35e-04  2.41e-01  8.91e-06  1.05e-02  7.12e-01  
 10  +4.9989e-01  +6.2425e-01  1.24e-01  2.35e-04  1.30e-01  5.36e-05  1.10e-03  9.90e-01  
 11  +4.9888e-01  +6.1942e-01  1.21e-01  3.35e-05  1.86e-02  5.02e-04  1.11e-04  8.99e-01  
 12  +4.9873e-01  +6.0640e-01  1.08e-01  2.06e-05  1.15e-02  4.79e-04  6.72e-05  6.50e-01  
 13  +4.9860e-01  +6.0256e-01  1.04e-01  1.65e-05  9.17e-03  4.62e-04  5.34e-05  3.65e-01  
 14  +4.9834e-01  +5.9295e-01  9.46e-02  1.03e-05  5.72e-03  3.29e-04  3.30e-05  7.94e-01  
 15  +4.9833e-01  +5.9237e-01  9.40e-02  1.02e-05  5.67e-03  2.94e-04  3.27e-05  1.04e-01  
 16  +4.9759e-01  +5.8827e-01  9.07e-02  8.10e-06  4.50e-03  3.13e-04  2.60e-05  2.75e-01  
 17  +4.9690e-01  +5.8194e-01  8.50e-02  6.88e-06  3.83e-03  1.02e-04  2.21e-05  7.08e-01  
 18  +4.9442e-01  +5.6942e-01  7.50e-02  4.93e-06  2.74e-03  8.01e-05  1.60e-05  4.58e-01  
 19  +4.9283e-01  +5.6181e-01  6.90e-02  4.28e-06  2.38e-03  6.70e-05  1.40e-05  2.05e-01  
 20  +4.9261e-01  +5.6080e-01  6.82e-02  4.22e-06  2.34e-03  6.16e-05  1.38e-05  6.63e-02  
 21  +4.9101e-01  +5.5330e-01  6.23e-02  3.70e-06  2.06e-03  4.31e-05  1.22e-05  2.85e-01  
 22  +4.8868e-01  +5.4265e-01  5.40e-02  3.01e-06  1.67e-03  2.58e-05  1.01e-05  3.90e-01  
 23  +4.8689e-01  +5.3470e-01  4.78e-02  2.54e-06  1.41e-03  1.71e-05  8.58e-06  3.29e-01  
 24  +4.8406e-01  +5.2220e-01  3.81e-02  1.90e-06  1.06e-03  1.12e-05  6.50e-06  3.57e-01  
 25  +4.8216e-01  +5.1393e-01  3.18e-02  1.50e-06  8.35e-04  7.19e-06  5.18e-06  3.77e-01  
 26  +4.8180e-01  +5.1220e-01  3.04e-02  1.40e-06  7.80e-04  3.84e-06  4.84e-06  4.63e-01  
 27  +4.7732e-01  +4.9318e-01  1.59e-02  6.87e-07  3.81e-04  1.47e-06  2.43e-06  6.22e-01  
 28  +4.7724e-01  +4.9282e-01  1.56e-02  6.71e-07  3.73e-04  1.33e-06  2.37e-06  1.08e-01  
 29  +4.7650e-01  +4.8968e-01  1.32e-02  5.60e-07  3.11e-04  1.01e-06  1.99e-06  2.61e-01  
 30  +4.7594e-01  +4.8730e-01  1.14e-02  4.77e-07  2.65e-04  6.63e-07  1.70e-06  3.83e-01  
 31  +4.7529e-01  +4.8444e-01  9.15e-03  3.78e-07  2.10e-04  2.71e-07  1.35e-06  6.91e-01  
 32  +4.7373e-01  +4.7819e-01  4.46e-03  1.82e-07  1.01e-04  1.02e-07  6.59e-07  6.85e-01  
 33  +4.7356e-01  +4.7751e-01  3.95e-03  1.61e-07  8.93e-05  8.18e-08  5.84e-07  2.80e-01  
 34  +4.7280e-01  +4.7449e-01  1.69e-03  6.88e-08  3.82e-05  2.90e-08  2.52e-07  7.23e-01  
 35  +4.7277e-01  +4.7438e-01  1.61e-03  6.54e-08  3.63e-05  2.54e-08  2.40e-07  2.53e-01  
 36  +4.7242e-01  +4.7300e-01  5.83e-04  2.36e-08  1.31e-05  8.62e-09  8.72e-08  7.05e-01  
 37  +4.7238e-01  +4.7285e-01  4.74e-04  1.92e-08  1.07e-05  6.82e-09  7.10e-08  2.67e-01  
 38  +4.7235e-01  +4.7276e-01  4.02e-04  1.63e-08  9.04e-06  5.08e-09  6.02e-08  5.60e-01  
 39  +4.7223e-01  +4.7228e-01  5.44e-05  2.20e-09  1.22e-06  6.00e-10  8.17e-09  9.76e-01  
 40  +4.7221e-01  +4.7221e-01  7.08e-07  2.87e-11  1.59e-08  7.79e-12  1.06e-10  9.88e-01  
 41  +4.7221e-01  +4.7221e-01  7.10e-09  2.88e-13  1.60e-10  7.82e-14  1.07e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.777632s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:13 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:13 PM: Optimal value: 4.722e-01
(CVXPY) Sep 20 08:07:13 PM: Compilation took 3.216e-01 seconds
(CVXPY) Sep 20 08:07:13 PM: Solver (including time spent in interface) took 1.832e+00 seconds
Iteration: 32, Objective: 0.4722
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:14 PM: Your problem has 25329 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:14 PM: Finished problem compilation (took 3.423e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25329
  constraints   = 50329
  nnz(P)        = 0
  nnz(A)        = 536501
  cones (total) = 1
    : Nonnegative = 1,  numel = 50329

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.77e+02  1.00e+00  1.00e+00   ------   
  1  +5.8081e-01  +5.4261e+03  5.43e+03  4.38e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1348e+02  6.13e+02  1.78e-01  9.38e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0904e-01  +1.6011e+02  1.60e+02  1.50e-01  7.97e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7641e+01  1.71e+01  4.72e-02  2.50e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2923e+00  7.92e-01  2.37e-03  1.31e+00  2.27e-05  1.93e-01  1.61e-01  
  6  +5.0001e-01  +7.6189e-01  2.62e-01  7.84e-04  4.34e-01  6.66e-06  7.71e-02  6.49e-01  
  7  +5.0000e-01  +6.9709e-01  1.97e-01  5.90e-04  3.26e-01  5.05e-06  4.72e-02  5.58e-01  
  8  +5.0000e-01  +6.7177e-01  1.72e-01  5.13e-04  2.84e-01  5.20e-06  2.66e-02  5.71e-01  
  9  +4.9999e-01  +6.4759e-01  1.48e-01  4.34e-04  2.40e-01  9.87e-06  7.93e-03  7.98e-01  
 10  +4.9975e-01  +6.1801e-01  1.18e-01  1.17e-04  6.48e-02  1.20e-04  4.30e-04  9.90e-01  
 11  +4.9881e-01  +6.1276e-01  1.14e-01  2.82e-05  1.57e-02  5.19e-04  9.30e-05  7.93e-01  
 12  +4.9855e-01  +6.0674e-01  1.08e-01  1.99e-05  1.10e-02  5.57e-04  6.48e-05  4.59e-01  
 13  +4.9835e-01  +6.0259e-01  1.04e-01  1.55e-05  8.59e-03  5.55e-04  5.01e-05  3.77e-01  
 14  +4.9814e-01  +5.9591e-01  9.78e-02  1.12e-05  6.25e-03  4.46e-04  3.62e-05  5.77e-01  
 15  +4.9820e-01  +5.9495e-01  9.67e-02  1.11e-05  6.16e-03  3.79e-04  3.56e-05  1.49e-01  
 16  +4.9606e-01  +5.8264e-01  8.66e-02  5.97e-06  3.32e-03  4.71e-04  1.92e-05  5.94e-01  
 17  +4.9345e-01  +5.6824e-01  7.48e-02  4.61e-06  2.56e-03  3.46e-04  1.50e-05  3.57e-01  
 18  +4.9243e-01  +5.6289e-01  7.05e-02  4.24e-06  2.36e-03  2.88e-04  1.39e-05  1.63e-01  
 19  +4.9018e-01  +5.5077e-01  6.06e-02  3.52e-06  1.96e-03  9.53e-05  1.17e-05  5.62e-01  
 20  +4.8897e-01  +5.4505e-01  5.61e-02  3.15e-06  1.75e-03  6.59e-05  1.05e-05  2.90e-01  
 21  +4.8724e-01  +5.3707e-01  4.98e-02  2.68e-06  1.49e-03  4.34e-05  9.01e-06  3.26e-01  
 22  +4.8349e-01  +5.2031e-01  3.68e-02  1.82e-06  1.01e-03  2.47e-05  6.22e-06  4.43e-01  
 23  +4.8224e-01  +5.1480e-01  3.26e-02  1.55e-06  8.59e-04  1.84e-05  5.33e-06  2.74e-01  
 24  +4.8083e-01  +5.0860e-01  2.78e-02  1.26e-06  6.98e-04  9.00e-06  4.35e-06  5.13e-01  
 25  +4.8030e-01  +5.0608e-01  2.58e-02  1.14e-06  6.35e-04  4.79e-06  3.96e-06  4.71e-01  
 26  +4.7738e-01  +4.9388e-01  1.65e-02  7.03e-07  3.91e-04  2.28e-06  2.48e-06  5.30e-01  
 27  +4.7678e-01  +4.9129e-01  1.45e-02  6.10e-07  3.39e-04  1.58e-06  2.16e-06  3.29e-01  
 28  +4.7578e-01  +4.8717e-01  1.14e-02  4.73e-07  2.63e-04  1.11e-06  1.69e-06  3.15e-01  
 29  +4.7476e-01  +4.8270e-01  7.94e-03  3.22e-07  1.79e-04  1.04e-07  1.16e-06  9.90e-01  
 30  +4.7386e-01  +4.7911e-01  5.26e-03  2.12e-07  1.18e-04  6.17e-08  7.68e-07  7.76e-01  
 31  +4.7293e-01  +4.7552e-01  2.59e-03  1.04e-07  5.75e-05  3.03e-08  3.79e-07  5.41e-01  
 32  +4.7288e-01  +4.7530e-01  2.42e-03  9.67e-08  5.37e-05  2.77e-08  3.53e-07  3.77e-01  
 33  +4.7274e-01  +4.7473e-01  1.99e-03  7.94e-08  4.41e-05  2.22e-08  2.91e-07  8.07e-01  
 34  +4.7256e-01  +4.7405e-01  1.49e-03  5.92e-08  3.29e-05  1.66e-08  2.17e-07  3.32e-01  
 35  +4.7234e-01  +4.7323e-01  8.91e-04  3.52e-08  1.96e-05  9.88e-09  1.30e-07  5.38e-01  
 36  +4.7210e-01  +4.7233e-01  2.28e-04  8.92e-09  4.95e-06  2.53e-09  3.32e-08  7.91e-01  
 37  +4.7202e-01  +4.7204e-01  2.04e-05  7.87e-10  4.37e-07  2.27e-10  2.97e-09  9.53e-01  
 38  +4.7201e-01  +4.7201e-01  2.11e-07  8.11e-12  4.50e-09  2.34e-12  3.06e-11  9.90e-01  
 39  +4.7201e-01  +4.7201e-01  2.11e-09  8.10e-14  4.50e-11  2.34e-14  3.06e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7075864s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:16 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:16 PM: Optimal value: 4.720e-01
(CVXPY) Sep 20 08:07:16 PM: Compilation took 3.423e-01 seconds
(CVXPY) Sep 20 08:07:16 PM: Solver (including time spent in interface) took 1.767e+00 seconds
Iteration: 33, Objective: 0.4720
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:16 PM: Your problem has 25339 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:16 PM: Finished problem compilation (took 3.379e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25339
  constraints   = 50339
  nnz(P)        = 0
  nnz(A)        = 539927
  cones (total) = 1
    : Nonnegative = 1,  numel = 50339

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.77e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4258e+03  5.43e+03  4.38e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1349e+02  6.13e+02  1.78e-01  9.38e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6011e+02  1.60e+02  1.50e-01  7.97e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7637e+01  1.71e+01  4.72e-02  2.50e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2829e+00  7.83e-01  2.34e-03  1.29e+00  2.27e-05  1.93e-01  1.63e-01  
  6  +5.0001e-01  +7.6532e-01  2.65e-01  7.94e-04  4.39e-01  6.90e-06  7.84e-02  6.37e-01  
  7  +5.0000e-01  +6.9423e-01  1.94e-01  5.81e-04  3.22e-01  5.16e-06  4.71e-02  5.54e-01  
  8  +5.0000e-01  +6.7209e-01  1.72e-01  5.15e-04  2.85e-01  5.34e-06  2.72e-02  5.59e-01  
  9  +4.9999e-01  +6.5293e-01  1.53e-01  4.52e-04  2.50e-01  8.97e-06  9.63e-03  7.48e-01  
 10  +4.9975e-01  +6.1688e-01  1.17e-01  1.23e-04  6.82e-02  1.17e-04  4.59e-04  9.90e-01  
 11  +4.9882e-01  +6.1183e-01  1.13e-01  2.92e-05  1.63e-02  5.18e-04  9.68e-05  7.97e-01  
 12  +4.9857e-01  +6.0623e-01  1.08e-01  2.07e-05  1.15e-02  5.57e-04  6.77e-05  4.55e-01  
 13  +4.9841e-01  +6.0175e-01  1.03e-01  1.59e-05  8.82e-03  5.40e-04  5.15e-05  4.19e-01  
 14  +4.9826e-01  +5.9495e-01  9.67e-02  1.13e-05  6.30e-03  4.05e-04  3.65e-05  6.37e-01  
 15  +4.9830e-01  +5.9418e-01  9.59e-02  1.12e-05  6.21e-03  3.46e-04  3.59e-05  1.51e-01  
 16  +4.9626e-01  +5.8276e-01  8.65e-02  6.04e-06  3.36e-03  4.38e-04  1.94e-05  5.89e-01  
 17  +4.9355e-01  +5.6797e-01  7.44e-02  4.59e-06  2.55e-03  3.14e-04  1.50e-05  3.87e-01  
 18  +4.9252e-01  +5.6268e-01  7.02e-02  4.22e-06  2.35e-03  2.63e-04  1.38e-05  1.59e-01  
 19  +4.9030e-01  +5.5098e-01  6.07e-02  3.54e-06  1.97e-03  7.63e-05  1.18e-05  5.89e-01  
 20  +4.8885e-01  +5.4426e-01  5.54e-02  3.10e-06  1.72e-03  5.20e-05  1.04e-05  3.04e-01  
 21  +4.8751e-01  +5.3813e-01  5.06e-02  2.74e-06  1.52e-03  3.70e-05  9.20e-06  2.78e-01  
 22  +4.8355e-01  +5.2045e-01  3.69e-02  1.82e-06  1.01e-03  2.03e-05  6.24e-06  4.63e-01  
 23  +4.8192e-01  +5.1336e-01  3.14e-02  1.48e-06  8.22e-04  1.41e-05  5.10e-06  3.28e-01  
 24  +4.8058e-01  +5.0762e-01  2.70e-02  1.22e-06  6.76e-04  6.62e-06  4.22e-06  5.26e-01  
 25  +4.7907e-01  +5.0103e-01  2.20e-02  9.50e-07  5.28e-04  2.90e-06  3.32e-06  5.78e-01  
 26  +4.7750e-01  +4.9454e-01  1.70e-02  7.21e-07  4.01e-04  2.01e-06  2.54e-06  3.17e-01  
 27  +4.7689e-01  +4.9197e-01  1.51e-02  6.30e-07  3.50e-04  1.48e-06  2.23e-06  2.85e-01  
 28  +4.7581e-01  +4.8751e-01  1.17e-02  4.82e-07  2.68e-04  9.50e-07  1.72e-06  3.80e-01  
 29  +4.7433e-01  +4.8130e-01  6.98e-03  2.80e-07  1.56e-04  8.60e-08  1.01e-06  9.90e-01  
 30  +4.7272e-01  +4.7503e-01  2.32e-03  9.19e-08  5.11e-05  2.57e-08  3.36e-07  9.90e-01  
 31  +4.7211e-01  +4.7274e-01  6.30e-04  2.49e-08  1.38e-05  6.97e-09  9.19e-08  7.93e-01  
 32  +4.7192e-01  +4.7200e-01  8.57e-05  3.38e-09  1.88e-06  9.45e-10  1.25e-08  8.97e-01  
 33  +4.7189e-01  +4.7189e-01  4.92e-06  1.94e-10  1.08e-07  5.40e-11  7.20e-10  9.87e-01  
 34  +4.7189e-01  +4.7189e-01  5.01e-08  1.98e-12  1.10e-09  5.50e-13  7.33e-12  9.90e-01  
 35  +4.7189e-01  +4.7189e-01  5.85e-10  2.31e-14  1.28e-11  6.66e-15  8.87e-14  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4799513s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:18 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:18 PM: Optimal value: 4.719e-01
(CVXPY) Sep 20 08:07:18 PM: Compilation took 3.379e-01 seconds
(CVXPY) Sep 20 08:07:18 PM: Solver (including time spent in interface) took 1.537e+00 seconds
Iteration: 34, Objective: 0.4719
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:18 PM: Your problem has 25349 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:18 PM: Finished problem compilation (took 3.473e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25349
  constraints   = 50349
  nnz(P)        = 0
  nnz(A)        = 543217
  cones (total) = 1
    : Nonnegative = 1,  numel = 50349

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.77e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4256e+03  5.43e+03  4.38e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1352e+02  6.13e+02  1.78e-01  9.37e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6011e+02  1.60e+02  1.50e-01  7.97e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7633e+01  1.71e+01  4.72e-02  2.50e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2677e+00  7.68e-01  2.30e-03  1.27e+00  2.27e-05  1.93e-01  1.66e-01  
  6  +5.0001e-01  +7.5876e-01  2.59e-01  7.74e-04  4.29e-01  6.88e-06  7.69e-02  6.46e-01  
  7  +5.0000e-01  +6.9242e-01  1.92e-01  5.76e-04  3.19e-01  5.24e-06  4.64e-02  5.52e-01  
  8  +5.0000e-01  +6.7638e-01  1.76e-01  5.27e-04  2.92e-01  5.41e-06  2.92e-02  4.98e-01  
  9  +4.9999e-01  +6.5451e-01  1.55e-01  4.59e-04  2.54e-01  8.45e-06  1.17e-02  6.66e-01  
 10  +4.9988e-01  +6.2391e-01  1.24e-01  2.24e-04  1.24e-01  5.78e-05  1.02e-03  9.90e-01  
 11  +4.9887e-01  +6.1896e-01  1.20e-01  3.32e-05  1.85e-02  5.05e-04  1.10e-04  8.93e-01  
 12  +4.9866e-01  +6.0965e-01  1.11e-01  2.20e-05  1.22e-02  5.25e-04  7.19e-05  5.35e-01  
 13  +4.9843e-01  +6.0557e-01  1.07e-01  1.70e-05  9.47e-03  5.48e-04  5.53e-05  3.55e-01  
 14  +4.9846e-01  +6.0026e-01  1.02e-01  1.39e-05  7.71e-03  4.34e-04  4.47e-05  4.53e-01  
 15  +4.9817e-01  +5.9783e-01  9.97e-02  1.17e-05  6.49e-03  4.46e-04  3.76e-05  2.41e-01  
 16  +4.9825e-01  +5.9069e-01  9.24e-02  9.42e-06  5.24e-03  1.57e-04  3.01e-05  7.73e-01  
 17  +4.9511e-01  +5.7454e-01  7.94e-02  4.57e-06  2.54e-03  1.93e-04  1.47e-05  6.69e-01  
 18  +4.9324e-01  +5.6528e-01  7.20e-02  4.06e-06  2.26e-03  1.55e-04  1.32e-05  1.75e-01  
 19  +4.9244e-01  +5.6145e-01  6.90e-02  3.89e-06  2.16e-03  1.25e-04  1.27e-05  1.49e-01  
 20  +4.9072e-01  +5.5321e-01  6.25e-02  3.52e-06  1.95e-03  6.23e-05  1.16e-05  3.93e-01  
 21  +4.9062e-01  +5.5280e-01  6.22e-02  3.50e-06  1.95e-03  5.87e-05  1.16e-05  4.48e-02  
 22  +4.8854e-01  +5.4344e-01  5.49e-02  2.95e-06  1.64e-03  4.73e-05  9.84e-06  2.10e-01  
 23  +4.8692e-01  +5.3623e-01  4.93e-02  2.56e-06  1.42e-03  3.04e-05  8.62e-06  3.28e-01  
 24  +4.8418e-01  +5.2416e-01  4.00e-02  1.95e-06  1.08e-03  1.08e-05  6.66e-06  5.96e-01  
 25  +4.8207e-01  +5.1509e-01  3.30e-02  1.55e-06  8.59e-04  7.86e-06  5.33e-06  2.83e-01  
 26  +4.8167e-01  +5.1336e-01  3.17e-02  1.46e-06  8.12e-04  6.46e-06  5.05e-06  1.85e-01  
 27  +4.8027e-01  +5.0741e-01  2.71e-02  1.22e-06  6.75e-04  4.62e-06  4.23e-06  2.97e-01  
 28  +4.7979e-01  +5.0523e-01  2.54e-02  1.12e-06  6.20e-04  3.07e-06  3.88e-06  3.56e-01  
 29  +4.7785e-01  +4.9697e-01  1.91e-02  8.07e-07  4.48e-04  9.74e-07  2.83e-06  7.14e-01  
 30  +4.7624e-01  +4.9031e-01  1.41e-02  5.83e-07  3.24e-04  4.92e-07  2.07e-06  5.53e-01  
 31  +4.7536e-01  +4.8678e-01  1.14e-02  4.67e-07  2.59e-04  3.77e-07  1.67e-06  2.60e-01  
 32  +4.7453e-01  +4.8333e-01  8.80e-03  3.54e-07  1.97e-04  1.94e-07  1.27e-06  6.23e-01  
 33  +4.7351e-01  +4.7931e-01  5.80e-03  2.30e-07  1.28e-04  1.15e-07  8.32e-07  4.91e-01  
 34  +4.7282e-01  +4.7664e-01  3.82e-03  1.50e-07  8.31e-05  7.06e-08  5.47e-07  4.40e-01  
 35  +4.7211e-01  +4.7385e-01  1.75e-03  6.80e-08  3.77e-05  2.21e-08  2.50e-07  9.07e-01  
 36  +4.7158e-01  +4.7190e-01  3.22e-04  1.24e-08  6.88e-06  3.91e-09  4.61e-08  8.80e-01  
 37  +4.7146e-01  +4.7148e-01  1.88e-05  7.23e-10  4.01e-07  2.28e-10  2.70e-09  9.42e-01  
 38  +4.7146e-01  +4.7146e-01  1.92e-07  7.38e-12  4.10e-09  2.33e-12  2.75e-11  9.90e-01  
 39  +4.7146e-01  +4.7146e-01  1.93e-09  7.40e-14  4.11e-11  2.63e-14  3.09e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6086456s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:20 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:20 PM: Optimal value: 4.715e-01
(CVXPY) Sep 20 08:07:20 PM: Compilation took 3.473e-01 seconds
(CVXPY) Sep 20 08:07:20 PM: Solver (including time spent in interface) took 1.667e+00 seconds
Iteration: 35, Objective: 0.4715
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:20 PM: Your problem has 25350 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:21 PM: Finished problem compilation (took 3.087e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25350
  constraints   = 50350
  nnz(P)        = 0
  nnz(A)        = 544019
  cones (total) = 1
    : Nonnegative = 1,  numel = 50350

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.77e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4257e+03  5.43e+03  4.38e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1352e+02  6.13e+02  1.78e-01  9.37e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6011e+02  1.60e+02  1.50e-01  7.97e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7634e+01  1.71e+01  4.72e-02  2.50e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2585e+00  7.59e-01  2.27e-03  1.25e+00  2.27e-05  1.93e-01  1.68e-01  
  6  +5.0001e-01  +7.5900e-01  2.59e-01  7.75e-04  4.29e-01  6.97e-06  7.72e-02  6.48e-01  
  7  +5.0000e-01  +6.9331e-01  1.93e-01  5.78e-04  3.20e-01  5.33e-06  4.69e-02  5.43e-01  
  8  +5.0000e-01  +6.7699e-01  1.77e-01  5.29e-04  2.93e-01  5.49e-06  2.99e-02  4.88e-01  
  9  +4.9999e-01  +6.5577e-01  1.56e-01  4.63e-04  2.56e-01  8.29e-06  1.21e-02  6.75e-01  
 10  +4.9989e-01  +6.2380e-01  1.24e-01  2.27e-04  1.26e-01  5.63e-05  1.05e-03  9.90e-01  
 11  +4.9888e-01  +6.1889e-01  1.20e-01  3.34e-05  1.86e-02  5.02e-04  1.11e-04  8.95e-01  
 12  +4.9866e-01  +6.0974e-01  1.11e-01  2.22e-05  1.23e-02  5.25e-04  7.25e-05  5.30e-01  
 13  +4.9845e-01  +6.0554e-01  1.07e-01  1.72e-05  9.54e-03  5.43e-04  5.57e-05  3.62e-01  
 14  +4.9847e-01  +6.0002e-01  1.02e-01  1.38e-05  7.69e-03  4.25e-04  4.45e-05  4.72e-01  
 15  +4.9819e-01  +5.9764e-01  9.95e-02  1.17e-05  6.49e-03  4.37e-04  3.75e-05  2.39e-01  
 16  +4.9823e-01  +5.9050e-01  9.23e-02  9.32e-06  5.18e-03  1.57e-04  2.98e-05  7.78e-01  
 17  +4.9500e-01  +5.7379e-01  7.88e-02  4.48e-06  2.49e-03  1.85e-04  1.44e-05  6.96e-01  
 18  +4.9323e-01  +5.6512e-01  7.19e-02  4.03e-06  2.24e-03  1.49e-04  1.31e-05  1.65e-01  
 19  +4.9239e-01  +5.6111e-01  6.87e-02  3.85e-06  2.14e-03  1.19e-04  1.26e-05  1.52e-01  
 20  +4.9078e-01  +5.5347e-01  6.27e-02  3.52e-06  1.96e-03  5.98e-05  1.16e-05  3.87e-01  
 21  +4.9067e-01  +5.5299e-01  6.23e-02  3.51e-06  1.95e-03  5.59e-05  1.16e-05  5.02e-02  
 22  +4.8857e-01  +5.4353e-01  5.50e-02  2.95e-06  1.64e-03  4.52e-05  9.83e-06  2.07e-01  
 23  +4.8698e-01  +5.3649e-01  4.95e-02  2.57e-06  1.43e-03  2.93e-05  8.65e-06  3.23e-01  
 24  +4.8425e-01  +5.2447e-01  4.02e-02  1.96e-06  1.09e-03  1.01e-05  6.70e-06  6.03e-01  
 25  +4.8218e-01  +5.1556e-01  3.34e-02  1.57e-06  8.70e-04  7.46e-06  5.39e-06  2.75e-01  
 26  +4.8178e-01  +5.1384e-01  3.21e-02  1.48e-06  8.23e-04  6.08e-06  5.11e-06  1.91e-01  
 27  +4.8030e-01  +5.0754e-01  2.72e-02  1.22e-06  6.78e-04  4.29e-06  4.24e-06  3.08e-01  
 28  +4.7980e-01  +5.0525e-01  2.55e-02  1.11e-06  6.19e-04  2.70e-06  3.87e-06  3.93e-01  
 29  +4.7743e-01  +4.9530e-01  1.79e-02  7.52e-07  4.17e-04  9.53e-07  2.65e-06  6.77e-01  
 30  +4.7630e-01  +4.9052e-01  1.42e-02  5.86e-07  3.26e-04  5.05e-07  2.08e-06  5.44e-01  
 31  +4.7534e-01  +4.8664e-01  1.13e-02  4.61e-07  2.56e-04  3.68e-07  1.64e-06  3.06e-01  
 32  +4.7446e-01  +4.8305e-01  8.58e-03  3.44e-07  1.91e-04  1.84e-07  1.23e-06  6.42e-01  
 33  +4.7334e-01  +4.7860e-01  5.25e-03  2.07e-07  1.15e-04  6.67e-08  7.51e-07  9.13e-01  
 34  +4.7263e-01  +4.7586e-01  3.23e-03  1.27e-07  7.04e-05  3.93e-08  4.64e-07  6.04e-01  
 35  +4.7189e-01  +4.7305e-01  1.17e-03  4.54e-08  2.52e-05  1.35e-08  1.68e-07  8.28e-01  
 36  +4.7165e-01  +4.7218e-01  5.25e-04  2.03e-08  1.13e-05  6.01e-09  7.53e-08  7.62e-01  
 37  +4.7148e-01  +4.7153e-01  5.42e-05  2.08e-09  1.16e-06  6.12e-10  7.77e-09  9.61e-01  
 38  +4.7146e-01  +4.7146e-01  8.46e-07  3.25e-11  1.81e-08  9.56e-12  1.21e-10  9.84e-01  
 39  +4.7146e-01  +4.7146e-01  8.46e-09  3.25e-13  1.81e-10  9.56e-14  1.21e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5396531s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:22 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:22 PM: Optimal value: 4.715e-01
(CVXPY) Sep 20 08:07:22 PM: Compilation took 3.087e-01 seconds
(CVXPY) Sep 20 08:07:22 PM: Solver (including time spent in interface) took 1.589e+00 seconds
Iteration: 36, Objective: 0.4715
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:22 PM: Your problem has 25358 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:23 PM: Finished problem compilation (took 2.910e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25358
  constraints   = 50358
  nnz(P)        = 0
  nnz(A)        = 545784
  cones (total) = 1
    : Nonnegative = 1,  numel = 50358

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.77e+02  1.00e+00  1.00e+00   ------   
  1  +5.8082e-01  +5.4261e+03  5.43e+03  4.38e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3192e-01  +6.1343e+02  6.13e+02  1.78e-01  9.37e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0904e-01  +1.6009e+02  1.60e+02  1.50e-01  7.97e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7642e+01  1.71e+01  4.72e-02  2.50e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2548e+00  7.55e-01  2.26e-03  1.25e+00  2.27e-05  1.93e-01  1.69e-01  
  6  +5.0001e-01  +7.4607e-01  2.46e-01  7.36e-04  4.08e-01  6.62e-06  7.38e-02  6.65e-01  
  7  +5.0000e-01  +6.8975e-01  1.90e-01  5.68e-04  3.14e-01  5.18e-06  4.40e-02  5.88e-01  
  8  +5.0000e-01  +6.7719e-01  1.77e-01  5.30e-04  2.93e-01  5.46e-06  2.54e-02  5.99e-01  
  9  +4.9999e-01  +6.5024e-01  1.50e-01  4.40e-04  2.44e-01  1.08e-05  7.36e-03  7.88e-01  
 10  +4.9949e-01  +6.1654e-01  1.17e-01  6.58e-05  3.66e-02  2.36e-04  2.26e-04  9.90e-01  
 11  +4.9824e-01  +6.0769e-01  1.09e-01  1.92e-05  1.07e-02  7.29e-04  6.30e-05  7.61e-01  
 12  +4.9793e-01  +6.0377e-01  1.06e-01  1.49e-05  8.28e-03  7.62e-04  4.85e-05  3.51e-01  
 13  +4.9822e-01  +5.9919e-01  1.01e-01  1.30e-05  7.23e-03  5.23e-04  4.20e-05  4.43e-01  
 14  +4.9819e-01  +5.9876e-01  1.01e-01  1.27e-05  7.04e-03  5.16e-04  4.08e-05  5.46e-02  
 15  +4.9804e-01  +5.9421e-01  9.62e-02  1.01e-05  5.62e-03  3.79e-04  3.25e-05  5.21e-01  
 16  +4.9541e-01  +5.7940e-01  8.40e-02  5.32e-06  2.96e-03  4.36e-04  1.72e-05  6.36e-01  
 17  +4.9289e-01  +5.6619e-01  7.33e-02  4.32e-06  2.40e-03  3.40e-04  1.41e-05  2.65e-01  
 18  +4.9197e-01  +5.6144e-01  6.95e-02  4.03e-06  2.24e-03  2.74e-04  1.32e-05  1.70e-01  
 19  +4.9054e-01  +5.5390e-01  6.34e-02  3.62e-06  2.01e-03  1.54e-04  1.20e-05  3.61e-01  
 20  +4.9044e-01  +5.5335e-01  6.29e-02  3.60e-06  2.00e-03  1.42e-04  1.19e-05  6.28e-02  
 21  +4.8820e-01  +5.4297e-01  5.48e-02  2.97e-06  1.65e-03  1.08e-04  9.96e-06  2.49e-01  
 22  +4.8759e-01  +5.3999e-01  5.24e-02  2.79e-06  1.55e-03  7.37e-05  9.38e-06  2.84e-01  
 23  +4.8521e-01  +5.2929e-01  4.41e-02  2.23e-06  1.24e-03  4.77e-05  7.60e-06  3.44e-01  
 24  +4.8201e-01  +5.1525e-01  3.32e-02  1.58e-06  8.76e-04  3.01e-05  5.46e-06  3.80e-01  
 25  +4.8167e-01  +5.1369e-01  3.20e-02  1.49e-06  8.29e-04  2.37e-05  5.16e-06  2.20e-01  
 26  +4.8044e-01  +5.0837e-01  2.79e-02  1.26e-06  7.00e-04  1.65e-05  4.39e-06  3.12e-01  
 27  +4.7994e-01  +5.0603e-01  2.61e-02  1.15e-06  6.38e-04  9.45e-06  4.00e-06  4.34e-01  
 28  +4.7907e-01  +5.0217e-01  2.31e-02  9.89e-07  5.49e-04  3.63e-06  3.45e-06  6.23e-01  
 29  +4.7702e-01  +4.9374e-01  1.67e-02  7.01e-07  3.89e-04  2.43e-06  2.48e-06  3.35e-01  
 30  +4.7566e-01  +4.8801e-01  1.24e-02  5.07e-07  2.81e-04  1.09e-06  1.80e-06  5.83e-01  
 31  +4.7465e-01  +4.8391e-01  9.25e-03  3.74e-07  2.08e-04  5.68e-07  1.34e-06  5.16e-01  
 32  +4.7391e-01  +4.8098e-01  7.06e-03  2.83e-07  1.57e-04  4.04e-07  1.02e-06  3.06e-01  
 33  +4.7382e-01  +4.8056e-01  6.74e-03  2.69e-07  1.50e-04  3.13e-07  9.73e-07  2.69e-01  
 34  +4.7317e-01  +4.7805e-01  4.88e-03  1.93e-07  1.07e-04  2.15e-07  7.03e-07  3.27e-01  
 35  +4.7261e-01  +4.7588e-01  3.26e-03  1.28e-07  7.11e-05  1.19e-07  4.69e-07  4.89e-01  
 36  +4.7170e-01  +4.7239e-01  6.93e-04  2.68e-08  1.49e-05  1.84e-08  9.94e-08  8.71e-01  
 37  +4.7145e-01  +4.7148e-01  3.16e-05  1.22e-09  6.75e-07  4.84e-10  4.54e-09  9.87e-01  
 38  +4.7144e-01  +4.7144e-01  3.20e-07  1.23e-11  6.84e-09  4.91e-12  4.60e-11  9.90e-01  
 39  +4.7144e-01  +4.7144e-01  3.20e-09  1.23e-13  6.85e-11  4.91e-14  4.60e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3943231s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:24 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:24 PM: Optimal value: 4.714e-01
(CVXPY) Sep 20 08:07:24 PM: Compilation took 2.910e-01 seconds
(CVXPY) Sep 20 08:07:24 PM: Solver (including time spent in interface) took 1.443e+00 seconds
Iteration: 37, Objective: 0.4714
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:07:24 PM: Your problem has 25359 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:07:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:07:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:07:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:07:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:07:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:07:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:07:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:07:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:07:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:07:25 PM: Finished problem compilation (took 2.701e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25359
  constraints   = 50359
  nnz(P)        = 0
  nnz(A)        = 545899
  cones (total) = 1
    : Nonnegative = 1,  numel = 50359

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.77e+02  1.00e+00  1.00e+00   ------   
  1  +5.8082e-01  +5.4262e+03  5.43e+03  4.38e-01  1.80e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3192e-01  +6.1343e+02  6.13e+02  1.78e-01  9.37e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0904e-01  +1.6009e+02  1.60e+02  1.50e-01  7.97e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7642e+01  1.71e+01  4.72e-02  2.50e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0001e-01  +1.2543e+00  7.54e-01  2.26e-03  1.25e+00  2.27e-05  1.93e-01  1.69e-01  
  6  +5.0001e-01  +7.4743e-01  2.47e-01  7.41e-04  4.10e-01  6.67e-06  7.41e-02  6.63e-01  
  7  +5.0000e-01  +6.8995e-01  1.90e-01  5.68e-04  3.15e-01  5.20e-06  4.42e-02  5.85e-01  
  8  +5.0000e-01  +6.7589e-01  1.76e-01  5.26e-04  2.91e-01  5.50e-06  2.54e-02  5.94e-01  
  9  +4.9999e-01  +6.4890e-01  1.49e-01  4.36e-04  2.42e-01  1.12e-05  7.29e-03  7.80e-01  
 10  +4.9951e-01  +6.1696e-01  1.17e-01  7.06e-05  3.92e-02  2.26e-04  2.45e-04  9.90e-01  
 11  +4.9829e-01  +6.0846e-01  1.10e-01  2.05e-05  1.14e-02  7.14e-04  6.72e-05  7.60e-01  
 12  +4.9792e-01  +6.0414e-01  1.06e-01  1.53e-05  8.52e-03  7.70e-04  5.00e-05  3.73e-01  
 13  +4.9830e-01  +5.9912e-01  1.01e-01  1.33e-05  7.39e-03  4.92e-04  4.29e-05  4.89e-01  
 14  +4.9827e-01  +5.9871e-01  1.00e-01  1.29e-05  7.20e-03  4.85e-04  4.18e-05  5.56e-02  
 15  +4.9804e-01  +5.9409e-01  9.60e-02  1.01e-05  5.64e-03  3.73e-04  3.26e-05  5.21e-01  
 16  +4.9510e-01  +5.7771e-01  8.26e-02  5.00e-06  2.78e-03  4.47e-04  1.62e-05  6.67e-01  
 17  +4.9274e-01  +5.6535e-01  7.26e-02  4.20e-06  2.33e-03  3.41e-04  1.37e-05  2.40e-01  
 18  +4.9181e-01  +5.6059e-01  6.88e-02  3.93e-06  2.19e-03  2.72e-04  1.29e-05  1.71e-01  
 19  +4.9016e-01  +5.5235e-01  6.22e-02  3.47e-06  1.93e-03  1.81e-04  1.15e-05  2.87e-01  
 20  +4.9001e-01  +5.5154e-01  6.15e-02  3.44e-06  1.91e-03  1.60e-04  1.14e-05  9.30e-02  
 21  +4.8779e-01  +5.4132e-01  5.35e-02  2.85e-06  1.58e-03  1.27e-04  9.57e-06  2.20e-01  
 22  +4.8618e-01  +5.3355e-01  4.74e-02  2.42e-06  1.34e-03  4.18e-05  8.19e-06  5.93e-01  
 23  +4.8429e-01  +5.2523e-01  4.09e-02  2.02e-06  1.12e-03  3.26e-05  6.90e-06  2.24e-01  
 24  +4.8220e-01  +5.1611e-01  3.39e-02  1.60e-06  8.91e-04  2.46e-05  5.55e-06  2.57e-01  
 25  +4.8189e-01  +5.1470e-01  3.28e-02  1.53e-06  8.52e-04  2.09e-05  5.31e-06  1.53e-01  
 26  +4.8022e-01  +5.0745e-01  2.72e-02  1.22e-06  6.80e-04  1.33e-05  4.27e-06  3.76e-01  
 27  +4.8006e-01  +5.0664e-01  2.66e-02  1.18e-06  6.56e-04  1.01e-05  4.11e-06  2.48e-01  
 28  +4.7888e-01  +5.0167e-01  2.28e-02  9.90e-07  5.50e-04  6.74e-06  3.47e-06  3.35e-01  
 29  +4.7690e-01  +4.9333e-01  1.64e-02  6.93e-07  3.85e-04  3.57e-06  2.46e-06  4.80e-01  
 30  +4.7580e-01  +4.8862e-01  1.28e-02  5.28e-07  2.93e-04  1.69e-06  1.88e-06  5.55e-01  
 31  +4.7510e-01  +4.8569e-01  1.06e-02  4.31e-07  2.39e-04  8.81e-07  1.54e-06  5.12e-01  
 32  +4.7409e-01  +4.8166e-01  7.57e-03  3.04e-07  1.69e-04  5.36e-07  1.10e-06  4.12e-01  
 33  +4.7399e-01  +4.8121e-01  7.23e-03  2.90e-07  1.61e-04  4.17e-07  1.04e-06  2.56e-01  
 34  +4.7325e-01  +4.7834e-01  5.09e-03  2.02e-07  1.12e-04  2.80e-07  7.34e-07  3.39e-01  
 35  +4.7276e-01  +4.7641e-01  3.65e-03  1.44e-07  7.97e-05  1.41e-07  5.25e-07  5.51e-01  
 36  +4.7209e-01  +4.7388e-01  1.79e-03  6.97e-08  3.87e-05  6.05e-08  2.57e-07  5.99e-01  
 37  +4.7154e-01  +4.7183e-01  2.82e-04  1.09e-08  6.03e-06  7.88e-09  4.05e-08  8.82e-01  
 38  +4.7144e-01  +4.7145e-01  5.31e-06  2.04e-10  1.14e-07  1.36e-10  7.63e-10  9.84e-01  
 39  +4.7144e-01  +4.7144e-01  5.38e-08  2.07e-12  1.15e-09  1.38e-12  7.74e-12  9.90e-01  
 40  +4.7144e-01  +4.7144e-01  3.41e-09  1.31e-13  7.29e-11  8.89e-14  4.96e-13  9.37e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3805027s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:07:26 PM: Problem status: optimal
(CVXPY) Sep 20 08:07:26 PM: Optimal value: 4.714e-01
(CVXPY) Sep 20 08:07:26 PM: Compilation took 2.701e-01 seconds
(CVXPY) Sep 20 08:07:26 PM: Solver (including time spent in interface) took 1.430e+00 seconds
FULL MODEL:
  Accruacy: 0.5112
  Our objective: 0.022400000000000003

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.00308)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.0018)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.00164)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.00108)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.00048)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.00064)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.00088)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.00096)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0012)
 OR (x2 = 0 AND x3 = 0 AND x8 = 1)                                                                   <-- (term's our objective: 0.00884)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 97.6329197883606
Best over terms:
  Our final objective: 0.008839999999999973
    Its accruacy: 0.50442
    Its hamming distance: 8
  Shortest hamming distance: 1
    Its our objective: 0.0030799999999999604
  Highest accruacy: 0.50442
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

