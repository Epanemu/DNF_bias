Command:
python test_script.py -s constant_subclass -d 9 -n 50000 --seed 34 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0024000000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 9.

Computed total variation: 0.08295999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:29 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:29 PM: Finished problem compilation (took 1.613e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 300019
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8095e-01  +5.4248e+03  5.42e+03  4.36e-01  1.71e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3208e-01  +6.1486e+02  6.14e+02  1.78e-01  8.95e+01  1.62e-02  2.78e-01  9.28e-01  
  3  +5.0908e-01  +1.6055e+02  1.60e+02  1.50e-01  7.61e+01  4.52e-05  2.60e-01  2.60e-01  
  4  +5.0136e-01  +1.7633e+01  1.71e+01  4.71e-02  2.37e+01  5.20e-06  1.97e-01  4.43e-01  
  5  +5.0000e-01  +1.0776e+00  5.78e-01  1.72e-03  8.98e-01  2.20e-05  1.93e-01  2.02e-01  
  6  +5.0000e-01  +6.5932e-01  1.59e-01  4.75e-04  2.48e-01  5.17e-06  5.81e-02  7.33e-01  
  7  +5.0000e-01  +5.7084e-01  7.08e-02  2.11e-04  1.10e-01  2.06e-06  2.63e-02  6.19e-01  
  8  +5.0000e-01  +5.1249e-01  1.25e-02  3.72e-05  1.95e-02  3.03e-07  4.15e-03  9.59e-01  
  9  +5.0000e-01  +5.2032e-01  2.03e-02  6.04e-05  3.16e-02  6.05e-07  2.28e-03  7.93e-01  
 10  +5.0000e-01  +5.1624e-01  1.62e-02  4.59e-05  2.40e-02  1.18e-06  5.12e-04  9.81e-01  
 11  +4.9984e-01  +5.1450e-01  1.47e-02  2.16e-06  1.13e-03  7.41e-05  6.93e-06  9.88e-01  
 12  +4.9936e-01  +5.1222e-01  1.29e-02  6.49e-07  3.40e-04  1.95e-04  2.07e-06  7.23e-01  
 13  +4.9842e-01  +5.0572e-01  7.30e-03  4.54e-07  2.38e-04  1.51e-06  1.54e-06  6.15e-01  
 14  +4.9802e-01  +5.0375e-01  5.73e-03  3.19e-07  1.67e-04  8.63e-07  1.11e-06  4.57e-01  
 15  +4.9774e-01  +5.0230e-01  4.56e-03  2.27e-07  1.19e-04  3.17e-08  8.13e-07  9.13e-01  
 16  +4.9711e-01  +4.9969e-01  2.58e-03  1.16e-07  6.09e-05  1.97e-08  4.35e-07  7.85e-01  
 17  +4.9646e-01  +4.9709e-01  6.33e-04  2.60e-08  1.37e-05  4.72e-09  1.03e-07  7.71e-01  
 18  +4.9640e-01  +4.9685e-01  4.48e-04  1.82e-08  9.56e-06  4.38e-09  7.22e-08  9.86e-01  
 19  +4.9625e-01  +4.9628e-01  2.69e-05  1.08e-09  5.65e-07  2.60e-10  4.35e-09  9.52e-01  
 20  +4.9624e-01  +4.9624e-01  3.01e-07  1.20e-11  6.31e-09  2.92e-12  4.87e-11  9.90e-01  
 21  +4.9624e-01  +4.9624e-01  3.05e-09  1.22e-13  6.41e-11  5.33e-14  8.61e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 605.7664ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:29 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:29 PM: Optimal value: 4.962e-01
(CVXPY) Sep 20 08:09:29 PM: Compilation took 1.613e-01 seconds
(CVXPY) Sep 20 08:09:29 PM: Solver (including time spent in interface) took 6.488e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4962
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:30 PM: Your problem has 25029 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:30 PM: Finished problem compilation (took 1.581e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25029
  constraints   = 50029
  nnz(P)        = 0
  nnz(A)        = 331165
  cones (total) = 1
    : Nonnegative = 1,  numel = 50029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.65e+02  1.00e+00  1.00e+00   ------   
  1  +5.8095e-01  +5.4249e+03  5.42e+03  4.36e-01  1.73e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3207e-01  +6.1475e+02  6.14e+02  1.78e-01  9.09e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6051e+02  1.60e+02  1.50e-01  7.73e+01  4.52e-05  2.60e-01  2.60e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.71e-02  2.41e+01  5.20e-06  1.97e-01  4.43e-01  
  5  +5.0000e-01  +1.0737e+00  5.74e-01  1.71e-03  9.07e-01  2.21e-05  1.93e-01  2.04e-01  
  6  +5.0000e-01  +6.8795e-01  1.88e-01  5.60e-04  2.98e-01  6.38e-06  6.77e-02  6.88e-01  
  7  +5.0000e-01  +6.0252e-01  1.03e-01  3.06e-04  1.63e-01  3.02e-06  3.63e-02  5.82e-01  
  8  +5.0000e-01  +5.6666e-01  6.67e-02  1.99e-04  1.06e-01  1.57e-06  2.14e-02  6.09e-01  
  9  +5.0000e-01  +5.6279e-01  6.28e-02  1.87e-04  9.95e-02  3.91e-07  1.50e-02  9.61e-01  
 10  +5.0000e-01  +5.2041e-01  2.04e-02  6.08e-05  3.23e-02  3.11e-07  2.69e-03  8.56e-01  
 11  +4.9997e-01  +5.4534e-01  4.54e-02  3.31e-05  1.76e-02  1.40e-05  1.21e-04  9.90e-01  
 12  +4.9963e-01  +5.4288e-01  4.33e-02  2.98e-06  1.59e-03  1.59e-04  1.00e-05  9.18e-01  
 13  +4.9912e-01  +5.3211e-01  3.30e-02  2.67e-06  1.42e-03  7.41e-05  9.10e-06  2.12e-01  
 14  +4.9912e-01  +5.3133e-01  3.22e-02  2.65e-06  1.41e-03  6.79e-05  9.08e-06  3.46e-02  
 15  +4.9869e-01  +5.2688e-01  2.82e-02  2.08e-06  1.11e-03  6.01e-05  7.19e-06  2.42e-01  
 16  +4.9873e-01  +5.2563e-01  2.69e-02  2.07e-06  1.10e-03  4.83e-05  7.15e-06  9.63e-02  
 17  +4.9873e-01  +5.2523e-01  2.65e-02  2.06e-06  1.10e-03  4.59e-05  7.15e-06  1.70e-02  
 18  +4.9829e-01  +5.2129e-01  2.30e-02  1.62e-06  8.65e-04  3.85e-05  5.70e-06  2.52e-01  
 19  +4.9829e-01  +5.2018e-01  2.19e-02  1.60e-06  8.53e-04  3.01e-05  5.66e-06  1.14e-01  
 20  +4.9777e-01  +5.1261e-01  1.48e-02  9.64e-07  5.14e-04  3.30e-07  3.50e-06  8.66e-01  
 21  +4.9737e-01  +5.1048e-01  1.31e-02  7.96e-07  4.24e-04  2.57e-07  2.92e-06  2.86e-01  
 22  +4.9737e-01  +5.1045e-01  1.31e-02  7.96e-07  4.24e-04  2.55e-07  2.92e-06  7.75e-03  
 23  +4.9728e-01  +5.0977e-01  1.25e-02  7.52e-07  4.01e-04  1.80e-07  2.76e-06  3.39e-01  
 24  +4.9620e-01  +5.0434e-01  8.14e-03  4.36e-07  2.32e-04  1.06e-07  1.66e-06  4.79e-01  
 25  +4.9619e-01  +5.0429e-01  8.10e-03  4.36e-07  2.32e-04  1.03e-07  1.66e-06  2.39e-02  
 26  +4.9543e-01  +5.0041e-01  4.98e-03  2.48e-07  1.32e-04  4.33e-08  9.78e-07  7.70e-01  
 27  +4.9506e-01  +4.9863e-01  3.57e-03  1.72e-07  9.18e-05  2.96e-08  7.01e-07  6.22e-01  
 28  +4.9478e-01  +4.9727e-01  2.49e-03  1.17e-07  6.25e-05  2.08e-08  4.91e-07  9.90e-01  
 29  +4.9434e-01  +4.9525e-01  9.12e-04  4.26e-08  2.27e-05  7.45e-09  1.89e-07  8.39e-01  
 30  +4.9409e-01  +4.9412e-01  2.83e-05  1.31e-09  7.00e-07  1.68e-10  6.14e-09  9.87e-01  
 31  +4.9408e-01  +4.9408e-01  2.87e-07  1.33e-11  7.11e-09  1.70e-12  6.26e-11  9.90e-01  
 32  +4.9408e-01  +4.9408e-01  2.87e-09  1.33e-13  7.11e-11  1.70e-14  6.26e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 993.5694ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:31 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:31 PM: Optimal value: 4.941e-01
(CVXPY) Sep 20 08:09:31 PM: Compilation took 1.581e-01 seconds
(CVXPY) Sep 20 08:09:31 PM: Solver (including time spent in interface) took 1.037e+00 seconds
Iteration: 2, Objective: 0.4941
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:31 PM: Your problem has 25039 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:31 PM: Finished problem compilation (took 1.906e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25039
  constraints   = 50039
  nnz(P)        = 0
  nnz(A)        = 355274
  cones (total) = 1
    : Nonnegative = 1,  numel = 50039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.68e+02  1.00e+00  1.00e+00   ------   
  1  +5.8094e-01  +5.4250e+03  5.42e+03  4.36e-01  1.75e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3206e-01  +6.1470e+02  6.14e+02  1.78e-01  9.19e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6049e+02  1.60e+02  1.50e-01  7.82e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.43e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0000e-01  +1.0678e+00  5.68e-01  1.69e-03  9.08e-01  2.22e-05  1.93e-01  2.08e-01  
  6  +5.0000e-01  +6.8632e-01  1.86e-01  5.56e-04  2.99e-01  6.50e-06  6.70e-02  6.90e-01  
  7  +5.0000e-01  +6.0620e-01  1.06e-01  3.17e-04  1.70e-01  3.25e-06  3.65e-02  5.82e-01  
  8  +5.0000e-01  +5.8521e-01  8.52e-02  2.54e-04  1.37e-01  2.50e-06  2.72e-02  3.41e-01  
  9  +5.0000e-01  +5.5544e-01  5.54e-02  1.65e-04  8.89e-02  6.44e-07  1.26e-02  9.90e-01  
 10  +5.0000e-01  +5.4723e-01  4.72e-02  1.41e-04  7.57e-02  5.85e-07  6.95e-03  6.21e-01  
 11  +5.0000e-01  +5.2716e-01  2.72e-02  7.59e-05  4.08e-02  1.76e-06  7.71e-04  9.90e-01  
 12  +4.9978e-01  +5.2723e-01  2.75e-02  4.12e-06  2.22e-03  1.00e-04  1.32e-05  9.88e-01  
 13  +4.9917e-01  +5.2398e-01  2.48e-02  1.48e-06  7.95e-04  2.28e-04  4.67e-06  6.83e-01  
 14  +4.9913e-01  +5.2373e-01  2.46e-02  1.44e-06  7.77e-04  1.89e-04  4.52e-06  1.74e-01  
 15  +4.9890e-01  +5.2211e-01  2.32e-02  1.41e-06  7.59e-04  1.40e-04  4.40e-06  1.66e-01  
 16  +4.9869e-01  +5.2065e-01  2.20e-02  1.34e-06  7.25e-04  9.42e-05  4.19e-06  2.55e-01  
 17  +4.9860e-01  +5.1997e-01  2.14e-02  1.33e-06  7.15e-04  7.52e-05  4.13e-06  1.47e-01  
 18  +4.9752e-01  +5.1425e-01  1.67e-02  8.92e-07  4.81e-04  3.86e-05  2.78e-06  5.62e-01  
 19  +4.9736e-01  +5.1364e-01  1.63e-02  8.89e-07  4.79e-04  3.54e-05  2.78e-06  2.67e-02  
 20  +4.9634e-01  +5.0916e-01  1.28e-02  5.82e-07  3.14e-04  5.85e-06  1.83e-06  8.26e-01  
 21  +4.9588e-01  +5.0732e-01  1.14e-02  4.94e-07  2.66e-04  3.34e-06  1.55e-06  4.19e-01  
 22  +4.9546e-01  +5.0564e-01  1.02e-02  4.21e-07  2.27e-04  2.35e-06  1.33e-06  3.10e-01  
 23  +4.9524e-01  +5.0489e-01  9.64e-03  4.01e-07  2.16e-04  1.51e-06  1.31e-06  2.57e-01  
 24  +4.9482e-01  +5.0289e-01  8.07e-03  3.24e-07  1.75e-04  4.24e-07  1.05e-06  7.09e-01  
 25  +4.9377e-01  +4.9883e-01  5.06e-03  1.91e-07  1.03e-04  7.86e-08  6.18e-07  8.91e-01  
 26  +4.9297e-01  +4.9607e-01  3.10e-03  1.11e-07  5.96e-05  4.77e-08  3.62e-07  4.71e-01  
 27  +4.9199e-01  +4.9257e-01  5.81e-04  2.00e-08  1.08e-05  7.41e-09  6.75e-08  9.58e-01  
 28  +4.9178e-01  +4.9186e-01  8.11e-05  2.78e-09  1.50e-06  1.08e-09  9.56e-09  9.54e-01  
 29  +4.9174e-01  +4.9174e-01  8.40e-07  2.88e-11  1.55e-08  1.10e-11  9.93e-11  9.90e-01  
 30  +4.9174e-01  +4.9174e-01  8.40e-09  2.88e-13  1.55e-10  1.10e-13  9.93e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0902103s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:32 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:32 PM: Optimal value: 4.917e-01
(CVXPY) Sep 20 08:09:32 PM: Compilation took 1.906e-01 seconds
(CVXPY) Sep 20 08:09:32 PM: Solver (including time spent in interface) took 1.142e+00 seconds
Iteration: 3, Objective: 0.4917
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:33 PM: Your problem has 25049 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:33 PM: Finished problem compilation (took 1.841e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25049
  constraints   = 50049
  nnz(P)        = 0
  nnz(A)        = 369474
  cones (total) = 1
    : Nonnegative = 1,  numel = 50049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.69e+02  1.00e+00  1.00e+00   ------   
  1  +5.8094e-01  +5.4250e+03  5.42e+03  4.36e-01  1.76e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3206e-01  +6.1466e+02  6.14e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6048e+02  1.60e+02  1.50e-01  7.84e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7629e+01  1.71e+01  4.71e-02  2.44e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0001e-01  +1.1668e+00  6.67e-01  1.99e-03  1.07e+00  2.21e-05  1.93e-01  1.78e-01  
  6  +5.0000e-01  +7.4340e-01  2.43e-01  7.26e-04  3.91e-01  6.70e-06  7.96e-02  6.73e-01  
  7  +5.0000e-01  +6.0994e-01  1.10e-01  3.28e-04  1.77e-01  2.83e-06  3.67e-02  6.23e-01  
  8  +5.0000e-01  +5.8949e-01  8.95e-02  2.67e-04  1.44e-01  1.54e-06  2.42e-02  7.02e-01  
  9  +5.0000e-01  +5.6665e-01  6.66e-02  1.99e-04  1.07e-01  1.18e-06  1.41e-02  5.39e-01  
 10  +5.0000e-01  +5.4631e-01  4.63e-02  1.37e-04  7.42e-02  9.72e-07  4.14e-03  9.90e-01  
 11  +4.9998e-01  +5.3534e-01  3.54e-02  5.62e-05  3.04e-02  1.03e-05  2.32e-04  9.89e-01  
 12  +4.9954e-01  +5.3362e-01  3.41e-02  3.52e-06  1.91e-03  2.05e-04  1.11e-05  9.52e-01  
 13  +4.9941e-01  +5.3210e-01  3.27e-02  3.16e-06  1.71e-03  1.84e-04  9.96e-06  2.10e-01  
 14  +4.9921e-01  +5.2976e-01  3.06e-02  2.82e-06  1.52e-03  1.36e-04  8.85e-06  3.07e-01  
 15  +4.9862e-01  +5.2574e-01  2.71e-02  2.07e-06  1.12e-03  1.21e-04  6.45e-06  3.88e-01  
 16  +4.9862e-01  +5.2572e-01  2.71e-02  2.06e-06  1.11e-03  1.13e-04  6.40e-06  6.47e-02  
 17  +4.9836e-01  +5.2442e-01  2.61e-02  1.73e-06  9.37e-04  1.06e-04  5.35e-06  2.66e-01  
 18  +4.9832e-01  +5.2421e-01  2.59e-02  1.72e-06  9.29e-04  9.24e-05  5.30e-06  1.09e-01  
 19  +4.9825e-01  +5.2367e-01  2.54e-02  1.48e-06  7.99e-04  3.82e-05  4.53e-06  6.41e-01  
 20  +4.9795e-01  +5.2225e-01  2.43e-02  1.32e-06  7.14e-04  2.78e-05  4.05e-06  3.16e-01  
 21  +4.9783e-01  +5.2171e-01  2.39e-02  1.29e-06  6.97e-04  2.20e-05  3.95e-06  1.81e-01  
 22  +4.9739e-01  +5.2004e-01  2.26e-02  1.12e-06  6.08e-04  2.00e-05  3.46e-06  1.99e-01  
 23  +4.9654e-01  +5.1686e-01  2.03e-02  9.32e-07  5.04e-04  1.28e-05  2.88e-06  3.88e-01  
 24  +4.9467e-01  +5.0954e-01  1.49e-02  6.08e-07  3.29e-04  1.42e-07  1.89e-06  8.81e-01  
 25  +4.9425e-01  +5.0802e-01  1.38e-02  5.54e-07  3.00e-04  1.33e-07  1.73e-06  1.91e-01  
 26  +4.9150e-01  +4.9828e-01  6.78e-03  2.44e-07  1.32e-04  6.54e-08  7.78e-07  6.79e-01  
 27  +4.8977e-01  +4.9212e-01  2.35e-03  7.86e-08  4.25e-05  3.09e-08  2.56e-07  9.90e-01  
 28  +4.8875e-01  +4.8881e-01  6.39e-05  2.10e-09  1.14e-06  7.90e-10  6.95e-09  9.84e-01  
 29  +4.8872e-01  +4.8872e-01  6.44e-07  2.11e-11  1.14e-08  7.95e-12  7.00e-11  9.90e-01  
 30  +4.8872e-01  +4.8872e-01  6.47e-09  2.12e-13  1.15e-10  9.84e-14  8.58e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0217969s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:34 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:34 PM: Optimal value: 4.887e-01
(CVXPY) Sep 20 08:09:34 PM: Compilation took 1.841e-01 seconds
(CVXPY) Sep 20 08:09:34 PM: Solver (including time spent in interface) took 1.070e+00 seconds
Iteration: 4, Objective: 0.4887
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:34 PM: Your problem has 25059 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:34 PM: Finished problem compilation (took 1.804e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25059
  constraints   = 50059
  nnz(P)        = 0
  nnz(A)        = 380438
  cones (total) = 1
    : Nonnegative = 1,  numel = 50059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8094e-01  +5.4249e+03  5.42e+03  4.37e-01  1.76e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3206e-01  +6.1463e+02  6.14e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6047e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7627e+01  1.71e+01  4.71e-02  2.45e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0001e-01  +1.1940e+00  6.94e-01  2.07e-03  1.12e+00  2.21e-05  1.93e-01  1.71e-01  
  6  +5.0000e-01  +6.6764e-01  1.68e-01  5.00e-04  2.70e-01  3.90e-06  5.58e-02  7.93e-01  
  7  +5.0000e-01  +6.1556e-01  1.16e-01  3.45e-04  1.86e-01  2.36e-06  3.56e-02  5.40e-01  
  8  +5.0000e-01  +5.8650e-01  8.65e-02  2.58e-04  1.40e-01  1.90e-06  2.35e-02  3.79e-01  
  9  +5.0000e-01  +5.6784e-01  6.78e-02  2.02e-04  1.09e-01  1.06e-06  1.04e-02  9.37e-01  
 10  +5.0000e-01  +5.4386e-01  4.39e-02  1.25e-04  6.79e-02  2.52e-06  1.53e-03  9.90e-01  
 11  +4.9978e-01  +5.4272e-01  4.29e-02  1.09e-05  5.89e-03  1.03e-04  3.46e-05  9.82e-01  
 12  +4.9929e-01  +5.3502e-01  3.57e-02  2.73e-06  1.48e-03  2.43e-04  8.49e-06  9.90e-01  
 13  +4.9915e-01  +5.3437e-01  3.52e-02  2.45e-06  1.33e-03  2.19e-04  7.62e-06  2.53e-01  
 14  +4.9898e-01  +5.3363e-01  3.47e-02  2.23e-06  1.21e-03  2.02e-04  6.94e-06  2.02e-01  
 15  +4.9871e-01  +5.3232e-01  3.36e-02  2.13e-06  1.16e-03  1.31e-04  6.63e-06  3.39e-01  
 16  +4.9799e-01  +5.2954e-01  3.15e-02  1.79e-06  9.72e-04  8.27e-05  5.59e-06  4.70e-01  
 17  +4.9745e-01  +5.2753e-01  3.01e-02  1.61e-06  8.74e-04  7.04e-05  5.04e-06  2.09e-01  
 18  +4.9689e-01  +5.2551e-01  2.86e-02  1.52e-06  8.26e-04  4.90e-05  4.80e-06  2.49e-01  
 19  +4.9467e-01  +5.1737e-01  2.27e-02  1.06e-06  5.72e-04  2.92e-05  3.37e-06  4.76e-01  
 20  +4.9290e-01  +5.1106e-01  1.82e-02  7.86e-07  4.26e-04  1.25e-05  2.55e-06  5.27e-01  
 21  +4.9232e-01  +5.0893e-01  1.66e-02  6.91e-07  3.75e-04  5.03e-06  2.25e-06  5.48e-01  
 22  +4.9015e-01  +5.0140e-01  1.12e-02  4.38e-07  2.37e-04  2.72e-06  1.45e-06  4.60e-01  
 23  +4.8974e-01  +4.9988e-01  1.01e-02  3.75e-07  2.03e-04  6.89e-07  1.24e-06  7.61e-01  
 24  +4.8685e-01  +4.9003e-01  3.18e-03  1.12e-07  6.08e-05  1.72e-07  3.82e-07  7.43e-01  
 25  +4.8557e-01  +4.8574e-01  1.64e-04  5.64e-09  3.06e-06  3.02e-09  1.95e-08  9.90e-01  
 26  +4.8550e-01  +4.8550e-01  1.65e-06  5.67e-11  3.07e-08  3.04e-11  1.97e-10  9.90e-01  
 27  +4.8550e-01  +4.8550e-01  1.65e-08  5.67e-13  3.07e-10  3.04e-13  1.97e-12  9.90e-01  
 28  +4.8550e-01  +4.8550e-01  1.65e-10  5.64e-15  3.08e-12  3.39e-15  2.18e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 918.454ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:35 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:35 PM: Optimal value: 4.855e-01
(CVXPY) Sep 20 08:09:35 PM: Compilation took 1.804e-01 seconds
(CVXPY) Sep 20 08:09:35 PM: Solver (including time spent in interface) took 9.653e-01 seconds
Iteration: 5, Objective: 0.4855
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:35 PM: Your problem has 25069 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:36 PM: Finished problem compilation (took 2.043e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25069
  constraints   = 50069
  nnz(P)        = 0
  nnz(A)        = 390724
  cones (total) = 1
    : Nonnegative = 1,  numel = 50069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4249e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3205e-01  +6.1458e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6045e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7625e+01  1.71e+01  4.71e-02  2.45e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0001e-01  +1.2458e+00  7.46e-01  2.23e-03  1.20e+00  2.21e-05  1.93e-01  1.60e-01  
  6  +5.0001e-01  +7.6337e-01  2.63e-01  7.86e-04  4.25e-01  6.42e-06  8.19e-02  6.70e-01  
  7  +5.0001e-01  +6.4154e-01  1.42e-01  4.22e-04  2.29e-01  2.23e-06  4.18e-02  8.46e-01  
  8  +5.0000e-01  +5.9113e-01  9.11e-02  2.72e-04  1.47e-01  1.39e-06  2.32e-02  5.91e-01  
  9  +5.0000e-01  +5.8574e-01  8.57e-02  2.56e-04  1.38e-01  8.99e-07  1.51e-02  7.20e-01  
 10  +5.0000e-01  +5.6504e-01  6.50e-02  1.93e-04  1.05e-01  8.83e-07  5.88e-03  7.88e-01  
 11  +4.9999e-01  +5.4291e-01  4.29e-02  8.95e-05  4.85e-02  5.57e-06  4.39e-04  9.90e-01  
 12  +4.9953e-01  +5.4144e-01  4.19e-02  3.58e-06  1.95e-03  2.11e-04  1.11e-05  9.75e-01  
 13  +4.9928e-01  +5.3981e-01  4.05e-02  2.97e-06  1.62e-03  2.18e-04  9.17e-06  2.42e-01  
 14  +4.9928e-01  +5.3930e-01  4.00e-02  2.92e-06  1.59e-03  1.96e-04  8.99e-06  1.09e-01  
 15  +4.9923e-01  +5.3865e-01  3.94e-02  2.89e-06  1.57e-03  1.71e-04  8.89e-06  1.11e-01  
 16  +4.9888e-01  +5.3682e-01  3.79e-02  2.43e-06  1.32e-03  1.69e-04  7.49e-06  2.36e-01  
 17  +4.9875e-01  +5.3573e-01  3.70e-02  2.33e-06  1.27e-03  1.36e-04  7.19e-06  2.01e-01  
 18  +4.9811e-01  +5.3131e-01  3.32e-02  2.03e-06  1.10e-03  1.27e-05  6.28e-06  8.26e-01  
 19  +4.9757e-01  +5.2923e-01  3.17e-02  1.80e-06  9.78e-04  1.14e-05  5.58e-06  1.98e-01  
 20  +4.9675e-01  +5.2607e-01  2.93e-02  1.67e-06  9.06e-04  2.05e-06  5.20e-06  6.79e-01  
 21  +4.9402e-01  +5.1593e-01  2.19e-02  1.01e-06  5.50e-04  1.35e-06  3.19e-06  5.27e-01  
 22  +4.9397e-01  +5.1574e-01  2.18e-02  1.00e-06  5.44e-04  1.22e-06  3.17e-06  9.71e-02  
 23  +4.9213e-01  +5.0904e-01  1.69e-02  7.22e-07  3.92e-04  8.90e-07  2.30e-06  3.17e-01  
 24  +4.9202e-01  +5.0857e-01  1.66e-02  6.92e-07  3.76e-04  6.68e-07  2.21e-06  2.90e-01  
 25  +4.8822e-01  +4.9501e-01  6.79e-03  2.51e-07  1.36e-04  2.21e-07  8.15e-07  7.03e-01  
 26  +4.8820e-01  +4.9496e-01  6.76e-03  2.45e-07  1.33e-04  2.08e-07  7.93e-07  1.35e-01  
 27  +4.8806e-01  +4.9453e-01  6.46e-03  2.39e-07  1.30e-04  1.83e-07  7.92e-07  5.10e-02  
 28  +4.8800e-01  +4.9431e-01  6.31e-03  2.32e-07  1.26e-04  1.70e-07  7.66e-07  1.31e-01  
 29  +4.8682e-01  +4.9018e-01  3.36e-03  1.18e-07  6.42e-05  7.67e-08  3.91e-07  6.65e-01  
 30  +4.8634e-01  +4.8875e-01  2.41e-03  8.14e-08  4.42e-05  5.08e-08  2.69e-07  4.71e-01  
 31  +4.8542e-01  +4.8571e-01  2.85e-04  9.46e-09  5.14e-06  5.76e-09  3.15e-08  8.95e-01  
 32  +4.8530e-01  +4.8530e-01  3.00e-06  9.93e-11  5.39e-08  6.05e-11  3.32e-10  9.90e-01  
 33  +4.8530e-01  +4.8530e-01  3.00e-08  9.93e-13  5.39e-10  6.05e-13  3.32e-12  9.90e-01  
 34  +4.8530e-01  +4.8530e-01  3.01e-10  9.97e-15  5.41e-12  7.30e-15  3.97e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2179444s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:37 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:37 PM: Optimal value: 4.853e-01
(CVXPY) Sep 20 08:09:37 PM: Compilation took 2.043e-01 seconds
(CVXPY) Sep 20 08:09:37 PM: Solver (including time spent in interface) took 1.268e+00 seconds
Iteration: 6, Objective: 0.4853
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:37 PM: Your problem has 25079 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:37 PM: Finished problem compilation (took 1.945e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25079
  constraints   = 50079
  nnz(P)        = 0
  nnz(A)        = 395619
  cones (total) = 1
    : Nonnegative = 1,  numel = 50079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4249e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3205e-01  +6.1453e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6044e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7625e+01  1.71e+01  4.71e-02  2.45e+01  5.20e-06  1.97e-01  4.44e-01  
  5  +5.0001e-01  +1.2627e+00  7.63e-01  2.28e-03  1.23e+00  2.22e-05  1.93e-01  1.57e-01  
  6  +5.0001e-01  +7.6531e-01  2.65e-01  7.92e-04  4.29e-01  6.39e-06  8.18e-02  6.62e-01  
  7  +5.0001e-01  +6.3920e-01  1.39e-01  4.15e-04  2.25e-01  2.73e-06  4.19e-02  7.12e-01  
  8  +5.0000e-01  +5.8103e-01  8.10e-02  2.42e-04  1.31e-01  1.84e-06  2.04e-02  5.64e-01  
  9  +5.0000e-01  +5.8360e-01  8.36e-02  2.49e-04  1.35e-01  1.66e-06  1.68e-02  3.89e-01  
 10  +5.0000e-01  +5.8304e-01  8.30e-02  2.47e-04  1.34e-01  9.32e-07  9.26e-03  9.11e-01  
 11  +5.0000e-01  +5.5534e-01  5.53e-02  1.51e-04  8.20e-02  3.04e-06  1.32e-03  8.85e-01  
 12  +4.9970e-01  +5.4830e-01  4.86e-02  7.69e-06  4.18e-03  1.39e-04  2.38e-05  9.90e-01  
 13  +4.9945e-01  +5.4618e-01  4.67e-02  4.57e-06  2.48e-03  2.01e-04  1.40e-05  4.90e-01  
 14  +4.9912e-01  +5.4158e-01  4.25e-02  3.12e-06  1.70e-03  1.59e-04  9.58e-06  6.26e-01  
 15  +4.9911e-01  +5.4138e-01  4.23e-02  3.10e-06  1.69e-03  1.51e-04  9.54e-06  4.35e-02  
 16  +4.9883e-01  +5.3933e-01  4.05e-02  2.72e-06  1.48e-03  1.13e-04  8.36e-06  3.67e-01  
 17  +4.9849e-01  +5.3739e-01  3.89e-02  2.45e-06  1.33e-03  8.22e-05  7.55e-06  3.40e-01  
 18  +4.9814e-01  +5.3585e-01  3.77e-02  2.26e-06  1.23e-03  7.57e-05  6.95e-06  1.52e-01  
 19  +4.9807e-01  +5.3556e-01  3.75e-02  2.24e-06  1.22e-03  7.28e-05  6.90e-06  3.51e-02  
 20  +4.9785e-01  +5.3441e-01  3.66e-02  2.20e-06  1.19e-03  5.53e-05  6.78e-06  1.94e-01  
 21  +4.9597e-01  +5.2697e-01  3.10e-02  1.56e-06  8.48e-04  4.20e-05  4.86e-06  4.30e-01  
 22  +4.9230e-01  +5.1276e-01  2.05e-02  9.17e-07  4.98e-04  1.47e-06  2.92e-06  8.51e-01  
 23  +4.9123e-01  +5.0905e-01  1.78e-02  7.42e-07  4.03e-04  8.06e-07  2.37e-06  4.96e-01  
 24  +4.9119e-01  +5.0893e-01  1.77e-02  7.41e-07  4.03e-04  7.91e-07  2.37e-06  1.14e-02  
 25  +4.9122e-01  +5.0906e-01  1.78e-02  7.31e-07  3.97e-04  6.67e-07  2.33e-06  2.12e-01  
 26  +4.8937e-01  +5.0257e-01  1.32e-02  5.09e-07  2.77e-04  4.00e-07  1.65e-06  4.53e-01  
 27  +4.8675e-01  +4.9346e-01  6.71e-03  2.37e-07  1.29e-04  7.16e-08  7.76e-07  9.90e-01  
 28  +4.8460e-01  +4.8625e-01  1.65e-03  5.60e-08  3.04e-05  1.92e-08  1.87e-07  8.49e-01  
 29  +4.8391e-01  +4.8399e-01  7.73e-05  2.59e-09  1.41e-06  1.03e-09  8.76e-09  9.90e-01  
 30  +4.8388e-01  +4.8388e-01  7.81e-07  2.62e-11  1.42e-08  1.05e-11  8.86e-11  9.90e-01  
 31  +4.8388e-01  +4.8388e-01  7.81e-09  2.62e-13  1.42e-10  1.05e-13  8.86e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0260667s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:38 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:38 PM: Optimal value: 4.839e-01
(CVXPY) Sep 20 08:09:38 PM: Compilation took 1.945e-01 seconds
(CVXPY) Sep 20 08:09:38 PM: Solver (including time spent in interface) took 1.073e+00 seconds
Iteration: 7, Objective: 0.4839
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:39 PM: Your problem has 25089 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:39 PM: Finished problem compilation (took 1.939e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25089
  constraints   = 50089
  nnz(P)        = 0
  nnz(A)        = 403275
  cones (total) = 1
    : Nonnegative = 1,  numel = 50089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4248e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3204e-01  +6.1450e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6042e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7624e+01  1.71e+01  4.71e-02  2.45e+01  5.21e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.2472e+00  7.47e-01  2.23e-03  1.21e+00  2.22e-05  1.93e-01  1.61e-01  
  6  +5.0001e-01  +7.2155e-01  2.22e-01  6.61e-04  3.58e-01  4.11e-06  6.70e-02  9.00e-01  
  7  +5.0001e-01  +6.8927e-01  1.89e-01  5.65e-04  3.06e-01  2.90e-06  5.29e-02  4.87e-01  
  8  +5.0000e-01  +5.9354e-01  9.35e-02  2.79e-04  1.51e-01  1.69e-06  2.39e-02  5.83e-01  
  9  +5.0000e-01  +5.8292e-01  8.29e-02  2.47e-04  1.34e-01  1.50e-06  1.23e-02  7.40e-01  
 10  +5.0000e-01  +5.7336e-01  7.34e-02  2.16e-04  1.17e-01  1.65e-06  4.01e-03  9.90e-01  
 11  +4.9994e-01  +5.5851e-01  5.86e-02  4.36e-05  2.37e-02  3.08e-05  1.48e-04  9.70e-01  
 12  +4.9910e-01  +5.5500e-01  5.59e-02  3.58e-06  1.95e-03  3.84e-04  1.11e-05  9.25e-01  
 13  +4.9882e-01  +5.5152e-01  5.27e-02  3.42e-06  1.86e-03  3.12e-04  1.06e-05  1.43e-01  
 14  +4.9858e-01  +5.4880e-01  5.02e-02  3.16e-06  1.72e-03  2.63e-04  9.80e-06  1.89e-01  
 15  +4.9843e-01  +5.4629e-01  4.79e-02  3.08e-06  1.68e-03  2.01e-04  9.54e-06  1.71e-01  
 16  +4.9766e-01  +5.4161e-01  4.39e-02  2.55e-06  1.39e-03  1.76e-04  7.89e-06  2.66e-01  
 17  +4.9759e-01  +5.4091e-01  4.33e-02  2.52e-06  1.37e-03  1.62e-04  7.78e-06  6.47e-02  
 18  +4.9711e-01  +5.3668e-01  3.96e-02  2.22e-06  1.21e-03  8.10e-05  6.88e-06  4.54e-01  
 19  +4.9661e-01  +5.3434e-01  3.77e-02  2.15e-06  1.17e-03  5.62e-05  6.69e-06  2.25e-01  
 20  +4.9570e-01  +5.3031e-01  3.46e-02  1.86e-06  1.01e-03  4.93e-05  5.78e-06  1.85e-01  
 21  +4.9570e-01  +5.3016e-01  3.45e-02  1.85e-06  1.01e-03  4.65e-05  5.76e-06  4.56e-02  
 22  +4.9327e-01  +5.1976e-01  2.65e-02  1.24e-06  6.73e-04  2.89e-05  3.89e-06  4.62e-01  
 23  +4.9326e-01  +5.1960e-01  2.63e-02  1.22e-06  6.66e-04  2.57e-05  3.85e-06  1.01e-01  
 24  +4.9274e-01  +5.1682e-01  2.41e-02  1.06e-06  5.79e-04  6.24e-06  3.34e-06  6.72e-01  
 25  +4.9220e-01  +5.1474e-01  2.25e-02  9.74e-07  5.29e-04  4.97e-06  3.07e-06  2.03e-01  
 26  +4.9067e-01  +5.0856e-01  1.79e-02  7.25e-07  3.94e-04  2.45e-07  2.30e-06  8.72e-01  
 27  +4.8896e-01  +5.0234e-01  1.34e-02  5.18e-07  2.81e-04  1.67e-07  1.66e-06  5.26e-01  
 28  +4.8563e-01  +4.9037e-01  4.74e-03  1.68e-07  9.14e-05  5.69e-08  5.50e-07  7.80e-01  
 29  +4.8487e-01  +4.8767e-01  2.80e-03  9.58e-08  5.21e-05  3.82e-08  3.17e-07  9.47e-01  
 30  +4.8374e-01  +4.8392e-01  1.82e-04  6.11e-09  3.32e-06  2.48e-09  2.06e-08  9.58e-01  
 31  +4.8366e-01  +4.8366e-01  1.87e-06  6.25e-11  3.40e-08  2.55e-11  2.11e-10  9.90e-01  
 32  +4.8366e-01  +4.8366e-01  1.87e-08  6.25e-13  3.40e-10  2.55e-13  2.11e-12  9.90e-01  
 33  +4.8366e-01  +4.8366e-01  1.87e-10  6.29e-15  3.41e-12  3.07e-15  2.52e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1669307s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:40 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:40 PM: Optimal value: 4.837e-01
(CVXPY) Sep 20 08:09:40 PM: Compilation took 1.939e-01 seconds
(CVXPY) Sep 20 08:09:40 PM: Solver (including time spent in interface) took 1.215e+00 seconds
Iteration: 8, Objective: 0.4837
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:40 PM: Your problem has 25099 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:40 PM: Finished problem compilation (took 2.111e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25099
  constraints   = 50099
  nnz(P)        = 0
  nnz(A)        = 408993
  cones (total) = 1
    : Nonnegative = 1,  numel = 50099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8092e-01  +5.4249e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3204e-01  +6.1442e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6040e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7623e+01  1.71e+01  4.71e-02  2.45e+01  5.21e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.2548e+00  7.55e-01  2.25e-03  1.22e+00  2.23e-05  1.93e-01  1.61e-01  
  6  +5.0001e-01  +7.4083e-01  2.41e-01  7.19e-04  3.90e-01  4.94e-06  7.24e-02  8.36e-01  
  7  +5.0001e-01  +6.9739e-01  1.97e-01  5.89e-04  3.19e-01  3.19e-06  5.36e-02  5.85e-01  
  8  +5.0001e-01  +6.1924e-01  1.19e-01  3.56e-04  1.93e-01  1.69e-06  2.76e-02  7.19e-01  
  9  +5.0000e-01  +5.9208e-01  9.21e-02  2.75e-04  1.49e-01  1.63e-06  1.44e-02  5.57e-01  
 10  +5.0000e-01  +5.8077e-01  8.08e-02  2.38e-04  1.29e-01  2.36e-06  5.10e-03  8.13e-01  
 11  +4.9994e-01  +5.6593e-01  6.60e-02  7.93e-05  4.31e-02  2.80e-05  2.96e-04  9.56e-01  
 12  +4.9891e-01  +5.6148e-01  6.26e-02  5.11e-06  2.78e-03  4.81e-04  1.60e-05  9.46e-01  
 13  +4.9869e-01  +5.5825e-01  5.96e-02  4.57e-06  2.49e-03  4.33e-04  1.42e-05  2.01e-01  
 14  +4.9856e-01  +5.5496e-01  5.64e-02  4.14e-06  2.25e-03  3.50e-04  1.28e-05  2.49e-01  
 15  +4.9857e-01  +5.5297e-01  5.44e-02  4.02e-06  2.19e-03  2.72e-04  1.25e-05  1.90e-01  
 16  +4.9795e-01  +5.4865e-01  5.07e-02  3.19e-06  1.74e-03  2.47e-04  9.87e-06  3.33e-01  
 17  +4.9784e-01  +5.4725e-01  4.94e-02  3.14e-06  1.71e-03  2.01e-04  9.74e-06  1.43e-01  
 18  +4.9761e-01  +5.4540e-01  4.78e-02  3.04e-06  1.66e-03  1.59e-04  9.46e-06  1.70e-01  
 19  +4.9485e-01  +5.3246e-01  3.76e-02  1.86e-06  1.01e-03  1.28e-04  5.81e-06  4.93e-01  
 20  +4.9479e-01  +5.3196e-01  3.72e-02  1.83e-06  9.98e-04  1.14e-04  5.74e-06  8.47e-02  
 21  +4.9447e-01  +5.3035e-01  3.59e-02  1.76e-06  9.60e-04  9.45e-05  5.53e-06  1.44e-01  
 22  +4.9417e-01  +5.2889e-01  3.47e-02  1.71e-06  9.28e-04  7.87e-05  5.36e-06  1.33e-01  
 23  +4.9331e-01  +5.2533e-01  3.20e-02  1.53e-06  8.32e-04  6.89e-05  4.83e-06  1.36e-01  
 24  +4.9139e-01  +5.1744e-01  2.60e-02  1.17e-06  6.36e-04  4.42e-05  3.73e-06  3.59e-01  
 25  +4.9134e-01  +5.1690e-01  2.56e-02  1.14e-06  6.20e-04  3.30e-05  3.63e-06  2.24e-01  
 26  +4.8989e-01  +5.1112e-01  2.12e-02  9.06e-07  4.93e-04  2.14e-05  2.91e-06  3.47e-01  
 27  +4.8988e-01  +5.1092e-01  2.10e-02  8.83e-07  4.81e-04  1.62e-05  2.83e-06  2.38e-01  
 28  +4.8706e-01  +5.0025e-01  1.32e-02  5.19e-07  2.82e-04  8.43e-06  1.69e-06  4.82e-01  
 29  +4.8447e-01  +4.9058e-01  6.11e-03  2.22e-07  1.21e-04  1.22e-06  7.38e-07  8.53e-01  
 30  +4.8262e-01  +4.8414e-01  1.52e-03  5.28e-08  2.87e-05  2.41e-07  1.80e-07  8.10e-01  
 31  +4.8201e-01  +4.8207e-01  6.10e-05  2.09e-09  1.13e-06  2.93e-09  7.19e-09  9.90e-01  
 32  +4.8198e-01  +4.8198e-01  6.14e-07  2.10e-11  1.14e-08  2.95e-11  7.23e-11  9.90e-01  
 33  +4.8198e-01  +4.8198e-01  6.14e-09  2.10e-13  1.14e-10  2.95e-13  7.23e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.136845s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:42 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:42 PM: Optimal value: 4.820e-01
(CVXPY) Sep 20 08:09:42 PM: Compilation took 2.111e-01 seconds
(CVXPY) Sep 20 08:09:42 PM: Solver (including time spent in interface) took 1.187e+00 seconds
Iteration: 9, Objective: 0.4820
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:42 PM: Your problem has 25109 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:42 PM: Finished problem compilation (took 2.380e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25109
  constraints   = 50109
  nnz(P)        = 0
  nnz(A)        = 413784
  cones (total) = 1
    : Nonnegative = 1,  numel = 50109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8091e-01  +5.4249e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3203e-01  +6.1436e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6038e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.61e-01  
  4  +5.0136e-01  +1.7623e+01  1.71e+01  4.71e-02  2.45e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4600e+00  9.60e-01  2.87e-03  1.55e+00  2.21e-05  1.94e-01  1.26e-01  
  6  +5.0001e-01  +8.5267e-01  3.53e-01  1.05e-03  5.71e-01  7.17e-06  9.76e-02  5.84e-01  
  7  +5.0001e-01  +6.9595e-01  1.96e-01  5.85e-04  3.17e-01  3.82e-06  5.71e-02  5.36e-01  
  8  +5.0000e-01  +6.1575e-01  1.16e-01  3.45e-04  1.87e-01  2.36e-06  3.00e-02  5.78e-01  
  9  +5.0000e-01  +5.9889e-01  9.89e-02  2.95e-04  1.60e-01  1.97e-06  1.61e-02  7.06e-01  
 10  +5.0000e-01  +5.9405e-01  9.40e-02  2.79e-04  1.51e-01  1.23e-06  7.20e-03  9.90e-01  
 11  +4.9998e-01  +5.6758e-01  6.76e-02  1.17e-04  6.37e-02  1.01e-05  5.01e-04  9.41e-01  
 12  +4.9935e-01  +5.6494e-01  6.56e-02  5.30e-06  2.88e-03  2.92e-04  1.65e-05  9.67e-01  
 13  +4.9910e-01  +5.6057e-01  6.15e-02  4.72e-06  2.57e-03  2.45e-04  1.46e-05  2.40e-01  
 14  +4.9888e-01  +5.5729e-01  5.84e-02  4.18e-06  2.28e-03  2.09e-04  1.29e-05  2.51e-01  
 15  +4.9867e-01  +5.5448e-01  5.58e-02  3.70e-06  2.01e-03  1.75e-04  1.14e-05  2.74e-01  
 16  +4.9853e-01  +5.5272e-01  5.42e-02  3.52e-06  1.92e-03  1.48e-04  1.09e-05  1.68e-01  
 17  +4.9777e-01  +5.4532e-01  4.75e-02  3.05e-06  1.66e-03  4.38e-05  9.47e-06  6.37e-01  
 18  +4.9549e-01  +5.3535e-01  3.99e-02  2.08e-06  1.13e-03  3.13e-05  6.52e-06  4.99e-01  
 19  +4.9497e-01  +5.3311e-01  3.81e-02  1.96e-06  1.06e-03  2.56e-05  6.16e-06  1.66e-01  
 20  +4.9451e-01  +5.3105e-01  3.65e-02  1.87e-06  1.02e-03  1.66e-05  5.91e-06  2.84e-01  
 21  +4.9136e-01  +5.1829e-01  2.69e-02  1.26e-06  6.83e-04  1.78e-07  4.04e-06  8.59e-01  
 22  +4.8659e-01  +5.0033e-01  1.37e-02  5.47e-07  2.97e-04  1.28e-07  1.80e-06  9.90e-01  
 23  +4.8281e-01  +4.8673e-01  3.92e-03  1.45e-07  7.88e-05  3.61e-08  4.91e-07  7.79e-01  
 24  +4.8216e-01  +4.8447e-01  2.30e-03  8.34e-08  4.54e-05  2.29e-08  2.86e-07  5.31e-01  
 25  +4.8134e-01  +4.8162e-01  2.78e-04  9.86e-09  5.36e-06  2.84e-09  3.43e-08  8.95e-01  
 26  +4.8122e-01  +4.8123e-01  7.24e-06  2.53e-10  1.38e-07  8.01e-11  8.94e-10  9.82e-01  
 27  +4.8122e-01  +4.8122e-01  7.24e-08  2.53e-12  1.38e-09  8.02e-13  8.95e-12  9.90e-01  
 28  +4.8122e-01  +4.8122e-01  7.35e-10  2.58e-14  1.40e-11  1.44e-14  1.56e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0981383s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:43 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:43 PM: Optimal value: 4.812e-01
(CVXPY) Sep 20 08:09:43 PM: Compilation took 2.380e-01 seconds
(CVXPY) Sep 20 08:09:43 PM: Solver (including time spent in interface) took 1.154e+00 seconds
Iteration: 10, Objective: 0.4812
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:43 PM: Your problem has 25119 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:44 PM: Finished problem compilation (took 2.199e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25119
  constraints   = 50119
  nnz(P)        = 0
  nnz(A)        = 418602
  cones (total) = 1
    : Nonnegative = 1,  numel = 50119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8091e-01  +5.4250e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3202e-01  +6.1430e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6036e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7624e+01  1.71e+01  4.71e-02  2.45e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4451e+00  9.45e-01  2.82e-03  1.53e+00  2.21e-05  1.94e-01  1.28e-01  
  6  +5.0001e-01  +7.9171e-01  2.92e-01  8.71e-04  4.72e-01  5.84e-06  8.41e-02  6.42e-01  
  7  +5.0001e-01  +6.5106e-01  1.51e-01  4.51e-04  2.45e-01  2.88e-06  4.33e-02  6.38e-01  
  8  +5.0000e-01  +6.0655e-01  1.07e-01  3.18e-04  1.73e-01  2.18e-06  2.32e-02  6.04e-01  
  9  +5.0000e-01  +6.0374e-01  1.04e-01  3.09e-04  1.68e-01  2.15e-06  1.49e-02  5.56e-01  
 10  +5.0000e-01  +5.8212e-01  8.21e-02  2.40e-04  1.30e-01  4.74e-06  3.91e-03  7.54e-01  
 11  +4.9963e-01  +5.6387e-01  6.42e-02  2.32e-05  1.26e-02  1.72e-04  7.49e-05  9.89e-01  
 12  +4.9855e-01  +5.5912e-01  6.06e-02  6.09e-06  3.31e-03  5.87e-04  1.91e-05  7.86e-01  
 13  +4.9853e-01  +5.5744e-01  5.89e-02  5.54e-06  3.02e-03  5.04e-04  1.73e-05  2.47e-01  
 14  +4.9806e-01  +5.5458e-01  5.65e-02  4.39e-06  2.39e-03  5.05e-04  1.37e-05  3.22e-01  
 15  +4.9727e-01  +5.5025e-01  5.30e-02  3.45e-06  1.88e-03  4.63e-04  1.08e-05  3.46e-01  
 16  +4.9724e-01  +5.4986e-01  5.26e-02  3.44e-06  1.87e-03  4.35e-04  1.08e-05  4.79e-02  
 17  +4.9564e-01  +5.4106e-01  4.54e-02  2.56e-06  1.40e-03  2.28e-04  8.09e-06  5.78e-01  
 18  +4.9361e-01  +5.3244e-01  3.88e-02  1.99e-06  1.09e-03  1.71e-04  6.36e-06  3.15e-01  
 19  +4.9172e-01  +5.2437e-01  3.27e-02  1.58e-06  8.62e-04  8.98e-05  5.10e-06  4.39e-01  
 20  +4.8990e-01  +5.1654e-01  2.66e-02  1.20e-06  6.55e-04  9.59e-07  3.91e-06  8.61e-01  
 21  +4.8628e-01  +5.0275e-01  1.65e-02  6.80e-07  3.70e-04  4.95e-07  2.25e-06  5.22e-01  
 22  +4.8584e-01  +5.0113e-01  1.53e-02  6.21e-07  3.38e-04  4.46e-07  2.06e-06  1.29e-01  
 23  +4.8576e-01  +5.0082e-01  1.51e-02  6.12e-07  3.33e-04  3.88e-07  2.04e-06  1.69e-01  
 24  +4.8349e-01  +4.9237e-01  8.88e-03  3.43e-07  1.87e-04  1.94e-07  1.16e-06  5.72e-01  
 25  +4.8335e-01  +4.9189e-01  8.54e-03  3.23e-07  1.76e-04  1.69e-07  1.09e-06  2.78e-01  
 26  +4.8057e-01  +4.8183e-01  1.26e-03  4.57e-08  2.49e-05  2.07e-08  1.59e-07  8.95e-01  
 27  +4.8007e-01  +4.8015e-01  7.47e-05  2.66e-09  1.45e-06  1.03e-09  9.54e-09  9.75e-01  
 28  +4.8004e-01  +4.8004e-01  7.65e-07  2.73e-11  1.48e-08  1.05e-11  9.79e-11  9.90e-01  
 29  +4.8004e-01  +4.8004e-01  7.65e-09  2.73e-13  1.48e-10  1.05e-13  9.79e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0583865s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:45 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:45 PM: Optimal value: 4.800e-01
(CVXPY) Sep 20 08:09:45 PM: Compilation took 2.199e-01 seconds
(CVXPY) Sep 20 08:09:45 PM: Solver (including time spent in interface) took 1.108e+00 seconds
Iteration: 11, Objective: 0.4800
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:45 PM: Your problem has 25129 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:45 PM: Finished problem compilation (took 2.308e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25129
  constraints   = 50129
  nnz(P)        = 0
  nnz(A)        = 423669
  cones (total) = 1
    : Nonnegative = 1,  numel = 50129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8090e-01  +5.4250e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3202e-01  +6.1427e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6035e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7624e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4476e+00  9.48e-01  2.83e-03  1.53e+00  2.21e-05  1.94e-01  1.28e-01  
  6  +5.0001e-01  +7.7136e-01  2.71e-01  8.10e-04  4.40e-01  5.36e-06  7.92e-02  6.57e-01  
  7  +5.0001e-01  +6.4028e-01  1.40e-01  4.19e-04  2.27e-01  2.60e-06  3.95e-02  6.77e-01  
  8  +5.0000e-01  +6.0358e-01  1.04e-01  3.09e-04  1.68e-01  1.99e-06  2.01e-02  6.93e-01  
  9  +5.0000e-01  +5.8762e-01  8.76e-02  2.60e-04  1.41e-01  2.80e-06  8.02e-03  6.89e-01  
 10  +4.9997e-01  +5.7612e-01  7.61e-02  1.76e-04  9.56e-02  1.57e-05  9.90e-04  9.07e-01  
 11  +4.9919e-01  +5.7018e-01  7.10e-02  1.19e-05  6.49e-03  3.70e-04  3.76e-05  9.68e-01  
 12  +4.9900e-01  +5.6586e-01  6.69e-02  8.52e-06  4.64e-03  3.92e-04  2.67e-05  4.30e-01  
 13  +4.9895e-01  +5.6031e-01  6.14e-02  6.40e-06  3.48e-03  2.97e-04  1.99e-05  5.43e-01  
 14  +4.9824e-01  +5.5374e-01  5.55e-02  3.91e-06  2.13e-03  2.67e-04  1.22e-05  6.78e-01  
 15  +4.9818e-01  +5.5311e-01  5.49e-02  3.87e-06  2.11e-03  2.38e-04  1.20e-05  9.54e-02  
 16  +4.9755e-01  +5.5024e-01  5.27e-02  3.35e-06  1.83e-03  2.31e-04  1.05e-05  1.90e-01  
 17  +4.9716e-01  +5.4767e-01  5.05e-02  3.24e-06  1.76e-03  1.53e-04  1.01e-05  2.76e-01  
 18  +4.9514e-01  +5.3907e-01  4.39e-02  2.39e-06  1.30e-03  1.29e-04  7.54e-06  3.51e-01  
 19  +4.9513e-01  +5.3900e-01  4.39e-02  2.39e-06  1.30e-03  1.28e-04  7.54e-06  9.57e-03  
 20  +4.9311e-01  +5.3044e-01  3.73e-02  1.90e-06  1.04e-03  7.79e-05  6.08e-06  3.81e-01  
 21  +4.9108e-01  +5.2208e-01  3.10e-02  1.48e-06  8.08e-04  3.85e-05  4.80e-06  4.69e-01  
 22  +4.8941e-01  +5.1511e-01  2.57e-02  1.15e-06  6.23e-04  4.11e-07  3.73e-06  8.72e-01  
 23  +4.8494e-01  +4.9801e-01  1.31e-02  5.27e-07  2.87e-04  1.86e-07  1.76e-06  6.04e-01  
 24  +4.8486e-01  +4.9776e-01  1.29e-02  5.15e-07  2.80e-04  1.80e-07  1.72e-06  1.21e-01  
 25  +4.8273e-01  +4.8970e-01  6.97e-03  2.61e-07  1.42e-04  8.19e-08  8.79e-07  9.71e-01  
 26  +4.8065e-01  +4.8216e-01  1.51e-03  5.54e-08  3.01e-05  1.82e-08  1.90e-07  8.97e-01  
 27  +4.8011e-01  +4.8027e-01  1.66e-04  6.01e-09  3.27e-06  2.05e-09  2.11e-08  9.66e-01  
 28  +4.8004e-01  +4.8004e-01  1.85e-06  6.68e-11  3.64e-08  2.28e-11  2.35e-10  9.89e-01  
 29  +4.8004e-01  +4.8004e-01  1.85e-08  6.69e-13  3.64e-10  2.28e-13  2.35e-12  9.90e-01  
 30  +4.8004e-01  +4.8004e-01  2.21e-10  8.05e-15  4.35e-12  3.55e-15  3.60e-14  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1945637s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:46 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:46 PM: Optimal value: 4.800e-01
(CVXPY) Sep 20 08:09:46 PM: Compilation took 2.308e-01 seconds
(CVXPY) Sep 20 08:09:46 PM: Solver (including time spent in interface) took 1.252e+00 seconds
Iteration: 12, Objective: 0.4800
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:47 PM: Your problem has 25139 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:47 PM: Finished problem compilation (took 2.447e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25139
  constraints   = 50139
  nnz(P)        = 0
  nnz(A)        = 427409
  cones (total) = 1
    : Nonnegative = 1,  numel = 50139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8090e-01  +5.4250e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3202e-01  +6.1424e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0906e-01  +1.6033e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7623e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4363e+00  9.36e-01  2.80e-03  1.51e+00  2.22e-05  1.94e-01  1.30e-01  
  6  +5.0001e-01  +7.8873e-01  2.89e-01  8.62e-04  4.68e-01  5.83e-06  8.33e-02  6.46e-01  
  7  +5.0001e-01  +6.6322e-01  1.63e-01  4.87e-04  2.65e-01  3.10e-06  4.60e-02  6.14e-01  
  8  +5.0000e-01  +6.0513e-01  1.05e-01  3.14e-04  1.70e-01  2.37e-06  2.33e-02  5.62e-01  
  9  +5.0000e-01  +5.8772e-01  8.77e-02  2.61e-04  1.42e-01  3.24e-06  8.78e-03  7.46e-01  
 10  +4.9996e-01  +5.7513e-01  7.52e-02  1.64e-04  8.89e-02  2.07e-05  8.53e-04  9.90e-01  
 11  +4.9894e-01  +5.7171e-01  7.28e-02  1.10e-05  5.97e-03  4.80e-04  3.47e-05  9.60e-01  
 12  +4.9837e-01  +5.6754e-01  6.92e-02  7.00e-06  3.81e-03  6.24e-04  2.20e-05  4.40e-01  
 13  +4.9804e-01  +5.6189e-01  6.39e-02  5.27e-06  2.87e-03  5.43e-04  1.65e-05  4.48e-01  
 14  +4.9760e-01  +5.5847e-01  6.09e-02  4.49e-06  2.45e-03  5.00e-04  1.41e-05  2.52e-01  
 15  +4.9610e-01  +5.4484e-01  4.87e-02  2.92e-06  1.59e-03  1.33e-04  9.22e-06  8.47e-01  
 16  +4.9436e-01  +5.3655e-01  4.22e-02  2.41e-06  1.31e-03  2.09e-05  7.71e-06  7.22e-01  
 17  +4.9314e-01  +5.3160e-01  3.85e-02  2.08e-06  1.13e-03  8.84e-06  6.67e-06  5.25e-01  
 18  +4.9220e-01  +5.2791e-01  3.57e-02  1.85e-06  1.01e-03  6.81e-06  5.98e-06  2.38e-01  
 19  +4.8969e-01  +5.1812e-01  2.84e-02  1.34e-06  7.30e-04  3.69e-06  4.38e-06  4.75e-01  
 20  +4.8761e-01  +5.0995e-01  2.23e-02  9.54e-07  5.19e-04  4.05e-08  3.14e-06  9.45e-01  
 21  +4.8532e-01  +5.0126e-01  1.59e-02  6.46e-07  3.52e-04  5.87e-08  2.16e-06  4.52e-01  
 22  +4.8521e-01  +5.0088e-01  1.57e-02  6.41e-07  3.49e-04  6.41e-08  2.15e-06  6.10e-02  
 23  +4.8419e-01  +4.9689e-01  1.27e-02  5.05e-07  2.75e-04  8.58e-08  1.70e-06  4.93e-01  
 24  +4.8276e-01  +4.9151e-01  8.74e-03  3.35e-07  1.82e-04  8.03e-08  1.13e-06  6.39e-01  
 25  +4.8046e-01  +4.8297e-01  2.51e-03  9.41e-08  5.12e-05  2.50e-08  3.25e-07  8.05e-01  
 26  +4.7989e-01  +4.8089e-01  1.00e-03  3.72e-08  2.02e-05  1.07e-08  1.30e-07  7.07e-01  
 27  +4.7965e-01  +4.8006e-01  4.11e-04  1.48e-08  8.05e-06  4.79e-09  5.22e-08  7.78e-01  
 28  +4.7949e-01  +4.7951e-01  1.84e-05  6.54e-10  3.56e-07  2.21e-10  2.33e-09  9.62e-01  
 29  +4.7948e-01  +4.7948e-01  1.86e-07  6.58e-12  3.58e-09  2.23e-12  2.35e-11  9.90e-01  
 30  +4.7948e-01  +4.7948e-01  1.86e-09  6.58e-14  3.58e-11  2.23e-14  2.35e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.186905s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:48 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:48 PM: Optimal value: 4.795e-01
(CVXPY) Sep 20 08:09:48 PM: Compilation took 2.447e-01 seconds
(CVXPY) Sep 20 08:09:48 PM: Solver (including time spent in interface) took 1.238e+00 seconds
Iteration: 13, Objective: 0.4795
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:48 PM: Your problem has 25149 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:49 PM: Finished problem compilation (took 2.635e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25149
  constraints   = 50149
  nnz(P)        = 0
  nnz(A)        = 431143
  cones (total) = 1
    : Nonnegative = 1,  numel = 50149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8090e-01  +5.4250e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3201e-01  +6.1417e+02  6.14e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0906e-01  +1.6031e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7623e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4447e+00  9.45e-01  2.82e-03  1.53e+00  2.22e-05  1.94e-01  1.29e-01  
  6  +5.0001e-01  +8.1866e-01  3.19e-01  9.52e-04  5.16e-01  6.55e-06  8.98e-02  6.12e-01  
  7  +5.0001e-01  +6.5422e-01  1.54e-01  4.60e-04  2.50e-01  3.08e-06  4.35e-02  6.63e-01  
  8  +5.0000e-01  +6.0301e-01  1.03e-01  3.07e-04  1.67e-01  2.47e-06  2.03e-02  6.57e-01  
  9  +5.0000e-01  +5.9411e-01  9.41e-02  2.79e-04  1.52e-01  3.91e-06  7.98e-03  7.10e-01  
 10  +4.9999e-01  +5.8569e-01  8.57e-02  2.38e-04  1.29e-01  6.72e-06  2.29e-03  9.90e-01  
 11  +4.9942e-01  +5.8139e-01  8.20e-02  1.65e-05  8.98e-03  2.65e-04  5.24e-05  9.78e-01  
 12  +4.9885e-01  +5.7729e-01  7.84e-02  8.79e-06  4.79e-03  4.44e-04  2.76e-05  5.08e-01  
 13  +4.9865e-01  +5.7261e-01  7.40e-02  7.07e-06  3.85e-03  4.14e-04  2.22e-05  3.33e-01  
 14  +4.9829e-01  +5.6630e-01  6.80e-02  5.49e-06  2.99e-03  3.37e-04  1.72e-05  4.38e-01  
 15  +4.9820e-01  +5.6133e-01  6.31e-02  4.98e-06  2.71e-03  1.83e-04  1.56e-05  4.46e-01  
 16  +4.9802e-01  +5.5947e-01  6.14e-02  4.74e-06  2.58e-03  1.48e-04  1.49e-05  2.05e-01  
 17  +4.9655e-01  +5.5104e-01  5.45e-02  3.44e-06  1.87e-03  9.72e-05  1.09e-05  5.57e-01  
 18  +4.9441e-01  +5.4093e-01  4.65e-02  2.64e-06  1.44e-03  5.14e-05  8.43e-06  5.02e-01  
 19  +4.9384e-01  +5.3847e-01  4.46e-02  2.48e-06  1.35e-03  4.38e-05  7.93e-06  1.50e-01  
 20  +4.9315e-01  +5.3526e-01  4.21e-02  2.30e-06  1.25e-03  1.93e-05  7.38e-06  4.66e-01  
 21  +4.9187e-01  +5.3002e-01  3.81e-02  1.98e-06  1.08e-03  1.48e-05  6.40e-06  2.49e-01  
 22  +4.9157e-01  +5.2876e-01  3.72e-02  1.89e-06  1.03e-03  1.10e-05  6.13e-06  2.32e-01  
 23  +4.8853e-01  +5.1656e-01  2.80e-02  1.29e-06  7.02e-04  3.97e-06  4.24e-06  6.18e-01  
 24  +4.8708e-01  +5.1072e-01  2.36e-02  1.02e-06  5.54e-04  4.00e-07  3.38e-06  8.60e-01  
 25  +4.8550e-01  +5.0460e-01  1.91e-02  7.93e-07  4.32e-04  2.91e-07  2.66e-06  3.88e-01  
 26  +4.8537e-01  +5.0409e-01  1.87e-02  7.77e-07  4.23e-04  2.64e-07  2.61e-06  2.31e-01  
 27  +4.8370e-01  +4.9766e-01  1.40e-02  5.67e-07  3.08e-04  1.91e-07  1.92e-06  3.22e-01  
 28  +4.8229e-01  +4.9217e-01  9.88e-03  3.91e-07  2.13e-04  1.28e-07  1.34e-06  5.15e-01  
 29  +4.8165e-01  +4.8973e-01  8.08e-03  3.12e-07  1.70e-04  1.02e-07  1.07e-06  5.19e-01  
 30  +4.8011e-01  +4.8386e-01  3.75e-03  1.44e-07  7.82e-05  4.68e-08  4.99e-07  6.01e-01  
 31  +4.7928e-01  +4.8069e-01  1.42e-03  5.38e-08  2.93e-05  1.74e-08  1.88e-07  9.10e-01  
 32  +4.7881e-01  +4.7898e-01  1.68e-04  6.37e-09  3.47e-06  2.08e-09  2.23e-08  9.04e-01  
 33  +4.7875e-01  +4.7875e-01  3.19e-06  1.21e-10  6.58e-08  3.88e-11  4.24e-10  9.90e-01  
 34  +4.7875e-01  +4.7875e-01  3.50e-08  1.33e-12  7.22e-10  4.26e-13  4.65e-12  9.89e-01  
 35  +4.7875e-01  +4.7875e-01  2.35e-09  8.92e-14  4.86e-11  2.87e-14  3.13e-13  9.33e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3233284s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:50 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:50 PM: Optimal value: 4.787e-01
(CVXPY) Sep 20 08:09:50 PM: Compilation took 2.635e-01 seconds
(CVXPY) Sep 20 08:09:50 PM: Solver (including time spent in interface) took 1.378e+00 seconds
Iteration: 14, Objective: 0.4787
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:50 PM: Your problem has 25159 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:51 PM: Finished problem compilation (took 2.477e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25159
  constraints   = 50159
  nnz(P)        = 0
  nnz(A)        = 433737
  cones (total) = 1
    : Nonnegative = 1,  numel = 50159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8088e-01  +5.4252e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3200e-01  +6.1407e+02  6.14e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6029e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7626e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4466e+00  9.47e-01  2.83e-03  1.53e+00  2.22e-05  1.94e-01  1.29e-01  
  6  +5.0001e-01  +8.1206e-01  3.12e-01  9.32e-04  5.06e-01  6.39e-06  8.81e-02  6.21e-01  
  7  +5.0001e-01  +6.5224e-01  1.52e-01  4.55e-04  2.47e-01  2.94e-06  4.18e-02  7.11e-01  
  8  +5.0000e-01  +6.1895e-01  1.19e-01  3.55e-04  1.93e-01  2.62e-06  2.37e-02  5.48e-01  
  9  +5.0000e-01  +6.0198e-01  1.02e-01  3.03e-04  1.65e-01  3.63e-06  9.85e-03  6.74e-01  
 10  +4.9999e-01  +5.9167e-01  9.17e-02  2.48e-04  1.35e-01  9.13e-06  2.10e-03  9.90e-01  
 11  +4.9911e-01  +5.8559e-01  8.65e-02  1.33e-05  7.24e-03  4.07e-04  4.22e-05  9.81e-01  
 12  +4.9844e-01  +5.8010e-01  8.17e-02  8.12e-06  4.42e-03  5.65e-04  2.56e-05  4.37e-01  
 13  +4.9846e-01  +5.7357e-01  7.51e-02  6.95e-06  3.79e-03  4.05e-04  2.19e-05  3.77e-01  
 14  +4.9805e-01  +5.6893e-01  7.09e-02  5.57e-06  3.03e-03  3.71e-04  1.75e-05  3.41e-01  
 15  +4.9795e-01  +5.6510e-01  6.71e-02  5.27e-06  2.87e-03  2.57e-04  1.66e-05  2.80e-01  
 16  +4.9645e-01  +5.5716e-01  6.07e-02  3.84e-06  2.09e-03  2.54e-04  1.21e-05  3.40e-01  
 17  +4.9521e-01  +5.5070e-01  5.55e-02  3.28e-06  1.78e-03  2.12e-04  1.04e-05  2.28e-01  
 18  +4.9265e-01  +5.3809e-01  4.54e-02  2.43e-06  1.32e-03  1.32e-04  7.85e-06  4.08e-01  
 19  +4.9229e-01  +5.3626e-01  4.40e-02  2.32e-06  1.26e-03  1.14e-04  7.50e-06  1.33e-01  
 20  +4.9054e-01  +5.2682e-01  3.63e-02  1.81e-06  9.84e-04  1.19e-06  5.91e-06  8.38e-01  
 21  +4.9025e-01  +5.2564e-01  3.54e-02  1.74e-06  9.48e-04  9.52e-07  5.70e-06  2.29e-01  
 22  +4.8741e-01  +5.1431e-01  2.69e-02  1.22e-06  6.65e-04  6.32e-07  4.07e-06  3.94e-01  
 23  +4.8682e-01  +5.1188e-01  2.51e-02  1.11e-06  6.03e-04  4.88e-07  3.69e-06  3.26e-01  
 24  +4.8527e-01  +5.0586e-01  2.06e-02  8.72e-07  4.75e-04  3.58e-07  2.94e-06  3.54e-01  
 25  +4.8499e-01  +5.0465e-01  1.97e-02  8.21e-07  4.47e-04  3.09e-07  2.77e-06  2.71e-01  
 26  +4.8275e-01  +4.9603e-01  1.33e-02  5.33e-07  2.90e-04  1.88e-07  1.83e-06  5.05e-01  
 27  +4.7982e-01  +4.8480e-01  4.98e-03  1.90e-07  1.03e-04  5.60e-08  6.70e-07  9.66e-01  
 28  +4.7837e-01  +4.7948e-01  1.12e-03  4.18e-08  2.27e-05  1.31e-08  1.53e-07  9.90e-01  
 29  +4.7793e-01  +4.7796e-01  2.52e-05  9.32e-10  5.07e-07  2.81e-10  3.48e-09  9.85e-01  
 30  +4.7792e-01  +4.7792e-01  1.39e-06  5.14e-11  2.80e-08  1.58e-11  1.92e-10  9.72e-01  
 31  +4.7792e-01  +4.7792e-01  1.40e-08  5.18e-13  2.82e-10  1.59e-13  1.93e-12  9.90e-01  
 32  +4.7792e-01  +4.7792e-01  1.41e-10  5.28e-15  2.84e-12  2.15e-15  2.58e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1975152s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:52 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:52 PM: Optimal value: 4.779e-01
(CVXPY) Sep 20 08:09:52 PM: Compilation took 2.477e-01 seconds
(CVXPY) Sep 20 08:09:52 PM: Solver (including time spent in interface) took 1.250e+00 seconds
Iteration: 15, Objective: 0.4779
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:52 PM: Your problem has 25169 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:52 PM: Finished problem compilation (took 2.530e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25169
  constraints   = 50169
  nnz(P)        = 0
  nnz(A)        = 436787
  cones (total) = 1
    : Nonnegative = 1,  numel = 50169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8087e-01  +5.4254e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3199e-01  +6.1398e+02  6.13e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6027e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7630e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4419e+00  9.42e-01  2.81e-03  1.52e+00  2.22e-05  1.94e-01  1.30e-01  
  6  +5.0001e-01  +7.9304e-01  2.93e-01  8.75e-04  4.75e-01  5.97e-06  8.36e-02  6.41e-01  
  7  +5.0001e-01  +7.0302e-01  2.03e-01  6.06e-04  3.29e-01  4.01e-06  5.53e-02  4.77e-01  
  8  +5.0001e-01  +6.4509e-01  1.45e-01  4.33e-04  2.35e-01  2.97e-06  3.19e-02  5.64e-01  
  9  +5.0000e-01  +6.0632e-01  1.06e-01  3.17e-04  1.72e-01  3.30e-06  1.21e-02  7.39e-01  
 10  +4.9997e-01  +5.9182e-01  9.18e-02  2.33e-04  1.26e-01  1.61e-05  1.59e-03  9.25e-01  
 11  +4.9902e-01  +5.8457e-01  8.55e-02  1.60e-05  8.71e-03  4.44e-04  5.14e-05  9.72e-01  
 12  +4.9842e-01  +5.7751e-01  7.91e-02  9.48e-06  5.16e-03  5.70e-04  3.01e-05  5.22e-01  
 13  +4.9789e-01  +5.7249e-01  7.46e-02  6.96e-06  3.79e-03  5.89e-04  2.21e-05  3.87e-01  
 14  +4.9801e-01  +5.7077e-01  7.28e-02  6.68e-06  3.64e-03  4.77e-04  2.11e-05  2.03e-01  
 15  +4.9778e-01  +5.6821e-01  7.04e-02  5.88e-06  3.21e-03  4.28e-04  1.86e-05  2.46e-01  
 16  +4.9786e-01  +5.6487e-01  6.70e-02  5.61e-06  3.06e-03  2.38e-04  1.77e-05  3.98e-01  
 17  +4.9690e-01  +5.5929e-01  6.24e-02  4.43e-06  2.41e-03  1.95e-04  1.40e-05  3.99e-01  
 18  +4.9422e-01  +5.4642e-01  5.22e-02  2.95e-06  1.61e-03  1.49e-04  9.47e-06  4.86e-01  
 19  +4.9333e-01  +5.4191e-01  4.86e-02  2.71e-06  1.48e-03  9.28e-05  8.73e-06  3.13e-01  
 20  +4.9251e-01  +5.3772e-01  4.52e-02  2.48e-06  1.35e-03  4.03e-05  8.04e-06  4.69e-01  
 21  +4.9134e-01  +5.3267e-01  4.13e-02  2.17e-06  1.18e-03  2.95e-05  7.08e-06  2.66e-01  
 22  +4.9018e-01  +5.2763e-01  3.74e-02  1.86e-06  1.01e-03  1.06e-05  6.10e-06  5.78e-01  
 23  +4.8869e-01  +5.2131e-01  3.26e-02  1.52e-06  8.30e-04  1.12e-07  5.02e-06  8.78e-01  
 24  +4.8438e-01  +5.0423e-01  1.99e-02  8.34e-07  4.54e-04  1.81e-07  2.82e-06  9.41e-01  
 25  +4.8326e-01  +4.9984e-01  1.66e-02  6.77e-07  3.69e-04  1.56e-07  2.30e-06  3.38e-01  
 26  +4.8310e-01  +4.9924e-01  1.61e-02  6.53e-07  3.55e-04  1.55e-07  2.22e-06  1.26e-01  
 27  +4.8206e-01  +4.9511e-01  1.30e-02  5.10e-07  2.77e-04  1.39e-07  1.74e-06  6.72e-01  
 28  +4.8174e-01  +4.9391e-01  1.22e-02  4.74e-07  2.58e-04  1.31e-07  1.62e-06  1.45e-01  
 29  +4.8105e-01  +4.9122e-01  1.02e-02  3.85e-07  2.10e-04  1.20e-07  1.33e-06  8.90e-01  
 30  +4.7910e-01  +4.8406e-01  4.97e-03  1.84e-07  1.00e-04  5.92e-08  6.50e-07  6.48e-01  
 31  +4.7897e-01  +4.8356e-01  4.59e-03  1.70e-07  9.27e-05  5.51e-08  6.02e-07  3.33e-01  
 32  +4.7804e-01  +4.8019e-01  2.15e-03  7.90e-08  4.30e-05  2.62e-08  2.84e-07  8.18e-01  
 33  +4.7753e-01  +4.7838e-01  8.52e-04  3.11e-08  1.69e-05  1.04e-08  1.13e-07  9.90e-01  
 34  +4.7720e-01  +4.7723e-01  3.87e-05  1.41e-09  7.65e-07  4.69e-10  5.14e-09  9.65e-01  
 35  +4.7718e-01  +4.7718e-01  3.88e-07  1.41e-11  7.68e-09  4.71e-12  5.16e-11  9.90e-01  
 36  +4.7718e-01  +4.7718e-01  3.90e-09  1.41e-13  7.70e-11  5.52e-14  6.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4158795s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:54 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:54 PM: Optimal value: 4.772e-01
(CVXPY) Sep 20 08:09:54 PM: Compilation took 2.530e-01 seconds
(CVXPY) Sep 20 08:09:54 PM: Solver (including time spent in interface) took 1.472e+00 seconds
Iteration: 16, Objective: 0.4772
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:54 PM: Your problem has 25179 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:54 PM: Finished problem compilation (took 2.526e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25179
  constraints   = 50179
  nnz(P)        = 0
  nnz(A)        = 440288
  cones (total) = 1
    : Nonnegative = 1,  numel = 50179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8087e-01  +5.4253e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3199e-01  +6.1398e+02  6.13e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6026e+02  1.60e+02  1.50e-01  7.85e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0136e-01  +1.7629e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4450e+00  9.45e-01  2.82e-03  1.53e+00  2.23e-05  1.94e-01  1.30e-01  
  6  +5.0001e-01  +7.9829e-01  2.98e-01  8.91e-04  4.83e-01  6.06e-06  8.46e-02  6.47e-01  
  7  +5.0001e-01  +7.0836e-01  2.08e-01  6.22e-04  3.38e-01  4.06e-06  5.63e-02  4.83e-01  
  8  +5.0000e-01  +6.3643e-01  1.36e-01  4.07e-04  2.21e-01  2.92e-06  2.97e-02  5.88e-01  
  9  +5.0000e-01  +6.0269e-01  1.03e-01  3.06e-04  1.66e-01  3.76e-06  1.04e-02  7.62e-01  
 10  +4.9996e-01  +5.9457e-01  9.46e-02  2.21e-04  1.20e-01  1.98e-05  1.27e-03  9.90e-01  
 11  +4.9884e-01  +5.8920e-01  9.04e-02  1.39e-05  7.57e-03  5.24e-04  4.45e-05  9.65e-01  
 12  +4.9843e-01  +5.8233e-01  8.39e-02  9.75e-06  5.32e-03  5.64e-04  3.10e-05  4.14e-01  
 13  +4.9800e-01  +5.7518e-01  7.72e-02  7.14e-06  3.89e-03  5.15e-04  2.26e-05  4.45e-01  
 14  +4.9806e-01  +5.7134e-01  7.33e-02  6.28e-06  3.42e-03  3.69e-04  1.98e-05  3.79e-01  
 15  +4.9810e-01  +5.6940e-01  7.13e-02  6.03e-06  3.29e-03  2.82e-04  1.90e-05  2.35e-01  
 16  +4.9766e-01  +5.6569e-01  6.80e-02  5.23e-06  2.85e-03  2.28e-04  1.65e-05  3.18e-01  
 17  +4.9497e-01  +5.5247e-01  5.75e-02  3.17e-06  1.73e-03  2.20e-04  1.01e-05  5.00e-01  
 18  +4.9251e-01  +5.4032e-01  4.78e-02  2.53e-06  1.38e-03  1.15e-04  8.19e-06  4.15e-01  
 19  +4.8991e-01  +5.2826e-01  3.84e-02  1.90e-06  1.04e-03  2.81e-05  6.24e-06  6.59e-01  
 20  +4.8850e-01  +5.2237e-01  3.39e-02  1.60e-06  8.73e-04  1.86e-05  5.29e-06  3.35e-01  
 21  +4.8800e-01  +5.2018e-01  3.22e-02  1.49e-06  8.11e-04  1.08e-05  4.95e-06  3.80e-01  
 22  +4.8665e-01  +5.1462e-01  2.80e-02  1.24e-06  6.77e-04  4.74e-06  4.16e-06  5.26e-01  
 23  +4.8301e-01  +5.0021e-01  1.72e-02  7.13e-07  3.88e-04  1.84e-06  2.43e-06  6.10e-01  
 24  +4.8125e-01  +4.9358e-01  1.23e-02  4.90e-07  2.67e-04  1.13e-06  1.69e-06  4.11e-01  
 25  +4.7958e-01  +4.8719e-01  7.62e-03  2.89e-07  1.58e-04  3.09e-07  1.02e-06  7.79e-01  
 26  +4.7849e-01  +4.8314e-01  4.65e-03  1.74e-07  9.46e-05  9.12e-08  6.18e-07  8.38e-01  
 27  +4.7760e-01  +4.7991e-01  2.30e-03  8.51e-08  4.63e-05  2.85e-08  3.07e-07  9.90e-01  
 28  +4.7683e-01  +4.7721e-01  3.75e-04  1.37e-08  7.48e-06  4.58e-09  5.05e-08  8.90e-01  
 29  +4.7669e-01  +4.7670e-01  1.67e-05  6.09e-10  3.32e-07  1.99e-10  2.25e-09  9.90e-01  
 30  +4.7668e-01  +4.7668e-01  1.67e-07  6.10e-12  3.32e-09  2.00e-12  2.25e-11  9.90e-01  
 31  +4.7668e-01  +4.7668e-01  1.67e-09  6.11e-14  3.33e-11  2.30e-14  2.57e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1458027s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:55 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:55 PM: Optimal value: 4.767e-01
(CVXPY) Sep 20 08:09:55 PM: Compilation took 2.526e-01 seconds
(CVXPY) Sep 20 08:09:55 PM: Solver (including time spent in interface) took 1.198e+00 seconds
Iteration: 17, Objective: 0.4767
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:56 PM: Your problem has 25189 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:56 PM: Finished problem compilation (took 2.596e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25189
  constraints   = 50189
  nnz(P)        = 0
  nnz(A)        = 445551
  cones (total) = 1
    : Nonnegative = 1,  numel = 50189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8086e-01  +5.4255e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3198e-01  +6.1388e+02  6.13e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6023e+02  1.60e+02  1.50e-01  7.85e+01  4.52e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7631e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4253e+00  9.25e-01  2.77e-03  1.50e+00  2.23e-05  1.93e-01  1.34e-01  
  6  +5.0001e-01  +8.0814e-01  3.08e-01  9.21e-04  5.00e-01  6.50e-06  8.71e-02  6.18e-01  
  7  +5.0001e-01  +6.9147e-01  1.91e-01  5.72e-04  3.11e-01  3.82e-06  5.08e-02  5.98e-01  
  8  +5.0000e-01  +6.2533e-01  1.25e-01  3.74e-04  2.03e-01  2.99e-06  2.45e-02  6.24e-01  
  9  +5.0000e-01  +6.1654e-01  1.17e-01  3.46e-04  1.88e-01  4.15e-06  1.03e-02  7.41e-01  
 10  +4.9996e-01  +6.0177e-01  1.02e-01  2.38e-04  1.29e-01  2.13e-05  1.38e-03  8.95e-01  
 11  +4.9888e-01  +5.9299e-01  9.41e-02  1.61e-05  8.78e-03  5.05e-04  5.16e-05  9.66e-01  
 12  +4.9872e-01  +5.8067e-01  8.20e-02  1.08e-05  5.86e-03  4.08e-04  3.40e-05  5.94e-01  
 13  +4.9900e-01  +5.7515e-01  7.62e-02  9.51e-06  5.18e-03  2.11e-04  2.99e-05  5.27e-01  
 14  +4.9897e-01  +5.6896e-01  7.00e-02  7.17e-06  3.91e-03  7.35e-05  2.24e-05  8.42e-01  
 15  +4.9873e-01  +5.6732e-01  6.86e-02  6.18e-06  3.37e-03  5.48e-05  1.93e-05  4.33e-01  
 16  +4.9824e-01  +5.6479e-01  6.66e-02  5.07e-06  2.76e-03  4.55e-05  1.58e-05  4.13e-01  
 17  +4.9804e-01  +5.6374e-01  6.57e-02  4.98e-06  2.71e-03  3.92e-05  1.56e-05  1.30e-01  
 18  +4.9550e-01  +5.5226e-01  5.68e-02  3.22e-06  1.75e-03  2.43e-05  1.02e-05  6.83e-01  
 19  +4.9432e-01  +5.4713e-01  5.28e-02  2.91e-06  1.59e-03  1.98e-05  9.25e-06  1.82e-01  
 20  +4.9272e-01  +5.4032e-01  4.76e-02  2.53e-06  1.38e-03  1.46e-05  8.10e-06  2.52e-01  
 21  +4.8977e-01  +5.2790e-01  3.81e-02  1.88e-06  1.02e-03  8.32e-06  6.10e-06  4.25e-01  
 22  +4.8838e-01  +5.2218e-01  3.38e-02  1.59e-06  8.67e-04  5.41e-06  5.20e-06  3.49e-01  
 23  +4.8766e-01  +5.1914e-01  3.15e-02  1.43e-06  7.78e-04  1.34e-06  4.70e-06  6.99e-01  
 24  +4.8471e-01  +5.0721e-01  2.25e-02  9.57e-07  5.21e-04  4.37e-07  3.19e-06  7.31e-01  
 25  +4.8367e-01  +5.0310e-01  1.94e-02  7.95e-07  4.33e-04  2.83e-07  2.66e-06  6.08e-01  
 26  +4.8149e-01  +4.9471e-01  1.32e-02  5.26e-07  2.87e-04  1.87e-07  1.79e-06  3.69e-01  
 27  +4.7873e-01  +4.8413e-01  5.39e-03  2.05e-07  1.12e-04  6.58e-08  7.17e-07  8.75e-01  
 28  +4.7746e-01  +4.7944e-01  1.98e-03  7.36e-08  4.01e-05  2.40e-08  2.64e-07  9.32e-01  
 29  +4.7741e-01  +4.7923e-01  1.82e-03  6.78e-08  3.69e-05  2.21e-08  2.43e-07  3.42e-01  
 30  +4.7678e-01  +4.7704e-01  2.53e-04  9.29e-09  5.06e-06  3.03e-09  3.41e-08  8.84e-01  
 31  +4.7668e-01  +4.7669e-01  1.03e-05  3.76e-10  2.05e-07  1.22e-10  1.39e-09  9.90e-01  
 32  +4.7668e-01  +4.7668e-01  1.03e-07  3.76e-12  2.05e-09  1.22e-12  1.39e-11  9.90e-01  
 33  +4.7668e-01  +4.7668e-01  1.04e-09  3.79e-14  2.06e-11  1.67e-14  1.87e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3452852s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:57 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:57 PM: Optimal value: 4.767e-01
(CVXPY) Sep 20 08:09:57 PM: Compilation took 2.596e-01 seconds
(CVXPY) Sep 20 08:09:57 PM: Solver (including time spent in interface) took 1.400e+00 seconds
Iteration: 18, Objective: 0.4767
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:58 PM: Your problem has 25199 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:09:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:09:58 PM: Finished problem compilation (took 2.746e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25199
  constraints   = 50199
  nnz(P)        = 0
  nnz(A)        = 450443
  cones (total) = 1
    : Nonnegative = 1,  numel = 50199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8086e-01  +5.4255e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3198e-01  +6.1385e+02  6.13e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6023e+02  1.60e+02  1.50e-01  7.85e+01  4.52e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7632e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0002e-01  +1.4198e+00  9.20e-01  2.75e-03  1.49e+00  2.23e-05  1.93e-01  1.35e-01  
  6  +5.0001e-01  +8.0282e-01  3.03e-01  9.05e-04  4.91e-01  6.43e-06  8.59e-02  6.20e-01  
  7  +5.0001e-01  +7.1026e-01  2.10e-01  6.28e-04  3.41e-01  4.23e-06  5.58e-02  5.19e-01  
  8  +5.0000e-01  +6.3585e-01  1.36e-01  4.06e-04  2.20e-01  3.16e-06  2.85e-02  5.81e-01  
  9  +5.0000e-01  +6.2157e-01  1.22e-01  3.62e-04  1.97e-01  3.80e-06  1.36e-02  6.66e-01  
 10  +4.9998e-01  +6.0192e-01  1.02e-01  2.74e-04  1.49e-01  1.16e-05  2.25e-03  9.90e-01  
 11  +4.9901e-01  +5.9471e-01  9.57e-02  1.61e-05  8.78e-03  4.52e-04  5.15e-05  9.78e-01  
 12  +4.9826e-01  +5.8159e-01  8.33e-02  8.59e-06  4.69e-03  5.48e-04  2.72e-05  6.22e-01  
 13  +4.9805e-01  +5.7626e-01  7.82e-02  7.02e-06  3.83e-03  4.45e-04  2.21e-05  3.92e-01  
 14  +4.9770e-01  +5.7312e-01  7.54e-02  5.96e-06  3.25e-03  4.19e-04  1.87e-05  2.59e-01  
 15  +4.9763e-01  +5.7051e-01  7.29e-02  5.68e-06  3.10e-03  3.23e-04  1.78e-05  2.28e-01  
 16  +4.9716e-01  +5.6689e-01  6.97e-02  5.03e-06  2.74e-03  2.69e-04  1.58e-05  2.66e-01  
 17  +4.9684e-01  +5.6247e-01  6.56e-02  4.73e-06  2.58e-03  1.37e-04  1.49e-05  4.17e-01  
 18  +4.9358e-01  +5.4738e-01  5.38e-02  2.93e-06  1.59e-03  1.28e-04  9.34e-06  4.39e-01  
 19  +4.9293e-01  +5.4406e-01  5.11e-02  2.76e-06  1.50e-03  9.61e-05  8.85e-06  2.05e-01  
 20  +4.9098e-01  +5.3423e-01  4.33e-02  2.27e-06  1.23e-03  1.48e-05  7.35e-06  6.99e-01  
 21  +4.8934e-01  +5.2729e-01  3.80e-02  1.88e-06  1.02e-03  9.17e-06  6.15e-06  3.73e-01  
 22  +4.8841e-01  +5.2346e-01  3.51e-02  1.68e-06  9.17e-04  7.17e-06  5.52e-06  2.24e-01  
 23  +4.8665e-01  +5.1625e-01  2.96e-02  1.34e-06  7.28e-04  2.42e-06  4.43e-06  6.28e-01  
 24  +4.8377e-01  +5.0472e-01  2.09e-02  8.68e-07  4.73e-04  2.61e-08  2.93e-06  9.90e-01  
 25  +4.8142e-01  +4.9567e-01  1.43e-02  5.68e-07  3.10e-04  5.72e-08  1.95e-06  5.16e-01  
 26  +4.7984e-01  +4.8967e-01  9.83e-03  3.81e-07  2.07e-04  6.17e-08  1.33e-06  5.23e-01  
 27  +4.7790e-01  +4.8236e-01  4.47e-03  1.68e-07  9.14e-05  4.32e-08  6.00e-07  8.27e-01  
 28  +4.7742e-01  +4.8063e-01  3.21e-03  1.20e-07  6.52e-05  3.23e-08  4.32e-07  4.07e-01  
 29  +4.7646e-01  +4.7715e-01  6.88e-04  2.54e-08  1.38e-05  8.16e-09  9.33e-08  9.90e-01  
 30  +4.7619e-01  +4.7621e-01  2.24e-05  8.25e-10  4.49e-07  2.65e-10  3.05e-09  9.81e-01  
 31  +4.7618e-01  +4.7618e-01  2.25e-07  8.27e-12  4.50e-09  2.65e-12  3.06e-11  9.90e-01  
 32  +4.7618e-01  +4.7618e-01  2.26e-09  8.29e-14  4.52e-11  3.04e-14  3.49e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2401091s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:59 PM: Problem status: optimal
(CVXPY) Sep 20 08:09:59 PM: Optimal value: 4.762e-01
(CVXPY) Sep 20 08:09:59 PM: Compilation took 2.746e-01 seconds
(CVXPY) Sep 20 08:09:59 PM: Solver (including time spent in interface) took 1.294e+00 seconds
Iteration: 19, Objective: 0.4762
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:09:59 PM: Your problem has 25209 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:09:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:09:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:09:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:09:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:09:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:09:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:09:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:09:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:09:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:00 PM: Finished problem compilation (took 2.776e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25209
  constraints   = 50209
  nnz(P)        = 0
  nnz(A)        = 452572
  cones (total) = 1
    : Nonnegative = 1,  numel = 50209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8085e-01  +5.4255e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3197e-01  +6.1379e+02  6.13e+02  1.78e-01  9.23e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6021e+02  1.60e+02  1.50e-01  7.85e+01  4.52e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7634e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0002e-01  +1.4130e+00  9.13e-01  2.73e-03  1.48e+00  2.24e-05  1.93e-01  1.36e-01  
  6  +5.0001e-01  +7.8136e-01  2.81e-01  8.41e-04  4.56e-01  5.98e-06  8.10e-02  6.33e-01  
  7  +5.0001e-01  +6.8677e-01  1.87e-01  5.58e-04  3.03e-01  3.69e-06  4.78e-02  6.25e-01  
  8  +5.0000e-01  +6.3810e-01  1.38e-01  4.12e-04  2.24e-01  3.32e-06  2.69e-02  4.89e-01  
  9  +5.0000e-01  +6.1904e-01  1.19e-01  3.54e-04  1.92e-01  4.62e-06  1.12e-02  6.77e-01  
 10  +4.9997e-01  +6.0813e-01  1.08e-01  2.76e-04  1.50e-01  1.96e-05  1.92e-03  8.56e-01  
 11  +4.9911e-01  +5.8876e-01  8.97e-02  2.21e-05  1.21e-02  4.04e-04  7.20e-05  9.81e-01  
 12  +4.9859e-01  +5.8253e-01  8.39e-02  1.29e-05  7.04e-03  5.36e-04  4.13e-05  5.44e-01  
 13  +4.9869e-01  +5.7741e-01  7.87e-02  1.02e-05  5.54e-03  3.77e-04  3.22e-05  5.51e-01  
 14  +4.9843e-01  +5.7521e-01  7.68e-02  8.37e-06  4.56e-03  3.81e-04  2.64e-05  2.89e-01  
 15  +4.9821e-01  +5.7240e-01  7.42e-02  6.91e-06  3.77e-03  3.07e-04  2.18e-05  4.22e-01  
 16  +4.9807e-01  +5.6840e-01  7.03e-02  5.83e-06  3.18e-03  1.17e-04  1.84e-05  7.04e-01  
 17  +4.9783e-01  +5.6703e-01  6.92e-02  5.58e-06  3.04e-03  9.93e-05  1.76e-05  1.80e-01  
 18  +4.9692e-01  +5.6273e-01  6.58e-02  4.66e-06  2.54e-03  8.94e-05  1.47e-05  2.85e-01  
 19  +4.9534e-01  +5.5475e-01  5.94e-02  3.87e-06  2.11e-03  2.38e-05  1.23e-05  6.97e-01  
 20  +4.9305e-01  +5.4487e-01  5.18e-02  2.98e-06  1.62e-03  1.91e-05  9.61e-06  3.20e-01  
 21  +4.9157e-01  +5.3866e-01  4.71e-02  2.57e-06  1.40e-03  1.46e-05  8.35e-06  2.53e-01  
 22  +4.9106e-01  +5.3650e-01  4.54e-02  2.43e-06  1.32e-03  9.33e-06  7.92e-06  3.16e-01  
 23  +4.8901e-01  +5.2806e-01  3.91e-02  1.96e-06  1.07e-03  6.40e-06  6.45e-06  3.30e-01  
 24  +4.8854e-01  +5.2616e-01  3.76e-02  1.84e-06  1.00e-03  4.14e-06  6.07e-06  3.37e-01  
 25  +4.8603e-01  +5.1609e-01  3.01e-02  1.37e-06  7.44e-04  9.26e-07  4.58e-06  7.39e-01  
 26  +4.8414e-01  +5.0831e-01  2.42e-02  1.02e-06  5.57e-04  1.79e-07  3.47e-06  9.90e-01  
 27  +4.8233e-01  +5.0132e-01  1.90e-02  7.82e-07  4.26e-04  1.45e-07  2.69e-06  2.93e-01  
 28  +4.8026e-01  +4.9316e-01  1.29e-02  5.07e-07  2.76e-04  1.42e-07  1.77e-06  9.90e-01  
 29  +4.7726e-01  +4.8197e-01  4.71e-03  1.79e-07  9.78e-05  5.11e-08  6.51e-07  6.99e-01  
 30  +4.7613e-01  +4.7777e-01  1.64e-03  6.18e-08  3.37e-05  1.82e-08  2.29e-07  7.65e-01  
 31  +4.7580e-01  +4.7656e-01  7.55e-04  2.82e-08  1.54e-05  8.74e-09  1.05e-07  9.90e-01  
 32  +4.7553e-01  +4.7559e-01  6.40e-05  2.39e-09  1.30e-06  7.39e-10  8.96e-09  9.27e-01  
 33  +4.7550e-01  +4.7550e-01  6.51e-07  2.43e-11  1.32e-08  7.52e-12  9.12e-11  9.90e-01  
 34  +4.7550e-01  +4.7550e-01  6.51e-09  2.43e-13  1.32e-10  7.52e-14  9.12e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3280414s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:01 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:01 PM: Optimal value: 4.755e-01
(CVXPY) Sep 20 08:10:01 PM: Compilation took 2.776e-01 seconds
(CVXPY) Sep 20 08:10:01 PM: Solver (including time spent in interface) took 1.384e+00 seconds
Iteration: 20, Objective: 0.4755
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:01 PM: Your problem has 25219 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:02 PM: Finished problem compilation (took 2.638e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25219
  constraints   = 50219
  nnz(P)        = 0
  nnz(A)        = 455397
  cones (total) = 1
    : Nonnegative = 1,  numel = 50219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4258e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3196e-01  +6.1371e+02  6.13e+02  1.78e-01  9.23e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6020e+02  1.60e+02  1.50e-01  7.85e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7640e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0002e-01  +1.4160e+00  9.16e-01  2.74e-03  1.48e+00  2.24e-05  1.93e-01  1.35e-01  
  6  +5.0001e-01  +7.9973e-01  3.00e-01  8.96e-04  4.86e-01  6.42e-06  8.51e-02  6.16e-01  
  7  +5.0001e-01  +6.9418e-01  1.94e-01  5.80e-04  3.15e-01  3.91e-06  5.01e-02  6.13e-01  
  8  +5.0000e-01  +6.4239e-01  1.42e-01  4.25e-04  2.31e-01  3.49e-06  2.86e-02  4.70e-01  
  9  +5.0000e-01  +6.2372e-01  1.24e-01  3.69e-04  2.00e-01  4.63e-06  1.32e-02  6.12e-01  
 10  +4.9997e-01  +6.1048e-01  1.11e-01  2.96e-04  1.61e-01  1.77e-05  2.40e-03  8.53e-01  
 11  +4.9932e-01  +5.8685e-01  8.75e-02  2.96e-05  1.61e-02  3.12e-04  9.77e-05  9.90e-01  
 12  +4.9833e-01  +5.8029e-01  8.20e-02  1.21e-05  6.62e-03  6.49e-04  3.90e-05  6.57e-01  
 13  +4.9823e-01  +5.7820e-01  8.00e-02  1.01e-05  5.51e-03  6.06e-04  3.22e-05  3.39e-01  
 14  +4.9844e-01  +5.7699e-01  7.85e-02  9.71e-06  5.30e-03  4.56e-04  3.09e-05  2.69e-01  
 15  +4.9779e-01  +5.7371e-01  7.59e-02  7.19e-06  3.92e-03  5.31e-04  2.28e-05  3.18e-01  
 16  +4.9794e-01  +5.7278e-01  7.48e-02  6.92e-06  3.77e-03  3.88e-04  2.19e-05  2.87e-01  
 17  +4.9763e-01  +5.7064e-01  7.30e-02  6.16e-06  3.36e-03  3.38e-04  1.95e-05  2.64e-01  
 18  +4.9676e-01  +5.6351e-01  6.67e-02  4.76e-06  2.59e-03  8.51e-05  1.51e-05  8.34e-01  
 19  +4.9306e-01  +5.4698e-01  5.39e-02  2.90e-06  1.58e-03  7.38e-05  9.34e-06  4.77e-01  
 20  +4.9063e-01  +5.3649e-01  4.59e-02  2.37e-06  1.29e-03  4.10e-05  7.75e-06  3.88e-01  
 21  +4.9047e-01  +5.3581e-01  4.53e-02  2.34e-06  1.27e-03  3.82e-05  7.64e-06  5.91e-02  
 22  +4.8852e-01  +5.2767e-01  3.91e-02  1.92e-06  1.05e-03  2.08e-05  6.37e-06  4.17e-01  
 23  +4.8824e-01  +5.2651e-01  3.83e-02  1.87e-06  1.02e-03  1.88e-05  6.19e-06  9.07e-02  
 24  +4.8807e-01  +5.2568e-01  3.76e-02  1.80e-06  9.80e-04  1.08e-05  5.97e-06  3.89e-01  
 25  +4.8585e-01  +5.1651e-01  3.07e-02  1.38e-06  7.55e-04  1.12e-07  4.66e-06  8.92e-01  
 26  +4.8297e-01  +5.0509e-01  2.21e-02  9.51e-07  5.18e-04  9.56e-08  3.26e-06  3.79e-01  
 27  +4.8083e-01  +4.9653e-01  1.57e-02  6.39e-07  3.48e-04  1.36e-07  2.23e-06  7.91e-01  
 28  +4.7836e-01  +4.8702e-01  8.66e-03  3.41e-07  1.86e-04  8.17e-08  1.22e-06  6.38e-01  
 29  +4.7823e-01  +4.8642e-01  8.19e-03  3.20e-07  1.74e-04  8.45e-08  1.14e-06  4.56e-01  
 30  +4.7617e-01  +4.7880e-01  2.63e-03  1.00e-07  5.46e-05  2.72e-08  3.70e-07  7.23e-01  
 31  +4.7541e-01  +4.7599e-01  5.82e-04  2.19e-08  1.20e-05  6.63e-09  8.25e-08  9.90e-01  
 32  +4.7519e-01  +4.7523e-01  3.32e-05  1.25e-09  6.80e-07  3.78e-10  4.72e-09  9.45e-01  
 33  +4.7518e-01  +4.7518e-01  3.43e-07  1.29e-11  7.02e-09  3.90e-12  4.88e-11  9.90e-01  
 34  +4.7518e-01  +4.7518e-01  3.44e-09  1.29e-13  7.04e-11  4.51e-14  5.62e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3214556s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:03 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:03 PM: Optimal value: 4.752e-01
(CVXPY) Sep 20 08:10:03 PM: Compilation took 2.638e-01 seconds
(CVXPY) Sep 20 08:10:03 PM: Solver (including time spent in interface) took 1.372e+00 seconds
Iteration: 21, Objective: 0.4752
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:03 PM: Your problem has 25229 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:03 PM: Finished problem compilation (took 2.855e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25229
  constraints   = 50229
  nnz(P)        = 0
  nnz(A)        = 457548
  cones (total) = 1
    : Nonnegative = 1,  numel = 50229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4258e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3196e-01  +6.1373e+02  6.13e+02  1.78e-01  9.23e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6021e+02  1.60e+02  1.50e-01  7.85e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7640e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4254e+00  9.25e-01  2.77e-03  1.50e+00  2.24e-05  1.93e-01  1.34e-01  
  6  +5.0001e-01  +8.1011e-01  3.10e-01  9.27e-04  5.03e-01  6.61e-06  8.73e-02  6.07e-01  
  7  +5.0001e-01  +6.9662e-01  1.97e-01  5.88e-04  3.19e-01  4.00e-06  5.12e-02  5.98e-01  
  8  +5.0000e-01  +6.4568e-01  1.46e-01  4.35e-04  2.36e-01  3.54e-06  3.00e-02  4.55e-01  
  9  +5.0000e-01  +6.2845e-01  1.28e-01  3.83e-04  2.08e-01  4.38e-06  1.45e-02  6.21e-01  
 10  +4.9998e-01  +6.1218e-01  1.12e-01  3.09e-04  1.68e-01  1.49e-05  2.83e-03  8.41e-01  
 11  +4.9898e-01  +5.9117e-01  9.22e-02  2.12e-05  1.15e-02  4.65e-04  6.89e-05  9.88e-01  
 12  +4.9829e-01  +5.8138e-01  8.31e-02  1.09e-05  5.95e-03  6.08e-04  3.48e-05  6.67e-01  
 13  +4.9828e-01  +5.7964e-01  8.14e-02  9.69e-06  5.29e-03  5.44e-04  3.08e-05  2.68e-01  
 14  +4.9845e-01  +5.7576e-01  7.73e-02  8.13e-06  4.43e-03  3.17e-04  2.56e-05  5.68e-01  
 15  +4.9844e-01  +5.7518e-01  7.67e-02  7.84e-06  4.28e-03  2.82e-04  2.47e-05  1.50e-01  
 16  +4.9860e-01  +5.7297e-01  7.44e-02  6.89e-06  3.76e-03  1.02e-04  2.17e-05  7.11e-01  
 17  +4.9713e-01  +5.6578e-01  6.87e-02  4.33e-06  2.36e-03  9.05e-05  1.36e-05  6.51e-01  
 18  +4.9481e-01  +5.5500e-01  6.02e-02  3.46e-06  1.89e-03  6.14e-05  1.10e-05  3.79e-01  
 19  +4.9266e-01  +5.4564e-01  5.30e-02  2.89e-06  1.57e-03  4.25e-05  9.33e-06  3.02e-01  
 20  +4.9194e-01  +5.4251e-01  5.06e-02  2.75e-06  1.50e-03  2.77e-05  8.94e-06  2.77e-01  
 21  +4.9086e-01  +5.3799e-01  4.71e-02  2.48e-06  1.35e-03  2.39e-05  8.13e-06  1.46e-01  
 22  +4.8842e-01  +5.2771e-01  3.93e-02  1.94e-06  1.06e-03  2.78e-06  6.46e-06  7.66e-01  
 23  +4.8783e-01  +5.2526e-01  3.74e-02  1.81e-06  9.85e-04  1.71e-06  6.02e-06  3.85e-01  
 24  +4.8649e-01  +5.1980e-01  3.33e-02  1.54e-06  8.37e-04  5.11e-07  5.16e-06  7.41e-01  
 25  +4.8171e-01  +5.0087e-01  1.92e-02  8.15e-07  4.44e-04  2.71e-07  2.82e-06  4.95e-01  
 26  +4.8117e-01  +4.9871e-01  1.75e-02  7.33e-07  4.00e-04  2.37e-07  2.55e-06  2.48e-01  
 27  +4.7936e-01  +4.9151e-01  1.21e-02  4.80e-07  2.62e-04  1.31e-07  1.69e-06  9.90e-01  
 28  +4.7642e-01  +4.8047e-01  4.04e-03  1.56e-07  8.49e-05  4.34e-08  5.71e-07  7.50e-01  
 29  +4.7521e-01  +4.7602e-01  8.09e-04  3.07e-08  1.67e-05  8.86e-09  1.15e-07  8.88e-01  
 30  +4.7492e-01  +4.7499e-01  6.26e-05  2.36e-09  1.29e-06  7.02e-10  8.96e-09  9.90e-01  
 31  +4.7490e-01  +4.7490e-01  6.48e-07  2.44e-11  1.33e-08  7.26e-12  9.28e-11  9.90e-01  
 32  +4.7490e-01  +4.7490e-01  6.48e-09  2.44e-13  1.33e-10  7.26e-14  9.28e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2079582s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:05 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:05 PM: Optimal value: 4.749e-01
(CVXPY) Sep 20 08:10:05 PM: Compilation took 2.855e-01 seconds
(CVXPY) Sep 20 08:10:05 PM: Solver (including time spent in interface) took 1.260e+00 seconds
Iteration: 22, Objective: 0.4749
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:05 PM: Your problem has 25239 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:05 PM: Finished problem compilation (took 3.025e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:05 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25239
  constraints   = 50239
  nnz(P)        = 0
  nnz(A)        = 462233
  cones (total) = 1
    : Nonnegative = 1,  numel = 50239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +5.4258e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3196e-01  +6.1371e+02  6.13e+02  1.78e-01  9.23e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0905e-01  +1.6020e+02  1.60e+02  1.50e-01  7.85e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7639e+01  1.71e+01  4.71e-02  2.46e+01  5.21e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4630e+00  9.63e-01  2.88e-03  1.56e+00  2.23e-05  1.93e-01  1.29e-01  
  6  +5.0001e-01  +7.9587e-01  2.96e-01  8.84e-04  4.80e-01  6.01e-06  8.33e-02  6.32e-01  
  7  +5.0001e-01  +6.8727e-01  1.87e-01  5.60e-04  3.04e-01  3.60e-06  4.75e-02  6.39e-01  
  8  +5.0000e-01  +6.4065e-01  1.41e-01  4.20e-04  2.28e-01  3.20e-06  2.54e-02  5.75e-01  
  9  +5.0000e-01  +6.2525e-01  1.25e-01  3.73e-04  2.03e-01  4.55e-06  1.18e-02  5.86e-01  
 10  +4.9997e-01  +6.1189e-01  1.12e-01  2.82e-04  1.53e-01  2.00e-05  1.91e-03  8.67e-01  
 11  +4.9878e-01  +5.8729e-01  8.85e-02  1.58e-05  8.62e-03  5.51e-04  5.10e-05  9.90e-01  
 12  +4.9830e-01  +5.8188e-01  8.36e-02  1.07e-05  5.81e-03  6.19e-04  3.39e-05  4.72e-01  
 13  +4.9863e-01  +5.8017e-01  8.15e-02  1.02e-05  5.55e-03  4.27e-04  3.23e-05  3.31e-01  
 14  +4.9852e-01  +5.7787e-01  7.93e-02  8.70e-06  4.74e-03  3.69e-04  2.75e-05  3.46e-01  
 15  +4.9841e-01  +5.7480e-01  7.64e-02  7.20e-06  3.93e-03  2.55e-04  2.26e-05  5.11e-01  
 16  +4.9835e-01  +5.7304e-01  7.47e-02  6.68e-06  3.64e-03  1.65e-04  2.10e-05  4.03e-01  
 17  +4.9694e-01  +5.6554e-01  6.86e-02  4.50e-06  2.45e-03  1.02e-04  1.42e-05  7.37e-01  
 18  +4.9651e-01  +5.6348e-01  6.70e-02  4.31e-06  2.35e-03  9.27e-05  1.36e-05  9.96e-02  
 19  +4.9617e-01  +5.6178e-01  6.56e-02  4.24e-06  2.31e-03  7.52e-05  1.34e-05  1.49e-01  
 20  +4.9328e-01  +5.4881e-01  5.55e-02  3.10e-06  1.69e-03  5.49e-05  9.97e-06  3.96e-01  
 21  +4.9234e-01  +5.4478e-01  5.24e-02  2.86e-06  1.56e-03  4.61e-05  9.23e-06  1.59e-01  
 22  +4.9134e-01  +5.4036e-01  4.90e-02  2.63e-06  1.43e-03  2.75e-05  8.54e-06  3.38e-01  
 23  +4.9090e-01  +5.3847e-01  4.76e-02  2.53e-06  1.38e-03  1.86e-05  8.25e-06  2.73e-01  
 24  +4.8770e-01  +5.2524e-01  3.75e-02  1.83e-06  9.99e-04  1.33e-05  6.08e-06  3.22e-01  
 25  +4.8726e-01  +5.2333e-01  3.61e-02  1.72e-06  9.36e-04  8.38e-06  5.71e-06  3.47e-01  
 26  +4.8591e-01  +5.1764e-01  3.17e-02  1.43e-06  7.80e-04  8.77e-08  4.80e-06  9.06e-01  
 27  +4.8180e-01  +5.0131e-01  1.95e-02  8.25e-07  4.49e-04  8.76e-08  2.84e-06  5.51e-01  
 28  +4.8066e-01  +4.9680e-01  1.61e-02  6.65e-07  3.62e-04  9.96e-08  2.31e-06  4.03e-01  
 29  +4.7739e-01  +4.8411e-01  6.72e-03  2.62e-07  1.43e-04  6.82e-08  9.41e-07  9.33e-01  
 30  +4.7579e-01  +4.7812e-01  2.33e-03  8.90e-08  4.85e-05  2.51e-08  3.30e-07  8.34e-01  
 31  +4.7502e-01  +4.7534e-01  3.16e-04  1.19e-08  6.50e-06  3.40e-09  4.51e-08  8.85e-01  
 32  +4.7492e-01  +4.7495e-01  3.84e-05  1.45e-09  7.90e-07  4.30e-10  5.51e-09  9.90e-01  
 33  +4.7490e-01  +4.7490e-01  3.88e-07  1.46e-11  7.97e-09  4.34e-12  5.56e-11  9.90e-01  
 34  +4.7490e-01  +4.7490e-01  3.88e-09  1.46e-13  7.97e-11  4.34e-14  5.56e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.454579s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:07 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:07 PM: Optimal value: 4.749e-01
(CVXPY) Sep 20 08:10:07 PM: Compilation took 3.025e-01 seconds
(CVXPY) Sep 20 08:10:07 PM: Solver (including time spent in interface) took 1.516e+00 seconds
Iteration: 23, Objective: 0.4749
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:07 PM: Your problem has 25249 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:07 PM: Finished problem compilation (took 3.004e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25249
  constraints   = 50249
  nnz(P)        = 0
  nnz(A)        = 466608
  cones (total) = 1
    : Nonnegative = 1,  numel = 50249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4258e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3195e-01  +6.1365e+02  6.13e+02  1.78e-01  9.23e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6018e+02  1.60e+02  1.50e-01  7.84e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7640e+01  1.71e+01  4.71e-02  2.46e+01  5.22e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4854e+00  9.85e-01  2.95e-03  1.59e+00  2.23e-05  1.93e-01  1.26e-01  
  6  +5.0001e-01  +7.9656e-01  2.97e-01  8.86e-04  4.82e-01  5.92e-06  8.30e-02  6.33e-01  
  7  +5.0001e-01  +6.7456e-01  1.75e-01  5.22e-04  2.83e-01  3.41e-06  4.38e-02  6.70e-01  
  8  +5.0000e-01  +6.3370e-01  1.34e-01  3.99e-04  2.17e-01  3.33e-06  2.17e-02  6.16e-01  
  9  +4.9999e-01  +6.1559e-01  1.16e-01  3.39e-04  1.84e-01  7.44e-06  5.69e-03  8.17e-01  
 10  +4.9959e-01  +5.9983e-01  1.00e-01  5.11e-05  2.79e-02  1.89e-04  1.72e-04  9.81e-01  
 11  +4.9922e-01  +5.9453e-01  9.53e-02  2.57e-05  1.40e-02  3.28e-04  8.34e-05  5.90e-01  
 12  +4.9898e-01  +5.8959e-01  9.06e-02  1.75e-05  9.54e-03  3.75e-04  5.61e-05  4.65e-01  
 13  +4.9909e-01  +5.8291e-01  8.38e-02  1.30e-05  7.11e-03  2.45e-04  4.13e-05  6.56e-01  
 14  +4.9931e-01  +5.7774e-01  7.84e-02  9.88e-06  5.39e-03  4.90e-05  3.10e-05  9.90e-01  
 15  +4.9860e-01  +5.7402e-01  7.54e-02  6.34e-06  3.46e-03  6.85e-05  1.99e-05  3.81e-01  
 16  +4.9857e-01  +5.7389e-01  7.53e-02  6.33e-06  3.45e-03  6.65e-05  1.98e-05  2.78e-02  
 17  +4.9794e-01  +5.7097e-01  7.30e-02  5.31e-06  2.90e-03  6.40e-05  1.67e-05  2.72e-01  
 18  +4.9778e-01  +5.7028e-01  7.25e-02  5.29e-06  2.88e-03  5.96e-05  1.66e-05  5.47e-02  
 19  +4.9677e-01  +5.6580e-01  6.90e-02  4.57e-06  2.49e-03  5.10e-05  1.44e-05  2.67e-01  
 20  +4.9531e-01  +5.5932e-01  6.40e-02  3.90e-06  2.13e-03  4.05e-05  1.24e-05  2.82e-01  
 21  +4.9450e-01  +5.5581e-01  6.13e-02  3.72e-06  2.03e-03  2.67e-05  1.19e-05  2.79e-01  
 22  +4.9215e-01  +5.4581e-01  5.37e-02  2.97e-06  1.62e-03  1.95e-05  9.63e-06  3.22e-01  
 23  +4.9115e-01  +5.4160e-01  5.05e-02  2.74e-06  1.49e-03  1.37e-05  8.91e-06  2.64e-01  
 24  +4.8955e-01  +5.3499e-01  4.54e-02  2.36e-06  1.29e-03  1.01e-05  7.76e-06  2.59e-01  
 25  +4.8853e-01  +5.3070e-01  4.22e-02  2.11e-06  1.15e-03  4.75e-06  6.99e-06  4.83e-01  
 26  +4.8635e-01  +5.2183e-01  3.55e-02  1.69e-06  9.20e-04  3.32e-06  5.65e-06  3.11e-01  
 27  +4.8544e-01  +5.1815e-01  3.27e-02  1.50e-06  8.18e-04  1.60e-06  5.07e-06  5.14e-01  
 28  +4.8299e-01  +5.0816e-01  2.52e-02  1.10e-06  5.99e-04  7.39e-07  3.76e-06  5.76e-01  
 29  +4.8030e-01  +4.9751e-01  1.72e-02  7.20e-07  3.92e-04  4.39e-07  2.51e-06  4.46e-01  
 30  +4.7961e-01  +4.9476e-01  1.51e-02  6.13e-07  3.34e-04  2.84e-07  2.14e-06  5.51e-01  
 31  +4.7596e-01  +4.8076e-01  4.80e-03  1.87e-07  1.02e-04  7.93e-08  6.74e-07  7.50e-01  
 32  +4.7488e-01  +4.7664e-01  1.76e-03  6.76e-08  3.68e-05  2.05e-08  2.47e-07  9.90e-01  
 33  +4.7426e-01  +4.7440e-01  1.37e-04  5.22e-09  2.85e-06  1.57e-09  1.94e-08  9.25e-01  
 34  +4.7421e-01  +4.7421e-01  1.62e-06  6.18e-11  3.37e-08  1.85e-11  2.30e-10  9.89e-01  
 35  +4.7421e-01  +4.7421e-01  1.62e-08  6.18e-13  3.37e-10  1.85e-13  2.30e-12  9.90e-01  
 36  +4.7421e-01  +4.7421e-01  1.62e-10  6.16e-15  3.38e-12  2.08e-15  2.57e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.399887s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:09 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:09 PM: Optimal value: 4.742e-01
(CVXPY) Sep 20 08:10:09 PM: Compilation took 3.004e-01 seconds
(CVXPY) Sep 20 08:10:09 PM: Solver (including time spent in interface) took 1.456e+00 seconds
Iteration: 24, Objective: 0.4742
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:09 PM: Your problem has 25259 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:09 PM: Finished problem compilation (took 3.180e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25259
  constraints   = 50259
  nnz(P)        = 0
  nnz(A)        = 468889
  cones (total) = 1
    : Nonnegative = 1,  numel = 50259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4257e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3195e-01  +6.1363e+02  6.13e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6017e+02  1.60e+02  1.50e-01  7.84e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7638e+01  1.71e+01  4.71e-02  2.46e+01  5.22e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4858e+00  9.86e-01  2.95e-03  1.60e+00  2.23e-05  1.93e-01  1.26e-01  
  6  +5.0001e-01  +7.9234e-01  2.92e-01  8.74e-04  4.75e-01  5.83e-06  8.20e-02  6.38e-01  
  7  +5.0001e-01  +6.9048e-01  1.90e-01  5.69e-04  3.09e-01  3.83e-06  4.84e-02  5.58e-01  
  8  +5.0000e-01  +6.4521e-01  1.45e-01  4.34e-04  2.36e-01  3.56e-06  2.63e-02  5.45e-01  
  9  +5.0000e-01  +6.2640e-01  1.26e-01  3.75e-04  2.04e-01  5.72e-06  9.74e-03  7.13e-01  
 10  +4.9985e-01  +5.9934e-01  9.95e-02  1.26e-04  6.84e-02  7.21e-05  4.83e-04  9.90e-01  
 11  +4.9878e-01  +5.9423e-01  9.54e-02  1.88e-05  1.03e-02  5.36e-04  6.08e-05  8.77e-01  
 12  +4.9866e-01  +5.9012e-01  9.15e-02  1.47e-05  8.00e-03  5.18e-04  4.70e-05  3.94e-01  
 13  +4.9859e-01  +5.8722e-01  8.86e-02  1.23e-05  6.69e-03  4.74e-04  3.91e-05  3.38e-01  
 14  +4.9861e-01  +5.8164e-01  8.30e-02  9.46e-06  5.16e-03  2.94e-04  2.99e-05  6.37e-01  
 15  +4.9811e-01  +5.7681e-01  7.87e-02  6.81e-06  3.71e-03  2.15e-04  2.15e-05  6.44e-01  
 16  +4.9758e-01  +5.7407e-01  7.65e-02  5.87e-06  3.20e-03  2.00e-04  1.85e-05  2.56e-01  
 17  +4.9740e-01  +5.7309e-01  7.57e-02  5.79e-06  3.16e-03  1.79e-04  1.83e-05  9.77e-02  
 18  +4.9637e-01  +5.6790e-01  7.15e-02  4.92e-06  2.69e-03  1.40e-04  1.56e-05  3.39e-01  
 19  +4.9595e-01  +5.6570e-01  6.98e-02  4.73e-06  2.58e-03  1.07e-04  1.51e-05  2.15e-01  
 20  +4.9418e-01  +5.5781e-01  6.36e-02  3.88e-06  2.11e-03  8.76e-05  1.25e-05  2.92e-01  
 21  +4.9159e-01  +5.4631e-01  5.47e-02  3.06e-06  1.67e-03  4.93e-05  9.99e-06  4.39e-01  
 22  +4.8891e-01  +5.3481e-01  4.59e-02  2.40e-06  1.31e-03  2.27e-05  7.93e-06  4.98e-01  
 23  +4.8782e-01  +5.3027e-01  4.25e-02  2.15e-06  1.17e-03  1.81e-05  7.15e-06  2.03e-01  
 24  +4.8628e-01  +5.2371e-01  3.74e-02  1.78e-06  9.68e-04  2.75e-06  5.95e-06  7.67e-01  
 25  +4.8562e-01  +5.2108e-01  3.55e-02  1.64e-06  8.91e-04  1.09e-06  5.52e-06  6.03e-01  
 26  +4.8172e-01  +5.0527e-01  2.35e-02  1.03e-06  5.59e-04  5.87e-07  3.55e-06  4.86e-01  
 27  +4.7950e-01  +4.9635e-01  1.69e-02  7.06e-07  3.85e-04  3.45e-07  2.47e-06  4.97e-01  
 28  +4.7825e-01  +4.9146e-01  1.32e-02  5.37e-07  2.93e-04  2.27e-07  1.89e-06  5.02e-01  
 29  +4.7488e-01  +4.7841e-01  3.53e-03  1.39e-07  7.56e-05  5.39e-08  5.02e-07  7.93e-01  
 30  +4.7422e-01  +4.7585e-01  1.63e-03  6.36e-08  3.47e-05  1.92e-08  2.33e-07  9.51e-01  
 31  +4.7366e-01  +4.7380e-01  1.41e-04  5.47e-09  2.98e-06  1.63e-09  2.02e-08  9.30e-01  
 32  +4.7361e-01  +4.7361e-01  1.83e-06  7.10e-11  3.87e-08  2.10e-11  2.63e-10  9.90e-01  
 33  +4.7361e-01  +4.7361e-01  1.83e-08  7.11e-13  3.87e-10  2.10e-13  2.64e-12  9.90e-01  
 34  +4.7361e-01  +4.7361e-01  1.84e-10  7.12e-15  3.88e-12  2.33e-15  2.91e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4436904s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:11 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:11 PM: Optimal value: 4.736e-01
(CVXPY) Sep 20 08:10:11 PM: Compilation took 3.180e-01 seconds
(CVXPY) Sep 20 08:10:11 PM: Solver (including time spent in interface) took 1.504e+00 seconds
Iteration: 25, Objective: 0.4736
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:11 PM: Your problem has 25269 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:11 PM: Finished problem compilation (took 2.955e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25269
  constraints   = 50269
  nnz(P)        = 0
  nnz(A)        = 471118
  cones (total) = 1
    : Nonnegative = 1,  numel = 50269

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4258e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3195e-01  +6.1357e+02  6.13e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6016e+02  1.60e+02  1.50e-01  7.84e+01  4.53e-05  2.60e-01  2.63e-01  
  4  +5.0136e-01  +1.7640e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.45e-01  
  5  +5.0003e-01  +1.4832e+00  9.83e-01  2.94e-03  1.59e+00  2.23e-05  1.93e-01  1.27e-01  
  6  +5.0001e-01  +8.1693e-01  3.17e-01  9.48e-04  5.15e-01  6.43e-06  8.75e-02  6.07e-01  
  7  +5.0001e-01  +7.0350e-01  2.03e-01  6.08e-04  3.31e-01  4.02e-06  5.16e-02  5.93e-01  
  8  +5.0000e-01  +6.4812e-01  1.48e-01  4.43e-04  2.40e-01  3.47e-06  2.68e-02  5.96e-01  
  9  +5.0000e-01  +6.3105e-01  1.31e-01  3.89e-04  2.11e-01  5.32e-06  1.00e-02  7.41e-01  
 10  +4.9989e-01  +6.0967e-01  1.10e-01  1.69e-04  9.18e-02  5.23e-05  6.95e-04  9.54e-01  
 11  +4.9869e-01  +6.0332e-01  1.05e-01  1.81e-05  9.87e-03  5.79e-04  5.84e-05  9.17e-01  
 12  +4.9840e-01  +5.9742e-01  9.90e-02  1.35e-05  7.37e-03  6.04e-04  4.32e-05  3.76e-01  
 13  +4.9886e-01  +5.9045e-01  9.16e-02  1.21e-05  6.62e-03  3.32e-04  3.85e-05  4.78e-01  
 14  +4.9858e-01  +5.8027e-01  8.17e-02  7.69e-06  4.20e-03  1.93e-04  2.42e-05  8.37e-01  
 15  +4.9851e-01  +5.7913e-01  8.06e-02  7.46e-06  4.07e-03  1.50e-04  2.35e-05  2.34e-01  
 16  +4.9778e-01  +5.7554e-01  7.78e-02  5.95e-06  3.25e-03  1.64e-04  1.88e-05  2.45e-01  
 17  +4.9708e-01  +5.7119e-01  7.41e-02  5.37e-06  2.93e-03  6.30e-05  1.70e-05  6.06e-01  
 18  +4.9444e-01  +5.5862e-01  6.42e-02  3.94e-06  2.15e-03  7.34e-07  1.27e-05  9.70e-01  
 19  +4.9404e-01  +5.5690e-01  6.29e-02  3.84e-06  2.09e-03  6.73e-07  1.24e-05  1.33e-01  
 20  +4.9007e-01  +5.3996e-01  4.99e-02  2.65e-06  1.44e-03  5.08e-07  8.71e-06  4.53e-01  
 21  +4.8974e-01  +5.3857e-01  4.88e-02  2.57e-06  1.40e-03  4.77e-07  8.49e-06  1.40e-01  
 22  +4.8586e-01  +5.2253e-01  3.67e-02  1.77e-06  9.65e-04  3.34e-07  5.97e-06  4.49e-01  
 23  +4.8570e-01  +5.2185e-01  3.61e-02  1.72e-06  9.38e-04  3.26e-07  5.80e-06  2.05e-01  
 24  +4.8531e-01  +5.2028e-01  3.50e-02  1.63e-06  8.90e-04  3.15e-07  5.51e-06  2.56e-01  
 25  +4.8258e-01  +5.0920e-01  2.66e-02  1.17e-06  6.35e-04  2.38e-07  4.00e-06  7.50e-01  
 26  +4.7864e-01  +4.9357e-01  1.49e-02  6.16e-07  3.36e-04  1.39e-07  2.17e-06  7.46e-01  
 27  +4.7803e-01  +4.9118e-01  1.32e-02  5.38e-07  2.93e-04  1.23e-07  1.90e-06  1.64e-01  
 28  +4.7753e-01  +4.8902e-01  1.15e-02  4.59e-07  2.50e-04  1.23e-07  1.62e-06  7.86e-01  
 29  +4.7530e-01  +4.8047e-01  5.18e-03  2.03e-07  1.11e-04  5.75e-08  7.32e-07  7.82e-01  
 30  +4.7527e-01  +4.8036e-01  5.09e-03  1.99e-07  1.09e-04  5.68e-08  7.18e-07  7.52e-02  
 31  +4.7526e-01  +4.8033e-01  5.07e-03  1.99e-07  1.09e-04  5.65e-08  7.17e-07  2.76e-02  
 32  +4.7451e-01  +4.7747e-01  2.96e-03  1.15e-07  6.29e-05  3.34e-08  4.19e-07  5.84e-01  
 33  +4.7444e-01  +4.7724e-01  2.79e-03  1.09e-07  5.93e-05  3.15e-08  3.95e-07  1.35e-01  
 34  +4.7408e-01  +4.7586e-01  1.78e-03  6.91e-08  3.76e-05  2.02e-08  2.53e-07  5.91e-01  
 35  +4.7361e-01  +4.7416e-01  5.48e-04  2.10e-08  1.14e-05  6.21e-09  7.78e-08  7.04e-01  
 36  +4.7341e-01  +4.7343e-01  2.29e-05  8.67e-10  4.73e-07  2.61e-10  3.25e-09  9.62e-01  
 37  +4.7340e-01  +4.7340e-01  2.33e-07  8.80e-12  4.80e-09  2.65e-12  3.31e-11  9.90e-01  
 38  +4.7340e-01  +4.7340e-01  2.33e-09  8.81e-14  4.80e-11  2.65e-14  3.31e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5480304s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:13 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:13 PM: Optimal value: 4.734e-01
(CVXPY) Sep 20 08:10:13 PM: Compilation took 2.955e-01 seconds
(CVXPY) Sep 20 08:10:13 PM: Solver (including time spent in interface) took 1.601e+00 seconds
Iteration: 26, Objective: 0.4734
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:13 PM: Your problem has 25279 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:14 PM: Finished problem compilation (took 3.329e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25279
  constraints   = 50279
  nnz(P)        = 0
  nnz(A)        = 474619
  cones (total) = 1
    : Nonnegative = 1,  numel = 50279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4256e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1352e+02  6.13e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6013e+02  1.60e+02  1.50e-01  7.84e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7635e+01  1.71e+01  4.71e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0003e-01  +1.4720e+00  9.72e-01  2.91e-03  1.57e+00  2.24e-05  1.93e-01  1.29e-01  
  6  +5.0001e-01  +7.5340e-01  2.53e-01  7.58e-04  4.12e-01  4.98e-06  7.27e-02  6.94e-01  
  7  +5.0001e-01  +6.8311e-01  1.83e-01  5.47e-04  2.98e-01  3.72e-06  4.47e-02  5.29e-01  
  8  +5.0001e-01  +6.6583e-01  1.66e-01  4.95e-04  2.69e-01  3.50e-06  2.54e-02  6.62e-01  
  9  +4.9999e-01  +6.2285e-01  1.23e-01  3.60e-04  1.96e-01  7.12e-06  5.96e-03  8.31e-01  
 10  +4.9958e-01  +6.0417e-01  1.05e-01  4.90e-05  2.68e-02  1.94e-04  1.64e-04  9.90e-01  
 11  +4.9848e-01  +5.9739e-01  9.89e-02  1.44e-05  7.85e-03  6.16e-04  4.61e-05  7.38e-01  
 12  +4.9852e-01  +5.9400e-01  9.55e-02  1.25e-05  6.84e-03  5.29e-04  3.99e-05  3.14e-01  
 13  +4.9837e-01  +5.8791e-01  8.95e-02  9.47e-06  5.17e-03  4.13e-04  3.00e-05  5.39e-01  
 14  +4.9814e-01  +5.8505e-01  8.69e-02  8.07e-06  4.41e-03  3.63e-04  2.55e-05  3.28e-01  
 15  +4.9769e-01  +5.8174e-01  8.41e-02  6.83e-06  3.73e-03  3.29e-04  2.16e-05  3.04e-01  
 16  +4.9742e-01  +5.7794e-01  8.05e-02  6.24e-06  3.40e-03  1.89e-04  1.97e-05  4.47e-01  
 17  +4.9562e-01  +5.6687e-01  7.12e-02  4.69e-06  2.56e-03  4.46e-05  1.50e-05  8.27e-01  
 18  +4.9374e-01  +5.5861e-01  6.49e-02  3.91e-06  2.13e-03  3.28e-05  1.26e-05  3.27e-01  
 19  +4.9287e-01  +5.5485e-01  6.20e-02  3.68e-06  2.00e-03  2.40e-05  1.19e-05  2.34e-01  
 20  +4.8887e-01  +5.3781e-01  4.89e-02  2.56e-06  1.40e-03  1.50e-05  8.47e-06  4.33e-01  
 21  +4.8705e-01  +5.3028e-01  4.32e-02  2.16e-06  1.18e-03  9.31e-06  7.21e-06  3.62e-01  
 22  +4.8536e-01  +5.2341e-01  3.81e-02  1.83e-06  9.95e-04  6.55e-06  6.16e-06  2.95e-01  
 23  +4.8482e-01  +5.2107e-01  3.62e-02  1.69e-06  9.21e-04  3.38e-06  5.71e-06  4.68e-01  
 24  +4.8040e-01  +5.0328e-01  2.29e-02  9.91e-07  5.40e-04  1.33e-06  3.44e-06  6.04e-01  
 25  +4.8018e-01  +5.0233e-01  2.22e-02  9.50e-07  5.18e-04  1.13e-06  3.30e-06  1.79e-01  
 26  +4.7683e-01  +4.8901e-01  1.22e-02  5.00e-07  2.73e-04  4.62e-07  1.78e-06  6.15e-01  
 27  +4.7577e-01  +4.8483e-01  9.06e-03  3.67e-07  2.00e-04  3.00e-07  1.31e-06  3.94e-01  
 28  +4.7388e-01  +4.7741e-01  3.52e-03  1.40e-07  7.60e-05  5.38e-08  5.07e-07  9.28e-01  
 29  +4.7280e-01  +4.7333e-01  5.26e-04  2.07e-08  1.13e-05  7.77e-09  7.64e-08  8.63e-01  
 30  +4.7263e-01  +4.7269e-01  6.06e-05  2.38e-09  1.30e-06  8.15e-10  8.83e-09  9.24e-01  
 31  +4.7261e-01  +4.7261e-01  1.68e-06  6.57e-11  3.58e-08  2.25e-11  2.46e-10  9.73e-01  
 32  +4.7261e-01  +4.7261e-01  1.69e-08  6.61e-13  3.60e-10  2.26e-13  2.47e-12  9.90e-01  
 33  +4.7261e-01  +4.7261e-01  3.39e-10  1.33e-14  7.24e-12  5.65e-15  6.03e-14  9.80e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3977172s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:15 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:15 PM: Optimal value: 4.726e-01
(CVXPY) Sep 20 08:10:15 PM: Compilation took 3.329e-01 seconds
(CVXPY) Sep 20 08:10:15 PM: Solver (including time spent in interface) took 1.456e+00 seconds
Iteration: 27, Objective: 0.4726
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:15 PM: Your problem has 25283 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:16 PM: Finished problem compilation (took 3.029e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25283
  constraints   = 50283
  nnz(P)        = 0
  nnz(A)        = 476727
  cones (total) = 1
    : Nonnegative = 1,  numel = 50283

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4255e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3195e-01  +6.1355e+02  6.13e+02  1.78e-01  9.22e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6013e+02  1.60e+02  1.50e-01  7.84e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7634e+01  1.71e+01  4.71e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0003e-01  +1.4721e+00  9.72e-01  2.91e-03  1.57e+00  2.24e-05  1.93e-01  1.29e-01  
  6  +5.0001e-01  +7.4837e-01  2.48e-01  7.43e-04  4.04e-01  4.86e-06  7.14e-02  7.01e-01  
  7  +5.0001e-01  +6.8605e-01  1.86e-01  5.56e-04  3.02e-01  3.72e-06  4.53e-02  5.18e-01  
  8  +5.0001e-01  +6.6701e-01  1.67e-01  4.99e-04  2.71e-01  3.45e-06  2.57e-02  6.62e-01  
  9  +4.9999e-01  +6.2385e-01  1.24e-01  3.63e-04  1.97e-01  6.83e-06  6.18e-03  8.28e-01  
 10  +4.9955e-01  +6.0426e-01  1.05e-01  4.58e-05  2.50e-02  2.06e-04  1.52e-04  9.90e-01  
 11  +4.9848e-01  +5.9771e-01  9.92e-02  1.42e-05  7.77e-03  6.16e-04  4.57e-05  7.18e-01  
 12  +4.9845e-01  +5.9469e-01  9.62e-02  1.24e-05  6.76e-03  5.59e-04  3.95e-05  2.81e-01  
 13  +4.9832e-01  +5.8932e-01  9.10e-02  9.78e-06  5.34e-03  4.54e-04  3.10e-05  4.65e-01  
 14  +4.9811e-01  +5.8717e-01  8.91e-02  8.61e-06  4.70e-03  4.35e-04  2.73e-05  2.22e-01  
 15  +4.9791e-01  +5.8239e-01  8.45e-02  7.19e-06  3.92e-03  2.82e-04  2.27e-05  5.10e-01  
 16  +4.9770e-01  +5.7850e-01  8.08e-02  6.56e-06  3.58e-03  1.34e-04  2.07e-05  5.35e-01  
 17  +4.9627e-01  +5.6950e-01  7.32e-02  5.07e-06  2.77e-03  3.69e-06  1.62e-05  9.90e-01  
 18  +4.9366e-01  +5.5821e-01  6.45e-02  3.80e-06  2.07e-03  2.79e-06  1.22e-05  4.33e-01  
 19  +4.9323e-01  +5.5636e-01  6.31e-02  3.71e-06  2.02e-03  2.42e-06  1.20e-05  1.21e-01  
 20  +4.8850e-01  +5.3621e-01  4.77e-02  2.46e-06  1.34e-03  1.39e-06  8.14e-06  5.00e-01  
 21  +4.8607e-01  +5.2618e-01  4.01e-02  1.96e-06  1.07e-03  9.04e-07  6.58e-06  3.94e-01  
 22  +4.8504e-01  +5.2204e-01  3.70e-02  1.75e-06  9.55e-04  6.95e-07  5.91e-06  3.08e-01  
 23  +4.8174e-01  +5.0877e-01  2.70e-02  1.18e-06  6.46e-04  2.92e-07  4.07e-06  7.88e-01  
 24  +4.7975e-01  +5.0076e-01  2.10e-02  8.96e-07  4.88e-04  2.23e-07  3.12e-06  3.31e-01  
 25  +4.7868e-01  +4.9641e-01  1.77e-02  7.40e-07  4.04e-04  1.88e-07  2.59e-06  3.78e-01  
 26  +4.7668e-01  +4.8834e-01  1.17e-02  4.70e-07  2.56e-04  1.26e-07  1.67e-06  7.98e-01  
 27  +4.7461e-01  +4.8026e-01  5.65e-03  2.25e-07  1.23e-04  6.16e-08  8.12e-07  6.82e-01  
 28  +4.7312e-01  +4.7453e-01  1.41e-03  5.55e-08  3.02e-05  1.57e-08  2.04e-07  9.61e-01  
 29  +4.7273e-01  +4.7305e-01  3.21e-04  1.27e-08  6.90e-06  3.58e-09  4.68e-08  7.90e-01  
 30  +4.7262e-01  +4.7266e-01  3.38e-05  1.33e-09  7.22e-07  3.73e-10  4.93e-09  9.61e-01  
 31  +4.7261e-01  +4.7261e-01  5.06e-07  1.99e-11  1.08e-08  5.61e-12  7.42e-11  9.85e-01  
 32  +4.7261e-01  +4.7261e-01  5.21e-09  2.04e-13  1.11e-10  5.77e-14  7.63e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3427747s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:17 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:17 PM: Optimal value: 4.726e-01
(CVXPY) Sep 20 08:10:17 PM: Compilation took 3.029e-01 seconds
(CVXPY) Sep 20 08:10:17 PM: Solver (including time spent in interface) took 1.396e+00 seconds
Iteration: 28, Objective: 0.4726
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:17 PM: Your problem has 25293 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:18 PM: Finished problem compilation (took 3.077e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25293
  constraints   = 50293
  nnz(P)        = 0
  nnz(A)        = 478226
  cones (total) = 1
    : Nonnegative = 1,  numel = 50293

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4255e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1352e+02  6.13e+02  1.78e-01  9.21e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6013e+02  1.60e+02  1.50e-01  7.83e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7636e+01  1.71e+01  4.71e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0003e-01  +1.4725e+00  9.72e-01  2.91e-03  1.58e+00  2.24e-05  1.93e-01  1.29e-01  
  6  +5.0001e-01  +8.0766e-01  3.08e-01  9.20e-04  5.00e-01  6.30e-06  8.53e-02  6.21e-01  
  7  +5.0001e-01  +6.8527e-01  1.85e-01  5.54e-04  3.01e-01  4.00e-06  4.73e-02  5.59e-01  
  8  +5.0000e-01  +6.6263e-01  1.63e-01  4.86e-04  2.64e-01  3.77e-06  2.64e-02  6.52e-01  
  9  +4.9999e-01  +6.2104e-01  1.21e-01  3.54e-04  1.93e-01  7.76e-06  5.83e-03  8.73e-01  
 10  +4.9962e-01  +6.1181e-01  1.12e-01  6.19e-05  3.38e-02  1.79e-04  2.10e-04  9.74e-01  
 11  +4.9828e-01  +5.9791e-01  9.96e-02  1.33e-05  7.28e-03  7.00e-04  4.29e-05  8.50e-01  
 12  +4.9848e-01  +5.9471e-01  9.62e-02  1.20e-05  6.55e-03  5.52e-04  3.83e-05  3.26e-01  
 13  +4.9839e-01  +5.9103e-01  9.26e-02  1.01e-05  5.50e-03  4.76e-04  3.20e-05  3.60e-01  
 14  +4.9822e-01  +5.8617e-01  8.79e-02  8.12e-06  4.43e-03  3.46e-04  2.57e-05  5.04e-01  
 15  +4.9777e-01  +5.8289e-01  8.51e-02  6.91e-06  3.77e-03  3.15e-04  2.19e-05  2.94e-01  
 16  +4.9724e-01  +5.7833e-01  8.11e-02  6.03e-06  3.29e-03  2.06e-04  1.91e-05  4.33e-01  
 17  +4.9541e-01  +5.6826e-01  7.29e-02  4.70e-06  2.56e-03  1.20e-04  1.50e-05  5.35e-01  
 18  +4.9346e-01  +5.5926e-01  6.58e-02  3.93e-06  2.14e-03  8.64e-05  1.27e-05  3.23e-01  
 19  +4.9211e-01  +5.5313e-01  6.10e-02  3.54e-06  1.93e-03  5.72e-05  1.15e-05  2.98e-01  
 20  +4.8781e-01  +5.3458e-01  4.68e-02  2.40e-06  1.31e-03  3.90e-05  8.01e-06  3.83e-01  
 21  +4.8494e-01  +5.2256e-01  3.76e-02  1.81e-06  9.89e-04  2.53e-05  6.14e-06  3.56e-01  
 22  +4.8385e-01  +5.1793e-01  3.41e-02  1.57e-06  8.54e-04  1.12e-05  5.33e-06  5.34e-01  
 23  +4.8241e-01  +5.1205e-01  2.96e-02  1.31e-06  7.14e-04  5.40e-06  4.49e-06  5.08e-01  
 24  +4.8203e-01  +5.1043e-01  2.84e-02  1.24e-06  6.74e-04  3.23e-06  4.24e-06  4.07e-01  
 25  +4.7788e-01  +4.9391e-01  1.60e-02  6.67e-07  3.64e-04  1.53e-06  2.35e-06  5.18e-01  
 26  +4.7438e-01  +4.7998e-01  5.60e-03  2.23e-07  1.22e-04  1.81e-07  8.08e-07  9.03e-01  
 27  +4.7339e-01  +4.7621e-01  2.82e-03  1.11e-07  6.07e-05  8.72e-08  4.08e-07  5.25e-01  
 28  +4.7293e-01  +4.7441e-01  1.48e-03  5.85e-08  3.19e-05  3.28e-08  2.15e-07  7.09e-01  
 29  +4.7289e-01  +4.7426e-01  1.37e-03  5.40e-08  2.94e-05  2.87e-08  1.99e-07  1.75e-01  
 30  +4.7246e-01  +4.7264e-01  1.80e-04  7.07e-09  3.86e-06  3.67e-09  2.62e-08  8.75e-01  
 31  +4.7241e-01  +4.7245e-01  4.52e-05  1.77e-09  9.65e-07  5.14e-10  6.60e-09  9.90e-01  
 32  +4.7239e-01  +4.7239e-01  7.05e-07  2.76e-11  1.51e-08  8.02e-12  1.03e-10  9.84e-01  
 33  +4.7239e-01  +4.7239e-01  7.52e-09  2.95e-13  1.61e-10  8.55e-14  1.10e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4650453s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:19 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:19 PM: Optimal value: 4.724e-01
(CVXPY) Sep 20 08:10:19 PM: Compilation took 3.077e-01 seconds
(CVXPY) Sep 20 08:10:19 PM: Solver (including time spent in interface) took 1.518e+00 seconds
Iteration: 29, Objective: 0.4724
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:19 PM: Your problem has 25303 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:20 PM: Finished problem compilation (took 3.487e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25303
  constraints   = 50303
  nnz(P)        = 0
  nnz(A)        = 480274
  cones (total) = 1
    : Nonnegative = 1,  numel = 50303

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +5.4256e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3194e-01  +6.1344e+02  6.13e+02  1.78e-01  9.21e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6011e+02  1.60e+02  1.50e-01  7.83e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7637e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0003e-01  +1.4755e+00  9.76e-01  2.92e-03  1.58e+00  2.24e-05  1.93e-01  1.28e-01  
  6  +5.0001e-01  +8.0275e-01  3.03e-01  9.06e-04  4.92e-01  6.17e-06  8.41e-02  6.24e-01  
  7  +5.0001e-01  +6.8406e-01  1.84e-01  5.50e-04  2.99e-01  3.97e-06  4.65e-02  5.68e-01  
  8  +5.0000e-01  +6.5936e-01  1.59e-01  4.76e-04  2.59e-01  3.86e-06  2.41e-02  6.90e-01  
  9  +4.9999e-01  +6.3097e-01  1.31e-01  3.82e-04  2.07e-01  8.28e-06  5.70e-03  8.78e-01  
 10  +4.9959e-01  +6.2081e-01  1.21e-01  6.17e-05  3.36e-02  1.90e-04  2.08e-04  9.68e-01  
 11  +4.9874e-01  +6.0995e-01  1.11e-01  1.95e-05  1.07e-02  5.19e-04  6.31e-05  7.46e-01  
 12  +4.9878e-01  +6.0491e-01  1.06e-01  1.69e-05  9.24e-03  4.55e-04  5.43e-05  2.93e-01  
 13  +4.9947e-01  +5.9151e-01  9.20e-02  1.44e-05  7.83e-03  8.28e-05  4.55e-05  8.20e-01  
 14  +4.9919e-01  +5.8795e-01  8.88e-02  9.70e-06  5.30e-03  7.98e-05  3.06e-05  6.12e-01  
 15  +4.9876e-01  +5.8322e-01  8.45e-02  7.22e-06  3.94e-03  2.27e-05  2.27e-05  9.50e-01  
 16  +4.9826e-01  +5.8089e-01  8.26e-02  6.29e-06  3.43e-03  2.09e-05  1.98e-05  2.66e-01  
 17  +4.9768e-01  +5.7823e-01  8.06e-02  5.71e-06  3.11e-03  1.76e-05  1.81e-05  2.56e-01  
 18  +4.9643e-01  +5.7243e-01  7.60e-02  5.28e-06  2.88e-03  7.75e-06  1.69e-05  5.12e-01  
 19  +4.9459e-01  +5.6441e-01  6.98e-02  4.34e-06  2.37e-03  6.12e-06  1.40e-05  3.30e-01  
 20  +4.9437e-01  +5.6346e-01  6.91e-02  4.30e-06  2.35e-03  5.42e-06  1.39e-05  9.48e-02  
 21  +4.9216e-01  +5.5390e-01  6.17e-02  3.55e-06  1.94e-03  4.37e-06  1.16e-05  2.62e-01  
 22  +4.8889e-01  +5.3989e-01  5.10e-02  2.74e-06  1.50e-03  1.48e-06  9.14e-06  6.17e-01  
 23  +4.8564e-01  +5.2628e-01  4.06e-02  2.02e-06  1.10e-03  1.03e-06  6.86e-06  3.57e-01  
 24  +4.8390e-01  +5.1914e-01  3.52e-02  1.67e-06  9.09e-04  6.75e-07  5.70e-06  4.30e-01  
 25  +4.8215e-01  +5.1200e-01  2.99e-02  1.35e-06  7.34e-04  4.50e-07  4.64e-06  4.77e-01  
 26  +4.8101e-01  +5.0741e-01  2.64e-02  1.17e-06  6.35e-04  3.83e-07  4.04e-06  2.08e-01  
 27  +4.8032e-01  +5.0445e-01  2.41e-02  1.03e-06  5.62e-04  2.93e-07  3.58e-06  5.68e-01  
 28  +4.7732e-01  +4.9253e-01  1.52e-02  6.24e-07  3.40e-04  1.65e-07  2.21e-06  7.91e-01  
 29  +4.7392e-01  +4.7905e-01  5.13e-03  2.05e-07  1.12e-04  5.56e-08  7.46e-07  9.90e-01  
 30  +4.7232e-01  +4.7297e-01  6.54e-04  2.58e-08  1.41e-05  6.98e-09  9.65e-08  9.01e-01  
 31  +4.7209e-01  +4.7211e-01  2.01e-05  7.92e-10  4.31e-07  2.15e-10  2.98e-09  9.85e-01  
 32  +4.7208e-01  +4.7208e-01  2.10e-07  8.27e-12  4.51e-09  2.25e-12  3.11e-11  9.90e-01  
 33  +4.7208e-01  +4.7208e-01  2.54e-09  1.00e-13  5.45e-11  2.90e-14  4.01e-13  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4026249s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:21 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:21 PM: Optimal value: 4.721e-01
(CVXPY) Sep 20 08:10:21 PM: Compilation took 3.487e-01 seconds
(CVXPY) Sep 20 08:10:21 PM: Solver (including time spent in interface) took 1.464e+00 seconds
Iteration: 30, Objective: 0.4721
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:21 PM: Your problem has 25313 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:22 PM: Finished problem compilation (took 3.187e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25313
  constraints   = 50313
  nnz(P)        = 0
  nnz(A)        = 481634
  cones (total) = 1
    : Nonnegative = 1,  numel = 50313

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8082e-01  +5.4257e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1344e+02  6.13e+02  1.78e-01  9.21e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6011e+02  1.60e+02  1.50e-01  7.83e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7638e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0003e-01  +1.4734e+00  9.73e-01  2.91e-03  1.58e+00  2.24e-05  1.93e-01  1.29e-01  
  6  +5.0001e-01  +8.0388e-01  3.04e-01  9.09e-04  4.94e-01  6.21e-06  8.43e-02  6.28e-01  
  7  +5.0000e-01  +6.6706e-01  1.67e-01  5.00e-04  2.72e-01  3.84e-06  4.27e-02  5.69e-01  
  8  +5.0000e-01  +6.6682e-01  1.67e-01  4.99e-04  2.71e-01  4.02e-06  2.68e-02  5.88e-01  
  9  +4.9999e-01  +6.2063e-01  1.21e-01  3.52e-04  1.91e-01  8.83e-06  5.42e-03  8.85e-01  
 10  +4.9959e-01  +6.1518e-01  1.16e-01  6.47e-05  3.53e-02  1.90e-04  2.20e-04  9.67e-01  
 11  +4.9872e-01  +6.0822e-01  1.09e-01  2.14e-05  1.17e-02  5.34e-04  6.94e-05  7.12e-01  
 12  +4.9893e-01  +6.0012e-01  1.01e-01  1.74e-05  9.52e-03  3.80e-04  5.60e-05  4.83e-01  
 13  +4.9916e-01  +5.8977e-01  9.06e-02  1.25e-05  6.81e-03  1.63e-04  3.96e-05  8.36e-01  
 14  +4.9893e-01  +5.8492e-01  8.60e-02  8.25e-06  4.50e-03  6.47e-05  2.60e-05  9.90e-01  
 15  +4.9831e-01  +5.8195e-01  8.36e-02  6.54e-06  3.57e-03  6.98e-05  2.07e-05  2.83e-01  
 16  +4.9802e-01  +5.8050e-01  8.25e-02  6.37e-06  3.48e-03  5.23e-05  2.01e-05  2.46e-01  
 17  +4.9733e-01  +5.7739e-01  8.01e-02  5.68e-06  3.10e-03  4.41e-05  1.80e-05  2.70e-01  
 18  +4.9561e-01  +5.6963e-01  7.40e-02  4.75e-06  2.59e-03  2.92e-05  1.52e-05  4.18e-01  
 19  +4.9305e-01  +5.5830e-01  6.53e-02  3.84e-06  2.09e-03  1.71e-05  1.25e-05  4.36e-01  
 20  +4.8985e-01  +5.4453e-01  5.47e-02  3.03e-06  1.65e-03  4.48e-06  1.00e-05  6.42e-01  
 21  +4.8671e-01  +5.3125e-01  4.45e-02  2.27e-06  1.24e-03  2.63e-06  7.65e-06  4.32e-01  
 22  +4.8497e-01  +5.2412e-01  3.92e-02  1.92e-06  1.04e-03  2.13e-06  6.51e-06  2.16e-01  
 23  +4.8358e-01  +5.1844e-01  3.49e-02  1.64e-06  8.92e-04  1.45e-06  5.59e-06  3.55e-01  
 24  +4.8183e-01  +5.1120e-01  2.94e-02  1.29e-06  7.04e-04  4.97e-07  4.44e-06  7.54e-01  
 25  +4.8044e-01  +5.0571e-01  2.53e-02  1.09e-06  5.93e-04  4.03e-07  3.77e-06  2.55e-01  
 26  +4.7907e-01  +5.0022e-01  2.12e-02  8.90e-07  4.85e-04  3.00e-07  3.11e-06  4.10e-01  
 27  +4.7696e-01  +4.9168e-01  1.47e-02  5.97e-07  3.25e-04  1.71e-07  2.11e-06  8.10e-01  
 28  +4.7374e-01  +4.7916e-01  5.42e-03  2.15e-07  1.17e-04  6.07e-08  7.82e-07  7.74e-01  
 29  +4.7231e-01  +4.7364e-01  1.33e-03  5.22e-08  2.84e-05  1.48e-08  1.93e-07  9.48e-01  
 30  +4.7187e-01  +4.7199e-01  1.25e-04  4.88e-09  2.66e-06  1.39e-09  1.82e-08  9.25e-01  
 31  +4.7182e-01  +4.7182e-01  1.74e-06  6.81e-11  3.71e-08  1.94e-11  2.55e-10  9.86e-01  
 32  +4.7182e-01  +4.7182e-01  1.74e-08  6.81e-13  3.71e-10  1.94e-13  2.55e-12  9.90e-01  
 33  +4.7182e-01  +4.7182e-01  2.58e-10  1.00e-14  5.49e-12  3.23e-15  4.22e-14  9.85e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3797451s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:23 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:23 PM: Optimal value: 4.718e-01
(CVXPY) Sep 20 08:10:23 PM: Compilation took 3.187e-01 seconds
(CVXPY) Sep 20 08:10:23 PM: Solver (including time spent in interface) took 1.433e+00 seconds
Iteration: 31, Objective: 0.4718
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:24 PM: Your problem has 25316 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:24 PM: Finished problem compilation (took 3.635e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25316
  constraints   = 50316
  nnz(P)        = 0
  nnz(A)        = 482023
  cones (total) = 1
    : Nonnegative = 1,  numel = 50316

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8082e-01  +5.4257e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1343e+02  6.13e+02  1.78e-01  9.21e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6010e+02  1.60e+02  1.50e-01  7.83e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7638e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0003e-01  +1.4706e+00  9.71e-01  2.91e-03  1.57e+00  2.24e-05  1.93e-01  1.29e-01  
  6  +5.0001e-01  +8.0908e-01  3.09e-01  9.25e-04  5.02e-01  6.36e-06  8.55e-02  6.19e-01  
  7  +5.0000e-01  +6.6704e-01  1.67e-01  5.00e-04  2.72e-01  3.86e-06  4.28e-02  5.74e-01  
  8  +5.0000e-01  +6.6449e-01  1.64e-01  4.92e-04  2.67e-01  4.10e-06  2.61e-02  5.98e-01  
  9  +4.9999e-01  +6.2665e-01  1.27e-01  3.71e-04  2.02e-01  8.86e-06  6.13e-03  8.29e-01  
 10  +4.9966e-01  +6.1965e-01  1.20e-01  8.38e-05  4.57e-02  1.59e-04  2.92e-04  9.59e-01  
 11  +4.9876e-01  +6.1279e-01  1.14e-01  2.44e-05  1.33e-02  5.26e-04  7.95e-05  7.45e-01  
 12  +4.9898e-01  +6.0526e-01  1.06e-01  2.10e-05  1.15e-02  3.91e-04  6.79e-05  3.84e-01  
 13  +4.9952e-01  +5.9094e-01  9.14e-02  1.59e-05  8.70e-03  8.38e-05  5.07e-05  9.11e-01  
 14  +4.9915e-01  +5.8884e-01  8.97e-02  1.05e-05  5.74e-03  1.17e-04  3.33e-05  3.88e-01  
 15  +4.9873e-01  +5.8552e-01  8.68e-02  7.87e-06  4.29e-03  9.20e-05  2.48e-05  5.92e-01  
 16  +4.9812e-01  +5.8242e-01  8.43e-02  6.48e-06  3.54e-03  9.16e-05  2.05e-05  2.81e-01  
 17  +4.9780e-01  +5.8059e-01  8.28e-02  6.30e-06  3.44e-03  6.60e-05  1.99e-05  2.65e-01  
 18  +4.9748e-01  +5.7913e-01  8.17e-02  6.06e-06  3.31e-03  5.87e-05  1.92e-05  1.36e-01  
 19  +4.9596e-01  +5.7188e-01  7.59e-02  5.08e-06  2.77e-03  2.94e-05  1.63e-05  5.54e-01  
 20  +4.9303e-01  +5.5876e-01  6.57e-02  3.80e-06  2.08e-03  2.15e-05  1.24e-05  4.01e-01  
 21  +4.9084e-01  +5.4914e-01  5.83e-02  3.26e-06  1.78e-03  1.16e-05  1.07e-05  4.01e-01  
 22  +4.8683e-01  +5.3196e-01  4.51e-02  2.30e-06  1.25e-03  6.64e-06  7.74e-06  4.34e-01  
 23  +4.8508e-01  +5.2469e-01  3.96e-02  1.93e-06  1.05e-03  4.93e-06  6.57e-06  2.70e-01  
 24  +4.8440e-01  +5.2190e-01  3.75e-02  1.79e-06  9.76e-04  3.89e-06  6.10e-06  2.18e-01  
 25  +4.8299e-01  +5.1614e-01  3.32e-02  1.53e-06  8.36e-04  2.97e-06  5.26e-06  2.52e-01  
 26  +4.8085e-01  +5.0733e-01  2.65e-02  1.15e-06  6.25e-04  8.29e-07  3.96e-06  7.49e-01  
 27  +4.7913e-01  +5.0047e-01  2.13e-02  8.87e-07  4.84e-04  3.76e-07  3.10e-06  7.02e-01  
 28  +4.7895e-01  +4.9968e-01  2.07e-02  8.59e-07  4.68e-04  3.43e-07  3.00e-06  1.82e-01  
 29  +4.7567e-01  +4.8683e-01  1.12e-02  4.50e-07  2.45e-04  1.68e-07  1.61e-06  5.71e-01  
 30  +4.7377e-01  +4.7923e-01  5.46e-03  2.17e-07  1.18e-04  6.94e-08  7.88e-07  8.10e-01  
 31  +4.7234e-01  +4.7378e-01  1.44e-03  5.66e-08  3.08e-05  1.77e-08  2.09e-07  7.83e-01  
 32  +4.7186e-01  +4.7198e-01  1.13e-04  4.45e-09  2.43e-06  1.27e-09  1.66e-08  9.88e-01  
 33  +4.7182e-01  +4.7182e-01  1.23e-06  4.82e-11  2.63e-08  1.38e-11  1.80e-10  9.89e-01  
 34  +4.7182e-01  +4.7182e-01  1.23e-08  4.83e-13  2.63e-10  1.38e-13  1.80e-12  9.90e-01  
 35  +4.7182e-01  +4.7182e-01  1.41e-10  5.48e-15  3.00e-12  1.65e-15  2.15e-14  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5108781s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:25 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:25 PM: Optimal value: 4.718e-01
(CVXPY) Sep 20 08:10:25 PM: Compilation took 3.635e-01 seconds
(CVXPY) Sep 20 08:10:25 PM: Solver (including time spent in interface) took 1.570e+00 seconds
Iteration: 32, Objective: 0.4718
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:26 PM: Your problem has 25319 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:26 PM: Finished problem compilation (took 3.279e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25319
  constraints   = 50319
  nnz(P)        = 0
  nnz(A)        = 482396
  cones (total) = 1
    : Nonnegative = 1,  numel = 50319

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8082e-01  +5.4257e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1340e+02  6.13e+02  1.78e-01  9.21e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6009e+02  1.60e+02  1.50e-01  7.83e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7638e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0003e-01  +1.4743e+00  9.74e-01  2.92e-03  1.58e+00  2.24e-05  1.93e-01  1.29e-01  
  6  +5.0001e-01  +8.0909e-01  3.09e-01  9.25e-04  5.02e-01  6.35e-06  8.55e-02  6.15e-01  
  7  +5.0001e-01  +6.7153e-01  1.72e-01  5.13e-04  2.79e-01  3.93e-06  4.38e-02  5.69e-01  
  8  +5.0000e-01  +6.5478e-01  1.55e-01  4.63e-04  2.51e-01  4.26e-06  2.62e-02  5.13e-01  
  9  +4.9999e-01  +6.2785e-01  1.28e-01  3.75e-04  2.04e-01  9.63e-06  6.44e-03  8.23e-01  
 10  +4.9963e-01  +6.2007e-01  1.20e-01  8.60e-05  4.69e-02  1.74e-04  3.02e-04  9.61e-01  
 11  +4.9844e-01  +6.1214e-01  1.14e-01  2.18e-05  1.19e-02  6.63e-04  7.11e-05  7.77e-01  
 12  +4.9854e-01  +6.0747e-01  1.09e-01  1.92e-05  1.05e-02  5.76e-04  6.24e-05  2.73e-01  
 13  +4.9942e-01  +5.9323e-01  9.38e-02  1.60e-05  8.72e-03  9.95e-05  5.09e-05  8.46e-01  
 14  +4.9932e-01  +5.8965e-01  9.03e-02  1.18e-05  6.46e-03  6.69e-05  3.75e-05  6.98e-01  
 15  +4.9908e-01  +5.8831e-01  8.92e-02  9.66e-06  5.27e-03  7.36e-05  3.05e-05  2.58e-01  
 16  +4.9903e-01  +5.8767e-01  8.86e-02  9.42e-06  5.14e-03  5.96e-05  2.98e-05  2.11e-01  
 17  +4.9854e-01  +5.8510e-01  8.66e-02  7.49e-06  4.09e-03  6.58e-05  2.37e-05  2.69e-01  
 18  +4.9831e-01  +5.8375e-01  8.54e-02  7.17e-06  3.92e-03  4.56e-05  2.27e-05  3.29e-01  
 19  +4.9760e-01  +5.8036e-01  8.28e-02  6.10e-06  3.33e-03  4.56e-05  1.93e-05  2.16e-01  
 20  +4.9727e-01  +5.7881e-01  8.15e-02  5.99e-06  3.27e-03  3.76e-05  1.91e-05  1.53e-01  
 21  +4.9589e-01  +5.7248e-01  7.66e-02  4.97e-06  2.71e-03  3.65e-05  1.59e-05  2.15e-01  
 22  +4.9457e-01  +5.6638e-01  7.18e-02  4.51e-06  2.46e-03  2.42e-05  1.46e-05  3.13e-01  
 23  +4.9198e-01  +5.5482e-01  6.28e-02  3.63e-06  1.98e-03  1.56e-05  1.19e-05  3.82e-01  
 24  +4.9157e-01  +5.5298e-01  6.14e-02  3.54e-06  1.93e-03  1.20e-05  1.16e-05  1.84e-01  
 25  +4.8707e-01  +5.3357e-01  4.65e-02  2.38e-06  1.30e-03  7.76e-06  8.01e-06  4.08e-01  
 26  +4.8579e-01  +5.2822e-01  4.24e-02  2.10e-06  1.14e-03  5.78e-06  7.10e-06  2.59e-01  
 27  +4.8453e-01  +5.2305e-01  3.85e-02  1.84e-06  1.00e-03  4.01e-06  6.27e-06  3.09e-01  
 28  +4.8349e-01  +5.1875e-01  3.53e-02  1.64e-06  8.92e-04  2.72e-06  5.59e-06  3.32e-01  
 29  +4.8006e-01  +5.0459e-01  2.45e-02  1.05e-06  5.71e-04  1.18e-07  3.64e-06  9.73e-01  
 30  +4.7989e-01  +5.0390e-01  2.40e-02  1.02e-06  5.56e-04  1.31e-07  3.55e-06  1.33e-01  
 31  +4.7854e-01  +4.9858e-01  2.00e-02  8.38e-07  4.57e-04  1.15e-07  2.94e-06  2.19e-01  
 32  +4.7727e-01  +4.9316e-01  1.59e-02  6.43e-07  3.50e-04  1.71e-07  2.27e-06  9.81e-01  
 33  +4.7407e-01  +4.8080e-01  6.73e-03  2.68e-07  1.46e-04  7.14e-08  9.72e-07  6.60e-01  
 34  +4.7215e-01  +4.7335e-01  1.20e-03  4.71e-08  2.57e-05  1.27e-08  1.75e-07  8.70e-01  
 35  +4.7178e-01  +4.7196e-01  1.79e-04  7.02e-09  3.82e-06  1.91e-09  2.62e-08  8.77e-01  
 36  +4.7172e-01  +4.7172e-01  2.08e-06  8.16e-11  4.45e-08  2.22e-11  3.05e-10  9.89e-01  
 37  +4.7172e-01  +4.7172e-01  2.08e-08  8.18e-13  4.46e-10  2.23e-13  3.06e-12  9.90e-01  
 38  +4.7172e-01  +4.7172e-01  2.58e-10  1.01e-14  5.53e-12  2.95e-15  4.04e-14  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5889845s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:28 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:28 PM: Optimal value: 4.717e-01
(CVXPY) Sep 20 08:10:28 PM: Compilation took 3.279e-01 seconds
(CVXPY) Sep 20 08:10:28 PM: Solver (including time spent in interface) took 1.645e+00 seconds
Iteration: 33, Objective: 0.4717
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:28 PM: Your problem has 25323 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:28 PM: Finished problem compilation (took 3.371e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25323
  constraints   = 50323
  nnz(P)        = 0
  nnz(A)        = 483263
  cones (total) = 1
    : Nonnegative = 1,  numel = 50323

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8082e-01  +5.4257e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1340e+02  6.13e+02  1.78e-01  9.20e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0904e-01  +1.6009e+02  1.60e+02  1.50e-01  7.83e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7638e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0003e-01  +1.4761e+00  9.76e-01  2.92e-03  1.58e+00  2.24e-05  1.93e-01  1.28e-01  
  6  +5.0001e-01  +8.0829e-01  3.08e-01  9.22e-04  5.01e-01  6.32e-06  8.53e-02  6.15e-01  
  7  +5.0001e-01  +6.7293e-01  1.73e-01  5.17e-04  2.81e-01  3.95e-06  4.41e-02  5.63e-01  
  8  +5.0000e-01  +6.5430e-01  1.54e-01  4.61e-04  2.51e-01  4.27e-06  2.59e-02  5.21e-01  
  9  +4.9999e-01  +6.2990e-01  1.30e-01  3.81e-04  2.07e-01  9.64e-06  6.45e-03  8.32e-01  
 10  +4.9945e-01  +6.1648e-01  1.17e-01  5.80e-05  3.16e-02  2.53e-04  1.97e-04  9.78e-01  
 11  +4.9842e-01  +6.0838e-01  1.10e-01  2.04e-05  1.11e-02  6.52e-04  6.65e-05  6.96e-01  
 12  +4.9840e-01  +6.0539e-01  1.07e-01  1.80e-05  9.84e-03  6.20e-04  5.86e-05  2.20e-01  
 13  +4.9885e-01  +5.9303e-01  9.42e-02  1.33e-05  7.27e-03  2.71e-04  4.26e-05  7.69e-01  
 14  +4.9870e-01  +5.9048e-01  9.18e-02  1.11e-05  6.06e-03  2.40e-04  3.54e-05  3.72e-01  
 15  +4.9841e-01  +5.8535e-01  8.69e-02  8.12e-06  4.43e-03  1.27e-04  2.58e-05  7.75e-01  
 16  +4.9801e-01  +5.8226e-01  8.42e-02  7.06e-06  3.85e-03  4.92e-05  2.24e-05  6.94e-01  
 17  +4.9773e-01  +5.8106e-01  8.33e-02  6.74e-06  3.68e-03  4.23e-05  2.14e-05  1.83e-01  
 18  +4.9625e-01  +5.7419e-01  7.79e-02  5.23e-06  2.85e-03  4.08e-05  1.67e-05  3.17e-01  
 19  +4.9469e-01  +5.6697e-01  7.23e-02  4.58e-06  2.50e-03  2.68e-05  1.48e-05  3.53e-01  
 20  +4.9190e-01  +5.5456e-01  6.27e-02  3.58e-06  1.95e-03  1.96e-05  1.17e-05  3.40e-01  
 21  +4.9162e-01  +5.5334e-01  6.17e-02  3.53e-06  1.93e-03  1.65e-05  1.16e-05  1.21e-01  
 22  +4.8722e-01  +5.3431e-01  4.71e-02  2.41e-06  1.32e-03  1.03e-05  8.11e-06  4.14e-01  
 23  +4.8589e-01  +5.2880e-01  4.29e-02  2.12e-06  1.16e-03  7.32e-06  7.18e-06  2.86e-01  
 24  +4.8421e-01  +5.2188e-01  3.77e-02  1.78e-06  9.73e-04  4.47e-06  6.09e-06  3.86e-01  
 25  +4.8319e-01  +5.1765e-01  3.45e-02  1.59e-06  8.67e-04  3.36e-06  5.45e-06  2.57e-01  
 26  +4.8124e-01  +5.0961e-01  2.84e-02  1.24e-06  6.79e-04  1.36e-06  4.31e-06  6.14e-01  
 27  +4.7981e-01  +5.0381e-01  2.40e-02  1.02e-06  5.56e-04  7.74e-07  3.55e-06  4.96e-01  
 28  +4.7845e-01  +4.9838e-01  1.99e-02  8.29e-07  4.52e-04  5.19e-07  2.91e-06  4.00e-01  
 29  +4.7656e-01  +4.9078e-01  1.42e-02  5.79e-07  3.15e-04  2.81e-07  2.06e-06  5.77e-01  
 30  +4.7598e-01  +4.8840e-01  1.24e-02  5.01e-07  2.73e-04  2.12e-07  1.79e-06  4.06e-01  
 31  +4.7298e-01  +4.7674e-01  3.76e-03  1.49e-07  8.12e-05  5.88e-08  5.47e-07  7.48e-01  
 32  +4.7253e-01  +4.7502e-01  2.49e-03  9.82e-08  5.35e-05  3.83e-08  3.63e-07  3.73e-01  
 33  +4.7219e-01  +4.7362e-01  1.44e-03  5.64e-08  3.07e-05  1.62e-08  2.09e-07  9.85e-01  
 34  +4.7177e-01  +4.7211e-01  3.36e-04  1.31e-08  7.14e-06  3.79e-09  4.90e-08  7.89e-01  
 35  +4.7166e-01  +4.7171e-01  4.44e-05  1.72e-09  9.38e-07  4.99e-10  6.47e-09  8.83e-01  
 36  +4.7165e-01  +4.7167e-01  1.74e-05  6.77e-10  3.69e-07  1.94e-10  2.54e-09  7.81e-01  
 37  +4.7165e-01  +4.7165e-01  3.58e-07  1.39e-11  7.56e-09  3.98e-12  5.22e-11  9.80e-01  
 38  +4.7165e-01  +4.7165e-01  3.58e-09  1.39e-13  7.58e-11  3.99e-14  5.23e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6405478s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:30 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:30 PM: Optimal value: 4.716e-01
(CVXPY) Sep 20 08:10:30 PM: Compilation took 3.371e-01 seconds
(CVXPY) Sep 20 08:10:30 PM: Solver (including time spent in interface) took 1.697e+00 seconds
Iteration: 34, Objective: 0.4716
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:30 PM: Your problem has 25331 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:31 PM: Finished problem compilation (took 3.435e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25331
  constraints   = 50331
  nnz(P)        = 0
  nnz(A)        = 484576
  cones (total) = 1
    : Nonnegative = 1,  numel = 50331

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8082e-01  +5.4257e+03  5.43e+03  4.38e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1340e+02  6.13e+02  1.78e-01  9.20e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6008e+02  1.60e+02  1.50e-01  7.82e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7636e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0003e-01  +1.4747e+00  9.75e-01  2.92e-03  1.58e+00  2.24e-05  1.93e-01  1.29e-01  
  6  +5.0001e-01  +8.0893e-01  3.09e-01  9.24e-04  5.02e-01  6.35e-06  8.55e-02  6.12e-01  
  7  +5.0001e-01  +6.7587e-01  1.76e-01  5.26e-04  2.86e-01  3.97e-06  4.47e-02  5.68e-01  
  8  +5.0000e-01  +6.5235e-01  1.52e-01  4.55e-04  2.47e-01  4.30e-06  2.52e-02  5.38e-01  
  9  +4.9999e-01  +6.3291e-01  1.33e-01  3.89e-04  2.11e-01  9.89e-06  6.40e-03  8.33e-01  
 10  +4.9939e-01  +6.1732e-01  1.18e-01  5.27e-05  2.88e-02  2.81e-04  1.78e-04  9.80e-01  
 11  +4.9857e-01  +6.1028e-01  1.12e-01  2.26e-05  1.23e-02  5.90e-04  7.40e-05  6.23e-01  
 12  +4.9848e-01  +6.0669e-01  1.08e-01  1.91e-05  1.04e-02  5.84e-04  6.21e-05  2.61e-01  
 13  +4.9930e-01  +5.9569e-01  9.64e-02  1.70e-05  9.30e-03  1.60e-04  5.46e-05  7.07e-01  
 14  +4.9940e-01  +5.9327e-01  9.39e-02  1.58e-05  8.61e-03  1.08e-04  5.04e-05  3.95e-01  
 15  +4.9904e-01  +5.9134e-01  9.23e-02  1.13e-05  6.14e-03  1.43e-04  3.58e-05  3.10e-01  
 16  +4.9894e-01  +5.8998e-01  9.10e-02  1.01e-05  5.50e-03  1.25e-04  3.20e-05  2.91e-01  
 17  +4.9843e-01  +5.8672e-01  8.83e-02  7.81e-06  4.26e-03  1.22e-04  2.48e-05  3.93e-01  
 18  +4.9785e-01  +5.8187e-01  8.40e-02  6.70e-06  3.65e-03  3.72e-05  2.13e-05  7.55e-01  
 19  +4.9775e-01  +5.8151e-01  8.38e-02  6.67e-06  3.64e-03  3.52e-05  2.12e-05  4.79e-02  
 20  +4.9687e-01  +5.7747e-01  8.06e-02  5.74e-06  3.13e-03  3.49e-05  1.83e-05  1.89e-01  
 21  +4.9513e-01  +5.6941e-01  7.43e-02  4.76e-06  2.60e-03  2.35e-05  1.53e-05  4.10e-01  
 22  +4.9266e-01  +5.5832e-01  6.57e-02  3.86e-06  2.10e-03  1.58e-05  1.26e-05  3.67e-01  
 23  +4.9120e-01  +5.5190e-01  6.07e-02  3.43e-06  1.87e-03  1.24e-05  1.13e-05  2.15e-01  
 24  +4.8928e-01  +5.4346e-01  5.42e-02  2.97e-06  1.62e-03  3.49e-06  9.92e-06  6.13e-01  
 25  +4.8437e-01  +5.2264e-01  3.83e-02  1.86e-06  1.02e-03  1.93e-06  6.38e-06  4.86e-01  
 26  +4.8416e-01  +5.2177e-01  3.76e-02  1.81e-06  9.84e-04  1.67e-06  6.18e-06  1.60e-01  
 27  +4.8328e-01  +5.1818e-01  3.49e-02  1.63e-06  8.88e-04  1.24e-06  5.59e-06  2.98e-01  
 28  +4.8130e-01  +5.1006e-01  2.88e-02  1.27e-06  6.90e-04  5.29e-07  4.38e-06  6.78e-01  
 29  +4.7955e-01  +5.0294e-01  2.34e-02  9.92e-07  5.40e-04  3.35e-07  3.46e-06  5.68e-01  
 30  +4.7761e-01  +4.9504e-01  1.74e-02  7.12e-07  3.88e-04  1.85e-07  2.52e-06  9.52e-01  
 31  +4.7451e-01  +4.8278e-01  8.27e-03  3.31e-07  1.80e-04  8.95e-08  1.20e-06  7.89e-01  
 32  +4.7279e-01  +4.7610e-01  3.30e-03  1.31e-07  7.12e-05  3.59e-08  4.82e-07  6.78e-01  
 33  +4.7233e-01  +4.7426e-01  1.93e-03  7.57e-08  4.12e-05  2.15e-08  2.81e-07  9.71e-01  
 34  +4.7187e-01  +4.7259e-01  7.14e-04  2.77e-08  1.51e-05  7.96e-09  1.04e-07  6.54e-01  
 35  +4.7179e-01  +4.7229e-01  4.95e-04  1.91e-08  1.04e-05  5.44e-09  7.22e-08  9.90e-01  
 36  +4.7162e-01  +4.7167e-01  5.18e-05  1.99e-09  1.08e-06  5.71e-10  7.57e-09  9.01e-01  
 37  +4.7161e-01  +4.7162e-01  1.37e-05  5.25e-10  2.86e-07  1.51e-10  2.00e-09  8.85e-01  
 38  +4.7160e-01  +4.7160e-01  1.45e-07  5.54e-12  3.02e-09  1.59e-12  2.12e-11  9.89e-01  
 39  +4.7160e-01  +4.7160e-01  1.45e-09  5.54e-14  3.02e-11  1.59e-14  2.12e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5949994s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:32 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:32 PM: Optimal value: 4.716e-01
(CVXPY) Sep 20 08:10:32 PM: Compilation took 3.435e-01 seconds
(CVXPY) Sep 20 08:10:32 PM: Solver (including time spent in interface) took 1.650e+00 seconds
Iteration: 35, Objective: 0.4716
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:32 PM: Your problem has 25332 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:33 PM: Finished problem compilation (took 3.455e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25332
  constraints   = 50332
  nnz(P)        = 0
  nnz(A)        = 484789
  cones (total) = 1
    : Nonnegative = 1,  numel = 50332

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8082e-01  +5.4257e+03  5.43e+03  4.38e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1342e+02  6.13e+02  1.78e-01  9.20e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6008e+02  1.60e+02  1.50e-01  7.82e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7636e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0003e-01  +1.4747e+00  9.75e-01  2.92e-03  1.58e+00  2.24e-05  1.93e-01  1.29e-01  
  6  +5.0001e-01  +8.0891e-01  3.09e-01  9.24e-04  5.02e-01  6.35e-06  8.55e-02  6.12e-01  
  7  +5.0001e-01  +6.7578e-01  1.76e-01  5.26e-04  2.86e-01  3.97e-06  4.47e-02  5.67e-01  
  8  +5.0000e-01  +6.5223e-01  1.52e-01  4.55e-04  2.47e-01  4.30e-06  2.51e-02  5.40e-01  
  9  +4.9999e-01  +6.3282e-01  1.33e-01  3.89e-04  2.11e-01  9.95e-06  6.36e-03  8.34e-01  
 10  +4.9938e-01  +6.1724e-01  1.18e-01  5.18e-05  2.82e-02  2.87e-04  1.75e-04  9.80e-01  
 11  +4.9859e-01  +6.1029e-01  1.12e-01  2.29e-05  1.25e-02  5.81e-04  7.49e-05  6.12e-01  
 12  +4.9849e-01  +6.0675e-01  1.08e-01  1.92e-05  1.05e-02  5.81e-04  6.26e-05  2.61e-01  
 13  +4.9930e-01  +5.9581e-01  9.65e-02  1.72e-05  9.39e-03  1.61e-04  5.51e-05  7.01e-01  
 14  +4.9939e-01  +5.9320e-01  9.38e-02  1.57e-05  8.55e-03  1.10e-04  5.00e-05  4.19e-01  
 15  +4.9904e-01  +5.9131e-01  9.23e-02  1.13e-05  6.14e-03  1.44e-04  3.58e-05  3.05e-01  
 16  +4.9895e-01  +5.9006e-01  9.11e-02  1.02e-05  5.55e-03  1.27e-04  3.23e-05  2.70e-01  
 17  +4.9844e-01  +5.8665e-01  8.82e-02  7.81e-06  4.26e-03  1.20e-04  2.48e-05  4.31e-01  
 18  +4.9785e-01  +5.8190e-01  8.40e-02  6.69e-06  3.65e-03  3.73e-05  2.13e-05  7.50e-01  
 19  +4.9776e-01  +5.8153e-01  8.38e-02  6.67e-06  3.64e-03  3.53e-05  2.12e-05  4.73e-02  
 20  +4.9684e-01  +5.7730e-01  8.05e-02  5.69e-06  3.11e-03  3.50e-05  1.82e-05  1.97e-01  
 21  +4.9493e-01  +5.6854e-01  7.36e-02  4.65e-06  2.54e-03  2.37e-05  1.50e-05  4.16e-01  
 22  +4.9230e-01  +5.5673e-01  6.44e-02  3.73e-06  2.04e-03  1.54e-05  1.22e-05  3.81e-01  
 23  +4.9081e-01  +5.5026e-01  5.94e-02  3.33e-06  1.81e-03  1.17e-05  1.10e-05  2.35e-01  
 24  +4.8820e-01  +5.3892e-01  5.07e-02  2.69e-06  1.46e-03  5.00e-06  9.01e-06  5.16e-01  
 25  +4.8535e-01  +5.2693e-01  4.16e-02  2.06e-06  1.12e-03  3.38e-06  7.02e-06  3.41e-01  
 26  +4.8391e-01  +5.2100e-01  3.71e-02  1.76e-06  9.58e-04  2.08e-06  6.02e-06  4.03e-01  
 27  +4.8286e-01  +5.1665e-01  3.38e-02  1.55e-06  8.46e-04  1.44e-06  5.34e-06  3.39e-01  
 28  +4.8075e-01  +5.0802e-01  2.73e-02  1.19e-06  6.48e-04  6.42e-07  4.13e-06  6.30e-01  
 29  +4.7890e-01  +5.0056e-01  2.17e-02  9.17e-07  5.00e-04  4.25e-07  3.22e-06  4.26e-01  
 30  +4.7878e-01  +4.9996e-01  2.12e-02  8.92e-07  4.86e-04  3.73e-07  3.13e-06  2.40e-01  
 31  +4.7471e-01  +4.8377e-01  9.06e-03  3.67e-07  2.00e-04  1.31e-07  1.33e-06  7.31e-01  
 32  +4.7299e-01  +4.7687e-01  3.87e-03  1.54e-07  8.38e-05  4.41e-08  5.64e-07  9.75e-01  
 33  +4.7204e-01  +4.7328e-01  1.23e-03  4.88e-08  2.66e-05  1.40e-08  1.81e-07  7.32e-01  
 34  +4.7166e-01  +4.7186e-01  1.96e-04  7.70e-09  4.20e-06  2.20e-09  2.88e-08  8.87e-01  
 35  +4.7160e-01  +4.7163e-01  2.71e-05  1.06e-09  5.80e-07  3.04e-10  4.00e-09  8.76e-01  
 36  +4.7159e-01  +4.7159e-01  3.49e-06  1.37e-10  7.46e-08  3.84e-11  5.15e-10  9.57e-01  
 37  +4.7159e-01  +4.7159e-01  3.80e-08  1.49e-12  8.12e-10  4.18e-13  5.60e-12  9.89e-01  
 38  +4.7159e-01  +4.7159e-01  5.65e-10  2.21e-14  1.21e-11  7.85e-15  1.04e-13  9.85e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5842617s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:34 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:34 PM: Optimal value: 4.716e-01
(CVXPY) Sep 20 08:10:34 PM: Compilation took 3.455e-01 seconds
(CVXPY) Sep 20 08:10:34 PM: Solver (including time spent in interface) took 1.641e+00 seconds
Iteration: 36, Objective: 0.4716
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:35 PM: Your problem has 25335 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:35 PM: Finished problem compilation (took 3.337e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25335
  constraints   = 50335
  nnz(P)        = 0
  nnz(A)        = 485149
  cones (total) = 1
    : Nonnegative = 1,  numel = 50335

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8082e-01  +5.4258e+03  5.43e+03  4.38e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1339e+02  6.13e+02  1.78e-01  9.20e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0904e-01  +1.6008e+02  1.60e+02  1.50e-01  7.82e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7638e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0003e-01  +1.4752e+00  9.75e-01  2.92e-03  1.58e+00  2.24e-05  1.93e-01  1.29e-01  
  6  +5.0001e-01  +8.0383e-01  3.04e-01  9.09e-04  4.94e-01  6.23e-06  8.43e-02  6.15e-01  
  7  +5.0001e-01  +6.7443e-01  1.74e-01  5.22e-04  2.84e-01  3.93e-06  4.39e-02  5.79e-01  
  8  +5.0000e-01  +6.5637e-01  1.56e-01  4.68e-04  2.54e-01  4.27e-06  2.58e-02  5.21e-01  
  9  +4.9999e-01  +6.3410e-01  1.34e-01  3.94e-04  2.14e-01  9.23e-06  6.94e-03  8.09e-01  
 10  +4.9953e-01  +6.1659e-01  1.17e-01  6.59e-05  3.60e-02  2.17e-04  2.27e-04  9.81e-01  
 11  +4.9859e-01  +6.0937e-01  1.11e-01  2.25e-05  1.23e-02  5.90e-04  7.37e-05  7.02e-01  
 12  +4.9865e-01  +6.0487e-01  1.06e-01  1.94e-05  1.06e-02  5.18e-04  6.29e-05  3.14e-01  
 13  +4.9940e-01  +5.9060e-01  9.12e-02  1.45e-05  7.91e-03  6.30e-05  4.62e-05  9.90e-01  
 14  +4.9935e-01  +5.8938e-01  9.00e-02  1.21e-05  6.59e-03  4.16e-05  3.83e-05  5.85e-01  
 15  +4.9911e-01  +5.8815e-01  8.90e-02  9.67e-06  5.28e-03  4.50e-05  3.06e-05  3.05e-01  
 16  +4.9908e-01  +5.8785e-01  8.88e-02  9.53e-06  5.20e-03  3.98e-05  3.02e-05  1.32e-01  
 17  +4.9857e-01  +5.8532e-01  8.67e-02  7.48e-06  4.08e-03  4.38e-05  2.37e-05  2.96e-01  
 18  +4.9772e-01  +5.8101e-01  8.33e-02  6.15e-06  3.36e-03  3.06e-05  1.95e-05  4.97e-01  
 19  +4.9759e-01  +5.8051e-01  8.29e-02  6.13e-06  3.35e-03  2.92e-05  1.95e-05  3.69e-02  
 20  +4.9608e-01  +5.7360e-01  7.75e-02  5.00e-06  2.73e-03  2.65e-05  1.60e-05  2.83e-01  
 21  +4.9470e-01  +5.6726e-01  7.26e-02  4.66e-06  2.54e-03  1.32e-05  1.51e-05  4.15e-01  
 22  +4.9148e-01  +5.5320e-01  6.17e-02  3.54e-06  1.93e-03  6.38e-06  1.16e-05  5.42e-01  
 23  +4.9120e-01  +5.5204e-01  6.08e-02  3.48e-06  1.90e-03  5.65e-06  1.15e-05  9.71e-02  
 24  +4.8722e-01  +5.3499e-01  4.78e-02  2.46e-06  1.34e-03  3.94e-06  8.28e-06  3.57e-01  
 25  +4.8525e-01  +5.2677e-01  4.15e-02  2.04e-06  1.11e-03  2.73e-06  6.94e-06  3.20e-01  
 26  +4.8441e-01  +5.2335e-01  3.89e-02  1.87e-06  1.02e-03  2.22e-06  6.38e-06  2.03e-01  
 27  +4.8327e-01  +5.1869e-01  3.54e-02  1.65e-06  9.00e-04  1.74e-06  5.67e-06  2.37e-01  
 28  +4.8045e-01  +5.0717e-01  2.67e-02  1.17e-06  6.40e-04  8.15e-07  4.09e-06  5.76e-01  
 29  +4.7836e-01  +4.9856e-01  2.02e-02  8.46e-07  4.61e-04  3.72e-07  2.98e-06  6.78e-01  
 30  +4.7831e-01  +4.9835e-01  2.00e-02  8.40e-07  4.58e-04  3.54e-07  2.96e-06  9.73e-02  
 31  +4.7522e-01  +4.8610e-01  1.09e-02  4.43e-07  2.41e-04  1.74e-07  1.60e-06  5.68e-01  
 32  +4.7286e-01  +4.7671e-01  3.85e-03  1.53e-07  8.33e-05  4.52e-08  5.60e-07  9.48e-01  
 33  +4.7207e-01  +4.7371e-01  1.64e-03  6.49e-08  3.54e-05  1.92e-08  2.40e-07  6.39e-01  
 34  +4.7172e-01  +4.7238e-01  6.58e-04  2.58e-08  1.41e-05  7.29e-09  9.61e-08  9.90e-01  
 35  +4.7160e-01  +4.7195e-01  3.45e-04  1.35e-08  7.36e-06  3.79e-09  5.04e-08  9.90e-01  
 36  +4.7149e-01  +4.7154e-01  4.80e-05  1.87e-09  1.02e-06  5.27e-10  7.01e-09  8.63e-01  
 37  +4.7147e-01  +4.7149e-01  1.28e-05  5.00e-10  2.73e-07  1.41e-10  1.87e-09  9.29e-01  
 38  +4.7147e-01  +4.7147e-01  1.85e-07  7.24e-12  3.94e-09  2.03e-12  2.71e-11  9.86e-01  
 39  +4.7147e-01  +4.7147e-01  1.85e-09  7.24e-14  3.95e-11  2.03e-14  2.71e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7093832s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:37 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:37 PM: Optimal value: 4.715e-01
(CVXPY) Sep 20 08:10:37 PM: Compilation took 3.337e-01 seconds
(CVXPY) Sep 20 08:10:37 PM: Solver (including time spent in interface) took 1.765e+00 seconds
Iteration: 37, Objective: 0.4715
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:10:37 PM: Your problem has 25339 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:10:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:10:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:10:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:10:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:10:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:10:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:10:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:10:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:10:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:10:37 PM: Finished problem compilation (took 3.460e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25339
  constraints   = 50339
  nnz(P)        = 0
  nnz(A)        = 486515
  cones (total) = 1
    : Nonnegative = 1,  numel = 50339

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.72e+02  1.00e+00  1.00e+00   ------   
  1  +5.8082e-01  +5.4257e+03  5.43e+03  4.38e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3193e-01  +6.1338e+02  6.13e+02  1.78e-01  9.20e+01  1.63e-02  2.78e-01  9.30e-01  
  3  +5.0904e-01  +1.6007e+02  1.60e+02  1.50e-01  7.82e+01  4.53e-05  2.60e-01  2.64e-01  
  4  +5.0136e-01  +1.7638e+01  1.71e+01  4.72e-02  2.46e+01  5.22e-06  1.96e-01  4.46e-01  
  5  +5.0003e-01  +1.4764e+00  9.76e-01  2.92e-03  1.58e+00  2.24e-05  1.93e-01  1.29e-01  
  6  +5.0001e-01  +8.0157e-01  3.02e-01  9.02e-04  4.90e-01  6.17e-06  8.38e-02  6.19e-01  
  7  +5.0001e-01  +6.7428e-01  1.74e-01  5.21e-04  2.83e-01  3.92e-06  4.38e-02  5.75e-01  
  8  +5.0000e-01  +6.5632e-01  1.56e-01  4.67e-04  2.54e-01  4.27e-06  2.58e-02  5.19e-01  
  9  +4.9999e-01  +6.3593e-01  1.36e-01  3.99e-04  2.17e-01  9.08e-06  7.06e-03  8.16e-01  
 10  +4.9955e-01  +6.1760e-01  1.18e-01  6.83e-05  3.73e-02  2.07e-04  2.35e-04  9.79e-01  
 11  +4.9854e-01  +6.0907e-01  1.11e-01  2.13e-05  1.16e-02  6.08e-04  6.97e-05  7.37e-01  
 12  +4.9869e-01  +6.0405e-01  1.05e-01  1.85e-05  1.01e-02  4.95e-04  6.01e-05  3.41e-01  
 13  +4.9944e-01  +5.9071e-01  9.13e-02  1.43e-05  7.80e-03  4.86e-05  4.55e-05  9.90e-01  
 14  +4.9906e-01  +5.8853e-01  8.95e-02  1.00e-05  5.46e-03  6.17e-05  3.17e-05  3.73e-01  
 15  +4.9867e-01  +5.8636e-01  8.77e-02  7.96e-06  4.35e-03  5.42e-05  2.52e-05  4.50e-01  
 16  +4.9794e-01  +5.8195e-01  8.40e-02  6.65e-06  3.63e-03  1.21e-05  2.11e-05  8.64e-01  
 17  +4.9777e-01  +5.8133e-01  8.36e-02  6.54e-06  3.57e-03  1.11e-05  2.08e-05  9.43e-02  
 18  +4.9624e-01  +5.7436e-01  7.81e-02  5.11e-06  2.79e-03  1.07e-05  1.63e-05  3.11e-01  
 19  +4.9400e-01  +5.6412e-01  7.01e-02  4.45e-06  2.43e-03  3.07e-06  1.45e-05  6.31e-01  
 20  +4.9321e-01  +5.6082e-01  6.76e-02  4.20e-06  2.29e-03  2.43e-06  1.37e-05  2.16e-01  
 21  +4.9161e-01  +5.5387e-01  6.23e-02  3.64e-06  1.99e-03  2.11e-06  1.20e-05  1.91e-01  
 22  +4.9104e-01  +5.5148e-01  6.04e-02  3.50e-06  1.91e-03  1.65e-06  1.15e-05  2.24e-01  
 23  +4.8674e-01  +5.3312e-01  4.64e-02  2.38e-06  1.30e-03  1.19e-06  8.03e-06  3.68e-01  
 24  +4.8504e-01  +5.2606e-01  4.10e-02  2.02e-06  1.10e-03  9.42e-07  6.88e-06  2.52e-01  
 25  +4.8407e-01  +5.2209e-01  3.80e-02  1.82e-06  9.92e-04  7.66e-07  6.23e-06  2.47e-01  
 26  +4.8274e-01  +5.1660e-01  3.39e-02  1.57e-06  8.56e-04  6.11e-07  5.41e-06  2.72e-01  
 27  +4.8019e-01  +5.0609e-01  2.59e-02  1.12e-06  6.12e-04  3.10e-07  3.92e-06  7.23e-01  
 28  +4.7802e-01  +4.9731e-01  1.93e-02  8.07e-07  4.40e-04  2.16e-07  2.85e-06  5.53e-01  
 29  +4.7790e-01  +4.9681e-01  1.89e-02  7.89e-07  4.30e-04  2.10e-07  2.79e-06  1.27e-01  
 30  +4.7457e-01  +4.8361e-01  9.04e-03  3.64e-07  1.98e-04  9.74e-08  1.32e-06  7.65e-01  
 31  +4.7428e-01  +4.8240e-01  8.11e-03  3.25e-07  1.77e-04  8.83e-08  1.18e-06  3.44e-01  
 32  +4.7223e-01  +4.7441e-01  2.19e-03  8.65e-08  4.71e-05  2.41e-08  3.20e-07  9.14e-01  
 33  +4.7184e-01  +4.7297e-01  1.13e-03  4.46e-08  2.43e-05  1.25e-08  1.66e-07  5.05e-01  
 34  +4.7158e-01  +4.7199e-01  4.06e-04  1.60e-08  8.72e-06  4.45e-09  5.98e-08  8.29e-01  
 35  +4.7148e-01  +4.7162e-01  1.39e-04  5.46e-09  2.97e-06  1.51e-09  2.05e-08  9.90e-01  
 36  +4.7143e-01  +4.7144e-01  4.15e-06  1.64e-10  8.92e-08  4.49e-11  6.14e-10  9.72e-01  
 37  +4.7143e-01  +4.7143e-01  1.43e-07  5.62e-12  3.06e-09  1.54e-12  2.11e-11  9.66e-01  
 38  +4.7143e-01  +4.7143e-01  1.45e-09  5.70e-14  3.11e-11  1.56e-14  2.14e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.61881s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:10:39 PM: Problem status: optimal
(CVXPY) Sep 20 08:10:39 PM: Optimal value: 4.714e-01
(CVXPY) Sep 20 08:10:39 PM: Compilation took 3.460e-01 seconds
(CVXPY) Sep 20 08:10:39 PM: Solver (including time spent in interface) took 1.678e+00 seconds
FULL MODEL:
  Accruacy: 0.5089
  Our objective: 0.017800000000000038

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.00096)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.00052)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.00068)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.00088)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.00036)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.00072)
 OR (x5 = 1 AND x7 = 0 AND x8 = 1)                                                                   <-- (term's our objective: 0.00968)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 100.62021088600159
Best over terms:
  Our final objective: 0.00967999999999998
    Its accruacy: 0.50484
    Its hamming distance: 10
  Shortest hamming distance: 0
    Its our objective: 0.0024000000000000427
  Highest accruacy: 0.50484
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

