Command:
python test_script.py -s constant_subclass -d 3 -n 1000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.18
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 3.

Computed total variation: 0.18600000000000003
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:23 PM: Your problem has 507 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:23 PM: Finished problem compilation (took 6.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 507
  constraints   = 1007
  nnz(P)        = 0
  nnz(A)        = 3007
  cones (total) = 1
    : Nonnegative = 1,  numel = 1007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9967e-01  +5.0082e+02  5.00e+02  9.50e-01  2.43e+01  1.00e+00  1.00e+00   ------   
  1  +6.1957e-01  +9.3123e+01  9.25e+01  2.96e-01  1.25e+01  4.25e-03  4.37e-01  6.94e-01  
  2  +5.5405e-01  +1.5952e+01  1.54e+01  1.20e-01  5.99e+00  6.79e-03  2.15e-01  6.79e-01  
  3  +5.0144e-01  +1.6539e+00  1.15e+00  2.40e-02  1.15e+00  6.73e-04  2.03e-01  3.08e-01  
  4  +5.0011e-01  +7.0717e-01  2.07e-01  4.34e-03  2.13e-01  1.54e-04  4.47e-02  8.36e-01  
  5  +4.8684e-01  +9.9808e-01  5.11e-01  1.57e-03  7.91e-02  3.11e-03  4.64e-03  9.53e-01  
  6  +4.6633e-01  +6.0009e-01  1.34e-01  3.45e-04  1.73e-02  3.42e-05  1.11e-03  8.73e-01  
  7  +4.4357e-01  +4.7308e-01  2.95e-02  7.05e-05  3.51e-03  6.49e-06  2.62e-04  8.22e-01  
  8  +4.3806e-01  +4.5111e-01  1.31e-02  2.74e-05  1.36e-03  5.97e-06  1.15e-04  9.90e-01  
  9  +4.3417e-01  +4.3437e-01  2.08e-04  4.27e-07  2.13e-05  8.95e-08  1.87e-06  9.84e-01  
 10  +4.3410e-01  +4.3410e-01  2.08e-06  4.27e-09  2.13e-07  8.94e-10  1.87e-08  9.90e-01  
 11  +4.3410e-01  +4.3410e-01  2.08e-08  4.27e-11  2.13e-09  8.95e-12  1.87e-10  9.90e-01  
 12  +4.3410e-01  +4.3410e-01  2.08e-10  4.27e-13  2.13e-11  8.96e-14  1.87e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.4536ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:23 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:23 PM: Optimal value: 4.341e-01
(CVXPY) Sep 20 07:27:23 PM: Compilation took 6.001e-03 seconds
(CVXPY) Sep 20 07:27:23 PM: Solver (including time spent in interface) took 4.004e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4341
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:23 PM: Your problem has 510 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:23 PM: Finished problem compilation (took 5.514e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 510
  constraints   = 1010
  nnz(P)        = 0
  nnz(A)        = 3459
  cones (total) = 1
    : Nonnegative = 1,  numel = 1010

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9960e-01  +5.0154e+02  5.01e+02  9.50e-01  2.55e+01  1.00e+00  1.01e+00   ------   
  1  +6.1842e-01  +9.3604e+01  9.30e+01  2.98e-01  1.32e+01  4.24e-03  4.43e-01  6.92e-01  
  2  +5.5318e-01  +1.5795e+01  1.52e+01  1.19e-01  6.24e+00  6.98e-03  2.15e-01  6.89e-01  
  3  +5.0289e-01  +2.0967e+00  1.59e+00  3.30e-02  1.64e+00  9.22e-04  2.05e-01  2.41e-01  
  4  +5.0027e-01  +7.0718e-01  2.07e-01  4.38e-03  2.26e-01  1.54e-04  4.27e-02  8.29e-01  
  5  +4.9108e-01  +1.1828e+00  6.92e-01  2.22e-03  1.18e-01  3.06e-03  6.22e-03  9.43e-01  
  6  +4.7835e-01  +8.8247e-01  4.04e-01  9.47e-04  5.02e-02  2.07e-03  2.70e-03  6.11e-01  
  7  +4.8720e-01  +7.9092e-01  3.04e-01  6.09e-04  3.24e-02  3.22e-04  1.67e-03  9.05e-01  
  8  +4.7262e-01  +6.4154e-01  1.69e-01  4.05e-04  2.14e-02  2.54e-06  1.18e-03  9.37e-01  
  9  +4.4945e-01  +5.4910e-01  9.97e-02  1.79e-04  9.45e-03  2.49e-05  5.35e-04  7.32e-01  
 10  +4.3252e-01  +4.8811e-01  5.56e-02  9.23e-05  4.84e-03  1.47e-05  2.86e-04  4.91e-01  
 11  +4.1199e-01  +4.1595e-01  3.96e-03  6.24e-06  3.27e-04  2.26e-06  2.05e-05  9.90e-01  
 12  +4.1012e-01  +4.1016e-01  4.07e-05  6.41e-08  3.36e-06  2.25e-08  2.13e-07  9.90e-01  
 13  +4.1010e-01  +4.1010e-01  4.07e-07  6.41e-10  3.36e-08  2.25e-10  2.13e-09  9.90e-01  
 14  +4.1010e-01  +4.1010e-01  4.07e-09  6.41e-12  3.36e-10  2.25e-12  2.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6161ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:23 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:23 PM: Optimal value: 4.101e-01
(CVXPY) Sep 20 07:27:23 PM: Compilation took 5.514e-03 seconds
(CVXPY) Sep 20 07:27:23 PM: Solver (including time spent in interface) took 4.001e-03 seconds
Iteration: 2, Objective: 0.4101
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:23 PM: Your problem has 511 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:23 PM: Finished problem compilation (took 3.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 1011
  nnz(P)        = 0
  nnz(A)        = 3524
  cones (total) = 1
    : Nonnegative = 1,  numel = 1011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0154e+02  5.01e+02  9.50e-01  2.56e+01  1.00e+00  1.01e+00   ------   
  1  +6.1754e-01  +9.3761e+01  9.31e+01  2.99e-01  1.33e+01  4.23e-03  4.44e-01  6.91e-01  
  2  +5.5296e-01  +1.5757e+01  1.52e+01  1.19e-01  6.23e+00  7.04e-03  2.14e-01  6.93e-01  
  3  +5.0272e-01  +2.0653e+00  1.56e+00  3.24e-02  1.62e+00  9.17e-04  2.04e-01  2.54e-01  
  4  +5.0057e-01  +9.0577e-01  4.05e-01  8.54e-03  4.40e-01  2.77e-04  7.38e-02  6.61e-01  
  5  +4.9729e-01  +1.0601e+00  5.63e-01  5.16e-03  2.72e-01  1.25e-03  1.62e-02  9.05e-01  
  6  +4.7911e-01  +8.5761e-01  3.78e-01  8.84e-04  4.71e-02  4.07e-03  2.57e-03  8.43e-01  
  7  +4.7405e-01  +7.1076e-01  2.37e-01  5.93e-04  3.15e-02  3.79e-05  1.74e-03  7.55e-01  
  8  +4.7008e-01  +6.9146e-01  2.21e-01  5.07e-04  2.69e-02  4.26e-05  1.49e-03  2.00e-01  
  9  +4.6322e-01  +6.4566e-01  1.82e-01  4.26e-04  2.25e-02  8.19e-05  1.30e-03  7.77e-01  
 10  +4.3474e-01  +5.0519e-01  7.05e-02  1.28e-04  6.73e-03  3.87e-05  4.05e-04  7.53e-01  
 11  +4.2493e-01  +4.7448e-01  4.95e-02  8.92e-05  4.69e-03  2.67e-05  2.95e-04  6.57e-01  
 12  +4.1004e-01  +4.1622e-01  6.18e-03  1.06e-05  5.58e-04  3.53e-06  3.74e-05  8.88e-01  
 13  +4.0726e-01  +4.0737e-01  1.14e-04  1.95e-07  1.02e-05  5.22e-08  7.08e-07  9.83e-01  
 14  +4.0720e-01  +4.0720e-01  1.14e-06  1.95e-09  1.02e-07  5.22e-10  7.09e-09  9.90e-01  
 15  +4.0720e-01  +4.0720e-01  1.14e-08  1.95e-11  1.02e-09  5.22e-12  7.09e-11  9.90e-01  
 16  +4.0720e-01  +4.0720e-01  1.14e-10  1.95e-13  1.02e-11  5.22e-14  7.09e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.0728ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:23 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:23 PM: Optimal value: 4.072e-01
(CVXPY) Sep 20 07:27:23 PM: Compilation took 3.998e-03 seconds
(CVXPY) Sep 20 07:27:23 PM: Solver (including time spent in interface) took 5.058e-03 seconds
FULL MODEL:
  Accruacy: 0.593
  Our objective: 0.18599999999999997

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.18)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1) <-- (term's our objective: 0.006)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.421783447265625
Best over terms:
  Our final objective: 0.17999999999999997
    Its accruacy: 0.59
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.17999999999999997
  Highest accruacy: 0.59
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

