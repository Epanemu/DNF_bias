Command:
python test_script.py -s constant_subclass -d 9 -n 1000 --seed 21 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.006
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 9.

Computed total variation: 0.5720000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:50 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:50 PM: Finished problem compilation (took 7.502e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 6019
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9997e-01  +5.0075e+02  5.00e+02  9.56e-01  3.59e+01  1.00e+00  1.00e+00   ------   
  1  +5.8064e-01  +1.0888e+02  1.08e+02  4.16e-01  2.30e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3051e-01  +1.2484e+01  1.20e+01  1.44e-01  1.01e+01  1.65e-02  2.71e-01  9.48e-01  
  3  +5.0614e-01  +3.1391e+00  2.63e+00  5.51e-02  3.78e+00  4.18e-05  2.37e-01  4.54e-01  
  4  +5.0057e-01  +7.2843e-01  2.28e-01  5.10e-03  3.68e-01  9.92e-06  6.46e-02  8.72e-01  
  5  +5.0022e-01  +6.5445e-01  1.54e-01  3.34e-03  2.42e-01  1.16e-05  2.50e-02  6.86e-01  
  6  +4.9840e-01  +6.1727e-01  1.19e-01  9.32e-04  6.86e-02  5.36e-05  3.11e-03  8.92e-01  
  7  +4.9319e-01  +5.8059e-01  8.74e-02  3.07e-04  2.26e-02  9.77e-05  9.80e-04  6.97e-01  
  8  +4.8804e-01  +5.4820e-01  6.02e-02  1.88e-04  1.38e-02  6.01e-05  6.18e-04  4.45e-01  
  9  +4.8734e-01  +5.4493e-01  5.76e-02  1.76e-04  1.30e-02  5.12e-05  5.84e-04  1.85e-01  
 10  +4.8106e-01  +5.1334e-01  3.23e-02  8.15e-05  5.99e-03  2.51e-05  2.87e-04  6.27e-01  
 11  +4.7436e-01  +4.8083e-01  6.47e-03  1.44e-05  1.05e-03  1.90e-06  5.68e-05  9.90e-01  
 12  +4.7216e-01  +4.7232e-01  1.65e-04  3.35e-07  2.46e-05  4.77e-08  1.44e-06  9.79e-01  
 13  +4.7210e-01  +4.7210e-01  1.66e-06  3.35e-09  2.46e-07  4.78e-10  1.44e-08  9.90e-01  
 14  +4.7210e-01  +4.7210e-01  1.66e-08  3.35e-11  2.46e-09  4.78e-12  1.44e-10  9.90e-01  
 15  +4.7210e-01  +4.7210e-01  1.66e-10  3.35e-13  2.46e-11  4.81e-14  1.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.018ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:50 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:50 PM: Optimal value: 4.721e-01
(CVXPY) Sep 20 07:57:50 PM: Compilation took 7.502e-03 seconds
(CVXPY) Sep 20 07:57:50 PM: Solver (including time spent in interface) took 1.002e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4721
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:50 PM: Your problem has 529 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:50 PM: Finished problem compilation (took 5.189e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 529
  constraints   = 1029
  nnz(P)        = 0
  nnz(A)        = 6733
  cones (total) = 1
    : Nonnegative = 1,  numel = 1029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9988e-01  +5.0140e+02  5.01e+02  9.56e-01  3.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.7941e-01  +1.0905e+02  1.08e+02  4.17e-01  2.33e+01  3.78e-03  5.77e-01  5.86e-01  
  2  +5.2932e-01  +1.2254e+01  1.17e+01  1.41e-01  1.01e+01  1.67e-02  2.67e-01  9.63e-01  
  3  +5.0570e-01  +3.0441e+00  2.54e+00  5.33e-02  3.73e+00  4.30e-05  2.26e-01  5.16e-01  
  4  +5.0122e-01  +1.0613e+00  5.60e-01  1.25e-02  9.13e-01  1.52e-05  1.05e-01  6.12e-01  
  5  +4.9984e-01  +7.5977e-01  2.60e-01  5.19e-03  3.84e-01  1.91e-05  2.60e-02  8.55e-01  
  6  +4.9106e-01  +7.1283e-01  2.22e-01  9.05e-04  6.84e-02  1.28e-04  2.74e-03  9.11e-01  
  7  +4.8542e-01  +6.7184e-01  1.86e-01  6.40e-04  4.83e-02  1.11e-04  1.95e-03  3.73e-01  
  8  +4.7911e-01  +6.4083e-01  1.62e-01  4.34e-04  3.26e-02  9.83e-05  1.34e-03  5.10e-01  
  9  +4.6763e-01  +5.8203e-01  1.14e-01  2.49e-04  1.86e-02  7.09e-05  8.01e-04  5.16e-01  
 10  +4.6556e-01  +5.7125e-01  1.06e-01  2.20e-04  1.65e-02  6.34e-05  7.12e-04  2.81e-01  
 11  +4.5005e-01  +4.9795e-01  4.79e-02  9.13e-05  6.82e-03  2.14e-05  3.14e-04  9.90e-01  
 12  +4.3661e-01  +4.4509e-01  8.48e-03  1.55e-05  1.15e-03  4.01e-06  5.64e-05  9.90e-01  
 13  +4.3348e-01  +4.3391e-01  4.28e-04  7.73e-07  5.76e-05  1.65e-07  2.93e-06  9.51e-01  
 14  +4.3330e-01  +4.3331e-01  4.40e-06  7.95e-09  5.92e-07  1.67e-09  3.04e-08  9.90e-01  
 15  +4.3330e-01  +4.3330e-01  4.40e-08  7.95e-11  5.92e-09  1.67e-11  3.04e-10  9.90e-01  
 16  +4.3330e-01  +4.3330e-01  4.40e-10  7.95e-13  5.92e-11  1.67e-13  3.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.9773ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:50 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:50 PM: Optimal value: 4.333e-01
(CVXPY) Sep 20 07:57:50 PM: Compilation took 5.189e-03 seconds
(CVXPY) Sep 20 07:57:50 PM: Solver (including time spent in interface) took 1.018e-02 seconds
Iteration: 2, Objective: 0.4333
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:51 PM: Your problem has 539 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:51 PM: Finished problem compilation (took 5.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 539
  constraints   = 1039
  nnz(P)        = 0
  nnz(A)        = 7151
  cones (total) = 1
    : Nonnegative = 1,  numel = 1039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9983e-01  +5.0156e+02  5.01e+02  9.56e-01  3.66e+01  1.00e+00  1.01e+00   ------   
  1  +5.7803e-01  +1.0907e+02  1.08e+02  4.18e-01  2.33e+01  3.78e-03  5.77e-01  5.86e-01  
  2  +5.2815e-01  +1.2018e+01  1.15e+01  1.38e-01  9.80e+00  1.70e-02  2.61e-01  9.79e-01  
  3  +5.0518e-01  +2.9301e+00  2.42e+00  5.11e-02  3.60e+00  4.44e-05  2.11e-01  5.93e-01  
  4  +5.0103e-01  +1.0928e+00  5.92e-01  1.32e-02  9.64e-01  1.76e-05  8.82e-02  6.36e-01  
  5  +4.9702e-01  +9.5463e-01  4.58e-01  4.70e-03  3.56e-01  6.17e-05  1.42e-02  9.06e-01  
  6  +4.8340e-01  +8.2621e-01  3.43e-01  1.26e-03  9.62e-02  1.47e-04  3.57e-03  7.54e-01  
  7  +4.7690e-01  +7.9312e-01  3.16e-01  9.47e-04  7.19e-02  1.29e-04  2.79e-03  6.11e-01  
  8  +4.5477e-01  +6.5226e-01  1.97e-01  4.55e-04  3.44e-02  8.56e-05  1.43e-03  7.17e-01  
  9  +4.4763e-01  +6.1176e-01  1.64e-01  3.94e-04  2.96e-02  6.79e-05  1.26e-03  3.89e-01  
 10  +4.2689e-01  +5.1063e-01  8.37e-02  1.82e-04  1.36e-02  3.33e-05  6.26e-04  6.53e-01  
 11  +4.2402e-01  +4.9459e-01  7.06e-02  1.49e-04  1.12e-02  3.44e-05  5.12e-04  6.59e-01  
 12  +4.0828e-01  +4.2523e-01  1.70e-02  3.48e-05  2.61e-03  7.44e-06  1.29e-04  7.77e-01  
 13  +4.0318e-01  +4.0472e-01  1.54e-03  3.10e-06  2.35e-04  6.64e-07  1.23e-05  9.71e-01  
 14  +4.0261e-01  +4.0265e-01  3.33e-05  6.66e-08  5.05e-06  1.36e-08  2.71e-07  9.81e-01  
 15  +4.0260e-01  +4.0260e-01  3.33e-07  6.66e-10  5.05e-08  1.36e-10  2.71e-09  9.90e-01  
 16  +4.0260e-01  +4.0260e-01  3.33e-09  6.66e-12  5.05e-10  1.36e-12  2.72e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.7774ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:51 PM: Optimal value: 4.026e-01
(CVXPY) Sep 20 07:57:51 PM: Compilation took 5.003e-03 seconds
(CVXPY) Sep 20 07:57:51 PM: Solver (including time spent in interface) took 1.001e-02 seconds
Iteration: 3, Objective: 0.4026
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:51 PM: Your problem has 549 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:51 PM: Finished problem compilation (took 6.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 549
  constraints   = 1049
  nnz(P)        = 0
  nnz(A)        = 7515
  cones (total) = 1
    : Nonnegative = 1,  numel = 1049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9977e-01  +5.0156e+02  5.01e+02  9.56e-01  3.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.7708e-01  +1.0910e+02  1.09e+02  4.20e-01  2.32e+01  3.78e-03  5.77e-01  5.86e-01  
  2  +5.2720e-01  +1.1842e+01  1.13e+01  1.36e-01  9.61e+00  1.71e-02  2.57e-01  9.90e-01  
  3  +5.0500e-01  +2.8785e+00  2.37e+00  5.03e-02  3.56e+00  4.65e-05  1.99e-01  6.45e-01  
  4  +5.0091e-01  +1.1265e+00  6.26e-01  1.39e-02  1.02e+00  2.02e-05  7.97e-02  6.42e-01  
  5  +4.9366e-01  +1.0537e+00  5.60e-01  3.86e-03  2.96e-01  1.01e-04  1.08e-02  9.14e-01  
  6  +4.7587e-01  +8.3363e-01  3.58e-01  1.24e-03  9.48e-02  1.36e-04  3.47e-03  7.02e-01  
  7  +4.7053e-01  +8.0654e-01  3.36e-01  1.00e-03  7.67e-02  1.39e-04  2.83e-03  2.86e-01  
  8  +4.5978e-01  +7.4414e-01  2.84e-01  6.71e-04  5.10e-02  1.33e-04  1.95e-03  5.30e-01  
  9  +4.4768e-01  +6.5319e-01  2.06e-01  4.98e-04  3.77e-02  8.57e-05  1.51e-03  8.47e-01  
 10  +4.3015e-01  +5.6856e-01  1.38e-01  2.90e-04  2.19e-02  6.15e-05  9.17e-04  4.78e-01  
 11  +4.1414e-01  +4.9175e-01  7.76e-02  1.53e-04  1.16e-02  3.91e-05  5.07e-04  7.73e-01  
 12  +3.9562e-01  +4.1409e-01  1.85e-02  3.48e-05  2.62e-03  8.70e-06  1.22e-04  8.13e-01  
 13  +3.9277e-01  +4.0331e-01  1.05e-02  1.93e-05  1.47e-03  5.46e-06  6.89e-05  5.98e-01  
 14  +3.8899e-01  +3.8948e-01  4.94e-04  8.93e-07  6.79e-05  2.55e-07  3.25e-06  9.57e-01  
 15  +3.8880e-01  +3.8881e-01  4.99e-06  9.01e-09  6.85e-07  2.57e-09  3.29e-08  9.90e-01  
 16  +3.8880e-01  +3.8880e-01  4.99e-08  9.01e-11  6.85e-09  2.57e-11  3.29e-10  9.90e-01  
 17  +3.8880e-01  +3.8880e-01  4.99e-10  9.01e-13  6.85e-11  2.57e-13  3.29e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.6645ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:51 PM: Optimal value: 3.888e-01
(CVXPY) Sep 20 07:57:51 PM: Compilation took 6.007e-03 seconds
(CVXPY) Sep 20 07:57:51 PM: Solver (including time spent in interface) took 1.255e-02 seconds
Iteration: 4, Objective: 0.3888
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:51 PM: Your problem has 559 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:51 PM: Finished problem compilation (took 5.497e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 559
  constraints   = 1059
  nnz(P)        = 0
  nnz(A)        = 7752
  cones (total) = 1
    : Nonnegative = 1,  numel = 1059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9974e-01  +5.0159e+02  5.01e+02  9.56e-01  3.66e+01  1.00e+00  1.01e+00   ------   
  1  +5.7592e-01  +1.0912e+02  1.09e+02  4.21e-01  2.31e+01  3.79e-03  5.77e-01  5.86e-01  
  2  +5.2658e-01  +1.1942e+01  1.14e+01  1.36e-01  9.50e+00  1.73e-02  2.56e-01  9.90e-01  
  3  +5.0543e-01  +2.7670e+00  2.26e+00  4.95e-02  3.53e+00  5.09e-05  1.73e-01  7.32e-01  
  4  +5.0082e-01  +1.1790e+00  6.78e-01  1.51e-02  1.11e+00  2.91e-05  6.88e-02  6.42e-01  
  5  +4.9146e-01  +1.2831e+00  7.92e-01  4.36e-03  3.35e-01  1.60e-04  1.17e-02  9.05e-01  
  6  +4.6999e-01  +9.3649e-01  4.66e-01  1.45e-03  1.11e-01  1.70e-04  4.01e-03  7.03e-01  
  7  +4.5053e-01  +8.0885e-01  3.58e-01  8.22e-04  6.28e-02  1.64e-04  2.33e-03  5.26e-01  
  8  +4.2603e-01  +6.1405e-01  1.88e-01  4.52e-04  3.41e-02  7.32e-05  1.40e-03  6.91e-01  
  9  +4.1131e-01  +5.3551e-01  1.24e-01  2.77e-04  2.09e-02  5.23e-05  8.89e-04  5.52e-01  
 10  +3.9919e-01  +4.6890e-01  6.97e-02  1.48e-04  1.12e-02  3.83e-05  4.92e-04  9.55e-01  
 11  +3.8309e-01  +3.9779e-01  1.47e-02  3.02e-05  2.29e-03  7.69e-06  1.07e-04  8.07e-01  
 12  +3.7971e-01  +3.8354e-01  3.83e-03  7.82e-06  5.92e-04  2.02e-06  2.82e-05  7.70e-01  
 13  +3.7907e-01  +3.8092e-01  1.85e-03  3.71e-06  2.80e-04  9.99e-07  1.35e-05  6.19e-01  
 14  +3.7872e-01  +3.7943e-01  7.09e-04  1.43e-06  1.08e-04  3.93e-07  5.19e-06  9.90e-01  
 15  +3.7846e-01  +3.7848e-01  1.88e-05  3.77e-08  2.84e-06  1.03e-08  1.37e-07  9.75e-01  
 16  +3.7845e-01  +3.7845e-01  1.88e-07  3.77e-10  2.84e-08  1.03e-10  1.38e-09  9.90e-01  
 17  +3.7845e-01  +3.7845e-01  1.88e-09  3.77e-12  2.85e-10  1.03e-12  1.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.0115ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:51 PM: Optimal value: 3.785e-01
(CVXPY) Sep 20 07:57:51 PM: Compilation took 5.497e-03 seconds
(CVXPY) Sep 20 07:57:51 PM: Solver (including time spent in interface) took 1.355e-02 seconds
Iteration: 5, Objective: 0.3785
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:51 PM: Your problem has 569 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:51 PM: Finished problem compilation (took 5.575e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 569
  constraints   = 1069
  nnz(P)        = 0
  nnz(A)        = 8002
  cones (total) = 1
    : Nonnegative = 1,  numel = 1069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9971e-01  +5.0164e+02  5.01e+02  9.57e-01  3.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.7423e-01  +1.0916e+02  1.09e+02  4.22e-01  2.29e+01  3.79e-03  5.77e-01  5.86e-01  
  2  +5.2566e-01  +1.2060e+01  1.15e+01  1.35e-01  9.43e+00  1.75e-02  2.55e-01  9.90e-01  
  3  +5.0571e-01  +2.4551e+00  1.95e+00  4.33e-02  3.15e+00  5.56e-05  1.36e-01  8.43e-01  
  4  +5.0043e-01  +1.1962e+00  6.96e-01  1.35e-02  1.01e+00  5.61e-05  4.47e-02  7.24e-01  
  5  +4.8863e-01  +1.1341e+00  6.45e-01  3.01e-03  2.34e-01  2.43e-04  7.78e-03  8.51e-01  
  6  +4.6755e-01  +8.8535e-01  4.18e-01  1.39e-03  1.06e-01  1.86e-04  3.76e-03  6.30e-01  
  7  +4.5249e-01  +8.0979e-01  3.57e-01  9.22e-04  7.06e-02  1.84e-04  2.55e-03  4.23e-01  
  8  +4.3099e-01  +6.8338e-01  2.52e-01  6.21e-04  4.72e-02  1.13e-04  1.82e-03  4.51e-01  
  9  +3.8746e-01  +4.5175e-01  6.43e-02  1.42e-04  1.07e-02  1.90e-05  4.67e-04  8.61e-01  
 10  +3.7970e-01  +4.2036e-01  4.07e-02  8.50e-05  6.46e-03  2.02e-05  2.88e-04  8.11e-01  
 11  +3.6954e-01  +3.7876e-01  9.22e-03  1.87e-05  1.43e-03  4.74e-06  6.65e-05  8.11e-01  
 12  +3.6685e-01  +3.6844e-01  1.58e-03  3.19e-06  2.45e-04  8.22e-07  1.15e-05  8.50e-01  
 13  +3.6631e-01  +3.6632e-01  1.78e-05  3.59e-08  2.75e-06  9.13e-09  1.30e-07  9.89e-01  
 14  +3.6630e-01  +3.6630e-01  1.78e-07  3.59e-10  2.75e-08  9.13e-11  1.30e-09  9.90e-01  
 15  +3.6630e-01  +3.6630e-01  1.78e-09  3.59e-12  2.75e-10  9.13e-13  1.30e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.131ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:51 PM: Optimal value: 3.663e-01
(CVXPY) Sep 20 07:57:51 PM: Compilation took 5.575e-03 seconds
(CVXPY) Sep 20 07:57:51 PM: Solver (including time spent in interface) took 1.396e-02 seconds
Iteration: 6, Objective: 0.3663
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:51 PM: Your problem has 579 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:51 PM: Finished problem compilation (took 5.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 579
  constraints   = 1079
  nnz(P)        = 0
  nnz(A)        = 8166
  cones (total) = 1
    : Nonnegative = 1,  numel = 1079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9968e-01  +5.0152e+02  5.01e+02  9.57e-01  3.64e+01  1.00e+00  1.01e+00   ------   
  1  +5.7331e-01  +1.0912e+02  1.09e+02  4.23e-01  2.28e+01  3.79e-03  5.76e-01  5.86e-01  
  2  +5.2502e-01  +1.2145e+01  1.16e+01  1.35e-01  9.33e+00  1.76e-02  2.54e-01  9.90e-01  
  3  +5.0592e-01  +2.2584e+00  1.75e+00  3.84e-02  2.83e+00  5.95e-05  1.13e-01  8.88e-01  
  4  +5.0007e-01  +1.2714e+00  7.71e-01  9.88e-03  7.60e-01  1.21e-04  2.66e-02  8.49e-01  
  5  +4.8768e-01  +1.1649e+00  6.77e-01  2.64e-03  2.07e-01  3.56e-04  6.62e-03  7.63e-01  
  6  +4.6674e-01  +9.7463e-01  5.08e-01  1.45e-03  1.12e-01  3.11e-04  3.75e-03  5.46e-01  
  7  +4.4534e-01  +8.3465e-01  3.89e-01  9.87e-04  7.62e-02  2.19e-04  2.69e-03  4.43e-01  
  8  +4.1227e-01  +6.3258e-01  2.20e-01  5.29e-04  4.05e-02  9.92e-05  1.57e-03  5.60e-01  
  9  +3.8005e-01  +4.6137e-01  8.13e-02  1.87e-04  1.42e-02  3.14e-05  6.11e-04  6.68e-01  
 10  +3.6758e-01  +4.0106e-01  3.35e-02  7.44e-05  5.69e-03  1.58e-05  2.53e-04  7.87e-01  
 11  +3.6416e-01  +3.8691e-01  2.27e-02  4.92e-05  3.78e-03  1.11e-05  1.70e-04  4.11e-01  
 12  +3.5818e-01  +3.6167e-01  3.49e-03  7.38e-06  5.70e-04  1.77e-06  2.63e-05  8.99e-01  
 13  +3.5713e-01  +3.5737e-01  2.39e-04  5.05e-07  3.89e-05  1.21e-07  1.81e-06  9.41e-01  
 14  +3.5705e-01  +3.5705e-01  2.40e-06  5.07e-09  3.91e-07  1.22e-09  1.82e-08  9.90e-01  
 15  +3.5705e-01  +3.5705e-01  2.40e-08  5.07e-11  3.91e-09  1.22e-11  1.82e-10  9.90e-01  
 16  +3.5705e-01  +3.5705e-01  2.40e-10  5.08e-13  3.92e-11  1.22e-13  1.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.7045ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:51 PM: Optimal value: 3.571e-01
(CVXPY) Sep 20 07:57:51 PM: Compilation took 5.999e-03 seconds
(CVXPY) Sep 20 07:57:51 PM: Solver (including time spent in interface) took 1.403e-02 seconds
Iteration: 7, Objective: 0.3571
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:51 PM: Your problem has 589 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:51 PM: Finished problem compilation (took 7.010e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 589
  constraints   = 1089
  nnz(P)        = 0
  nnz(A)        = 8319
  cones (total) = 1
    : Nonnegative = 1,  numel = 1089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9965e-01  +5.0161e+02  5.01e+02  9.57e-01  3.62e+01  1.00e+00  1.01e+00   ------   
  1  +5.7174e-01  +1.0917e+02  1.09e+02  4.24e-01  2.26e+01  3.80e-03  5.76e-01  5.86e-01  
  2  +5.2406e-01  +1.2267e+01  1.17e+01  1.35e-01  9.26e+00  1.77e-02  2.53e-01  9.90e-01  
  3  +5.0676e-01  +2.3600e+00  1.85e+00  3.79e-02  2.82e+00  6.37e-04  1.03e-01  8.41e-01  
  4  +5.0575e-01  +2.2305e+00  1.72e+00  2.44e-02  1.86e+00  1.06e-03  6.09e-02  4.45e-01  
  5  +5.0259e-01  +2.0386e+00  1.54e+00  2.00e-02  1.51e+00  5.99e-04  5.46e-02  4.09e-01  
  6  +4.9032e-01  +1.5313e+00  1.04e+00  3.57e-03  2.80e-01  1.81e-03  8.65e-03  8.48e-01  
  7  +4.7326e-01  +1.2614e+00  7.88e-01  2.30e-03  1.79e-01  1.20e-03  5.77e-03  4.55e-01  
  8  +4.5985e-01  +1.1296e+00  6.70e-01  1.72e-03  1.34e-01  9.58e-04  4.42e-03  3.34e-01  
  9  +4.3200e-01  +8.3809e-01  4.06e-01  1.08e-03  8.26e-02  1.90e-04  3.00e-03  6.70e-01  
 10  +3.8291e-01  +5.1885e-01  1.36e-01  3.17e-04  2.40e-02  4.71e-05  9.91e-04  7.30e-01  
 11  +3.6442e-01  +4.2875e-01  6.43e-02  1.47e-04  1.12e-02  2.41e-05  4.94e-04  5.86e-01  
 12  +3.5482e-01  +3.8358e-01  2.88e-02  6.43e-05  4.89e-03  1.22e-05  2.25e-04  6.60e-01  
 13  +3.5081e-01  +3.6672e-01  1.59e-02  3.47e-05  2.66e-03  7.13e-06  1.24e-04  5.69e-01  
 14  +3.4671e-01  +3.4966e-01  2.95e-03  6.29e-06  4.85e-04  1.34e-06  2.33e-05  8.36e-01  
 15  +3.4579e-01  +3.4591e-01  1.20e-04  2.55e-07  1.97e-05  5.21e-08  9.59e-07  9.61e-01  
 16  +3.4575e-01  +3.4575e-01  1.21e-06  2.57e-09  1.98e-07  5.22e-10  9.67e-09  9.90e-01  
 17  +3.4575e-01  +3.4575e-01  1.21e-08  2.57e-11  1.98e-09  5.22e-12  9.67e-11  9.90e-01  
 18  +3.4575e-01  +3.4575e-01  1.21e-10  2.57e-13  1.99e-11  5.23e-14  9.69e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.9595ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:51 PM: Optimal value: 3.458e-01
(CVXPY) Sep 20 07:57:51 PM: Compilation took 7.010e-03 seconds
(CVXPY) Sep 20 07:57:51 PM: Solver (including time spent in interface) took 1.569e-02 seconds
Iteration: 8, Objective: 0.3458
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:51 PM: Your problem has 599 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:51 PM: Finished problem compilation (took 7.991e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 599
  constraints   = 1099
  nnz(P)        = 0
  nnz(A)        = 8475
  cones (total) = 1
    : Nonnegative = 1,  numel = 1099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0157e+02  5.01e+02  9.57e-01  3.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.7022e-01  +1.0927e+02  1.09e+02  4.25e-01  2.25e+01  3.80e-03  5.77e-01  5.86e-01  
  2  +5.2320e-01  +1.2383e+01  1.19e+01  1.35e-01  9.20e+00  1.79e-02  2.53e-01  9.90e-01  
  3  +5.0861e-01  +3.3024e+00  2.79e+00  5.07e-02  3.74e+00  2.53e-03  1.24e-01  6.62e-01  
  4  +5.0175e-01  +2.0474e+00  1.55e+00  1.96e-02  1.49e+00  4.03e-03  5.01e-02  7.76e-01  
  5  +4.9919e-01  +2.1772e+00  1.68e+00  1.27e-02  9.74e-01  2.70e-03  3.13e-02  8.51e-01  
  6  +4.8488e-01  +1.7793e+00  1.29e+00  4.38e-03  3.41e-01  4.54e-03  1.07e-02  6.62e-01  
  7  +4.5847e-01  +1.2126e+00  7.54e-01  2.12e-03  1.63e-01  1.60e-03  5.47e-03  7.00e-01  
  8  +4.4259e-01  +9.7811e-01  5.36e-01  1.53e-03  1.17e-01  2.89e-04  4.13e-03  6.92e-01  
  9  +3.9562e-01  +6.3521e-01  2.40e-01  5.70e-04  4.30e-02  1.13e-04  1.70e-03  6.86e-01  
 10  +3.6859e-01  +4.7967e-01  1.11e-01  2.63e-04  1.97e-02  4.99e-05  8.60e-04  5.46e-01  
 11  +3.5575e-01  +4.1158e-01  5.58e-02  1.30e-04  9.77e-03  2.66e-05  4.46e-04  6.14e-01  
 12  +3.4680e-01  +3.6786e-01  2.11e-02  4.76e-05  3.61e-03  1.04e-05  1.71e-04  7.02e-01  
 13  +3.4274e-01  +3.4916e-01  6.42e-03  1.43e-05  1.09e-03  3.19e-06  5.31e-05  8.25e-01  
 14  +3.4098e-01  +3.4153e-01  5.53e-04  1.23e-06  9.38e-05  2.66e-07  4.66e-06  9.31e-01  
 15  +3.4080e-01  +3.4081e-01  1.00e-05  2.24e-08  1.70e-06  4.73e-09  8.50e-08  9.90e-01  
 16  +3.4080e-01  +3.4080e-01  1.00e-07  2.24e-10  1.70e-08  4.73e-11  8.50e-10  9.90e-01  
 17  +3.4080e-01  +3.4080e-01  1.00e-09  2.24e-12  1.70e-10  4.73e-13  8.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.3488ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:51 PM: Optimal value: 3.408e-01
(CVXPY) Sep 20 07:57:51 PM: Compilation took 7.991e-03 seconds
(CVXPY) Sep 20 07:57:51 PM: Solver (including time spent in interface) took 1.705e-02 seconds
Iteration: 9, Objective: 0.3408
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:52 PM: Your problem has 609 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:52 PM: Finished problem compilation (took 7.050e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 609
  constraints   = 1109
  nnz(P)        = 0
  nnz(A)        = 8612
  cones (total) = 1
    : Nonnegative = 1,  numel = 1109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9957e-01  +5.0163e+02  5.01e+02  9.58e-01  3.60e+01  1.00e+00  1.01e+00   ------   
  1  +5.6877e-01  +1.0937e+02  1.09e+02  4.27e-01  2.24e+01  3.80e-03  5.77e-01  5.85e-01  
  2  +5.2218e-01  +1.2503e+01  1.20e+01  1.35e-01  9.14e+00  1.81e-02  2.53e-01  9.90e-01  
  3  +5.0919e-01  +3.6720e+00  3.16e+00  5.31e-02  3.91e+00  3.42e-03  1.26e-01  6.11e-01  
  4  +5.0194e-01  +2.2539e+00  1.75e+00  2.18e-02  1.65e+00  4.52e-03  5.45e-02  7.49e-01  
  5  +4.9742e-01  +2.3813e+00  1.88e+00  1.22e-02  9.41e-01  3.84e-03  2.94e-02  8.75e-01  
  6  +4.8057e-01  +1.8231e+00  1.34e+00  4.56e-03  3.55e-01  4.98e-03  1.10e-02  6.36e-01  
  7  +4.6107e-01  +1.4928e+00  1.03e+00  2.87e-03  2.21e-01  3.57e-03  7.19e-03  4.75e-01  
  8  +4.4694e-01  +1.2952e+00  8.48e-01  2.11e-03  1.62e-01  2.50e-03  5.44e-03  3.73e-01  
  9  +4.2064e-01  +8.7637e-01  4.56e-01  1.25e-03  9.46e-02  2.08e-05  3.52e-03  7.72e-01  
 10  +3.7251e-01  +5.2476e-01  1.52e-01  3.73e-04  2.77e-02  1.77e-05  1.18e-03  7.23e-01  
 11  +3.5486e-01  +4.3597e-01  8.11e-02  1.94e-04  1.45e-02  1.93e-05  6.58e-04  6.08e-01  
 12  +3.4078e-01  +3.6904e-01  2.83e-02  6.49e-05  4.87e-03  9.62e-06  2.37e-04  7.73e-01  
 13  +3.3412e-01  +3.3926e-01  5.15e-03  1.16e-05  8.72e-04  2.36e-06  4.48e-05  9.71e-01  
 14  +3.3286e-01  +3.3414e-01  1.28e-03  2.85e-06  2.14e-04  6.04e-07  1.13e-05  9.90e-01  
 15  +3.3241e-01  +3.3244e-01  3.08e-05  6.84e-08  5.13e-06  1.43e-08  2.73e-07  9.76e-01  
 16  +3.3240e-01  +3.3240e-01  3.08e-07  6.84e-10  5.13e-08  1.43e-10  2.73e-09  9.90e-01  
 17  +3.3240e-01  +3.3240e-01  3.08e-09  6.84e-12  5.13e-10  1.43e-12  2.73e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.1736ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:52 PM: Optimal value: 3.324e-01
(CVXPY) Sep 20 07:57:52 PM: Compilation took 7.050e-03 seconds
(CVXPY) Sep 20 07:57:52 PM: Solver (including time spent in interface) took 1.901e-02 seconds
Iteration: 10, Objective: 0.3324
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:52 PM: Your problem has 619 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:52 PM: Finished problem compilation (took 7.522e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 619
  constraints   = 1119
  nnz(P)        = 0
  nnz(A)        = 8737
  cones (total) = 1
    : Nonnegative = 1,  numel = 1119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9956e-01  +5.0168e+02  5.01e+02  9.58e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.6745e-01  +1.0940e+02  1.09e+02  4.27e-01  2.22e+01  3.80e-03  5.77e-01  5.85e-01  
  2  +5.2143e-01  +1.2568e+01  1.20e+01  1.34e-01  9.04e+00  1.82e-02  2.52e-01  9.90e-01  
  3  +5.0914e-01  +3.7297e+00  3.22e+00  5.18e-02  3.81e+00  3.69e-03  1.21e-01  6.05e-01  
  4  +5.0424e-01  +2.7617e+00  2.26e+00  2.83e-02  2.14e+00  4.39e-03  6.84e-02  5.40e-01  
  5  +4.9944e-01  +2.6462e+00  2.15e+00  1.69e-02  1.29e+00  3.10e-03  4.08e-02  7.97e-01  
  6  +4.8403e-01  +2.0004e+00  1.52e+00  5.68e-03  4.40e-01  4.55e-03  1.36e-02  6.69e-01  
  7  +4.5993e-01  +1.5113e+00  1.05e+00  3.10e-03  2.37e-01  3.01e-03  7.75e-03  5.61e-01  
  8  +4.4233e-01  +1.3022e+00  8.60e-01  2.08e-03  1.59e-01  2.26e-03  5.33e-03  4.42e-01  
  9  +4.1557e-01  +8.7710e-01  4.62e-01  1.29e-03  9.67e-02  1.79e-05  3.64e-03  7.80e-01  
 10  +3.6702e-01  +5.2520e-01  1.58e-01  3.90e-04  2.88e-02  1.45e-05  1.24e-03  7.04e-01  
 11  +3.4503e-01  +4.1813e-01  7.31e-02  1.73e-04  1.28e-02  1.91e-05  6.06e-04  7.06e-01  
 12  +3.3345e-01  +3.6069e-01  2.72e-02  6.23e-05  4.61e-03  1.15e-05  2.34e-04  8.68e-01  
 13  +3.2809e-01  +3.3662e-01  8.53e-03  1.92e-05  1.42e-03  4.10e-06  7.52e-05  9.71e-01  
 14  +3.2680e-01  +3.3168e-01  4.88e-03  1.06e-05  7.90e-04  2.36e-06  4.19e-05  6.84e-01  
 15  +3.2524e-01  +3.2562e-01  3.84e-04  8.20e-07  6.13e-05  1.83e-07  3.32e-06  9.36e-01  
 16  +3.2510e-01  +3.2511e-01  5.51e-06  1.18e-08  8.79e-07  2.61e-09  4.78e-08  9.86e-01  
 17  +3.2510e-01  +3.2510e-01  5.51e-08  1.18e-10  8.79e-09  2.61e-11  4.78e-10  9.90e-01  
 18  +3.2510e-01  +3.2510e-01  5.51e-10  1.18e-12  8.79e-11  2.61e-13  4.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.1486ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:52 PM: Optimal value: 3.251e-01
(CVXPY) Sep 20 07:57:52 PM: Compilation took 7.522e-03 seconds
(CVXPY) Sep 20 07:57:52 PM: Solver (including time spent in interface) took 1.951e-02 seconds
Iteration: 11, Objective: 0.3251
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:52 PM: Your problem has 629 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:52 PM: Finished problem compilation (took 7.525e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 629
  constraints   = 1129
  nnz(P)        = 0
  nnz(A)        = 8863
  cones (total) = 1
    : Nonnegative = 1,  numel = 1129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9956e-01  +5.0167e+02  5.01e+02  9.58e-01  3.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.6686e-01  +1.0939e+02  1.09e+02  4.28e-01  2.20e+01  3.81e-03  5.76e-01  5.86e-01  
  2  +5.2104e-01  +1.2609e+01  1.21e+01  1.34e-01  8.94e+00  1.83e-02  2.51e-01  9.90e-01  
  3  +5.0900e-01  +3.7139e+00  3.20e+00  5.04e-02  3.70e+00  3.77e-03  1.17e-01  6.08e-01  
  4  +5.0520e-01  +2.9629e+00  2.46e+00  3.08e-02  2.31e+00  4.33e-03  7.34e-02  4.38e-01  
  5  +5.0077e-01  +2.7764e+00  2.28e+00  2.10e-02  1.58e+00  2.83e-03  5.09e-02  6.79e-01  
  6  +4.8477e-01  +2.0488e+00  1.56e+00  5.73e-03  4.44e-01  5.00e-03  1.36e-02  7.35e-01  
  7  +4.5876e-01  +1.5266e+00  1.07e+00  3.06e-03  2.35e-01  2.99e-03  7.63e-03  5.86e-01  
  8  +4.4328e-01  +1.2454e+00  8.02e-01  2.27e-03  1.72e-01  1.39e-03  5.86e-03  4.43e-01  
  9  +4.1749e-01  +9.1517e-01  4.98e-01  1.43e-03  1.07e-01  1.26e-05  4.01e-03  9.04e-01  
 10  +3.6409e-01  +5.3392e-01  1.70e-01  4.22e-04  3.11e-02  1.20e-05  1.33e-03  7.03e-01  
 11  +3.4325e-01  +4.3526e-01  9.20e-02  2.22e-04  1.64e-02  2.37e-05  7.72e-04  6.61e-01  
 12  +3.2970e-01  +3.6599e-01  3.63e-02  8.57e-05  6.33e-03  1.31e-05  3.23e-04  7.61e-01  
 13  +3.2509e-01  +3.4448e-01  1.94e-02  4.50e-05  3.32e-03  7.54e-06  1.76e-04  5.91e-01  
 14  +3.2139e-01  +3.2782e-01  6.43e-03  1.47e-05  1.09e-03  2.62e-06  5.90e-05  7.28e-01  
 15  +3.2003e-01  +3.2224e-01  2.21e-03  4.91e-06  3.67e-04  9.35e-07  2.01e-05  8.14e-01  
 16  +3.1932e-01  +3.1939e-01  6.80e-05  1.50e-07  1.12e-05  2.79e-08  6.20e-07  9.69e-01  
 17  +3.1930e-01  +3.1930e-01  6.82e-07  1.51e-09  1.13e-07  2.80e-10  6.23e-09  9.90e-01  
 18  +3.1930e-01  +3.1930e-01  6.82e-09  1.51e-11  1.13e-09  2.80e-12  6.23e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.3517ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:52 PM: Optimal value: 3.193e-01
(CVXPY) Sep 20 07:57:52 PM: Compilation took 7.525e-03 seconds
(CVXPY) Sep 20 07:57:52 PM: Solver (including time spent in interface) took 2.004e-02 seconds
Iteration: 12, Objective: 0.3193
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:52 PM: Your problem has 639 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:52 PM: Finished problem compilation (took 7.522e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 639
  constraints   = 1139
  nnz(P)        = 0
  nnz(A)        = 8974
  cones (total) = 1
    : Nonnegative = 1,  numel = 1139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9955e-01  +5.0172e+02  5.01e+02  9.58e-01  3.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.6545e-01  +1.0940e+02  1.09e+02  4.28e-01  2.19e+01  3.81e-03  5.75e-01  5.86e-01  
  2  +5.2022e-01  +1.2706e+01  1.22e+01  1.33e-01  8.84e+00  1.84e-02  2.50e-01  9.90e-01  
  3  +5.0851e-01  +3.6016e+00  3.09e+00  4.67e-02  3.43e+00  3.80e-03  1.08e-01  6.25e-01  
  4  +5.0635e-01  +3.1957e+00  2.69e+00  3.34e-02  2.50e+00  4.25e-03  7.80e-02  2.90e-01  
  5  +5.0240e-01  +2.9180e+00  2.42e+00  2.77e-02  2.06e+00  2.57e-03  6.85e-02  4.02e-01  
  6  +4.8600e-01  +1.9362e+00  1.45e+00  5.59e-03  4.35e-01  5.32e-03  1.32e-02  8.15e-01  
  7  +4.6009e-01  +1.4680e+00  1.01e+00  3.07e-03  2.36e-01  3.25e-03  7.59e-03  5.49e-01  
  8  +4.4172e-01  +1.2282e+00  7.86e-01  2.23e-03  1.69e-01  1.57e-03  5.73e-03  4.90e-01  
  9  +4.1376e-01  +9.2729e-01  5.14e-01  1.51e-03  1.13e-01  1.39e-05  4.22e-03  8.68e-01  
 10  +3.6174e-01  +5.5706e-01  1.95e-01  4.90e-04  3.61e-02  1.81e-05  1.54e-03  6.90e-01  
 11  +3.3956e-01  +4.4296e-01  1.03e-01  2.54e-04  1.87e-02  2.04e-05  8.68e-04  5.75e-01  
 12  +3.2334e-01  +3.5928e-01  3.59e-02  8.67e-05  6.39e-03  8.83e-06  3.23e-04  6.95e-01  
 13  +3.1700e-01  +3.2819e-01  1.12e-02  2.64e-05  1.95e-03  3.84e-06  1.03e-04  8.20e-01  
 14  +3.1520e-01  +3.2061e-01  5.41e-03  1.25e-05  9.32e-04  2.11e-06  4.94e-05  7.44e-01  
 15  +3.1358e-01  +3.1382e-01  2.43e-04  5.57e-07  4.16e-05  9.07e-08  2.25e-06  9.63e-01  
 16  +3.1350e-01  +3.1350e-01  2.80e-06  6.43e-09  4.80e-07  1.04e-09  2.61e-08  9.89e-01  
 17  +3.1350e-01  +3.1350e-01  2.80e-08  6.43e-11  4.80e-09  1.04e-11  2.61e-10  9.90e-01  
 18  +3.1350e-01  +3.1350e-01  2.81e-10  6.44e-13  4.81e-11  1.05e-13  2.61e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.2914ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:52 PM: Optimal value: 3.135e-01
(CVXPY) Sep 20 07:57:52 PM: Compilation took 7.522e-03 seconds
(CVXPY) Sep 20 07:57:52 PM: Solver (including time spent in interface) took 1.903e-02 seconds
Iteration: 13, Objective: 0.3135
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:52 PM: Your problem has 649 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:52 PM: Finished problem compilation (took 7.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 649
  constraints   = 1149
  nnz(P)        = 0
  nnz(A)        = 9061
  cones (total) = 1
    : Nonnegative = 1,  numel = 1149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9955e-01  +5.0189e+02  5.01e+02  9.58e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.6422e-01  +1.0940e+02  1.09e+02  4.28e-01  2.17e+01  3.82e-03  5.75e-01  5.86e-01  
  2  +5.1955e-01  +1.2788e+01  1.23e+01  1.33e-01  8.74e+00  1.85e-02  2.48e-01  9.90e-01  
  3  +5.0796e-01  +3.4511e+00  2.94e+00  4.29e-02  3.16e+00  3.73e-03  9.93e-02  6.46e-01  
  4  +5.0672e-01  +3.2766e+00  2.77e+00  3.38e-02  2.53e+00  4.19e-03  7.81e-02  2.22e-01  
  5  +5.0242e-01  +3.0182e+00  2.52e+00  2.83e-02  2.10e+00  2.59e-03  6.95e-02  3.89e-01  
  6  +4.8438e-01  +1.9987e+00  1.51e+00  5.50e-03  4.28e-01  5.58e-03  1.29e-02  8.22e-01  
  7  +4.5538e-01  +1.4872e+00  1.03e+00  3.00e-03  2.29e-01  3.31e-03  7.37e-03  5.48e-01  
  8  +4.4008e-01  +1.3117e+00  8.72e-01  2.38e-03  1.81e-01  2.18e-03  6.03e-03  3.39e-01  
  9  +4.0117e-01  +8.8887e-01  4.88e-01  1.35e-03  1.01e-01  1.95e-05  3.79e-03  8.35e-01  
 10  +3.5309e-01  +5.4079e-01  1.88e-01  4.81e-04  3.53e-02  1.59e-05  1.53e-03  6.42e-01  
 11  +3.2858e-01  +4.1547e-01  8.69e-02  2.14e-04  1.58e-02  2.58e-05  7.50e-04  7.60e-01  
 12  +3.1739e-01  +3.5870e-01  4.13e-02  9.98e-05  7.36e-03  1.33e-05  3.71e-04  5.76e-01  
 13  +3.1043e-01  +3.2493e-01  1.45e-02  3.43e-05  2.53e-03  4.96e-06  1.35e-04  6.99e-01  
 14  +3.0733e-01  +3.1096e-01  3.63e-03  8.45e-06  6.20e-04  1.26e-06  3.48e-05  7.80e-01  
 15  +3.0638e-01  +3.0679e-01  4.09e-04  9.46e-07  6.93e-05  1.55e-07  4.01e-06  9.46e-01  
 16  +3.0625e-01  +3.0626e-01  5.35e-06  1.24e-08  9.05e-07  2.04e-09  5.27e-08  9.90e-01  
 17  +3.0625e-01  +3.0625e-01  5.35e-08  1.24e-10  9.05e-09  2.05e-11  5.28e-10  9.90e-01  
 18  +3.0625e-01  +3.0625e-01  5.40e-10  1.25e-12  9.14e-11  2.07e-13  5.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.2665ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:52 PM: Optimal value: 3.063e-01
(CVXPY) Sep 20 07:57:52 PM: Compilation took 7.510e-03 seconds
(CVXPY) Sep 20 07:57:52 PM: Solver (including time spent in interface) took 2.188e-02 seconds
Iteration: 14, Objective: 0.3063
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:52 PM: Your problem has 655 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:53 PM: Finished problem compilation (took 8.291e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 655
  constraints   = 1155
  nnz(P)        = 0
  nnz(A)        = 9136
  cones (total) = 1
    : Nonnegative = 1,  numel = 1155

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0188e+02  5.01e+02  9.58e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.6375e-01  +1.0943e+02  1.09e+02  4.29e-01  2.16e+01  3.82e-03  5.75e-01  5.86e-01  
  2  +5.1911e-01  +1.2835e+01  1.23e+01  1.33e-01  8.70e+00  1.86e-02  2.48e-01  9.90e-01  
  3  +5.0769e-01  +3.3716e+00  2.86e+00  4.10e-02  3.02e+00  3.69e-03  9.50e-02  6.57e-01  
  4  +5.0665e-01  +3.2479e+00  2.74e+00  3.31e-02  2.47e+00  4.13e-03  7.64e-02  2.05e-01  
  5  +5.0237e-01  +3.0453e+00  2.54e+00  2.79e-02  2.07e+00  2.64e-03  6.79e-02  3.97e-01  
  6  +4.8444e-01  +2.0621e+00  1.58e+00  5.72e-03  4.44e-01  5.58e-03  1.34e-02  8.11e-01  
  7  +4.5650e-01  +1.5500e+00  1.09e+00  3.20e-03  2.45e-01  3.40e-03  7.82e-03  5.29e-01  
  8  +4.4045e-01  +1.3525e+00  9.12e-01  2.48e-03  1.89e-01  2.18e-03  6.26e-03  3.70e-01  
  9  +4.0299e-01  +9.1469e-01  5.12e-01  1.44e-03  1.07e-01  1.90e-05  4.03e-03  8.22e-01  
 10  +3.5326e-01  +5.5143e-01  1.98e-01  5.07e-04  3.71e-02  1.56e-05  1.60e-03  6.45e-01  
 11  +3.3011e-01  +4.3361e-01  1.03e-01  2.56e-04  1.88e-02  2.76e-05  8.81e-04  6.90e-01  
 12  +3.1613e-01  +3.6299e-01  4.69e-02  1.12e-04  8.30e-03  1.51e-05  4.15e-04  6.47e-01  
 13  +3.0866e-01  +3.2612e-01  1.75e-02  4.10e-05  3.04e-03  6.88e-06  1.61e-04  8.03e-01  
 14  +3.0483e-01  +3.0960e-01  4.77e-03  1.10e-05  8.18e-04  1.89e-06  4.52e-05  7.62e-01  
 15  +3.0340e-01  +3.0357e-01  1.65e-04  3.80e-07  2.82e-05  5.97e-08  1.60e-06  9.72e-01  
 16  +3.0335e-01  +3.0335e-01  1.66e-06  3.82e-09  2.84e-07  5.98e-10  1.62e-08  9.90e-01  
 17  +3.0335e-01  +3.0335e-01  1.66e-08  3.83e-11  2.84e-09  5.98e-12  1.62e-10  9.90e-01  
 18  +3.0335e-01  +3.0335e-01  1.67e-10  3.84e-13  2.85e-11  6.01e-14  1.62e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.5452ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:53 PM: Optimal value: 3.034e-01
(CVXPY) Sep 20 07:57:53 PM: Compilation took 8.291e-03 seconds
(CVXPY) Sep 20 07:57:53 PM: Solver (including time spent in interface) took 2.289e-02 seconds
Iteration: 15, Objective: 0.3034
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:53 PM: Your problem has 665 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:53 PM: Finished problem compilation (took 8.533e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 665
  constraints   = 1165
  nnz(P)        = 0
  nnz(A)        = 9255
  cones (total) = 1
    : Nonnegative = 1,  numel = 1165

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9952e-01  +5.0187e+02  5.01e+02  9.59e-01  3.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.6264e-01  +1.0952e+02  1.09e+02  4.30e-01  2.15e+01  3.82e-03  5.75e-01  5.86e-01  
  2  +5.1840e-01  +1.2905e+01  1.24e+01  1.33e-01  8.64e+00  1.87e-02  2.48e-01  9.90e-01  
  3  +5.0714e-01  +3.2109e+00  2.70e+00  3.78e-02  2.78e+00  3.59e-03  8.77e-02  6.79e-01  
  4  +5.0637e-01  +3.1592e+00  2.65e+00  3.15e-02  2.35e+00  4.01e-03  7.26e-02  1.85e-01  
  5  +5.0216e-01  +3.1178e+00  2.62e+00  2.65e-02  1.97e+00  2.84e-03  6.34e-02  4.36e-01  
  6  +4.8489e-01  +2.2307e+00  1.75e+00  6.43e-03  4.97e-01  5.48e-03  1.50e-02  7.71e-01  
  7  +4.5990e-01  +1.7438e+00  1.28e+00  3.82e-03  2.92e-01  3.71e-03  9.29e-03  4.91e-01  
  8  +4.4071e-01  +1.4767e+00  1.04e+00  2.77e-03  2.10e-01  2.50e-03  6.95e-03  3.82e-01  
  9  +4.0773e-01  +9.7498e-01  5.67e-01  1.67e-03  1.24e-01  2.05e-05  4.66e-03  7.53e-01  
 10  +3.6830e-01  +6.7994e-01  3.12e-01  8.34e-04  6.10e-02  3.52e-05  2.54e-03  5.51e-01  
 11  +3.3029e-01  +4.4584e-01  1.16e-01  2.94e-04  2.13e-02  2.58e-05  1.01e-03  7.31e-01  
 12  +3.1329e-01  +3.5849e-01  4.52e-02  1.11e-04  8.15e-03  1.13e-05  4.17e-04  6.41e-01  
 13  +3.0515e-01  +3.1858e-01  1.34e-02  3.24e-05  2.38e-03  4.20e-06  1.28e-04  7.87e-01  
 14  +3.0295e-01  +3.0937e-01  6.42e-03  1.50e-05  1.11e-03  2.30e-06  6.15e-05  7.17e-01  
 15  +3.0108e-01  +3.0165e-01  5.64e-04  1.30e-06  9.64e-05  1.93e-07  5.52e-06  9.16e-01  
 16  +3.0090e-01  +3.0091e-01  6.90e-06  1.58e-08  1.18e-06  2.31e-09  6.80e-08  9.88e-01  
 17  +3.0090e-01  +3.0090e-01  6.90e-08  1.58e-10  1.18e-08  2.31e-11  6.80e-10  9.90e-01  
 18  +3.0090e-01  +3.0090e-01  6.91e-10  1.59e-12  1.18e-10  2.32e-13  6.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.4635ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:53 PM: Optimal value: 3.009e-01
(CVXPY) Sep 20 07:57:53 PM: Compilation took 8.533e-03 seconds
(CVXPY) Sep 20 07:57:53 PM: Solver (including time spent in interface) took 2.359e-02 seconds
Iteration: 16, Objective: 0.3009
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:53 PM: Your problem has 675 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:53 PM: Finished problem compilation (took 8.136e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 675
  constraints   = 1175
  nnz(P)        = 0
  nnz(A)        = 9335
  cones (total) = 1
    : Nonnegative = 1,  numel = 1175

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9948e-01  +5.0194e+02  5.01e+02  9.59e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.6016e-01  +1.0957e+02  1.09e+02  4.30e-01  2.14e+01  3.82e-03  5.75e-01  5.86e-01  
  2  +5.1715e-01  +1.3065e+01  1.25e+01  1.32e-01  8.53e+00  1.89e-02  2.46e-01  9.90e-01  
  3  +5.0573e-01  +2.7578e+00  2.25e+00  2.99e-02  2.22e+00  3.18e-03  6.99e-02  7.46e-01  
  4  +5.0534e-01  +2.8901e+00  2.38e+00  2.64e-02  1.98e+00  3.58e-03  6.07e-02  2.10e-01  
  5  +4.9924e-01  +3.3249e+00  2.83e+00  1.84e-02  1.39e+00  3.96e-03  4.19e-02  6.53e-01  
  6  +4.8036e-01  +2.4616e+00  1.98e+00  6.94e-03  5.34e-01  4.91e-03  1.61e-02  6.20e-01  
  7  +4.5362e-01  +1.9443e+00  1.49e+00  4.19e-03  3.19e-01  3.76e-03  1.01e-02  4.63e-01  
  8  +4.3387e-01  +1.6301e+00  1.20e+00  3.05e-03  2.30e-01  2.59e-03  7.57e-03  3.67e-01  
  9  +3.9927e-01  +9.9405e-01  5.95e-01  1.74e-03  1.27e-01  2.02e-05  4.84e-03  7.72e-01  
 10  +3.4809e-01  +5.8472e-01  2.37e-01  6.22e-04  4.49e-02  2.29e-05  1.96e-03  6.55e-01  
 11  +3.2198e-01  +4.4405e-01  1.22e-01  3.09e-04  2.23e-02  3.72e-05  1.08e-03  7.38e-01  
 12  +3.0701e-01  +3.5980e-01  5.28e-02  1.32e-04  9.49e-03  1.66e-05  4.97e-04  5.84e-01  
 13  +2.9810e-01  +3.1199e-01  1.39e-02  3.42e-05  2.47e-03  4.68e-06  1.37e-04  7.78e-01  
 14  +2.9646e-01  +3.0449e-01  8.02e-03  1.92e-05  1.40e-03  2.93e-06  7.89e-05  6.19e-01  
 15  +2.9443e-01  +2.9549e-01  1.06e-03  2.49e-06  1.82e-04  3.77e-07  1.07e-05  8.98e-01  
 16  +2.9411e-01  +2.9413e-01  2.26e-05  5.29e-08  3.87e-06  7.61e-09  2.32e-07  9.81e-01  
 17  +2.9410e-01  +2.9410e-01  2.26e-07  5.29e-10  3.87e-08  7.61e-11  2.32e-09  9.90e-01  
 18  +2.9410e-01  +2.9410e-01  2.26e-09  5.30e-12  3.87e-10  7.62e-13  2.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.1343ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:53 PM: Optimal value: 2.941e-01
(CVXPY) Sep 20 07:57:53 PM: Compilation took 8.136e-03 seconds
(CVXPY) Sep 20 07:57:53 PM: Solver (including time spent in interface) took 2.586e-02 seconds
Iteration: 17, Objective: 0.2941
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:53 PM: Your problem has 685 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:53 PM: Finished problem compilation (took 9.512e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 685
  constraints   = 1185
  nnz(P)        = 0
  nnz(A)        = 9437
  cones (total) = 1
    : Nonnegative = 1,  numel = 1185

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9948e-01  +5.0191e+02  5.01e+02  9.59e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.5912e-01  +1.0953e+02  1.09e+02  4.30e-01  2.12e+01  3.83e-03  5.74e-01  5.87e-01  
  2  +5.1665e-01  +1.3090e+01  1.26e+01  1.31e-01  8.42e+00  1.89e-02  2.45e-01  9.90e-01  
  3  +5.0502e-01  +2.5266e+00  2.02e+00  2.62e-02  1.95e+00  2.97e-03  6.16e-02  7.77e-01  
  4  +5.0442e-01  +2.7213e+00  2.22e+00  2.29e-02  1.72e+00  3.41e-03  5.27e-02  2.71e-01  
  5  +4.9570e-01  +3.1095e+00  2.61e+00  1.35e-02  1.03e+00  4.55e-03  3.07e-02  7.02e-01  
  6  +4.7102e-01  +2.0499e+00  1.58e+00  5.40e-03  4.13e-01  3.55e-03  1.27e-02  6.30e-01  
  7  +4.4484e-01  +1.8151e+00  1.37e+00  3.49e-03  2.65e-01  3.38e-03  8.44e-03  4.29e-01  
  8  +4.2219e-01  +1.3923e+00  9.70e-01  2.56e-03  1.91e-01  1.48e-03  6.51e-03  3.97e-01  
  9  +3.6444e-01  +7.0602e-01  3.42e-01  8.96e-04  6.50e-02  1.11e-04  2.64e-03  8.08e-01  
 10  +3.3131e-01  +5.0417e-01  1.73e-01  4.48e-04  3.22e-02  6.28e-05  1.48e-03  5.87e-01  
 11  +3.0790e-01  +3.7099e-01  6.31e-02  1.59e-04  1.14e-02  2.44e-05  5.80e-04  6.98e-01  
 12  +3.0147e-01  +3.3809e-01  3.66e-02  9.02e-05  6.47e-03  1.47e-05  3.42e-04  5.11e-01  
 13  +2.9469e-01  +3.0527e-01  1.06e-02  2.50e-05  1.81e-03  4.60e-06  1.00e-04  8.76e-01  
 14  +2.9224e-01  +2.9513e-01  2.88e-03  6.62e-06  4.83e-04  1.22e-06  2.77e-05  8.52e-01  
 15  +2.9134e-01  +2.9146e-01  1.18e-04  2.70e-07  1.97e-05  4.64e-08  1.16e-06  9.63e-01  
 16  +2.9130e-01  +2.9130e-01  1.19e-06  2.73e-09  1.99e-07  4.67e-10  1.17e-08  9.90e-01  
 17  +2.9130e-01  +2.9130e-01  1.19e-08  2.73e-11  1.99e-09  4.68e-12  1.17e-10  9.90e-01  
 18  +2.9130e-01  +2.9130e-01  1.20e-10  2.74e-13  1.99e-11  4.69e-14  1.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.5802ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:53 PM: Optimal value: 2.913e-01
(CVXPY) Sep 20 07:57:53 PM: Compilation took 9.512e-03 seconds
(CVXPY) Sep 20 07:57:53 PM: Solver (including time spent in interface) took 2.539e-02 seconds
Iteration: 18, Objective: 0.2913
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:53 PM: Your problem has 693 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:53 PM: Finished problem compilation (took 8.506e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 693
  constraints   = 1193
  nnz(P)        = 0
  nnz(A)        = 9526
  cones (total) = 1
    : Nonnegative = 1,  numel = 1193

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9945e-01  +5.0203e+02  5.02e+02  9.59e-01  3.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.5769e-01  +1.0966e+02  1.09e+02  4.30e-01  2.11e+01  3.83e-03  5.74e-01  5.86e-01  
  2  +5.1570e-01  +1.3190e+01  1.27e+01  1.30e-01  8.37e+00  1.91e-02  2.44e-01  9.90e-01  
  3  +5.0412e-01  +2.4726e+00  1.97e+00  2.43e-02  1.82e+00  3.13e-03  5.72e-02  7.91e-01  
  4  +4.9693e-01  +2.8045e+00  2.31e+00  1.40e-02  1.06e+00  4.86e-03  3.18e-02  6.54e-01  
  5  +4.7761e-01  +2.1887e+00  1.71e+00  6.49e-03  4.97e-01  5.00e-03  1.51e-02  5.71e-01  
  6  +4.4819e-01  +1.7882e+00  1.34e+00  3.87e-03  2.93e-01  4.04e-03  9.34e-03  4.77e-01  
  7  +4.2904e-01  +1.5180e+00  1.09e+00  2.95e-03  2.22e-01  2.53e-03  7.37e-03  3.64e-01  
  8  +3.8476e-01  +9.2516e-01  5.40e-01  1.54e-03  1.12e-01  2.13e-05  4.36e-03  8.25e-01  
  9  +3.3654e-01  +5.4286e-01  2.06e-01  5.56e-04  3.98e-02  1.92e-05  1.80e-03  6.43e-01  
 10  +3.1342e-01  +4.2523e-01  1.12e-01  2.86e-04  2.05e-02  3.35e-05  1.02e-03  7.42e-01  
 11  +2.9727e-01  +3.4015e-01  4.29e-02  1.06e-04  7.58e-03  1.40e-05  4.10e-04  6.71e-01  
 12  +2.8984e-01  +3.0414e-01  1.43e-02  3.43e-05  2.46e-03  5.03e-06  1.40e-04  7.35e-01  
 13  +2.8757e-01  +2.9416e-01  6.59e-03  1.53e-05  1.10e-03  2.47e-06  6.45e-05  6.78e-01  
 14  +2.8572e-01  +2.8634e-01  6.17e-04  1.41e-06  1.02e-04  2.44e-07  6.17e-06  9.88e-01  
 15  +2.8550e-01  +2.8551e-01  7.82e-06  1.79e-08  1.29e-06  3.01e-09  7.87e-08  9.88e-01  
 16  +2.8550e-01  +2.8550e-01  7.82e-08  1.79e-10  1.29e-08  3.01e-11  7.87e-10  9.90e-01  
 17  +2.8550e-01  +2.8550e-01  7.84e-10  1.79e-12  1.30e-10  3.02e-13  7.90e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.9028ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:53 PM: Optimal value: 2.855e-01
(CVXPY) Sep 20 07:57:53 PM: Compilation took 8.506e-03 seconds
(CVXPY) Sep 20 07:57:53 PM: Solver (including time spent in interface) took 2.561e-02 seconds
Iteration: 19, Objective: 0.2855
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:53 PM: Your problem has 703 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:53 PM: Finished problem compilation (took 8.529e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 703
  constraints   = 1203
  nnz(P)        = 0
  nnz(A)        = 9639
  cones (total) = 1
    : Nonnegative = 1,  numel = 1203

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9939e-01  +5.0212e+02  5.02e+02  9.59e-01  3.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.5575e-01  +1.0977e+02  1.09e+02  4.31e-01  2.10e+01  3.83e-03  5.74e-01  5.86e-01  
  2  +5.1436e-01  +1.3354e+01  1.28e+01  1.30e-01  8.30e+00  1.93e-02  2.44e-01  9.90e-01  
  3  +5.0303e-01  +2.6622e+00  2.16e+00  2.51e-02  1.86e+00  3.74e-03  5.82e-02  7.82e-01  
  4  +4.9120e-01  +2.6528e+00  2.16e+00  1.12e-02  8.59e-01  6.47e-03  2.55e-02  6.53e-01  
  5  +4.6521e-01  +1.8842e+00  1.42e+00  5.43e-03  4.13e-01  4.18e-03  1.29e-02  5.97e-01  
  6  +4.3978e-01  +1.6818e+00  1.24e+00  3.51e-03  2.65e-01  4.04e-03  8.51e-03  4.23e-01  
  7  +3.9859e-01  +1.1024e+00  7.04e-01  1.94e-03  1.43e-01  6.94e-04  5.11e-03  6.58e-01  
  8  +3.3920e-01  +5.8452e-01  2.45e-01  6.55e-04  4.71e-02  1.45e-04  2.02e-03  6.94e-01  
  9  +3.1504e-01  +4.6454e-01  1.49e-01  3.84e-04  2.75e-02  8.56e-05  1.31e-03  6.85e-01  
 10  +2.9306e-01  +3.4192e-01  4.89e-02  1.20e-04  8.61e-03  2.72e-05  4.55e-04  7.59e-01  
 11  +2.8580e-01  +3.0871e-01  2.29e-02  5.40e-05  3.88e-03  1.14e-05  2.16e-04  7.39e-01  
 12  +2.8056e-01  +2.8634e-01  5.78e-03  1.32e-05  9.58e-04  2.70e-06  5.58e-05  8.24e-01  
 13  +2.7881e-01  +2.7912e-01  3.14e-04  7.11e-07  5.15e-05  1.28e-07  3.11e-06  9.63e-01  
 14  +2.7870e-01  +2.7870e-01  3.34e-06  7.58e-09  5.49e-07  1.34e-09  3.34e-08  9.89e-01  
 15  +2.7870e-01  +2.7870e-01  3.34e-08  7.58e-11  5.49e-09  1.34e-11  3.34e-10  9.90e-01  
 16  +2.7870e-01  +2.7870e-01  3.34e-10  7.58e-13  5.49e-11  1.35e-13  3.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.4549ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:54 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:54 PM: Optimal value: 2.787e-01
(CVXPY) Sep 20 07:57:54 PM: Compilation took 8.529e-03 seconds
(CVXPY) Sep 20 07:57:54 PM: Solver (including time spent in interface) took 2.354e-02 seconds
Iteration: 20, Objective: 0.2787
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:54 PM: Your problem has 713 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:54 PM: Finished problem compilation (took 8.523e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 713
  constraints   = 1213
  nnz(P)        = 0
  nnz(A)        = 9696
  cones (total) = 1
    : Nonnegative = 1,  numel = 1213

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0212e+02  5.02e+02  9.59e-01  3.46e+01  1.00e+00  1.01e+00   ------   
  1  +5.5400e-01  +1.0987e+02  1.09e+02  4.32e-01  2.09e+01  3.84e-03  5.74e-01  5.85e-01  
  2  +5.1344e-01  +1.3489e+01  1.30e+01  1.30e-01  8.23e+00  1.95e-02  2.43e-01  9.90e-01  
  3  +5.0216e-01  +2.7096e+00  2.21e+00  2.46e-02  1.82e+00  4.02e-03  5.68e-02  7.85e-01  
  4  +4.8786e-01  +2.6009e+00  2.11e+00  1.03e-02  7.87e-01  7.13e-03  2.33e-02  6.55e-01  
  5  +4.5414e-01  +1.7000e+00  1.25e+00  4.45e-03  3.36e-01  3.73e-03  1.07e-02  6.68e-01  
  6  +4.3206e-01  +1.5538e+00  1.12e+00  3.16e-03  2.38e-01  3.42e-03  7.72e-03  3.80e-01  
  7  +3.8973e-01  +9.7512e-01  5.85e-01  1.83e-03  1.33e-01  2.73e-05  5.06e-03  6.87e-01  
  8  +3.3580e-01  +5.7442e-01  2.39e-01  6.65e-04  4.74e-02  2.53e-05  2.09e-03  6.53e-01  
  9  +3.1369e-01  +4.6435e-01  1.51e-01  4.00e-04  2.84e-02  3.93e-05  1.36e-03  6.26e-01  
 10  +3.0031e-01  +3.9317e-01  9.29e-02  2.38e-04  1.69e-02  2.60e-05  8.54e-04  4.26e-01  
 11  +2.8699e-01  +3.2791e-01  4.09e-02  9.75e-05  7.04e-03  1.38e-05  3.75e-04  6.72e-01  
 12  +2.8048e-01  +2.9769e-01  1.72e-02  4.02e-05  2.90e-03  6.57e-06  1.63e-04  7.93e-01  
 13  +2.7547e-01  +2.7687e-01  1.41e-03  3.21e-06  2.33e-04  4.85e-07  1.38e-05  9.35e-01  
 14  +2.7501e-01  +2.7505e-01  3.50e-05  7.96e-08  5.77e-06  1.16e-08  3.48e-07  9.77e-01  
 15  +2.7500e-01  +2.7500e-01  3.50e-07  7.96e-10  5.76e-08  1.16e-10  3.48e-09  9.90e-01  
 16  +2.7500e-01  +2.7500e-01  3.50e-09  7.96e-12  5.76e-10  1.16e-12  3.49e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.8138ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:54 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:54 PM: Optimal value: 2.750e-01
(CVXPY) Sep 20 07:57:54 PM: Compilation took 8.523e-03 seconds
(CVXPY) Sep 20 07:57:54 PM: Solver (including time spent in interface) took 2.337e-02 seconds
Iteration: 21, Objective: 0.2750
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:54 PM: Your problem has 723 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:54 PM: Finished problem compilation (took 8.405e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 723
  constraints   = 1223
  nnz(P)        = 0
  nnz(A)        = 9778
  cones (total) = 1
    : Nonnegative = 1,  numel = 1223

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9933e-01  +5.0229e+02  5.02e+02  9.60e-01  3.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.5190e-01  +1.0992e+02  1.09e+02  4.32e-01  2.08e+01  3.84e-03  5.74e-01  5.85e-01  
  2  +5.1212e-01  +1.3625e+01  1.31e+01  1.29e-01  8.12e+00  1.96e-02  2.41e-01  9.90e-01  
  3  +5.0039e-01  +2.7278e+00  2.23e+00  2.32e-02  1.72e+00  4.40e-03  5.34e-02  8.01e-01  
  4  +4.8148e-01  +2.5000e+00  2.02e+00  8.93e-03  6.83e-01  7.98e-03  2.03e-02  6.65e-01  
  5  +4.4237e-01  +1.7041e+00  1.26e+00  4.14e-03  3.11e-01  4.25e-03  9.98e-03  6.51e-01  
  6  +4.1831e-01  +1.4093e+00  9.91e-01  2.98e-03  2.21e-01  2.53e-03  7.47e-03  4.06e-01  
  7  +3.5401e-01  +7.3616e-01  3.82e-01  1.09e-03  7.85e-02  2.30e-05  3.16e-03  8.34e-01  
  8  +3.1218e-01  +4.8723e-01  1.75e-01  4.81e-04  3.42e-02  3.48e-05  1.59e-03  6.64e-01  
  9  +2.9417e-01  +3.9259e-01  9.84e-02  2.56e-04  1.83e-02  2.51e-05  9.12e-04  5.42e-01  
 10  +2.8170e-01  +3.3219e-01  5.05e-02  1.23e-04  8.94e-03  1.70e-05  4.67e-04  6.75e-01  
 11  +2.7318e-01  +2.9178e-01  1.86e-02  4.47e-05  3.24e-03  7.27e-06  1.81e-04  8.94e-01  
 12  +2.6815e-01  +2.7074e-01  2.59e-03  6.07e-06  4.41e-04  9.71e-07  2.59e-05  8.73e-01  
 13  +2.6733e-01  +2.6743e-01  9.86e-05  2.29e-07  1.66e-05  3.52e-08  1.01e-06  9.69e-01  
 14  +2.6730e-01  +2.6730e-01  9.88e-07  2.30e-09  1.67e-07  3.52e-10  1.01e-08  9.90e-01  
 15  +2.6730e-01  +2.6730e-01  9.90e-09  2.30e-11  1.67e-09  3.53e-12  1.01e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.0741ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:54 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:54 PM: Optimal value: 2.673e-01
(CVXPY) Sep 20 07:57:54 PM: Compilation took 8.405e-03 seconds
(CVXPY) Sep 20 07:57:54 PM: Solver (including time spent in interface) took 2.313e-02 seconds
Iteration: 22, Objective: 0.2673
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:54 PM: Your problem has 733 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:54 PM: Finished problem compilation (took 7.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:54 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 733
  constraints   = 1233
  nnz(P)        = 0
  nnz(A)        = 9845
  cones (total) = 1
    : Nonnegative = 1,  numel = 1233

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9930e-01  +5.0235e+02  5.02e+02  9.60e-01  3.43e+01  1.00e+00  1.01e+00   ------   
  1  +5.4958e-01  +1.1006e+02  1.10e+02  4.32e-01  2.06e+01  3.85e-03  5.74e-01  5.85e-01  
  2  +5.1040e-01  +1.3796e+01  1.33e+01  1.28e-01  8.06e+00  1.99e-02  2.40e-01  9.90e-01  
  3  +4.9849e-01  +2.8371e+00  2.34e+00  2.29e-02  1.69e+00  4.91e-03  5.22e-02  8.04e-01  
  4  +4.7540e-01  +2.4520e+00  1.98e+00  8.35e-03  6.37e-01  8.54e-03  1.90e-02  6.67e-01  
  5  +4.4035e-01  +1.8567e+00  1.42e+00  4.55e-03  3.42e-01  5.86e-03  1.09e-02  5.36e-01  
  6  +4.1498e-01  +1.5455e+00  1.13e+00  3.27e-03  2.43e-01  3.97e-03  8.07e-03  3.64e-01  
  7  +3.5901e-01  +8.5103e-01  4.92e-01  1.45e-03  1.04e-01  3.41e-05  4.10e-03  8.06e-01  
  8  +3.0846e-01  +4.7566e-01  1.67e-01  4.71e-04  3.32e-02  2.60e-05  1.55e-03  7.13e-01  
  9  +2.9226e-01  +3.9854e-01  1.06e-01  2.80e-04  1.99e-02  2.47e-05  9.75e-04  5.25e-01  
 10  +2.7795e-01  +3.3030e-01  5.24e-02  1.30e-04  9.34e-03  1.66e-05  4.81e-04  6.83e-01  
 11  +2.7080e-01  +2.9827e-01  2.75e-02  6.58e-05  4.78e-03  9.57e-06  2.57e-04  6.22e-01  
 12  +2.6484e-01  +2.7197e-01  7.13e-03  1.67e-05  1.22e-03  2.67e-06  6.89e-05  8.36e-01  
 13  +2.6266e-01  +2.6312e-01  4.60e-04  1.06e-06  7.73e-05  1.65e-07  4.57e-06  9.59e-01  
 14  +2.6250e-01  +2.6251e-01  4.98e-06  1.15e-08  8.36e-07  1.76e-09  4.98e-08  9.90e-01  
 15  +2.6250e-01  +2.6250e-01  5.00e-08  1.15e-10  8.39e-09  1.77e-11  5.00e-10  9.90e-01  
 16  +2.6250e-01  +2.6250e-01  5.00e-10  1.15e-12  8.39e-11  1.77e-13  5.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.2549ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:54 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:54 PM: Optimal value: 2.625e-01
(CVXPY) Sep 20 07:57:54 PM: Compilation took 7.999e-03 seconds
(CVXPY) Sep 20 07:57:54 PM: Solver (including time spent in interface) took 2.669e-02 seconds
Iteration: 23, Objective: 0.2625
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:54 PM: Your problem has 743 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:54 PM: Finished problem compilation (took 8.496e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 743
  constraints   = 1243
  nnz(P)        = 0
  nnz(A)        = 9920
  cones (total) = 1
    : Nonnegative = 1,  numel = 1243

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9929e-01  +5.0235e+02  5.02e+02  9.60e-01  3.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.4860e-01  +1.1011e+02  1.10e+02  4.33e-01  2.05e+01  3.85e-03  5.73e-01  5.85e-01  
  2  +5.0956e-01  +1.3853e+01  1.33e+01  1.28e-01  7.99e+00  2.00e-02  2.39e-01  9.90e-01  
  3  +4.9746e-01  +2.8692e+00  2.37e+00  2.25e-02  1.66e+00  5.12e-03  5.14e-02  8.07e-01  
  4  +4.7200e-01  +2.4101e+00  1.94e+00  7.99e-03  6.08e-01  8.69e-03  1.82e-02  6.73e-01  
  5  +4.3774e-01  +1.9074e+00  1.47e+00  4.61e-03  3.46e-01  6.65e-03  1.10e-02  4.93e-01  
  6  +4.1347e-01  +1.5802e+00  1.17e+00  3.41e-03  2.53e-01  4.15e-03  8.43e-03  3.62e-01  
  7  +3.6080e-01  +9.1974e-01  5.59e-01  1.65e-03  1.18e-01  3.63e-05  4.63e-03  8.27e-01  
  8  +3.0811e-01  +4.8482e-01  1.77e-01  5.00e-04  3.50e-02  2.25e-05  1.64e-03  7.12e-01  
  9  +2.9399e-01  +4.2095e-01  1.27e-01  3.40e-04  2.39e-02  2.55e-05  1.17e-03  4.43e-01  
 10  +2.7812e-01  +3.4393e-01  6.58e-02  1.66e-04  1.18e-02  1.75e-05  6.16e-04  6.01e-01  
 11  +2.7380e-01  +3.2410e-01  5.03e-02  1.24e-04  8.88e-03  1.43e-05  4.72e-04  3.10e-01  
 12  +2.6465e-01  +2.8033e-01  1.57e-02  3.78e-05  2.71e-03  6.75e-06  1.54e-04  9.90e-01  
 13  +2.6164e-01  +2.6801e-01  6.37e-03  1.51e-05  1.08e-03  2.70e-06  6.42e-05  6.97e-01  
 14  +2.5969e-01  +2.6025e-01  5.59e-04  1.31e-06  9.40e-05  2.22e-07  5.80e-06  9.18e-01  
 15  +2.5950e-01  +2.5951e-01  6.63e-06  1.55e-08  1.11e-06  2.57e-09  6.91e-08  9.90e-01  
 16  +2.5950e-01  +2.5950e-01  6.64e-08  1.56e-10  1.11e-08  2.58e-11  6.92e-10  9.90e-01  
 17  +2.5950e-01  +2.5950e-01  6.64e-10  1.56e-12  1.11e-10  2.58e-13  6.93e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.2653ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:54 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:54 PM: Optimal value: 2.595e-01
(CVXPY) Sep 20 07:57:54 PM: Compilation took 8.496e-03 seconds
(CVXPY) Sep 20 07:57:54 PM: Solver (including time spent in interface) took 2.659e-02 seconds
Iteration: 24, Objective: 0.2595
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:54 PM: Your problem has 747 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:54 PM: Finished problem compilation (took 8.519e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 747
  constraints   = 1247
  nnz(P)        = 0
  nnz(A)        = 9962
  cones (total) = 1
    : Nonnegative = 1,  numel = 1247

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0235e+02  5.02e+02  9.60e-01  3.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.4790e-01  +1.1012e+02  1.10e+02  4.33e-01  2.05e+01  3.86e-03  5.73e-01  5.85e-01  
  2  +5.0919e-01  +1.3888e+01  1.34e+01  1.27e-01  7.94e+00  2.00e-02  2.39e-01  9.90e-01  
  3  +4.9691e-01  +2.9023e+00  2.41e+00  2.25e-02  1.66e+00  5.25e-03  5.13e-02  8.08e-01  
  4  +4.6997e-01  +2.4020e+00  1.93e+00  7.82e-03  5.94e-01  8.81e-03  1.79e-02  6.78e-01  
  5  +4.3586e-01  +1.9443e+00  1.51e+00  4.66e-03  3.49e-01  6.98e-03  1.11e-02  4.78e-01  
  6  +4.1125e-01  +1.6014e+00  1.19e+00  3.46e-03  2.56e-01  4.28e-03  8.56e-03  3.59e-01  
  7  +3.5959e-01  +9.2964e-01  5.70e-01  1.70e-03  1.21e-01  3.69e-05  4.77e-03  8.27e-01  
  8  +3.0751e-01  +4.9016e-01  1.83e-01  5.20e-04  3.64e-02  2.21e-05  1.71e-03  7.04e-01  
  9  +2.9067e-01  +4.1037e-01  1.20e-01  3.22e-04  2.25e-02  2.37e-05  1.12e-03  4.93e-01  
 10  +2.7682e-01  +3.4193e-01  6.51e-02  1.66e-04  1.18e-02  1.73e-05  6.18e-04  5.93e-01  
 11  +2.7280e-01  +3.2356e-01  5.08e-02  1.26e-04  9.00e-03  1.48e-05  4.76e-04  3.31e-01  
 12  +2.6448e-01  +2.8466e-01  2.02e-02  4.82e-05  3.47e-03  7.72e-06  1.93e-04  8.43e-01  
 13  +2.6105e-01  +2.7016e-01  9.11e-03  2.13e-05  1.53e-03  3.63e-06  8.79e-05  6.64e-01  
 14  +2.5843e-01  +2.5964e-01  1.22e-03  2.80e-06  2.02e-04  4.77e-07  1.20e-05  9.04e-01  
 15  +2.5801e-01  +2.5802e-01  1.72e-05  3.95e-08  2.85e-06  6.43e-09  1.71e-07  9.87e-01  
 16  +2.5800e-01  +2.5800e-01  1.72e-07  3.95e-10  2.85e-08  6.43e-11  1.71e-09  9.90e-01  
 17  +2.5800e-01  +2.5800e-01  1.72e-09  3.95e-12  2.85e-10  6.43e-13  1.71e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.7798ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:54 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:54 PM: Optimal value: 2.580e-01
(CVXPY) Sep 20 07:57:54 PM: Compilation took 8.519e-03 seconds
(CVXPY) Sep 20 07:57:54 PM: Solver (including time spent in interface) took 2.758e-02 seconds
Iteration: 25, Objective: 0.2580
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:55 PM: Your problem has 757 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:55 PM: Finished problem compilation (took 8.520e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 757
  constraints   = 1257
  nnz(P)        = 0
  nnz(A)        = 10023
  cones (total) = 1
    : Nonnegative = 1,  numel = 1257

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0239e+02  5.02e+02  9.60e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.4755e-01  +1.1017e+02  1.10e+02  4.34e-01  2.04e+01  3.86e-03  5.73e-01  5.85e-01  
  2  +5.0873e-01  +1.3909e+01  1.34e+01  1.27e-01  7.88e+00  2.01e-02  2.39e-01  9.90e-01  
  3  +4.9625e-01  +2.9717e+00  2.48e+00  2.27e-02  1.67e+00  5.45e-03  5.19e-02  8.06e-01  
  4  +4.6855e-01  +2.4076e+00  1.94e+00  7.91e-03  5.98e-01  8.74e-03  1.82e-02  6.76e-01  
  5  +4.3421e-01  +1.9585e+00  1.52e+00  4.71e-03  3.51e-01  7.16e-03  1.12e-02  4.70e-01  
  6  +4.0849e-01  +1.6098e+00  1.20e+00  3.44e-03  2.54e-01  4.49e-03  8.55e-03  3.66e-01  
  7  +3.6063e-01  +9.6699e-01  6.06e-01  1.83e-03  1.30e-01  3.78e-05  5.15e-03  8.22e-01  
  8  +3.0747e-01  +4.9537e-01  1.88e-01  5.36e-04  3.73e-02  2.17e-05  1.76e-03  7.16e-01  
  9  +2.8874e-01  +4.0749e-01  1.19e-01  3.18e-04  2.22e-02  2.48e-05  1.12e-03  5.41e-01  
 10  +2.7421e-01  +3.3626e-01  6.21e-02  1.57e-04  1.11e-02  1.63e-05  5.88e-04  5.87e-01  
 11  +2.7049e-01  +3.1975e-01  4.93e-02  1.21e-04  8.61e-03  1.43e-05  4.61e-04  3.26e-01  
 12  +2.6190e-01  +2.8057e-01  1.87e-02  4.42e-05  3.17e-03  7.05e-06  1.79e-04  8.46e-01  
 13  +2.5767e-01  +2.6273e-01  5.07e-03  1.19e-05  8.50e-04  1.93e-06  5.01e-05  7.90e-01  
 14  +2.5609e-01  +2.5636e-01  2.69e-04  6.28e-07  4.50e-05  9.66e-08  2.72e-06  9.51e-01  
 15  +2.5600e-01  +2.5600e-01  2.78e-06  6.50e-09  4.66e-07  9.93e-10  2.82e-08  9.90e-01  
 16  +2.5600e-01  +2.5600e-01  2.78e-08  6.50e-11  4.66e-09  9.94e-12  2.82e-10  9.90e-01  
 17  +2.5600e-01  +2.5600e-01  2.78e-10  6.50e-13  4.66e-11  9.94e-14  2.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.7096ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:55 PM: Optimal value: 2.560e-01
(CVXPY) Sep 20 07:57:55 PM: Compilation took 8.520e-03 seconds
(CVXPY) Sep 20 07:57:55 PM: Solver (including time spent in interface) took 2.738e-02 seconds
Iteration: 26, Objective: 0.2560
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:55 PM: Your problem has 767 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:55 PM: Finished problem compilation (took 8.012e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 767
  constraints   = 1267
  nnz(P)        = 0
  nnz(A)        = 10094
  cones (total) = 1
    : Nonnegative = 1,  numel = 1267

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0256e+02  5.02e+02  9.60e-01  3.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.4564e-01  +1.1025e+02  1.10e+02  4.34e-01  2.02e+01  3.86e-03  5.73e-01  5.85e-01  
  2  +5.0681e-01  +1.4064e+01  1.36e+01  1.26e-01  7.81e+00  2.03e-02  2.38e-01  9.90e-01  
  3  +4.9360e-01  +3.0439e+00  2.55e+00  2.20e-02  1.61e+00  5.94e-03  5.01e-02  8.13e-01  
  4  +4.6264e-01  +2.3534e+00  1.89e+00  7.63e-03  5.75e-01  8.72e-03  1.76e-02  6.70e-01  
  5  +4.2629e-01  +2.0008e+00  1.57e+00  4.63e-03  3.45e-01  7.84e-03  1.10e-02  4.73e-01  
  6  +4.0334e-01  +1.6155e+00  1.21e+00  3.56e-03  2.61e-01  4.12e-03  8.90e-03  3.60e-01  
  7  +3.4615e-01  +8.4723e-01  5.01e-01  1.47e-03  1.04e-01  3.62e-05  4.20e-03  8.61e-01  
  8  +2.9910e-01  +4.8435e-01  1.85e-01  5.24e-04  3.64e-02  2.95e-05  1.75e-03  6.81e-01  
  9  +2.7720e-01  +3.7088e-01  9.37e-02  2.46e-04  1.72e-02  2.19e-05  8.93e-04  6.13e-01  
 10  +2.6667e-01  +3.2050e-01  5.38e-02  1.34e-04  9.49e-03  1.59e-05  5.09e-04  5.83e-01  
 11  +2.5894e-01  +2.8512e-01  2.62e-02  6.32e-05  4.51e-03  8.66e-06  2.53e-04  6.57e-01  
 12  +2.5280e-01  +2.5782e-01  5.02e-03  1.19e-05  8.51e-04  1.73e-06  5.04e-05  8.63e-01  
 13  +2.5133e-01  +2.5172e-01  3.94e-04  9.34e-07  6.67e-05  1.31e-07  4.06e-06  9.28e-01  
 14  +2.5120e-01  +2.5121e-01  4.14e-06  9.82e-09  7.00e-07  1.37e-09  4.28e-08  9.90e-01  
 15  +2.5120e-01  +2.5120e-01  4.14e-08  9.82e-11  7.01e-09  1.37e-11  4.29e-10  9.90e-01  
 16  +2.5120e-01  +2.5120e-01  4.14e-10  9.82e-13  7.01e-11  1.37e-13  4.29e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.4715ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:55 PM: Optimal value: 2.512e-01
(CVXPY) Sep 20 07:57:55 PM: Compilation took 8.012e-03 seconds
(CVXPY) Sep 20 07:57:55 PM: Solver (including time spent in interface) took 2.777e-02 seconds
Iteration: 27, Objective: 0.2512
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:55 PM: Your problem has 777 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:55 PM: Finished problem compilation (took 8.522e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 777
  constraints   = 1277
  nnz(P)        = 0
  nnz(A)        = 10144
  cones (total) = 1
    : Nonnegative = 1,  numel = 1277

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0255e+02  5.02e+02  9.60e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.4526e-01  +1.1020e+02  1.10e+02  4.34e-01  2.01e+01  3.86e-03  5.72e-01  5.85e-01  
  2  +5.0636e-01  +1.4081e+01  1.36e+01  1.26e-01  7.76e+00  2.03e-02  2.37e-01  9.90e-01  
  3  +4.9293e-01  +3.0286e+00  2.54e+00  2.15e-02  1.58e+00  6.01e-03  4.91e-02  8.15e-01  
  4  +4.6015e-01  +2.3289e+00  1.87e+00  7.33e-03  5.51e-01  8.90e-03  1.69e-02  6.77e-01  
  5  +4.2551e-01  +1.9932e+00  1.57e+00  4.60e-03  3.42e-01  8.04e-03  1.10e-02  4.36e-01  
  6  +4.0140e-01  +1.6165e+00  1.22e+00  3.55e-03  2.60e-01  4.33e-03  8.88e-03  3.57e-01  
  7  +3.4359e-01  +8.2470e-01  4.81e-01  1.42e-03  1.00e-01  3.72e-05  4.10e-03  8.44e-01  
  8  +2.9802e-01  +4.9155e-01  1.94e-01  5.49e-04  3.80e-02  3.28e-05  1.83e-03  6.65e-01  
  9  +2.7504e-01  +3.7006e-01  9.50e-02  2.51e-04  1.75e-02  2.33e-05  9.17e-04  6.31e-01  
 10  +2.6521e-01  +3.2217e-01  5.70e-02  1.44e-04  1.01e-02  1.69e-05  5.50e-04  5.46e-01  
 11  +2.5941e-01  +2.9534e-01  3.59e-02  8.82e-05  6.25e-03  1.11e-05  3.51e-04  4.40e-01  
 12  +2.5193e-01  +2.6052e-01  8.60e-03  2.08e-05  1.47e-03  2.89e-06  8.77e-05  8.33e-01  
 13  +2.4958e-01  +2.5041e-01  8.26e-04  1.99e-06  1.40e-04  2.93e-07  8.70e-06  9.61e-01  
 14  +2.4930e-01  +2.4931e-01  1.01e-05  2.43e-08  1.72e-06  3.49e-09  1.07e-07  9.88e-01  
 15  +2.4930e-01  +2.4930e-01  1.01e-07  2.43e-10  1.72e-08  3.49e-11  1.07e-09  9.90e-01  
 16  +2.4930e-01  +2.4930e-01  1.01e-09  2.44e-12  1.72e-10  3.49e-13  1.07e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.9602ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:55 PM: Optimal value: 2.493e-01
(CVXPY) Sep 20 07:57:55 PM: Compilation took 8.522e-03 seconds
(CVXPY) Sep 20 07:57:55 PM: Solver (including time spent in interface) took 2.604e-02 seconds
Iteration: 28, Objective: 0.2493
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:55 PM: Your problem has 779 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:55 PM: Finished problem compilation (took 8.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 779
  constraints   = 1279
  nnz(P)        = 0
  nnz(A)        = 10164
  cones (total) = 1
    : Nonnegative = 1,  numel = 1279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0256e+02  5.02e+02  9.60e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.4476e-01  +1.1022e+02  1.10e+02  4.34e-01  2.01e+01  3.87e-03  5.72e-01  5.85e-01  
  2  +5.0601e-01  +1.4098e+01  1.36e+01  1.25e-01  7.73e+00  2.03e-02  2.36e-01  9.90e-01  
  3  +4.9245e-01  +3.0413e+00  2.55e+00  2.14e-02  1.57e+00  6.09e-03  4.89e-02  8.15e-01  
  4  +4.5906e-01  +2.3279e+00  1.87e+00  7.31e-03  5.49e-01  8.91e-03  1.69e-02  6.76e-01  
  5  +4.2505e-01  +1.9858e+00  1.56e+00  4.65e-03  3.45e-01  7.89e-03  1.11e-02  4.28e-01  
  6  +4.0175e-01  +1.6337e+00  1.23e+00  3.62e-03  2.64e-01  4.49e-03  9.02e-03  3.46e-01  
  7  +3.4641e-01  +8.7066e-01  5.24e-01  1.57e-03  1.10e-01  3.85e-05  4.50e-03  8.42e-01  
  8  +3.0173e-01  +5.1611e-01  2.14e-01  6.18e-04  4.28e-02  3.06e-05  2.03e-03  6.36e-01  
  9  +2.7448e-01  +3.6849e-01  9.40e-02  2.50e-04  1.73e-02  2.24e-05  9.16e-04  6.91e-01  
 10  +2.6330e-01  +3.1345e-01  5.02e-02  1.26e-04  8.87e-03  1.55e-05  4.92e-04  6.49e-01  
 11  +2.5678e-01  +2.8248e-01  2.57e-02  6.37e-05  4.48e-03  8.71e-06  2.60e-04  6.73e-01  
 12  +2.5103e-01  +2.5692e-01  5.89e-03  1.43e-05  1.01e-03  2.02e-06  6.15e-05  8.15e-01  
 13  +2.4943e-01  +2.5012e-01  6.92e-04  1.67e-06  1.17e-04  2.33e-07  7.48e-06  9.12e-01  
 14  +2.4921e-01  +2.4925e-01  3.46e-05  8.32e-08  5.84e-06  1.25e-08  3.78e-07  9.82e-01  
 15  +2.4920e-01  +2.4920e-01  3.47e-07  8.34e-10  5.85e-08  1.25e-10  3.79e-09  9.90e-01  
 16  +2.4920e-01  +2.4920e-01  3.47e-09  8.34e-12  5.86e-10  1.25e-12  3.79e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.3328ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:55 PM: Optimal value: 2.492e-01
(CVXPY) Sep 20 07:57:55 PM: Compilation took 8.008e-03 seconds
(CVXPY) Sep 20 07:57:55 PM: Solver (including time spent in interface) took 2.700e-02 seconds
Iteration: 29, Objective: 0.2492
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:55 PM: Your problem has 789 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:55 PM: Finished problem compilation (took 8.536e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 789
  constraints   = 1289
  nnz(P)        = 0
  nnz(A)        = 10243
  cones (total) = 1
    : Nonnegative = 1,  numel = 1289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +5.0253e+02  5.02e+02  9.61e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.4102e-01  +1.1034e+02  1.10e+02  4.34e-01  2.00e+01  3.87e-03  5.73e-01  5.85e-01  
  2  +5.0267e-01  +1.4345e+01  1.38e+01  1.24e-01  7.66e+00  2.07e-02  2.35e-01  9.90e-01  
  3  +4.8733e-01  +2.9978e+00  2.51e+00  1.94e-02  1.42e+00  6.54e-03  4.43e-02  8.38e-01  
  4  +4.4853e-01  +2.1320e+00  1.68e+00  6.65e-03  4.95e-01  8.09e-03  1.55e-02  6.70e-01  
  5  +4.1041e-01  +1.8799e+00  1.47e+00  4.18e-03  3.08e-01  7.68e-03  1.00e-02  4.54e-01  
  6  +3.7213e-01  +1.1602e+00  7.88e-01  2.71e-03  1.91e-01  5.60e-05  7.40e-03  6.53e-01  
  7  +3.0929e-01  +5.5770e-01  2.48e-01  7.50e-04  5.17e-02  3.24e-05  2.36e-03  7.45e-01  
  8  +2.8315e-01  +4.3177e-01  1.49e-01  4.16e-04  2.87e-02  3.50e-05  1.44e-03  5.93e-01  
  9  +2.6824e-01  +3.5273e-01  8.45e-02  2.26e-04  1.57e-02  2.33e-05  8.40e-04  5.34e-01  
 10  +2.5869e-01  +3.0460e-01  4.59e-02  1.17e-04  8.22e-03  1.44e-05  4.59e-04  5.71e-01  
 11  +2.5458e-01  +2.8160e-01  2.70e-02  6.88e-05  4.82e-03  1.04e-05  2.79e-04  8.31e-01  
 12  +2.4819e-01  +2.5404e-01  5.85e-03  1.46e-05  1.02e-03  2.15e-06  6.26e-05  8.16e-01  
 13  +2.4701e-01  +2.4908e-01  2.07e-03  5.09e-06  3.59e-04  7.76e-07  2.24e-05  8.05e-01  
 14  +2.4641e-01  +2.4671e-01  3.06e-04  7.44e-07  5.26e-05  1.15e-07  3.34e-06  8.87e-01  
 15  +2.4630e-01  +2.4631e-01  4.32e-06  1.05e-08  7.41e-07  1.61e-09  4.73e-08  9.87e-01  
 16  +2.4630e-01  +2.4630e-01  4.33e-08  1.05e-10  7.43e-09  1.61e-11  4.74e-10  9.90e-01  
 17  +2.4630e-01  +2.4630e-01  4.34e-10  1.05e-12  7.45e-11  1.62e-13  4.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.7595ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:55 PM: Optimal value: 2.463e-01
(CVXPY) Sep 20 07:57:55 PM: Compilation took 8.536e-03 seconds
(CVXPY) Sep 20 07:57:55 PM: Solver (including time spent in interface) took 3.024e-02 seconds
Iteration: 30, Objective: 0.2463
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:55 PM: Your problem has 790 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:55 PM: Finished problem compilation (took 8.307e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 790
  constraints   = 1290
  nnz(P)        = 0
  nnz(A)        = 10249
  cones (total) = 1
    : Nonnegative = 1,  numel = 1290

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9918e-01  +5.0254e+02  5.02e+02  9.61e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.4090e-01  +1.1035e+02  1.10e+02  4.34e-01  2.00e+01  3.87e-03  5.72e-01  5.85e-01  
  2  +5.0262e-01  +1.4343e+01  1.38e+01  1.24e-01  7.65e+00  2.07e-02  2.35e-01  9.90e-01  
  3  +4.8712e-01  +2.9651e+00  2.48e+00  1.91e-02  1.40e+00  6.51e-03  4.36e-02  8.42e-01  
  4  +4.4799e-01  +2.1090e+00  1.66e+00  6.55e-03  4.88e-01  8.02e-03  1.53e-02  6.70e-01  
  5  +4.1041e-01  +1.8683e+00  1.46e+00  4.16e-03  3.07e-01  7.62e-03  9.98e-03  4.49e-01  
  6  +3.7220e-01  +1.1587e+00  7.87e-01  2.71e-03  1.92e-01  5.56e-05  7.42e-03  6.49e-01  
  7  +3.0930e-01  +5.5856e-01  2.49e-01  7.54e-04  5.20e-02  3.23e-05  2.38e-03  7.44e-01  
  8  +2.8299e-01  +4.3128e-01  1.48e-01  4.16e-04  2.87e-02  3.47e-05  1.44e-03  5.94e-01  
  9  +2.6874e-01  +3.5561e-01  8.69e-02  2.34e-04  1.62e-02  2.39e-05  8.65e-04  5.21e-01  
 10  +2.5816e-01  +3.0184e-01  4.37e-02  1.11e-04  7.81e-03  1.39e-05  4.38e-04  6.13e-01  
 11  +2.5450e-01  +2.8127e-01  2.68e-02  6.82e-05  4.77e-03  1.02e-05  2.77e-04  7.98e-01  
 12  +2.4817e-01  +2.5395e-01  5.78e-03  1.44e-05  1.01e-03  2.10e-06  6.20e-05  8.15e-01  
 13  +2.4701e-01  +2.4905e-01  2.04e-03  5.04e-06  3.55e-04  7.63e-07  2.22e-05  8.05e-01  
 14  +2.4641e-01  +2.4671e-01  3.03e-04  7.37e-07  5.21e-05  1.13e-07  3.31e-06  8.86e-01  
 15  +2.4630e-01  +2.4631e-01  4.30e-06  1.04e-08  7.38e-07  1.59e-09  4.72e-08  9.87e-01  
 16  +2.4630e-01  +2.4630e-01  4.31e-08  1.05e-10  7.40e-09  1.60e-11  4.73e-10  9.90e-01  
 17  +2.4630e-01  +2.4630e-01  4.32e-10  1.05e-12  7.42e-11  1.60e-13  4.75e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.4911ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:55 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:55 PM: Optimal value: 2.463e-01
(CVXPY) Sep 20 07:57:55 PM: Compilation took 8.307e-03 seconds
(CVXPY) Sep 20 07:57:55 PM: Solver (including time spent in interface) took 2.982e-02 seconds
Iteration: 31, Objective: 0.2463
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:56 PM: Your problem has 791 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:56 PM: Finished problem compilation (took 8.511e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 791
  constraints   = 1291
  nnz(P)        = 0
  nnz(A)        = 10259
  cones (total) = 1
    : Nonnegative = 1,  numel = 1291

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +5.0256e+02  5.02e+02  9.61e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.4040e-01  +1.1040e+02  1.10e+02  4.34e-01  2.00e+01  3.87e-03  5.72e-01  5.85e-01  
  2  +5.0228e-01  +1.4374e+01  1.39e+01  1.24e-01  7.64e+00  2.07e-02  2.35e-01  9.90e-01  
  3  +4.8657e-01  +2.9516e+00  2.47e+00  1.88e-02  1.38e+00  6.54e-03  4.31e-02  8.45e-01  
  4  +4.4648e-01  +2.0818e+00  1.64e+00  6.43e-03  4.78e-01  7.94e-03  1.50e-02  6.73e-01  
  5  +4.0963e-01  +1.8561e+00  1.45e+00  4.14e-03  3.05e-01  7.50e-03  9.94e-03  4.44e-01  
  6  +3.6977e-01  +1.1536e+00  7.84e-01  2.69e-03  1.90e-01  5.52e-05  7.36e-03  6.69e-01  
  7  +3.0861e-01  +5.5507e-01  2.46e-01  7.50e-04  5.16e-02  2.69e-05  2.36e-03  7.27e-01  
  8  +2.8368e-01  +4.3560e-01  1.52e-01  4.29e-04  2.97e-02  3.35e-05  1.48e-03  5.84e-01  
  9  +2.6876e-01  +3.5613e-01  8.74e-02  2.37e-04  1.64e-02  2.25e-05  8.73e-04  5.12e-01  
 10  +2.5872e-01  +3.0485e-01  4.61e-02  1.20e-04  8.38e-03  1.36e-05  4.67e-04  5.75e-01  
 11  +2.5511e-01  +2.8707e-01  3.20e-02  8.15e-05  5.73e-03  1.00e-05  3.27e-04  4.23e-01  
 12  +2.4844e-01  +2.5534e-01  6.90e-03  1.73e-05  1.22e-03  2.28e-06  7.37e-05  8.47e-01  
 13  +2.4719e-01  +2.4986e-01  2.67e-03  6.63e-06  4.67e-04  9.25e-07  2.89e-05  7.30e-01  
 14  +2.4654e-01  +2.4725e-01  7.07e-04  1.72e-06  1.22e-04  2.50e-07  7.72e-06  7.97e-01  
 15  +2.4631e-01  +2.4634e-01  3.24e-05  7.87e-08  5.56e-06  1.14e-08  3.55e-07  9.59e-01  
 16  +2.4630e-01  +2.4630e-01  3.25e-07  7.89e-10  5.57e-08  1.15e-10  3.56e-09  9.90e-01  
 17  +2.4630e-01  +2.4630e-01  3.25e-09  7.90e-12  5.58e-10  1.15e-12  3.57e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.7926ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:56 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:56 PM: Optimal value: 2.463e-01
(CVXPY) Sep 20 07:57:56 PM: Compilation took 8.511e-03 seconds
(CVXPY) Sep 20 07:57:56 PM: Solver (including time spent in interface) took 3.004e-02 seconds
Iteration: 32, Objective: 0.2463
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:56 PM: Your problem has 796 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:56 PM: Finished problem compilation (took 8.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 796
  constraints   = 1296
  nnz(P)        = 0
  nnz(A)        = 10297
  cones (total) = 1
    : Nonnegative = 1,  numel = 1296

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +5.0255e+02  5.02e+02  9.61e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.4008e-01  +1.1040e+02  1.10e+02  4.34e-01  1.99e+01  3.87e-03  5.72e-01  5.85e-01  
  2  +5.0188e-01  +1.4387e+01  1.39e+01  1.23e-01  7.61e+00  2.07e-02  2.35e-01  9.90e-01  
  3  +4.8610e-01  +2.9872e+00  2.50e+00  1.90e-02  1.39e+00  6.63e-03  4.35e-02  8.40e-01  
  4  +4.4538e-01  +2.0912e+00  1.65e+00  6.45e-03  4.79e-01  7.93e-03  1.51e-02  6.75e-01  
  5  +4.0833e-01  +1.8614e+00  1.45e+00  4.18e-03  3.07e-01  7.37e-03  1.00e-02  4.47e-01  
  6  +3.6576e-01  +1.1520e+00  7.86e-01  2.64e-03  1.86e-01  5.56e-05  7.24e-03  7.17e-01  
  7  +3.0844e-01  +5.5839e-01  2.50e-01  7.66e-04  5.26e-02  2.55e-05  2.41e-03  7.12e-01  
  8  +2.8042e-01  +4.2179e-01  1.41e-01  3.99e-04  2.75e-02  3.27e-05  1.39e-03  6.47e-01  
  9  +2.6751e-01  +3.5172e-01  8.42e-02  2.29e-04  1.58e-02  2.17e-05  8.49e-04  4.69e-01  
 10  +2.5811e-01  +3.0308e-01  4.50e-02  1.17e-04  8.19e-03  1.32e-05  4.59e-04  5.72e-01  
 11  +2.5387e-01  +2.8163e-01  2.78e-02  7.13e-05  5.00e-03  8.91e-06  2.88e-04  5.51e-01  
 12  +2.5216e-01  +2.7186e-01  1.97e-02  5.02e-05  3.52e-03  7.10e-06  2.07e-04  6.07e-01  
 13  +2.4742e-01  +2.5117e-01  3.75e-03  9.43e-06  6.62e-04  1.31e-06  4.10e-05  8.54e-01  
 14  +2.4659e-01  +2.4773e-01  1.14e-03  2.84e-06  2.00e-04  4.08e-07  1.27e-05  7.95e-01  
 15  +2.4623e-01  +2.4631e-01  8.21e-05  2.03e-07  1.43e-05  2.92e-08  9.22e-07  9.40e-01  
 16  +2.4620e-01  +2.4620e-01  8.38e-07  2.07e-09  1.46e-07  2.98e-10  9.43e-09  9.90e-01  
 17  +2.4620e-01  +2.4620e-01  8.40e-09  2.08e-11  1.47e-09  2.99e-12  9.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 29.5782ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:56 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:56 PM: Optimal value: 2.462e-01
(CVXPY) Sep 20 07:57:56 PM: Compilation took 8.508e-03 seconds
(CVXPY) Sep 20 07:57:56 PM: Solver (including time spent in interface) took 3.087e-02 seconds
FULL MODEL:
  Accruacy: 0.697
  Our objective: 0.39399999999999996

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x2 = 0 AND x4 = 1 AND x7 = 1 AND x8 = 0)                                             <-- (term's our objective: 0.022)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.026)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 1)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0)                       <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.006)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 1)                       <-- (term's our objective: 0.014)
 OR (x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.018)
 OR (x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x8 = 1)                                             <-- (term's our objective: 0.038)
 OR (x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.006)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.012)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 10.323001623153687
Best over terms:
  Our final objective: 0.03800000000000004
    Its accruacy: 0.519
    Its hamming distance: 8
  Shortest hamming distance: 1
    Its our objective: 0.010000000000000009
  Highest accruacy: 0.519
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

