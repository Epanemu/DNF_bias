Command:
python test_script.py -s constant_subclass -d 3 -n 100 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.13999999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 3.

Computed total variation: 0.26
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:00 PM: Your problem has 57 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:00 PM: Finished problem compilation (took 6.504e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 57
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 307
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9605e-01  +5.0659e+01  5.02e+01  8.53e-01  7.20e+00  1.00e+00  1.03e+00   ------   
  1  +6.1513e-01  +9.7095e+00  9.09e+00  2.68e-01  3.56e+00  4.24e-03  4.50e-01  6.94e-01  
  2  +5.3993e-01  +1.7375e+00  1.20e+00  7.09e-02  1.07e+00  7.69e-03  1.72e-01  8.08e-01  
  3  +4.9854e-01  +7.1699e-01  2.18e-01  1.58e-02  2.36e-01  5.51e-03  7.29e-02  9.90e-01  
  4  +4.8295e-01  +6.0788e-01  1.25e-01  3.60e-03  5.60e-02  1.01e-02  1.30e-02  8.59e-01  
  5  +4.6623e-01  +5.2845e-01  6.22e-02  1.28e-03  2.00e-02  5.14e-03  4.97e-03  6.75e-01  
  6  +4.5278e-01  +4.6011e-01  7.33e-03  1.46e-04  2.28e-03  8.03e-05  6.55e-04  9.24e-01  
  7  +4.5013e-01  +4.5023e-01  9.34e-05  1.82e-06  2.84e-05  8.55e-07  8.40e-06  9.87e-01  
  8  +4.5010e-01  +4.5010e-01  9.34e-07  1.82e-08  2.84e-07  8.55e-09  8.40e-08  9.90e-01  
  9  +4.5010e-01  +4.5010e-01  9.34e-09  1.82e-10  2.84e-09  8.56e-11  8.40e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 376.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:00 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:00 PM: Optimal value: 4.501e-01
(CVXPY) Sep 20 07:27:00 PM: Compilation took 6.504e-03 seconds
(CVXPY) Sep 20 07:27:00 PM: Solver (including time spent in interface) took 9.995e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:00 PM: Your problem has 65 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:00 PM: Finished problem compilation (took 4.516e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 65
  constraints   = 115
  nnz(P)        = 0
  nnz(A)        = 401
  cones (total) = 1
    : Nonnegative = 1,  numel = 115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9085e-01  +5.1110e+01  5.06e+01  8.61e-01  7.57e+00  1.00e+00  1.06e+00   ------   
  1  +5.9096e-01  +1.0012e+01  9.42e+00  2.90e-01  3.78e+00  4.14e-03  4.88e-01  6.78e-01  
  2  +5.2450e-01  +1.5267e+00  1.00e+00  5.55e-02  8.83e-01  9.46e-03  1.41e-01  9.20e-01  
  3  +5.1140e-01  +1.4689e+00  9.58e-01  3.65e-02  5.86e-01  1.17e-02  9.71e-02  3.65e-01  
  4  +4.7476e-01  +1.0629e+00  5.88e-01  1.74e-02  2.80e-01  7.53e-03  5.28e-02  5.30e-01  
  5  +4.3514e-01  +7.2227e-01  2.87e-01  6.55e-03  1.05e-01  4.57e-03  2.26e-02  6.41e-01  
  6  +3.9769e-01  +4.9717e-01  9.95e-02  2.35e-03  3.73e-02  3.75e-05  9.70e-03  7.60e-01  
  7  +3.7313e-01  +3.8310e-01  9.97e-03  2.21e-04  3.49e-03  5.24e-06  1.06e-03  8.99e-01  
  8  +3.7039e-01  +3.7098e-01  5.94e-04  1.31e-05  2.07e-04  4.16e-07  6.63e-05  9.41e-01  
  9  +3.7020e-01  +3.7021e-01  7.42e-06  1.63e-07  2.56e-06  1.01e-08  8.39e-07  9.90e-01  
 10  +3.7020e-01  +3.7020e-01  7.42e-08  1.63e-09  2.56e-08  1.01e-10  8.39e-09  9.90e-01  
 11  +3.7020e-01  +3.7020e-01  7.42e-10  1.63e-11  2.56e-10  1.02e-12  8.40e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 429.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:00 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:00 PM: Optimal value: 3.702e-01
(CVXPY) Sep 20 07:27:00 PM: Compilation took 4.516e-03 seconds
(CVXPY) Sep 20 07:27:00 PM: Solver (including time spent in interface) took 9.992e-04 seconds
FULL MODEL:
  Accruacy: 0.63
  Our objective: 0.26

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.2)
 OR (x0 = 1 AND x1 = 1) <-- (term's our objective: 0.06)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4173259735107422
Best over terms:
  Our final objective: 0.19999999999999996
    Its accruacy: 0.6
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.19999999999999996
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

