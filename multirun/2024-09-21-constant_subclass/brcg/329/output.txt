Command:
python test_script.py -s constant_subclass -d 9 -n 50 --seed 21 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 9.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:00 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:00 PM: Finished problem compilation (took 7.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 319
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9427e-01  +2.6079e+01  2.56e+01  8.37e-01  6.95e+00  1.00e+00  1.07e+00   ------   
  1  +5.6716e-01  +5.7975e+00  5.23e+00  3.68e-01  4.05e+00  3.74e-03  6.10e-01  5.95e-01  
  2  +4.8851e-01  +1.1969e+00  7.08e-01  8.65e-02  1.17e+00  2.06e-02  2.38e-01  9.90e-01  
  3  +4.4636e-01  +6.7715e-01  2.31e-01  1.78e-02  2.60e-01  1.12e-02  5.83e-02  8.24e-01  
  4  +4.2177e-01  +4.9774e-01  7.60e-02  5.18e-03  7.46e-02  3.18e-03  1.87e-02  7.08e-01  
  5  +4.1061e-01  +4.4089e-01  3.03e-02  1.57e-03  2.27e-02  1.14e-03  6.79e-03  7.60e-01  
  6  +4.0180e-01  +4.0713e-01  5.33e-03  2.26e-04  3.30e-03  1.88e-04  1.14e-03  8.50e-01  
  7  +4.0012e-01  +4.0018e-01  6.19e-05  2.59e-06  3.78e-05  1.94e-06  1.33e-05  9.90e-01  
  8  +4.0010e-01  +4.0010e-01  6.19e-07  2.59e-08  3.78e-07  1.94e-08  1.33e-07  9.90e-01  
  9  +4.0010e-01  +4.0010e-01  6.19e-09  2.59e-10  3.78e-09  1.94e-10  1.33e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 398.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:00 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:00 PM: Optimal value: 4.001e-01
(CVXPY) Sep 20 07:56:00 PM: Compilation took 7.007e-03 seconds
(CVXPY) Sep 20 07:56:00 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:00 PM: Your problem has 54 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:00 PM: Finished problem compilation (took 4.992e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 54
  constraints   = 79
  nnz(P)        = 0
  nnz(A)        = 395
  cones (total) = 1
    : Nonnegative = 1,  numel = 79

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6675e-01  +2.7993e+01  2.75e+01  8.48e-01  7.07e+00  1.00e+00  1.15e+00   ------   
  1  +4.5676e-01  +5.9433e+00  5.49e+00  3.63e-01  3.92e+00  3.81e-03  6.25e-01  6.15e-01  
  2  +3.2478e-01  +1.2983e+00  9.74e-01  8.28e-02  1.11e+00  2.07e-02  2.10e-01  9.25e-01  
  3  +2.8042e-01  +7.4557e-01  4.65e-01  3.29e-02  4.64e-01  1.18e-02  9.50e-02  5.99e-01  
  4  +2.1287e-01  +3.8471e-01  1.72e-01  8.44e-03  1.29e-01  4.23e-03  2.93e-02  8.02e-01  
  5  +1.9659e-01  +3.2037e-01  1.24e-01  5.63e-03  9.13e-02  2.66e-03  2.00e-02  5.09e-01  
  6  +1.6502e-01  +1.7986e-01  1.48e-02  6.49e-04  1.05e-02  2.21e-04  2.51e-03  8.92e-01  
  7  +1.6048e-01  +1.6070e-01  2.27e-04  1.00e-05  1.62e-04  2.43e-06  3.97e-05  9.84e-01  
  8  +1.6040e-01  +1.6041e-01  5.65e-06  2.66e-07  4.13e-06  3.01e-08  1.08e-06  9.73e-01  
  9  +1.6040e-01  +1.6040e-01  5.66e-08  2.67e-09  4.13e-08  3.02e-10  1.09e-08  9.90e-01  
 10  +1.6040e-01  +1.6040e-01  5.66e-10  2.67e-11  4.14e-10  3.02e-12  1.09e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 515.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:00 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:00 PM: Optimal value: 1.604e-01
(CVXPY) Sep 20 07:56:00 PM: Compilation took 4.992e-03 seconds
(CVXPY) Sep 20 07:56:00 PM: Solver (including time spent in interface) took 9.997e-04 seconds
Iteration: 2, Objective: 0.1604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:01 PM: Your problem has 64 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:01 PM: Finished problem compilation (took 3.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 64
  constraints   = 89
  nnz(P)        = 0
  nnz(A)        = 449
  cones (total) = 1
    : Nonnegative = 1,  numel = 89

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5886e-01  +2.8392e+01  2.79e+01  8.57e-01  6.92e+00  1.00e+00  1.17e+00   ------   
  1  +4.0005e-01  +5.9158e+00  5.52e+00  3.64e-01  3.70e+00  3.87e-03  6.19e-01  6.23e-01  
  2  +1.9602e-01  +1.4676e+00  1.27e+00  8.51e-02  1.10e+00  1.98e-02  2.12e-01  8.51e-01  
  3  +1.3315e-01  +3.7945e-01  2.46e-01  1.66e-02  2.21e-01  4.31e-03  5.03e-02  8.31e-01  
  4  +1.1109e-01  +2.7921e-01  1.68e-01  9.90e-03  1.45e-01  3.08e-03  3.13e-02  5.07e-01  
  5  +9.3116e-02  +2.0804e-01  1.15e-01  5.82e-03  9.34e-02  2.18e-03  1.95e-02  4.41e-01  
  6  +6.4364e-02  +7.5541e-02  1.12e-02  5.42e-04  8.74e-03  9.87e-05  2.00e-03  9.76e-01  
  7  +6.0676e-02  +6.0893e-02  2.17e-04  1.06e-05  1.70e-04  1.16e-06  4.00e-05  9.81e-01  
  8  +6.0603e-02  +6.0611e-02  7.90e-06  4.22e-07  6.45e-06  4.27e-08  1.64e-06  9.71e-01  
  9  +6.0600e-02  +6.0600e-02  7.92e-08  4.25e-09  6.48e-08  4.28e-10  1.65e-08  9.90e-01  
 10  +6.0600e-02  +6.0600e-02  7.94e-10  4.25e-11  6.49e-10  4.29e-12  1.65e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 468.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:01 PM: Optimal value: 6.060e-02
(CVXPY) Sep 20 07:56:01 PM: Compilation took 3.999e-03 seconds
(CVXPY) Sep 20 07:56:01 PM: Solver (including time spent in interface) took 9.999e-04 seconds
Iteration: 3, Objective: 0.0606
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:01 PM: Your problem has 74 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:01 PM: Finished problem compilation (took 3.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 74
  constraints   = 99
  nnz(P)        = 0
  nnz(A)        = 483
  cones (total) = 1
    : Nonnegative = 1,  numel = 99

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5353e-01  +2.7975e+01  2.75e+01  8.63e-01  6.67e+00  1.00e+00  1.14e+00   ------   
  1  +3.6367e-01  +5.9232e+00  5.56e+00  3.72e-01  3.50e+00  3.99e-03  6.01e-01  6.16e-01  
  2  +1.8698e-01  +1.7307e+00  1.54e+00  1.08e-01  1.30e+00  1.88e-02  2.51e-01  7.61e-01  
  3  +1.2472e-01  +4.9761e-01  3.73e-01  2.61e-02  3.34e-01  5.80e-03  7.27e-02  7.45e-01  
  4  +8.8633e-02  +2.3760e-01  1.49e-01  9.35e-03  1.28e-01  2.55e-03  2.87e-02  6.90e-01  
  5  +7.3317e-02  +1.8849e-01  1.15e-01  6.12e-03  9.38e-02  1.96e-03  1.95e-02  4.49e-01  
  6  +4.7448e-02  +7.0420e-02  2.30e-02  1.14e-03  1.76e-02  3.36e-04  3.90e-03  8.56e-01  
  7  +4.0861e-02  +4.1412e-02  5.50e-04  2.72e-05  4.18e-04  5.40e-06  9.56e-05  9.77e-01  
  8  +4.0718e-02  +4.0780e-02  6.22e-05  3.33e-06  4.88e-05  5.19e-07  1.23e-05  8.73e-01  
  9  +4.0700e-02  +4.0701e-02  8.44e-07  4.63e-08  6.70e-07  6.51e-09  1.72e-07  9.87e-01  
 10  +4.0700e-02  +4.0700e-02  8.44e-09  4.63e-10  6.70e-09  6.51e-11  1.72e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 520.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:01 PM: Optimal value: 4.070e-02
(CVXPY) Sep 20 07:56:01 PM: Compilation took 3.006e-03 seconds
(CVXPY) Sep 20 07:56:01 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.0407
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:01 PM: Your problem has 84 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:01 PM: Finished problem compilation (took 4.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 84
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 527
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4226e-01  +2.7506e+01  2.71e+01  8.69e-01  6.51e+00  1.00e+00  1.12e+00   ------   
  1  +2.9520e-01  +6.2573e+00  5.96e+00  3.91e-01  3.41e+00  4.31e-03  5.96e-01  5.80e-01  
  2  +1.5676e-01  +1.5047e+00  1.35e+00  1.01e-01  1.15e+00  2.31e-02  2.34e-01  8.32e-01  
  3  +1.0028e-01  +4.3533e-01  3.35e-01  2.47e-02  2.98e-01  6.58e-03  6.74e-02  7.65e-01  
  4  +5.8291e-02  +2.0961e-01  1.51e-01  8.98e-03  1.24e-01  3.46e-03  2.66e-02  7.04e-01  
  5  +3.5903e-02  +1.3707e-01  1.01e-01  5.09e-03  7.73e-02  2.24e-03  1.57e-02  5.10e-01  
  6  +4.3555e-03  +1.4364e-02  1.00e-02  4.58e-04  7.11e-03  1.55e-04  1.52e-03  9.41e-01  
  7  +1.0393e-03  +1.5744e-03  5.35e-04  2.51e-05  3.83e-04  5.15e-06  8.52e-05  9.44e-01  
  8  +8.3712e-04  +9.1486e-04  7.77e-05  4.07e-06  5.76e-05  6.81e-07  1.55e-05  8.91e-01  
  9  +8.0063e-04  +8.0192e-04  1.29e-06  6.86e-08  9.60e-07  1.01e-08  2.69e-07  9.84e-01  
 10  +8.0001e-04  +8.0002e-04  1.28e-08  6.86e-10  9.59e-09  1.01e-10  2.69e-09  9.90e-01  
 11  +8.0000e-04  +8.0000e-04  1.29e-10  6.87e-12  9.61e-11  1.01e-12  2.70e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 575.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:01 PM: Optimal value: 8.000e-04
(CVXPY) Sep 20 07:56:01 PM: Compilation took 4.007e-03 seconds
(CVXPY) Sep 20 07:56:01 PM: Solver (including time spent in interface) took 9.940e-04 seconds
Iteration: 5, Objective: 0.0008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:01 PM: Your problem has 94 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:01 PM: Finished problem compilation (took 4.138e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 94
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 568
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.3467e-01  +2.7460e+01  2.70e+01  8.75e-01  6.36e+00  1.00e+00  1.12e+00   ------   
  1  +2.1938e-01  +6.5825e+00  6.36e+00  4.01e-01  3.32e+00  4.61e-03  5.93e-01  5.55e-01  
  2  +7.6212e-02  +1.4990e+00  1.42e+00  1.05e-01  1.13e+00  2.52e-02  2.40e-01  8.25e-01  
  3  +5.7055e-02  +2.7675e-01  2.20e-01  1.84e-02  2.03e-01  5.80e-03  5.16e-02  8.57e-01  
  4  +3.5479e-02  +1.6509e-01  1.30e-01  9.84e-03  1.18e-01  3.34e-03  2.85e-02  5.66e-01  
  5  +2.0599e-02  +1.1415e-01  9.35e-02  5.93e-03  7.95e-02  2.31e-03  1.83e-02  4.60e-01  
  6  +2.6044e-03  +1.1282e-02  8.68e-03  5.32e-04  7.16e-03  1.58e-04  1.74e-03  9.36e-01  
  7  +8.4756e-04  +1.3711e-03  5.24e-04  3.30e-05  4.37e-04  5.88e-06  1.12e-04  9.36e-01  
  8  +7.3932e-04  +9.8158e-04  2.42e-04  1.61e-05  2.04e-04  2.40e-06  6.13e-05  6.50e-01  
  9  +6.7423e-04  +6.9749e-04  2.33e-05  1.59e-06  1.97e-05  2.01e-07  6.45e-06  9.05e-01  
 10  +6.6675e-04  +6.6700e-04  2.54e-07  1.74e-08  2.15e-07  2.14e-09  7.13e-08  9.89e-01  
 11  +6.6667e-04  +6.6667e-04  2.54e-09  1.74e-10  2.15e-09  2.15e-11  7.13e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 654.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:01 PM: Optimal value: 6.667e-04
(CVXPY) Sep 20 07:56:01 PM: Compilation took 4.138e-03 seconds
(CVXPY) Sep 20 07:56:01 PM: Solver (including time spent in interface) took 1.072e-03 seconds
Iteration: 6, Objective: 0.0007
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:01 PM: Your problem has 101 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:01 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 101
  constraints   = 126
  nnz(P)        = 0
  nnz(A)        = 598
  cones (total) = 1
    : Nonnegative = 1,  numel = 126

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.2972e-01  +2.7365e+01  2.69e+01  8.78e-01  6.28e+00  1.00e+00  1.12e+00   ------   
  1  +1.8798e-01  +6.8436e+00  6.66e+00  4.16e-01  3.29e+00  4.78e-03  5.99e-01  5.35e-01  
  2  +6.9112e-02  +1.6036e+00  1.53e+00  1.17e-01  1.19e+00  2.64e-02  2.63e-01  7.95e-01  
  3  +5.3997e-02  +2.8134e-01  2.27e-01  2.03e-02  2.14e-01  6.41e-03  5.58e-02  8.53e-01  
  4  +3.3376e-02  +1.5567e-01  1.22e-01  9.98e-03  1.13e-01  3.30e-03  2.90e-02  5.78e-01  
  5  +1.9274e-02  +1.1428e-01  9.50e-02  6.36e-03  8.29e-02  2.32e-03  1.97e-02  4.94e-01  
  6  +3.6406e-03  +1.8062e-02  1.44e-02  9.35e-04  1.22e-02  2.96e-04  3.06e-03  8.74e-01  
  7  +9.0250e-04  +1.6091e-03  7.07e-04  4.67e-05  6.03e-04  9.83e-06  1.57e-04  9.50e-01  
  8  +7.3312e-04  +9.5544e-04  2.22e-04  1.55e-05  1.91e-04  2.21e-06  6.06e-05  7.69e-01  
  9  +6.7257e-04  +6.8996e-04  1.74e-05  1.23e-06  1.49e-05  1.32e-07  5.16e-06  9.50e-01  
 10  +6.6673e-04  +6.6691e-04  1.83e-07  1.30e-08  1.57e-07  1.37e-09  5.50e-08  9.89e-01  
 11  +6.6667e-04  +6.6667e-04  1.83e-09  1.30e-10  1.58e-09  1.38e-11  5.50e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 641.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:01 PM: Optimal value: 6.667e-04
(CVXPY) Sep 20 07:56:01 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:56:01 PM: Solver (including time spent in interface) took 1.007e-03 seconds
Iteration: 7, Objective: 0.0007
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:01 PM: Your problem has 102 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:01 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 102
  constraints   = 127
  nnz(P)        = 0
  nnz(A)        = 601
  cones (total) = 1
    : Nonnegative = 1,  numel = 127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.2764e-01  +2.7360e+01  2.69e+01  8.79e-01  6.26e+00  1.00e+00  1.12e+00   ------   
  1  +1.7007e-01  +6.9352e+00  6.77e+00  4.17e-01  3.29e+00  4.85e-03  6.01e-01  5.35e-01  
  2  +5.9722e-02  +1.5281e+00  1.47e+00  1.16e-01  1.16e+00  2.70e-02  2.58e-01  8.14e-01  
  3  +4.9186e-02  +2.6544e-01  2.16e-01  2.00e-02  2.07e-01  6.38e-03  5.45e-02  8.51e-01  
  4  +3.2071e-02  +1.5635e-01  1.24e-01  1.06e-02  1.18e-01  3.53e-03  3.01e-02  5.33e-01  
  5  +1.7163e-02  +1.1604e-01  9.89e-02  6.80e-03  8.74e-02  2.18e-03  2.08e-02  5.92e-01  
  6  +2.1672e-03  +1.0037e-02  7.87e-03  5.25e-04  6.80e-03  1.36e-04  1.71e-03  9.32e-01  
  7  +8.7212e-04  +1.5247e-03  6.53e-04  4.49e-05  5.71e-04  7.90e-06  1.51e-04  9.12e-01  
  8  +7.6080e-04  +1.0926e-03  3.32e-04  2.33e-05  2.86e-04  3.22e-06  8.96e-05  6.92e-01  
  9  +6.8350e-04  +7.3821e-04  5.47e-05  3.87e-06  4.68e-05  4.59e-07  1.60e-05  8.55e-01  
 10  +6.6693e-04  +6.6775e-04  8.25e-07  5.85e-08  7.05e-07  6.29e-09  2.48e-07  9.85e-01  
 11  +6.6667e-04  +6.6668e-04  8.25e-09  5.85e-10  7.05e-09  6.29e-11  2.48e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 644.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:01 PM: Optimal value: 6.667e-04
(CVXPY) Sep 20 07:56:01 PM: Compilation took 3.000e-03 seconds
(CVXPY) Sep 20 07:56:01 PM: Solver (including time spent in interface) took 1.001e-03 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 0 AND x1 = 0 AND x6 = 0)                       <-- (term's our objective: 0.28)
 OR (x0 = 0 AND x2 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.2)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.16)
 OR (x1 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.08)
 OR (x1 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.16)
 OR (x1 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.2)
 OR (x2 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.8851711750030518
Best over terms:
  Our final objective: 0.28
    Its accruacy: 0.64
    Its hamming distance: 6
  Shortest hamming distance: 6
    Its our objective: 0.28
  Highest accruacy: 0.64
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

