Command:
python test_script.py -s constant_subclass -d 9 -n 5000 --seed 56 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0015999999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 9.

Computed total variation: 0.2412
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:32 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:32 PM: Finished problem compilation (took 1.618e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 30019
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5008e+03  2.50e+03  9.80e-01  8.18e+01  1.00e+00  1.00e+00   ------   
  1  +5.8090e-01  +5.4279e+02  5.42e+02  4.28e-01  5.31e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3181e-01  +6.1670e+01  6.11e+01  1.65e-01  2.63e+01  1.63e-02  2.77e-01  9.31e-01  
  3  +5.0855e-01  +1.6003e+01  1.55e+01  1.06e-01  1.66e+01  4.45e-05  2.57e-01  2.88e-01  
  4  +5.0076e-01  +1.4677e+00  9.67e-01  9.42e-03  1.53e+00  6.40e-06  1.33e-01  7.87e-01  
  5  +5.0008e-01  +6.2685e-01  1.27e-01  1.20e-03  1.97e-01  1.07e-05  4.00e-02  9.90e-01  
  6  +5.0004e-01  +5.6928e-01  6.92e-02  6.54e-04  1.08e-01  7.42e-06  1.82e-02  5.76e-01  
  7  +5.0002e-01  +5.4265e-01  4.26e-02  3.95e-04  6.50e-02  9.90e-06  5.21e-03  7.37e-01  
  8  +4.9950e-01  +5.4141e-01  4.19e-02  4.74e-05  7.85e-03  2.84e-04  1.50e-04  9.81e-01  
  9  +4.9848e-01  +5.3644e-01  3.80e-02  2.20e-05  3.65e-03  4.82e-04  6.90e-05  5.96e-01  
 10  +4.9691e-01  +5.2673e-01  2.98e-02  1.88e-05  3.11e-03  2.62e-04  6.00e-05  2.39e-01  
 11  +4.9572e-01  +5.1906e-01  2.33e-02  1.50e-05  2.49e-03  2.52e-06  4.92e-05  7.67e-01  
 12  +4.9311e-01  +5.0686e-01  1.38e-02  7.45e-06  1.23e-03  1.39e-06  2.52e-05  5.81e-01  
 13  +4.9017e-01  +4.9378e-01  3.61e-03  1.64e-06  2.72e-04  2.69e-07  5.95e-06  9.90e-01  
 14  +4.8897e-01  +4.8916e-01  1.85e-04  7.45e-08  1.23e-05  1.39e-08  3.01e-07  9.58e-01  
 15  +4.8890e-01  +4.8890e-01  1.94e-06  7.73e-10  1.28e-07  1.46e-10  3.16e-09  9.90e-01  
 16  +4.8890e-01  +4.8890e-01  1.94e-08  7.73e-12  1.28e-09  1.46e-12  3.16e-11  9.90e-01  
 17  +4.8890e-01  +4.8890e-01  1.95e-10  7.75e-14  1.28e-11  1.71e-14  3.68e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 63.223ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:32 PM: Optimal value: 4.889e-01
(CVXPY) Sep 20 07:58:32 PM: Compilation took 1.618e-02 seconds
(CVXPY) Sep 20 07:58:32 PM: Solver (including time spent in interface) took 6.764e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4889
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:32 PM: Your problem has 2529 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:32 PM: Finished problem compilation (took 1.498e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2529
  constraints   = 5029
  nnz(P)        = 0
  nnz(A)        = 33074
  cones (total) = 1
    : Nonnegative = 1,  numel = 5029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5008e+03  2.50e+03  9.80e-01  8.31e+01  1.00e+00  1.00e+00   ------   
  1  +5.8081e-01  +5.4283e+02  5.42e+02  4.29e-01  5.39e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3169e-01  +6.1551e+01  6.10e+01  1.65e-01  2.66e+01  1.63e-02  2.76e-01  9.33e-01  
  3  +5.0850e-01  +1.5952e+01  1.54e+01  1.06e-01  1.68e+01  4.45e-05  2.56e-01  2.92e-01  
  4  +5.0075e-01  +1.4501e+00  9.49e-01  9.26e-03  1.53e+00  6.44e-06  1.30e-01  7.99e-01  
  5  +5.0018e-01  +7.5383e-01  2.54e-01  2.42e-03  4.02e-01  9.90e-06  6.11e-02  7.23e-01  
  6  +5.0010e-01  +6.4812e-01  1.48e-01  1.40e-03  2.34e-01  7.72e-06  2.85e-02  6.44e-01  
  7  +5.0005e-01  +5.9507e-01  9.50e-02  8.16e-04  1.36e-01  1.56e-05  5.73e-03  8.46e-01  
  8  +4.9962e-01  +5.9646e-01  9.68e-02  1.11e-04  1.87e-02  2.36e-04  3.53e-04  9.42e-01  
  9  +4.9895e-01  +5.8830e-01  8.93e-02  8.68e-05  1.46e-02  2.20e-04  2.75e-04  3.49e-01  
 10  +4.9621e-01  +5.6295e-01  6.67e-02  5.70e-05  9.59e-03  1.35e-04  1.85e-04  4.70e-01  
 11  +4.9541e-01  +5.5730e-01  6.19e-02  5.09e-05  8.56e-03  1.06e-04  1.67e-04  2.15e-01  
 12  +4.9355e-01  +5.4548e-01  5.19e-02  3.73e-05  6.27e-03  8.41e-05  1.25e-04  3.19e-01  
 13  +4.9258e-01  +5.3961e-01  4.70e-02  3.07e-05  5.15e-03  6.17e-05  1.04e-04  3.36e-01  
 14  +4.9228e-01  +5.3716e-01  4.49e-02  2.89e-05  4.86e-03  3.31e-05  9.82e-05  4.09e-01  
 15  +4.9024e-01  +5.2569e-01  3.55e-02  1.91e-05  3.20e-03  8.76e-06  6.59e-05  7.94e-01  
 16  +4.8983e-01  +5.2355e-01  3.37e-02  1.88e-05  3.17e-03  7.22e-06  6.52e-05  1.17e-01  
 17  +4.8783e-01  +5.1362e-01  2.58e-02  1.30e-05  2.18e-03  3.63e-06  4.61e-05  6.20e-01  
 18  +4.8459e-01  +4.9756e-01  1.30e-02  5.93e-06  9.96e-04  1.72e-06  2.22e-05  5.48e-01  
 19  +4.8455e-01  +4.9716e-01  1.26e-02  5.81e-06  9.76e-04  1.60e-06  2.17e-05  1.37e-01  
 20  +4.8208e-01  +4.8513e-01  3.04e-03  1.34e-06  2.24e-04  2.97e-07  5.34e-06  8.46e-01  
 21  +4.8131e-01  +4.8164e-01  3.29e-04  1.43e-07  2.39e-05  2.60e-08  6.19e-07  9.86e-01  
 22  +4.8120e-01  +4.8120e-01  3.59e-06  1.55e-09  2.60e-07  2.67e-10  6.89e-09  9.89e-01  
 23  +4.8120e-01  +4.8120e-01  3.59e-08  1.55e-11  2.60e-09  2.67e-12  6.89e-11  9.90e-01  
 24  +4.8120e-01  +4.8120e-01  3.59e-10  1.55e-13  2.60e-11  2.76e-14  7.11e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 80.3135ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:32 PM: Optimal value: 4.812e-01
(CVXPY) Sep 20 07:58:32 PM: Compilation took 1.498e-02 seconds
(CVXPY) Sep 20 07:58:32 PM: Solver (including time spent in interface) took 8.499e-02 seconds
Iteration: 2, Objective: 0.4812
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:33 PM: Your problem has 2539 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:33 PM: Finished problem compilation (took 1.802e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2539
  constraints   = 5039
  nnz(P)        = 0
  nnz(A)        = 35570
  cones (total) = 1
    : Nonnegative = 1,  numel = 5039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5009e+03  2.50e+03  9.80e-01  8.38e+01  1.00e+00  1.00e+00   ------   
  1  +5.8068e-01  +5.4292e+02  5.42e+02  4.29e-01  5.43e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3155e-01  +6.1414e+01  6.09e+01  1.65e-01  2.67e+01  1.63e-02  2.76e-01  9.34e-01  
  3  +5.0846e-01  +1.5902e+01  1.54e+01  1.06e-01  1.69e+01  4.47e-05  2.55e-01  2.97e-01  
  4  +5.0074e-01  +1.4368e+00  9.36e-01  9.14e-03  1.52e+00  6.49e-06  1.27e-01  8.09e-01  
  5  +5.0026e-01  +8.4956e-01  3.49e-01  3.34e-03  5.60e-01  9.50e-06  7.01e-02  5.92e-01  
  6  +5.0011e-01  +6.5249e-01  1.52e-01  1.44e-03  2.42e-01  8.11e-06  2.22e-02  8.03e-01  
  7  +5.0003e-01  +7.6700e-01  2.67e-01  7.13e-04  1.21e-01  9.71e-05  2.41e-03  9.90e-01  
  8  +4.9942e-01  +7.4161e-01  2.42e-01  2.06e-04  3.50e-02  2.96e-04  6.54e-04  7.49e-01  
  9  +4.9683e-01  +6.1976e-01  1.23e-01  1.11e-04  1.88e-02  2.74e-06  3.60e-04  8.29e-01  
 10  +4.9183e-01  +5.7943e-01  8.76e-02  5.99e-05  1.02e-02  2.70e-06  1.97e-04  5.14e-01  
 11  +4.9173e-01  +5.7871e-01  8.70e-02  5.86e-05  9.95e-03  2.90e-06  1.91e-04  9.00e-02  
 12  +4.9168e-01  +5.7650e-01  8.48e-02  5.29e-05  8.98e-03  4.52e-06  1.67e-04  6.06e-01  
 13  +4.9123e-01  +5.7215e-01  8.09e-02  5.04e-05  8.56e-03  4.77e-06  1.57e-04  4.18e-01  
 14  +4.8779e-01  +5.5292e-01  6.51e-02  3.41e-05  5.78e-03  4.34e-06  1.06e-04  3.67e-01  
 15  +4.8678e-01  +5.4731e-01  6.05e-02  2.88e-05  4.89e-03  4.98e-06  9.13e-05  8.21e-01  
 16  +4.8364e-01  +5.3475e-01  5.11e-02  2.23e-05  3.79e-03  4.52e-06  7.03e-05  6.31e-01  
 17  +4.7524e-01  +4.9704e-01  2.18e-02  8.51e-06  1.44e-03  2.03e-06  2.72e-05  8.30e-01  
 18  +4.7234e-01  +4.8384e-01  1.15e-02  4.37e-06  7.41e-04  1.17e-06  1.43e-05  6.44e-01  
 19  +4.7027e-01  +4.7508e-01  4.81e-03  1.78e-06  3.02e-04  5.91e-07  5.90e-06  9.18e-01  
 20  +4.6882e-01  +4.6975e-01  9.25e-04  3.36e-07  5.70e-05  1.18e-07  1.12e-06  8.34e-01  
 21  +4.6846e-01  +4.6847e-01  1.72e-05  6.18e-09  1.05e-06  2.06e-09  2.07e-08  9.87e-01  
 22  +4.6845e-01  +4.6845e-01  1.73e-07  6.22e-11  1.05e-08  2.07e-11  2.09e-10  9.90e-01  
 23  +4.6845e-01  +4.6845e-01  1.73e-09  6.22e-13  1.05e-10  2.11e-13  2.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 85.5181ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:33 PM: Optimal value: 4.685e-01
(CVXPY) Sep 20 07:58:33 PM: Compilation took 1.802e-02 seconds
(CVXPY) Sep 20 07:58:33 PM: Solver (including time spent in interface) took 9.013e-02 seconds
Iteration: 3, Objective: 0.4685
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:33 PM: Your problem has 2549 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:33 PM: Finished problem compilation (took 1.675e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2549
  constraints   = 5049
  nnz(P)        = 0
  nnz(A)        = 36838
  cones (total) = 1
    : Nonnegative = 1,  numel = 5049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5009e+03  2.50e+03  9.80e-01  8.39e+01  1.00e+00  1.00e+00   ------   
  1  +5.8052e-01  +5.4299e+02  5.42e+02  4.29e-01  5.43e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3140e-01  +6.1264e+01  6.07e+01  1.65e-01  2.66e+01  1.64e-02  2.76e-01  9.36e-01  
  3  +5.0842e-01  +1.5856e+01  1.53e+01  1.06e-01  1.68e+01  4.48e-05  2.55e-01  3.01e-01  
  4  +5.0073e-01  +1.4293e+00  9.29e-01  9.08e-03  1.51e+00  6.52e-06  1.26e-01  8.16e-01  
  5  +5.0022e-01  +7.9818e-01  2.98e-01  2.85e-03  4.79e-01  9.90e-06  5.76e-02  6.92e-01  
  6  +5.0012e-01  +6.8048e-01  1.80e-01  1.67e-03  2.82e-01  1.26e-05  1.68e-02  8.17e-01  
  7  +4.9998e-01  +6.7920e-01  1.79e-01  5.94e-04  1.01e-01  8.77e-05  1.98e-03  9.01e-01  
  8  +4.9933e-01  +6.7279e-01  1.73e-01  1.62e-04  2.76e-02  3.25e-04  4.92e-04  7.65e-01  
  9  +4.9614e-01  +6.2481e-01  1.29e-01  9.57e-05  1.63e-02  1.80e-04  2.93e-04  6.96e-01  
 10  +4.9496e-01  +6.1636e-01  1.21e-01  8.61e-05  1.47e-02  1.49e-04  2.62e-04  2.21e-01  
 11  +4.9289e-01  +6.0218e-01  1.09e-01  6.99e-05  1.19e-02  8.09e-05  2.12e-04  5.11e-01  
 12  +4.9177e-01  +5.9675e-01  1.05e-01  6.53e-05  1.11e-02  4.74e-05  2.02e-04  3.76e-01  
 13  +4.8812e-01  +5.7787e-01  8.97e-02  4.77e-05  8.11e-03  3.85e-05  1.48e-04  3.71e-01  
 14  +4.8718e-01  +5.7291e-01  8.57e-02  4.70e-05  7.99e-03  2.98e-05  1.46e-04  1.68e-01  
 15  +4.8551e-01  +5.6530e-01  7.98e-02  4.13e-05  7.02e-03  1.33e-05  1.29e-04  6.15e-01  
 16  +4.7969e-01  +5.3984e-01  6.02e-02  2.69e-05  4.56e-03  1.02e-05  8.53e-05  3.78e-01  
 17  +4.7863e-01  +5.3299e-01  5.44e-02  2.47e-05  4.19e-03  6.61e-06  7.98e-05  5.04e-01  
 18  +4.7620e-01  +5.2194e-01  4.57e-02  2.03e-05  3.44e-03  5.27e-06  6.60e-05  3.16e-01  
 19  +4.7407e-01  +5.1265e-01  3.86e-02  1.58e-05  2.67e-03  4.14e-06  5.09e-05  8.81e-01  
 20  +4.6504e-01  +4.7648e-01  1.14e-02  4.40e-06  7.46e-04  1.10e-06  1.48e-05  7.94e-01  
 21  +4.6212e-01  +4.6490e-01  2.79e-03  1.05e-06  1.78e-04  2.79e-07  3.58e-06  8.05e-01  
 22  +4.6143e-01  +4.6224e-01  8.16e-04  3.04e-07  5.16e-05  9.69e-08  1.06e-06  9.34e-01  
 23  +4.6117e-01  +4.6135e-01  1.73e-04  6.30e-08  1.07e-05  2.11e-08  2.26e-07  9.43e-01  
 24  +4.6110e-01  +4.6110e-01  3.52e-06  1.26e-09  2.14e-07  4.24e-10  4.61e-09  9.90e-01  
 25  +4.6110e-01  +4.6110e-01  3.53e-08  1.26e-11  2.14e-09  4.24e-12  4.61e-11  9.90e-01  
 26  +4.6110e-01  +4.6110e-01  3.53e-10  1.26e-13  2.14e-11  4.24e-14  4.61e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 96.417ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:33 PM: Optimal value: 4.611e-01
(CVXPY) Sep 20 07:58:33 PM: Compilation took 1.675e-02 seconds
(CVXPY) Sep 20 07:58:33 PM: Solver (including time spent in interface) took 1.024e-01 seconds
Iteration: 4, Objective: 0.4611
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:33 PM: Your problem has 2559 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:33 PM: Finished problem compilation (took 1.955e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2559
  constraints   = 5059
  nnz(P)        = 0
  nnz(A)        = 38083
  cones (total) = 1
    : Nonnegative = 1,  numel = 5059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5010e+03  2.50e+03  9.80e-01  8.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.8036e-01  +5.4305e+02  5.42e+02  4.30e-01  5.44e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3127e-01  +6.1135e+01  6.06e+01  1.64e-01  2.65e+01  1.64e-02  2.75e-01  9.38e-01  
  3  +5.0839e-01  +1.5815e+01  1.53e+01  1.05e-01  1.68e+01  4.49e-05  2.54e-01  3.05e-01  
  4  +5.0072e-01  +1.4169e+00  9.16e-01  8.97e-03  1.49e+00  6.56e-06  1.23e-01  8.25e-01  
  5  +5.0022e-01  +8.0376e-01  3.04e-01  2.91e-03  4.89e-01  1.02e-05  5.17e-02  7.14e-01  
  6  +5.0016e-01  +7.4219e-01  2.42e-01  2.17e-03  3.65e-01  1.91e-05  1.55e-02  7.59e-01  
  7  +4.9975e-01  +7.3310e-01  2.33e-01  3.45e-04  5.90e-02  2.25e-04  1.04e-03  9.62e-01  
  8  +4.9897e-01  +7.0916e-01  2.10e-01  2.01e-04  3.44e-02  2.70e-04  5.99e-04  5.79e-01  
  9  +4.9602e-01  +6.7420e-01  1.78e-01  1.22e-04  2.09e-02  2.72e-04  3.64e-04  5.18e-01  
 10  +4.9361e-01  +6.5577e-01  1.62e-01  1.02e-04  1.74e-02  2.08e-04  3.05e-04  3.17e-01  
 11  +4.9136e-01  +6.3782e-01  1.46e-01  8.98e-05  1.53e-02  1.13e-04  2.71e-04  4.14e-01  
 12  +4.8856e-01  +6.2280e-01  1.34e-01  7.68e-05  1.31e-02  6.99e-05  2.36e-04  3.99e-01  
 13  +4.8354e-01  +5.9546e-01  1.12e-01  6.13e-05  1.04e-02  2.57e-05  1.91e-04  5.94e-01  
 14  +4.6975e-01  +5.2873e-01  5.90e-02  2.66e-05  4.52e-03  1.08e-05  8.71e-05  6.63e-01  
 15  +4.6189e-01  +4.9498e-01  3.31e-02  1.38e-05  2.34e-03  5.60e-06  4.65e-05  5.31e-01  
 16  +4.5952e-01  +4.8539e-01  2.59e-02  1.04e-05  1.76e-03  4.16e-06  3.54e-05  3.61e-01  
 17  +4.5483e-01  +4.6665e-01  1.18e-02  4.49e-06  7.61e-04  1.56e-06  1.57e-05  8.40e-01  
 18  +4.5095e-01  +4.5205e-01  1.10e-03  4.04e-07  6.86e-05  1.40e-07  1.47e-06  9.29e-01  
 19  +4.5051e-01  +4.5052e-01  1.46e-05  5.30e-09  8.99e-07  1.83e-09  1.94e-08  9.88e-01  
 20  +4.5050e-01  +4.5050e-01  1.46e-07  5.30e-11  8.99e-09  1.83e-11  1.95e-10  9.90e-01  
 21  +4.5050e-01  +4.5050e-01  1.46e-09  5.30e-13  8.99e-11  1.87e-13  1.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 87.75ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:33 PM: Optimal value: 4.505e-01
(CVXPY) Sep 20 07:58:33 PM: Compilation took 1.955e-02 seconds
(CVXPY) Sep 20 07:58:33 PM: Solver (including time spent in interface) took 9.335e-02 seconds
Iteration: 5, Objective: 0.4505
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:33 PM: Your problem has 2569 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:33 PM: Finished problem compilation (took 2.004e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2569
  constraints   = 5069
  nnz(P)        = 0
  nnz(A)        = 39070
  cones (total) = 1
    : Nonnegative = 1,  numel = 5069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5011e+03  2.50e+03  9.80e-01  8.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.8013e-01  +5.4314e+02  5.43e+02  4.30e-01  5.44e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3109e-01  +6.0962e+01  6.04e+01  1.64e-01  2.64e+01  1.64e-02  2.74e-01  9.40e-01  
  3  +5.0835e-01  +1.5768e+01  1.53e+01  1.05e-01  1.67e+01  4.51e-05  2.52e-01  3.10e-01  
  4  +5.0071e-01  +1.4066e+00  9.06e-01  8.88e-03  1.48e+00  6.61e-06  1.20e-01  8.34e-01  
  5  +5.0028e-01  +8.7363e-01  3.73e-01  3.59e-03  6.03e-01  1.04e-05  5.45e-02  6.58e-01  
  6  +5.0016e-01  +7.5938e-01  2.59e-01  2.05e-03  3.47e-01  2.57e-05  1.01e-02  8.88e-01  
  7  +4.9980e-01  +7.5822e-01  2.58e-01  3.98e-04  6.82e-02  2.00e-04  1.18e-03  8.85e-01  
  8  +4.9894e-01  +7.3093e-01  2.32e-01  2.28e-04  3.91e-02  2.26e-04  6.67e-04  6.45e-01  
  9  +4.9491e-01  +6.8695e-01  1.92e-01  1.24e-04  2.12e-02  2.41e-04  3.64e-04  5.96e-01  
 10  +4.9230e-01  +6.6945e-01  1.77e-01  1.11e-04  1.90e-02  1.79e-04  3.29e-04  2.41e-01  
 11  +4.8930e-01  +6.5102e-01  1.62e-01  9.57e-05  1.64e-02  1.29e-04  2.88e-04  2.94e-01  
 12  +4.8387e-01  +6.1930e-01  1.35e-01  7.19e-05  1.23e-02  6.89e-05  2.21e-04  5.03e-01  
 13  +4.8156e-01  +6.0761e-01  1.26e-01  6.41e-05  1.09e-02  5.14e-05  1.98e-04  2.82e-01  
 14  +4.7042e-01  +5.4629e-01  7.59e-02  3.71e-05  6.31e-03  5.12e-07  1.20e-04  9.17e-01  
 15  +4.6109e-01  +5.0363e-01  4.25e-02  1.88e-05  3.20e-03  1.16e-06  6.26e-05  5.93e-01  
 16  +4.5414e-01  +4.7299e-01  1.89e-02  7.47e-06  1.27e-03  2.02e-06  2.52e-05  9.90e-01  
 17  +4.5092e-01  +4.6122e-01  1.03e-02  3.87e-06  6.58e-04  1.15e-06  1.34e-05  5.67e-01  
 18  +4.4867e-01  +4.5302e-01  4.36e-03  1.59e-06  2.70e-04  4.87e-07  5.63e-06  6.11e-01  
 19  +4.4738e-01  +4.4830e-01  9.14e-04  3.27e-07  5.57e-05  1.13e-07  1.18e-06  9.90e-01  
 20  +4.4700e-01  +4.4702e-01  1.11e-05  3.95e-09  6.73e-07  1.36e-09  1.43e-08  9.89e-01  
 21  +4.4700e-01  +4.4700e-01  1.11e-07  3.95e-11  6.73e-09  1.36e-11  1.43e-10  9.90e-01  
 22  +4.4700e-01  +4.4700e-01  1.11e-09  3.95e-13  6.73e-11  1.38e-13  1.46e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 94.211ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:33 PM: Optimal value: 4.470e-01
(CVXPY) Sep 20 07:58:33 PM: Compilation took 2.004e-02 seconds
(CVXPY) Sep 20 07:58:33 PM: Solver (including time spent in interface) took 9.938e-02 seconds
Iteration: 6, Objective: 0.4470
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:34 PM: Your problem has 2579 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:34 PM: Finished problem compilation (took 2.060e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2579
  constraints   = 5079
  nnz(P)        = 0
  nnz(A)        = 40028
  cones (total) = 1
    : Nonnegative = 1,  numel = 5079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5013e+03  2.50e+03  9.80e-01  8.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.7999e-01  +5.4319e+02  5.43e+02  4.31e-01  5.43e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3101e-01  +6.0886e+01  6.04e+01  1.64e-01  2.63e+01  1.65e-02  2.74e-01  9.41e-01  
  3  +5.0833e-01  +1.5744e+01  1.52e+01  1.05e-01  1.67e+01  4.52e-05  2.52e-01  3.12e-01  
  4  +5.0078e-01  +1.5310e+00  1.03e+00  1.01e-02  1.68e+00  6.99e-06  1.28e-01  7.81e-01  
  5  +5.0025e-01  +8.9437e-01  3.94e-01  3.78e-03  6.35e-01  9.81e-06  6.01e-02  6.48e-01  
  6  +5.0009e-01  +7.9925e-01  2.99e-01  2.57e-03  4.33e-01  2.00e-05  1.55e-02  7.98e-01  
  7  +4.9809e-01  +7.7699e-01  2.79e-01  3.14e-04  5.39e-02  2.69e-04  9.25e-04  9.46e-01  
  8  +4.9217e-01  +7.1340e-01  2.21e-01  1.34e-04  2.30e-02  3.79e-04  3.96e-04  6.40e-01  
  9  +4.8868e-01  +6.9011e-01  2.01e-01  1.12e-04  1.92e-02  2.87e-04  3.35e-04  3.02e-01  
 10  +4.8442e-01  +6.6438e-01  1.80e-01  9.20e-05  1.57e-02  2.25e-04  2.79e-04  2.75e-01  
 11  +4.7814e-01  +6.2131e-01  1.43e-01  7.73e-05  1.32e-02  9.05e-05  2.42e-04  4.00e-01  
 12  +4.6123e-01  +5.3168e-01  7.04e-02  3.25e-05  5.53e-03  2.34e-05  1.09e-04  7.21e-01  
 13  +4.5478e-01  +5.0048e-01  4.57e-02  1.99e-05  3.38e-03  1.07e-05  6.81e-05  6.18e-01  
 14  +4.4588e-01  +4.5934e-01  1.35e-02  5.55e-06  9.44e-04  1.81e-06  1.96e-05  9.27e-01  
 15  +4.4388e-01  +4.5108e-01  7.20e-03  2.91e-06  4.95e-04  9.55e-07  1.04e-05  5.62e-01  
 16  +4.4278e-01  +4.4669e-01  3.91e-03  1.53e-06  2.60e-04  4.80e-07  5.48e-06  7.88e-01  
 17  +4.4188e-01  +4.4340e-01  1.52e-03  5.63e-07  9.59e-05  1.90e-07  2.06e-06  6.79e-01  
 18  +4.4176e-01  +4.4290e-01  1.14e-03  4.25e-07  7.23e-05  1.37e-07  1.55e-06  6.68e-01  
 19  +4.4133e-01  +4.4140e-01  7.48e-05  2.72e-08  4.63e-06  8.74e-09  1.01e-07  9.90e-01  
 20  +4.4130e-01  +4.4130e-01  7.69e-07  2.80e-10  4.76e-08  8.99e-11  1.04e-09  9.90e-01  
 21  +4.4130e-01  +4.4130e-01  7.69e-09  2.80e-12  4.76e-10  8.99e-13  1.04e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 97.3641ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:34 PM: Optimal value: 4.413e-01
(CVXPY) Sep 20 07:58:34 PM: Compilation took 2.060e-02 seconds
(CVXPY) Sep 20 07:58:34 PM: Solver (including time spent in interface) took 1.033e-01 seconds
Iteration: 7, Objective: 0.4413
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:34 PM: Your problem has 2589 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:34 PM: Finished problem compilation (took 2.319e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2589
  constraints   = 5089
  nnz(P)        = 0
  nnz(A)        = 40825
  cones (total) = 1
    : Nonnegative = 1,  numel = 5089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.7988e-01  +5.4322e+02  5.43e+02  4.31e-01  5.43e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3092e-01  +6.0794e+01  6.03e+01  1.64e-01  2.62e+01  1.65e-02  2.73e-01  9.42e-01  
  3  +5.0830e-01  +1.5718e+01  1.52e+01  1.05e-01  1.66e+01  4.53e-05  2.51e-01  3.15e-01  
  4  +5.0079e-01  +1.5488e+00  1.05e+00  1.03e-02  1.71e+00  7.07e-06  1.28e-01  7.76e-01  
  5  +5.0022e-01  +8.8325e-01  3.83e-01  3.67e-03  6.16e-01  1.04e-05  5.57e-02  6.99e-01  
  6  +4.9997e-01  +8.4311e-01  3.43e-01  2.26e-03  3.83e-01  3.70e-05  9.15e-03  9.39e-01  
  7  +4.9691e-01  +8.0908e-01  3.12e-01  2.71e-04  4.65e-02  3.53e-04  7.90e-04  9.14e-01  
  8  +4.8815e-01  +7.0165e-01  2.14e-01  1.29e-04  2.21e-02  2.66e-04  3.88e-04  6.42e-01  
  9  +4.8509e-01  +6.8191e-01  1.97e-01  1.09e-04  1.87e-02  2.02e-04  3.31e-04  3.08e-01  
 10  +4.8076e-01  +6.4978e-01  1.69e-01  9.36e-05  1.60e-02  8.48e-05  2.89e-04  4.71e-01  
 11  +4.6533e-01  +5.6643e-01  1.01e-01  4.86e-05  8.29e-03  3.46e-05  1.60e-04  5.85e-01  
 12  +4.5381e-01  +5.0959e-01  5.58e-02  2.51e-05  4.28e-03  1.45e-05  8.69e-05  5.72e-01  
 13  +4.5079e-01  +4.9408e-01  4.33e-02  1.89e-05  3.22e-03  8.58e-06  6.60e-05  5.40e-01  
 14  +4.4358e-01  +4.6053e-01  1.69e-02  7.22e-06  1.23e-03  2.92e-06  2.61e-05  6.94e-01  
 15  +4.4060e-01  +4.4687e-01  6.27e-03  2.60e-06  4.43e-04  7.77e-07  9.57e-06  9.27e-01  
 16  +4.3924e-01  +4.4189e-01  2.65e-03  1.04e-06  1.77e-04  3.14e-07  3.97e-06  7.81e-01  
 17  +4.3835e-01  +4.3848e-01  1.29e-04  4.94e-08  8.42e-06  1.55e-08  1.93e-07  9.55e-01  
 18  +4.3830e-01  +4.3830e-01  1.30e-06  4.98e-10  8.48e-08  1.56e-10  1.94e-09  9.90e-01  
 19  +4.3830e-01  +4.3830e-01  1.30e-08  4.98e-12  8.48e-10  1.56e-12  1.94e-11  9.90e-01  
 20  +4.3830e-01  +4.3830e-01  1.30e-10  4.98e-14  8.49e-12  1.60e-14  1.99e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 97.4064ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:34 PM: Optimal value: 4.383e-01
(CVXPY) Sep 20 07:58:34 PM: Compilation took 2.319e-02 seconds
(CVXPY) Sep 20 07:58:34 PM: Solver (including time spent in interface) took 1.048e-01 seconds
Iteration: 8, Objective: 0.4383
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:34 PM: Your problem has 2599 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:34 PM: Finished problem compilation (took 2.354e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2599
  constraints   = 5099
  nnz(P)        = 0
  nnz(A)        = 41672
  cones (total) = 1
    : Nonnegative = 1,  numel = 5099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.7966e-01  +5.4335e+02  5.43e+02  4.31e-01  5.43e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3077e-01  +6.0661e+01  6.01e+01  1.63e-01  2.61e+01  1.65e-02  2.73e-01  9.44e-01  
  3  +5.0827e-01  +1.5682e+01  1.52e+01  1.04e-01  1.66e+01  4.55e-05  2.50e-01  3.19e-01  
  4  +5.0080e-01  +1.5692e+00  1.07e+00  1.05e-02  1.75e+00  7.17e-06  1.28e-01  7.71e-01  
  5  +5.0024e-01  +9.0887e-01  4.09e-01  3.92e-03  6.58e-01  1.04e-05  5.60e-02  6.84e-01  
  6  +4.9999e-01  +9.0980e-01  4.10e-01  2.64e-03  4.48e-01  3.69e-05  1.04e-02  9.34e-01  
  7  +4.9689e-01  +8.6336e-01  3.66e-01  3.29e-04  5.65e-02  3.19e-04  9.52e-04  9.09e-01  
  8  +4.9066e-01  +7.6581e-01  2.75e-01  1.93e-04  3.31e-02  2.41e-04  5.72e-04  5.13e-01  
  9  +4.8632e-01  +7.2357e-01  2.37e-01  1.44e-04  2.46e-02  1.67e-04  4.33e-04  4.33e-01  
 10  +4.8356e-01  +6.9995e-01  2.16e-01  1.27e-04  2.17e-02  1.26e-04  3.85e-04  2.41e-01  
 11  +4.7358e-01  +6.2086e-01  1.47e-01  8.25e-05  1.41e-02  1.21e-05  2.63e-04  7.80e-01  
 12  +4.6344e-01  +5.6443e-01  1.01e-01  5.05e-05  8.60e-03  7.25e-06  1.67e-04  9.90e-01  
 13  +4.5105e-01  +5.0498e-01  5.39e-02  2.46e-05  4.19e-03  4.00e-06  8.58e-05  6.76e-01  
 14  +4.4658e-01  +4.8283e-01  3.63e-02  1.60e-05  2.72e-03  3.24e-06  5.66e-05  7.39e-01  
 15  +4.4142e-01  +4.5949e-01  1.81e-02  7.82e-06  1.33e-03  1.63e-06  2.84e-05  5.45e-01  
 16  +4.3905e-01  +4.4886e-01  9.81e-03  4.19e-06  7.13e-04  9.17e-07  1.54e-05  5.83e-01  
 17  +4.3695e-01  +4.3970e-01  2.75e-03  1.16e-06  1.98e-04  2.68e-07  4.32e-06  8.22e-01  
 18  +4.3654e-01  +4.3806e-01  1.52e-03  6.25e-07  1.06e-04  1.52e-07  2.36e-06  5.84e-01  
 19  +4.3619e-01  +4.3669e-01  5.06e-04  2.00e-07  3.41e-05  5.26e-08  7.78e-07  9.90e-01  
 20  +4.3601e-01  +4.3603e-01  2.14e-05  8.29e-09  1.41e-06  2.24e-09  3.27e-08  9.60e-01  
 21  +4.3600e-01  +4.3600e-01  2.14e-07  8.30e-11  1.41e-08  2.24e-11  3.27e-10  9.90e-01  
 22  +4.3600e-01  +4.3600e-01  2.14e-09  8.30e-13  1.41e-10  2.24e-13  3.27e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 102.0176ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:34 PM: Optimal value: 4.360e-01
(CVXPY) Sep 20 07:58:34 PM: Compilation took 2.354e-02 seconds
(CVXPY) Sep 20 07:58:34 PM: Solver (including time spent in interface) took 1.089e-01 seconds
Iteration: 9, Objective: 0.4360
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:34 PM: Your problem has 2609 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:34 PM: Finished problem compilation (took 2.359e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2609
  constraints   = 5109
  nnz(P)        = 0
  nnz(A)        = 42360
  cones (total) = 1
    : Nonnegative = 1,  numel = 5109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.7956e-01  +5.4341e+02  5.43e+02  4.32e-01  5.42e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3069e-01  +6.0582e+01  6.01e+01  1.63e-01  2.60e+01  1.65e-02  2.73e-01  9.45e-01  
  3  +5.0826e-01  +1.5662e+01  1.52e+01  1.04e-01  1.66e+01  4.56e-05  2.50e-01  3.22e-01  
  4  +5.0080e-01  +1.5850e+00  1.08e+00  1.07e-02  1.77e+00  7.23e-06  1.28e-01  7.66e-01  
  5  +5.0025e-01  +9.3765e-01  4.37e-01  4.20e-03  7.05e-01  1.05e-05  5.78e-02  6.74e-01  
  6  +4.9998e-01  +9.6819e-01  4.68e-01  2.74e-03  4.66e-01  4.10e-05  1.01e-02  9.73e-01  
  7  +4.9667e-01  +9.1108e-01  4.14e-01  3.57e-04  6.14e-02  3.14e-04  1.03e-03  8.99e-01  
  8  +4.8801e-01  +7.4772e-01  2.60e-01  1.76e-04  3.02e-02  1.66e-04  5.28e-04  6.43e-01  
  9  +4.8331e-01  +7.1084e-01  2.28e-01  1.34e-04  2.30e-02  1.25e-04  4.08e-04  3.78e-01  
 10  +4.7576e-01  +6.4446e-01  1.69e-01  9.22e-05  1.57e-02  1.01e-05  2.89e-04  8.47e-01  
 11  +4.6567e-01  +5.8776e-01  1.22e-01  6.26e-05  1.07e-02  7.67e-06  2.05e-04  5.03e-01  
 12  +4.5355e-01  +5.2534e-01  7.18e-02  3.39e-05  5.77e-03  4.73e-06  1.17e-04  5.90e-01  
 13  +4.4404e-01  +4.7777e-01  3.37e-02  1.48e-05  2.52e-03  3.07e-06  5.39e-05  9.55e-01  
 14  +4.4039e-01  +4.6193e-01  2.15e-02  9.23e-06  1.57e-03  2.02e-06  3.44e-05  4.91e-01  
 15  +4.3721e-01  +4.4799e-01  1.08e-02  4.48e-06  7.60e-04  1.12e-06  1.72e-05  9.90e-01  
 16  +4.3463e-01  +4.3779e-01  3.16e-03  1.26e-06  2.15e-04  3.37e-07  5.02e-06  7.57e-01  
 17  +4.3417e-01  +4.3595e-01  1.78e-03  7.13e-07  1.21e-04  1.80e-07  2.85e-06  9.90e-01  
 18  +4.3352e-01  +4.3356e-01  4.24e-05  1.67e-08  2.84e-06  4.15e-09  6.76e-08  9.79e-01  
 19  +4.3350e-01  +4.3350e-01  4.24e-07  1.67e-10  2.84e-08  4.16e-11  6.77e-10  9.90e-01  
 20  +4.3350e-01  +4.3350e-01  4.24e-09  1.67e-12  2.84e-10  4.22e-13  6.87e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 101.0756ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:35 PM: Optimal value: 4.335e-01
(CVXPY) Sep 20 07:58:35 PM: Compilation took 2.359e-02 seconds
(CVXPY) Sep 20 07:58:35 PM: Solver (including time spent in interface) took 1.083e-01 seconds
Iteration: 10, Objective: 0.4335
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:35 PM: Your problem has 2619 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:35 PM: Finished problem compilation (took 2.255e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2619
  constraints   = 5119
  nnz(P)        = 0
  nnz(A)        = 42979
  cones (total) = 1
    : Nonnegative = 1,  numel = 5119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.7951e-01  +5.4336e+02  5.43e+02  4.32e-01  5.41e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3066e-01  +6.0543e+01  6.00e+01  1.63e-01  2.60e+01  1.65e-02  2.72e-01  9.46e-01  
  3  +5.0825e-01  +1.5649e+01  1.51e+01  1.04e-01  1.65e+01  4.56e-05  2.49e-01  3.23e-01  
  4  +5.0081e-01  +1.5946e+00  1.09e+00  1.08e-02  1.79e+00  7.27e-06  1.28e-01  7.63e-01  
  5  +5.0025e-01  +9.4497e-01  4.45e-01  4.27e-03  7.17e-01  1.04e-05  5.86e-02  6.63e-01  
  6  +4.9994e-01  +8.4910e-01  3.49e-01  2.39e-03  4.05e-01  3.38e-05  9.83e-03  8.81e-01  
  7  +4.9624e-01  +8.1440e-01  3.18e-01  2.78e-04  4.77e-02  3.43e-04  8.02e-04  9.22e-01  
  8  +4.8822e-01  +7.3150e-01  2.43e-01  1.55e-04  2.66e-02  2.84e-04  4.62e-04  5.38e-01  
  9  +4.8455e-01  +7.0802e-01  2.23e-01  1.31e-04  2.23e-02  2.33e-04  3.93e-04  2.63e-01  
 10  +4.7880e-01  +6.6232e-01  1.84e-01  1.12e-04  1.92e-02  6.94e-05  3.50e-04  5.01e-01  
 11  +4.6943e-01  +6.1284e-01  1.43e-01  7.71e-05  1.31e-02  5.28e-05  2.49e-04  3.25e-01  
 12  +4.6032e-01  +5.6384e-01  1.04e-01  5.15e-05  8.77e-03  9.80e-06  1.73e-04  8.34e-01  
 13  +4.4560e-01  +4.9356e-01  4.80e-02  2.16e-05  3.67e-03  4.05e-06  7.80e-05  6.89e-01  
 14  +4.4315e-01  +4.8227e-01  3.91e-02  1.68e-05  2.86e-03  3.70e-06  6.17e-05  6.83e-01  
 15  +4.3543e-01  +4.4939e-01  1.40e-02  5.79e-06  9.84e-04  1.29e-06  2.26e-05  6.75e-01  
 16  +4.3261e-01  +4.3743e-01  4.82e-03  1.96e-06  3.33e-04  4.87e-07  7.89e-06  9.90e-01  
 17  +4.3096e-01  +4.3112e-01  1.60e-04  6.44e-08  1.09e-05  1.56e-08  2.65e-07  9.69e-01  
 18  +4.3090e-01  +4.3090e-01  1.60e-06  6.45e-10  1.10e-07  1.57e-10  2.66e-09  9.90e-01  
 19  +4.3090e-01  +4.3090e-01  1.60e-08  6.45e-12  1.10e-09  1.57e-12  2.66e-11  9.90e-01  
 20  +4.3090e-01  +4.3090e-01  1.60e-10  6.46e-14  1.10e-11  1.58e-14  2.68e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 98.8168ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:35 PM: Optimal value: 4.309e-01
(CVXPY) Sep 20 07:58:35 PM: Compilation took 2.255e-02 seconds
(CVXPY) Sep 20 07:58:35 PM: Solver (including time spent in interface) took 1.051e-01 seconds
Iteration: 11, Objective: 0.4309
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:35 PM: Your problem has 2629 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:35 PM: Finished problem compilation (took 2.319e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2629
  constraints   = 5129
  nnz(P)        = 0
  nnz(A)        = 43340
  cones (total) = 1
    : Nonnegative = 1,  numel = 5129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5016e+03  2.50e+03  9.80e-01  8.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.7942e-01  +5.4338e+02  5.43e+02  4.32e-01  5.41e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3060e-01  +6.0490e+01  6.00e+01  1.63e-01  2.58e+01  1.65e-02  2.72e-01  9.47e-01  
  3  +5.0823e-01  +1.5633e+01  1.51e+01  1.04e-01  1.65e+01  4.56e-05  2.49e-01  3.24e-01  
  4  +5.0082e-01  +1.6174e+00  1.12e+00  1.10e-02  1.82e+00  7.36e-06  1.29e-01  7.56e-01  
  5  +5.0029e-01  +9.9697e-01  4.97e-01  4.79e-03  8.01e-01  1.01e-05  6.41e-02  6.08e-01  
  6  +4.9999e-01  +8.6977e-01  3.70e-01  2.70e-03  4.58e-01  2.81e-05  1.18e-02  8.72e-01  
  7  +4.9654e-01  +8.3680e-01  3.40e-01  3.20e-04  5.51e-02  2.97e-04  9.28e-04  9.23e-01  
  8  +4.9151e-01  +7.8148e-01  2.90e-01  2.12e-04  3.63e-02  2.86e-04  6.21e-04  3.98e-01  
  9  +4.8475e-01  +7.2827e-01  2.44e-01  1.45e-04  2.48e-02  2.23e-04  4.35e-04  4.30e-01  
 10  +4.8102e-01  +6.9627e-01  2.15e-01  1.32e-04  2.26e-02  1.36e-04  4.05e-04  2.60e-01  
 11  +4.6792e-01  +6.1873e-01  1.51e-01  7.86e-05  1.34e-02  7.39e-05  2.54e-04  5.12e-01  
 12  +4.5503e-01  +5.4943e-01  9.44e-02  4.51e-05  7.66e-03  1.84e-05  1.55e-04  7.24e-01  
 13  +4.5144e-01  +5.3232e-01  8.09e-02  3.75e-05  6.38e-03  1.45e-05  1.31e-04  2.59e-01  
 14  +4.4299e-01  +4.9139e-01  4.84e-02  2.12e-05  3.60e-03  5.34e-06  7.79e-05  8.47e-01  
 15  +4.3160e-01  +4.4193e-01  1.03e-02  4.32e-06  7.33e-04  9.83e-07  1.73e-05  8.25e-01  
 16  +4.2861e-01  +4.2949e-01  8.85e-04  3.64e-07  6.16e-05  8.28e-08  1.51e-06  9.66e-01  
 17  +4.2830e-01  +4.2831e-01  9.19e-06  3.77e-09  6.39e-07  8.53e-10  1.58e-08  9.90e-01  
 18  +4.2830e-01  +4.2830e-01  9.20e-08  3.78e-11  6.40e-09  8.54e-12  1.58e-10  9.90e-01  
 19  +4.2830e-01  +4.2830e-01  9.21e-10  3.78e-13  6.40e-11  8.59e-14  1.59e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 93.0241ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:35 PM: Optimal value: 4.283e-01
(CVXPY) Sep 20 07:58:35 PM: Compilation took 2.319e-02 seconds
(CVXPY) Sep 20 07:58:35 PM: Solver (including time spent in interface) took 9.915e-02 seconds
Iteration: 12, Objective: 0.4283
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:35 PM: Your problem has 2639 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:35 PM: Finished problem compilation (took 2.357e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2639
  constraints   = 5139
  nnz(P)        = 0
  nnz(A)        = 43839
  cones (total) = 1
    : Nonnegative = 1,  numel = 5139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5016e+03  2.50e+03  9.80e-01  8.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.7927e-01  +5.4336e+02  5.43e+02  4.32e-01  5.40e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3050e-01  +6.0385e+01  5.99e+01  1.63e-01  2.57e+01  1.66e-02  2.72e-01  9.48e-01  
  3  +5.0821e-01  +1.5605e+01  1.51e+01  1.04e-01  1.64e+01  4.57e-05  2.48e-01  3.27e-01  
  4  +5.0082e-01  +1.6237e+00  1.12e+00  1.11e-02  1.83e+00  7.41e-06  1.28e-01  7.55e-01  
  5  +5.0026e-01  +9.8120e-01  4.81e-01  4.63e-03  7.74e-01  1.08e-05  5.88e-02  6.68e-01  
  6  +4.9984e-01  +8.7598e-01  3.76e-01  2.27e-03  3.86e-01  4.09e-05  8.51e-03  9.01e-01  
  7  +4.9533e-01  +8.3111e-01  3.36e-01  2.73e-04  4.69e-02  3.63e-04  7.84e-04  9.09e-01  
  8  +4.9016e-01  +7.7913e-01  2.89e-01  2.02e-04  3.46e-02  3.00e-04  5.90e-04  3.39e-01  
  9  +4.8358e-01  +7.2840e-01  2.45e-01  1.44e-04  2.46e-02  2.25e-04  4.31e-04  4.10e-01  
 10  +4.8222e-01  +7.1647e-01  2.34e-01  1.42e-04  2.42e-02  1.94e-04  4.27e-04  6.16e-02  
 11  +4.6657e-01  +6.1350e-01  1.47e-01  7.68e-05  1.31e-02  2.53e-05  2.47e-04  7.99e-01  
 12  +4.5949e-01  +5.7608e-01  1.17e-01  5.88e-05  1.00e-02  1.33e-05  1.95e-04  5.93e-01  
 13  +4.5075e-01  +5.3316e-01  8.24e-02  3.87e-05  6.57e-03  8.37e-06  1.34e-04  5.68e-01  
 14  +4.4890e-01  +5.2387e-01  7.50e-02  3.49e-05  5.94e-03  7.41e-06  1.22e-04  3.08e-01  
 15  +4.3941e-01  +4.8028e-01  4.09e-02  1.81e-05  3.07e-03  3.88e-06  6.68e-05  5.10e-01  
 16  +4.3325e-01  +4.5177e-01  1.85e-02  7.79e-06  1.32e-03  1.85e-06  3.01e-05  9.90e-01  
 17  +4.2909e-01  +4.3483e-01  5.74e-03  2.37e-06  4.02e-04  5.65e-07  9.60e-06  6.96e-01  
 18  +4.2726e-01  +4.2742e-01  1.66e-04  6.79e-08  1.15e-05  1.57e-08  2.82e-07  9.84e-01  
 19  +4.2720e-01  +4.2720e-01  1.67e-06  6.80e-10  1.15e-07  1.58e-10  2.83e-09  9.90e-01  
 20  +4.2720e-01  +4.2720e-01  1.67e-08  6.81e-12  1.15e-09  1.58e-12  2.83e-11  9.90e-01  
 21  +4.2720e-01  +4.2720e-01  1.67e-10  6.81e-14  1.15e-11  1.59e-14  2.85e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 96.9981ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:35 PM: Optimal value: 4.272e-01
(CVXPY) Sep 20 07:58:35 PM: Compilation took 2.357e-02 seconds
(CVXPY) Sep 20 07:58:35 PM: Solver (including time spent in interface) took 1.023e-01 seconds
Iteration: 13, Objective: 0.4272
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:36 PM: Your problem has 2649 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:36 PM: Finished problem compilation (took 2.320e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2649
  constraints   = 5149
  nnz(P)        = 0
  nnz(A)        = 44470
  cones (total) = 1
    : Nonnegative = 1,  numel = 5149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5015e+03  2.50e+03  9.80e-01  8.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.7913e-01  +5.4339e+02  5.43e+02  4.33e-01  5.39e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3038e-01  +6.0267e+01  5.97e+01  1.63e-01  2.56e+01  1.66e-02  2.71e-01  9.50e-01  
  3  +5.0819e-01  +1.5573e+01  1.51e+01  1.04e-01  1.64e+01  4.59e-05  2.47e-01  3.31e-01  
  4  +5.0083e-01  +1.6337e+00  1.13e+00  1.12e-02  1.85e+00  7.48e-06  1.28e-01  7.54e-01  
  5  +5.0031e-01  +1.0460e+00  5.46e-01  5.26e-03  8.80e-01  1.08e-05  6.35e-02  6.21e-01  
  6  +4.9994e-01  +8.9766e-01  3.98e-01  2.71e-03  4.59e-01  3.19e-05  1.09e-02  8.76e-01  
  7  +4.9598e-01  +8.5977e-01  3.64e-01  3.21e-04  5.53e-02  3.14e-04  9.20e-04  9.17e-01  
  8  +4.8935e-01  +7.8881e-01  2.99e-01  2.02e-04  3.47e-02  2.86e-04  5.88e-04  4.47e-01  
  9  +4.8416e-01  +7.4697e-01  2.63e-01  1.60e-04  2.75e-02  2.22e-04  4.74e-04  3.07e-01  
 10  +4.8065e-01  +7.1704e-01  2.36e-01  1.48e-04  2.53e-02  1.50e-04  4.47e-04  2.06e-01  
 11  +4.6375e-01  +6.1203e-01  1.48e-01  7.69e-05  1.31e-02  7.88e-05  2.47e-04  5.38e-01  
 12  +4.5646e-01  +5.7104e-01  1.15e-01  5.71e-05  9.72e-03  3.36e-05  1.89e-04  5.67e-01  
 13  +4.4854e-01  +5.2939e-01  8.09e-02  3.83e-05  6.52e-03  1.71e-05  1.31e-04  5.51e-01  
 14  +4.4344e-01  +5.0127e-01  5.78e-02  2.61e-05  4.44e-03  5.73e-06  9.16e-05  9.87e-01  
 15  +4.3384e-01  +4.5757e-01  2.37e-02  1.03e-05  1.75e-03  2.32e-06  3.83e-05  6.73e-01  
 16  +4.3243e-01  +4.5142e-01  1.90e-02  8.14e-06  1.38e-03  1.88e-06  3.06e-05  3.32e-01  
 17  +4.2799e-01  +4.3255e-01  4.56e-03  1.89e-06  3.20e-04  4.62e-07  7.42e-06  8.60e-01  
 18  +4.2665e-01  +4.2737e-01  7.17e-04  2.88e-07  4.90e-05  7.16e-08  1.16e-06  9.24e-01  
 19  +4.2640e-01  +4.2641e-01  9.42e-06  3.77e-09  6.41e-07  9.39e-10  1.53e-08  9.87e-01  
 20  +4.2640e-01  +4.2640e-01  9.42e-08  3.77e-11  6.41e-09  9.39e-12  1.53e-10  9.90e-01  
 21  +4.2640e-01  +4.2640e-01  9.42e-10  3.77e-13  6.42e-11  9.49e-14  1.55e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 98.2207ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:36 PM: Optimal value: 4.264e-01
(CVXPY) Sep 20 07:58:36 PM: Compilation took 2.320e-02 seconds
(CVXPY) Sep 20 07:58:36 PM: Solver (including time spent in interface) took 1.046e-01 seconds
Iteration: 14, Objective: 0.4264
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:36 PM: Your problem has 2659 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:36 PM: Finished problem compilation (took 2.308e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2659
  constraints   = 5159
  nnz(P)        = 0
  nnz(A)        = 45121
  cones (total) = 1
    : Nonnegative = 1,  numel = 5159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5015e+03  2.50e+03  9.80e-01  8.39e+01  1.00e+00  1.00e+00   ------   
  1  +5.7890e-01  +5.4351e+02  5.43e+02  4.33e-01  5.39e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3025e-01  +6.0153e+01  5.96e+01  1.62e-01  2.55e+01  1.66e-02  2.71e-01  9.51e-01  
  3  +5.0817e-01  +1.5549e+01  1.50e+01  1.03e-01  1.63e+01  4.60e-05  2.46e-01  3.34e-01  
  4  +5.0086e-01  +1.6920e+00  1.19e+00  1.18e-02  1.95e+00  7.67e-06  1.30e-01  7.35e-01  
  5  +5.0029e-01  +1.0495e+00  5.49e-01  5.29e-03  8.85e-01  1.09e-05  6.29e-02  6.33e-01  
  6  +4.9983e-01  +9.2727e-01  4.27e-01  2.65e-03  4.51e-01  3.73e-05  1.00e-02  8.84e-01  
  7  +4.9479e-01  +8.7171e-01  3.77e-01  3.13e-04  5.39e-02  3.35e-04  8.96e-04  9.12e-01  
  8  +4.8798e-01  +8.0103e-01  3.13e-01  2.10e-04  3.61e-02  2.77e-04  6.13e-04  4.14e-01  
  9  +4.8322e-01  +7.6214e-01  2.79e-01  1.71e-04  2.93e-02  2.17e-04  5.07e-04  2.87e-01  
 10  +4.7997e-01  +7.3277e-01  2.53e-01  1.58e-04  2.71e-02  1.51e-04  4.77e-04  2.04e-01  
 11  +4.6303e-01  +6.2087e-01  1.58e-01  8.30e-05  1.41e-02  7.73e-05  2.66e-04  5.32e-01  
 12  +4.5844e-01  +5.9492e-01  1.36e-01  6.96e-05  1.18e-02  5.88e-05  2.28e-04  2.43e-01  
 13  +4.4940e-01  +5.4091e-01  9.15e-02  4.42e-05  7.51e-03  1.24e-05  1.50e-04  8.41e-01  
 14  +4.4383e-01  +5.1283e-01  6.90e-02  3.23e-05  5.49e-03  8.64e-06  1.13e-04  4.00e-01  
 15  +4.3575e-01  +4.7280e-01  3.70e-02  1.68e-05  2.85e-03  4.27e-06  6.09e-05  6.08e-01  
 16  +4.3216e-01  +4.5583e-01  2.37e-02  1.05e-05  1.78e-03  2.68e-06  3.89e-05  4.57e-01  
 17  +4.2826e-01  +4.3730e-01  9.04e-03  3.92e-06  6.65e-04  9.19e-07  1.49e-05  9.90e-01  
 18  +4.2629e-01  +4.2918e-01  2.90e-03  1.24e-06  2.10e-04  2.93e-07  4.81e-06  7.58e-01  
 19  +4.2599e-01  +4.2791e-01  1.92e-03  8.12e-07  1.38e-04  1.89e-07  3.18e-06  9.12e-01  
 20  +4.2563e-01  +4.2653e-01  9.00e-04  3.72e-07  6.33e-05  8.88e-08  1.48e-06  5.62e-01  
 21  +4.2542e-01  +4.2576e-01  3.32e-04  1.36e-07  2.30e-05  3.24e-08  5.48e-07  9.90e-01  
 22  +4.2530e-01  +4.2531e-01  6.91e-06  2.78e-09  4.73e-07  6.71e-10  1.14e-08  9.83e-01  
 23  +4.2530e-01  +4.2530e-01  6.91e-08  2.78e-11  4.73e-09  6.71e-12  1.14e-10  9.90e-01  
 24  +4.2530e-01  +4.2530e-01  6.93e-10  2.79e-13  4.74e-11  7.44e-14  1.26e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 107.8978ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:36 PM: Optimal value: 4.253e-01
(CVXPY) Sep 20 07:58:36 PM: Compilation took 2.308e-02 seconds
(CVXPY) Sep 20 07:58:36 PM: Solver (including time spent in interface) took 1.141e-01 seconds
Iteration: 15, Objective: 0.4253
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:36 PM: Your problem has 2669 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:36 PM: Finished problem compilation (took 2.260e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2669
  constraints   = 5169
  nnz(P)        = 0
  nnz(A)        = 45476
  cones (total) = 1
    : Nonnegative = 1,  numel = 5169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5015e+03  2.50e+03  9.80e-01  8.39e+01  1.00e+00  1.00e+00   ------   
  1  +5.7866e-01  +5.4356e+02  5.43e+02  4.33e-01  5.38e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3011e-01  +6.0024e+01  5.95e+01  1.62e-01  2.54e+01  1.67e-02  2.70e-01  9.53e-01  
  3  +5.0814e-01  +1.5517e+01  1.50e+01  1.03e-01  1.62e+01  4.62e-05  2.45e-01  3.38e-01  
  4  +5.0087e-01  +1.7190e+00  1.22e+00  1.20e-02  1.99e+00  7.80e-06  1.30e-01  7.28e-01  
  5  +5.0029e-01  +1.0589e+00  5.59e-01  5.38e-03  8.98e-01  1.12e-05  6.08e-02  6.46e-01  
  6  +4.9959e-01  +9.5287e-01  4.53e-01  2.21e-03  3.77e-01  5.21e-05  7.47e-03  9.19e-01  
  7  +4.9325e-01  +8.8144e-01  3.88e-01  2.84e-04  4.90e-02  3.77e-04  8.09e-04  8.92e-01  
  8  +4.8891e-01  +8.4288e-01  3.54e-01  2.31e-04  3.97e-02  3.36e-04  6.63e-04  2.49e-01  
  9  +4.8430e-01  +7.9834e-01  3.14e-01  1.95e-04  3.34e-02  2.44e-04  5.68e-04  2.77e-01  
 10  +4.7232e-01  +6.8318e-01  2.11e-01  1.33e-04  2.27e-02  2.25e-06  4.15e-04  7.70e-01  
 11  +4.5634e-01  +5.8770e-01  1.31e-01  7.07e-05  1.20e-02  2.52e-06  2.33e-04  5.07e-01  
 12  +4.5216e-01  +5.6523e-01  1.13e-01  5.84e-05  9.92e-03  3.09e-06  1.96e-04  2.59e-01  
 13  +4.4543e-01  +5.2758e-01  8.21e-02  3.94e-05  6.68e-03  6.44e-06  1.35e-04  8.60e-01  
 14  +4.4316e-01  +5.1553e-01  7.24e-02  3.45e-05  5.85e-03  6.12e-06  1.19e-04  4.42e-01  
 15  +4.3423e-01  +4.7174e-01  3.75e-02  1.71e-05  2.90e-03  3.32e-06  6.18e-05  6.86e-01  
 16  +4.2863e-01  +4.4524e-01  1.66e-02  7.41e-06  1.26e-03  1.49e-06  2.77e-05  6.16e-01  
 17  +4.2796e-01  +4.4141e-01  1.34e-02  5.97e-06  1.01e-03  1.27e-06  2.24e-05  6.15e-01  
 18  +4.2587e-01  +4.3225e-01  6.39e-03  2.80e-06  4.75e-04  6.04e-07  1.07e-05  5.79e-01  
 19  +4.2465e-01  +4.2697e-01  2.32e-03  1.01e-06  1.71e-04  2.20e-07  3.90e-06  6.58e-01  
 20  +4.2442e-01  +4.2595e-01  1.53e-03  6.38e-07  1.08e-04  1.49e-07  2.53e-06  8.00e-01  
 21  +4.2406e-01  +4.2450e-01  4.45e-04  1.83e-07  3.10e-05  4.33e-08  7.35e-07  8.76e-01  
 22  +4.2392e-01  +4.2397e-01  5.38e-05  2.17e-08  3.68e-06  5.29e-09  8.84e-08  8.87e-01  
 23  +4.2390e-01  +4.2391e-01  3.84e-06  1.55e-09  2.62e-07  3.76e-10  6.31e-09  9.82e-01  
 24  +4.2390e-01  +4.2390e-01  3.87e-08  1.56e-11  2.64e-09  3.78e-12  6.36e-11  9.90e-01  
 25  +4.2390e-01  +4.2390e-01  3.89e-10  1.56e-13  2.65e-11  4.46e-14  7.44e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 109.5634ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:36 PM: Optimal value: 4.239e-01
(CVXPY) Sep 20 07:58:36 PM: Compilation took 2.260e-02 seconds
(CVXPY) Sep 20 07:58:36 PM: Solver (including time spent in interface) took 1.159e-01 seconds
Iteration: 16, Objective: 0.4239
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:36 PM: Your problem has 2679 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:36 PM: Finished problem compilation (took 2.333e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2679
  constraints   = 5179
  nnz(P)        = 0
  nnz(A)        = 46100
  cones (total) = 1
    : Nonnegative = 1,  numel = 5179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5015e+03  2.50e+03  9.80e-01  8.38e+01  1.00e+00  1.00e+00   ------   
  1  +5.7856e-01  +5.4357e+02  5.43e+02  4.34e-01  5.37e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3005e-01  +5.9963e+01  5.94e+01  1.62e-01  2.53e+01  1.67e-02  2.69e-01  9.54e-01  
  3  +5.0813e-01  +1.5501e+01  1.50e+01  1.03e-01  1.62e+01  4.63e-05  2.45e-01  3.40e-01  
  4  +5.0087e-01  +1.7165e+00  1.22e+00  1.20e-02  1.98e+00  7.81e-06  1.29e-01  7.30e-01  
  5  +5.0035e-01  +1.1316e+00  6.31e-01  6.10e-03  1.02e+00  1.10e-05  6.67e-02  5.81e-01  
  6  +4.9990e-01  +9.8972e-01  4.90e-01  3.16e-03  5.35e-01  3.34e-05  1.20e-02  8.69e-01  
  7  +4.9521e-01  +9.3026e-01  4.35e-01  3.84e-04  6.61e-02  2.93e-04  1.09e-03  9.11e-01  
  8  +4.8764e-01  +8.3147e-01  3.44e-01  2.39e-04  4.11e-02  2.29e-04  6.95e-04  4.77e-01  
  9  +4.8300e-01  +7.8357e-01  3.01e-01  1.97e-04  3.38e-02  1.55e-04  5.83e-04  3.37e-01  
 10  +4.6591e-01  +6.4421e-01  1.78e-01  1.04e-04  1.77e-02  6.03e-06  3.32e-04  8.57e-01  
 11  +4.5455e-01  +5.8272e-01  1.28e-01  6.80e-05  1.15e-02  6.45e-06  2.26e-04  5.69e-01  
 12  +4.4364e-01  +5.2480e-01  8.12e-02  4.03e-05  6.82e-03  4.34e-06  1.40e-04  4.59e-01  
 13  +4.4129e-01  +5.1292e-01  7.16e-02  3.45e-05  5.84e-03  4.31e-06  1.21e-04  2.75e-01  
 14  +4.3749e-01  +4.9199e-01  5.45e-02  2.51e-05  4.25e-03  4.85e-06  8.89e-05  8.54e-01  
 15  +4.3068e-01  +4.6025e-01  2.96e-02  1.32e-05  2.23e-03  2.67e-06  4.84e-05  5.37e-01  
 16  +4.2642e-01  +4.4126e-01  1.48e-02  6.36e-06  1.08e-03  1.39e-06  2.41e-05  5.95e-01  
 17  +4.2326e-01  +4.2825e-01  4.99e-03  2.03e-06  3.43e-04  4.78e-07  8.04e-06  7.42e-01  
 18  +4.2174e-01  +4.2211e-01  3.77e-04  1.50e-07  2.54e-05  3.73e-08  6.08e-07  9.85e-01  
 19  +4.2160e-01  +4.2161e-01  4.10e-06  1.63e-09  2.75e-07  4.05e-10  6.60e-09  9.90e-01  
 20  +4.2160e-01  +4.2160e-01  4.10e-08  1.63e-11  2.75e-09  4.05e-12  6.61e-11  9.90e-01  
 21  +4.2160e-01  +4.2160e-01  4.10e-10  1.63e-13  2.75e-11  4.10e-14  6.69e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 101.2515ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:37 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:37 PM: Optimal value: 4.216e-01
(CVXPY) Sep 20 07:58:37 PM: Compilation took 2.333e-02 seconds
(CVXPY) Sep 20 07:58:37 PM: Solver (including time spent in interface) took 1.070e-01 seconds
Iteration: 17, Objective: 0.4216
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:37 PM: Your problem has 2689 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:37 PM: Finished problem compilation (took 2.526e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2689
  constraints   = 5189
  nnz(P)        = 0
  nnz(A)        = 46603
  cones (total) = 1
    : Nonnegative = 1,  numel = 5189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.80e-01  8.38e+01  1.00e+00  1.00e+00   ------   
  1  +5.7839e-01  +5.4366e+02  5.43e+02  4.34e-01  5.37e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2994e-01  +5.9856e+01  5.93e+01  1.61e-01  2.52e+01  1.67e-02  2.69e-01  9.56e-01  
  3  +5.0810e-01  +1.5474e+01  1.50e+01  1.03e-01  1.61e+01  4.65e-05  2.44e-01  3.44e-01  
  4  +5.0089e-01  +1.7602e+00  1.26e+00  1.25e-02  2.06e+00  7.98e-06  1.30e-01  7.18e-01  
  5  +5.0030e-01  +1.1008e+00  6.01e-01  5.79e-03  9.66e-01  1.13e-05  6.19e-02  6.30e-01  
  6  +4.9964e-01  +1.0436e+00  5.44e-01  2.73e-03  4.65e-01  4.90e-05  9.22e-03  9.05e-01  
  7  +4.9332e-01  +9.5271e-01  4.59e-01  3.52e-04  6.06e-02  3.43e-04  9.99e-04  8.92e-01  
  8  +4.8681e-01  +8.7872e-01  3.92e-01  2.52e-04  4.33e-02  2.70e-04  7.28e-04  3.92e-01  
  9  +4.7976e-01  +8.0639e-01  3.27e-01  1.93e-04  3.30e-02  1.78e-04  5.71e-04  3.68e-01  
 10  +4.6139e-01  +6.4884e-01  1.87e-01  1.06e-04  1.79e-02  3.73e-05  3.40e-04  6.40e-01  
 11  +4.5086e-01  +5.8482e-01  1.34e-01  7.07e-05  1.20e-02  2.33e-05  2.39e-04  3.90e-01  
 12  +4.4362e-01  +5.4082e-01  9.72e-02  4.84e-05  8.20e-03  1.22e-05  1.68e-04  6.56e-01  
 13  +4.3427e-01  +4.8953e-01  5.53e-02  2.59e-05  4.38e-03  5.41e-06  9.40e-05  8.82e-01  
 14  +4.2535e-01  +4.4679e-01  2.14e-02  9.57e-06  1.62e-03  2.09e-06  3.68e-05  6.95e-01  
 15  +4.2091e-01  +4.2822e-01  7.31e-03  3.06e-06  5.16e-04  7.14e-07  1.24e-05  7.73e-01  
 16  +4.1882e-01  +4.1944e-01  6.22e-04  2.55e-07  4.31e-05  5.89e-08  1.06e-06  9.90e-01  
 17  +4.1860e-01  +4.1861e-01  7.18e-06  2.94e-09  4.96e-07  6.78e-10  1.23e-08  9.89e-01  
 18  +4.1860e-01  +4.1860e-01  7.19e-08  2.94e-11  4.97e-09  6.79e-12  1.23e-10  9.90e-01  
 19  +4.1860e-01  +4.1860e-01  7.19e-10  2.94e-13  4.97e-11  6.85e-14  1.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 94.2564ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:37 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:37 PM: Optimal value: 4.186e-01
(CVXPY) Sep 20 07:58:37 PM: Compilation took 2.526e-02 seconds
(CVXPY) Sep 20 07:58:37 PM: Solver (including time spent in interface) took 1.006e-01 seconds
Iteration: 18, Objective: 0.4186
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:37 PM: Your problem has 2699 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:37 PM: Finished problem compilation (took 2.709e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2699
  constraints   = 5199
  nnz(P)        = 0
  nnz(A)        = 47091
  cones (total) = 1
    : Nonnegative = 1,  numel = 5199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.38e+01  1.00e+00  1.00e+00   ------   
  1  +5.7824e-01  +5.4368e+02  5.43e+02  4.34e-01  5.36e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.2984e-01  +5.9757e+01  5.92e+01  1.61e-01  2.51e+01  1.67e-02  2.68e-01  9.57e-01  
  3  +5.0809e-01  +1.5449e+01  1.49e+01  1.03e-01  1.61e+01  4.66e-05  2.43e-01  3.47e-01  
  4  +5.0089e-01  +1.7638e+00  1.26e+00  1.25e-02  2.06e+00  8.03e-06  1.29e-01  7.19e-01  
  5  +5.0027e-01  +1.0743e+00  5.74e-01  5.52e-03  9.20e-01  1.20e-05  5.58e-02  6.83e-01  
  6  +4.9934e-01  +1.0766e+00  5.77e-01  2.31e-03  3.94e-01  6.74e-05  7.33e-03  9.14e-01  
  7  +4.9338e-01  +9.8521e-01  4.92e-01  4.20e-04  7.22e-02  3.17e-04  1.19e-03  8.38e-01  
  8  +4.8700e-01  +9.0154e-01  4.15e-01  2.90e-04  4.98e-02  2.71e-04  8.38e-04  3.78e-01  
  9  +4.8203e-01  +8.5087e-01  3.69e-01  2.31e-04  3.96e-02  2.20e-04  6.79e-04  2.92e-01  
 10  +4.7702e-01  +7.7271e-01  2.96e-01  1.97e-04  3.36e-02  6.63e-05  5.96e-04  5.08e-01  
 11  +4.5411e-01  +6.1082e-01  1.57e-01  8.26e-05  1.40e-02  3.12e-05  2.70e-04  6.13e-01  
 12  +4.4791e-01  +5.7625e-01  1.28e-01  6.50e-05  1.10e-02  2.31e-05  2.19e-04  3.09e-01  
 13  +4.3935e-01  +5.2692e-01  8.76e-02  4.19e-05  7.09e-03  9.16e-06  1.47e-04  8.73e-01  
 14  +4.2494e-01  +4.5490e-01  3.00e-02  1.35e-05  2.28e-03  2.89e-06  5.15e-05  7.43e-01  
 15  +4.2158e-01  +4.4027e-01  1.87e-02  8.05e-06  1.36e-03  1.81e-06  3.18e-05  5.75e-01  
 16  +4.1856e-01  +4.2667e-01  8.11e-03  3.40e-06  5.75e-04  7.81e-07  1.39e-05  9.90e-01  
 17  +4.1609e-01  +4.1696e-01  8.65e-04  3.56e-07  6.02e-05  8.22e-08  1.50e-06  8.97e-01  
 18  +4.1580e-01  +4.1581e-01  1.04e-05  4.26e-09  7.20e-07  9.80e-10  1.80e-08  9.90e-01  
 19  +4.1580e-01  +4.1580e-01  1.04e-07  4.26e-11  7.19e-09  9.80e-12  1.80e-10  9.90e-01  
 20  +4.1580e-01  +4.1580e-01  1.04e-09  4.26e-13  7.20e-11  9.86e-14  1.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 102.7398ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:37 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:37 PM: Optimal value: 4.158e-01
(CVXPY) Sep 20 07:58:37 PM: Compilation took 2.709e-02 seconds
(CVXPY) Sep 20 07:58:37 PM: Solver (including time spent in interface) took 1.092e-01 seconds
Iteration: 19, Objective: 0.4158
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:37 PM: Your problem has 2709 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:37 PM: Finished problem compilation (took 2.808e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2709
  constraints   = 5209
  nnz(P)        = 0
  nnz(A)        = 47482
  cones (total) = 1
    : Nonnegative = 1,  numel = 5209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.37e+01  1.00e+00  1.00e+00   ------   
  1  +5.7802e-01  +5.4372e+02  5.43e+02  4.34e-01  5.35e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2971e-01  +5.9628e+01  5.91e+01  1.61e-01  2.50e+01  1.67e-02  2.68e-01  9.59e-01  
  3  +5.0806e-01  +1.5422e+01  1.49e+01  1.02e-01  1.60e+01  4.68e-05  2.42e-01  3.51e-01  
  4  +5.0088e-01  +1.7552e+00  1.25e+00  1.24e-02  2.05e+00  8.05e-06  1.28e-01  7.24e-01  
  5  +5.0027e-01  +1.0901e+00  5.90e-01  5.67e-03  9.44e-01  1.25e-05  5.35e-02  6.92e-01  
  6  +4.9888e-01  +1.1071e+00  6.08e-01  1.74e-03  2.98e-01  9.72e-05  5.20e-03  9.46e-01  
  7  +4.9297e-01  +1.0081e+00  5.15e-01  4.43e-04  7.62e-02  3.03e-04  1.25e-03  7.63e-01  
  8  +4.8797e-01  +9.3889e-01  4.51e-01  3.34e-04  5.73e-02  2.66e-04  9.56e-04  3.01e-01  
  9  +4.8541e-01  +8.6738e-01  3.82e-01  2.63e-04  4.50e-02  9.90e-05  7.62e-04  6.18e-01  
 10  +4.8297e-01  +8.2921e-01  3.46e-01  2.49e-04  4.26e-02  6.43e-05  7.32e-04  2.55e-01  
 11  +4.7678e-01  +7.8102e-01  3.04e-01  2.00e-04  3.42e-02  5.37e-05  6.02e-04  2.50e-01  
 12  +4.7311e-01  +7.4962e-01  2.77e-01  1.77e-04  3.02e-02  3.90e-05  5.41e-04  3.14e-01  
 13  +4.5018e-01  +5.9740e-01  1.47e-01  7.76e-05  1.32e-02  1.79e-05  2.58e-04  5.94e-01  
 14  +4.4457e-01  +5.6627e-01  1.22e-01  6.22e-05  1.05e-02  1.41e-05  2.12e-04  2.92e-01  
 15  +4.3662e-01  +5.2288e-01  8.63e-02  4.23e-05  7.15e-03  9.25e-06  1.50e-04  4.66e-01  
 16  +4.2578e-01  +4.6663e-01  4.09e-02  1.89e-05  3.19e-03  4.06e-06  7.11e-05  7.31e-01  
 17  +4.1999e-01  +4.4023e-01  2.02e-02  8.87e-06  1.50e-03  2.01e-06  3.52e-05  6.29e-01  
 18  +4.1765e-01  +4.2899e-01  1.13e-02  4.87e-06  8.22e-04  1.08e-06  1.98e-05  9.90e-01  
 19  +4.1433e-01  +4.1561e-01  1.29e-03  5.40e-07  9.12e-05  1.19e-07  2.29e-06  8.99e-01  
 20  +4.1391e-01  +4.1393e-01  2.07e-05  8.64e-09  1.46e-06  1.89e-09  3.69e-08  9.90e-01  
 21  +4.1390e-01  +4.1390e-01  2.07e-07  8.64e-11  1.46e-08  1.89e-11  3.69e-10  9.90e-01  
 22  +4.1390e-01  +4.1390e-01  2.07e-09  8.64e-13  1.46e-10  1.91e-13  3.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 113.6374ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:37 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:37 PM: Optimal value: 4.139e-01
(CVXPY) Sep 20 07:58:37 PM: Compilation took 2.808e-02 seconds
(CVXPY) Sep 20 07:58:37 PM: Solver (including time spent in interface) took 1.208e-01 seconds
Iteration: 20, Objective: 0.4139
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:38 PM: Your problem has 2719 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:38 PM: Finished problem compilation (took 2.816e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2719
  constraints   = 5219
  nnz(P)        = 0
  nnz(A)        = 47802
  cones (total) = 1
    : Nonnegative = 1,  numel = 5219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.37e+01  1.00e+00  1.00e+00   ------   
  1  +5.7791e-01  +5.4380e+02  5.43e+02  4.35e-01  5.34e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2964e-01  +5.9569e+01  5.90e+01  1.60e-01  2.49e+01  1.68e-02  2.67e-01  9.60e-01  
  3  +5.0805e-01  +1.5407e+01  1.49e+01  1.02e-01  1.60e+01  4.69e-05  2.41e-01  3.53e-01  
  4  +5.0089e-01  +1.7594e+00  1.26e+00  1.25e-02  2.05e+00  8.08e-06  1.27e-01  7.24e-01  
  5  +5.0029e-01  +1.1136e+00  6.13e-01  5.89e-03  9.81e-01  1.28e-05  5.41e-02  6.90e-01  
  6  +4.9902e-01  +1.1025e+00  6.04e-01  1.88e-03  3.22e-01  8.82e-05  5.66e-03  9.34e-01  
  7  +4.9299e-01  +1.0091e+00  5.16e-01  4.36e-04  7.49e-02  3.11e-04  1.23e-03  7.86e-01  
  8  +4.8703e-01  +9.2677e-01  4.40e-01  3.14e-04  5.38e-02  2.61e-04  9.01e-04  3.51e-01  
  9  +4.8276e-01  +8.6536e-01  3.83e-01  2.54e-04  4.35e-02  1.61e-04  7.42e-04  4.01e-01  
 10  +4.7957e-01  +8.1240e-01  3.33e-01  2.34e-04  3.99e-02  7.79e-05  6.98e-04  3.66e-01  
 11  +4.6896e-01  +7.3497e-01  2.66e-01  1.63e-04  2.78e-02  5.94e-05  5.06e-04  3.38e-01  
 12  +4.5260e-01  +6.1998e-01  1.67e-01  9.17e-05  1.55e-02  1.75e-05  3.04e-04  7.35e-01  
 13  +4.4588e-01  +5.8145e-01  1.36e-01  7.09e-05  1.20e-02  1.34e-05  2.42e-04  3.44e-01  
 14  +4.3686e-01  +5.3092e-01  9.41e-02  4.61e-05  7.79e-03  8.55e-06  1.64e-04  6.58e-01  
 15  +4.2916e-01  +4.9150e-01  6.23e-02  2.94e-05  4.95e-03  5.59e-06  1.09e-04  5.08e-01  
 16  +4.1836e-01  +4.3893e-01  2.06e-02  9.14e-06  1.54e-03  1.82e-06  3.65e-05  8.04e-01  
 17  +4.1428e-01  +4.2140e-01  7.12e-03  3.06e-06  5.16e-04  6.31e-07  1.28e-05  7.18e-01  
 18  +4.1234e-01  +4.1313e-01  7.84e-04  3.32e-07  5.61e-05  6.87e-08  1.43e-06  8.92e-01  
 19  +4.1210e-01  +4.1211e-01  1.00e-05  4.25e-09  7.17e-07  8.80e-10  1.83e-08  9.90e-01  
 20  +4.1210e-01  +4.1210e-01  1.00e-07  4.25e-11  7.17e-09  8.80e-12  1.83e-10  9.90e-01  
 21  +4.1210e-01  +4.1210e-01  1.00e-09  4.25e-13  7.17e-11  8.85e-14  1.84e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 108.5158ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:38 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:38 PM: Optimal value: 4.121e-01
(CVXPY) Sep 20 07:58:38 PM: Compilation took 2.816e-02 seconds
(CVXPY) Sep 20 07:58:38 PM: Solver (including time spent in interface) took 1.152e-01 seconds
Iteration: 21, Objective: 0.4121
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:38 PM: Your problem has 2729 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:38 PM: Finished problem compilation (took 2.670e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2729
  constraints   = 5229
  nnz(P)        = 0
  nnz(A)        = 48093
  cones (total) = 1
    : Nonnegative = 1,  numel = 5229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5017e+03  2.50e+03  9.80e-01  8.36e+01  1.00e+00  1.00e+00   ------   
  1  +5.7775e-01  +5.4382e+02  5.43e+02  4.35e-01  5.34e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2952e-01  +5.9448e+01  5.89e+01  1.60e-01  2.48e+01  1.68e-02  2.67e-01  9.61e-01  
  3  +5.0803e-01  +1.5376e+01  1.49e+01  1.02e-01  1.59e+01  4.70e-05  2.41e-01  3.57e-01  
  4  +5.0089e-01  +1.7603e+00  1.26e+00  1.25e-02  2.06e+00  8.13e-06  1.26e-01  7.26e-01  
  5  +5.0032e-01  +1.1522e+00  6.52e-01  6.27e-03  1.04e+00  1.27e-05  5.54e-02  6.61e-01  
  6  +4.9935e-01  +1.1130e+00  6.14e-01  2.32e-03  3.97e-01  6.81e-05  7.13e-03  9.06e-01  
  7  +4.9360e-01  +1.0280e+00  5.34e-01  4.54e-04  7.81e-02  3.03e-04  1.27e-03  8.24e-01  
  8  +4.8860e-01  +9.6021e-01  4.72e-01  3.44e-04  5.91e-02  2.72e-04  9.74e-04  2.91e-01  
  9  +4.8552e-01  +8.9769e-01  4.12e-01  2.88e-04  4.93e-02  1.48e-04  8.25e-04  4.39e-01  
 10  +4.7608e-01  +7.7593e-01  3.00e-01  2.05e-04  3.50e-02  1.80e-05  6.17e-04  7.73e-01  
 11  +4.4848e-01  +5.9348e-01  1.45e-01  7.59e-05  1.28e-02  9.07e-06  2.51e-04  6.58e-01  
 12  +4.4200e-01  +5.6160e-01  1.20e-01  6.02e-05  1.02e-02  7.96e-06  2.05e-04  3.06e-01  
 13  +4.3635e-01  +5.3432e-01  9.80e-02  4.77e-05  8.05e-03  7.33e-06  1.67e-04  4.48e-01  
 14  +4.2507e-01  +4.7893e-01  5.39e-02  2.50e-05  4.22e-03  4.05e-06  9.42e-05  5.31e-01  
 15  +4.1414e-01  +4.2731e-01  1.32e-02  5.79e-06  9.75e-04  1.11e-06  2.38e-05  9.17e-01  
 16  +4.1075e-01  +4.1271e-01  1.96e-03  8.44e-07  1.42e-04  1.71e-07  3.65e-06  9.65e-01  
 17  +4.1011e-01  +4.1014e-01  3.32e-05  1.42e-08  2.40e-06  2.86e-09  6.23e-08  9.90e-01  
 18  +4.1010e-01  +4.1010e-01  3.32e-07  1.42e-10  2.40e-08  2.86e-11  6.23e-10  9.90e-01  
 19  +4.1010e-01  +4.1010e-01  3.33e-09  1.42e-12  2.40e-10  2.88e-13  6.27e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 102.8583ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:38 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:38 PM: Optimal value: 4.101e-01
(CVXPY) Sep 20 07:58:38 PM: Compilation took 2.670e-02 seconds
(CVXPY) Sep 20 07:58:38 PM: Solver (including time spent in interface) took 1.091e-01 seconds
Iteration: 22, Objective: 0.4101
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:38 PM: Your problem has 2739 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:38 PM: Finished problem compilation (took 2.656e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:38 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2739
  constraints   = 5239
  nnz(P)        = 0
  nnz(A)        = 48403
  cones (total) = 1
    : Nonnegative = 1,  numel = 5239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.80e-01  8.35e+01  1.00e+00  1.00e+00   ------   
  1  +5.7761e-01  +5.4380e+02  5.43e+02  4.35e-01  5.33e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2945e-01  +5.9382e+01  5.89e+01  1.60e-01  2.47e+01  1.68e-02  2.66e-01  9.62e-01  
  3  +5.0802e-01  +1.5365e+01  1.49e+01  1.02e-01  1.59e+01  4.71e-05  2.40e-01  3.59e-01  
  4  +5.0089e-01  +1.7695e+00  1.27e+00  1.26e-02  2.07e+00  8.18e-06  1.26e-01  7.24e-01  
  5  +5.0030e-01  +1.1380e+00  6.38e-01  6.12e-03  1.02e+00  1.32e-05  5.25e-02  6.92e-01  
  6  +4.9905e-01  +1.1109e+00  6.12e-01  1.96e-03  3.35e-01  8.44e-05  5.86e-03  9.17e-01  
  7  +4.9310e-01  +1.0215e+00  5.28e-01  4.54e-04  7.80e-02  3.03e-04  1.27e-03  7.87e-01  
  8  +4.8857e-01  +9.6050e-01  4.72e-01  3.51e-04  6.02e-02  2.74e-04  9.92e-04  2.81e-01  
  9  +4.8463e-01  +9.0146e-01  4.17e-01  2.84e-04  4.86e-02  1.84e-04  8.13e-04  3.87e-01  
 10  +4.7617e-01  +7.8367e-01  3.07e-01  2.13e-04  3.62e-02  2.10e-05  6.38e-04  7.31e-01  
 11  +4.5494e-01  +6.4187e-01  1.87e-01  1.03e-04  1.74e-02  1.33e-05  3.31e-04  5.22e-01  
 12  +4.4121e-01  +5.6364e-01  1.22e-01  6.27e-05  1.06e-02  8.86e-06  2.14e-04  5.86e-01  
 13  +4.3399e-01  +5.2485e-01  9.09e-02  4.42e-05  7.46e-03  7.71e-06  1.56e-04  8.22e-01  
 14  +4.2020e-01  +4.5654e-01  3.63e-02  1.67e-05  2.81e-03  2.97e-06  6.39e-05  6.48e-01  
 15  +4.1250e-01  +4.2049e-01  7.99e-03  3.50e-06  5.89e-04  6.98e-07  1.45e-05  9.24e-01  
 16  +4.1033e-01  +4.1136e-01  1.02e-03  4.40e-07  7.41e-05  8.97e-08  1.89e-06  9.39e-01  
 17  +4.1001e-01  +4.1003e-01  2.09e-05  8.97e-09  1.51e-06  1.82e-09  3.88e-08  9.87e-01  
 18  +4.1000e-01  +4.1000e-01  2.09e-07  8.97e-11  1.51e-08  1.82e-11  3.88e-10  9.90e-01  
 19  +4.1000e-01  +4.1000e-01  2.12e-09  9.12e-13  1.54e-10  1.87e-13  3.97e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 98.783ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:38 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:38 PM: Optimal value: 4.100e-01
(CVXPY) Sep 20 07:58:38 PM: Compilation took 2.656e-02 seconds
(CVXPY) Sep 20 07:58:38 PM: Solver (including time spent in interface) took 1.047e-01 seconds
Iteration: 23, Objective: 0.4100
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:39 PM: Your problem has 2749 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:39 PM: Finished problem compilation (took 4.400e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2749
  constraints   = 5249
  nnz(P)        = 0
  nnz(A)        = 48698
  cones (total) = 1
    : Nonnegative = 1,  numel = 5249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.80e-01  8.35e+01  1.00e+00  1.00e+00   ------   
  1  +5.7756e-01  +5.4378e+02  5.43e+02  4.35e-01  5.32e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2940e-01  +5.9331e+01  5.88e+01  1.60e-01  2.46e+01  1.68e-02  2.66e-01  9.63e-01  
  3  +5.0801e-01  +1.5347e+01  1.48e+01  1.02e-01  1.58e+01  4.72e-05  2.39e-01  3.61e-01  
  4  +5.0090e-01  +1.7875e+00  1.29e+00  1.28e-02  2.10e+00  8.24e-06  1.26e-01  7.19e-01  
  5  +5.0030e-01  +1.1489e+00  6.49e-01  6.23e-03  1.03e+00  1.31e-05  5.34e-02  6.84e-01  
  6  +4.9904e-01  +1.1094e+00  6.10e-01  1.98e-03  3.38e-01  8.24e-05  5.92e-03  9.16e-01  
  7  +4.9298e-01  +1.0213e+00  5.28e-01  4.53e-04  7.78e-02  3.01e-04  1.27e-03  7.89e-01  
  8  +4.8902e-01  +9.6467e-01  4.76e-01  3.61e-04  6.18e-02  2.62e-04  1.02e-03  2.80e-01  
  9  +4.8417e-01  +9.0220e-01  4.18e-01  2.84e-04  4.86e-02  1.93e-04  8.16e-04  3.57e-01  
 10  +4.7429e-01  +7.6910e-01  2.95e-01  2.02e-04  3.43e-02  4.42e-06  6.11e-04  8.13e-01  
 11  +4.5864e-01  +6.6692e-01  2.08e-01  1.21e-04  2.06e-02  4.05e-06  3.88e-04  4.10e-01  
 12  +4.4330e-01  +5.7682e-01  1.34e-01  7.08e-05  1.20e-02  3.72e-06  2.41e-04  4.70e-01  
 13  +4.3550e-01  +5.3543e-01  9.99e-02  5.03e-05  8.48e-03  4.21e-06  1.77e-04  4.45e-01  
 14  +4.2435e-01  +4.7735e-01  5.30e-02  2.50e-05  4.20e-03  3.56e-06  9.28e-05  7.56e-01  
 15  +4.1906e-01  +4.5174e-01  3.27e-02  1.50e-05  2.53e-03  2.33e-06  5.78e-05  4.82e-01  
 16  +4.1336e-01  +4.2497e-01  1.16e-02  5.20e-06  8.75e-04  8.46e-07  2.10e-05  6.85e-01  
 17  +4.1128e-01  +4.1546e-01  4.18e-03  1.84e-06  3.10e-04  3.18e-07  7.67e-06  7.16e-01  
 18  +4.1043e-01  +4.1169e-01  1.27e-03  5.48e-07  9.22e-05  1.11e-07  2.34e-06  9.90e-01  
 19  +4.1001e-01  +4.1004e-01  3.11e-05  1.34e-08  2.25e-06  2.71e-09  5.78e-08  9.78e-01  
 20  +4.1000e-01  +4.1000e-01  3.11e-07  1.34e-10  2.25e-08  2.71e-11  5.79e-10  9.90e-01  
 21  +4.1000e-01  +4.1000e-01  3.21e-09  1.38e-12  2.32e-10  2.85e-13  6.08e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 173.3256ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:39 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:39 PM: Optimal value: 4.100e-01
(CVXPY) Sep 20 07:58:39 PM: Compilation took 4.400e-02 seconds
(CVXPY) Sep 20 07:58:39 PM: Solver (including time spent in interface) took 1.849e-01 seconds
Iteration: 24, Objective: 0.4100
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:39 PM: Your problem has 2759 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:39 PM: Finished problem compilation (took 3.678e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2759
  constraints   = 5259
  nnz(P)        = 0
  nnz(A)        = 48984
  cones (total) = 1
    : Nonnegative = 1,  numel = 5259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.34e+01  1.00e+00  1.00e+00   ------   
  1  +5.7743e-01  +5.4374e+02  5.43e+02  4.35e-01  5.31e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2930e-01  +5.9214e+01  5.87e+01  1.59e-01  2.45e+01  1.68e-02  2.65e-01  9.64e-01  
  3  +5.0799e-01  +1.5319e+01  1.48e+01  1.01e-01  1.58e+01  4.73e-05  2.38e-01  3.64e-01  
  4  +5.0091e-01  +1.8158e+00  1.31e+00  1.31e-02  2.14e+00  8.36e-06  1.27e-01  7.12e-01  
  5  +5.0030e-01  +1.1685e+00  6.68e-01  6.41e-03  1.06e+00  1.34e-05  5.34e-02  6.96e-01  
  6  +4.9878e-01  +1.1282e+00  6.29e-01  1.82e-03  3.11e-01  9.25e-05  5.35e-03  9.34e-01  
  7  +4.9197e-01  +1.0266e+00  5.35e-01  4.32e-04  7.41e-02  3.13e-04  1.20e-03  7.79e-01  
  8  +4.8432e-01  +9.2770e-01  4.43e-01  2.97e-04  5.09e-02  2.52e-04  8.46e-04  3.93e-01  
  9  +4.7925e-01  +8.7472e-01  3.95e-01  2.48e-04  4.24e-02  1.92e-04  7.20e-04  2.68e-01  
 10  +4.6484e-01  +7.2610e-01  2.61e-01  1.59e-04  2.70e-02  3.33e-05  4.95e-04  6.83e-01  
 11  +4.4928e-01  +6.2375e-01  1.74e-01  9.61e-05  1.62e-02  1.89e-05  3.17e-04  4.81e-01  
 12  +4.4012e-01  +5.6861e-01  1.28e-01  6.60e-05  1.11e-02  1.12e-05  2.25e-04  7.64e-01  
 13  +4.2760e-01  +5.0126e-01  7.37e-02  3.58e-05  6.02e-03  6.20e-06  1.29e-04  5.74e-01  
 14  +4.1925e-01  +4.5886e-01  3.96e-02  1.86e-05  3.12e-03  3.33e-06  7.03e-05  5.34e-01  
 15  +4.1430e-01  +4.3417e-01  1.99e-02  9.05e-06  1.52e-03  1.73e-06  3.54e-05  6.74e-01  
 16  +4.1064e-01  +4.1681e-01  6.17e-03  2.76e-06  4.63e-04  5.62e-07  1.11e-05  9.05e-01  
 17  +4.0938e-01  +4.1153e-01  2.15e-03  9.51e-07  1.60e-04  1.95e-07  3.90e-06  7.09e-01  
 18  +4.0873e-01  +4.0884e-01  1.05e-04  4.62e-08  7.78e-06  9.31e-09  1.91e-07  9.90e-01  
 19  +4.0870e-01  +4.0870e-01  1.05e-06  4.64e-10  7.82e-08  9.36e-11  1.92e-09  9.90e-01  
 20  +4.0870e-01  +4.0870e-01  1.05e-08  4.64e-12  7.82e-10  9.36e-13  1.92e-11  9.90e-01  
 21  +4.0870e-01  +4.0870e-01  1.05e-10  4.65e-14  7.82e-12  9.40e-15  1.93e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 195.0724ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:39 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:39 PM: Optimal value: 4.087e-01
(CVXPY) Sep 20 07:58:39 PM: Compilation took 3.678e-02 seconds
(CVXPY) Sep 20 07:58:39 PM: Solver (including time spent in interface) took 2.061e-01 seconds
Iteration: 25, Objective: 0.4087
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:40 PM: Your problem has 2769 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:40 PM: Finished problem compilation (took 4.462e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2769
  constraints   = 5269
  nnz(P)        = 0
  nnz(A)        = 49435
  cones (total) = 1
    : Nonnegative = 1,  numel = 5269

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.33e+01  1.00e+00  1.00e+00   ------   
  1  +5.7733e-01  +5.4372e+02  5.43e+02  4.36e-01  5.30e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2921e-01  +5.9120e+01  5.86e+01  1.59e-01  2.44e+01  1.68e-02  2.65e-01  9.65e-01  
  3  +5.0797e-01  +1.5291e+01  1.48e+01  1.01e-01  1.57e+01  4.74e-05  2.38e-01  3.67e-01  
  4  +5.0093e-01  +1.8477e+00  1.35e+00  1.34e-02  2.19e+00  8.50e-06  1.27e-01  7.04e-01  
  5  +5.0029e-01  +1.1843e+00  6.84e-01  6.54e-03  1.08e+00  1.40e-05  5.24e-02  7.16e-01  
  6  +4.9833e-01  +1.1595e+00  6.61e-01  1.60e-03  2.74e-01  1.12e-04  4.63e-03  9.51e-01  
  7  +4.9073e-01  +1.0328e+00  5.42e-01  4.25e-04  7.30e-02  3.10e-04  1.19e-03  7.51e-01  
  8  +4.8387e-01  +9.5365e-01  4.70e-01  3.11e-04  5.31e-02  2.67e-04  8.81e-04  3.37e-01  
  9  +4.7911e-01  +9.0052e-01  4.21e-01  2.62e-04  4.48e-02  2.09e-04  7.58e-04  2.47e-01  
 10  +4.6974e-01  +7.7684e-01  3.07e-01  1.97e-04  3.35e-02  3.45e-05  6.00e-04  6.59e-01  
 11  +4.5039e-01  +6.4088e-01  1.90e-01  1.05e-04  1.78e-02  1.92e-05  3.43e-04  5.01e-01  
 12  +4.3710e-01  +5.6248e-01  1.25e-01  6.43e-05  1.08e-02  1.15e-05  2.21e-04  5.19e-01  
 13  +4.2613e-01  +5.0216e-01  7.60e-02  3.70e-05  6.22e-03  6.77e-06  1.33e-04  5.11e-01  
 14  +4.1831e-01  +4.6100e-01  4.27e-02  2.00e-05  3.36e-03  3.83e-06  7.48e-05  5.89e-01  
 15  +4.1329e-01  +4.3567e-01  2.24e-02  1.02e-05  1.72e-03  2.04e-06  3.94e-05  6.48e-01  
 16  +4.0971e-01  +4.1811e-01  8.39e-03  3.77e-06  6.33e-04  7.83e-07  1.49e-05  9.19e-01  
 17  +4.0769e-01  +4.0948e-01  1.79e-03  7.92e-07  1.33e-04  1.64e-07  3.22e-06  9.29e-01  
 18  +4.0730e-01  +4.0790e-01  6.00e-04  2.65e-07  4.45e-05  5.49e-08  1.09e-06  6.84e-01  
 19  +4.0711e-01  +4.0712e-01  1.65e-05  7.25e-09  1.22e-06  1.47e-09  3.00e-08  9.90e-01  
 20  +4.0710e-01  +4.0710e-01  1.65e-07  7.25e-11  1.22e-08  1.47e-11  3.00e-10  9.90e-01  
 21  +4.0710e-01  +4.0710e-01  1.65e-09  7.25e-13  1.22e-10  1.49e-13  3.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 193.0819ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:40 PM: Optimal value: 4.071e-01
(CVXPY) Sep 20 07:58:40 PM: Compilation took 4.462e-02 seconds
(CVXPY) Sep 20 07:58:40 PM: Solver (including time spent in interface) took 2.033e-01 seconds
Iteration: 26, Objective: 0.4071
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:40 PM: Your problem has 2779 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:40 PM: Finished problem compilation (took 5.183e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2779
  constraints   = 5279
  nnz(P)        = 0
  nnz(A)        = 49752
  cones (total) = 1
    : Nonnegative = 1,  numel = 5279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.33e+01  1.00e+00  1.00e+00   ------   
  1  +5.7711e-01  +5.4386e+02  5.43e+02  4.36e-01  5.30e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2905e-01  +5.8979e+01  5.85e+01  1.59e-01  2.43e+01  1.69e-02  2.64e-01  9.68e-01  
  3  +5.0794e-01  +1.5256e+01  1.47e+01  1.01e-01  1.57e+01  4.76e-05  2.37e-01  3.72e-01  
  4  +5.0074e-01  +1.4883e+00  9.88e-01  9.89e-03  1.62e+00  7.50e-06  1.06e-01  8.33e-01  
  5  +5.0069e-01  +1.5949e+00  1.09e+00  9.16e-03  1.53e+00  2.61e-05  3.88e-02  7.75e-01  
  6  +4.9962e-01  +1.3420e+00  8.42e-01  1.64e-03  2.82e-01  1.24e-04  4.56e-03  9.02e-01  
  7  +4.9575e-01  +1.1452e+00  6.49e-01  5.36e-04  9.23e-02  2.26e-04  1.46e-03  7.67e-01  
  8  +4.8930e-01  +1.0111e+00  5.22e-01  4.08e-04  6.98e-02  1.41e-04  1.14e-03  3.70e-01  
  9  +4.8384e-01  +9.3822e-01  4.54e-01  3.12e-04  5.33e-02  1.07e-04  8.88e-04  3.83e-01  
 10  +4.7879e-01  +8.6761e-01  3.89e-01  2.76e-04  4.70e-02  6.21e-05  8.10e-04  3.19e-01  
 11  +4.6606e-01  +7.5860e-01  2.93e-01  1.85e-04  3.13e-02  3.97e-05  5.69e-04  4.27e-01  
 12  +4.5203e-01  +6.6205e-01  2.10e-01  1.20e-04  2.03e-02  2.54e-05  3.90e-04  4.02e-01  
 13  +4.4376e-01  +6.1173e-01  1.68e-01  9.13e-05  1.54e-02  1.93e-05  3.06e-04  2.87e-01  
 14  +4.3013e-01  +5.3152e-01  1.01e-01  5.08e-05  8.53e-03  1.01e-05  1.79e-04  6.28e-01  
 15  +4.2459e-01  +5.0213e-01  7.75e-02  3.75e-05  6.30e-03  7.59e-06  1.36e-04  3.73e-01  
 16  +4.1504e-01  +4.5149e-01  3.65e-02  1.67e-05  2.79e-03  3.42e-06  6.34e-05  9.39e-01  
 17  +4.0908e-01  +4.2416e-01  1.51e-02  6.70e-06  1.12e-03  1.41e-06  2.68e-05  7.01e-01  
 18  +4.0659e-01  +4.1326e-01  6.67e-03  2.90e-06  4.86e-04  6.21e-07  1.19e-05  7.00e-01  
 19  +4.0469e-01  +4.0529e-01  5.99e-04  2.56e-07  4.30e-05  5.50e-08  1.08e-06  9.33e-01  
 20  +4.0450e-01  +4.0451e-01  6.57e-06  2.80e-09  4.70e-07  6.00e-10  1.19e-08  9.90e-01  
 21  +4.0450e-01  +4.0450e-01  6.57e-08  2.80e-11  4.70e-09  6.01e-12  1.19e-10  9.90e-01  
 22  +4.0450e-01  +4.0450e-01  6.91e-10  2.95e-13  4.95e-11  6.36e-14  1.26e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 184.0145ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:40 PM: Optimal value: 4.045e-01
(CVXPY) Sep 20 07:58:40 PM: Compilation took 5.183e-02 seconds
(CVXPY) Sep 20 07:58:40 PM: Solver (including time spent in interface) took 1.922e-01 seconds
Iteration: 27, Objective: 0.4045
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:41 PM: Your problem has 2789 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:41 PM: Finished problem compilation (took 4.285e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2789
  constraints   = 5289
  nnz(P)        = 0
  nnz(A)        = 49986
  cones (total) = 1
    : Nonnegative = 1,  numel = 5289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.32e+01  1.00e+00  1.00e+00   ------   
  1  +5.7691e-01  +5.4395e+02  5.43e+02  4.36e-01  5.29e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2898e-01  +5.8929e+01  5.84e+01  1.58e-01  2.42e+01  1.69e-02  2.64e-01  9.69e-01  
  3  +5.0793e-01  +1.5246e+01  1.47e+01  1.01e-01  1.56e+01  4.78e-05  2.36e-01  3.74e-01  
  4  +5.0073e-01  +1.4795e+00  9.79e-01  9.81e-03  1.61e+00  7.51e-06  1.05e-01  8.38e-01  
  5  +5.0070e-01  +1.6160e+00  1.12e+00  8.99e-03  1.50e+00  2.81e-05  3.58e-02  7.89e-01  
  6  +4.9971e-01  +1.4260e+00  9.26e-01  1.82e-03  3.12e-01  1.24e-04  5.02e-03  8.73e-01  
  7  +4.9582e-01  +1.1746e+00  6.79e-01  5.61e-04  9.66e-02  2.18e-04  1.53e-03  7.91e-01  
  8  +4.8880e-01  +1.0222e+00  5.33e-01  4.15e-04  7.11e-02  1.31e-04  1.16e-03  3.94e-01  
  9  +4.8309e-01  +9.3522e-01  4.52e-01  3.12e-04  5.33e-02  8.47e-05  8.92e-04  4.73e-01  
 10  +4.7954e-01  +8.8019e-01  4.01e-01  2.94e-04  5.01e-02  5.32e-05  8.61e-04  2.58e-01  
 11  +4.6233e-01  +7.4017e-01  2.78e-01  1.67e-04  2.83e-02  3.55e-05  5.18e-04  4.79e-01  
 12  +4.4739e-01  +6.3994e-01  1.93e-01  1.07e-04  1.80e-02  2.16e-05  3.52e-04  4.15e-01  
 13  +4.3994e-01  +5.9630e-01  1.56e-01  8.30e-05  1.40e-02  1.69e-05  2.81e-04  2.78e-01  
 14  +4.2745e-01  +5.2476e-01  9.73e-02  4.83e-05  8.11e-03  9.70e-06  1.72e-04  5.35e-01  
 15  +4.2228e-01  +4.9740e-01  7.51e-02  3.61e-05  6.06e-03  7.40e-06  1.32e-04  3.33e-01  
 16  +4.1508e-01  +4.5890e-01  4.38e-02  2.02e-05  3.39e-03  4.21e-06  7.64e-05  7.28e-01  
 17  +4.1024e-01  +4.3603e-01  2.58e-02  1.16e-05  1.95e-03  2.46e-06  4.53e-05  4.85e-01  
 18  +4.0603e-01  +4.1671e-01  1.07e-02  4.69e-06  7.85e-04  1.02e-06  1.89e-05  6.52e-01  
 19  +4.0391e-01  +4.0718e-01  3.27e-03  1.40e-06  2.34e-04  3.05e-07  5.80e-06  9.60e-01  
 20  +4.0294e-01  +4.0337e-01  4.21e-04  1.78e-07  2.99e-05  3.90e-08  7.50e-07  8.92e-01  
 21  +4.0280e-01  +4.0281e-01  4.37e-06  1.85e-09  3.10e-07  4.05e-10  7.79e-09  9.90e-01  
 22  +4.0280e-01  +4.0280e-01  4.37e-08  1.85e-11  3.10e-09  4.05e-12  7.79e-11  9.90e-01  
 23  +4.0280e-01  +4.0280e-01  8.03e-10  3.40e-13  5.69e-11  7.46e-14  1.44e-12  9.82e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 210.6638ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:41 PM: Optimal value: 4.028e-01
(CVXPY) Sep 20 07:58:41 PM: Compilation took 4.285e-02 seconds
(CVXPY) Sep 20 07:58:41 PM: Solver (including time spent in interface) took 2.212e-01 seconds
Iteration: 28, Objective: 0.4028
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:41 PM: Your problem has 2799 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:41 PM: Finished problem compilation (took 5.427e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2799
  constraints   = 5299
  nnz(P)        = 0
  nnz(A)        = 50180
  cones (total) = 1
    : Nonnegative = 1,  numel = 5299

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.31e+01  1.00e+00  1.00e+00   ------   
  1  +5.7678e-01  +5.4397e+02  5.43e+02  4.37e-01  5.28e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2894e-01  +5.8901e+01  5.84e+01  1.58e-01  2.42e+01  1.69e-02  2.64e-01  9.69e-01  
  3  +5.0792e-01  +1.5237e+01  1.47e+01  1.01e-01  1.56e+01  4.78e-05  2.36e-01  3.76e-01  
  4  +5.0073e-01  +1.4729e+00  9.72e-01  9.75e-03  1.60e+00  7.51e-06  1.04e-01  8.42e-01  
  5  +5.0070e-01  +1.6042e+00  1.10e+00  9.05e-03  1.51e+00  2.66e-05  3.67e-02  7.67e-01  
  6  +4.9979e-01  +1.4359e+00  9.36e-01  1.89e-03  3.25e-01  1.19e-04  5.22e-03  8.68e-01  
  7  +4.9608e-01  +1.1790e+00  6.83e-01  5.72e-04  9.84e-02  2.13e-04  1.55e-03  8.03e-01  
  8  +4.8850e-01  +1.0157e+00  5.27e-01  4.08e-04  6.98e-02  1.26e-04  1.14e-03  4.28e-01  
  9  +4.8405e-01  +9.5134e-01  4.67e-01  3.29e-04  5.62e-02  9.04e-05  9.37e-04  3.86e-01  
 10  +4.7772e-01  +8.5067e-01  3.73e-01  2.83e-04  4.81e-02  2.81e-05  8.41e-04  5.80e-01  
 11  +4.5264e-01  +6.6759e-01  2.15e-01  1.20e-04  2.02e-02  1.76e-05  3.84e-04  6.41e-01  
 12  +4.4190e-01  +6.0684e-01  1.65e-01  8.72e-05  1.47e-02  1.33e-05  2.92e-04  3.46e-01  
 13  +4.3327e-01  +5.6059e-01  1.27e-01  6.43e-05  1.08e-02  1.06e-05  2.23e-04  5.96e-01  
 14  +4.2219e-01  +5.0241e-01  8.02e-02  3.87e-05  6.48e-03  6.54e-06  1.42e-04  4.30e-01  
 15  +4.1411e-01  +4.6107e-01  4.70e-02  2.17e-05  3.64e-03  4.00e-06  8.32e-05  6.37e-01  
 16  +4.1095e-01  +4.4624e-01  3.53e-02  1.60e-05  2.68e-03  3.03e-06  6.26e-05  2.74e-01  
 17  +4.0685e-01  +4.2527e-01  1.84e-02  8.10e-06  1.36e-03  1.73e-06  3.26e-05  9.90e-01  
 18  +4.0421e-01  +4.1426e-01  1.01e-02  4.36e-06  7.30e-04  9.41e-07  1.80e-05  5.24e-01  
 19  +4.0133e-01  +4.0235e-01  1.01e-03  4.34e-07  7.27e-05  9.31e-08  1.85e-06  9.27e-01  
 20  +4.0100e-01  +4.0102e-01  1.18e-05  5.05e-09  8.45e-07  1.07e-09  2.16e-08  9.90e-01  
 21  +4.0100e-01  +4.0100e-01  1.18e-07  5.05e-11  8.46e-09  1.08e-11  2.16e-10  9.90e-01  
 22  +4.0100e-01  +4.0100e-01  1.18e-09  5.05e-13  8.46e-11  1.08e-13  2.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 241.3857ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:41 PM: Optimal value: 4.010e-01
(CVXPY) Sep 20 07:58:41 PM: Compilation took 5.427e-02 seconds
(CVXPY) Sep 20 07:58:41 PM: Solver (including time spent in interface) took 2.528e-01 seconds
Iteration: 29, Objective: 0.4010
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:42 PM: Your problem has 2809 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:42 PM: Finished problem compilation (took 4.920e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2809
  constraints   = 5309
  nnz(P)        = 0
  nnz(A)        = 50414
  cones (total) = 1
    : Nonnegative = 1,  numel = 5309

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5014e+03  2.50e+03  9.80e-01  8.31e+01  1.00e+00  1.00e+00   ------   
  1  +5.7676e-01  +5.4396e+02  5.43e+02  4.37e-01  5.27e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2893e-01  +5.8879e+01  5.84e+01  1.58e-01  2.41e+01  1.69e-02  2.64e-01  9.70e-01  
  3  +5.0791e-01  +1.5229e+01  1.47e+01  1.00e-01  1.55e+01  4.78e-05  2.35e-01  3.77e-01  
  4  +5.0074e-01  +1.5038e+00  1.00e+00  1.01e-02  1.65e+00  7.60e-06  1.06e-01  8.29e-01  
  5  +5.0065e-01  +1.5598e+00  1.06e+00  8.85e-03  1.48e+00  2.54e-05  3.73e-02  7.67e-01  
  6  +4.9954e-01  +1.3908e+00  8.91e-01  1.72e-03  2.95e-01  1.25e-04  4.75e-03  8.85e-01  
  7  +4.9526e-01  +1.1814e+00  6.86e-01  5.53e-04  9.50e-02  2.34e-04  1.50e-03  7.62e-01  
  8  +4.8838e-01  +1.0431e+00  5.55e-01  4.14e-04  7.07e-02  1.53e-04  1.15e-03  3.72e-01  
  9  +4.8264e-01  +9.6450e-01  4.82e-01  3.22e-04  5.48e-02  1.15e-04  9.16e-04  3.60e-01  
 10  +4.7681e-01  +8.6326e-01  3.86e-01  2.84e-04  4.81e-02  3.97e-05  8.41e-04  4.80e-01  
 11  +4.5134e-01  +6.6778e-01  2.16e-01  1.20e-04  2.02e-02  2.24e-05  3.85e-04  6.26e-01  
 12  +4.4465e-01  +6.2984e-01  1.85e-01  9.88e-05  1.66e-02  1.86e-05  3.26e-04  2.49e-01  
 13  +4.3433e-01  +5.7247e-01  1.38e-01  7.02e-05  1.18e-02  1.31e-05  2.43e-04  4.16e-01  
 14  +4.2200e-01  +5.0587e-01  8.39e-02  4.05e-05  6.78e-03  7.67e-06  1.49e-04  4.82e-01  
 15  +4.1930e-01  +4.9148e-01  7.22e-02  3.43e-05  5.73e-03  6.64e-06  1.28e-04  2.66e-01  
 16  +4.0793e-01  +4.3363e-01  2.57e-02  1.16e-05  1.93e-03  2.37e-06  4.63e-05  8.82e-01  
 17  +4.0604e-01  +4.2434e-01  1.83e-02  8.23e-06  1.38e-03  1.61e-06  3.40e-05  6.81e-01  
 18  +4.0365e-01  +4.1415e-01  1.05e-02  4.62e-06  7.72e-04  9.54e-07  1.92e-05  6.28e-01  
 19  +4.0073e-01  +4.0205e-01  1.32e-03  5.71e-07  9.56e-05  1.16e-07  2.45e-06  9.57e-01  
 20  +4.0030e-01  +4.0032e-01  1.42e-05  6.13e-09  1.03e-06  1.24e-09  2.65e-08  9.89e-01  
 21  +4.0030e-01  +4.0030e-01  1.42e-07  6.14e-11  1.03e-08  1.24e-11  2.65e-10  9.90e-01  
 22  +4.0030e-01  +4.0030e-01  1.42e-09  6.14e-13  1.03e-10  1.24e-13  2.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 228.7112ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:42 PM: Optimal value: 4.003e-01
(CVXPY) Sep 20 07:58:42 PM: Compilation took 4.920e-02 seconds
(CVXPY) Sep 20 07:58:42 PM: Solver (including time spent in interface) took 2.386e-01 seconds
Iteration: 30, Objective: 0.4003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:42 PM: Your problem has 2819 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:42 PM: Finished problem compilation (took 5.113e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2819
  constraints   = 5319
  nnz(P)        = 0
  nnz(A)        = 50626
  cones (total) = 1
    : Nonnegative = 1,  numel = 5319

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.30e+01  1.00e+00  1.00e+00   ------   
  1  +5.7665e-01  +5.4393e+02  5.43e+02  4.37e-01  5.26e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2884e-01  +5.8784e+01  5.83e+01  1.58e-01  2.40e+01  1.69e-02  2.63e-01  9.71e-01  
  3  +5.0790e-01  +1.5206e+01  1.47e+01  1.00e-01  1.55e+01  4.79e-05  2.35e-01  3.79e-01  
  4  +5.0075e-01  +1.5105e+00  1.01e+00  1.01e-02  1.66e+00  7.65e-06  1.05e-01  8.28e-01  
  5  +5.0065e-01  +1.6060e+00  1.11e+00  8.80e-03  1.47e+00  2.85e-05  3.46e-02  8.00e-01  
  6  +4.9944e-01  +1.4327e+00  9.33e-01  1.73e-03  2.96e-01  1.31e-04  4.76e-03  8.75e-01  
  7  +4.9474e-01  +1.1988e+00  7.04e-01  5.51e-04  9.46e-02  2.38e-04  1.50e-03  7.61e-01  
  8  +4.8673e-01  +1.0354e+00  5.49e-01  3.94e-04  6.72e-02  1.41e-04  1.10e-03  4.29e-01  
  9  +4.8313e-01  +9.6974e-01  4.87e-01  3.40e-04  5.79e-02  9.45e-05  9.70e-04  3.29e-01  
 10  +4.7391e-01  +8.2850e-01  3.55e-01  2.55e-04  4.32e-02  1.55e-05  7.67e-04  7.79e-01  
 11  +4.4655e-01  +6.3648e-01  1.90e-01  1.04e-04  1.74e-02  9.39e-06  3.40e-04  6.09e-01  
 12  +4.4069e-01  +6.0684e-01  1.66e-01  8.74e-05  1.47e-02  9.19e-06  2.94e-04  2.73e-01  
 13  +4.3261e-01  +5.6453e-01  1.32e-01  6.69e-05  1.12e-02  8.30e-06  2.34e-04  4.03e-01  
 14  +4.2126e-01  +5.0523e-01  8.40e-02  4.07e-05  6.81e-03  5.42e-06  1.51e-04  4.37e-01  
 15  +4.1743e-01  +4.8558e-01  6.82e-02  3.24e-05  5.42e-03  4.67e-06  1.23e-04  3.07e-01  
 16  +4.0648e-01  +4.3119e-01  2.47e-02  1.12e-05  1.87e-03  1.92e-06  4.55e-05  7.89e-01  
 17  +4.0618e-01  +4.2955e-01  2.34e-02  1.06e-05  1.77e-03  1.84e-06  4.31e-05  1.57e-01  
 18  +4.0373e-01  +4.1838e-01  1.46e-02  6.57e-06  1.10e-03  1.18e-06  2.75e-05  5.53e-01  
 19  +4.0082e-01  +4.0571e-01  4.88e-03  2.15e-06  3.59e-04  4.10e-07  9.22e-06  8.52e-01  
 20  +3.9935e-01  +3.9952e-01  1.68e-04  7.37e-08  1.23e-05  1.40e-08  3.22e-07  9.71e-01  
 21  +3.9930e-01  +3.9930e-01  1.69e-06  7.39e-10  1.23e-07  1.40e-10  3.23e-09  9.90e-01  
 22  +3.9930e-01  +3.9930e-01  1.69e-08  7.39e-12  1.23e-09  1.40e-12  3.23e-11  9.90e-01  
 23  +3.9930e-01  +3.9930e-01  1.69e-10  7.38e-14  1.23e-11  1.40e-14  3.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 204.1202ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:43 PM: Optimal value: 3.993e-01
(CVXPY) Sep 20 07:58:43 PM: Compilation took 5.113e-02 seconds
(CVXPY) Sep 20 07:58:43 PM: Solver (including time spent in interface) took 2.150e-01 seconds
Iteration: 31, Objective: 0.3993
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:43 PM: Your problem has 2828 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:43 PM: Finished problem compilation (took 4.507e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2828
  constraints   = 5328
  nnz(P)        = 0
  nnz(A)        = 50782
  cones (total) = 1
    : Nonnegative = 1,  numel = 5328

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5014e+03  2.50e+03  9.81e-01  8.29e+01  1.00e+00  1.00e+00   ------   
  1  +5.7648e-01  +5.4397e+02  5.43e+02  4.37e-01  5.26e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2877e-01  +5.8721e+01  5.82e+01  1.58e-01  2.39e+01  1.70e-02  2.63e-01  9.72e-01  
  3  +5.0789e-01  +1.5191e+01  1.47e+01  1.00e-01  1.54e+01  4.81e-05  2.34e-01  3.82e-01  
  4  +5.0075e-01  +1.5125e+00  1.01e+00  1.02e-02  1.66e+00  7.68e-06  1.05e-01  8.28e-01  
  5  +5.0068e-01  +1.6429e+00  1.14e+00  9.17e-03  1.53e+00  2.77e-05  3.61e-02  7.80e-01  
  6  +4.9950e-01  +1.4522e+00  9.53e-01  1.80e-03  3.08e-01  1.26e-04  4.93e-03  8.78e-01  
  7  +4.9490e-01  +1.2190e+00  7.24e-01  5.70e-04  9.78e-02  2.34e-04  1.54e-03  7.62e-01  
  8  +4.8716e-01  +1.0587e+00  5.72e-01  4.09e-04  6.98e-02  1.47e-04  1.14e-03  4.12e-01  
  9  +4.8294e-01  +9.9236e-01  5.09e-01  3.48e-04  5.93e-02  1.09e-04  9.88e-04  2.89e-01  
 10  +4.6963e-01  +8.0637e-01  3.37e-01  2.30e-04  3.89e-02  1.26e-05  7.00e-04  8.01e-01  
 11  +4.4490e-01  +6.3237e-01  1.87e-01  1.06e-04  1.77e-02  7.49e-06  3.51e-04  5.63e-01  
 12  +4.3968e-01  +6.0564e-01  1.66e-01  8.98e-05  1.51e-02  7.51e-06  3.05e-04  2.38e-01  
 13  +4.3282e-01  +5.6961e-01  1.37e-01  7.12e-05  1.19e-02  7.05e-06  2.49e-04  3.18e-01  
 14  +4.2087e-01  +5.0709e-01  8.62e-02  4.23e-05  7.07e-03  4.84e-06  1.57e-04  4.74e-01  
 15  +4.1778e-01  +4.9137e-01  7.36e-02  3.53e-05  5.90e-03  4.55e-06  1.34e-04  2.95e-01  
 16  +4.1140e-01  +4.5995e-01  4.86e-02  2.26e-05  3.78e-03  3.22e-06  8.93e-05  4.48e-01  
 17  +4.0338e-01  +4.2059e-01  1.72e-02  7.72e-06  1.29e-03  1.51e-06  3.24e-05  9.74e-01  
 18  +4.0042e-01  +4.0785e-01  7.43e-03  3.27e-06  5.47e-04  6.59e-07  1.41e-05  6.34e-01  
 19  +3.9922e-01  +4.0251e-01  3.29e-03  1.45e-06  2.42e-04  2.84e-07  6.32e-06  9.90e-01  
 20  +3.9813e-01  +3.9822e-01  9.24e-05  4.04e-08  6.75e-06  7.72e-09  1.79e-07  9.80e-01  
 21  +3.9810e-01  +3.9810e-01  9.26e-07  4.04e-10  6.76e-08  7.73e-11  1.79e-09  9.90e-01  
 22  +3.9810e-01  +3.9810e-01  9.26e-09  4.05e-12  6.76e-10  7.74e-13  1.79e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 201.4058ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:43 PM: Optimal value: 3.981e-01
(CVXPY) Sep 20 07:58:43 PM: Compilation took 4.507e-02 seconds
(CVXPY) Sep 20 07:58:43 PM: Solver (including time spent in interface) took 2.124e-01 seconds
Iteration: 32, Objective: 0.3981
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:43 PM: Your problem has 2838 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:43 PM: Finished problem compilation (took 4.607e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2838
  constraints   = 5338
  nnz(P)        = 0
  nnz(A)        = 50971
  cones (total) = 1
    : Nonnegative = 1,  numel = 5338

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5014e+03  2.50e+03  9.81e-01  8.29e+01  1.00e+00  1.00e+00   ------   
  1  +5.7645e-01  +5.4397e+02  5.43e+02  4.37e-01  5.25e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2875e-01  +5.8698e+01  5.82e+01  1.58e-01  2.38e+01  1.70e-02  2.63e-01  9.72e-01  
  3  +5.0788e-01  +1.5187e+01  1.47e+01  1.00e-01  1.54e+01  4.81e-05  2.34e-01  3.82e-01  
  4  +5.0075e-01  +1.5212e+00  1.02e+00  1.03e-02  1.68e+00  7.71e-06  1.05e-01  8.25e-01  
  5  +5.0068e-01  +1.6633e+00  1.16e+00  9.18e-03  1.53e+00  2.89e-05  3.55e-02  7.93e-01  
  6  +4.9942e-01  +1.4647e+00  9.65e-01  1.78e-03  3.04e-01  1.30e-04  4.88e-03  8.76e-01  
  7  +4.9461e-01  +1.2279e+00  7.33e-01  5.70e-04  9.78e-02  2.38e-04  1.54e-03  7.55e-01  
  8  +4.8659e-01  +1.0617e+00  5.75e-01  4.04e-04  6.90e-02  1.47e-04  1.13e-03  4.27e-01  
  9  +4.8198e-01  +9.8359e-01  5.02e-01  3.44e-04  5.85e-02  1.00e-04  9.81e-04  3.05e-01  
 10  +4.6606e-01  +7.8964e-01  3.24e-01  2.09e-04  3.52e-02  2.20e-05  6.40e-04  7.44e-01  
 11  +4.4174e-01  +6.1813e-01  1.76e-01  9.81e-05  1.64e-02  1.08e-05  3.30e-04  5.60e-01  
 12  +4.3693e-01  +5.9403e-01  1.57e-01  8.40e-05  1.40e-02  1.00e-05  2.88e-04  2.20e-01  
 13  +4.3019e-01  +5.5905e-01  1.29e-01  6.60e-05  1.10e-02  8.56e-06  2.34e-04  3.01e-01  
 14  +4.2003e-01  +5.0700e-01  8.70e-02  4.21e-05  7.03e-03  6.17e-06  1.57e-04  5.06e-01  
 15  +4.1631e-01  +4.8812e-01  7.18e-02  3.41e-05  5.69e-03  5.31e-06  1.30e-04  3.01e-01  
 16  +4.0407e-01  +4.2784e-01  2.38e-02  1.08e-05  1.80e-03  1.89e-06  4.48e-05  8.47e-01  
 17  +3.9890e-01  +4.0424e-01  5.34e-03  2.38e-06  3.97e-04  4.30e-07  1.04e-05  8.44e-01  
 18  +3.9742e-01  +3.9778e-01  3.60e-04  1.59e-07  2.65e-05  2.97e-08  7.11e-07  9.90e-01  
 19  +3.9730e-01  +3.9730e-01  3.73e-06  1.65e-09  2.75e-07  3.08e-10  7.39e-09  9.90e-01  
 20  +3.9730e-01  +3.9730e-01  3.75e-08  1.66e-11  2.76e-09  3.09e-12  7.41e-11  9.90e-01  
 21  +3.9730e-01  +3.9730e-01  3.82e-10  1.69e-13  2.81e-11  3.15e-14  7.57e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 178.3659ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:44 PM: Optimal value: 3.973e-01
(CVXPY) Sep 20 07:58:44 PM: Compilation took 4.607e-02 seconds
(CVXPY) Sep 20 07:58:44 PM: Solver (including time spent in interface) took 1.880e-01 seconds
Iteration: 33, Objective: 0.3973
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:44 PM: Your problem has 2848 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:44 PM: Finished problem compilation (took 4.274e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2848
  constraints   = 5348
  nnz(P)        = 0
  nnz(A)        = 51285
  cones (total) = 1
    : Nonnegative = 1,  numel = 5348

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5014e+03  2.50e+03  9.81e-01  8.28e+01  1.00e+00  1.00e+00   ------   
  1  +5.7637e-01  +5.4403e+02  5.43e+02  4.38e-01  5.24e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2869e-01  +5.8647e+01  5.81e+01  1.58e-01  2.38e+01  1.70e-02  2.63e-01  9.73e-01  
  3  +5.0787e-01  +1.5175e+01  1.47e+01  1.00e-01  1.54e+01  4.82e-05  2.33e-01  3.84e-01  
  4  +5.0075e-01  +1.5187e+00  1.02e+00  1.03e-02  1.67e+00  7.72e-06  1.04e-01  8.27e-01  
  5  +5.0072e-01  +1.7236e+00  1.22e+00  9.45e-03  1.57e+00  3.01e-05  3.55e-02  7.95e-01  
  6  +4.9947e-01  +1.5005e+00  1.00e+00  1.85e-03  3.17e-01  1.27e-04  5.08e-03  8.71e-01  
  7  +4.9467e-01  +1.2439e+00  7.49e-01  5.79e-04  9.92e-02  2.33e-04  1.57e-03  7.65e-01  
  8  +4.8654e-01  +1.0736e+00  5.87e-01  4.14e-04  7.06e-02  1.46e-04  1.15e-03  4.10e-01  
  9  +4.8225e-01  +1.0008e+00  5.19e-01  3.54e-04  6.01e-02  1.04e-04  1.01e-03  2.92e-01  
 10  +4.6769e-01  +8.0206e-01  3.34e-01  2.24e-04  3.78e-02  1.64e-05  6.85e-04  7.72e-01  
 11  +4.4122e-01  +6.1441e-01  1.73e-01  9.62e-05  1.61e-02  8.38e-06  3.25e-04  6.01e-01  
 12  +4.3665e-01  +5.9215e-01  1.56e-01  8.32e-05  1.39e-02  8.09e-06  2.85e-04  2.06e-01  
 13  +4.3048e-01  +5.6064e-01  1.30e-01  6.70e-05  1.12e-02  7.39e-06  2.37e-04  2.93e-01  
 14  +4.2128e-01  +5.1362e-01  9.23e-02  4.53e-05  7.56e-03  5.80e-06  1.68e-04  4.50e-01  
 15  +4.1684e-01  +4.9138e-01  7.45e-02  3.59e-05  5.98e-03  4.79e-06  1.36e-04  2.46e-01  
 16  +4.0511e-01  +4.3180e-01  2.67e-02  1.22e-05  2.04e-03  2.33e-06  5.02e-05  9.90e-01  
 17  +4.0211e-01  +4.1837e-01  1.63e-02  7.35e-06  1.22e-03  1.42e-06  3.11e-05  4.62e-01  
 18  +3.9818e-01  +4.0105e-01  2.86e-03  1.27e-06  2.12e-04  2.44e-07  5.63e-06  8.92e-01  
 19  +3.9733e-01  +3.9744e-01  1.04e-04  4.61e-08  7.68e-06  8.61e-09  2.07e-07  9.90e-01  
 20  +3.9730e-01  +3.9730e-01  1.04e-06  4.63e-10  7.71e-08  8.64e-11  2.07e-09  9.90e-01  
 21  +3.9730e-01  +3.9730e-01  1.05e-08  4.64e-12  7.72e-10  8.66e-13  2.08e-11  9.90e-01  
 22  +3.9730e-01  +3.9730e-01  1.07e-10  4.76e-14  7.91e-12  8.91e-15  2.14e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 191.8129ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:44 PM: Optimal value: 3.973e-01
(CVXPY) Sep 20 07:58:44 PM: Compilation took 4.274e-02 seconds
(CVXPY) Sep 20 07:58:44 PM: Solver (including time spent in interface) took 2.052e-01 seconds
Iteration: 34, Objective: 0.3973
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:44 PM: Your problem has 2858 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:44 PM: Finished problem compilation (took 4.714e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2858
  constraints   = 5358
  nnz(P)        = 0
  nnz(A)        = 51651
  cones (total) = 1
    : Nonnegative = 1,  numel = 5358

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5014e+03  2.50e+03  9.81e-01  8.27e+01  1.00e+00  1.00e+00   ------   
  1  +5.7635e-01  +5.4402e+02  5.43e+02  4.38e-01  5.24e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2864e-01  +5.8599e+01  5.81e+01  1.58e-01  2.37e+01  1.70e-02  2.62e-01  9.73e-01  
  3  +5.0787e-01  +1.5162e+01  1.47e+01  9.99e-02  1.53e+01  4.83e-05  2.33e-01  3.86e-01  
  4  +5.0075e-01  +1.5153e+00  1.01e+00  1.02e-02  1.67e+00  7.72e-06  1.04e-01  8.29e-01  
  5  +5.0072e-01  +1.7359e+00  1.24e+00  9.36e-03  1.56e+00  3.10e-05  3.44e-02  8.01e-01  
  6  +4.9950e-01  +1.5294e+00  1.03e+00  1.90e-03  3.25e-01  1.27e-04  5.20e-03  8.62e-01  
  7  +4.9469e-01  +1.2574e+00  7.63e-01  5.89e-04  1.01e-01  2.31e-04  1.59e-03  7.69e-01  
  8  +4.8697e-01  +1.0921e+00  6.05e-01  4.28e-04  7.29e-02  1.48e-04  1.19e-03  3.96e-01  
  9  +4.8221e-01  +1.0143e+00  5.32e-01  3.59e-04  6.10e-02  1.09e-04  1.02e-03  2.84e-01  
 10  +4.7088e-01  +8.2017e-01  3.49e-01  2.51e-04  4.24e-02  9.57e-07  7.65e-04  8.85e-01  
 11  +4.4132e-01  +6.1314e-01  1.72e-01  9.39e-05  1.57e-02  1.87e-06  3.14e-04  6.36e-01  
 12  +4.3616e-01  +5.8913e-01  1.53e-01  8.04e-05  1.34e-02  3.21e-06  2.75e-04  2.41e-01  
 13  +4.3046e-01  +5.6043e-01  1.30e-01  6.63e-05  1.11e-02  3.56e-06  2.33e-04  2.33e-01  
 14  +4.2101e-01  +5.1297e-01  9.20e-02  4.49e-05  7.49e-03  3.46e-06  1.66e-04  4.10e-01  
 15  +4.1651e-01  +4.9061e-01  7.41e-02  3.55e-05  5.91e-03  3.07e-06  1.34e-04  2.50e-01  
 16  +4.0595e-01  +4.3765e-01  3.17e-02  1.45e-05  2.42e-03  2.43e-06  5.89e-05  8.86e-01  
 17  +4.0359e-01  +4.2597e-01  2.24e-02  1.01e-05  1.68e-03  1.90e-06  4.18e-05  7.01e-01  
 18  +3.9868e-01  +4.0474e-01  6.05e-03  2.69e-06  4.47e-04  5.12e-07  1.17e-05  8.29e-01  
 19  +3.9689e-01  +3.9715e-01  2.66e-04  1.17e-07  1.95e-05  2.20e-08  5.22e-07  9.76e-01  
 20  +3.9680e-01  +3.9680e-01  2.71e-06  1.19e-09  1.99e-07  2.24e-10  5.32e-09  9.90e-01  
 21  +3.9680e-01  +3.9680e-01  2.71e-08  1.19e-11  1.99e-09  2.24e-12  5.32e-11  9.90e-01  
 22  +3.9680e-01  +3.9680e-01  2.77e-10  1.22e-13  2.03e-11  2.29e-14  5.45e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 219.1836ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:45 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:45 PM: Optimal value: 3.968e-01
(CVXPY) Sep 20 07:58:45 PM: Compilation took 4.714e-02 seconds
(CVXPY) Sep 20 07:58:45 PM: Solver (including time spent in interface) took 2.297e-01 seconds
Iteration: 35, Objective: 0.3968
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:45 PM: Your problem has 2868 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:45 PM: Finished problem compilation (took 4.788e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2868
  constraints   = 5368
  nnz(P)        = 0
  nnz(A)        = 51838
  cones (total) = 1
    : Nonnegative = 1,  numel = 5368

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5014e+03  2.50e+03  9.81e-01  8.27e+01  1.00e+00  1.00e+00   ------   
  1  +5.7627e-01  +5.4401e+02  5.43e+02  4.38e-01  5.23e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2862e-01  +5.8579e+01  5.81e+01  1.57e-01  2.36e+01  1.70e-02  2.62e-01  9.74e-01  
  3  +5.0786e-01  +1.5158e+01  1.46e+01  9.99e-02  1.53e+01  4.83e-05  2.33e-01  3.87e-01  
  4  +5.0075e-01  +1.5116e+00  1.01e+00  1.02e-02  1.66e+00  7.72e-06  1.03e-01  8.31e-01  
  5  +5.0074e-01  +1.7697e+00  1.27e+00  9.39e-03  1.56e+00  3.23e-05  3.37e-02  8.07e-01  
  6  +4.9952e-01  +1.5648e+00  1.07e+00  1.96e-03  3.35e-01  1.28e-04  5.36e-03  8.52e-01  
  7  +4.9465e-01  +1.2743e+00  7.80e-01  5.89e-04  1.01e-01  2.35e-04  1.59e-03  7.78e-01  
  8  +4.8728e-01  +1.1140e+00  6.27e-01  4.38e-04  7.45e-02  1.55e-04  1.21e-03  3.70e-01  
  9  +4.8196e-01  +1.0309e+00  5.49e-01  3.63e-04  6.16e-02  1.19e-04  1.03e-03  2.67e-01  
 10  +4.7048e-01  +8.2612e-01  3.56e-01  2.55e-04  4.29e-02  1.02e-06  7.77e-04  8.55e-01  
 11  +4.4109e-01  +6.1539e-01  1.74e-01  9.58e-05  1.60e-02  1.88e-06  3.21e-04  6.33e-01  
 12  +4.3640e-01  +5.9346e-01  1.57e-01  8.31e-05  1.39e-02  3.18e-06  2.84e-04  2.26e-01  
 13  +4.3040e-01  +5.6309e-01  1.33e-01  6.79e-05  1.13e-02  3.79e-06  2.38e-04  2.62e-01  
 14  +4.2023e-01  +5.1159e-01  9.14e-02  4.45e-05  7.42e-03  3.61e-06  1.65e-04  4.39e-01  
 15  +4.1587e-01  +4.8982e-01  7.39e-02  3.54e-05  5.89e-03  3.16e-06  1.35e-04  2.40e-01  
 16  +4.0556e-01  +4.3746e-01  3.19e-02  1.46e-05  2.43e-03  2.54e-06  5.96e-05  9.11e-01  
 17  +4.0230e-01  +4.2104e-01  1.87e-02  8.50e-06  1.41e-03  1.69e-06  3.56e-05  9.90e-01  
 18  +3.9760e-01  +4.0111e-01  3.52e-03  1.58e-06  2.62e-04  3.05e-07  6.94e-06  8.50e-01  
 19  +3.9659e-01  +3.9687e-01  2.84e-04  1.27e-07  2.11e-05  2.41e-08  5.69e-07  9.31e-01  
 20  +3.9650e-01  +3.9650e-01  3.51e-06  1.57e-09  2.61e-07  2.96e-10  7.03e-09  9.89e-01  
 21  +3.9650e-01  +3.9650e-01  3.53e-08  1.58e-11  2.62e-09  2.98e-12  7.07e-11  9.90e-01  
 22  +3.9650e-01  +3.9650e-01  3.61e-10  1.61e-13  2.69e-11  3.06e-14  7.26e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 201.0262ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:45 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:45 PM: Optimal value: 3.965e-01
(CVXPY) Sep 20 07:58:45 PM: Compilation took 4.788e-02 seconds
(CVXPY) Sep 20 07:58:45 PM: Solver (including time spent in interface) took 2.113e-01 seconds
Iteration: 36, Objective: 0.3965
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:45 PM: Your problem has 2878 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:45 PM: Finished problem compilation (took 4.868e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2878
  constraints   = 5378
  nnz(P)        = 0
  nnz(A)        = 52131
  cones (total) = 1
    : Nonnegative = 1,  numel = 5378

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5014e+03  2.50e+03  9.81e-01  8.26e+01  1.00e+00  1.00e+00   ------   
  1  +5.7625e-01  +5.4393e+02  5.43e+02  4.38e-01  5.22e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2856e-01  +5.8509e+01  5.80e+01  1.57e-01  2.35e+01  1.70e-02  2.62e-01  9.74e-01  
  3  +5.0785e-01  +1.5137e+01  1.46e+01  9.97e-02  1.52e+01  4.83e-05  2.32e-01  3.88e-01  
  4  +5.0075e-01  +1.5276e+00  1.03e+00  1.04e-02  1.68e+00  7.78e-06  1.04e-01  8.25e-01  
  5  +5.0075e-01  +1.7900e+00  1.29e+00  9.66e-03  1.61e+00  3.17e-05  3.50e-02  8.06e-01  
  6  +4.9942e-01  +1.5518e+00  1.05e+00  1.91e-03  3.26e-01  1.29e-04  5.22e-03  8.60e-01  
  7  +4.9431e-01  +1.2761e+00  7.82e-01  5.88e-04  1.01e-01  2.39e-04  1.59e-03  7.65e-01  
  8  +4.8685e-01  +1.1198e+00  6.33e-01  4.33e-04  7.37e-02  1.61e-04  1.20e-03  3.77e-01  
  9  +4.8150e-01  +1.0336e+00  5.52e-01  3.60e-04  6.11e-02  1.20e-04  1.02e-03  2.71e-01  
 10  +4.6911e-01  +8.1896e-01  3.50e-01  2.46e-04  4.14e-02  1.03e-06  7.53e-04  8.53e-01  
 11  +4.3986e-01  +6.1071e-01  1.71e-01  9.36e-05  1.56e-02  2.00e-06  3.15e-04  6.33e-01  
 12  +4.3504e-01  +5.8835e-01  1.53e-01  8.07e-05  1.35e-02  3.23e-06  2.77e-04  2.31e-01  
 13  +4.2823e-01  +5.5380e-01  1.26e-01  6.38e-05  1.06e-02  3.78e-06  2.26e-04  2.95e-01  
 14  +4.1871e-01  +5.0580e-01  8.71e-02  4.24e-05  7.05e-03  3.19e-06  1.58e-04  3.85e-01  
 15  +4.1436e-01  +4.8442e-01  7.01e-02  3.34e-05  5.56e-03  2.74e-06  1.28e-04  2.32e-01  
 16  +4.0552e-01  +4.4041e-01  3.49e-02  1.60e-05  2.66e-03  2.12e-06  6.47e-05  7.15e-01  
 17  +4.0180e-01  +4.2119e-01  1.94e-02  8.75e-06  1.45e-03  1.73e-06  3.64e-05  9.90e-01  
 18  +3.9698e-01  +4.0077e-01  3.79e-03  1.69e-06  2.80e-04  3.27e-07  7.39e-06  8.41e-01  
 19  +3.9590e-01  +3.9623e-01  3.26e-04  1.45e-07  2.41e-05  2.76e-08  6.45e-07  9.29e-01  
 20  +3.9580e-01  +3.9581e-01  4.34e-06  1.93e-09  3.20e-07  3.65e-10  8.59e-09  9.88e-01  
 21  +3.9580e-01  +3.9580e-01  4.37e-08  1.94e-11  3.22e-09  3.67e-12  8.65e-11  9.90e-01  
 22  +3.9580e-01  +3.9580e-01  4.47e-10  1.99e-13  3.30e-11  3.77e-14  8.88e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 239.0791ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:46 PM: Optimal value: 3.958e-01
(CVXPY) Sep 20 07:58:46 PM: Compilation took 4.868e-02 seconds
(CVXPY) Sep 20 07:58:46 PM: Solver (including time spent in interface) took 2.521e-01 seconds
Iteration: 37, Objective: 0.3958
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:46 PM: Your problem has 2887 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:46 PM: Finished problem compilation (took 5.568e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2887
  constraints   = 5387
  nnz(P)        = 0
  nnz(A)        = 52320
  cones (total) = 1
    : Nonnegative = 1,  numel = 5387

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5014e+03  2.50e+03  9.81e-01  8.25e+01  1.00e+00  1.00e+00   ------   
  1  +5.7621e-01  +5.4391e+02  5.43e+02  4.39e-01  5.21e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2851e-01  +5.8458e+01  5.79e+01  1.57e-01  2.34e+01  1.70e-02  2.61e-01  9.75e-01  
  3  +5.0784e-01  +1.5122e+01  1.46e+01  9.96e-02  1.52e+01  4.84e-05  2.32e-01  3.90e-01  
  4  +5.0075e-01  +1.5231e+00  1.02e+00  1.03e-02  1.68e+00  7.78e-06  1.03e-01  8.27e-01  
  5  +5.0076e-01  +1.8235e+00  1.32e+00  9.49e-03  1.58e+00  3.40e-05  3.31e-02  8.19e-01  
  6  +4.9943e-01  +1.6057e+00  1.11e+00  1.98e-03  3.38e-01  1.31e-04  5.41e-03  8.44e-01  
  7  +4.9420e-01  +1.2976e+00  8.03e-01  5.97e-04  1.02e-01  2.37e-04  1.61e-03  7.72e-01  
  8  +4.8692e-01  +1.1348e+00  6.48e-01  4.46e-04  7.59e-02  1.54e-04  1.24e-03  3.77e-01  
  9  +4.8096e-01  +1.0438e+00  5.63e-01  3.63e-04  6.15e-02  1.20e-04  1.03e-03  2.65e-01  
 10  +4.7124e-01  +8.4248e-01  3.71e-01  2.71e-04  4.56e-02  9.87e-07  8.26e-04  8.36e-01  
 11  +4.4168e-01  +6.2607e-01  1.84e-01  1.01e-04  1.69e-02  1.97e-06  3.36e-04  6.39e-01  
 12  +4.3670e-01  +6.0132e-01  1.65e-01  8.70e-05  1.45e-02  2.95e-06  2.95e-04  2.04e-01  
 13  +4.2885e-01  +5.6099e-01  1.32e-01  6.69e-05  1.11e-02  4.50e-06  2.35e-04  3.84e-01  
 14  +4.1851e-01  +5.0738e-01  8.89e-02  4.32e-05  7.17e-03  3.65e-06  1.60e-04  4.13e-01  
 15  +4.1413e-01  +4.8548e-01  7.13e-02  3.40e-05  5.64e-03  3.10e-06  1.30e-04  2.33e-01  
 16  +4.0483e-01  +4.3801e-01  3.32e-02  1.52e-05  2.51e-03  2.38e-06  6.13e-05  8.16e-01  
 17  +4.0130e-01  +4.1994e-01  1.86e-02  8.40e-06  1.39e-03  1.68e-06  3.50e-05  9.90e-01  
 18  +3.9631e-01  +3.9890e-01  2.58e-03  1.15e-06  1.91e-04  2.23e-07  5.04e-06  9.02e-01  
 19  +3.9552e-01  +3.9557e-01  5.51e-05  2.45e-08  4.05e-06  4.65e-09  1.08e-07  9.85e-01  
 20  +3.9550e-01  +3.9550e-01  5.51e-07  2.45e-10  4.06e-08  4.65e-11  1.08e-09  9.90e-01  
 21  +3.9550e-01  +3.9550e-01  5.56e-09  2.47e-12  4.09e-10  4.71e-13  1.09e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 219.1965ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:46 PM: Optimal value: 3.955e-01
(CVXPY) Sep 20 07:58:46 PM: Compilation took 5.568e-02 seconds
(CVXPY) Sep 20 07:58:46 PM: Solver (including time spent in interface) took 2.302e-01 seconds
Iteration: 38, Objective: 0.3955
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:47 PM: Your problem has 2897 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:47 PM: Finished problem compilation (took 5.161e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2897
  constraints   = 5397
  nnz(P)        = 0
  nnz(A)        = 52624
  cones (total) = 1
    : Nonnegative = 1,  numel = 5397

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5014e+03  2.50e+03  9.81e-01  8.25e+01  1.00e+00  1.00e+00   ------   
  1  +5.7617e-01  +5.4397e+02  5.43e+02  4.39e-01  5.20e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2848e-01  +5.8426e+01  5.79e+01  1.57e-01  2.34e+01  1.70e-02  2.61e-01  9.76e-01  
  3  +5.0784e-01  +1.5116e+01  1.46e+01  9.96e-02  1.52e+01  4.84e-05  2.32e-01  3.91e-01  
  4  +5.0076e-01  +1.5320e+00  1.03e+00  1.04e-02  1.69e+00  7.81e-06  1.04e-01  8.24e-01  
  5  +5.0074e-01  +1.8354e+00  1.33e+00  9.39e-03  1.56e+00  3.51e-05  3.24e-02  8.29e-01  
  6  +4.9934e-01  +1.6089e+00  1.11e+00  1.94e-03  3.31e-01  1.33e-04  5.31e-03  8.46e-01  
  7  +4.9393e-01  +1.2995e+00  8.06e-01  6.00e-04  1.02e-01  2.35e-04  1.62e-03  7.63e-01  
  8  +4.8655e-01  +1.1426e+00  6.56e-01  4.46e-04  7.58e-02  1.61e-04  1.24e-03  3.68e-01  
  9  +4.8068e-01  +1.0503e+00  5.70e-01  3.65e-04  6.18e-02  1.23e-04  1.04e-03  2.69e-01  
 10  +4.7128e-01  +8.4742e-01  3.76e-01  2.76e-04  4.64e-02  9.98e-07  8.41e-04  8.25e-01  
 11  +4.4197e-01  +6.3116e-01  1.89e-01  1.04e-04  1.73e-02  2.18e-06  3.46e-04  6.40e-01  
 12  +4.3639e-01  +6.0243e-01  1.66e-01  8.79e-05  1.46e-02  3.14e-06  2.99e-04  2.19e-01  
 13  +4.2818e-01  +5.5950e-01  1.31e-01  6.65e-05  1.11e-02  4.61e-06  2.35e-04  3.98e-01  
 14  +4.1794e-01  +5.0621e-01  8.83e-02  4.28e-05  7.11e-03  3.68e-06  1.60e-04  4.11e-01  
 15  +4.0560e-01  +4.4322e-01  3.76e-02  1.74e-05  2.88e-03  2.56e-06  7.00e-05  8.16e-01  
 16  +4.0403e-01  +4.3574e-01  3.17e-02  1.45e-05  2.41e-03  2.23e-06  5.91e-05  2.44e-01  
 17  +3.9719e-01  +4.0377e-01  6.58e-03  2.95e-06  4.88e-04  5.27e-07  1.28e-05  9.18e-01  
 18  +3.9529e-01  +3.9559e-01  2.99e-04  1.33e-07  2.20e-05  2.38e-08  5.88e-07  9.65e-01  
 19  +3.9520e-01  +3.9520e-01  3.00e-06  1.34e-09  2.21e-07  2.39e-10  5.92e-09  9.90e-01  
 20  +3.9520e-01  +3.9520e-01  3.01e-08  1.34e-11  2.21e-09  2.39e-12  5.93e-11  9.90e-01  
 21  +3.9520e-01  +3.9520e-01  3.05e-10  1.36e-13  2.25e-11  2.44e-14  6.04e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 195.7101ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:47 PM: Optimal value: 3.952e-01
(CVXPY) Sep 20 07:58:47 PM: Compilation took 5.161e-02 seconds
(CVXPY) Sep 20 07:58:47 PM: Solver (including time spent in interface) took 2.060e-01 seconds
Iteration: 39, Objective: 0.3952
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:47 PM: Your problem has 2907 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:47 PM: Finished problem compilation (took 5.166e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2907
  constraints   = 5407
  nnz(P)        = 0
  nnz(A)        = 52812
  cones (total) = 1
    : Nonnegative = 1,  numel = 5407

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5014e+03  2.50e+03  9.81e-01  8.24e+01  1.00e+00  1.00e+00   ------   
  1  +5.7612e-01  +5.4394e+02  5.43e+02  4.39e-01  5.20e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2843e-01  +5.8369e+01  5.78e+01  1.57e-01  2.33e+01  1.70e-02  2.61e-01  9.76e-01  
  3  +5.0783e-01  +1.5100e+01  1.46e+01  9.95e-02  1.51e+01  4.85e-05  2.31e-01  3.92e-01  
  4  +5.0074e-01  +1.5058e+00  1.01e+00  1.02e-02  1.65e+00  7.75e-06  1.02e-01  8.34e-01  
  5  +5.0082e-01  +1.9324e+00  1.43e+00  9.38e-03  1.56e+00  3.87e-05  3.08e-02  8.37e-01  
  6  +4.9956e-01  +1.7161e+00  1.22e+00  2.18e-03  3.72e-01  1.29e-04  5.96e-03  8.14e-01  
  7  +4.9448e-01  +1.3299e+00  8.35e-01  6.32e-04  1.08e-01  2.20e-04  1.71e-03  7.91e-01  
  8  +4.8695e-01  +1.1521e+00  6.65e-01  4.62e-04  7.84e-02  1.41e-04  1.28e-03  3.97e-01  
  9  +4.8153e-01  +1.0541e+00  5.73e-01  3.79e-04  6.41e-02  1.02e-04  1.07e-03  3.01e-01  
 10  +4.7230e-01  +8.4835e-01  3.76e-01  2.83e-04  4.75e-02  8.39e-07  8.59e-04  8.83e-01  
 11  +4.4322e-01  +6.3807e-01  1.95e-01  1.08e-04  1.79e-02  2.51e-06  3.57e-04  6.48e-01  
 12  +4.3855e-01  +6.1626e-01  1.78e-01  9.45e-05  1.57e-02  4.40e-06  3.19e-04  2.48e-01  
 13  +4.2785e-01  +5.6065e-01  1.33e-01  6.70e-05  1.11e-02  6.12e-06  2.38e-04  5.07e-01  
 14  +4.1803e-01  +5.0932e-01  9.13e-02  4.45e-05  7.38e-03  4.73e-06  1.66e-04  4.11e-01  
 15  +4.0334e-01  +4.3455e-01  3.12e-02  1.44e-05  2.39e-03  1.99e-06  5.90e-05  7.85e-01  
 16  +4.0036e-01  +4.1997e-01  1.96e-02  8.93e-06  1.48e-03  1.49e-06  3.76e-05  7.48e-01  
 17  +3.9600e-01  +4.0051e-01  4.52e-03  2.03e-06  3.35e-04  3.52e-07  8.92e-06  8.11e-01  
 18  +3.9465e-01  +3.9480e-01  1.51e-04  6.71e-08  1.11e-05  1.18e-08  3.00e-07  9.90e-01  
 19  +3.9460e-01  +3.9460e-01  1.51e-06  6.72e-10  1.11e-07  1.19e-10  3.00e-09  9.90e-01  
 20  +3.9460e-01  +3.9460e-01  1.51e-08  6.72e-12  1.11e-09  1.19e-12  3.00e-11  9.90e-01  
 21  +3.9460e-01  +3.9460e-01  1.54e-10  6.85e-14  1.13e-11  1.21e-14  3.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 223.2467ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:47 PM: Optimal value: 3.946e-01
(CVXPY) Sep 20 07:58:47 PM: Compilation took 5.166e-02 seconds
(CVXPY) Sep 20 07:58:47 PM: Solver (including time spent in interface) took 2.342e-01 seconds
Iteration: 40, Objective: 0.3946
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:48 PM: Your problem has 2917 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:48 PM: Finished problem compilation (took 5.491e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2917
  constraints   = 5417
  nnz(P)        = 0
  nnz(A)        = 52962
  cones (total) = 1
    : Nonnegative = 1,  numel = 5417

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5014e+03  2.50e+03  9.81e-01  8.23e+01  1.00e+00  1.00e+00   ------   
  1  +5.7613e-01  +5.4396e+02  5.43e+02  4.39e-01  5.19e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2838e-01  +5.8311e+01  5.78e+01  1.57e-01  2.32e+01  1.70e-02  2.61e-01  9.76e-01  
  3  +5.0781e-01  +1.5083e+01  1.46e+01  9.94e-02  1.51e+01  4.85e-05  2.31e-01  3.94e-01  
  4  +5.0074e-01  +1.5124e+00  1.01e+00  1.03e-02  1.66e+00  7.78e-06  1.02e-01  8.32e-01  
  5  +5.0076e-01  +1.8247e+00  1.32e+00  9.21e-03  1.53e+00  3.46e-05  3.15e-02  8.13e-01  
  6  +4.9951e-01  +1.6426e+00  1.14e+00  2.07e-03  3.53e-01  1.26e-04  5.67e-03  8.30e-01  
  7  +4.9443e-01  +1.3092e+00  8.15e-01  6.25e-04  1.07e-01  2.19e-04  1.69e-03  7.78e-01  
  8  +4.8648e-01  +1.1298e+00  6.43e-01  4.52e-04  7.67e-02  1.37e-04  1.26e-03  4.11e-01  
  9  +4.8151e-01  +1.0426e+00  5.61e-01  3.74e-04  6.32e-02  9.79e-05  1.06e-03  3.25e-01  
 10  +4.7216e-01  +8.4524e-01  3.73e-01  2.86e-04  4.80e-02  7.91e-07  8.75e-04  8.75e-01  
 11  +4.5014e-01  +6.8824e-01  2.38e-01  1.42e-04  2.36e-02  2.83e-06  4.63e-04  5.48e-01  
 12  +4.3954e-01  +6.2677e-01  1.87e-01  1.04e-04  1.73e-02  4.72e-06  3.53e-04  3.84e-01  
 13  +4.2822e-01  +5.6463e-01  1.36e-01  7.03e-05  1.17e-02  7.26e-06  2.51e-04  6.35e-01  
 14  +4.1833e-01  +5.1233e-01  9.40e-02  4.64e-05  7.68e-03  5.37e-06  1.74e-04  4.14e-01  
 15  +4.0527e-01  +4.4499e-01  3.97e-02  1.86e-05  3.08e-03  2.58e-06  7.54e-05  7.14e-01  
 16  +4.0469e-01  +4.4193e-01  3.72e-02  1.73e-05  2.86e-03  2.54e-06  7.02e-05  1.81e-01  
 17  +3.9984e-01  +4.1832e-01  1.85e-02  8.40e-06  1.39e-03  1.47e-06  3.55e-05  7.93e-01  
 18  +3.9508e-01  +3.9730e-01  2.22e-03  9.92e-07  1.64e-04  1.76e-07  4.40e-06  9.26e-01  
 19  +3.9441e-01  +3.9444e-01  3.24e-05  1.45e-08  2.40e-06  2.55e-09  6.49e-08  9.86e-01  
 20  +3.9440e-01  +3.9440e-01  3.25e-07  1.45e-10  2.40e-08  2.55e-11  6.50e-10  9.90e-01  
 21  +3.9440e-01  +3.9440e-01  3.30e-09  1.47e-12  2.43e-10  2.60e-13  6.62e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 232.5455ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:48 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:48 PM: Optimal value: 3.944e-01
(CVXPY) Sep 20 07:58:48 PM: Compilation took 5.491e-02 seconds
(CVXPY) Sep 20 07:58:48 PM: Solver (including time spent in interface) took 2.451e-01 seconds
Iteration: 41, Objective: 0.3944
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:48 PM: Your problem has 2919 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:48 PM: Finished problem compilation (took 6.085e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2919
  constraints   = 5419
  nnz(P)        = 0
  nnz(A)        = 53035
  cones (total) = 1
    : Nonnegative = 1,  numel = 5419

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5014e+03  2.50e+03  9.81e-01  8.23e+01  1.00e+00  1.00e+00   ------   
  1  +5.7613e-01  +5.4397e+02  5.43e+02  4.39e-01  5.19e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2838e-01  +5.8307e+01  5.78e+01  1.57e-01  2.32e+01  1.70e-02  2.61e-01  9.77e-01  
  3  +5.0781e-01  +1.5081e+01  1.46e+01  9.94e-02  1.51e+01  4.85e-05  2.31e-01  3.94e-01  
  4  +5.0074e-01  +1.5124e+00  1.01e+00  1.03e-02  1.66e+00  7.78e-06  1.02e-01  8.32e-01  
  5  +5.0076e-01  +1.8360e+00  1.34e+00  9.21e-03  1.53e+00  3.50e-05  3.13e-02  8.15e-01  
  6  +4.9951e-01  +1.6500e+00  1.15e+00  2.08e-03  3.54e-01  1.26e-04  5.70e-03  8.29e-01  
  7  +4.9442e-01  +1.3111e+00  8.17e-01  6.27e-04  1.07e-01  2.18e-04  1.70e-03  7.79e-01  
  8  +4.8660e-01  +1.1345e+00  6.48e-01  4.55e-04  7.72e-02  1.38e-04  1.27e-03  4.08e-01  
  9  +4.8146e-01  +1.0437e+00  5.62e-01  3.75e-04  6.33e-02  9.81e-05  1.07e-03  3.25e-01  
 10  +4.7238e-01  +8.4721e-01  3.75e-01  2.89e-04  4.84e-02  7.90e-07  8.82e-04  8.73e-01  
 11  +4.5250e-01  +7.0543e-01  2.53e-01  1.54e-04  2.57e-02  2.96e-06  4.99e-04  5.15e-01  
 12  +4.4306e-01  +6.5098e-01  2.08e-01  1.17e-04  1.95e-02  7.71e-06  3.95e-04  5.04e-01  
 13  +4.3128e-01  +5.8355e-01  1.52e-01  8.04e-05  1.33e-02  7.88e-06  2.84e-04  5.35e-01  
 14  +4.2006e-01  +5.2231e-01  1.02e-01  5.11e-05  8.47e-03  5.83e-06  1.90e-04  4.63e-01  
 15  +4.0805e-01  +4.5863e-01  5.06e-02  2.40e-05  3.98e-03  3.54e-06  9.54e-05  7.40e-01  
 16  +4.0556e-01  +4.4630e-01  4.07e-02  1.90e-05  3.15e-03  2.97e-06  7.68e-05  3.09e-01  
 17  +4.0204e-01  +4.2841e-01  2.64e-02  1.21e-05  2.00e-03  2.16e-06  5.01e-05  7.07e-01  
 18  +3.9659e-01  +4.0394e-01  7.35e-03  3.32e-06  5.49e-04  6.02e-07  1.45e-05  7.98e-01  
 19  +3.9450e-01  +3.9481e-01  3.11e-04  1.39e-07  2.31e-05  2.49e-08  6.22e-07  9.72e-01  
 20  +3.9440e-01  +3.9440e-01  3.13e-06  1.40e-09  2.32e-07  2.50e-10  6.26e-09  9.90e-01  
 21  +3.9440e-01  +3.9440e-01  3.13e-08  1.40e-11  2.32e-09  2.51e-12  6.27e-11  9.90e-01  
 22  +3.9440e-01  +3.9440e-01  3.18e-10  1.43e-13  2.36e-11  2.55e-14  6.39e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 265.6213ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:49 PM: Optimal value: 3.944e-01
(CVXPY) Sep 20 07:58:49 PM: Compilation took 6.085e-02 seconds
(CVXPY) Sep 20 07:58:49 PM: Solver (including time spent in interface) took 2.771e-01 seconds
Iteration: 42, Objective: 0.3944
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:49 PM: Your problem has 2929 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:49 PM: Finished problem compilation (took 5.192e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2929
  constraints   = 5429
  nnz(P)        = 0
  nnz(A)        = 53253
  cones (total) = 1
    : Nonnegative = 1,  numel = 5429

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5014e+03  2.50e+03  9.81e-01  8.22e+01  1.00e+00  1.00e+00   ------   
  1  +5.7605e-01  +5.4410e+02  5.44e+02  4.40e-01  5.18e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2832e-01  +5.8260e+01  5.77e+01  1.57e-01  2.32e+01  1.70e-02  2.61e-01  9.77e-01  
  3  +5.0780e-01  +1.5072e+01  1.46e+01  9.94e-02  1.50e+01  4.86e-05  2.31e-01  3.96e-01  
  4  +5.0075e-01  +1.5230e+00  1.02e+00  1.04e-02  1.68e+00  7.82e-06  1.02e-01  8.29e-01  
  5  +5.0089e-01  +2.0920e+00  1.59e+00  9.89e-03  1.65e+00  4.19e-05  3.16e-02  8.41e-01  
  6  +4.9953e-01  +1.8036e+00  1.30e+00  2.31e-03  3.93e-01  1.28e-04  6.32e-03  8.08e-01  
  7  +4.9422e-01  +1.3692e+00  8.75e-01  6.72e-04  1.15e-01  2.07e-04  1.82e-03  7.87e-01  
  8  +4.8659e-01  +1.1720e+00  6.85e-01  4.87e-04  8.25e-02  1.27e-04  1.36e-03  4.15e-01  
  9  +4.8098e-01  +1.0592e+00  5.78e-01  3.88e-04  6.56e-02  8.67e-05  1.11e-03  3.57e-01  
 10  +4.7607e-01  +9.2910e-01  4.53e-01  3.41e-04  5.73e-02  3.17e-05  1.01e-03  5.20e-01  
 11  +4.5774e-01  +7.6698e-01  3.09e-01  1.91e-04  3.18e-02  2.20e-05  6.02e-04  5.01e-01  
 12  +4.5080e-01  +7.1520e-01  2.64e-01  1.56e-04  2.60e-02  1.84e-05  5.08e-04  5.33e-01  
 13  +4.3800e-01  +6.3180e-01  1.94e-01  1.07e-04  1.77e-02  1.31e-05  3.67e-04  3.30e-01  
 14  +4.2527e-01  +5.5478e-01  1.30e-01  6.64e-05  1.10e-02  9.29e-06  2.41e-04  6.19e-01  
 15  +4.1601e-01  +5.0398e-01  8.80e-02  4.34e-05  7.18e-03  6.38e-06  1.65e-04  4.19e-01  
 16  +4.0452e-01  +4.4310e-01  3.86e-02  1.82e-05  3.01e-03  2.92e-06  7.39e-05  7.04e-01  
 17  +4.0389e-01  +4.3976e-01  3.59e-02  1.68e-05  2.77e-03  2.77e-06  6.84e-05  1.80e-01  
 18  +3.9911e-01  +4.1639e-01  1.73e-02  7.89e-06  1.30e-03  1.42e-06  3.36e-05  7.48e-01  
 19  +3.9521e-01  +3.9892e-01  3.71e-03  1.67e-06  2.77e-04  3.00e-07  7.43e-06  8.16e-01  
 20  +3.9417e-01  +3.9438e-01  2.14e-04  9.59e-08  1.59e-05  1.70e-08  4.33e-07  9.60e-01  
 21  +3.9410e-01  +3.9410e-01  2.17e-06  9.73e-10  1.61e-07  1.73e-10  4.40e-09  9.90e-01  
 22  +3.9410e-01  +3.9410e-01  2.17e-08  9.73e-12  1.61e-09  1.73e-12  4.40e-11  9.90e-01  
 23  +3.9410e-01  +3.9410e-01  2.23e-10  1.00e-13  1.66e-11  1.79e-14  4.55e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 247.9855ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:49 PM: Optimal value: 3.941e-01
(CVXPY) Sep 20 07:58:49 PM: Compilation took 5.192e-02 seconds
(CVXPY) Sep 20 07:58:49 PM: Solver (including time spent in interface) took 2.594e-01 seconds
Iteration: 43, Objective: 0.3941
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:49 PM: Your problem has 2934 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:49 PM: Finished problem compilation (took 5.099e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2934
  constraints   = 5434
  nnz(P)        = 0
  nnz(A)        = 53374
  cones (total) = 1
    : Nonnegative = 1,  numel = 5434

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5014e+03  2.50e+03  9.81e-01  8.22e+01  1.00e+00  1.00e+00   ------   
  1  +5.7590e-01  +5.4418e+02  5.44e+02  4.40e-01  5.18e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2829e-01  +5.8247e+01  5.77e+01  1.57e-01  2.31e+01  1.71e-02  2.61e-01  9.78e-01  
  3  +5.0780e-01  +1.5071e+01  1.46e+01  9.93e-02  1.50e+01  4.87e-05  2.30e-01  3.97e-01  
  4  +5.0075e-01  +1.5285e+00  1.03e+00  1.04e-02  1.68e+00  7.85e-06  1.02e-01  8.28e-01  
  5  +5.0089e-01  +2.1092e+00  1.61e+00  9.74e-03  1.62e+00  4.33e-05  3.07e-02  8.47e-01  
  6  +4.9947e-01  +1.8248e+00  1.33e+00  2.31e-03  3.93e-01  1.30e-04  6.30e-03  8.03e-01  
  7  +4.9387e-01  +1.3752e+00  8.81e-01  6.60e-04  1.12e-01  2.11e-04  1.79e-03  7.89e-01  
  8  +4.8540e-01  +1.1626e+00  6.77e-01  4.68e-04  7.94e-02  1.25e-04  1.31e-03  4.30e-01  
  9  +4.8101e-01  +1.0743e+00  5.93e-01  3.94e-04  6.66e-02  9.23e-05  1.12e-03  2.96e-01  
 10  +4.7144e-01  +8.5442e-01  3.83e-01  2.86e-04  4.78e-02  7.67e-07  8.71e-04  9.54e-01  
 11  +4.4181e-01  +6.3845e-01  1.97e-01  1.08e-04  1.80e-02  2.23e-06  3.62e-04  6.40e-01  
 12  +4.3648e-01  +6.1295e-01  1.76e-01  9.43e-05  1.57e-02  4.29e-06  3.22e-04  2.64e-01  
 13  +4.2416e-01  +5.4691e-01  1.23e-01  6.24e-05  1.03e-02  3.69e-06  2.26e-04  3.70e-01  
 14  +4.1691e-01  +5.0928e-01  9.24e-02  4.57e-05  7.56e-03  3.32e-06  1.72e-04  3.22e-01  
 15  +4.0444e-01  +4.4523e-01  4.08e-02  1.93e-05  3.19e-03  2.19e-06  7.84e-05  7.12e-01  
 16  +4.0384e-01  +4.4206e-01  3.82e-02  1.79e-05  2.96e-03  2.24e-06  7.30e-05  2.04e-01  
 17  +3.9808e-01  +4.1419e-01  1.61e-02  7.36e-06  1.22e-03  1.26e-06  3.16e-05  8.71e-01  
 18  +3.9431e-01  +3.9763e-01  3.32e-03  1.50e-06  2.48e-04  2.58e-07  6.72e-06  8.23e-01  
 19  +3.9335e-01  +3.9352e-01  1.65e-04  7.41e-08  1.23e-05  1.27e-08  3.37e-07  9.63e-01  
 20  +3.9330e-01  +3.9330e-01  1.66e-06  7.48e-10  1.24e-07  1.28e-10  3.40e-09  9.90e-01  
 21  +3.9330e-01  +3.9330e-01  1.66e-08  7.48e-12  1.24e-09  1.28e-12  3.40e-11  9.90e-01  
 22  +3.9330e-01  +3.9330e-01  1.69e-10  7.58e-14  1.25e-11  1.31e-14  3.46e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 210.1845ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:50 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:50 PM: Optimal value: 3.933e-01
(CVXPY) Sep 20 07:58:50 PM: Compilation took 5.099e-02 seconds
(CVXPY) Sep 20 07:58:50 PM: Solver (including time spent in interface) took 2.252e-01 seconds
Iteration: 44, Objective: 0.3933
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:58:50 PM: Your problem has 2935 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:58:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:58:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:58:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:58:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:58:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:58:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:58:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:58:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:58:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:58:50 PM: Finished problem compilation (took 5.347e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:50 PM: Invoking solver CLARABEL  to obtain a solution.
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres   -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2935
  constraints   = 5435
  nnz(P)        = 0
  nnz(A)        = 53402
  cones (total) = 1
    : Nonnegative = 1,  numel = 5435

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5014e+03  2.50e+03  9.81e-01  8.22e+01  1.00e+00  1.00e+00   ------   
  1  +5.7589e-01  +5.4419e+02  5.44e+02  4.40e-01  5.18e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.2828e-01  +5.8245e+01  5.77e+01  1.57e-01  2.31e+01  1.71e-02  2.61e-01  9.78e-01  
  3  +5.0780e-01  +1.5070e+01  1.46e+01  9.93e-02  1.50e+01  4.87e-05  2.30e-01  3.98e-01  
  4  +5.0075e-01  +1.5294e+00  1.03e+00  1.04e-02  1.69e+00  7.86e-06  1.02e-01  8.28e-01  
  5  +5.0088e-01  +2.1016e+00  1.60e+00  9.73e-03  1.62e+00  4.30e-05  3.08e-02  8.47e-01  
  6  +4.9946e-01  +1.8181e+00  1.32e+00  2.30e-03  3.91e-01  1.30e-04  6.27e-03  8.04e-01  
  7  +4.9386e-01  +1.3744e+00  8.81e-01  6.61e-04  1.13e-01  2.11e-04  1.79e-03  7.87e-01  
  8  +4.8546e-01  +1.1641e+00  6.79e-01  4.69e-04  7.95e-02  1.26e-04  1.31e-03  4.28e-01  
  9  +4.8099e-01  +1.0750e+00  5.94e-01  3.94e-04  6.65e-02  9.32e-05  1.12e-03  2.97e-01  
 10  +4.7155e-01  +8.5589e-01  3.84e-01  2.87e-04  4.81e-02  7.72e-07  8.76e-04  9.48e-01  
 11  +4.4204e-01  +6.4021e-01  1.98e-01  1.09e-04  1.82e-02  2.34e-06  3.65e-04  6.42e-01  
 12  +4.3673e-01  +6.1458e-01  1.78e-01  9.51e-05  1.58e-02  4.29e-06  3.24e-04  2.58e-01  
 13  +4.2428e-01  +5.4770e-01  1.23e-01  6.28e-05  1.04e-02  3.74e-06  2.27e-04  3.76e-01  
 14  +4.1694e-01  +5.0955e-01  9.26e-02  4.58e-05  7.58e-03  3.36e-06  1.72e-04  3.25e-01  
 15  +4.0446e-01  +4.4534e-01  4.09e-02  1.94e-05  3.20e-03  2.23e-06  7.85e-05  7.19e-01  
 16  +4.0387e-01  +4.4218e-01  3.83e-02  1.80e-05  2.97e-03  2.28e-06  7.32e-05  2.04e-01  
 17  +3.9813e-01  +4.1440e-01  1.63e-02  7.44e-06  1.23e-03  1.28e-06  3.19e-05  8.71e-01  
 18  +3.9431e-01  +3.9762e-01  3.31e-03  1.50e-06  2.47e-04  2.59e-07  6.69e-06  8.31e-01  
 19  +3.9335e-01  +3.9352e-01  1.67e-04  7.50e-08  1.24e-05  1.29e-08  3.41e-07  9.62e-01  
 20  +3.9330e-01  +3.9330e-01  1.68e-06  7.57e-10  1.25e-07  1.30e-10  3.45e-09  9.90e-01  
 21  +3.9330e-01  +3.9330e-01  1.68e-08  7.57e-12  1.25e-09  1.30e-12  3.45e-11  9.90e-01  
 22  +3.9330e-01  +3.9330e-01  1.71e-10  7.68e-14  1.27e-11  1.33e-14  3.51e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 214.1953ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:58:50 PM: Problem status: optimal
(CVXPY) Sep 20 07:58:50 PM: Optimal value: 3.933e-01
(CVXPY) Sep 20 07:58:50 PM: Compilation took 5.347e-02 seconds
(CVXPY) Sep 20 07:58:50 PM: Solver (including time spent in interface) took 2.259e-01 seconds
FULL MODEL:
  Accruacy: 0.5374
  Our objective: 0.0748

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 0)            <-- (term's our objective: 0.0036)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.0044)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0036)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0056)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0052)
 OR (x4 = 1 AND x5 = 0 AND x8 = 1)                                                                   <-- (term's our objective: 0.0264)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 30.295183181762695
Best over terms:
  Our final objective: 0.026399999999999965
    Its accruacy: 0.5132
    Its hamming distance: 10
  Shortest hamming distance: 0
    Its our objective: 0.0015999999999999578
  Highest accruacy: 0.5132
   dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 124 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 125 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 126 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 127 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 128 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 129 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 130 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 131 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 132 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 133 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 134 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 135 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

