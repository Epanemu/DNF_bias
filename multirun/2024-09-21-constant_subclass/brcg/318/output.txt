Command:
python test_script.py -s constant_subclass -d 8 -n 50000 --seed 34 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.00476
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 8.

Computed total variation: 0.06144000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:12 PM: Your problem has 25017 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:12 PM: Finished problem compilation (took 1.658e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25017
  constraints   = 50017
  nnz(P)        = 0
  nnz(A)        = 275017
  cones (total) = 1
    : Nonnegative = 1,  numel = 50017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.49e+02  1.00e+00  1.00e+00   ------   
  1  +5.8419e-01  +5.3463e+03  5.35e+03  4.23e-01  1.60e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3498e-01  +6.3201e+02  6.31e+02  1.70e-01  8.22e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0962e-01  +1.6465e+02  1.64e+02  1.47e-01  7.15e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5933e+01  1.54e+01  4.30e-02  2.06e+01  4.76e-06  1.96e-01  4.42e-01  
  5  +4.9999e-01  +1.0134e+00  5.13e-01  1.53e-03  7.63e-01  2.33e-05  1.91e-01  2.66e-01  
  6  +5.0000e-01  +5.4015e-01  4.02e-02  1.20e-04  5.97e-02  1.54e-06  1.56e-02  9.19e-01  
  7  +5.0000e-01  +5.3290e-01  3.29e-02  9.81e-05  4.89e-02  1.44e-06  1.02e-02  3.88e-01  
  8  +5.0000e-01  +5.2265e-01  2.26e-02  6.74e-05  3.36e-02  2.02e-06  3.11e-03  7.54e-01  
  9  +4.9981e-01  +5.3786e-01  3.81e-02  2.62e-05  1.31e-02  9.76e-05  9.24e-05  9.90e-01  
 10  +4.9741e-01  +5.2728e-01  2.99e-02  1.67e-06  8.36e-04  1.20e-03  5.44e-06  9.41e-01  
 11  +4.9650e-01  +5.1068e-01  1.42e-02  7.52e-07  3.76e-04  2.70e-04  2.58e-06  6.46e-01  
 12  +4.9619e-01  +5.0578e-01  9.58e-03  4.58e-07  2.29e-04  3.31e-05  1.66e-06  7.94e-01  
 13  +4.9535e-01  +5.0156e-01  6.21e-03  2.75e-07  1.37e-04  3.46e-07  1.03e-06  9.13e-01  
 14  +4.9430e-01  +4.9734e-01  3.04e-03  1.27e-07  6.34e-05  6.71e-08  4.91e-07  8.33e-01  
 15  +4.9370e-01  +4.9496e-01  1.27e-03  5.13e-08  2.56e-05  1.29e-08  2.03e-07  9.90e-01  
 16  +4.9325e-01  +4.9329e-01  3.61e-05  1.45e-09  7.23e-07  3.43e-10  5.84e-09  9.90e-01  
 17  +4.9324e-01  +4.9324e-01  3.62e-07  1.45e-11  7.25e-09  3.44e-12  5.86e-11  9.90e-01  
 18  +4.9324e-01  +4.9324e-01  3.63e-09  1.46e-13  7.27e-11  3.94e-14  6.68e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 493.4121ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:13 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:13 PM: Optimal value: 4.932e-01
(CVXPY) Sep 20 07:52:13 PM: Compilation took 1.658e-01 seconds
(CVXPY) Sep 20 07:52:13 PM: Solver (including time spent in interface) took 5.361e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4932
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:13 PM: Your problem has 25027 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:13 PM: Finished problem compilation (took 1.272e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25027
  constraints   = 50027
  nnz(P)        = 0
  nnz(A)        = 297197
  cones (total) = 1
    : Nonnegative = 1,  numel = 50027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.51e+02  1.00e+00  1.00e+00   ------   
  1  +5.8419e-01  +5.3464e+03  5.35e+03  4.23e-01  1.61e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3497e-01  +6.3193e+02  6.31e+02  1.70e-01  8.29e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6462e+02  1.64e+02  1.47e-01  7.21e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5929e+01  1.54e+01  4.30e-02  2.08e+01  4.76e-06  1.96e-01  4.42e-01  
  5  +5.0000e-01  +1.0903e+00  5.90e-01  1.76e-03  8.85e-01  2.33e-05  1.91e-01  2.34e-01  
  6  +5.0000e-01  +6.4608e-01  1.46e-01  4.36e-04  2.19e-01  5.07e-06  5.27e-02  7.35e-01  
  7  +5.0000e-01  +6.2730e-01  1.27e-01  3.80e-04  1.91e-01  4.23e-06  4.47e-02  2.15e-01  
  8  +5.0000e-01  +6.0616e-01  1.06e-01  3.17e-04  1.59e-01  1.94e-06  3.23e-02  7.31e-01  
  9  +5.0000e-01  +5.6079e-01  6.08e-02  1.81e-04  9.12e-02  1.00e-06  1.64e-02  6.40e-01  
 10  +5.0000e-01  +5.6632e-01  6.63e-02  1.98e-04  9.94e-02  5.21e-07  1.53e-02  5.89e-01  
 11  +5.0001e-01  +5.6510e-01  6.51e-02  1.94e-04  9.76e-02  6.28e-09  1.25e-02  9.75e-01  
 12  +5.0000e-01  +5.2869e-01  2.87e-02  8.52e-05  4.28e-02  6.80e-09  2.69e-03  8.09e-01  
 13  +5.0000e-01  +5.2437e-01  2.44e-02  2.01e-05  1.01e-02  1.92e-07  6.96e-05  9.81e-01  
 14  +5.0000e-01  +5.2435e-01  2.44e-02  1.60e-06  8.07e-04  2.67e-06  5.00e-06  9.28e-01  
 15  +4.9991e-01  +5.2353e-01  2.36e-02  1.34e-06  6.77e-04  2.12e-06  4.19e-06  4.72e-01  
 16  +4.9868e-01  +5.1688e-01  1.82e-02  1.30e-06  6.58e-04  9.80e-07  4.16e-06  1.04e-01  
 17  +4.9860e-01  +5.1653e-01  1.79e-02  1.27e-06  6.41e-04  7.52e-07  4.06e-06  2.22e-01  
 18  +4.9839e-01  +5.1552e-01  1.71e-02  1.22e-06  6.15e-04  4.27e-07  3.91e-06  3.82e-01  
 19  +4.9752e-01  +5.1138e-01  1.39e-02  8.31e-07  4.19e-04  3.49e-07  2.71e-06  3.69e-01  
 20  +4.9737e-01  +5.1075e-01  1.34e-02  8.26e-07  4.17e-04  3.07e-07  2.71e-06  5.87e-02  
 21  +4.9680e-01  +5.0826e-01  1.15e-02  6.36e-07  3.21e-04  2.60e-07  2.11e-06  2.74e-01  
 22  +4.9666e-01  +5.0757e-01  1.09e-02  6.31e-07  3.18e-04  2.29e-07  2.11e-06  2.86e-02  
 23  +4.9501e-01  +5.0050e-01  5.49e-03  2.51e-07  1.27e-04  1.14e-07  8.85e-07  6.43e-01  
 24  +4.9482e-01  +4.9966e-01  4.85e-03  2.15e-07  1.08e-04  5.99e-08  7.30e-07  7.40e-01  
 25  +4.9348e-01  +4.9415e-01  6.74e-04  2.73e-08  1.38e-05  6.71e-09  9.86e-08  8.94e-01  
 26  +4.9325e-01  +4.9328e-01  3.10e-05  1.24e-09  6.28e-07  1.71e-10  4.94e-09  9.63e-01  
 27  +4.9324e-01  +4.9324e-01  3.16e-07  1.26e-11  6.38e-09  1.75e-12  5.11e-11  9.90e-01  
 28  +4.9324e-01  +4.9324e-01  3.16e-09  1.26e-13  6.38e-11  1.75e-14  5.11e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 677.4623ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:14 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:14 PM: Optimal value: 4.932e-01
(CVXPY) Sep 20 07:52:14 PM: Compilation took 1.272e-01 seconds
(CVXPY) Sep 20 07:52:14 PM: Solver (including time spent in interface) took 7.132e-01 seconds
Iteration: 2, Objective: 0.4932
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:14 PM: Your problem has 25037 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:14 PM: Finished problem compilation (took 1.345e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25037
  constraints   = 50037
  nnz(P)        = 0
  nnz(A)        = 329347
  cones (total) = 1
    : Nonnegative = 1,  numel = 50037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.56e+02  1.00e+00  1.00e+00   ------   
  1  +5.8418e-01  +5.3465e+03  5.35e+03  4.23e-01  1.64e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3496e-01  +6.3184e+02  6.31e+02  1.70e-01  8.44e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6460e+02  1.64e+02  1.47e-01  7.34e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5930e+01  1.54e+01  4.30e-02  2.12e+01  4.76e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.0346e+00  5.35e-01  1.60e-03  8.17e-01  2.35e-05  1.91e-01  2.60e-01  
  6  +5.0000e-01  +7.4287e-01  2.43e-01  7.25e-04  3.71e-01  9.58e-06  8.65e-02  6.27e-01  
  7  +5.0000e-01  +6.3515e-01  1.35e-01  4.03e-04  2.07e-01  4.82e-06  4.66e-02  5.64e-01  
  8  +5.0000e-01  +6.0832e-01  1.08e-01  3.23e-04  1.66e-01  3.57e-06  3.45e-02  3.77e-01  
  9  +5.0000e-01  +5.9970e-01  9.97e-02  2.97e-04  1.52e-01  2.75e-06  2.84e-02  3.79e-01  
 10  +5.0000e-01  +5.7327e-01  7.33e-02  2.18e-04  1.12e-01  1.03e-06  1.51e-02  8.87e-01  
 11  +5.0000e-01  +5.4553e-01  4.55e-02  1.35e-04  6.93e-02  1.25e-06  4.47e-03  7.69e-01  
 12  +4.9996e-01  +5.3928e-01  3.93e-02  4.63e-05  2.38e-02  2.18e-05  1.80e-04  9.90e-01  
 13  +4.9921e-01  +5.3624e-01  3.70e-02  2.96e-06  1.52e-03  3.71e-04  9.73e-06  9.46e-01  
 14  +4.9896e-01  +5.3389e-01  3.49e-02  2.74e-06  1.41e-03  3.34e-04  8.98e-06  1.19e-01  
 15  +4.9880e-01  +5.3095e-01  3.21e-02  2.67e-06  1.37e-03  2.20e-04  8.78e-06  2.01e-01  
 16  +4.9853e-01  +5.2887e-01  3.03e-02  2.39e-06  1.23e-03  2.00e-04  7.84e-06  1.61e-01  
 17  +4.9847e-01  +5.2611e-01  2.76e-02  2.24e-06  1.15e-03  6.73e-05  7.31e-06  5.18e-01  
 18  +4.9845e-01  +5.2580e-01  2.73e-02  2.21e-06  1.14e-03  5.66e-05  7.19e-06  1.40e-01  
 19  +4.9754e-01  +5.2006e-01  2.25e-02  1.47e-06  7.53e-04  3.23e-05  4.72e-06  6.11e-01  
 20  +4.9749e-01  +5.1984e-01  2.24e-02  1.47e-06  7.53e-04  3.04e-05  4.71e-06  3.59e-02  
 21  +4.9744e-01  +5.1959e-01  2.22e-02  1.35e-06  6.95e-04  2.28e-05  4.29e-06  3.17e-01  
 22  +4.9727e-01  +5.1884e-01  2.16e-02  1.23e-06  6.30e-04  2.10e-05  3.87e-06  1.79e-01  
 23  +4.9726e-01  +5.1878e-01  2.15e-02  1.19e-06  6.13e-04  1.43e-05  3.74e-06  2.98e-01  
 24  +4.9730e-01  +5.1902e-01  2.17e-02  1.14e-06  5.84e-04  1.02e-05  3.55e-06  3.13e-01  
 25  +4.9728e-01  +5.1900e-01  2.17e-02  1.11e-06  5.69e-04  7.27e-06  3.45e-06  2.75e-01  
 26  +4.9666e-01  +5.1683e-01  2.02e-02  9.43e-07  4.84e-04  4.01e-06  2.96e-06  4.64e-01  
 27  +4.9669e-01  +5.1678e-01  2.01e-02  9.29e-07  4.77e-04  3.07e-06  2.91e-06  2.13e-01  
 28  +4.9487e-01  +5.0933e-01  1.45e-02  5.72e-07  2.94e-04  8.45e-07  1.80e-06  7.45e-01  
 29  +4.9376e-01  +5.0450e-01  1.07e-02  4.33e-07  2.22e-04  2.55e-07  1.39e-06  6.29e-01  
 30  +4.9144e-01  +4.9586e-01  4.42e-03  1.61e-07  8.26e-05  8.16e-08  5.29e-07  7.32e-01  
 31  +4.9067e-01  +4.9284e-01  2.17e-03  7.58e-08  3.89e-05  3.05e-08  2.54e-07  9.08e-01  
 32  +4.9008e-01  +4.9083e-01  7.50e-04  2.58e-08  1.33e-05  1.04e-08  8.83e-08  6.87e-01  
 33  +4.8985e-01  +4.9007e-01  2.14e-04  7.34e-09  3.77e-06  2.93e-09  2.52e-08  9.90e-01  
 34  +4.8976e-01  +4.8976e-01  2.31e-06  7.92e-11  4.07e-08  3.15e-11  2.74e-10  9.89e-01  
 35  +4.8976e-01  +4.8976e-01  2.31e-08  7.92e-13  4.07e-10  3.15e-13  2.74e-12  9.90e-01  
 36  +4.8976e-01  +4.8976e-01  2.32e-10  7.92e-15  4.08e-12  3.59e-15  3.10e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 936.2369ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:15 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:15 PM: Optimal value: 4.898e-01
(CVXPY) Sep 20 07:52:15 PM: Compilation took 1.345e-01 seconds
(CVXPY) Sep 20 07:52:15 PM: Solver (including time spent in interface) took 9.718e-01 seconds
Iteration: 3, Objective: 0.4898
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:15 PM: Your problem has 25047 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:16 PM: Finished problem compilation (took 1.393e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25047
  constraints   = 50047
  nnz(P)        = 0
  nnz(A)        = 345591
  cones (total) = 1
    : Nonnegative = 1,  numel = 50047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.57e+02  1.00e+00  1.00e+00   ------   
  1  +5.8418e-01  +5.3465e+03  5.35e+03  4.23e-01  1.65e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3496e-01  +6.3179e+02  6.31e+02  1.70e-01  8.48e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6458e+02  1.64e+02  1.47e-01  7.37e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5928e+01  1.54e+01  4.30e-02  2.13e+01  4.76e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1286e+00  6.29e-01  1.88e-03  9.65e-01  2.34e-05  1.91e-01  2.22e-01  
  6  +5.0000e-01  +7.0756e-01  2.08e-01  6.19e-04  3.19e-01  6.63e-06  7.03e-02  6.86e-01  
  7  +5.0000e-01  +6.0441e-01  1.04e-01  3.11e-04  1.60e-01  2.87e-06  3.34e-02  6.84e-01  
  8  +5.0000e-01  +5.9023e-01  9.02e-02  2.69e-04  1.39e-01  2.21e-06  2.36e-02  4.92e-01  
  9  +5.0001e-01  +5.9531e-01  9.53e-02  2.84e-04  1.46e-01  9.39e-07  1.64e-02  8.85e-01  
 10  +5.0000e-01  +5.7160e-01  7.16e-02  2.13e-04  1.10e-01  1.15e-06  7.10e-03  5.82e-01  
 11  +4.9999e-01  +5.4899e-01  4.90e-02  1.14e-04  5.88e-02  6.30e-06  6.65e-04  9.23e-01  
 12  +4.9948e-01  +5.4686e-01  4.74e-02  4.84e-06  2.50e-03  2.53e-04  1.56e-05  9.77e-01  
 13  +4.9903e-01  +5.4293e-01  4.39e-02  3.40e-06  1.76e-03  2.91e-04  1.09e-05  3.52e-01  
 14  +4.9897e-01  +5.4186e-01  4.29e-02  3.30e-06  1.71e-03  2.68e-04  1.05e-05  8.65e-02  
 15  +4.9891e-01  +5.3811e-01  3.92e-02  3.21e-06  1.66e-03  1.36e-04  1.02e-05  3.47e-01  
 16  +4.9887e-01  +5.3764e-01  3.88e-02  3.16e-06  1.63e-03  1.28e-04  1.00e-05  6.31e-02  
 17  +4.9862e-01  +5.3428e-01  3.57e-02  2.82e-06  1.46e-03  6.83e-05  8.89e-06  4.46e-01  
 18  +4.9844e-01  +5.3259e-01  3.41e-02  2.56e-06  1.32e-03  4.47e-05  8.05e-06  3.69e-01  
 19  +4.9786e-01  +5.2917e-01  3.13e-02  2.07e-06  1.07e-03  3.01e-05  6.50e-06  4.42e-01  
 20  +4.9765e-01  +5.2766e-01  3.00e-02  1.81e-06  9.35e-04  9.71e-06  5.66e-06  6.59e-01  
 21  +4.9721e-01  +5.2615e-01  2.89e-02  1.66e-06  8.55e-04  5.13e-06  5.19e-06  4.60e-01  
 22  +4.9575e-01  +5.2004e-01  2.43e-02  1.20e-06  6.22e-04  4.17e-06  3.79e-06  3.39e-01  
 23  +4.9539e-01  +5.1885e-01  2.35e-02  1.19e-06  6.16e-04  3.62e-06  3.79e-06  5.78e-02  
 24  +4.9406e-01  +5.1304e-01  1.90e-02  8.86e-07  4.58e-04  1.22e-06  2.83e-06  6.40e-01  
 25  +4.9305e-01  +5.0854e-01  1.55e-02  6.65e-07  3.44e-04  1.33e-08  2.13e-06  9.87e-01  
 26  +4.8875e-01  +4.9238e-01  3.63e-03  1.36e-07  7.03e-05  1.46e-08  4.45e-07  8.55e-01  
 27  +4.8793e-01  +4.8945e-01  1.52e-03  5.40e-08  2.79e-05  7.40e-09  1.79e-07  6.30e-01  
 28  +4.8793e-01  +4.8945e-01  1.53e-03  5.40e-08  2.79e-05  7.47e-09  1.79e-07  5.10e-03  
 29  +4.8787e-01  +4.8920e-01  1.33e-03  4.68e-08  2.42e-05  1.24e-08  1.55e-07  5.76e-01  
 30  +4.8782e-01  +4.8903e-01  1.20e-03  4.22e-08  2.18e-05  1.21e-08  1.40e-07  2.43e-01  
 31  +4.8743e-01  +4.8765e-01  2.28e-04  7.82e-09  4.04e-06  3.14e-09  2.59e-08  9.87e-01  
 32  +4.8735e-01  +4.8740e-01  5.63e-05  1.87e-09  9.64e-07  8.29e-10  6.31e-09  7.91e-01  
 33  +4.8732e-01  +4.8732e-01  1.12e-06  3.70e-11  1.91e-08  1.65e-11  1.25e-10  9.90e-01  
 34  +4.8732e-01  +4.8732e-01  1.12e-08  3.70e-13  1.91e-10  1.65e-13  1.25e-12  9.90e-01  
 35  +4.8732e-01  +4.8732e-01  1.16e-10  3.84e-15  1.99e-12  5.28e-15  3.68e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0530113s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:17 PM: Optimal value: 4.873e-01
(CVXPY) Sep 20 07:52:17 PM: Compilation took 1.393e-01 seconds
(CVXPY) Sep 20 07:52:17 PM: Solver (including time spent in interface) took 1.091e+00 seconds
Iteration: 4, Objective: 0.4873
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:17 PM: Your problem has 25057 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:17 PM: Finished problem compilation (took 1.958e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25057
  constraints   = 50057
  nnz(P)        = 0
  nnz(A)        = 362966
  cones (total) = 1
    : Nonnegative = 1,  numel = 50057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3466e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3495e-01  +6.3172e+02  6.31e+02  1.70e-01  8.53e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6456e+02  1.64e+02  1.47e-01  7.41e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5929e+01  1.54e+01  4.30e-02  2.14e+01  4.76e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1260e+00  6.26e-01  1.87e-03  9.67e-01  2.34e-05  1.91e-01  2.24e-01  
  6  +5.0000e-01  +7.4184e-01  2.42e-01  7.22e-04  3.74e-01  7.78e-06  8.02e-02  6.60e-01  
  7  +5.0001e-01  +6.5854e-01  1.59e-01  4.73e-04  2.45e-01  3.21e-06  4.70e-02  7.96e-01  
  8  +5.0001e-01  +6.2195e-01  1.22e-01  3.64e-04  1.88e-01  1.66e-06  3.06e-02  7.14e-01  
  9  +5.0001e-01  +5.9446e-01  9.45e-02  2.82e-04  1.46e-01  8.16e-07  1.75e-02  8.02e-01  
 10  +5.0000e-01  +5.6335e-01  6.34e-02  1.88e-04  9.74e-02  9.42e-07  5.54e-03  7.93e-01  
 11  +4.9998e-01  +5.4796e-01  4.80e-02  6.45e-05  3.35e-02  1.22e-05  2.56e-04  9.90e-01  
 12  +4.9948e-01  +5.4603e-01  4.66e-02  3.70e-06  1.92e-03  2.51e-04  1.19e-05  9.53e-01  
 13  +4.9894e-01  +5.4110e-01  4.22e-02  3.19e-06  1.66e-03  2.03e-04  1.03e-05  2.56e-01  
 14  +4.9875e-01  +5.3837e-01  3.96e-02  3.14e-06  1.63e-03  1.24e-04  1.00e-05  2.81e-01  
 15  +4.9831e-01  +5.3545e-01  3.71e-02  2.67e-06  1.39e-03  1.06e-04  8.46e-06  2.75e-01  
 16  +4.9805e-01  +5.3432e-01  3.63e-02  2.63e-06  1.36e-03  9.38e-05  8.43e-06  6.33e-02  
 17  +4.9798e-01  +5.3390e-01  3.59e-02  2.56e-06  1.33e-03  8.89e-05  8.22e-06  6.78e-02  
 18  +4.9746e-01  +5.2980e-01  3.23e-02  2.17e-06  1.13e-03  9.60e-07  6.87e-06  8.65e-01  
 19  +4.9756e-01  +5.3004e-01  3.25e-02  2.16e-06  1.12e-03  8.98e-07  6.82e-06  8.90e-02  
 20  +4.9634e-01  +5.2473e-01  2.84e-02  1.53e-06  7.92e-04  8.27e-07  4.84e-06  3.81e-01  
 21  +4.9633e-01  +5.2471e-01  2.84e-02  1.52e-06  7.89e-04  7.86e-07  4.82e-06  6.15e-02  
 22  +4.9555e-01  +5.2204e-01  2.65e-02  1.29e-06  6.72e-04  5.13e-07  4.10e-06  4.89e-01  
 23  +4.9508e-01  +5.1971e-01  2.46e-02  1.20e-06  6.26e-04  3.28e-07  3.84e-06  4.44e-01  
 24  +4.9112e-01  +5.0486e-01  1.37e-02  5.46e-07  2.84e-04  1.83e-07  1.79e-06  6.02e-01  
 25  +4.9081e-01  +5.0353e-01  1.27e-02  4.97e-07  2.58e-04  1.64e-07  1.64e-06  2.47e-01  
 26  +4.8823e-01  +4.9408e-01  5.84e-03  2.13e-07  1.11e-04  7.06e-08  7.22e-07  6.51e-01  
 27  +4.8815e-01  +4.9359e-01  5.44e-03  1.96e-07  1.02e-04  6.75e-08  6.64e-07  4.88e-01  
 28  +4.8653e-01  +4.8798e-01  1.44e-03  5.05e-08  2.62e-05  1.76e-08  1.75e-07  7.77e-01  
 29  +4.8653e-01  +4.8795e-01  1.42e-03  4.98e-08  2.59e-05  1.74e-08  1.73e-07  4.00e-02  
 30  +4.8646e-01  +4.8771e-01  1.24e-03  4.34e-08  2.25e-05  1.57e-08  1.51e-07  4.73e-01  
 31  +4.8606e-01  +4.8632e-01  2.68e-04  9.31e-09  4.83e-06  3.55e-09  3.25e-08  9.90e-01  
 32  +4.8594e-01  +4.8595e-01  4.88e-06  1.70e-10  8.81e-08  6.46e-11  5.94e-10  9.84e-01  
 33  +4.8594e-01  +4.8594e-01  4.89e-08  1.70e-12  8.81e-10  6.46e-13  5.94e-12  9.90e-01  
 34  +4.8594e-01  +4.8594e-01  4.89e-10  1.69e-14  8.82e-12  6.66e-15  6.12e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6135711s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:19 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:19 PM: Optimal value: 4.859e-01
(CVXPY) Sep 20 07:52:19 PM: Compilation took 1.958e-01 seconds
(CVXPY) Sep 20 07:52:19 PM: Solver (including time spent in interface) took 1.668e+00 seconds
Iteration: 5, Objective: 0.4859
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:19 PM: Your problem has 25067 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:19 PM: Finished problem compilation (took 2.938e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25067
  constraints   = 50067
  nnz(P)        = 0
  nnz(A)        = 370358
  cones (total) = 1
    : Nonnegative = 1,  numel = 50067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3467e+03  5.35e+03  4.24e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3494e-01  +6.3161e+02  6.31e+02  1.70e-01  8.53e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0961e-01  +1.6452e+02  1.64e+02  1.47e-01  7.42e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5930e+01  1.54e+01  4.30e-02  2.14e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1235e+00  6.23e-01  1.86e-03  9.64e-01  2.35e-05  1.91e-01  2.26e-01  
  6  +5.0001e-01  +7.7034e-01  2.70e-01  8.07e-04  4.18e-01  8.09e-06  8.57e-02  7.19e-01  
  7  +5.0001e-01  +6.9343e-01  1.93e-01  5.77e-04  2.99e-01  5.00e-06  5.86e-02  5.05e-01  
  8  +5.0000e-01  +6.4726e-01  1.47e-01  4.39e-04  2.28e-01  3.76e-06  4.21e-02  3.54e-01  
  9  +5.0001e-01  +6.2885e-01  1.29e-01  3.84e-04  1.99e-01  1.74e-06  2.82e-02  8.12e-01  
 10  +5.0001e-01  +6.0313e-01  1.03e-01  3.07e-04  1.59e-01  4.06e-07  1.55e-02  9.90e-01  
 11  +5.0000e-01  +5.5865e-01  5.86e-02  1.72e-04  8.89e-02  7.60e-07  2.93e-03  8.36e-01  
 12  +4.9996e-01  +5.5476e-01  5.48e-02  2.52e-05  1.31e-02  2.22e-05  8.46e-05  9.87e-01  
 13  +4.9967e-01  +5.5311e-01  5.34e-02  3.99e-06  2.08e-03  1.42e-04  1.28e-05  8.52e-01  
 14  +4.9925e-01  +5.4879e-01  4.95e-02  3.94e-06  2.05e-03  1.13e-04  1.26e-05  7.30e-02  
 15  +4.9863e-01  +5.4223e-01  4.36e-02  3.46e-06  1.80e-03  6.97e-05  1.10e-05  3.39e-01  
 16  +4.9860e-01  +5.4197e-01  4.34e-02  3.46e-06  1.80e-03  6.77e-05  1.10e-05  1.77e-02  
 17  +4.9850e-01  +5.4094e-01  4.24e-02  3.21e-06  1.67e-03  5.57e-05  1.01e-05  2.41e-01  
 18  +4.9838e-01  +5.4008e-01  4.17e-02  3.15e-06  1.64e-03  4.94e-05  9.93e-06  9.24e-02  
 19  +4.9784e-01  +5.3663e-01  3.88e-02  2.67e-06  1.39e-03  3.72e-05  8.37e-06  3.44e-01  
 20  +4.9788e-01  +5.3641e-01  3.85e-02  2.62e-06  1.36e-03  2.77e-05  8.24e-06  2.27e-01  
 21  +4.9771e-01  +5.3555e-01  3.78e-02  2.47e-06  1.28e-03  2.46e-05  7.75e-06  1.57e-01  
 22  +4.9747e-01  +5.3401e-01  3.65e-02  2.28e-06  1.19e-03  1.57e-05  7.17e-06  3.60e-01  
 23  +4.9690e-01  +5.3150e-01  3.46e-02  1.92e-06  9.99e-04  1.20e-05  6.05e-06  3.52e-01  
 24  +4.9680e-01  +5.3115e-01  3.43e-02  1.92e-06  9.99e-04  1.18e-05  6.05e-06  2.58e-03  
 25  +4.9616e-01  +5.2865e-01  3.25e-02  1.76e-06  9.15e-04  9.75e-06  5.55e-06  1.88e-01  
 26  +4.9309e-01  +5.1653e-01  2.34e-02  1.02e-06  5.30e-04  7.19e-06  3.27e-06  4.67e-01  
 27  +4.9305e-01  +5.1615e-01  2.31e-02  1.00e-06  5.22e-04  6.22e-06  3.23e-06  1.16e-01  
 28  +4.8952e-01  +5.0215e-01  1.26e-02  5.01e-07  2.60e-04  2.17e-06  1.65e-06  6.21e-01  
 29  +4.8888e-01  +4.9967e-01  1.08e-02  4.18e-07  2.17e-04  1.64e-06  1.39e-06  2.54e-01  
 30  +4.8856e-01  +4.9821e-01  9.65e-03  3.64e-07  1.89e-04  9.28e-07  1.22e-06  4.61e-01  
 31  +4.8675e-01  +4.9164e-01  4.88e-03  1.78e-07  9.24e-05  3.65e-07  6.07e-07  6.13e-01  
 32  +4.8581e-01  +4.8824e-01  2.43e-03  8.68e-08  4.51e-05  1.14e-07  3.01e-07  7.25e-01  
 33  +4.8508e-01  +4.8569e-01  6.09e-04  2.15e-08  1.12e-05  8.81e-09  7.56e-08  9.90e-01  
 34  +4.8482e-01  +4.8483e-01  9.35e-06  3.29e-10  1.71e-07  1.29e-10  1.17e-09  9.88e-01  
 35  +4.8482e-01  +4.8482e-01  9.35e-08  3.29e-12  1.71e-09  1.29e-12  1.17e-11  9.90e-01  
 36  +4.8482e-01  +4.8482e-01  9.38e-10  3.30e-14  1.72e-11  1.48e-14  1.33e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9876391s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:21 PM: Optimal value: 4.848e-01
(CVXPY) Sep 20 07:52:21 PM: Compilation took 2.938e-01 seconds
(CVXPY) Sep 20 07:52:21 PM: Solver (including time spent in interface) took 2.058e+00 seconds
Iteration: 6, Objective: 0.4848
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:22 PM: Your problem has 25077 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:22 PM: Finished problem compilation (took 3.024e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25077
  constraints   = 50077
  nnz(P)        = 0
  nnz(A)        = 378958
  cones (total) = 1
    : Nonnegative = 1,  numel = 50077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3467e+03  5.35e+03  4.24e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3156e+02  6.31e+02  1.70e-01  8.54e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0961e-01  +1.6451e+02  1.64e+02  1.47e-01  7.42e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5930e+01  1.54e+01  4.30e-02  2.15e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0001e-01  +1.1602e+00  6.60e-01  1.97e-03  1.02e+00  2.35e-05  1.91e-01  2.14e-01  
  6  +5.0000e-01  +6.9166e-01  1.92e-01  5.72e-04  2.97e-01  5.86e-06  6.40e-02  7.00e-01  
  7  +5.0000e-01  +6.5426e-01  1.54e-01  4.60e-04  2.39e-01  4.65e-06  4.86e-02  3.10e-01  
  8  +5.0000e-01  +6.4235e-01  1.42e-01  4.25e-04  2.21e-01  3.64e-06  3.86e-02  4.34e-01  
  9  +5.0001e-01  +6.3288e-01  1.33e-01  3.96e-04  2.06e-01  2.12e-06  2.71e-02  7.15e-01  
 10  +5.0000e-01  +5.8844e-01  8.84e-02  2.63e-04  1.37e-01  1.92e-06  1.12e-02  6.86e-01  
 11  +4.9999e-01  +5.6658e-01  6.66e-02  1.80e-04  9.33e-02  6.33e-06  1.55e-03  9.90e-01  
 12  +4.9942e-01  +5.6012e-01  6.07e-02  9.03e-06  4.70e-03  2.83e-04  2.99e-05  9.86e-01  
 13  +4.9857e-01  +5.5235e-01  5.38e-02  4.70e-06  2.45e-03  4.09e-04  1.54e-05  5.35e-01  
 14  +4.9861e-01  +5.5153e-01  5.29e-02  4.60e-06  2.40e-03  3.50e-04  1.50e-05  1.40e-01  
 15  +4.9844e-01  +5.4954e-01  5.11e-02  4.20e-06  2.19e-03  3.14e-04  1.36e-05  1.91e-01  
 16  +4.9835e-01  +5.4800e-01  4.96e-02  4.12e-06  2.15e-03  2.68e-04  1.33e-05  1.09e-01  
 17  +4.9790e-01  +5.4410e-01  4.62e-02  3.53e-06  1.84e-03  2.15e-04  1.13e-05  2.99e-01  
 18  +4.9782e-01  +5.4343e-01  4.56e-02  3.51e-06  1.83e-03  2.00e-04  1.13e-05  4.13e-02  
 19  +4.9688e-01  +5.3691e-01  4.00e-02  2.64e-06  1.37e-03  1.23e-04  8.40e-06  5.19e-01  
 20  +4.9706e-01  +5.3763e-01  4.06e-02  2.48e-06  1.29e-03  9.02e-05  7.81e-06  3.37e-01  
 21  +4.9701e-01  +5.3734e-01  4.03e-02  2.46e-06  1.28e-03  8.08e-05  7.76e-06  8.70e-02  
 22  +4.9703e-01  +5.3730e-01  4.03e-02  2.42e-06  1.26e-03  6.78e-05  7.63e-06  1.56e-01  
 23  +4.9635e-01  +5.3402e-01  3.77e-02  1.96e-06  1.02e-03  5.09e-05  6.21e-06  3.90e-01  
 24  +4.9559e-01  +5.3095e-01  3.54e-02  1.81e-06  9.42e-04  2.50e-05  5.74e-06  4.33e-01  
 25  +4.9125e-01  +5.1284e-01  2.16e-02  8.92e-07  4.65e-04  1.25e-05  2.90e-06  6.08e-01  
 26  +4.8955e-01  +5.0510e-01  1.55e-02  6.21e-07  3.23e-04  4.53e-06  2.05e-06  5.95e-01  
 27  +4.8954e-01  +5.0502e-01  1.55e-02  6.20e-07  3.23e-04  4.39e-06  2.04e-06  2.47e-02  
 28  +4.8958e-01  +5.0504e-01  1.55e-02  6.15e-07  3.20e-04  3.95e-06  2.02e-06  1.10e-01  
 29  +4.8752e-01  +4.9690e-01  9.38e-03  3.58e-07  1.86e-04  1.37e-06  1.19e-06  6.46e-01  
 30  +4.8738e-01  +4.9633e-01  8.95e-03  3.35e-07  1.74e-04  1.17e-06  1.12e-06  1.85e-01  
 31  +4.8731e-01  +4.9609e-01  8.78e-03  3.33e-07  1.73e-04  1.08e-06  1.11e-06  4.85e-02  
 32  +4.8725e-01  +4.9561e-01  8.36e-03  3.05e-07  1.59e-04  5.80e-07  1.01e-06  5.63e-01  
 33  +4.8525e-01  +4.8851e-01  3.26e-03  1.15e-07  5.98e-05  2.00e-07  3.88e-07  6.69e-01  
 34  +4.8525e-01  +4.8850e-01  3.25e-03  1.15e-07  5.97e-05  1.97e-07  3.88e-07  1.46e-02  
 35  +4.8481e-01  +4.8697e-01  2.16e-03  7.60e-08  3.96e-05  4.84e-08  2.59e-07  8.60e-01  
 36  +4.8415e-01  +4.8474e-01  5.88e-04  2.03e-08  1.06e-05  1.29e-08  7.01e-08  7.41e-01  
 37  +4.8391e-01  +4.8394e-01  3.00e-05  1.04e-09  5.39e-07  4.52e-10  3.59e-09  9.90e-01  
 38  +4.8390e-01  +4.8390e-01  3.01e-07  1.04e-11  5.40e-09  4.52e-12  3.60e-11  9.90e-01  
 39  +4.8390e-01  +4.8390e-01  3.01e-09  1.04e-13  5.40e-11  4.52e-14  3.60e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9638592s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:24 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:24 PM: Optimal value: 4.839e-01
(CVXPY) Sep 20 07:52:24 PM: Compilation took 3.024e-01 seconds
(CVXPY) Sep 20 07:52:24 PM: Solver (including time spent in interface) took 2.036e+00 seconds
Iteration: 7, Objective: 0.4839
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:24 PM: Your problem has 25087 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:25 PM: Finished problem compilation (took 2.846e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25087
  constraints   = 50087
  nnz(P)        = 0
  nnz(A)        = 387358
  cones (total) = 1
    : Nonnegative = 1,  numel = 50087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8415e-01  +5.3468e+03  5.35e+03  4.24e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3149e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6449e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5930e+01  1.54e+01  4.30e-02  2.15e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0001e-01  +1.1868e+00  6.87e-01  2.05e-03  1.06e+00  2.35e-05  1.91e-01  2.06e-01  
  6  +5.0000e-01  +7.3592e-01  2.36e-01  7.04e-04  3.66e-01  7.10e-06  7.62e-02  6.41e-01  
  7  +5.0000e-01  +6.4618e-01  1.46e-01  4.36e-04  2.27e-01  4.24e-06  4.41e-02  5.33e-01  
  8  +5.0000e-01  +6.2685e-01  1.27e-01  3.79e-04  1.97e-01  3.75e-06  3.27e-02  3.50e-01  
  9  +5.0000e-01  +6.1835e-01  1.18e-01  3.53e-04  1.83e-01  2.40e-06  1.65e-02  9.25e-01  
 10  +5.0000e-01  +5.9304e-01  9.30e-02  2.72e-04  1.42e-01  4.52e-06  4.81e-03  7.46e-01  
 11  +4.9990e-01  +5.7737e-01  7.75e-02  7.93e-05  4.13e-02  5.22e-05  2.96e-04  9.64e-01  
 12  +4.9917e-01  +5.7400e-01  7.48e-02  1.14e-05  5.96e-03  3.89e-04  3.75e-05  8.74e-01  
 13  +4.9877e-01  +5.6649e-01  6.77e-02  7.21e-06  3.76e-03  4.28e-04  2.34e-05  5.23e-01  
 14  +4.9881e-01  +5.6554e-01  6.67e-02  7.02e-06  3.66e-03  3.96e-04  2.27e-05  9.28e-02  
 15  +4.9920e-01  +5.6051e-01  6.13e-02  6.45e-06  3.36e-03  1.67e-04  2.07e-05  5.51e-01  
 16  +4.9929e-01  +5.5660e-01  5.73e-02  5.67e-06  2.96e-03  5.43e-05  1.82e-05  7.11e-01  
 17  +4.9895e-01  +5.5486e-01  5.59e-02  4.55e-06  2.37e-03  5.88e-05  1.46e-05  2.72e-01  
 18  +4.9876e-01  +5.5386e-01  5.51e-02  4.49e-06  2.34e-03  4.99e-05  1.45e-05  1.28e-01  
 19  +4.9746e-01  +5.4764e-01  5.02e-02  3.18e-06  1.66e-03  4.72e-05  1.03e-05  4.32e-01  
 20  +4.9537e-01  +5.3866e-01  4.33e-02  2.41e-06  1.26e-03  3.19e-05  7.89e-06  4.24e-01  
 21  +4.9522e-01  +5.3800e-01  4.28e-02  2.39e-06  1.25e-03  2.87e-05  7.84e-06  7.20e-02  
 22  +4.9203e-01  +5.2479e-01  3.28e-02  1.64e-06  8.57e-04  1.64e-05  5.51e-06  4.48e-01  
 23  +4.9135e-01  +5.2204e-01  3.07e-02  1.51e-06  7.85e-04  1.28e-05  5.08e-06  2.09e-01  
 24  +4.9023e-01  +5.1755e-01  2.73e-02  1.29e-06  6.74e-04  8.64e-06  4.40e-06  3.09e-01  
 25  +4.8797e-01  +5.0847e-01  2.05e-02  8.96e-07  4.67e-04  9.19e-08  3.10e-06  9.07e-01  
 26  +4.8729e-01  +5.0587e-01  1.86e-02  7.94e-07  4.14e-04  9.68e-08  2.77e-06  2.21e-01  
 27  +4.8726e-01  +5.0575e-01  1.85e-02  7.91e-07  4.12e-04  1.02e-07  2.76e-06  6.41e-02  
 28  +4.8567e-01  +4.9964e-01  1.40e-02  5.77e-07  3.01e-04  8.72e-08  2.04e-06  3.77e-01  
 29  +4.8567e-01  +4.9964e-01  1.40e-02  5.74e-07  2.99e-04  9.32e-08  2.03e-06  9.68e-02  
 30  +4.8336e-01  +4.9091e-01  7.54e-03  2.96e-07  1.54e-04  5.82e-08  1.08e-06  6.19e-01  
 31  +4.8331e-01  +4.9065e-01  7.34e-03  2.88e-07  1.50e-04  6.32e-08  1.05e-06  2.77e-01  
 32  +4.8253e-01  +4.8774e-01  5.21e-03  2.02e-07  1.05e-04  4.70e-08  7.41e-07  4.02e-01  
 33  +4.8190e-01  +4.8538e-01  3.48e-03  1.33e-07  6.93e-05  3.51e-08  4.93e-07  6.35e-01  
 34  +4.8106e-01  +4.8232e-01  1.26e-03  4.76e-08  2.48e-05  1.30e-08  1.79e-07  7.15e-01  
 35  +4.8078e-01  +4.8129e-01  5.10e-04  1.93e-08  1.01e-05  5.76e-09  7.31e-08  9.90e-01  
 36  +4.8058e-01  +4.8059e-01  7.92e-06  2.99e-10  1.56e-07  8.84e-11  1.14e-09  9.90e-01  
 37  +4.8058e-01  +4.8058e-01  7.92e-08  2.99e-12  1.56e-09  8.84e-13  1.14e-11  9.90e-01  
 38  +4.8058e-01  +4.8058e-01  7.93e-10  2.99e-14  1.56e-11  9.48e-15  1.22e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9178669s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:27 PM: Optimal value: 4.806e-01
(CVXPY) Sep 20 07:52:27 PM: Compilation took 2.846e-01 seconds
(CVXPY) Sep 20 07:52:27 PM: Solver (including time spent in interface) took 1.987e+00 seconds
Iteration: 8, Objective: 0.4806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:27 PM: Your problem has 25094 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:27 PM: Finished problem compilation (took 2.953e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25094
  constraints   = 50094
  nnz(P)        = 0
  nnz(A)        = 393461
  cones (total) = 1
    : Nonnegative = 1,  numel = 50094

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8415e-01  +5.3467e+03  5.35e+03  4.24e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3149e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6448e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5928e+01  1.54e+01  4.30e-02  2.15e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0001e-01  +1.2043e+00  7.04e-01  2.11e-03  1.09e+00  2.35e-05  1.92e-01  2.01e-01  
  6  +5.0001e-01  +7.4389e-01  2.44e-01  7.28e-04  3.79e-01  7.10e-06  7.77e-02  6.39e-01  
  7  +5.0000e-01  +6.7161e-01  1.72e-01  5.12e-04  2.66e-01  4.57e-06  5.08e-02  5.02e-01  
  8  +5.0000e-01  +6.3482e-01  1.35e-01  4.02e-04  2.09e-01  3.78e-06  3.51e-02  3.67e-01  
  9  +5.0001e-01  +6.3722e-01  1.37e-01  4.09e-04  2.13e-01  2.24e-06  2.24e-02  8.44e-01  
 10  +5.0001e-01  +6.0030e-01  1.00e-01  2.97e-04  1.55e-01  1.25e-06  8.12e-03  9.90e-01  
 11  +4.9998e-01  +5.7583e-01  7.59e-02  1.21e-04  6.32e-02  1.20e-05  5.13e-04  9.49e-01  
 12  +4.9940e-01  +5.7331e-01  7.39e-02  6.29e-06  3.28e-03  2.90e-04  2.03e-05  9.61e-01  
 13  +4.9880e-01  +5.6660e-01  6.78e-02  4.92e-06  2.57e-03  2.78e-04  1.58e-05  3.11e-01  
 14  +4.9876e-01  +5.6584e-01  6.71e-02  4.92e-06  2.57e-03  2.65e-04  1.58e-05  2.91e-02  
 15  +4.9856e-01  +5.6393e-01  6.54e-02  4.49e-06  2.34e-03  2.52e-04  1.44e-05  1.57e-01  
 16  +4.9854e-01  +5.6011e-01  6.16e-02  4.30e-06  2.25e-03  1.55e-04  1.38e-05  3.13e-01  
 17  +4.9833e-01  +5.5836e-01  6.00e-02  3.97e-06  2.07e-03  1.40e-04  1.27e-05  1.81e-01  
 18  +4.9771e-01  +5.5228e-01  5.46e-02  3.65e-06  1.90e-03  6.96e-05  1.17e-05  4.20e-01  
 19  +4.9554e-01  +5.4175e-01  4.62e-02  2.56e-06  1.34e-03  5.07e-05  8.34e-06  4.66e-01  
 20  +4.9271e-01  +5.2878e-01  3.61e-02  1.87e-06  9.74e-04  2.00e-05  6.21e-06  5.39e-01  
 21  +4.9231e-01  +5.2698e-01  3.47e-02  1.77e-06  9.24e-04  1.66e-05  5.91e-06  1.57e-01  
 22  +4.9049e-01  +5.1939e-01  2.89e-02  1.40e-06  7.28e-04  1.07e-05  4.72e-06  3.46e-01  
 23  +4.8734e-01  +5.0658e-01  1.92e-02  8.51e-07  4.44e-04  5.29e-06  2.95e-06  5.06e-01  
 24  +4.8723e-01  +5.0608e-01  1.89e-02  8.23e-07  4.29e-04  4.64e-06  2.85e-06  1.35e-01  
 25  +4.8719e-01  +5.0591e-01  1.87e-02  8.15e-07  4.25e-04  4.12e-06  2.82e-06  1.09e-01  
 26  +4.8619e-01  +5.0181e-01  1.56e-02  6.50e-07  3.39e-04  1.82e-06  2.27e-06  5.70e-01  
 27  +4.8473e-01  +4.9621e-01  1.15e-02  4.62e-07  2.41e-04  9.63e-07  1.64e-06  4.89e-01  
 28  +4.8291e-01  +4.8914e-01  6.23e-03  2.41e-07  1.26e-04  7.14e-08  8.74e-07  9.90e-01  
 29  +4.8159e-01  +4.8426e-01  2.67e-03  1.02e-07  5.33e-05  3.05e-08  3.80e-07  6.12e-01  
 30  +4.8149e-01  +4.8388e-01  2.39e-03  9.10e-08  4.74e-05  2.72e-08  3.39e-07  4.48e-01  
 31  +4.8065e-01  +4.8082e-01  1.73e-04  6.55e-09  3.42e-06  1.93e-09  2.49e-08  9.45e-01  
 32  +4.8058e-01  +4.8058e-01  1.75e-06  6.62e-11  3.45e-08  1.95e-11  2.52e-10  9.90e-01  
 33  +4.8058e-01  +4.8058e-01  1.75e-08  6.62e-13  3.45e-10  1.95e-13  2.52e-12  9.90e-01  
 34  +4.8058e-01  +4.8058e-01  1.76e-10  6.66e-15  3.46e-12  2.18e-15  2.81e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8323526s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:29 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:29 PM: Optimal value: 4.806e-01
(CVXPY) Sep 20 07:52:29 PM: Compilation took 2.953e-01 seconds
(CVXPY) Sep 20 07:52:29 PM: Solver (including time spent in interface) took 1.902e+00 seconds
Iteration: 9, Objective: 0.4806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:29 PM: Your problem has 25104 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:30 PM: Finished problem compilation (took 2.972e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25104
  constraints   = 50104
  nnz(P)        = 0
  nnz(A)        = 399013
  cones (total) = 1
    : Nonnegative = 1,  numel = 50104

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8415e-01  +5.3467e+03  5.35e+03  4.24e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3145e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6447e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5929e+01  1.54e+01  4.30e-02  2.15e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0001e-01  +1.1971e+00  6.97e-01  2.09e-03  1.08e+00  2.35e-05  1.91e-01  2.04e-01  
  6  +5.0001e-01  +7.5306e-01  2.53e-01  7.56e-04  3.93e-01  7.49e-06  8.03e-02  6.31e-01  
  7  +5.0000e-01  +6.5734e-01  1.57e-01  4.70e-04  2.44e-01  4.47e-06  4.70e-02  5.32e-01  
  8  +5.0000e-01  +6.3198e-01  1.32e-01  3.94e-04  2.05e-01  3.86e-06  3.32e-02  3.86e-01  
  9  +5.0000e-01  +6.2859e-01  1.29e-01  3.84e-04  2.00e-01  3.30e-06  2.31e-02  5.58e-01  
 10  +5.0000e-01  +6.1175e-01  1.12e-01  3.32e-04  1.73e-01  2.13e-06  9.35e-03  9.90e-01  
 11  +4.9997e-01  +5.8091e-01  8.09e-02  1.47e-04  7.68e-02  1.65e-05  6.81e-04  9.42e-01  
 12  +4.9908e-01  +5.7668e-01  7.76e-02  7.23e-06  3.78e-03  4.45e-04  2.36e-05  9.65e-01  
 13  +4.9874e-01  +5.7303e-01  7.43e-02  6.28e-06  3.28e-03  4.46e-04  2.04e-05  1.76e-01  
 14  +4.9877e-01  +5.6713e-01  6.84e-02  6.06e-06  3.16e-03  2.66e-04  1.96e-05  3.02e-01  
 15  +4.9833e-01  +5.6424e-01  6.59e-02  5.01e-06  2.61e-03  2.80e-04  1.62e-05  2.16e-01  
 16  +4.9833e-01  +5.6273e-01  6.44e-02  4.95e-06  2.59e-03  2.34e-04  1.60e-05  1.28e-01  
 17  +4.9796e-01  +5.5992e-01  6.20e-02  4.18e-06  2.18e-03  2.16e-04  1.35e-05  2.75e-01  
 18  +4.9775e-01  +5.5828e-01  6.05e-02  4.15e-06  2.17e-03  1.94e-04  1.34e-05  5.82e-02  
 19  +4.9751e-01  +5.5629e-01  5.88e-02  3.96e-06  2.07e-03  1.66e-04  1.28e-05  1.53e-01  
 20  +4.9732e-01  +5.5307e-01  5.58e-02  3.84e-06  2.01e-03  8.54e-05  1.25e-05  3.74e-01  
 21  +4.9470e-01  +5.4119e-01  4.65e-02  2.50e-06  1.30e-03  7.92e-05  8.24e-06  3.98e-01  
 22  +4.9189e-01  +5.2667e-01  3.48e-02  1.84e-06  9.60e-04  7.84e-07  6.24e-06  7.86e-01  
 23  +4.9108e-01  +5.2321e-01  3.21e-02  1.64e-06  8.55e-04  5.69e-07  5.60e-06  3.39e-01  
 24  +4.8926e-01  +5.1572e-01  2.65e-02  1.27e-06  6.63e-04  3.93e-07  4.41e-06  3.96e-01  
 25  +4.8898e-01  +5.1447e-01  2.55e-02  1.19e-06  6.23e-04  3.21e-07  4.15e-06  3.54e-01  
 26  +4.8600e-01  +5.0255e-01  1.65e-02  7.19e-07  3.75e-04  1.78e-07  2.57e-06  5.98e-01  
 27  +4.8418e-01  +4.9538e-01  1.12e-02  4.67e-07  2.44e-04  1.17e-07  1.70e-06  4.48e-01  
 28  +4.8399e-01  +4.9460e-01  1.06e-02  4.38e-07  2.29e-04  1.11e-07  1.60e-06  2.07e-01  
 29  +4.8365e-01  +4.9321e-01  9.56e-03  3.86e-07  2.01e-04  1.01e-07  1.41e-06  6.12e-01  
 30  +4.8264e-01  +4.8934e-01  6.70e-03  2.67e-07  1.39e-04  7.11e-08  9.93e-07  3.95e-01  
 31  +4.8264e-01  +4.8932e-01  6.68e-03  2.66e-07  1.39e-04  7.13e-08  9.87e-07  9.51e-02  
 32  +4.8135e-01  +4.8445e-01  3.10e-03  1.22e-07  6.36e-05  3.29e-08  4.63e-07  5.82e-01  
 33  +4.8099e-01  +4.8304e-01  2.05e-03  7.99e-08  4.17e-05  2.24e-08  3.05e-07  9.90e-01  
 34  +4.8025e-01  +4.8033e-01  8.12e-05  3.16e-09  1.65e-06  8.52e-10  1.23e-08  9.81e-01  
 35  +4.8022e-01  +4.8022e-01  8.24e-07  3.21e-11  1.67e-08  8.64e-12  1.25e-10  9.90e-01  
 36  +4.8022e-01  +4.8022e-01  8.25e-09  3.21e-13  1.67e-10  8.64e-14  1.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5113348s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:31 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:31 PM: Optimal value: 4.802e-01
(CVXPY) Sep 20 07:52:31 PM: Compilation took 2.972e-01 seconds
(CVXPY) Sep 20 07:52:31 PM: Solver (including time spent in interface) took 1.578e+00 seconds
Iteration: 10, Objective: 0.4802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:32 PM: Your problem has 25114 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:32 PM: Finished problem compilation (took 2.693e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25114
  constraints   = 50114
  nnz(P)        = 0
  nnz(A)        = 405353
  cones (total) = 1
    : Nonnegative = 1,  numel = 50114

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8415e-01  +5.3467e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3143e+02  6.31e+02  1.70e-01  8.56e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6445e+02  1.64e+02  1.47e-01  7.44e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0122e-01  +1.5927e+01  1.54e+01  4.30e-02  2.15e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0001e-01  +1.1951e+00  6.95e-01  2.08e-03  1.08e+00  2.35e-05  1.91e-01  2.05e-01  
  6  +5.0000e-01  +7.3747e-01  2.37e-01  7.09e-04  3.69e-01  7.13e-06  7.62e-02  6.34e-01  
  7  +5.0000e-01  +6.4579e-01  1.46e-01  4.35e-04  2.27e-01  4.34e-06  4.34e-02  5.29e-01  
  8  +5.0000e-01  +6.2614e-01  1.26e-01  3.77e-04  1.96e-01  3.72e-06  2.92e-02  4.87e-01  
  9  +5.0000e-01  +6.1705e-01  1.17e-01  3.49e-04  1.82e-01  3.77e-06  1.97e-02  4.36e-01  
 10  +5.0000e-01  +6.0447e-01  1.04e-01  3.09e-04  1.61e-01  4.53e-06  7.40e-03  8.59e-01  
 11  +4.9988e-01  +5.8102e-01  8.11e-02  9.29e-05  4.85e-02  6.01e-05  3.59e-04  9.60e-01  
 12  +4.9829e-01  +5.7373e-01  7.54e-02  7.37e-06  3.85e-03  8.03e-04  2.43e-05  9.33e-01  
 13  +4.9823e-01  +5.6881e-01  7.06e-02  6.55e-06  3.42e-03  6.32e-04  2.13e-05  2.89e-01  
 14  +4.9822e-01  +5.6488e-01  6.67e-02  5.61e-06  2.93e-03  4.82e-04  1.82e-05  3.69e-01  
 15  +4.9834e-01  +5.6285e-01  6.45e-02  5.45e-06  2.85e-03  3.58e-04  1.77e-05  2.28e-01  
 16  +4.9791e-01  +5.6030e-01  6.24e-02  4.54e-06  2.37e-03  3.63e-04  1.47e-05  2.37e-01  
 17  +4.9775e-01  +5.5810e-01  6.04e-02  4.42e-06  2.31e-03  2.90e-04  1.43e-05  1.65e-01  
 18  +4.9689e-01  +5.5340e-01  5.65e-02  3.70e-06  1.93e-03  2.62e-04  1.20e-05  2.54e-01  
 19  +4.9472e-01  +5.4289e-01  4.82e-02  2.68e-06  1.40e-03  2.19e-04  8.83e-06  3.47e-01  
 20  +4.9395e-01  +5.3728e-01  4.33e-02  2.46e-06  1.29e-03  7.62e-05  8.21e-06  4.89e-01  
 21  +4.9044e-01  +5.2188e-01  3.14e-02  1.57e-06  8.19e-04  4.48e-05  5.35e-06  4.60e-01  
 22  +4.8935e-01  +5.1722e-01  2.79e-02  1.34e-06  7.00e-04  3.40e-05  4.62e-06  2.41e-01  
 23  +4.8873e-01  +5.1418e-01  2.55e-02  1.18e-06  6.18e-04  1.64e-05  4.10e-06  4.81e-01  
 24  +4.8578e-01  +5.0211e-01  1.63e-02  7.13e-07  3.72e-04  7.93e-06  2.53e-06  5.03e-01  
 25  +4.8398e-01  +4.9462e-01  1.06e-02  4.35e-07  2.27e-04  1.13e-06  1.57e-06  8.65e-01  
 26  +4.8395e-01  +4.9452e-01  1.06e-02  4.28e-07  2.23e-04  1.08e-06  1.54e-06  6.23e-02  
 27  +4.8386e-01  +4.9421e-01  1.03e-02  4.16e-07  2.17e-04  1.01e-06  1.50e-06  7.63e-02  
 28  +4.8336e-01  +4.9231e-01  8.96e-03  3.56e-07  1.86e-04  5.99e-07  1.29e-06  4.39e-01  
 29  +4.8218e-01  +4.8787e-01  5.69e-03  2.22e-07  1.16e-04  3.27e-07  8.18e-07  4.69e-01  
 30  +4.8103e-01  +4.8344e-01  2.41e-03  9.30e-08  4.86e-05  3.13e-08  3.49e-07  9.88e-01  
 31  +4.8059e-01  +4.8182e-01  1.23e-03  4.75e-08  2.48e-05  1.52e-08  1.80e-07  6.72e-01  
 32  +4.8014e-01  +4.8018e-01  4.12e-05  1.58e-09  8.25e-07  4.79e-10  6.07e-09  9.75e-01  
 33  +4.8012e-01  +4.8012e-01  4.21e-07  1.62e-11  8.44e-09  4.90e-12  6.22e-11  9.90e-01  
 34  +4.8012e-01  +4.8012e-01  4.21e-09  1.62e-13  8.44e-11  4.90e-14  6.22e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7870336s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:34 PM: Optimal value: 4.801e-01
(CVXPY) Sep 20 07:52:34 PM: Compilation took 2.693e-01 seconds
(CVXPY) Sep 20 07:52:34 PM: Solver (including time spent in interface) took 1.859e+00 seconds
Iteration: 11, Objective: 0.4801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:34 PM: Your problem has 25124 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:34 PM: Finished problem compilation (took 2.601e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25124
  constraints   = 50124
  nnz(P)        = 0
  nnz(A)        = 409528
  cones (total) = 1
    : Nonnegative = 1,  numel = 50124

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3466e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3144e+02  6.31e+02  1.70e-01  8.56e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6445e+02  1.64e+02  1.47e-01  7.44e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0122e-01  +1.5926e+01  1.54e+01  4.30e-02  2.15e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0001e-01  +1.1761e+00  6.76e-01  2.02e-03  1.05e+00  2.36e-05  1.91e-01  2.11e-01  
  6  +5.0000e-01  +7.4195e-01  2.42e-01  7.23e-04  3.76e-01  7.55e-06  7.82e-02  6.27e-01  
  7  +5.0000e-01  +6.4423e-01  1.44e-01  4.31e-04  2.24e-01  4.45e-06  4.31e-02  5.49e-01  
  8  +5.0000e-01  +6.2051e-01  1.21e-01  3.60e-04  1.87e-01  3.80e-06  2.68e-02  5.40e-01  
  9  +5.0000e-01  +6.1572e-01  1.16e-01  3.44e-04  1.79e-01  3.65e-06  1.21e-02  8.69e-01  
 10  +4.9999e-01  +5.8777e-01  8.78e-02  2.40e-04  1.25e-01  8.53e-06  2.19e-03  9.90e-01  
 11  +4.9939e-01  +5.8401e-01  8.46e-02  1.71e-05  8.93e-03  2.99e-04  5.72e-05  9.75e-01  
 12  +4.9865e-01  +5.7667e-01  7.80e-02  8.32e-06  4.35e-03  5.10e-04  2.75e-05  5.65e-01  
 13  +4.9865e-01  +5.6786e-01  6.92e-02  6.89e-06  3.60e-03  3.03e-04  2.25e-05  4.80e-01  
 14  +4.9869e-01  +5.6529e-01  6.66e-02  6.35e-06  3.32e-03  2.31e-04  2.06e-05  2.89e-01  
 15  +4.9855e-01  +5.6265e-01  6.41e-02  5.48e-06  2.87e-03  1.91e-04  1.77e-05  3.35e-01  
 16  +4.9834e-01  +5.5900e-01  6.07e-02  4.74e-06  2.48e-03  1.18e-04  1.54e-05  4.68e-01  
 17  +4.9823e-01  +5.5829e-01  6.01e-02  4.65e-06  2.43e-03  1.07e-04  1.51e-05  1.01e-01  
 18  +4.9618e-01  +5.4840e-01  5.22e-02  2.91e-06  1.52e-03  1.04e-04  9.52e-06  4.94e-01  
 19  +4.9363e-01  +5.3597e-01  4.23e-02  2.28e-06  1.19e-03  4.83e-05  7.62e-06  4.49e-01  
 20  +4.9338e-01  +5.3482e-01  4.14e-02  2.23e-06  1.16e-03  4.48e-05  7.43e-06  6.35e-02  
 21  +4.9310e-01  +5.3320e-01  4.01e-02  2.16e-06  1.13e-03  3.07e-05  7.23e-06  2.49e-01  
 22  +4.8971e-01  +5.1861e-01  2.89e-02  1.41e-06  7.39e-04  1.72e-05  4.85e-06  4.43e-01  
 23  +4.8812e-01  +5.1188e-01  2.38e-02  1.11e-06  5.79e-04  1.04e-05  3.84e-06  3.85e-01  
 24  +4.8671e-01  +5.0602e-01  1.93e-02  8.66e-07  4.52e-04  6.97e-06  3.04e-06  3.37e-01  
 25  +4.8573e-01  +5.0168e-01  1.59e-02  6.69e-07  3.50e-04  4.00e-07  2.36e-06  9.33e-01  
 26  +4.8416e-01  +4.9549e-01  1.13e-02  4.60e-07  2.40e-04  2.23e-07  1.64e-06  5.68e-01  
 27  +4.8412e-01  +4.9532e-01  1.12e-02  4.50e-07  2.35e-04  2.15e-07  1.60e-06  8.97e-02  
 28  +4.8396e-01  +4.9475e-01  1.08e-02  4.38e-07  2.29e-04  1.81e-07  1.57e-06  2.68e-01  
 29  +4.8303e-01  +4.9106e-01  8.03e-03  3.23e-07  1.69e-04  1.26e-07  1.17e-06  3.94e-01  
 30  +4.8301e-01  +4.9106e-01  8.04e-03  3.18e-07  1.66e-04  1.23e-07  1.15e-06  1.63e-01  
 31  +4.8287e-01  +4.9049e-01  7.63e-03  3.01e-07  1.57e-04  1.10e-07  1.09e-06  2.43e-01  
 32  +4.8129e-01  +4.8453e-01  3.24e-03  1.26e-07  6.57e-05  4.45e-08  4.67e-07  6.50e-01  
 33  +4.8053e-01  +4.8164e-01  1.11e-03  4.29e-08  2.24e-05  1.45e-08  1.62e-07  7.41e-01  
 34  +4.8022e-01  +4.8048e-01  2.59e-04  9.94e-09  5.19e-06  2.88e-09  3.80e-08  9.90e-01  
 35  +4.8012e-01  +4.8012e-01  3.56e-06  1.37e-10  7.13e-08  3.93e-11  5.25e-10  9.88e-01  
 36  +4.8012e-01  +4.8012e-01  3.56e-08  1.37e-12  7.13e-10  3.93e-13  5.25e-12  9.90e-01  
 37  +4.8012e-01  +4.8012e-01  3.57e-10  1.37e-14  7.16e-12  4.64e-15  6.14e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3887985s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:37 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:37 PM: Optimal value: 4.801e-01
(CVXPY) Sep 20 07:52:37 PM: Compilation took 2.601e-01 seconds
(CVXPY) Sep 20 07:52:37 PM: Solver (including time spent in interface) took 2.461e+00 seconds
Iteration: 12, Objective: 0.4801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:37 PM: Your problem has 25134 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:37 PM: Finished problem compilation (took 2.934e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25134
  constraints   = 50134
  nnz(P)        = 0
  nnz(A)        = 412895
  cones (total) = 1
    : Nonnegative = 1,  numel = 50134

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3467e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3136e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6443e+02  1.64e+02  1.47e-01  7.44e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5927e+01  1.54e+01  4.30e-02  2.15e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0001e-01  +1.1755e+00  6.75e-01  2.02e-03  1.05e+00  2.36e-05  1.91e-01  2.11e-01  
  6  +5.0000e-01  +7.4090e-01  2.41e-01  7.20e-04  3.75e-01  7.55e-06  7.79e-02  6.26e-01  
  7  +5.0000e-01  +6.4465e-01  1.45e-01  4.32e-04  2.25e-01  4.42e-06  4.30e-02  5.61e-01  
  8  +5.0000e-01  +6.2211e-01  1.22e-01  3.65e-04  1.90e-01  3.78e-06  2.71e-02  5.36e-01  
  9  +5.0000e-01  +6.1147e-01  1.11e-01  3.32e-04  1.73e-01  3.80e-06  1.13e-02  8.72e-01  
 10  +5.0000e-01  +5.9160e-01  9.16e-02  2.59e-04  1.35e-01  5.90e-06  2.94e-03  9.90e-01  
 11  +4.9957e-01  +5.8673e-01  8.72e-02  2.15e-05  1.13e-02  2.14e-04  7.22e-05  9.77e-01  
 12  +4.9872e-01  +5.7972e-01  8.10e-02  8.07e-06  4.22e-03  5.00e-04  2.66e-05  6.54e-01  
 13  +4.9831e-01  +5.6798e-01  6.97e-02  6.02e-06  3.15e-03  3.43e-04  1.96e-05  5.00e-01  
 14  +4.9851e-01  +5.6662e-01  6.81e-02  5.81e-06  3.04e-03  2.70e-04  1.88e-05  2.17e-01  
 15  +4.9858e-01  +5.6525e-01  6.67e-02  5.69e-06  2.97e-03  2.19e-04  1.84e-05  1.76e-01  
 16  +4.9821e-01  +5.6210e-01  6.39e-02  4.71e-06  2.46e-03  1.98e-04  1.53e-05  3.15e-01  
 17  +4.9805e-01  +5.6031e-01  6.23e-02  4.67e-06  2.44e-03  1.67e-04  1.51e-05  1.13e-01  
 18  +4.9704e-01  +5.5498e-01  5.79e-02  3.73e-06  1.95e-03  1.56e-04  1.22e-05  2.85e-01  
 19  +4.9452e-01  +5.4270e-01  4.82e-02  2.61e-06  1.36e-03  1.23e-04  8.63e-06  3.92e-01  
 20  +4.9224e-01  +5.3186e-01  3.96e-02  2.04e-06  1.07e-03  7.89e-05  6.87e-06  3.31e-01  
 21  +4.9175e-01  +5.2910e-01  3.73e-02  1.91e-06  9.97e-04  5.54e-05  6.46e-06  2.49e-01  
 22  +4.8840e-01  +5.1417e-01  2.58e-02  1.22e-06  6.36e-04  2.42e-05  4.22e-06  5.26e-01  
 23  +4.8573e-01  +5.0253e-01  1.68e-02  7.34e-07  3.83e-04  4.87e-06  2.60e-06  7.61e-01  
 24  +4.8401e-01  +4.9537e-01  1.14e-02  4.72e-07  2.47e-04  1.28e-06  1.69e-06  7.50e-01  
 25  +4.8389e-01  +4.9490e-01  1.10e-02  4.50e-07  2.35e-04  1.17e-06  1.61e-06  1.24e-01  
 26  +4.8380e-01  +4.9457e-01  1.08e-02  4.43e-07  2.32e-04  1.01e-06  1.60e-06  1.15e-01  
 27  +4.8272e-01  +4.9027e-01  7.54e-03  3.05e-07  1.59e-04  5.06e-07  1.11e-06  5.35e-01  
 28  +4.8233e-01  +4.8881e-01  6.48e-03  2.57e-07  1.35e-04  2.95e-07  9.35e-07  4.92e-01  
 29  +4.8112e-01  +4.8415e-01  3.03e-03  1.19e-07  6.22e-05  1.05e-07  4.39e-07  6.79e-01  
 30  +4.8109e-01  +4.8401e-01  2.92e-03  1.15e-07  6.00e-05  9.65e-08  4.24e-07  1.00e-01  
 31  +4.8096e-01  +4.8349e-01  2.53e-03  9.95e-08  5.20e-05  7.03e-08  3.67e-07  3.47e-01  
 32  +4.8089e-01  +4.8325e-01  2.35e-03  9.24e-08  4.82e-05  6.01e-08  3.41e-07  1.95e-01  
 33  +4.8074e-01  +4.8264e-01  1.90e-03  7.43e-08  3.88e-05  2.39e-08  2.74e-07  9.31e-01  
 34  +4.8018e-01  +4.8056e-01  3.80e-04  1.49e-08  7.76e-06  4.27e-09  5.55e-08  9.90e-01  
 35  +4.8004e-01  +4.8005e-01  6.99e-06  2.73e-10  1.42e-07  7.78e-11  1.02e-09  9.84e-01  
 36  +4.8004e-01  +4.8004e-01  7.01e-08  2.74e-12  1.43e-09  7.80e-13  1.02e-11  9.90e-01  
 37  +4.8004e-01  +4.8004e-01  7.20e-10  2.81e-14  1.47e-11  8.12e-15  1.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4678987s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:40 PM: Optimal value: 4.800e-01
(CVXPY) Sep 20 07:52:40 PM: Compilation took 2.934e-01 seconds
(CVXPY) Sep 20 07:52:40 PM: Solver (including time spent in interface) took 2.529e+00 seconds
Iteration: 13, Objective: 0.4800
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:40 PM: Your problem has 25144 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:41 PM: Finished problem compilation (took 3.562e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25144
  constraints   = 50144
  nnz(P)        = 0
  nnz(A)        = 417116
  cones (total) = 1
    : Nonnegative = 1,  numel = 50144

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8415e-01  +5.3468e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3491e-01  +6.3131e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6442e+02  1.64e+02  1.47e-01  7.44e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5931e+01  1.54e+01  4.31e-02  2.15e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0001e-01  +1.1761e+00  6.76e-01  2.02e-03  1.05e+00  2.36e-05  1.91e-01  2.11e-01  
  6  +5.0000e-01  +7.3812e-01  2.38e-01  7.11e-04  3.71e-01  7.46e-06  7.70e-02  6.29e-01  
  7  +5.0000e-01  +6.4682e-01  1.47e-01  4.39e-04  2.29e-01  4.46e-06  4.33e-02  5.59e-01  
  8  +5.0000e-01  +6.2096e-01  1.21e-01  3.61e-04  1.88e-01  3.72e-06  2.53e-02  6.05e-01  
  9  +5.0000e-01  +6.0170e-01  1.02e-01  3.02e-04  1.58e-01  4.88e-06  9.37e-03  7.88e-01  
 10  +4.9993e-01  +5.8619e-01  8.63e-02  1.69e-04  8.84e-02  3.62e-05  8.42e-04  9.46e-01  
 11  +4.9894e-01  +5.8108e-01  8.21e-02  1.64e-05  8.55e-03  5.11e-04  5.53e-05  9.35e-01  
 12  +4.9901e-01  +5.7123e-01  7.22e-02  1.17e-05  6.12e-03  3.63e-04  3.89e-05  5.95e-01  
 13  +4.9867e-01  +5.6351e-01  6.48e-02  7.30e-06  3.82e-03  3.16e-04  2.38e-05  6.74e-01  
 14  +4.9868e-01  +5.6243e-01  6.38e-02  6.66e-06  3.48e-03  2.63e-04  2.16e-05  2.84e-01  
 15  +4.9853e-01  +5.6127e-01  6.27e-02  5.76e-06  3.01e-03  2.52e-04  1.87e-05  2.60e-01  
 16  +4.9852e-01  +5.6072e-01  6.22e-02  5.56e-06  2.91e-03  2.18e-04  1.80e-05  1.71e-01  
 17  +4.9823e-01  +5.5881e-01  6.06e-02  4.90e-06  2.56e-03  1.83e-04  1.59e-05  3.02e-01  
 18  +4.9767e-01  +5.5507e-01  5.74e-02  4.16e-06  2.18e-03  1.15e-04  1.35e-05  4.75e-01  
 19  +4.9553e-01  +5.4512e-01  4.96e-02  2.86e-06  1.50e-03  8.52e-05  9.39e-06  5.13e-01  
 20  +4.9314e-01  +5.3442e-01  4.13e-02  2.22e-06  1.16e-03  5.45e-05  7.39e-06  3.63e-01  
 21  +4.8997e-01  +5.2031e-01  3.03e-02  1.52e-06  7.92e-04  1.22e-05  5.18e-06  6.75e-01  
 22  +4.8889e-01  +5.1574e-01  2.69e-02  1.30e-06  6.78e-04  9.03e-06  4.46e-06  2.61e-01  
 23  +4.8859e-01  +5.1434e-01  2.57e-02  1.21e-06  6.33e-04  5.58e-06  4.17e-06  3.74e-01  
 24  +4.8580e-01  +5.0289e-01  1.71e-02  7.59e-07  3.97e-04  3.29e-06  2.67e-06  4.11e-01  
 25  +4.8426e-01  +4.9651e-01  1.23e-02  5.16e-07  2.70e-04  1.23e-06  1.83e-06  6.48e-01  
 26  +4.8401e-01  +4.9554e-01  1.15e-02  4.76e-07  2.49e-04  1.07e-06  1.69e-06  1.71e-01  
 27  +4.8394e-01  +4.9528e-01  1.13e-02  4.71e-07  2.46e-04  9.50e-07  1.68e-06  9.63e-02  
 28  +4.8370e-01  +4.9433e-01  1.06e-02  4.39e-07  2.29e-04  8.70e-07  1.56e-06  9.22e-02  
 29  +4.8282e-01  +4.9082e-01  8.01e-03  3.24e-07  1.69e-04  5.88e-07  1.16e-06  3.52e-01  
 30  +4.8279e-01  +4.9072e-01  7.93e-03  3.21e-07  1.68e-04  5.19e-07  1.15e-06  1.37e-01  
 31  +4.8224e-01  +4.8862e-01  6.38e-03  2.54e-07  1.33e-04  3.80e-07  9.08e-07  3.00e-01  
 32  +4.8199e-01  +4.8762e-01  5.63e-03  2.22e-07  1.16e-04  2.13e-07  7.94e-07  5.18e-01  
 33  +4.8112e-01  +4.8425e-01  3.13e-03  1.22e-07  6.35e-05  3.73e-08  4.39e-07  9.90e-01  
 34  +4.8021e-01  +4.8088e-01  6.68e-04  2.58e-08  1.35e-05  7.61e-09  9.44e-08  9.90e-01  
 35  +4.7997e-01  +4.7999e-01  2.11e-05  8.13e-10  4.25e-07  2.38e-10  2.99e-09  9.74e-01  
 36  +4.7996e-01  +4.7996e-01  2.12e-07  8.17e-12  4.27e-09  2.40e-12  3.01e-11  9.90e-01  
 37  +4.7996e-01  +4.7996e-01  2.44e-09  9.40e-14  4.91e-11  2.86e-14  3.58e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4010608s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:43 PM: Optimal value: 4.800e-01
(CVXPY) Sep 20 07:52:43 PM: Compilation took 3.562e-01 seconds
(CVXPY) Sep 20 07:52:43 PM: Solver (including time spent in interface) took 2.481e+00 seconds
Iteration: 14, Objective: 0.4800
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:43 PM: Your problem has 25154 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:44 PM: Finished problem compilation (took 3.344e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25154
  constraints   = 50154
  nnz(P)        = 0
  nnz(A)        = 421433
  cones (total) = 1
    : Nonnegative = 1,  numel = 50154

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3469e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3491e-01  +6.3128e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6442e+02  1.64e+02  1.47e-01  7.44e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5932e+01  1.54e+01  4.31e-02  2.16e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0001e-01  +1.1772e+00  6.77e-01  2.03e-03  1.05e+00  2.36e-05  1.91e-01  2.11e-01  
  6  +5.0000e-01  +7.2101e-01  2.21e-01  6.60e-04  3.44e-01  6.35e-06  7.05e-02  7.21e-01  
  7  +5.0000e-01  +6.4776e-01  1.48e-01  4.41e-04  2.30e-01  4.32e-06  4.32e-02  4.70e-01  
  8  +5.0000e-01  +6.2042e-01  1.20e-01  3.60e-04  1.87e-01  3.79e-06  2.64e-02  5.13e-01  
  9  +5.0000e-01  +6.1752e-01  1.18e-01  3.50e-04  1.83e-01  3.96e-06  1.40e-02  7.15e-01  
 10  +4.9998e-01  +5.9568e-01  9.57e-02  2.66e-04  1.39e-01  1.19e-05  2.70e-03  8.59e-01  
 11  +4.9980e-01  +5.7354e-01  7.37e-02  5.86e-05  3.06e-02  9.81e-05  2.14e-04  9.90e-01  
 12  +4.9930e-01  +5.7065e-01  7.14e-02  1.78e-05  9.30e-03  3.24e-04  6.01e-05  7.36e-01  
 13  +4.9922e-01  +5.6729e-01  6.81e-02  1.31e-05  6.84e-03  3.02e-04  4.35e-05  5.11e-01  
 14  +4.9868e-01  +5.5875e-01  6.01e-02  5.98e-06  3.13e-03  2.79e-04  1.94e-05  9.73e-01  
 15  +4.9869e-01  +5.5878e-01  6.01e-02  5.88e-06  3.08e-03  2.62e-04  1.91e-05  9.04e-02  
 16  +4.9890e-01  +5.5998e-01  6.11e-02  5.58e-06  2.92e-03  1.56e-04  1.80e-05  4.77e-01  
 17  +4.9882e-01  +5.5960e-01  6.08e-02  5.28e-06  2.76e-03  1.32e-04  1.70e-05  2.22e-01  
 18  +4.9845e-01  +5.5795e-01  5.95e-02  4.54e-06  2.38e-03  1.07e-04  1.46e-05  3.76e-01  
 19  +4.9833e-01  +5.5736e-01  5.90e-02  4.46e-06  2.33e-03  9.75e-05  1.44e-05  9.58e-02  
 20  +4.9729e-01  +5.5278e-01  5.55e-02  3.53e-06  1.84e-03  1.01e-04  1.14e-05  2.44e-01  
 21  +4.9508e-01  +5.4291e-01  4.78e-02  2.66e-06  1.39e-03  7.59e-05  8.75e-06  3.70e-01  
 22  +4.9283e-01  +5.3277e-01  3.99e-02  2.15e-06  1.13e-03  3.35e-05  7.21e-06  4.65e-01  
 23  +4.8968e-01  +5.1909e-01  2.94e-02  1.46e-06  7.65e-04  4.05e-06  5.01e-06  7.66e-01  
 24  +4.8798e-01  +5.1205e-01  2.41e-02  1.14e-06  5.94e-04  2.70e-06  3.93e-06  3.46e-01  
 25  +4.8708e-01  +5.0834e-01  2.13e-02  9.70e-07  5.07e-04  1.85e-06  3.37e-06  3.35e-01  
 26  +4.8645e-01  +5.0574e-01  1.93e-02  8.48e-07  4.43e-04  1.00e-06  2.95e-06  4.94e-01  
 27  +4.8411e-01  +4.9635e-01  1.22e-02  5.14e-07  2.69e-04  5.28e-07  1.83e-06  4.95e-01  
 28  +4.8403e-01  +4.9603e-01  1.20e-02  4.98e-07  2.60e-04  4.57e-07  1.77e-06  1.82e-01  
 29  +4.8402e-01  +4.9601e-01  1.20e-02  4.97e-07  2.60e-04  4.54e-07  1.77e-06  5.75e-03  
 30  +4.8275e-01  +4.9100e-01  8.25e-03  3.31e-07  1.73e-04  2.06e-07  1.19e-06  6.47e-01  
 31  +4.8225e-01  +4.8908e-01  6.83e-03  2.71e-07  1.42e-04  1.51e-07  9.78e-07  3.44e-01  
 32  +4.8110e-01  +4.8457e-01  3.47e-03  1.35e-07  7.06e-05  4.03e-08  4.96e-07  9.90e-01  
 33  +4.8058e-01  +4.8265e-01  2.07e-03  8.00e-08  4.18e-05  2.39e-08  2.98e-07  4.42e-01  
 34  +4.8048e-01  +4.8225e-01  1.77e-03  6.83e-08  3.57e-05  2.02e-08  2.55e-07  7.09e-01  
 35  +4.8008e-01  +4.8082e-01  7.37e-04  2.82e-08  1.48e-05  8.31e-09  1.07e-07  7.62e-01  
 36  +4.7984e-01  +4.7994e-01  1.03e-04  3.94e-09  2.06e-06  1.15e-09  1.51e-08  9.90e-01  
 37  +4.7980e-01  +4.7980e-01  1.09e-06  4.14e-11  2.16e-08  1.20e-11  1.59e-10  9.90e-01  
 38  +4.7980e-01  +4.7980e-01  1.09e-08  4.14e-13  2.16e-10  1.20e-13  1.59e-12  9.90e-01  
 39  +4.7980e-01  +4.7980e-01  1.09e-10  4.19e-15  2.17e-12  1.54e-15  2.02e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.6254348s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:46 PM: Optimal value: 4.798e-01
(CVXPY) Sep 20 07:52:46 PM: Compilation took 3.344e-01 seconds
(CVXPY) Sep 20 07:52:46 PM: Solver (including time spent in interface) took 2.696e+00 seconds
Iteration: 15, Objective: 0.4798
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:47 PM: Your problem has 25159 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:47 PM: Finished problem compilation (took 3.501e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25159
  constraints   = 50159
  nnz(P)        = 0
  nnz(A)        = 422914
  cones (total) = 1
    : Nonnegative = 1,  numel = 50159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3469e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3491e-01  +6.3127e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6442e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5932e+01  1.54e+01  4.31e-02  2.16e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.1794e+00  6.79e-01  2.03e-03  1.06e+00  2.36e-05  1.91e-01  2.10e-01  
  6  +5.0000e-01  +7.3020e-01  2.30e-01  6.88e-04  3.58e-01  6.65e-06  7.31e-02  7.07e-01  
  7  +5.0000e-01  +6.6851e-01  1.69e-01  5.03e-04  2.62e-01  4.83e-06  4.98e-02  4.05e-01  
  8  +5.0000e-01  +6.3027e-01  1.30e-01  3.89e-04  2.03e-01  3.83e-06  3.07e-02  5.18e-01  
  9  +5.0000e-01  +6.0368e-01  1.04e-01  3.09e-04  1.61e-01  4.26e-06  1.32e-02  6.96e-01  
 10  +4.9998e-01  +5.9467e-01  9.47e-02  2.64e-04  1.38e-01  1.24e-05  2.72e-03  9.28e-01  
 11  +4.9963e-01  +5.7420e-01  7.46e-02  3.68e-05  1.93e-02  1.83e-04  1.29e-04  9.90e-01  
 12  +4.9898e-01  +5.6881e-01  6.98e-02  1.31e-05  6.84e-03  4.45e-04  4.38e-05  7.33e-01  
 13  +4.9858e-01  +5.6329e-01  6.47e-02  8.03e-06  4.20e-03  4.63e-04  2.64e-05  6.35e-01  
 14  +4.9842e-01  +5.6193e-01  6.35e-02  6.86e-06  3.59e-03  4.48e-04  2.23e-05  2.75e-01  
 15  +4.9832e-01  +5.6101e-01  6.27e-02  6.03e-06  3.16e-03  4.19e-04  1.96e-05  2.59e-01  
 16  +4.9832e-01  +5.6031e-01  6.20e-02  5.63e-06  2.94e-03  3.48e-04  1.82e-05  2.50e-01  
 17  +4.9813e-01  +5.5879e-01  6.07e-02  5.11e-06  2.67e-03  2.76e-04  1.66e-05  3.05e-01  
 18  +4.9794e-01  +5.5747e-01  5.95e-02  4.81e-06  2.51e-03  2.25e-04  1.56e-05  2.30e-01  
 19  +4.9641e-01  +5.5056e-01  5.42e-02  3.39e-06  1.77e-03  2.40e-04  1.10e-05  3.39e-01  
 20  +4.9379e-01  +5.3785e-01  4.41e-02  2.45e-06  1.28e-03  1.11e-04  8.13e-06  5.55e-01  
 21  +4.9146e-01  +5.2738e-01  3.59e-02  1.88e-06  9.81e-04  5.01e-05  6.33e-06  4.95e-01  
 22  +4.9048e-01  +5.2313e-01  3.26e-02  1.65e-06  8.63e-04  3.44e-05  5.61e-06  2.92e-01  
 23  +4.8876e-01  +5.1598e-01  2.72e-02  1.31e-06  6.86e-04  2.70e-05  4.51e-06  2.31e-01  
 24  +4.8869e-01  +5.1559e-01  2.69e-02  1.28e-06  6.70e-04  2.04e-05  4.41e-06  2.29e-01  
 25  +4.8656e-01  +5.0681e-01  2.03e-02  9.17e-07  4.79e-04  1.32e-05  3.20e-06  3.58e-01  
 26  +4.8541e-01  +5.0211e-01  1.67e-02  7.32e-07  3.82e-04  8.86e-06  2.58e-06  3.34e-01  
 27  +4.8320e-01  +4.9308e-01  9.89e-03  4.06e-07  2.12e-04  1.64e-06  1.45e-06  8.17e-01  
 28  +4.8314e-01  +4.9292e-01  9.78e-03  3.98e-07  2.08e-04  1.50e-06  1.43e-06  9.77e-02  
 29  +4.8312e-01  +4.9282e-01  9.70e-03  3.96e-07  2.07e-04  1.44e-06  1.42e-06  4.00e-02  
 30  +4.8307e-01  +4.9264e-01  9.57e-03  3.91e-07  2.04e-04  1.17e-06  1.40e-06  1.87e-01  
 31  +4.8261e-01  +4.9087e-01  8.26e-03  3.30e-07  1.73e-04  8.16e-07  1.19e-06  3.46e-01  
 32  +4.8192e-01  +4.8823e-01  6.31e-03  2.50e-07  1.31e-04  5.54e-07  9.12e-07  3.28e-01  
 33  +4.8146e-01  +4.8634e-01  4.88e-03  1.92e-07  1.00e-04  1.27e-07  7.03e-07  8.62e-01  
 34  +4.8048e-01  +4.8267e-01  2.20e-03  8.58e-08  4.48e-05  5.41e-08  3.21e-07  5.82e-01  
 35  +4.8002e-01  +4.8099e-01  9.69e-04  3.76e-08  1.96e-05  2.29e-08  1.43e-07  5.86e-01  
 36  +4.7983e-01  +4.8028e-01  4.51e-04  1.74e-08  9.10e-06  6.06e-09  6.67e-08  9.12e-01  
 37  +4.7967e-01  +4.7969e-01  2.03e-05  7.80e-10  4.07e-07  2.48e-10  3.02e-09  9.74e-01  
 38  +4.7966e-01  +4.7966e-01  2.06e-07  7.90e-12  4.13e-09  2.51e-12  3.06e-11  9.90e-01  
 39  +4.7966e-01  +4.7966e-01  2.06e-09  7.90e-14  4.13e-11  2.51e-14  3.06e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.805546s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:50 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:50 PM: Optimal value: 4.797e-01
(CVXPY) Sep 20 07:52:50 PM: Compilation took 3.501e-01 seconds
(CVXPY) Sep 20 07:52:50 PM: Solver (including time spent in interface) took 2.886e+00 seconds
Iteration: 16, Objective: 0.4797
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:50 PM: Your problem has 25162 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:51 PM: Finished problem compilation (took 3.362e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25162
  constraints   = 50162
  nnz(P)        = 0
  nnz(A)        = 423437
  cones (total) = 1
    : Nonnegative = 1,  numel = 50162

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3470e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3490e-01  +6.3120e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6440e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5935e+01  1.54e+01  4.31e-02  2.16e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.1681e+00  6.68e-01  2.00e-03  1.04e+00  2.36e-05  1.91e-01  2.14e-01  
  6  +5.0000e-01  +7.2976e-01  2.30e-01  6.86e-04  3.58e-01  6.81e-06  7.33e-02  7.04e-01  
  7  +5.0000e-01  +6.5740e-01  1.57e-01  4.70e-04  2.45e-01  4.56e-06  4.57e-02  4.92e-01  
  8  +5.0000e-01  +6.2167e-01  1.22e-01  3.63e-04  1.89e-01  3.64e-06  2.55e-02  6.17e-01  
  9  +5.0000e-01  +6.2386e-01  1.24e-01  3.68e-04  1.92e-01  3.45e-06  1.11e-02  9.36e-01  
 10  +4.9997e-01  +5.8331e-01  8.33e-02  1.79e-04  9.36e-02  1.90e-05  9.67e-04  9.64e-01  
 11  +4.9931e-01  +5.7924e-01  7.99e-02  1.52e-05  7.95e-03  3.36e-04  5.09e-05  9.50e-01  
 12  +4.9897e-01  +5.7348e-01  7.45e-02  9.87e-06  5.16e-03  3.92e-04  3.27e-05  4.83e-01  
 13  +4.9911e-01  +5.6621e-01  6.71e-02  8.21e-06  4.29e-03  1.75e-04  2.67e-05  6.36e-01  
 14  +4.9890e-01  +5.6297e-01  6.41e-02  6.45e-06  3.37e-03  1.34e-04  2.08e-05  5.21e-01  
 15  +4.9890e-01  +5.6270e-01  6.38e-02  6.38e-06  3.34e-03  1.20e-04  2.06e-05  1.05e-01  
 16  +4.9862e-01  +5.6113e-01  6.25e-02  5.46e-06  2.85e-03  1.23e-04  1.76e-05  2.12e-01  
 17  +4.9857e-01  +5.6023e-01  6.17e-02  5.03e-06  2.63e-03  8.57e-05  1.63e-05  3.76e-01  
 18  +4.9831e-01  +5.5809e-01  5.98e-02  4.72e-06  2.47e-03  4.89e-05  1.53e-05  4.31e-01  
 19  +4.9810e-01  +5.5712e-01  5.90e-02  4.53e-06  2.37e-03  4.18e-05  1.47e-05  1.74e-01  
 20  +4.9565e-01  +5.4631e-01  5.07e-02  2.73e-06  1.43e-03  4.30e-05  8.92e-06  4.89e-01  
 21  +4.9323e-01  +5.3542e-01  4.22e-02  2.21e-06  1.15e-03  2.63e-05  7.34e-06  3.26e-01  
 22  +4.9257e-01  +5.3246e-01  3.99e-02  2.07e-06  1.08e-03  2.12e-05  6.91e-06  1.66e-01  
 23  +4.9043e-01  +5.2332e-01  3.29e-02  1.62e-06  8.49e-04  1.38e-05  5.50e-06  3.30e-01  
 24  +4.8980e-01  +5.2065e-01  3.09e-02  1.49e-06  7.82e-04  1.09e-05  5.09e-06  1.99e-01  
 25  +4.8875e-01  +5.1626e-01  2.75e-02  1.29e-06  6.75e-04  6.35e-06  4.43e-06  3.92e-01  
 26  +4.8769e-01  +5.1188e-01  2.42e-02  1.11e-06  5.79e-04  4.91e-06  3.83e-06  2.29e-01  
 27  +4.8513e-01  +5.0153e-01  1.64e-02  7.10e-07  3.71e-04  2.72e-06  2.51e-06  4.46e-01  
 28  +4.8420e-01  +4.9784e-01  1.36e-02  5.77e-07  3.02e-04  2.10e-06  2.05e-06  2.43e-01  
 29  +4.8349e-01  +4.9486e-01  1.14e-02  4.64e-07  2.43e-04  1.01e-06  1.66e-06  5.57e-01  
 30  +4.8346e-01  +4.9476e-01  1.13e-02  4.63e-07  2.42e-04  9.79e-07  1.66e-06  2.73e-02  
 31  +4.8249e-01  +4.9098e-01  8.49e-03  3.41e-07  1.78e-04  5.90e-07  1.24e-06  4.22e-01  
 32  +4.8239e-01  +4.9052e-01  8.13e-03  3.24e-07  1.69e-04  3.72e-07  1.17e-06  4.41e-01  
 33  +4.8168e-01  +4.8783e-01  6.15e-03  2.43e-07  1.27e-04  2.71e-07  8.88e-07  2.76e-01  
 34  +4.8113e-01  +4.8561e-01  4.48e-03  1.75e-07  9.15e-05  5.57e-08  6.43e-07  9.90e-01  
 35  +4.8033e-01  +4.8266e-01  2.33e-03  9.06e-08  4.73e-05  2.86e-08  3.38e-07  5.35e-01  
 36  +4.7957e-01  +4.7987e-01  2.94e-04  1.13e-08  5.93e-06  3.45e-09  4.32e-08  9.16e-01  
 37  +4.7946e-01  +4.7947e-01  9.38e-06  3.60e-10  1.88e-07  1.06e-10  1.38e-09  9.81e-01  
 38  +4.7946e-01  +4.7946e-01  9.40e-08  3.60e-12  1.88e-09  1.06e-12  1.39e-11  9.90e-01  
 39  +4.7946e-01  +4.7946e-01  9.40e-10  3.60e-14  1.88e-11  1.06e-14  1.39e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.352168s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:53 PM: Optimal value: 4.795e-01
(CVXPY) Sep 20 07:52:53 PM: Compilation took 3.362e-01 seconds
(CVXPY) Sep 20 07:52:53 PM: Solver (including time spent in interface) took 2.421e+00 seconds
Iteration: 17, Objective: 0.4795
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:53 PM: Your problem has 25163 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:54 PM: Finished problem compilation (took 3.481e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25163
  constraints   = 50163
  nnz(P)        = 0
  nnz(A)        = 423840
  cones (total) = 1
    : Nonnegative = 1,  numel = 50163

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3470e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3490e-01  +6.3123e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6440e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5934e+01  1.54e+01  4.31e-02  2.16e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.1728e+00  6.73e-01  2.01e-03  1.05e+00  2.36e-05  1.91e-01  2.12e-01  
  6  +5.0000e-01  +7.3285e-01  2.33e-01  6.96e-04  3.63e-01  6.87e-06  7.41e-02  6.98e-01  
  7  +5.0000e-01  +6.6727e-01  1.67e-01  5.00e-04  2.60e-01  4.85e-06  4.91e-02  4.38e-01  
  8  +5.0000e-01  +6.2788e-01  1.28e-01  3.82e-04  1.99e-01  3.76e-06  2.86e-02  5.82e-01  
  9  +5.0000e-01  +6.2551e-01  1.26e-01  3.74e-04  1.95e-01  3.51e-06  1.44e-02  8.11e-01  
 10  +4.9999e-01  +5.9676e-01  9.68e-02  2.74e-04  1.43e-01  6.33e-06  3.12e-03  9.90e-01  
 11  +4.9971e-01  +5.9247e-01  9.28e-02  3.48e-05  1.82e-02  1.47e-04  1.20e-04  9.65e-01  
 12  +4.9888e-01  +5.8566e-01  8.68e-02  1.01e-05  5.27e-03  4.67e-04  3.35e-05  7.33e-01  
 13  +4.9880e-01  +5.7940e-01  8.06e-02  8.70e-06  4.55e-03  3.83e-04  2.87e-05  2.93e-01  
 14  +4.9874e-01  +5.7073e-01  7.20e-02  7.24e-06  3.79e-03  2.31e-04  2.36e-05  4.75e-01  
 15  +4.9882e-01  +5.6709e-01  6.83e-02  6.56e-06  3.43e-03  1.44e-04  2.12e-05  4.17e-01  
 16  +4.9878e-01  +5.6500e-01  6.62e-02  6.12e-06  3.20e-03  1.06e-04  1.98e-05  3.01e-01  
 17  +4.9828e-01  +5.6175e-01  6.35e-02  4.79e-06  2.50e-03  1.03e-04  1.55e-05  3.52e-01  
 18  +4.9800e-01  +5.6038e-01  6.24e-02  4.75e-06  2.48e-03  9.40e-05  1.55e-05  5.54e-02  
 19  +4.9657e-01  +5.5250e-01  5.59e-02  3.53e-06  1.85e-03  6.97e-05  1.15e-05  4.72e-01  
 20  +4.9646e-01  +5.5173e-01  5.53e-02  3.51e-06  1.84e-03  6.22e-05  1.15e-05  7.80e-02  
 21  +4.9520e-01  +5.4596e-01  5.08e-02  2.99e-06  1.57e-03  5.47e-05  9.87e-06  1.98e-01  
 22  +4.9334e-01  +5.3718e-01  4.38e-02  2.44e-06  1.27e-03  3.26e-05  8.13e-06  3.85e-01  
 23  +4.9046e-01  +5.2449e-01  3.40e-02  1.72e-06  9.01e-04  1.97e-05  5.86e-06  4.10e-01  
 24  +4.8996e-01  +5.2221e-01  3.22e-02  1.60e-06  8.37e-04  1.58e-05  5.47e-06  1.91e-01  
 25  +4.8916e-01  +5.1877e-01  2.96e-02  1.43e-06  7.49e-04  1.24e-05  4.92e-06  2.10e-01  
 26  +4.8809e-01  +5.1350e-01  2.54e-02  1.16e-06  6.05e-04  1.32e-07  4.00e-06  9.05e-01  
 27  +4.8647e-01  +5.0699e-01  2.05e-02  9.05e-07  4.73e-04  1.18e-07  3.17e-06  3.20e-01  
 28  +4.8476e-01  +5.0015e-01  1.54e-02  6.58e-07  3.44e-04  9.14e-08  2.33e-06  3.07e-01  
 29  +4.8461e-01  +4.9949e-01  1.49e-02  6.28e-07  3.28e-04  1.04e-07  2.23e-06  2.68e-01  
 30  +4.8326e-01  +4.9413e-01  1.09e-02  4.44e-07  2.32e-04  8.56e-08  1.59e-06  4.57e-01  
 31  +4.8322e-01  +4.9397e-01  1.08e-02  4.43e-07  2.32e-04  8.44e-08  1.59e-06  2.00e-02  
 32  +4.8257e-01  +4.9141e-01  8.84e-03  3.59e-07  1.88e-04  7.46e-08  1.30e-06  3.46e-01  
 33  +4.8253e-01  +4.9122e-01  8.69e-03  3.49e-07  1.82e-04  7.97e-08  1.26e-06  2.90e-01  
 34  +4.8064e-01  +4.8393e-01  3.29e-03  1.30e-07  6.80e-05  3.08e-08  4.82e-07  6.87e-01  
 35  +4.7973e-01  +4.8048e-01  7.43e-04  2.91e-08  1.52e-05  7.05e-09  1.10e-07  8.02e-01  
 36  +4.7954e-01  +4.7975e-01  2.12e-04  8.24e-09  4.30e-06  2.19e-09  3.14e-08  8.92e-01  
 37  +4.7946e-01  +4.7947e-01  1.08e-05  4.18e-10  2.18e-07  1.11e-10  1.60e-09  9.50e-01  
 38  +4.7946e-01  +4.7946e-01  1.09e-07  4.23e-12  2.21e-09  1.13e-12  1.62e-11  9.90e-01  
 39  +4.7946e-01  +4.7946e-01  1.09e-09  4.23e-14  2.21e-11  1.13e-14  1.62e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8643712s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:52:57 PM: Optimal value: 4.795e-01
(CVXPY) Sep 20 07:52:57 PM: Compilation took 3.481e-01 seconds
(CVXPY) Sep 20 07:52:57 PM: Solver (including time spent in interface) took 2.938e+00 seconds
Iteration: 18, Objective: 0.4795
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:52:57 PM: Your problem has 25171 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:52:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:52:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:52:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:52:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:52:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:52:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:52:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:52:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:52:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:52:57 PM: Finished problem compilation (took 3.610e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:52:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25171
  constraints   = 50171
  nnz(P)        = 0
  nnz(A)        = 426591
  cones (total) = 1
    : Nonnegative = 1,  numel = 50171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3469e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3490e-01  +6.3118e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6439e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5934e+01  1.54e+01  4.31e-02  2.16e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.1740e+00  6.74e-01  2.02e-03  1.05e+00  2.36e-05  1.91e-01  2.12e-01  
  6  +5.0000e-01  +7.2349e-01  2.23e-01  6.68e-04  3.48e-01  6.62e-06  7.15e-02  7.01e-01  
  7  +5.0000e-01  +6.6115e-01  1.61e-01  4.81e-04  2.51e-01  4.83e-06  4.75e-02  4.12e-01  
  8  +5.0000e-01  +6.3358e-01  1.34e-01  3.99e-04  2.08e-01  4.10e-06  3.09e-02  4.85e-01  
  9  +5.0000e-01  +6.3418e-01  1.34e-01  4.00e-04  2.08e-01  3.33e-06  1.54e-02  8.94e-01  
 10  +4.9999e-01  +5.9314e-01  9.31e-02  2.60e-04  1.36e-01  6.98e-06  2.69e-03  9.90e-01  
 11  +4.9940e-01  +5.8622e-01  8.68e-02  1.65e-05  8.61e-03  2.96e-04  5.54e-05  9.83e-01  
 12  +4.9866e-01  +5.7774e-01  7.91e-02  8.16e-06  4.27e-03  4.74e-04  2.71e-05  5.75e-01  
 13  +4.9868e-01  +5.7597e-01  7.73e-02  7.99e-06  4.18e-03  4.20e-04  2.64e-05  1.07e-01  
 14  +4.9836e-01  +5.6936e-01  7.10e-02  6.38e-06  3.34e-03  3.31e-04  2.08e-05  4.17e-01  
 15  +4.9812e-01  +5.6721e-01  6.91e-02  5.55e-06  2.90e-03  3.20e-04  1.80e-05  2.21e-01  
 16  +4.9817e-01  +5.6618e-01  6.80e-02  5.48e-06  2.86e-03  2.67e-04  1.78e-05  1.44e-01  
 17  +4.9785e-01  +5.6420e-01  6.63e-02  4.80e-06  2.51e-03  2.59e-04  1.56e-05  2.00e-01  
 18  +4.9769e-01  +5.6133e-01  6.36e-02  4.66e-06  2.44e-03  1.79e-04  1.52e-05  2.54e-01  
 19  +4.9659e-01  +5.5434e-01  5.77e-02  3.70e-06  1.94e-03  1.09e-04  1.21e-05  5.02e-01  
 20  +4.9399e-01  +5.4178e-01  4.78e-02  2.65e-06  1.39e-03  7.32e-05  8.80e-06  4.35e-01  
 21  +4.9150e-01  +5.2933e-01  3.78e-02  2.01e-06  1.05e-03  1.08e-05  6.83e-06  7.04e-01  
 22  +4.8995e-01  +5.2263e-01  3.27e-02  1.64e-06  8.59e-04  5.88e-06  5.64e-06  4.33e-01  
 23  +4.8806e-01  +5.1473e-01  2.67e-02  1.27e-06  6.62e-04  3.93e-06  4.41e-06  3.41e-01  
 24  +4.8800e-01  +5.1444e-01  2.64e-02  1.25e-06  6.51e-04  3.41e-06  4.34e-06  1.35e-01  
 25  +4.8727e-01  +5.1139e-01  2.41e-02  1.11e-06  5.79e-04  2.59e-06  3.88e-06  2.46e-01  
 26  +4.8687e-01  +5.0970e-01  2.28e-02  1.03e-06  5.36e-04  1.86e-06  3.60e-06  3.00e-01  
 27  +4.8397e-01  +4.9808e-01  1.41e-02  5.99e-07  3.13e-04  9.59e-07  2.16e-06  4.85e-01  
 28  +4.8350e-01  +4.9615e-01  1.27e-02  5.28e-07  2.76e-04  7.08e-07  1.91e-06  2.97e-01  
 29  +4.8319e-01  +4.9490e-01  1.17e-02  4.84e-07  2.53e-04  6.13e-07  1.76e-06  1.53e-01  
 30  +4.8254e-01  +4.9208e-01  9.54e-03  3.81e-07  1.99e-04  1.31e-07  1.39e-06  9.52e-01  
 31  +4.8167e-01  +4.8877e-01  7.10e-03  2.82e-07  1.47e-04  9.19e-08  1.04e-06  4.86e-01  
 32  +4.8165e-01  +4.8870e-01  7.04e-03  2.79e-07  1.46e-04  9.05e-08  1.03e-06  5.40e-02  
 33  +4.8114e-01  +4.8668e-01  5.55e-03  2.18e-07  1.14e-04  6.26e-08  8.09e-07  9.90e-01  
 34  +4.7956e-01  +4.8079e-01  1.23e-03  4.80e-08  2.51e-05  1.37e-08  1.84e-07  9.00e-01  
 35  +4.7913e-01  +4.7919e-01  6.79e-05  2.64e-09  1.38e-06  7.28e-10  1.02e-08  9.85e-01  
 36  +4.7910e-01  +4.7910e-01  6.88e-07  2.67e-11  1.40e-08  7.37e-12  1.03e-10  9.90e-01  
 37  +4.7910e-01  +4.7910e-01  6.88e-09  2.67e-13  1.40e-10  7.37e-14  1.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.6263115s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:00 PM: Problem status: optimal
(CVXPY) Sep 20 07:53:00 PM: Optimal value: 4.791e-01
(CVXPY) Sep 20 07:53:00 PM: Compilation took 3.610e-01 seconds
(CVXPY) Sep 20 07:53:00 PM: Solver (including time spent in interface) took 2.695e+00 seconds
Iteration: 19, Objective: 0.4791
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:53:01 PM: Your problem has 25181 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:53:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:53:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:53:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:53:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:53:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:53:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:53:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:53:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:53:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:53:01 PM: Finished problem compilation (took 3.214e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25181
  constraints   = 50181
  nnz(P)        = 0
  nnz(A)        = 429301
  cones (total) = 1
    : Nonnegative = 1,  numel = 50181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3468e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3489e-01  +6.3112e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6437e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5932e+01  1.54e+01  4.31e-02  2.16e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.1733e+00  6.73e-01  2.02e-03  1.05e+00  2.36e-05  1.91e-01  2.13e-01  
  6  +5.0000e-01  +7.3037e-01  2.30e-01  6.88e-04  3.59e-01  6.88e-06  7.35e-02  6.92e-01  
  7  +5.0000e-01  +6.6139e-01  1.61e-01  4.82e-04  2.51e-01  4.83e-06  4.70e-02  4.53e-01  
  8  +5.0000e-01  +6.3929e-01  1.39e-01  4.16e-04  2.17e-01  3.98e-06  3.00e-02  5.71e-01  
  9  +5.0000e-01  +6.2751e-01  1.28e-01  3.80e-04  1.98e-01  3.40e-06  1.27e-02  9.25e-01  
 10  +4.9997e-01  +5.8592e-01  8.60e-02  1.95e-04  1.02e-01  1.82e-05  1.12e-03  9.64e-01  
 11  +4.9936e-01  +5.8264e-01  8.33e-02  1.83e-05  9.57e-03  3.11e-04  6.18e-05  9.46e-01  
 12  +4.9882e-01  +5.7532e-01  7.65e-02  9.84e-06  5.15e-03  4.38e-04  3.27e-05  5.86e-01  
 13  +4.9896e-01  +5.7180e-01  7.28e-02  8.95e-06  4.68e-03  2.99e-04  2.95e-05  3.77e-01  
 14  +4.9870e-01  +5.6884e-01  7.01e-02  7.20e-06  3.77e-03  2.89e-04  2.36e-05  3.39e-01  
 15  +4.9871e-01  +5.6790e-01  6.92e-02  6.99e-06  3.66e-03  2.45e-04  2.29e-05  1.68e-01  
 16  +4.9839e-01  +5.6595e-01  6.76e-02  5.92e-06  3.10e-03  2.52e-04  1.94e-05  2.19e-01  
 17  +4.9831e-01  +5.6427e-01  6.60e-02  5.81e-06  3.04e-03  1.91e-04  1.90e-05  2.07e-01  
 18  +4.9800e-01  +5.6240e-01  6.44e-02  5.18e-06  2.71e-03  1.77e-04  1.69e-05  2.15e-01  
 19  +4.9785e-01  +5.6080e-01  6.29e-02  4.89e-06  2.56e-03  1.32e-04  1.60e-05  2.78e-01  
 20  +4.9757e-01  +5.5878e-01  6.12e-02  4.68e-06  2.45e-03  8.97e-05  1.53e-05  2.98e-01  
 21  +4.9624e-01  +5.5269e-01  5.65e-02  3.63e-06  1.90e-03  9.04e-05  1.20e-05  2.54e-01  
 22  +4.9369e-01  +5.4100e-01  4.73e-02  2.64e-06  1.38e-03  7.22e-05  8.82e-06  3.42e-01  
 23  +4.9326e-01  +5.3889e-01  4.56e-02  2.53e-06  1.32e-03  5.95e-05  8.48e-06  1.47e-01  
 24  +4.9132e-01  +5.3020e-01  3.89e-02  2.03e-06  1.06e-03  4.34e-05  6.89e-06  2.82e-01  
 25  +4.9103e-01  +5.2886e-01  3.78e-02  1.95e-06  1.02e-03  3.47e-05  6.62e-06  1.84e-01  
 26  +4.8995e-01  +5.2398e-01  3.40e-02  1.69e-06  8.83e-04  2.07e-05  5.79e-06  3.70e-01  
 27  +4.8971e-01  +5.2286e-01  3.31e-02  1.63e-06  8.52e-04  1.65e-05  5.60e-06  1.82e-01  
 28  +4.8906e-01  +5.2005e-01  3.10e-02  1.49e-06  7.77e-04  1.08e-05  5.13e-06  3.25e-01  
 29  +4.8752e-01  +5.1330e-01  2.58e-02  1.17e-06  6.12e-04  1.13e-07  4.08e-06  9.00e-01  
 30  +4.8491e-01  +5.0276e-01  1.79e-02  7.75e-07  4.05e-04  8.47e-08  2.76e-06  3.85e-01  
 31  +4.8289e-01  +4.9462e-01  1.17e-02  4.90e-07  2.56e-04  6.84e-08  1.78e-06  4.93e-01  
 32  +4.8193e-01  +4.9061e-01  8.68e-03  3.52e-07  1.84e-04  8.24e-08  1.29e-06  8.41e-01  
 33  +4.7999e-01  +4.8306e-01  3.07e-03  1.22e-07  6.35e-05  3.25e-08  4.58e-07  9.03e-01  
 34  +4.7942e-01  +4.8092e-01  1.51e-03  5.91e-08  3.09e-05  1.61e-08  2.26e-07  6.29e-01  
 35  +4.7893e-01  +4.7913e-01  1.94e-04  7.58e-09  3.96e-06  2.08e-09  2.93e-08  9.90e-01  
 36  +4.7886e-01  +4.7886e-01  2.06e-06  8.05e-11  4.21e-08  2.21e-11  3.12e-10  9.89e-01  
 37  +4.7886e-01  +4.7886e-01  2.07e-08  8.06e-13  4.21e-10  2.21e-13  3.12e-12  9.90e-01  
 38  +4.7886e-01  +4.7886e-01  2.17e-09  8.45e-14  4.42e-11  2.33e-14  3.29e-13  8.96e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4366668s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:53:03 PM: Optimal value: 4.789e-01
(CVXPY) Sep 20 07:53:03 PM: Compilation took 3.214e-01 seconds
(CVXPY) Sep 20 07:53:03 PM: Solver (including time spent in interface) took 2.516e+00 seconds
Iteration: 20, Objective: 0.4789
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:53:04 PM: Your problem has 25182 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:53:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:53:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:53:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:53:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:53:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:53:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:53:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:53:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:53:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:53:04 PM: Finished problem compilation (took 3.386e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25182
  constraints   = 50182
  nnz(P)        = 0
  nnz(A)        = 429689
  cones (total) = 1
    : Nonnegative = 1,  numel = 50182

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8415e-01  +5.3468e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3489e-01  +6.3109e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6436e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5932e+01  1.54e+01  4.31e-02  2.16e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.1739e+00  6.74e-01  2.02e-03  1.05e+00  2.36e-05  1.91e-01  2.13e-01  
  6  +5.0000e-01  +7.2779e-01  2.28e-01  6.81e-04  3.55e-01  6.76e-06  7.26e-02  6.99e-01  
  7  +5.0000e-01  +6.6274e-01  1.63e-01  4.86e-04  2.54e-01  4.84e-06  4.73e-02  4.41e-01  
  8  +5.0000e-01  +6.4024e-01  1.40e-01  4.19e-04  2.18e-01  3.95e-06  3.02e-02  5.76e-01  
  9  +5.0000e-01  +6.2903e-01  1.29e-01  3.84e-04  2.00e-01  3.27e-06  1.29e-02  9.33e-01  
 10  +4.9998e-01  +5.9579e-01  9.58e-02  2.33e-04  1.22e-01  1.52e-05  1.51e-03  9.18e-01  
 11  +4.9928e-01  +5.8785e-01  8.86e-02  1.70e-05  8.90e-03  3.53e-04  5.73e-05  9.68e-01  
 12  +4.9884e-01  +5.7943e-01  8.06e-02  1.03e-05  5.40e-03  4.22e-04  3.43e-05  5.25e-01  
 13  +4.9885e-01  +5.7338e-01  7.45e-02  8.56e-06  4.48e-03  2.97e-04  2.81e-05  4.51e-01  
 14  +4.9865e-01  +5.7104e-01  7.24e-02  7.31e-06  3.82e-03  2.91e-04  2.39e-05  2.47e-01  
 15  +4.9867e-01  +5.6963e-01  7.10e-02  7.15e-06  3.74e-03  2.36e-04  2.34e-05  1.74e-01  
 16  +4.9850e-01  +5.6683e-01  6.83e-02  6.19e-06  3.24e-03  1.88e-04  2.02e-05  3.52e-01  
 17  +4.9845e-01  +5.6535e-01  6.69e-02  6.08e-06  3.18e-03  1.46e-04  1.99e-05  1.95e-01  
 18  +4.9806e-01  +5.6309e-01  6.50e-02  5.24e-06  2.74e-03  1.45e-04  1.71e-05  2.10e-01  
 19  +4.9800e-01  +5.6230e-01  6.43e-02  5.16e-06  2.70e-03  1.21e-04  1.69e-05  1.48e-01  
 20  +4.9710e-01  +5.5701e-01  5.99e-02  4.08e-06  2.13e-03  7.26e-05  1.33e-05  5.62e-01  
 21  +4.9679e-01  +5.5507e-01  5.83e-02  3.95e-06  2.07e-03  5.66e-05  1.30e-05  1.87e-01  
 22  +4.9352e-01  +5.4007e-01  4.66e-02  2.51e-06  1.31e-03  4.29e-05  8.39e-06  4.77e-01  
 23  +4.9322e-01  +5.3858e-01  4.54e-02  2.45e-06  1.28e-03  3.50e-05  8.20e-06  1.44e-01  
 24  +4.9175e-01  +5.3187e-01  4.01e-02  2.10e-06  1.10e-03  2.12e-05  7.09e-06  3.50e-01  
 25  +4.9108e-01  +5.2899e-01  3.79e-02  1.94e-06  1.01e-03  1.81e-05  6.59e-06  1.45e-01  
 26  +4.9002e-01  +5.2435e-01  3.43e-02  1.70e-06  8.88e-04  1.12e-05  5.82e-06  3.48e-01  
 27  +4.8844e-01  +5.1769e-01  2.92e-02  1.39e-06  7.27e-04  6.47e-06  4.83e-06  3.94e-01  
 28  +4.8688e-01  +5.1103e-01  2.42e-02  1.09e-06  5.67e-04  1.33e-06  3.82e-06  7.49e-01  
 29  +4.8366e-01  +4.9805e-01  1.44e-02  6.13e-07  3.20e-04  6.43e-07  2.22e-06  5.14e-01  
 30  +4.8113e-01  +4.8791e-01  6.78e-03  2.75e-07  1.44e-04  1.85e-07  1.03e-06  7.55e-01  
 31  +4.7952e-01  +4.8158e-01  2.06e-03  8.16e-08  4.27e-05  2.35e-08  3.12e-07  9.90e-01  
 32  +4.7884e-01  +4.7905e-01  2.14e-04  8.42e-09  4.40e-06  2.21e-09  3.28e-08  9.90e-01  
 33  +4.7876e-01  +4.7876e-01  2.54e-06  9.99e-11  5.22e-08  2.62e-11  3.90e-10  9.88e-01  
 34  +4.7876e-01  +4.7876e-01  2.55e-08  1.00e-12  5.23e-10  2.62e-13  3.91e-12  9.90e-01  
 35  +4.7876e-01  +4.7876e-01  2.91e-09  1.14e-13  5.98e-11  3.01e-14  4.48e-13  8.87e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4197545s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:53:07 PM: Optimal value: 4.788e-01
(CVXPY) Sep 20 07:53:07 PM: Compilation took 3.386e-01 seconds
(CVXPY) Sep 20 07:53:07 PM: Solver (including time spent in interface) took 2.491e+00 seconds
Iteration: 21, Objective: 0.4788
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:53:07 PM: Your problem has 25192 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:53:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:53:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:53:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:53:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:53:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:53:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:53:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:53:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:53:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:53:07 PM: Finished problem compilation (took 3.949e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25192
  constraints   = 50192
  nnz(P)        = 0
  nnz(A)        = 433402
  cones (total) = 1
    : Nonnegative = 1,  numel = 50192

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3464e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3489e-01  +6.3106e+02  6.31e+02  1.70e-01  8.54e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6433e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0122e-01  +1.5924e+01  1.54e+01  4.31e-02  2.15e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0000e-01  +1.1515e+00  6.52e-01  1.95e-03  1.01e+00  2.36e-05  1.91e-01  2.20e-01  
  6  +5.0000e-01  +7.3190e-01  2.32e-01  6.93e-04  3.61e-01  7.16e-06  7.43e-02  6.99e-01  
  7  +5.0000e-01  +6.6340e-01  1.63e-01  4.88e-04  2.55e-01  5.01e-06  4.72e-02  4.68e-01  
  8  +5.0000e-01  +6.3134e-01  1.31e-01  3.92e-04  2.05e-01  4.19e-06  2.69e-02  6.09e-01  
  9  +5.0000e-01  +6.1818e-01  1.18e-01  3.51e-04  1.83e-01  5.53e-06  9.58e-03  8.67e-01  
 10  +4.9996e-01  +5.9478e-01  9.48e-02  2.15e-04  1.12e-01  2.29e-05  1.27e-03  9.90e-01  
 11  +4.9896e-01  +5.8937e-01  9.04e-02  1.55e-05  8.09e-03  5.07e-04  5.28e-05  9.59e-01  
 12  +4.9889e-01  +5.8102e-01  8.21e-02  1.18e-05  6.17e-03  4.12e-04  3.97e-05  4.68e-01  
 13  +4.9885e-01  +5.7306e-01  7.42e-02  9.10e-06  4.76e-03  2.60e-04  3.02e-05  5.81e-01  
 14  +4.9900e-01  +5.6989e-01  7.09e-02  8.52e-06  4.46e-03  1.29e-04  2.81e-05  4.98e-01  
 15  +4.9828e-01  +5.6437e-01  6.61e-02  5.70e-06  2.98e-03  1.35e-04  1.86e-05  4.99e-01  
 16  +4.9823e-01  +5.6412e-01  6.59e-02  5.29e-06  2.77e-03  1.18e-04  1.73e-05  2.27e-01  
 17  +4.9798e-01  +5.6240e-01  6.44e-02  5.17e-06  2.71e-03  8.73e-05  1.69e-05  2.29e-01  
 18  +4.9579e-01  +5.5200e-01  5.62e-02  3.26e-06  1.71e-03  7.62e-05  1.07e-05  5.51e-01  
 19  +4.9366e-01  +5.4035e-01  4.67e-02  2.84e-06  1.49e-03  2.75e-06  9.52e-06  7.22e-01  
 20  +4.9228e-01  +5.3421e-01  4.19e-02  2.37e-06  1.24e-03  1.87e-06  7.99e-06  3.64e-01  
 21  +4.9150e-01  +5.3085e-01  3.94e-02  2.13e-06  1.12e-03  1.55e-06  7.20e-06  2.13e-01  
 22  +4.9105e-01  +5.2908e-01  3.80e-02  2.01e-06  1.05e-03  1.05e-06  6.79e-06  3.46e-01  
 23  +4.8951e-01  +5.2260e-01  3.31e-02  1.65e-06  8.62e-04  7.06e-07  5.63e-06  3.91e-01  
 24  +4.8768e-01  +5.1497e-01  2.73e-02  1.29e-06  6.73e-04  5.05e-07  4.44e-06  3.52e-01  
 25  +4.8627e-01  +5.0880e-01  2.25e-02  9.91e-07  5.18e-04  2.37e-07  3.44e-06  8.05e-01  
 26  +4.8410e-01  +5.0011e-01  1.60e-02  6.79e-07  3.55e-04  1.64e-07  2.39e-06  4.05e-01  
 27  +4.8390e-01  +4.9928e-01  1.54e-02  6.46e-07  3.38e-04  1.58e-07  2.28e-06  1.65e-01  
 28  +4.8246e-01  +4.9353e-01  1.11e-02  4.50e-07  2.35e-04  1.14e-07  1.60e-06  4.56e-01  
 29  +4.8081e-01  +4.8711e-01  6.30e-03  2.46e-07  1.29e-04  6.67e-08  8.90e-07  5.68e-01  
 30  +4.8076e-01  +4.8691e-01  6.15e-03  2.40e-07  1.25e-04  6.55e-08  8.66e-07  1.30e-01  
 31  +4.8062e-01  +4.8633e-01  5.71e-03  2.22e-07  1.16e-04  6.18e-08  8.02e-07  3.12e-01  
 32  +4.7943e-01  +4.8193e-01  2.50e-03  9.48e-08  4.96e-05  2.71e-08  3.49e-07  6.39e-01  
 33  +4.7879e-01  +4.7954e-01  7.47e-04  2.81e-08  1.47e-05  8.53e-09  1.04e-07  9.90e-01  
 34  +4.7853e-01  +4.7859e-01  6.71e-05  2.52e-09  1.32e-06  7.69e-10  9.40e-09  9.90e-01  
 35  +4.7850e-01  +4.7850e-01  7.26e-07  2.72e-11  1.42e-08  8.31e-12  1.02e-10  9.89e-01  
 36  +4.7850e-01  +4.7850e-01  7.34e-09  2.75e-13  1.44e-10  8.40e-14  1.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3380817s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:10 PM: Problem status: optimal
(CVXPY) Sep 20 07:53:10 PM: Optimal value: 4.785e-01
(CVXPY) Sep 20 07:53:10 PM: Compilation took 3.949e-01 seconds
(CVXPY) Sep 20 07:53:10 PM: Solver (including time spent in interface) took 2.422e+00 seconds
Iteration: 22, Objective: 0.4785
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:53:10 PM: Your problem has 25202 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:53:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:53:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:53:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:53:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:53:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:53:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:53:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:53:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:53:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:53:11 PM: Finished problem compilation (took 4.055e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:11 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25202
  constraints   = 50202
  nnz(P)        = 0
  nnz(A)        = 436884
  cones (total) = 1
    : Nonnegative = 1,  numel = 50202

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3463e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3489e-01  +6.3100e+02  6.30e+02  1.70e-01  8.54e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6431e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0122e-01  +1.5923e+01  1.54e+01  4.31e-02  2.15e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.2067e+00  7.07e-01  2.12e-03  1.10e+00  2.36e-05  1.91e-01  2.04e-01  
  6  +5.0001e-01  +7.1536e-01  2.15e-01  6.44e-04  3.36e-01  5.82e-06  6.75e-02  7.42e-01  
  7  +5.0000e-01  +6.5848e-01  1.58e-01  4.74e-04  2.47e-01  4.41e-06  4.46e-02  4.20e-01  
  8  +5.0000e-01  +6.4207e-01  1.42e-01  4.24e-04  2.21e-01  3.89e-06  2.87e-02  5.61e-01  
  9  +5.0000e-01  +6.3314e-01  1.33e-01  3.97e-04  2.07e-01  4.17e-06  1.70e-02  5.52e-01  
 10  +4.9998e-01  +5.9745e-01  9.75e-02  2.65e-04  1.38e-01  1.50e-05  2.40e-03  9.04e-01  
 11  +4.9926e-01  +5.9274e-01  9.35e-02  2.62e-05  1.37e-02  3.62e-04  9.07e-05  9.64e-01  
 12  +4.9900e-01  +5.8379e-01  8.48e-02  1.61e-05  8.42e-03  4.08e-04  5.46e-05  5.62e-01  
 13  +4.9891e-01  +5.7931e-01  8.04e-02  1.29e-05  6.73e-03  3.73e-04  4.31e-05  3.81e-01  
 14  +4.9885e-01  +5.7505e-01  7.62e-02  1.05e-05  5.47e-03  3.07e-04  3.46e-05  4.24e-01  
 15  +4.9863e-01  +5.7305e-01  7.44e-02  8.90e-06  4.66e-03  3.17e-04  2.92e-05  2.22e-01  
 16  +4.9899e-01  +5.6747e-01  6.85e-02  7.18e-06  3.76e-03  3.80e-05  2.32e-05  9.45e-01  
 17  +4.9865e-01  +5.6562e-01  6.70e-02  5.74e-06  3.00e-03  3.47e-05  1.85e-05  4.05e-01  
 18  +4.9859e-01  +5.6538e-01  6.68e-02  5.73e-06  3.00e-03  3.35e-05  1.85e-05  2.93e-02  
 19  +4.9823e-01  +5.6368e-01  6.54e-02  5.11e-06  2.67e-03  3.24e-05  1.65e-05  1.88e-01  
 20  +4.9743e-01  +5.5932e-01  6.19e-02  4.44e-06  2.32e-03  1.47e-05  1.44e-05  5.87e-01  
 21  +4.9630e-01  +5.5444e-01  5.81e-02  3.82e-06  2.00e-03  8.93e-06  1.25e-05  4.40e-01  
 22  +4.9369e-01  +5.4270e-01  4.90e-02  2.81e-06  1.47e-03  3.79e-06  9.30e-06  6.22e-01  
 23  +4.9220e-01  +5.3617e-01  4.40e-02  2.39e-06  1.25e-03  2.70e-06  7.95e-06  3.08e-01  
 24  +4.9175e-01  +5.3416e-01  4.24e-02  2.26e-06  1.18e-03  1.94e-06  7.53e-06  2.79e-01  
 25  +4.9022e-01  +5.2775e-01  3.75e-02  1.89e-06  9.89e-04  1.25e-06  6.36e-06  3.82e-01  
 26  +4.9005e-01  +5.2698e-01  3.69e-02  1.85e-06  9.68e-04  1.15e-06  6.24e-06  9.25e-02  
 27  +4.8639e-01  +5.1181e-01  2.54e-02  1.16e-06  6.05e-04  6.32e-07  3.99e-06  4.97e-01  
 28  +4.8548e-01  +5.0802e-01  2.25e-02  9.91e-07  5.18e-04  4.61e-07  3.43e-06  3.61e-01  
 29  +4.8409e-01  +5.0233e-01  1.82e-02  7.76e-07  4.06e-04  3.25e-07  2.71e-06  3.83e-01  
 30  +4.8203e-01  +4.9403e-01  1.20e-02  4.87e-07  2.55e-04  1.65e-07  1.73e-06  6.80e-01  
 31  +4.8192e-01  +4.9355e-01  1.16e-02  4.66e-07  2.44e-04  1.53e-07  1.66e-06  2.83e-01  
 32  +4.8104e-01  +4.9021e-01  9.16e-03  3.63e-07  1.90e-04  1.19e-07  1.30e-06  2.62e-01  
 33  +4.7891e-01  +4.8209e-01  3.18e-03  1.22e-07  6.39e-05  3.86e-08  4.51e-07  8.05e-01  
 34  +4.7844e-01  +4.8032e-01  1.88e-03  7.15e-08  3.74e-05  2.22e-08  2.66e-07  6.83e-01  
 35  +4.7798e-01  +4.7862e-01  6.45e-04  2.44e-08  1.28e-05  7.36e-09  9.14e-08  9.90e-01  
 36  +4.7775e-01  +4.7784e-01  8.44e-05  3.19e-09  1.67e-06  9.61e-10  1.20e-08  9.01e-01  
 37  +4.7772e-01  +4.7772e-01  1.13e-06  4.28e-11  2.24e-08  1.29e-11  1.61e-10  9.90e-01  
 38  +4.7772e-01  +4.7772e-01  1.15e-08  4.34e-13  2.27e-10  1.31e-13  1.64e-12  9.90e-01  
 39  +4.7772e-01  +4.7772e-01  1.20e-09  4.54e-14  2.37e-11  1.37e-14  1.72e-13  8.97e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7479627s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:13 PM: Problem status: optimal
(CVXPY) Sep 20 07:53:13 PM: Optimal value: 4.777e-01
(CVXPY) Sep 20 07:53:13 PM: Compilation took 4.055e-01 seconds
(CVXPY) Sep 20 07:53:13 PM: Solver (including time spent in interface) took 2.827e+00 seconds
Iteration: 23, Objective: 0.4777
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:53:14 PM: Your problem has 25204 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:53:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:53:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:53:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:53:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:53:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:53:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:53:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:53:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:53:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:53:14 PM: Finished problem compilation (took 3.646e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25204
  constraints   = 50204
  nnz(P)        = 0
  nnz(A)        = 438140
  cones (total) = 1
    : Nonnegative = 1,  numel = 50204

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3462e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3489e-01  +6.3100e+02  6.30e+02  1.70e-01  8.54e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6431e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0122e-01  +1.5921e+01  1.54e+01  4.31e-02  2.15e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.2084e+00  7.08e-01  2.12e-03  1.10e+00  2.36e-05  1.91e-01  2.03e-01  
  6  +5.0001e-01  +7.1604e-01  2.16e-01  6.46e-04  3.37e-01  5.80e-06  6.76e-02  7.45e-01  
  7  +5.0000e-01  +6.5912e-01  1.59e-01  4.76e-04  2.48e-01  4.40e-06  4.48e-02  4.17e-01  
  8  +5.0000e-01  +6.4193e-01  1.42e-01  4.24e-04  2.21e-01  3.89e-06  2.89e-02  5.53e-01  
  9  +5.0000e-01  +6.3266e-01  1.33e-01  3.96e-04  2.06e-01  4.19e-06  1.71e-02  5.50e-01  
 10  +4.9998e-01  +6.0110e-01  1.01e-01  2.79e-04  1.46e-01  1.39e-05  2.73e-03  8.87e-01  
 11  +4.9928e-01  +5.9595e-01  9.67e-02  2.80e-05  1.47e-02  3.53e-04  9.71e-05  9.66e-01  
 12  +4.9899e-01  +5.8457e-01  8.56e-02  1.60e-05  8.37e-03  4.06e-04  5.43e-05  6.15e-01  
 13  +4.9893e-01  +5.7947e-01  8.05e-02  1.28e-05  6.68e-03  3.53e-04  4.27e-05  4.06e-01  
 14  +4.9878e-01  +5.7381e-01  7.50e-02  9.59e-06  5.02e-03  2.90e-04  3.16e-05  5.15e-01  
 15  +4.9862e-01  +5.7087e-01  7.23e-02  7.88e-06  4.12e-03  2.48e-04  2.57e-05  3.97e-01  
 16  +4.9852e-01  +5.6876e-01  7.02e-02  6.89e-06  3.61e-03  1.97e-04  2.24e-05  3.59e-01  
 17  +4.9818e-01  +5.6669e-01  6.85e-02  5.79e-06  3.03e-03  1.95e-04  1.88e-05  2.59e-01  
 18  +4.9807e-01  +5.6599e-01  6.79e-02  5.77e-06  3.02e-03  1.81e-04  1.87e-05  5.15e-02  
 19  +4.9728e-01  +5.6099e-01  6.37e-02  4.53e-06  2.37e-03  1.26e-04  1.47e-05  5.15e-01  
 20  +4.9721e-01  +5.6075e-01  6.35e-02  4.51e-06  2.36e-03  1.22e-04  1.47e-05  2.44e-02  
 21  +4.9619e-01  +5.5580e-01  5.96e-02  3.85e-06  2.01e-03  1.13e-04  1.26e-05  2.00e-01  
 22  +4.9448e-01  +5.4699e-01  5.25e-02  3.15e-06  1.65e-03  6.23e-05  1.04e-05  4.47e-01  
 23  +4.9195e-01  +5.3507e-01  4.31e-02  2.36e-06  1.23e-03  2.05e-05  7.88e-06  6.22e-01  
 24  +4.9180e-01  +5.3437e-01  4.26e-02  2.30e-06  1.20e-03  1.59e-05  7.69e-06  1.98e-01  
 25  +4.9098e-01  +5.3085e-01  3.99e-02  2.09e-06  1.09e-03  1.29e-05  7.00e-06  1.99e-01  
 26  +4.9011e-01  +5.2711e-01  3.70e-02  1.87e-06  9.77e-04  8.65e-06  6.29e-06  3.14e-01  
 27  +4.8804e-01  +5.1847e-01  3.04e-02  1.44e-06  7.55e-04  4.08e-06  4.93e-06  5.04e-01  
 28  +4.8634e-01  +5.1151e-01  2.52e-02  1.14e-06  5.96e-04  2.82e-06  3.93e-06  3.22e-01  
 29  +4.8555e-01  +5.0797e-01  2.24e-02  9.66e-07  5.05e-04  8.88e-07  3.34e-06  7.02e-01  
 30  +4.8359e-01  +5.0021e-01  1.66e-02  6.92e-07  3.62e-04  5.02e-07  2.43e-06  4.79e-01  
 31  +4.8198e-01  +4.9391e-01  1.19e-02  4.84e-07  2.53e-04  3.14e-07  1.72e-06  4.18e-01  
 32  +4.8165e-01  +4.9250e-01  1.08e-02  4.32e-07  2.26e-04  2.16e-07  1.54e-06  4.93e-01  
 33  +4.8114e-01  +4.9046e-01  9.33e-03  3.67e-07  1.92e-04  1.58e-07  1.31e-06  4.44e-01  
 34  +4.7892e-01  +4.8211e-01  3.19e-03  1.22e-07  6.39e-05  4.17e-08  4.50e-07  8.92e-01  
 35  +4.7849e-01  +4.8050e-01  2.00e-03  7.61e-08  3.98e-05  2.41e-08  2.82e-07  7.82e-01  
 36  +4.7796e-01  +4.7855e-01  5.95e-04  2.25e-08  1.18e-05  6.82e-09  8.44e-08  9.90e-01  
 37  +4.7774e-01  +4.7780e-01  5.62e-05  2.12e-09  1.11e-06  6.41e-10  7.98e-09  9.21e-01  
 38  +4.7772e-01  +4.7772e-01  6.31e-07  2.38e-11  1.24e-08  7.19e-12  8.96e-11  9.90e-01  
 39  +4.7772e-01  +4.7772e-01  6.35e-09  2.40e-13  1.25e-10  7.24e-14  9.03e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3918425s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:53:17 PM: Optimal value: 4.777e-01
(CVXPY) Sep 20 07:53:17 PM: Compilation took 3.646e-01 seconds
(CVXPY) Sep 20 07:53:17 PM: Solver (including time spent in interface) took 2.463e+00 seconds
Iteration: 24, Objective: 0.4777
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:53:17 PM: Your problem has 25205 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:53:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:53:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:53:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:53:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:53:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:53:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:53:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:53:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:53:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:53:17 PM: Finished problem compilation (took 3.845e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25205
  constraints   = 50205
  nnz(P)        = 0
  nnz(A)        = 438255
  cones (total) = 1
    : Nonnegative = 1,  numel = 50205

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3462e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3489e-01  +6.3099e+02  6.30e+02  1.70e-01  8.54e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6431e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0122e-01  +1.5921e+01  1.54e+01  4.31e-02  2.15e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.2085e+00  7.09e-01  2.12e-03  1.10e+00  2.36e-05  1.91e-01  2.03e-01  
  6  +5.0001e-01  +7.1540e-01  2.15e-01  6.44e-04  3.36e-01  5.76e-06  6.74e-02  7.48e-01  
  7  +5.0000e-01  +6.5850e-01  1.58e-01  4.74e-04  2.47e-01  4.37e-06  4.46e-02  4.18e-01  
  8  +5.0000e-01  +6.4146e-01  1.41e-01  4.23e-04  2.20e-01  3.89e-06  2.88e-02  5.44e-01  
  9  +5.0000e-01  +6.3268e-01  1.33e-01  3.96e-04  2.06e-01  4.20e-06  1.74e-02  5.36e-01  
 10  +4.9998e-01  +6.0376e-01  1.04e-01  2.91e-04  1.52e-01  1.29e-05  3.11e-03  8.65e-01  
 11  +4.9929e-01  +5.9756e-01  9.83e-02  2.94e-05  1.54e-02  3.49e-04  1.02e-04  9.70e-01  
 12  +4.9889e-01  +5.8526e-01  8.64e-02  1.54e-05  8.06e-03  4.46e-04  5.23e-05  6.39e-01  
 13  +4.9889e-01  +5.7921e-01  8.03e-02  1.23e-05  6.46e-03  3.55e-04  4.12e-05  4.44e-01  
 14  +4.9857e-01  +5.7236e-01  7.38e-02  8.50e-06  4.45e-03  3.13e-04  2.79e-05  5.67e-01  
 15  +4.9867e-01  +5.7130e-01  7.26e-02  8.31e-06  4.35e-03  2.44e-04  2.72e-05  2.17e-01  
 16  +4.9815e-01  +5.6767e-01  6.95e-02  6.30e-06  3.30e-03  2.57e-04  2.05e-05  3.47e-01  
 17  +4.9793e-01  +5.6636e-01  6.84e-02  5.59e-06  2.92e-03  2.49e-04  1.82e-05  2.05e-01  
 18  +4.9783e-01  +5.6532e-01  6.75e-02  5.55e-06  2.91e-03  2.20e-04  1.80e-05  9.12e-02  
 19  +4.9709e-01  +5.6126e-01  6.42e-02  4.61e-06  2.41e-03  1.92e-04  1.50e-05  3.15e-01  
 20  +4.9702e-01  +5.6099e-01  6.40e-02  4.59e-06  2.40e-03  1.85e-04  1.50e-05  2.76e-02  
 21  +4.9591e-01  +5.5549e-01  5.96e-02  3.84e-06  2.01e-03  1.70e-04  1.26e-05  2.25e-01  
 22  +4.9455e-01  +5.4753e-01  5.30e-02  3.26e-06  1.71e-03  7.12e-05  1.08e-05  5.21e-01  
 23  +4.9160e-01  +5.3391e-01  4.23e-02  2.28e-06  1.19e-03  3.02e-05  7.61e-06  5.93e-01  
 24  +4.9104e-01  +5.3143e-01  4.04e-02  2.11e-06  1.10e-03  2.20e-05  7.08e-06  2.57e-01  
 25  +4.9022e-01  +5.2792e-01  3.77e-02  1.91e-06  9.99e-04  1.53e-05  6.44e-06  2.85e-01  
 26  +4.8894e-01  +5.2213e-01  3.32e-02  1.59e-06  8.32e-04  3.86e-06  5.40e-06  6.76e-01  
 27  +4.8658e-01  +5.1253e-01  2.59e-02  1.18e-06  6.15e-04  2.61e-06  4.05e-06  3.37e-01  
 28  +4.8614e-01  +5.1045e-01  2.43e-02  1.07e-06  5.59e-04  1.35e-06  3.68e-06  4.99e-01  
 29  +4.8401e-01  +5.0202e-01  1.80e-02  7.63e-07  3.99e-04  9.11e-07  2.67e-06  3.36e-01  
 30  +4.8116e-01  +4.9068e-01  9.52e-03  3.80e-07  1.99e-04  1.88e-07  1.36e-06  8.53e-01  
 31  +4.7953e-01  +4.8446e-01  4.93e-03  1.92e-07  1.01e-04  8.95e-08  7.05e-07  5.74e-01  
 32  +4.7865e-01  +4.8108e-01  2.43e-03  9.25e-08  4.84e-05  2.94e-08  3.43e-07  9.57e-01  
 33  +4.7785e-01  +4.7817e-01  3.26e-04  1.23e-08  6.45e-06  3.70e-09  4.64e-08  9.90e-01  
 34  +4.7774e-01  +4.7778e-01  4.24e-05  1.61e-09  8.40e-07  4.79e-10  6.06e-09  9.55e-01  
 35  +4.7772e-01  +4.7772e-01  4.43e-07  1.68e-11  8.77e-09  5.00e-12  6.33e-11  9.90e-01  
 36  +4.7772e-01  +4.7772e-01  4.47e-09  1.69e-13  8.84e-11  5.04e-14  6.38e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3342457s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:53:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:53:20 PM: Optimal value: 4.777e-01
(CVXPY) Sep 20 07:53:20 PM: Compilation took 3.845e-01 seconds
(CVXPY) Sep 20 07:53:20 PM: Solver (including time spent in interface) took 2.405e+00 seconds
FULL MODEL:
  Accruacy: 0.51046
  Our objective: 0.020920000000000022

IF 
    (x0 = 0 AND x1 = 0 AND x7 = 0)                                                        <-- (term's our objective: 0.01308)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.00096)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.00084)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.00068)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.00144)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.00088)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.00072)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.00152)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 96.48563504219055
Best over terms:
  Our final objective: 0.01307999999999998
    Its accruacy: 0.50654
    Its hamming distance: 5
  Shortest hamming distance: 2
    Its our objective: 0.0009599999999999687
  Highest accruacy: 0.50654
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

