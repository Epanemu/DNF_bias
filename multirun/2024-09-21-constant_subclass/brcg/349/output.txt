Command:
python test_script.py -s constant_subclass -d 9 -n 5000 --seed 21 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0031999999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 9.

Computed total variation: 0.2528
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:54 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:54 PM: Finished problem compilation (took 1.600e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 30019
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5008e+03  2.50e+03  9.80e-01  8.18e+01  1.00e+00  1.00e+00   ------   
  1  +5.8090e-01  +5.4279e+02  5.42e+02  4.28e-01  5.31e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3181e-01  +6.1669e+01  6.11e+01  1.65e-01  2.63e+01  1.63e-02  2.77e-01  9.31e-01  
  3  +5.0855e-01  +1.6000e+01  1.55e+01  1.06e-01  1.66e+01  4.45e-05  2.57e-01  2.89e-01  
  4  +5.0076e-01  +1.4639e+00  9.63e-01  9.38e-03  1.52e+00  6.40e-06  1.33e-01  7.89e-01  
  5  +5.0008e-01  +6.2714e-01  1.27e-01  1.20e-03  1.97e-01  1.07e-05  3.93e-02  9.90e-01  
  6  +5.0004e-01  +5.7225e-01  7.22e-02  6.81e-04  1.12e-01  8.55e-06  1.65e-02  6.12e-01  
  7  +5.0000e-01  +5.5204e-01  5.20e-02  4.48e-04  7.38e-02  2.02e-05  3.41e-03  8.29e-01  
  8  +4.9914e-01  +5.5294e-01  5.38e-02  4.30e-05  7.12e-03  4.77e-04  1.36e-04  9.65e-01  
  9  +4.9789e-01  +5.4485e-01  4.70e-02  2.98e-05  4.94e-03  4.45e-04  9.49e-05  4.16e-01  
 10  +4.9546e-01  +5.3112e-01  3.57e-02  2.15e-05  3.55e-03  2.65e-04  7.07e-05  3.54e-01  
 11  +4.9321e-01  +5.1896e-01  2.57e-02  1.48e-05  2.45e-03  2.65e-06  5.13e-05  8.03e-01  
 12  +4.8875e-01  +4.9974e-01  1.10e-02  5.05e-06  8.35e-04  9.89e-07  1.89e-05  7.54e-01  
 13  +4.8629e-01  +4.8979e-01  3.50e-03  1.46e-06  2.41e-04  3.05e-07  5.79e-06  7.32e-01  
 14  +4.8570e-01  +4.8738e-01  1.68e-03  6.80e-07  1.12e-04  1.63e-07  2.74e-06  9.90e-01  
 15  +4.8512e-01  +4.8516e-01  4.52e-05  1.81e-08  2.99e-06  4.29e-09  7.40e-08  9.74e-01  
 16  +4.8510e-01  +4.8510e-01  4.53e-07  1.81e-10  2.99e-08  4.29e-11  7.41e-10  9.90e-01  
 17  +4.8510e-01  +4.8510e-01  4.53e-09  1.81e-12  2.99e-10  4.37e-13  7.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 60.5541ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:54 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:54 PM: Optimal value: 4.851e-01
(CVXPY) Sep 20 07:59:54 PM: Compilation took 1.600e-02 seconds
(CVXPY) Sep 20 07:59:54 PM: Solver (including time spent in interface) took 6.539e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4851
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:55 PM: Your problem has 2529 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:55 PM: Finished problem compilation (took 1.398e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2529
  constraints   = 5029
  nnz(P)        = 0
  nnz(A)        = 34215
  cones (total) = 1
    : Nonnegative = 1,  numel = 5029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5008e+03  2.50e+03  9.80e-01  8.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.8078e-01  +5.4297e+02  5.42e+02  4.29e-01  5.46e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3161e-01  +6.1475e+01  6.09e+01  1.65e-01  2.69e+01  1.63e-02  2.77e-01  9.33e-01  
  3  +5.0849e-01  +1.5930e+01  1.54e+01  1.06e-01  1.70e+01  4.46e-05  2.56e-01  2.94e-01  
  4  +5.0075e-01  +1.4514e+00  9.51e-01  9.28e-03  1.55e+00  6.44e-06  1.30e-01  7.99e-01  
  5  +5.0014e-01  +7.0418e-01  2.04e-01  1.94e-03  3.27e-01  1.04e-05  5.05e-02  8.28e-01  
  6  +5.0007e-01  +6.2082e-01  1.21e-01  1.13e-03  1.91e-01  1.18e-05  1.58e-02  7.78e-01  
  7  +4.9965e-01  +6.9809e-01  1.98e-01  2.76e-04  4.71e-02  2.72e-04  8.99e-04  9.90e-01  
  8  +4.9880e-01  +6.6709e-01  1.68e-01  1.33e-04  2.26e-02  4.00e-04  4.25e-04  5.98e-01  
  9  +4.9766e-01  +6.4538e-01  1.48e-01  1.11e-04  1.89e-02  3.25e-04  3.56e-04  2.36e-01  
 10  +4.9387e-01  +5.8653e-01  9.27e-02  6.53e-05  1.11e-02  8.69e-05  2.16e-04  6.52e-01  
 11  +4.9163e-01  +5.7036e-01  7.87e-02  4.77e-05  8.13e-03  6.34e-05  1.58e-04  4.22e-01  
 12  +4.9009e-01  +5.6014e-01  7.00e-02  3.91e-05  6.66e-03  4.71e-05  1.28e-04  3.37e-01  
 13  +4.8609e-01  +5.3595e-01  4.99e-02  2.30e-05  3.91e-03  1.31e-05  7.48e-05  8.04e-01  
 14  +4.8292e-01  +5.2405e-01  4.11e-02  2.03e-05  3.45e-03  7.81e-06  7.45e-05  8.98e-02  
 15  +4.7976e-01  +5.0756e-01  2.78e-02  1.17e-05  2.00e-03  3.42e-06  4.02e-05  9.90e-01  
 16  +4.7271e-01  +4.8222e-01  9.51e-03  3.55e-06  6.03e-04  1.10e-06  1.26e-05  7.26e-01  
 17  +4.6957e-01  +4.6997e-01  4.08e-04  1.49e-07  2.53e-05  3.72e-08  5.53e-07  9.61e-01  
 18  +4.6940e-01  +4.6941e-01  4.15e-06  1.52e-09  2.58e-07  3.74e-10  5.67e-09  9.90e-01  
 19  +4.6940e-01  +4.6940e-01  4.15e-08  1.52e-11  2.58e-09  3.73e-12  5.68e-11  9.90e-01  
 20  +4.6940e-01  +4.6940e-01  4.15e-10  1.52e-13  2.58e-11  3.76e-14  5.71e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 72.3501ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:55 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:55 PM: Optimal value: 4.694e-01
(CVXPY) Sep 20 07:59:55 PM: Compilation took 1.398e-02 seconds
(CVXPY) Sep 20 07:59:55 PM: Solver (including time spent in interface) took 7.678e-02 seconds
Iteration: 2, Objective: 0.4694
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:55 PM: Your problem has 2539 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:55 PM: Finished problem compilation (took 1.615e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2539
  constraints   = 5039
  nnz(P)        = 0
  nnz(A)        = 36148
  cones (total) = 1
    : Nonnegative = 1,  numel = 5039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5008e+03  2.50e+03  9.80e-01  8.48e+01  1.00e+00  1.00e+00   ------   
  1  +5.8064e-01  +5.4308e+02  5.43e+02  4.29e-01  5.50e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3145e-01  +6.1321e+01  6.08e+01  1.65e-01  2.70e+01  1.64e-02  2.76e-01  9.35e-01  
  3  +5.0845e-01  +1.5881e+01  1.54e+01  1.06e-01  1.71e+01  4.48e-05  2.56e-01  2.98e-01  
  4  +5.0074e-01  +1.4443e+00  9.44e-01  9.22e-03  1.55e+00  6.47e-06  1.28e-01  8.06e-01  
  5  +5.0017e-01  +7.3533e-01  2.35e-01  2.24e-03  3.81e-01  1.03e-05  5.19e-02  7.84e-01  
  6  +5.0010e-01  +6.6022e-01  1.60e-01  1.50e-03  2.55e-01  1.33e-05  1.72e-02  7.68e-01  
  7  +4.9986e-01  +6.6496e-01  1.65e-01  4.03e-04  6.93e-02  1.42e-04  1.32e-03  9.52e-01  
  8  +4.9903e-01  +6.4882e-01  1.50e-01  1.42e-04  2.44e-02  3.42e-04  4.42e-04  7.18e-01  
  9  +4.9688e-01  +6.1568e-01  1.19e-01  1.25e-04  2.15e-02  1.61e-04  3.95e-04  2.81e-01  
 10  +4.9680e-01  +6.0822e-01  1.11e-01  8.53e-05  1.46e-02  4.15e-05  2.68e-04  9.42e-01  
 11  +4.9576e-01  +6.0115e-01  1.05e-01  8.52e-05  1.46e-02  3.44e-05  2.66e-04  7.62e-02  
 12  +4.9303e-01  +5.7984e-01  8.68e-02  5.49e-05  9.43e-03  2.49e-05  1.74e-04  5.64e-01  
 13  +4.9188e-01  +5.7511e-01  8.32e-02  4.95e-05  8.49e-03  2.01e-05  1.57e-04  2.90e-01  
 14  +4.8960e-01  +5.6670e-01  7.71e-02  4.37e-05  7.50e-03  1.35e-05  1.40e-04  3.92e-01  
 15  +4.8125e-01  +5.2960e-01  4.83e-02  2.20e-05  3.77e-03  5.95e-06  7.26e-05  7.62e-01  
 16  +4.7031e-01  +4.8489e-01  1.46e-02  5.80e-06  9.93e-04  1.23e-06  1.99e-05  9.07e-01  
 17  +4.6664e-01  +4.7109e-01  4.45e-03  1.61e-06  2.76e-04  4.51e-07  5.62e-06  7.76e-01  
 18  +4.6537e-01  +4.6685e-01  1.48e-03  5.40e-07  9.24e-05  1.58e-07  1.89e-06  9.50e-01  
 19  +4.6473e-01  +4.6482e-01  8.48e-05  2.95e-08  5.06e-06  9.44e-09  1.05e-07  9.51e-01  
 20  +4.6470e-01  +4.6470e-01  8.54e-07  2.97e-10  5.09e-08  9.50e-11  1.06e-09  9.90e-01  
 21  +4.6470e-01  +4.6470e-01  8.54e-09  2.97e-12  5.09e-10  9.70e-13  1.08e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 75.6427ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:55 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:55 PM: Optimal value: 4.647e-01
(CVXPY) Sep 20 07:59:55 PM: Compilation took 1.615e-02 seconds
(CVXPY) Sep 20 07:59:55 PM: Solver (including time spent in interface) took 8.015e-02 seconds
Iteration: 3, Objective: 0.4647
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:55 PM: Your problem has 2549 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:55 PM: Finished problem compilation (took 1.507e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2549
  constraints   = 5049
  nnz(P)        = 0
  nnz(A)        = 37339
  cones (total) = 1
    : Nonnegative = 1,  numel = 5049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5009e+03  2.50e+03  9.80e-01  8.49e+01  1.00e+00  1.00e+00   ------   
  1  +5.8045e-01  +5.4320e+02  5.43e+02  4.30e-01  5.50e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3129e-01  +6.1166e+01  6.06e+01  1.65e-01  2.69e+01  1.64e-02  2.76e-01  9.37e-01  
  3  +5.0841e-01  +1.5839e+01  1.53e+01  1.06e-01  1.70e+01  4.49e-05  2.55e-01  3.03e-01  
  4  +5.0074e-01  +1.4392e+00  9.38e-01  9.18e-03  1.55e+00  6.51e-06  1.26e-01  8.11e-01  
  5  +5.0030e-01  +8.9473e-01  3.94e-01  3.79e-03  6.43e-01  9.82e-06  7.04e-02  5.66e-01  
  6  +5.0022e-01  +8.0060e-01  3.00e-01  2.85e-03  4.84e-01  1.20e-05  3.33e-02  6.61e-01  
  7  +5.0006e-01  +7.5372e-01  2.54e-01  8.28e-04  1.42e-01  7.71e-05  2.95e-03  9.79e-01  
  8  +4.9961e-01  +7.3663e-01  2.37e-01  3.02e-04  5.20e-02  1.91e-04  1.01e-03  7.00e-01  
  9  +4.9607e-01  +6.3201e-01  1.36e-01  1.67e-04  2.88e-02  1.91e-06  5.79e-04  8.94e-01  
 10  +4.9535e-01  +6.2638e-01  1.31e-01  1.38e-04  2.38e-02  2.69e-06  4.52e-04  3.69e-01  
 11  +4.9359e-01  +6.1880e-01  1.25e-01  7.83e-05  1.35e-02  6.15e-06  2.45e-04  8.59e-01  
 12  +4.9342e-01  +6.1801e-01  1.25e-01  7.80e-05  1.34e-02  6.17e-06  2.44e-04  2.36e-02  
 13  +4.9133e-01  +6.0869e-01  1.17e-01  6.56e-05  1.13e-02  7.10e-06  2.06e-04  4.02e-01  
 14  +4.8727e-01  +5.8646e-01  9.92e-02  5.47e-05  9.42e-03  6.50e-06  1.76e-04  5.69e-01  
 15  +4.7705e-01  +5.3920e-01  6.22e-02  2.68e-05  4.60e-03  4.66e-06  8.93e-05  5.37e-01  
 16  +4.6953e-01  +5.0420e-01  3.47e-02  1.42e-05  2.44e-03  2.90e-06  4.99e-05  7.27e-01  
 17  +4.6577e-01  +4.8709e-01  2.13e-02  8.47e-06  1.45e-03  2.07e-06  3.07e-05  7.45e-01  
 18  +4.6093e-01  +4.6790e-01  6.98e-03  2.70e-06  4.63e-04  6.56e-07  1.03e-05  6.86e-01  
 19  +4.6092e-01  +4.6780e-01  6.88e-03  2.66e-06  4.56e-04  6.64e-07  1.01e-05  1.44e-01  
 20  +4.5856e-01  +4.5874e-01  1.73e-04  6.60e-08  1.13e-05  1.53e-08  2.57e-07  9.78e-01  
 21  +4.5850e-01  +4.5850e-01  1.73e-06  6.61e-10  1.13e-07  1.53e-10  2.58e-09  9.90e-01  
 22  +4.5850e-01  +4.5850e-01  1.73e-08  6.61e-12  1.13e-09  1.53e-12  2.58e-11  9.90e-01  
 23  +4.5850e-01  +4.5850e-01  1.73e-10  6.60e-14  1.13e-11  1.54e-14  2.60e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 79.6497ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:55 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:55 PM: Optimal value: 4.585e-01
(CVXPY) Sep 20 07:59:55 PM: Compilation took 1.507e-02 seconds
(CVXPY) Sep 20 07:59:55 PM: Solver (including time spent in interface) took 8.433e-02 seconds
Iteration: 4, Objective: 0.4585
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:55 PM: Your problem has 2559 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:55 PM: Finished problem compilation (took 1.878e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2559
  constraints   = 5059
  nnz(P)        = 0
  nnz(A)        = 38596
  cones (total) = 1
    : Nonnegative = 1,  numel = 5059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5010e+03  2.50e+03  9.80e-01  8.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.8038e-01  +5.4319e+02  5.43e+02  4.30e-01  5.50e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3122e-01  +6.1095e+01  6.06e+01  1.65e-01  2.69e+01  1.64e-02  2.76e-01  9.38e-01  
  3  +5.0839e-01  +1.5815e+01  1.53e+01  1.05e-01  1.70e+01  4.50e-05  2.54e-01  3.05e-01  
  4  +5.0074e-01  +1.4340e+00  9.33e-01  9.14e-03  1.54e+00  6.53e-06  1.25e-01  8.16e-01  
  5  +5.0031e-01  +9.0878e-01  4.08e-01  3.93e-03  6.68e-01  9.64e-06  7.03e-02  5.53e-01  
  6  +5.0022e-01  +7.9856e-01  2.98e-01  2.82e-03  4.80e-01  1.20e-05  3.08e-02  6.97e-01  
  7  +5.0009e-01  +7.6915e-01  2.69e-01  9.82e-04  1.69e-01  6.69e-05  3.48e-03  9.47e-01  
  8  +4.9969e-01  +7.5440e-01  2.55e-01  3.41e-04  5.89e-02  1.82e-04  1.11e-03  7.08e-01  
  9  +4.9716e-01  +6.5736e-01  1.60e-01  1.96e-04  3.38e-02  3.22e-05  6.52e-04  8.34e-01  
 10  +4.9469e-01  +6.2605e-01  1.31e-01  1.31e-04  2.26e-02  2.19e-05  4.21e-04  5.89e-01  
 11  +4.9447e-01  +6.2706e-01  1.33e-01  1.13e-04  1.94e-02  2.17e-05  3.52e-04  3.31e-01  
 12  +4.9467e-01  +6.3327e-01  1.39e-01  9.15e-05  1.58e-02  9.57e-06  2.80e-04  9.90e-01  
 13  +4.9218e-01  +6.2077e-01  1.29e-01  6.70e-05  1.16e-02  1.05e-05  2.07e-04  4.70e-01  
 14  +4.8654e-01  +5.7989e-01  9.34e-02  5.39e-05  9.29e-03  5.75e-06  1.72e-04  7.54e-01  
 15  +4.7480e-01  +5.2635e-01  5.15e-02  2.29e-05  3.95e-03  3.85e-06  7.61e-05  7.67e-01  
 16  +4.6944e-01  +5.0318e-01  3.37e-02  1.43e-05  2.45e-03  2.56e-06  4.92e-05  4.53e-01  
 17  +4.6367e-01  +4.7826e-01  1.46e-02  5.74e-06  9.87e-04  1.51e-06  2.10e-05  9.90e-01  
 18  +4.5924e-01  +4.6122e-01  1.98e-03  7.59e-07  1.30e-04  2.00e-07  2.93e-06  9.36e-01  
 19  +4.5853e-01  +4.5861e-01  7.72e-05  2.94e-08  5.05e-06  8.22e-09  1.15e-07  9.90e-01  
 20  +4.5850e-01  +4.5850e-01  7.72e-07  2.94e-10  5.05e-08  8.22e-11  1.15e-09  9.90e-01  
 21  +4.5850e-01  +4.5850e-01  7.72e-09  2.94e-12  5.05e-10  8.27e-13  1.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 76.8181ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:55 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:55 PM: Optimal value: 4.585e-01
(CVXPY) Sep 20 07:59:55 PM: Compilation took 1.878e-02 seconds
(CVXPY) Sep 20 07:59:55 PM: Solver (including time spent in interface) took 8.130e-02 seconds
Iteration: 5, Objective: 0.4585
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:56 PM: Your problem has 2569 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:56 PM: Finished problem compilation (took 1.696e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2569
  constraints   = 5069
  nnz(P)        = 0
  nnz(A)        = 39758
  cones (total) = 1
    : Nonnegative = 1,  numel = 5069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5010e+03  2.50e+03  9.80e-01  8.51e+01  1.00e+00  1.00e+00   ------   
  1  +5.8028e-01  +5.4316e+02  5.43e+02  4.30e-01  5.50e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3115e-01  +6.1017e+01  6.05e+01  1.65e-01  2.68e+01  1.64e-02  2.75e-01  9.39e-01  
  3  +5.0836e-01  +1.5785e+01  1.53e+01  1.05e-01  1.70e+01  4.50e-05  2.53e-01  3.08e-01  
  4  +5.0073e-01  +1.4256e+00  9.25e-01  9.07e-03  1.53e+00  6.56e-06  1.23e-01  8.22e-01  
  5  +5.0030e-01  +8.9658e-01  3.96e-01  3.82e-03  6.49e-01  9.74e-06  6.50e-02  5.84e-01  
  6  +5.0021e-01  +7.9107e-01  2.91e-01  2.72e-03  4.64e-01  1.32e-05  2.53e-02  7.06e-01  
  7  +5.0001e-01  +7.6915e-01  2.69e-01  6.76e-04  1.17e-01  1.07e-04  2.19e-03  9.47e-01  
  8  +4.9915e-01  +7.2406e-01  2.25e-01  2.14e-04  3.71e-02  2.37e-04  6.63e-04  8.08e-01  
  9  +4.9645e-01  +6.7584e-01  1.79e-01  1.87e-04  3.24e-02  1.20e-04  5.82e-04  2.93e-01  
 10  +4.9674e-01  +6.7293e-01  1.76e-01  1.71e-04  2.96e-02  7.55e-05  5.21e-04  4.61e-01  
 11  +4.9559e-01  +6.5880e-01  1.63e-01  1.22e-04  2.12e-02  5.08e-05  3.68e-04  6.63e-01  
 12  +4.9331e-01  +6.4614e-01  1.53e-01  8.97e-05  1.55e-02  3.93e-05  2.70e-04  5.95e-01  
 13  +4.8576e-01  +6.0236e-01  1.17e-01  6.43e-05  1.11e-02  2.04e-05  2.00e-04  4.96e-01  
 14  +4.7350e-01  +5.4118e-01  6.77e-02  3.15e-05  5.42e-03  9.92e-06  1.02e-04  6.14e-01  
 15  +4.7236e-01  +5.3343e-01  6.11e-02  2.82e-05  4.86e-03  7.18e-06  9.21e-05  5.38e-01  
 16  +4.7018e-01  +5.2281e-01  5.26e-02  2.38e-05  4.11e-03  5.97e-06  7.82e-05  3.08e-01  
 17  +4.6679e-01  +5.0647e-01  3.97e-02  1.71e-05  2.94e-03  4.18e-06  5.65e-05  8.57e-01  
 18  +4.5960e-01  +4.7482e-01  1.52e-02  6.32e-06  1.09e-03  1.57e-06  2.15e-05  6.60e-01  
 19  +4.5699e-01  +4.6391e-01  6.91e-03  2.78e-06  4.79e-04  7.37e-07  9.51e-06  6.34e-01  
 20  +4.5566e-01  +4.5852e-01  2.87e-03  1.14e-06  1.96e-04  3.07e-07  3.92e-06  6.25e-01  
 21  +4.5505e-01  +4.5608e-01  1.03e-03  4.08e-07  7.02e-05  1.12e-07  1.42e-06  7.14e-01  
 22  +4.5472e-01  +4.5477e-01  5.43e-05  2.15e-08  3.70e-06  6.13e-09  7.55e-08  9.90e-01  
 23  +4.5470e-01  +4.5470e-01  5.54e-07  2.19e-10  3.77e-08  6.25e-11  7.70e-10  9.90e-01  
 24  +4.5470e-01  +4.5470e-01  5.54e-09  2.19e-12  3.77e-10  6.25e-13  7.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 86.3083ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:56 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:56 PM: Optimal value: 4.547e-01
(CVXPY) Sep 20 07:59:56 PM: Compilation took 1.696e-02 seconds
(CVXPY) Sep 20 07:59:56 PM: Solver (including time spent in interface) took 9.156e-02 seconds
Iteration: 6, Objective: 0.4547
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:56 PM: Your problem has 2579 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:56 PM: Finished problem compilation (took 1.860e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2579
  constraints   = 5079
  nnz(P)        = 0
  nnz(A)        = 40652
  cones (total) = 1
    : Nonnegative = 1,  numel = 5079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5010e+03  2.50e+03  9.80e-01  8.51e+01  1.00e+00  1.00e+00   ------   
  1  +5.8011e-01  +5.4317e+02  5.43e+02  4.31e-01  5.50e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3102e-01  +6.0895e+01  6.04e+01  1.64e-01  2.67e+01  1.65e-02  2.74e-01  9.41e-01  
  3  +5.0833e-01  +1.5750e+01  1.52e+01  1.05e-01  1.69e+01  4.52e-05  2.52e-01  3.11e-01  
  4  +5.0072e-01  +1.4182e+00  9.17e-01  9.01e-03  1.52e+00  6.60e-06  1.21e-01  8.28e-01  
  5  +5.0031e-01  +9.0701e-01  4.07e-01  3.92e-03  6.67e-01  9.85e-06  6.17e-02  5.92e-01  
  6  +5.0022e-01  +8.1727e-01  3.17e-01  2.87e-03  4.91e-01  1.60e-05  2.03e-02  7.97e-01  
  7  +4.9993e-01  +7.8468e-01  2.85e-01  5.06e-04  8.77e-02  1.51e-04  1.54e-03  9.42e-01  
  8  +4.9941e-01  +7.4857e-01  2.49e-01  3.46e-04  6.00e-02  1.35e-04  1.04e-03  5.19e-01  
  9  +4.9776e-01  +7.2120e-01  2.23e-01  2.01e-04  3.48e-02  1.78e-04  5.95e-04  4.89e-01  
 10  +4.9481e-01  +6.7889e-01  1.84e-01  1.39e-04  2.40e-02  9.93e-05  4.11e-04  6.12e-01  
 11  +4.9406e-01  +6.7342e-01  1.79e-01  1.34e-04  2.32e-02  8.20e-05  4.00e-04  1.68e-01  
 12  +4.9181e-01  +6.6374e-01  1.72e-01  1.02e-04  1.77e-02  8.72e-05  3.08e-04  3.00e-01  
 13  +4.9009e-01  +6.5071e-01  1.61e-01  1.00e-04  1.74e-02  6.67e-05  3.04e-04  1.26e-01  
 14  +4.7708e-01  +5.7856e-01  1.01e-01  4.97e-05  8.57e-03  1.38e-05  1.56e-04  8.91e-01  
 15  +4.6644e-01  +5.2903e-01  6.26e-02  2.83e-05  4.87e-03  7.76e-06  9.20e-05  4.89e-01  
 16  +4.5978e-01  +4.9848e-01  3.87e-02  1.66e-05  2.86e-03  4.62e-06  5.51e-05  4.99e-01  
 17  +4.5708e-01  +4.8639e-01  2.93e-02  1.21e-05  2.09e-03  3.48e-06  4.04e-05  4.49e-01  
 18  +4.5136e-01  +4.6189e-01  1.05e-02  4.14e-06  7.11e-04  1.27e-06  1.40e-05  7.36e-01  
 19  +4.5012e-01  +4.5674e-01  6.62e-03  2.56e-06  4.40e-04  8.02e-07  8.70e-06  6.26e-01  
 20  +4.4862e-01  +4.5068e-01  2.06e-03  7.88e-07  1.36e-04  2.50e-07  2.70e-06  9.14e-01  
 21  +4.4812e-01  +4.4877e-01  6.51e-04  2.48e-07  4.27e-05  7.98e-08  8.52e-07  9.90e-01  
 22  +4.4788e-01  +4.4790e-01  1.51e-05  5.72e-09  9.85e-07  1.85e-09  1.97e-08  9.80e-01  
 23  +4.4788e-01  +4.4788e-01  1.51e-07  5.74e-11  9.87e-09  1.85e-11  1.97e-10  9.90e-01  
 24  +4.4788e-01  +4.4788e-01  1.51e-09  5.75e-13  9.90e-11  1.87e-13  1.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 92.6762ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:56 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:56 PM: Optimal value: 4.479e-01
(CVXPY) Sep 20 07:59:56 PM: Compilation took 1.860e-02 seconds
(CVXPY) Sep 20 07:59:56 PM: Solver (including time spent in interface) took 9.706e-02 seconds
Iteration: 7, Objective: 0.4479
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:56 PM: Your problem has 2589 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:56 PM: Finished problem compilation (took 1.967e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2589
  constraints   = 5089
  nnz(P)        = 0
  nnz(A)        = 41199
  cones (total) = 1
    : Nonnegative = 1,  numel = 5089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.80e-01  8.51e+01  1.00e+00  1.00e+00   ------   
  1  +5.7990e-01  +5.4321e+02  5.43e+02  4.31e-01  5.49e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3089e-01  +6.0768e+01  6.02e+01  1.64e-01  2.66e+01  1.65e-02  2.74e-01  9.43e-01  
  3  +5.0831e-01  +1.5717e+01  1.52e+01  1.05e-01  1.69e+01  4.53e-05  2.51e-01  3.15e-01  
  4  +5.0072e-01  +1.4126e+00  9.12e-01  8.96e-03  1.51e+00  6.64e-06  1.19e-01  8.34e-01  
  5  +5.0031e-01  +9.1700e-01  4.17e-01  4.02e-03  6.84e-01  1.03e-05  5.81e-02  6.18e-01  
  6  +5.0021e-01  +8.1424e-01  3.14e-01  2.64e-03  4.52e-01  2.16e-05  1.42e-02  8.43e-01  
  7  +4.9991e-01  +8.0733e-01  3.07e-01  5.32e-04  9.22e-02  1.65e-04  1.58e-03  8.96e-01  
  8  +4.9928e-01  +7.6328e-01  2.64e-01  3.41e-04  5.93e-02  1.46e-04  1.01e-03  5.90e-01  
  9  +4.9717e-01  +7.3030e-01  2.33e-01  1.98e-04  3.44e-02  1.83e-04  5.79e-04  5.03e-01  
 10  +4.9543e-01  +7.1100e-01  2.16e-01  1.66e-04  2.88e-02  1.50e-04  4.85e-04  3.02e-01  
 11  +4.9292e-01  +6.8379e-01  1.91e-01  1.31e-04  2.27e-02  7.32e-05  3.87e-04  5.89e-01  
 12  +4.9090e-01  +6.7165e-01  1.81e-01  1.08e-04  1.87e-02  5.60e-05  3.21e-04  4.30e-01  
 13  +4.8386e-01  +6.2923e-01  1.45e-01  8.20e-05  1.42e-02  2.08e-05  2.49e-04  6.56e-01  
 14  +4.7323e-01  +5.7645e-01  1.03e-01  5.06e-05  8.71e-03  1.37e-05  1.60e-04  4.55e-01  
 15  +4.6408e-01  +5.3350e-01  6.94e-02  3.16e-05  5.43e-03  8.28e-06  1.03e-04  4.69e-01  
 16  +4.5851e-01  +5.0635e-01  4.78e-02  1.99e-05  3.43e-03  4.89e-06  6.59e-05  9.90e-01  
 17  +4.5472e-01  +4.9064e-01  3.59e-02  1.46e-05  2.51e-03  3.70e-06  4.89e-05  3.12e-01  
 18  +4.5038e-01  +4.7296e-01  2.26e-02  8.88e-06  1.53e-03  2.36e-06  3.05e-05  4.62e-01  
 19  +4.4543e-01  +4.5307e-01  7.65e-03  2.88e-06  4.95e-04  9.04e-07  1.03e-05  9.90e-01  
 20  +4.4286e-01  +4.4375e-01  8.95e-04  3.29e-07  5.67e-05  1.04e-07  1.22e-06  9.52e-01  
 21  +4.4250e-01  +4.4251e-01  1.06e-05  3.90e-09  6.72e-07  1.23e-09  1.45e-08  9.89e-01  
 22  +4.4250e-01  +4.4250e-01  1.06e-07  3.90e-11  6.72e-09  1.23e-11  1.45e-10  9.90e-01  
 23  +4.4250e-01  +4.4250e-01  1.07e-09  3.90e-13  6.72e-11  1.24e-13  1.47e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 95.6559ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:56 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:56 PM: Optimal value: 4.425e-01
(CVXPY) Sep 20 07:59:56 PM: Compilation took 1.967e-02 seconds
(CVXPY) Sep 20 07:59:56 PM: Solver (including time spent in interface) took 1.022e-01 seconds
Iteration: 8, Objective: 0.4425
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:56 PM: Your problem has 2599 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:56 PM: Finished problem compilation (took 2.283e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2599
  constraints   = 5099
  nnz(P)        = 0
  nnz(A)        = 42105
  cones (total) = 1
    : Nonnegative = 1,  numel = 5099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.51e+01  1.00e+00  1.00e+00   ------   
  1  +5.7982e-01  +5.4322e+02  5.43e+02  4.31e-01  5.49e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3083e-01  +6.0715e+01  6.02e+01  1.64e-01  2.65e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0829e-01  +1.5695e+01  1.52e+01  1.05e-01  1.68e+01  4.54e-05  2.51e-01  3.18e-01  
  4  +5.0071e-01  +1.4081e+00  9.07e-01  8.93e-03  1.51e+00  6.66e-06  1.18e-01  8.37e-01  
  5  +5.0031e-01  +9.1162e-01  4.11e-01  3.97e-03  6.75e-01  1.14e-05  5.34e-02  6.94e-01  
  6  +5.0019e-01  +8.0896e-01  3.09e-01  2.38e-03  4.08e-01  2.89e-05  1.09e-02  8.55e-01  
  7  +4.9985e-01  +8.0527e-01  3.05e-01  5.06e-04  8.79e-02  1.88e-04  1.49e-03  8.68e-01  
  8  +4.9901e-01  +7.6067e-01  2.62e-01  3.03e-04  5.26e-02  1.77e-04  8.82e-04  6.47e-01  
  9  +4.9671e-01  +7.2686e-01  2.30e-01  1.98e-04  3.43e-02  1.81e-04  5.74e-04  4.67e-01  
 10  +4.9449e-01  +7.0533e-01  2.11e-01  1.61e-04  2.79e-02  1.30e-04  4.69e-04  4.15e-01  
 11  +4.9184e-01  +6.8809e-01  1.96e-01  1.19e-04  2.07e-02  1.09e-04  3.51e-04  4.61e-01  
 12  +4.8999e-01  +6.7516e-01  1.85e-01  1.14e-04  1.97e-02  7.96e-05  3.35e-04  2.33e-01  
 13  +4.7643e-01  +6.0069e-01  1.24e-01  5.91e-05  1.02e-02  1.50e-05  1.82e-04  9.22e-01  
 14  +4.7066e-01  +5.7443e-01  1.04e-01  4.74e-05  8.17e-03  1.19e-05  1.49e-04  2.69e-01  
 15  +4.6221e-01  +5.3500e-01  7.28e-02  3.19e-05  5.49e-03  6.56e-06  1.04e-04  9.49e-01  
 16  +4.5251e-01  +4.9403e-01  4.15e-02  1.70e-05  2.92e-03  3.71e-06  5.72e-05  5.31e-01  
 17  +4.4943e-01  +4.8132e-01  3.19e-02  1.25e-05  2.16e-03  3.18e-06  4.27e-05  5.42e-01  
 18  +4.4193e-01  +4.5169e-01  9.76e-03  3.69e-06  6.34e-04  9.90e-07  1.30e-05  7.57e-01  
 19  +4.3905e-01  +4.4057e-01  1.52e-03  5.67e-07  9.75e-05  1.83e-07  2.03e-06  9.90e-01  
 20  +4.3853e-01  +4.3873e-01  2.03e-04  7.56e-08  1.30e-05  2.42e-08  2.71e-07  9.68e-01  
 21  +4.3845e-01  +4.3845e-01  2.54e-06  9.45e-10  1.63e-07  3.03e-10  3.39e-09  9.88e-01  
 22  +4.3845e-01  +4.3845e-01  2.56e-08  9.53e-12  1.64e-09  3.06e-12  3.42e-11  9.90e-01  
 23  +4.3845e-01  +4.3845e-01  2.59e-10  9.61e-14  1.65e-11  3.10e-14  3.47e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 101.8233ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:56 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:56 PM: Optimal value: 4.385e-01
(CVXPY) Sep 20 07:59:56 PM: Compilation took 2.283e-02 seconds
(CVXPY) Sep 20 07:59:56 PM: Solver (including time spent in interface) took 1.069e-01 seconds
Iteration: 9, Objective: 0.4385
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:57 PM: Your problem has 2609 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:57 PM: Finished problem compilation (took 2.157e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2609
  constraints   = 5109
  nnz(P)        = 0
  nnz(A)        = 42656
  cones (total) = 1
    : Nonnegative = 1,  numel = 5109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.51e+01  1.00e+00  1.00e+00   ------   
  1  +5.7972e-01  +5.4316e+02  5.43e+02  4.31e-01  5.48e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3075e-01  +6.0621e+01  6.01e+01  1.63e-01  2.64e+01  1.65e-02  2.73e-01  9.44e-01  
  3  +5.0827e-01  +1.5664e+01  1.52e+01  1.04e-01  1.68e+01  4.54e-05  2.50e-01  3.20e-01  
  4  +5.0071e-01  +1.4019e+00  9.01e-01  8.88e-03  1.50e+00  6.68e-06  1.17e-01  8.41e-01  
  5  +5.0036e-01  +9.7293e-01  4.73e-01  4.57e-03  7.76e-01  1.16e-05  5.69e-02  6.49e-01  
  6  +5.0023e-01  +8.4807e-01  3.48e-01  2.65e-03  4.55e-01  2.81e-05  1.19e-02  8.63e-01  
  7  +4.9992e-01  +8.4315e-01  3.43e-01  5.88e-04  1.02e-01  1.70e-04  1.74e-03  8.59e-01  
  8  +4.9914e-01  +7.8486e-01  2.86e-01  3.49e-04  6.06e-02  1.46e-04  1.02e-03  6.76e-01  
  9  +4.9604e-01  +7.3907e-01  2.43e-01  1.86e-04  3.23e-02  1.78e-04  5.39e-04  5.77e-01  
 10  +4.9376e-01  +7.2343e-01  2.30e-01  1.50e-04  2.61e-02  1.70e-04  4.36e-04  2.81e-01  
 11  +4.9237e-01  +7.1339e-01  2.21e-01  1.32e-04  2.28e-02  1.27e-04  3.83e-04  3.62e-01  
 12  +4.9057e-01  +6.9973e-01  2.09e-01  1.26e-04  2.19e-02  1.01e-04  3.71e-04  1.54e-01  
 13  +4.8442e-01  +6.6140e-01  1.77e-01  1.01e-04  1.74e-02  4.67e-05  3.03e-04  5.30e-01  
 14  +4.6658e-01  +5.6876e-01  1.02e-01  4.64e-05  7.99e-03  2.32e-05  1.48e-04  6.19e-01  
 15  +4.5832e-01  +5.3271e-01  7.44e-02  3.16e-05  5.44e-03  1.43e-05  1.04e-04  4.54e-01  
 16  +4.5492e-01  +5.1703e-01  6.21e-02  2.57e-05  4.42e-03  7.42e-06  8.61e-05  8.26e-01  
 17  +4.4720e-01  +4.8590e-01  3.87e-02  1.51e-05  2.60e-03  4.45e-06  5.25e-05  7.23e-01  
 18  +4.3746e-01  +4.4701e-01  9.55e-03  3.57e-06  6.13e-04  1.08e-06  1.31e-05  9.90e-01  
 19  +4.3446e-01  +4.3588e-01  1.42e-03  5.25e-07  9.01e-05  1.66e-07  1.97e-06  9.67e-01  
 20  +4.3391e-01  +4.3392e-01  1.52e-05  5.62e-09  9.64e-07  1.77e-09  2.12e-08  9.89e-01  
 21  +4.3390e-01  +4.3390e-01  1.52e-07  5.62e-11  9.65e-09  1.77e-11  2.12e-10  9.90e-01  
 22  +4.3390e-01  +4.3390e-01  1.52e-09  5.62e-13  9.65e-11  1.78e-13  2.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 100.223ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:57 PM: Optimal value: 4.339e-01
(CVXPY) Sep 20 07:59:57 PM: Compilation took 2.157e-02 seconds
(CVXPY) Sep 20 07:59:57 PM: Solver (including time spent in interface) took 1.057e-01 seconds
Iteration: 10, Objective: 0.4339
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:57 PM: Your problem has 2619 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:57 PM: Finished problem compilation (took 2.314e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2619
  constraints   = 5119
  nnz(P)        = 0
  nnz(A)        = 43341
  cones (total) = 1
    : Nonnegative = 1,  numel = 5119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.51e+01  1.00e+00  1.00e+00   ------   
  1  +5.7959e-01  +5.4321e+02  5.43e+02  4.32e-01  5.48e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3065e-01  +6.0524e+01  6.00e+01  1.63e-01  2.63e+01  1.65e-02  2.72e-01  9.46e-01  
  3  +5.0824e-01  +1.5635e+01  1.51e+01  1.04e-01  1.67e+01  4.55e-05  2.49e-01  3.23e-01  
  4  +5.0074e-01  +1.4550e+00  9.54e-01  9.41e-03  1.58e+00  6.85e-06  1.19e-01  8.19e-01  
  5  +5.0035e-01  +9.9805e-01  4.98e-01  4.81e-03  8.16e-01  1.14e-05  5.97e-02  6.39e-01  
  6  +5.0015e-01  +8.4186e-01  3.42e-01  2.55e-03  4.37e-01  2.84e-05  1.12e-02  8.78e-01  
  7  +4.9921e-01  +8.3122e-01  3.32e-01  4.59e-04  7.98e-02  2.08e-04  1.34e-03  8.83e-01  
  8  +4.9771e-01  +8.0227e-01  3.05e-01  3.10e-04  5.39e-02  2.39e-04  8.98e-04  4.04e-01  
  9  +4.9623e-01  +7.7147e-01  2.75e-01  2.55e-04  4.43e-02  1.76e-04  7.40e-04  3.78e-01  
 10  +4.9322e-01  +7.2827e-01  2.35e-01  1.77e-04  3.07e-02  9.80e-05  5.17e-04  6.56e-01  
 11  +4.9023e-01  +7.0865e-01  2.18e-01  1.32e-04  2.29e-02  8.53e-05  3.88e-04  4.46e-01  
 12  +4.8687e-01  +6.8364e-01  1.97e-01  1.27e-04  2.19e-02  5.21e-05  3.78e-04  2.57e-01  
 13  +4.7901e-01  +6.4197e-01  1.63e-01  8.93e-05  1.54e-02  4.27e-05  2.73e-04  3.52e-01  
 14  +4.5967e-01  +5.4556e-01  8.59e-02  3.87e-05  6.67e-03  1.56e-05  1.26e-04  6.92e-01  
 15  +4.5252e-01  +5.1489e-01  6.24e-02  2.66e-05  4.58e-03  8.87e-06  8.93e-05  5.88e-01  
 16  +4.4467e-01  +4.8201e-01  3.73e-02  1.52e-05  2.60e-03  5.03e-06  5.27e-05  4.97e-01  
 17  +4.3674e-01  +4.4913e-01  1.24e-02  4.78e-06  8.21e-04  1.37e-06  1.74e-05  9.90e-01  
 18  +4.3306e-01  +4.3531e-01  2.25e-03  8.49e-07  1.46e-04  2.53e-07  3.19e-06  9.10e-01  
 19  +4.3222e-01  +4.3227e-01  4.95e-05  1.85e-08  3.18e-06  5.54e-09  7.07e-08  9.87e-01  
 20  +4.3220e-01  +4.3220e-01  4.95e-07  1.85e-10  3.18e-08  5.55e-11  7.08e-10  9.90e-01  
 21  +4.3220e-01  +4.3220e-01  4.95e-09  1.85e-12  3.18e-10  5.55e-13  7.08e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 96.6032ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:57 PM: Optimal value: 4.322e-01
(CVXPY) Sep 20 07:59:57 PM: Compilation took 2.314e-02 seconds
(CVXPY) Sep 20 07:59:57 PM: Solver (including time spent in interface) took 1.031e-01 seconds
Iteration: 11, Objective: 0.4322
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:57 PM: Your problem has 2629 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:57 PM: Finished problem compilation (took 2.311e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2629
  constraints   = 5129
  nnz(P)        = 0
  nnz(A)        = 43783
  cones (total) = 1
    : Nonnegative = 1,  numel = 5129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.7943e-01  +5.4320e+02  5.43e+02  4.32e-01  5.47e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3057e-01  +6.0449e+01  5.99e+01  1.63e-01  2.61e+01  1.65e-02  2.72e-01  9.47e-01  
  3  +5.0823e-01  +1.5613e+01  1.51e+01  1.04e-01  1.67e+01  4.56e-05  2.48e-01  3.26e-01  
  4  +5.0073e-01  +1.4439e+00  9.43e-01  9.31e-03  1.57e+00  6.86e-06  1.18e-01  8.26e-01  
  5  +5.0035e-01  +9.9434e-01  4.94e-01  4.77e-03  8.09e-01  1.21e-05  5.46e-02  6.80e-01  
  6  +5.0013e-01  +8.6673e-01  3.67e-01  2.29e-03  3.95e-01  3.98e-05  8.59e-03  8.90e-01  
  7  +4.9907e-01  +8.5549e-01  3.56e-01  4.41e-04  7.67e-02  2.42e-04  1.27e-03  8.53e-01  
  8  +4.9578e-01  +7.9978e-01  3.04e-01  2.16e-04  3.75e-02  3.29e-04  6.17e-04  6.20e-01  
  9  +4.9348e-01  +7.6865e-01  2.75e-01  1.87e-04  3.24e-02  2.05e-04  5.39e-04  3.85e-01  
 10  +4.9030e-01  +7.3716e-01  2.47e-01  1.58e-04  2.74e-02  1.30e-04  4.61e-04  3.97e-01  
 11  +4.8545e-01  +7.0389e-01  2.18e-01  1.30e-04  2.24e-02  8.44e-05  3.85e-04  3.94e-01  
 12  +4.7131e-01  +6.1883e-01  1.48e-01  7.78e-05  1.34e-02  1.95e-05  2.44e-04  7.50e-01  
 13  +4.5402e-01  +5.3393e-01  7.99e-02  3.69e-05  6.35e-03  8.86e-06  1.23e-04  5.93e-01  
 14  +4.4739e-01  +5.0519e-01  5.78e-02  2.52e-05  4.32e-03  6.08e-06  8.63e-05  5.66e-01  
 15  +4.4002e-01  +4.7347e-01  3.34e-02  1.39e-05  2.39e-03  3.47e-06  4.95e-05  5.73e-01  
 16  +4.3434e-01  +4.4900e-01  1.47e-02  5.87e-06  1.01e-03  1.61e-06  2.16e-05  9.90e-01  
 17  +4.2995e-01  +4.3194e-01  1.99e-03  7.80e-07  1.34e-04  2.13e-07  2.99e-06  9.21e-01  
 18  +4.2924e-01  +4.2933e-01  9.64e-05  3.73e-08  6.39e-06  1.03e-08  1.46e-07  9.78e-01  
 19  +4.2920e-01  +4.2920e-01  9.76e-07  3.77e-10  6.47e-08  1.04e-10  1.48e-09  9.90e-01  
 20  +4.2920e-01  +4.2920e-01  9.77e-09  3.77e-12  6.47e-10  1.04e-12  1.48e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 94.5071ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:57 PM: Optimal value: 4.292e-01
(CVXPY) Sep 20 07:59:57 PM: Compilation took 2.311e-02 seconds
(CVXPY) Sep 20 07:59:57 PM: Solver (including time spent in interface) took 1.006e-01 seconds
Iteration: 12, Objective: 0.4292
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:57 PM: Your problem has 2639 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:57 PM: Finished problem compilation (took 2.165e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2639
  constraints   = 5139
  nnz(P)        = 0
  nnz(A)        = 44300
  cones (total) = 1
    : Nonnegative = 1,  numel = 5139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.7923e-01  +5.4324e+02  5.43e+02  4.32e-01  5.46e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3046e-01  +6.0345e+01  5.98e+01  1.62e-01  2.60e+01  1.66e-02  2.71e-01  9.49e-01  
  3  +5.0820e-01  +1.5584e+01  1.51e+01  1.04e-01  1.66e+01  4.58e-05  2.48e-01  3.29e-01  
  4  +5.0075e-01  +1.4860e+00  9.85e-01  9.73e-03  1.64e+00  7.03e-06  1.19e-01  8.10e-01  
  5  +5.0034e-01  +1.0195e+00  5.19e-01  5.00e-03  8.48e-01  1.25e-05  5.45e-02  6.92e-01  
  6  +5.0008e-01  +9.2549e-01  4.25e-01  2.45e-03  4.23e-01  4.41e-05  8.77e-03  8.99e-01  
  7  +4.9821e-01  +9.0088e-01  4.03e-01  4.23e-04  7.37e-02  2.78e-04  1.21e-03  8.63e-01  
  8  +4.9613e-01  +8.6550e-01  3.69e-01  3.22e-04  5.60e-02  2.83e-04  9.22e-04  2.91e-01  
  9  +4.9209e-01  +7.9027e-01  2.98e-01  2.12e-04  3.69e-02  1.67e-04  6.16e-04  6.08e-01  
 10  +4.8931e-01  +7.6592e-01  2.77e-01  1.74e-04  3.02e-02  1.45e-04  5.09e-04  3.03e-01  
 11  +4.8230e-01  +7.0497e-01  2.23e-01  1.38e-04  2.38e-02  5.72e-05  4.14e-04  5.27e-01  
 12  +4.6796e-01  +6.2086e-01  1.53e-01  7.98e-05  1.37e-02  3.09e-05  2.52e-04  5.50e-01  
 13  +4.5756e-01  +5.6897e-01  1.11e-01  5.36e-05  9.22e-03  1.99e-05  1.76e-04  3.93e-01  
 14  +4.5154e-01  +5.3908e-01  8.75e-02  3.99e-05  6.86e-03  8.03e-06  1.35e-04  9.16e-01  
 15  +4.3905e-01  +4.8338e-01  4.43e-02  1.89e-05  3.23e-03  4.03e-06  6.74e-05  6.54e-01  
 16  +4.3657e-01  +4.7274e-01  3.62e-02  1.51e-05  2.59e-03  3.34e-06  5.49e-05  2.65e-01  
 17  +4.2877e-01  +4.3956e-01  1.08e-02  4.31e-06  7.38e-04  1.14e-06  1.66e-05  9.90e-01  
 18  +4.2523e-01  +4.2587e-01  6.35e-04  2.50e-07  4.28e-05  6.55e-08  9.96e-07  9.90e-01  
 19  +4.2500e-01  +4.2501e-01  6.50e-06  2.56e-09  4.38e-07  6.70e-10  1.02e-08  9.90e-01  
 20  +4.2500e-01  +4.2500e-01  6.50e-08  2.56e-11  4.38e-09  6.70e-12  1.02e-10  9.90e-01  
 21  +4.2500e-01  +4.2500e-01  6.50e-10  2.56e-13  4.38e-11  6.73e-14  1.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 95.0471ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:57 PM: Optimal value: 4.250e-01
(CVXPY) Sep 20 07:59:57 PM: Compilation took 2.165e-02 seconds
(CVXPY) Sep 20 07:59:57 PM: Solver (including time spent in interface) took 1.003e-01 seconds
Iteration: 13, Objective: 0.4250
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:58 PM: Your problem has 2649 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:58 PM: Finished problem compilation (took 2.271e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2649
  constraints   = 5149
  nnz(P)        = 0
  nnz(A)        = 44824
  cones (total) = 1
    : Nonnegative = 1,  numel = 5149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.7913e-01  +5.4324e+02  5.43e+02  4.32e-01  5.45e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3039e-01  +6.0278e+01  5.97e+01  1.62e-01  2.59e+01  1.66e-02  2.71e-01  9.50e-01  
  3  +5.0819e-01  +1.5569e+01  1.51e+01  1.04e-01  1.65e+01  4.59e-05  2.47e-01  3.31e-01  
  4  +5.0076e-01  +1.5102e+00  1.01e+00  9.98e-03  1.67e+00  7.11e-06  1.20e-01  8.01e-01  
  5  +5.0034e-01  +1.0257e+00  5.25e-01  5.06e-03  8.57e-01  1.26e-05  5.43e-02  6.99e-01  
  6  +5.0002e-01  +9.2565e-01  4.26e-01  2.37e-03  4.08e-01  4.64e-05  8.33e-03  8.99e-01  
  7  +4.9763e-01  +8.9533e-01  3.98e-01  3.86e-04  6.71e-02  3.02e-04  1.10e-03  8.69e-01  
  8  +4.9270e-01  +8.1473e-01  3.22e-01  2.46e-04  4.26e-02  2.54e-04  7.09e-04  4.72e-01  
  9  +4.8780e-01  +7.7594e-01  2.88e-01  1.67e-04  2.90e-02  2.40e-04  4.87e-04  4.35e-01  
 10  +4.8458e-01  +7.3911e-01  2.55e-01  1.59e-04  2.76e-02  1.43e-04  4.73e-04  2.18e-01  
 11  +4.7652e-01  +6.8836e-01  2.12e-01  1.17e-04  2.03e-02  1.12e-04  3.57e-04  3.12e-01  
 12  +4.7599e-01  +6.8376e-01  2.08e-01  1.16e-04  2.00e-02  9.74e-05  3.54e-04  1.04e-01  
 13  +4.6062e-01  +5.9548e-01  1.35e-01  6.61e-05  1.14e-02  5.17e-05  2.13e-04  4.84e-01  
 14  +4.5740e-01  +5.7845e-01  1.21e-01  5.80e-05  9.97e-03  3.96e-05  1.90e-04  2.55e-01  
 15  +4.4686e-01  +5.2539e-01  7.85e-02  3.55e-05  6.09e-03  1.93e-05  1.21e-04  5.32e-01  
 16  +4.3469e-01  +4.6729e-01  3.26e-02  1.39e-05  2.39e-03  5.99e-06  5.03e-05  7.19e-01  
 17  +4.3022e-01  +4.4682e-01  1.66e-02  6.90e-06  1.18e-03  2.33e-06  2.57e-05  7.74e-01  
 18  +4.2680e-01  +4.3286e-01  6.06e-03  2.43e-06  4.17e-04  7.12e-07  9.43e-06  8.94e-01  
 19  +4.2487e-01  +4.2533e-01  4.63e-04  1.83e-07  3.14e-05  5.34e-08  7.30e-07  9.32e-01  
 20  +4.2470e-01  +4.2471e-01  4.87e-06  1.92e-09  3.29e-07  5.61e-10  7.69e-09  9.90e-01  
 21  +4.2470e-01  +4.2470e-01  4.87e-08  1.92e-11  3.29e-09  5.61e-12  7.69e-11  9.90e-01  
 22  +4.2470e-01  +4.2470e-01  4.87e-10  1.92e-13  3.29e-11  5.66e-14  7.76e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 96.5744ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:58 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:58 PM: Optimal value: 4.247e-01
(CVXPY) Sep 20 07:59:58 PM: Compilation took 2.271e-02 seconds
(CVXPY) Sep 20 07:59:58 PM: Solver (including time spent in interface) took 1.027e-01 seconds
Iteration: 14, Objective: 0.4247
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:58 PM: Your problem has 2659 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:58 PM: Finished problem compilation (took 2.203e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2659
  constraints   = 5159
  nnz(P)        = 0
  nnz(A)        = 45159
  cones (total) = 1
    : Nonnegative = 1,  numel = 5159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.49e+01  1.00e+00  1.00e+00   ------   
  1  +5.7892e-01  +5.4334e+02  5.43e+02  4.33e-01  5.45e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3031e-01  +6.0212e+01  5.97e+01  1.62e-01  2.58e+01  1.66e-02  2.70e-01  9.51e-01  
  3  +5.0818e-01  +1.5558e+01  1.50e+01  1.03e-01  1.65e+01  4.60e-05  2.46e-01  3.34e-01  
  4  +5.0076e-01  +1.5006e+00  1.00e+00  9.89e-03  1.66e+00  7.11e-06  1.19e-01  8.07e-01  
  5  +5.0036e-01  +1.0470e+00  5.47e-01  5.27e-03  8.92e-01  1.29e-05  5.36e-02  6.94e-01  
  6  +5.0004e-01  +9.3779e-01  4.38e-01  2.38e-03  4.10e-01  4.77e-05  8.20e-03  8.90e-01  
  7  +4.9783e-01  +9.0944e-01  4.12e-01  4.09e-04  7.11e-02  2.93e-04  1.16e-03  8.60e-01  
  8  +4.9325e-01  +8.3447e-01  3.41e-01  2.58e-04  4.47e-02  2.71e-04  7.37e-04  4.66e-01  
  9  +4.8824e-01  +7.9119e-01  3.03e-01  1.76e-04  3.05e-02  2.48e-04  5.10e-04  4.39e-01  
 10  +4.8354e-01  +7.3724e-01  2.54e-01  1.62e-04  2.79e-02  1.06e-04  4.80e-04  3.45e-01  
 11  +4.7653e-01  +6.9322e-01  2.17e-01  1.25e-04  2.15e-02  8.04e-05  3.79e-04  3.18e-01  
 12  +4.7587e-01  +6.8802e-01  2.12e-01  1.23e-04  2.11e-02  6.76e-05  3.74e-04  1.43e-01  
 13  +4.6115e-01  +6.0625e-01  1.45e-01  7.24e-05  1.24e-02  4.32e-05  2.32e-04  4.23e-01  
 14  +4.5810e-01  +5.8930e-01  1.31e-01  6.38e-05  1.09e-02  3.06e-05  2.07e-04  3.45e-01  
 15  +4.4698e-01  +5.3291e-01  8.59e-02  3.93e-05  6.73e-03  1.25e-05  1.33e-04  6.70e-01  
 16  +4.3524e-01  +4.7785e-01  4.26e-02  1.85e-05  3.16e-03  5.35e-06  6.60e-05  6.39e-01  
 17  +4.3252e-01  +4.6552e-01  3.30e-02  1.41e-05  2.41e-03  4.07e-06  5.11e-05  3.09e-01  
 18  +4.2693e-01  +4.4064e-01  1.37e-02  5.73e-06  9.81e-04  1.60e-06  2.15e-05  6.97e-01  
 19  +4.2422e-01  +4.2905e-01  4.83e-03  1.97e-06  3.37e-04  5.09e-07  7.64e-06  9.90e-01  
 20  +4.2284e-01  +4.2376e-01  9.21e-04  3.69e-07  6.32e-05  9.62e-08  1.48e-06  8.16e-01  
 21  +4.2256e-01  +4.2273e-01  1.66e-04  6.59e-08  1.13e-05  1.67e-08  2.67e-07  9.90e-01  
 22  +4.2250e-01  +4.2250e-01  2.10e-06  8.34e-10  1.43e-07  2.11e-10  3.38e-09  9.87e-01  
 23  +4.2250e-01  +4.2250e-01  2.10e-08  8.34e-12  1.43e-09  2.11e-12  3.38e-11  9.90e-01  
 24  +4.2250e-01  +4.2250e-01  2.10e-10  8.34e-14  1.43e-11  2.16e-14  3.46e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 103.0774ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:58 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:58 PM: Optimal value: 4.225e-01
(CVXPY) Sep 20 07:59:58 PM: Compilation took 2.203e-02 seconds
(CVXPY) Sep 20 07:59:58 PM: Solver (including time spent in interface) took 1.092e-01 seconds
Iteration: 15, Objective: 0.4225
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:58 PM: Your problem has 2669 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:58 PM: Finished problem compilation (took 2.304e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2669
  constraints   = 5169
  nnz(P)        = 0
  nnz(A)        = 45542
  cones (total) = 1
    : Nonnegative = 1,  numel = 5169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.48e+01  1.00e+00  1.00e+00   ------   
  1  +5.7883e-01  +5.4334e+02  5.43e+02  4.33e-01  5.44e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3025e-01  +6.0152e+01  5.96e+01  1.62e-01  2.57e+01  1.66e-02  2.70e-01  9.51e-01  
  3  +5.0816e-01  +1.5542e+01  1.50e+01  1.03e-01  1.65e+01  4.60e-05  2.46e-01  3.35e-01  
  4  +5.0076e-01  +1.5051e+00  1.00e+00  9.95e-03  1.67e+00  7.14e-06  1.18e-01  8.06e-01  
  5  +5.0037e-01  +1.0666e+00  5.66e-01  5.46e-03  9.23e-01  1.30e-05  5.41e-02  6.86e-01  
  6  +5.0005e-01  +9.5634e-01  4.56e-01  2.52e-03  4.35e-01  4.64e-05  8.78e-03  8.73e-01  
  7  +4.9785e-01  +9.2551e-01  4.28e-01  4.40e-04  7.64e-02  2.81e-04  1.25e-03  8.59e-01  
  8  +4.9570e-01  +8.7835e-01  3.83e-01  3.46e-04  6.01e-02  2.41e-04  9.87e-04  3.22e-01  
  9  +4.9085e-01  +8.2044e-01  3.30e-01  2.28e-04  3.95e-02  2.27e-04  6.57e-04  4.36e-01  
 10  +4.8775e-01  +7.8837e-01  3.01e-01  1.85e-04  3.20e-02  1.77e-04  5.38e-04  3.56e-01  
 11  +4.8059e-01  +7.0786e-01  2.27e-01  1.50e-04  2.59e-02  5.76e-06  4.54e-04  7.59e-01  
 12  +4.6420e-01  +6.1928e-01  1.55e-01  7.94e-05  1.36e-02  6.76e-06  2.52e-04  6.13e-01  
 13  +4.5435e-01  +5.7174e-01  1.17e-01  5.63e-05  9.66e-03  6.44e-06  1.86e-04  4.56e-01  
 14  +4.4679e-01  +5.3623e-01  8.94e-02  4.06e-05  6.95e-03  6.97e-06  1.38e-04  6.86e-01  
 15  +4.3353e-01  +4.7678e-01  4.32e-02  1.85e-05  3.16e-03  3.35e-06  6.66e-05  6.07e-01  
 16  +4.2891e-01  +4.5657e-01  2.77e-02  1.16e-05  1.98e-03  2.24e-06  4.27e-05  4.53e-01  
 17  +4.2320e-01  +4.3223e-01  9.02e-03  3.66e-06  6.26e-04  8.13e-07  1.41e-05  8.02e-01  
 18  +4.2064e-01  +4.2209e-01  1.44e-03  5.72e-07  9.79e-05  1.49e-07  2.28e-06  9.90e-01  
 19  +4.2011e-01  +4.2013e-01  2.01e-05  7.91e-09  1.35e-06  2.06e-09  3.18e-08  9.87e-01  
 20  +4.2010e-01  +4.2010e-01  2.01e-07  7.90e-11  1.35e-08  2.06e-11  3.18e-10  9.90e-01  
 21  +4.2010e-01  +4.2010e-01  2.01e-09  7.91e-13  1.35e-10  2.08e-13  3.21e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 93.5405ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:58 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:58 PM: Optimal value: 4.201e-01
(CVXPY) Sep 20 07:59:58 PM: Compilation took 2.304e-02 seconds
(CVXPY) Sep 20 07:59:58 PM: Solver (including time spent in interface) took 9.921e-02 seconds
Iteration: 16, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:58 PM: Your problem has 2679 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:58 PM: Finished problem compilation (took 2.328e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2679
  constraints   = 5179
  nnz(P)        = 0
  nnz(A)        = 45906
  cones (total) = 1
    : Nonnegative = 1,  numel = 5179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.80e-01  8.48e+01  1.00e+00  1.00e+00   ------   
  1  +5.7875e-01  +5.4335e+02  5.43e+02  4.33e-01  5.43e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3015e-01  +6.0035e+01  5.95e+01  1.62e-01  2.56e+01  1.66e-02  2.70e-01  9.53e-01  
  3  +5.0814e-01  +1.5512e+01  1.50e+01  1.03e-01  1.64e+01  4.61e-05  2.45e-01  3.38e-01  
  4  +5.0075e-01  +1.4806e+00  9.80e-01  9.72e-03  1.63e+00  7.08e-06  1.16e-01  8.17e-01  
  5  +5.0040e-01  +1.0964e+00  5.96e-01  5.75e-03  9.72e-01  1.34e-05  5.32e-02  6.78e-01  
  6  +5.0000e-01  +9.4962e-01  4.50e-01  1.95e-03  3.37e-01  6.05e-05  6.23e-03  9.26e-01  
  7  +4.9786e-01  +9.1538e-01  4.18e-01  4.00e-04  6.96e-02  2.87e-04  1.13e-03  8.26e-01  
  8  +4.9641e-01  +8.8666e-01  3.90e-01  3.51e-04  6.10e-02  2.54e-04  9.93e-04  2.03e-01  
  9  +4.9172e-01  +8.1247e-01  3.21e-01  2.31e-04  4.00e-02  1.70e-04  6.62e-04  5.74e-01  
 10  +4.8882e-01  +7.8968e-01  3.01e-01  1.85e-04  3.20e-02  1.46e-04  5.33e-04  3.70e-01  
 11  +4.8028e-01  +7.1414e-01  2.34e-01  1.48e-04  2.55e-02  3.51e-05  4.45e-04  6.12e-01  
 12  +4.6980e-01  +6.5697e-01  1.87e-01  1.03e-04  1.77e-02  2.72e-05  3.21e-04  3.53e-01  
 13  +4.4861e-01  +5.4876e-01  1.00e-01  4.74e-05  8.12e-03  9.39e-06  1.60e-04  7.40e-01  
 14  +4.3899e-01  +5.0562e-01  6.66e-02  2.99e-05  5.11e-03  6.09e-06  1.05e-04  4.54e-01  
 15  +4.3096e-01  +4.6989e-01  3.89e-02  1.68e-05  2.87e-03  3.57e-06  6.19e-05  5.56e-01  
 16  +4.2198e-01  +4.3092e-01  8.94e-03  3.71e-06  6.34e-04  8.51e-07  1.46e-05  9.45e-01  
 17  +4.1918e-01  +4.1996e-01  7.81e-04  3.18e-07  5.44e-05  7.43e-08  1.32e-06  9.87e-01  
 18  +4.1890e-01  +4.1891e-01  8.88e-06  3.61e-09  6.16e-07  8.37e-10  1.50e-08  9.89e-01  
 19  +4.1890e-01  +4.1890e-01  8.88e-08  3.61e-11  6.16e-09  8.37e-12  1.50e-10  9.90e-01  
 20  +4.1890e-01  +4.1890e-01  8.88e-10  3.61e-13  6.16e-11  8.44e-14  1.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 89.8972ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:59 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:59 PM: Optimal value: 4.189e-01
(CVXPY) Sep 20 07:59:59 PM: Compilation took 2.328e-02 seconds
(CVXPY) Sep 20 07:59:59 PM: Solver (including time spent in interface) took 9.564e-02 seconds
Iteration: 17, Objective: 0.4189
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:59 PM: Your problem has 2689 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:59 PM: Finished problem compilation (took 2.269e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2689
  constraints   = 5189
  nnz(P)        = 0
  nnz(A)        = 46321
  cones (total) = 1
    : Nonnegative = 1,  numel = 5189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.80e-01  8.47e+01  1.00e+00  1.00e+00   ------   
  1  +5.7869e-01  +5.4330e+02  5.43e+02  4.33e-01  5.42e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3009e-01  +5.9963e+01  5.94e+01  1.62e-01  2.55e+01  1.66e-02  2.69e-01  9.53e-01  
  3  +5.0813e-01  +1.5495e+01  1.50e+01  1.03e-01  1.64e+01  4.62e-05  2.45e-01  3.40e-01  
  4  +5.0074e-01  +1.4739e+00  9.73e-01  9.66e-03  1.62e+00  7.09e-06  1.15e-01  8.21e-01  
  5  +5.0042e-01  +1.1156e+00  6.15e-01  5.94e-03  1.00e+00  1.36e-05  5.29e-02  6.71e-01  
  6  +5.0002e-01  +9.6407e-01  4.64e-01  1.96e-03  3.39e-01  6.16e-05  6.20e-03  9.22e-01  
  7  +4.9793e-01  +9.2866e-01  4.31e-01  4.13e-04  7.18e-02  2.82e-04  1.16e-03  8.21e-01  
  8  +4.9621e-01  +8.9839e-01  4.02e-01  3.54e-04  6.15e-02  2.63e-04  1.00e-03  1.96e-01  
  9  +4.9330e-01  +8.4036e-01  3.47e-01  2.75e-04  4.77e-02  1.62e-04  7.83e-04  4.76e-01  
 10  +4.8985e-01  +8.1434e-01  3.24e-01  2.05e-04  3.55e-02  1.64e-04  5.90e-04  3.37e-01  
 11  +4.8657e-01  +7.8085e-01  2.94e-01  1.87e-04  3.23e-02  1.14e-04  5.45e-04  2.51e-01  
 12  +4.8260e-01  +7.5278e-01  2.70e-01  1.64e-04  2.83e-02  9.68e-05  4.85e-04  1.81e-01  
 13  +4.7986e-01  +7.2961e-01  2.50e-01  1.53e-04  2.63e-02  5.95e-05  4.58e-04  3.37e-01  
 14  +4.6569e-01  +6.4810e-01  1.82e-01  9.44e-05  1.62e-02  4.25e-05  2.97e-04  3.97e-01  
 15  +4.5660e-01  +5.9775e-01  1.41e-01  7.04e-05  1.21e-02  1.97e-05  2.30e-04  5.84e-01  
 16  +4.3644e-01  +4.9873e-01  6.23e-02  2.80e-05  4.78e-03  7.10e-06  9.92e-05  6.27e-01  
 17  +4.2964e-01  +4.6784e-01  3.82e-02  1.66e-05  2.83e-03  4.17e-06  6.06e-05  5.62e-01  
 18  +4.2321e-01  +4.3964e-01  1.64e-02  6.95e-06  1.19e-03  1.75e-06  2.64e-05  6.32e-01  
 19  +4.2148e-01  +4.3190e-01  1.04e-02  4.37e-06  7.45e-04  1.10e-06  1.68e-05  5.99e-01  
 20  +4.1955e-01  +4.2387e-01  4.31e-03  1.80e-06  3.07e-04  4.50e-07  7.01e-06  6.61e-01  
 21  +4.1835e-01  +4.1895e-01  6.04e-04  2.51e-07  4.28e-05  6.15e-08  9.89e-07  9.24e-01  
 22  +4.1815e-01  +4.1819e-01  3.62e-05  1.51e-08  2.57e-06  3.65e-09  5.95e-08  9.44e-01  
 23  +4.1814e-01  +4.1814e-01  3.87e-07  1.61e-10  2.75e-08  3.90e-11  6.37e-10  9.89e-01  
 24  +4.1814e-01  +4.1814e-01  3.89e-09  1.62e-12  2.76e-10  3.91e-13  6.39e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 102.2563ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:59 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:59 PM: Optimal value: 4.181e-01
(CVXPY) Sep 20 07:59:59 PM: Compilation took 2.269e-02 seconds
(CVXPY) Sep 20 07:59:59 PM: Solver (including time spent in interface) took 1.075e-01 seconds
Iteration: 18, Objective: 0.4181
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:59 PM: Your problem has 2699 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:59 PM: Finished problem compilation (took 2.359e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2699
  constraints   = 5199
  nnz(P)        = 0
  nnz(A)        = 46772
  cones (total) = 1
    : Nonnegative = 1,  numel = 5199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.47e+01  1.00e+00  1.00e+00   ------   
  1  +5.7855e-01  +5.4329e+02  5.43e+02  4.34e-01  5.41e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3006e-01  +5.9941e+01  5.94e+01  1.61e-01  2.55e+01  1.66e-02  2.69e-01  9.54e-01  
  3  +5.0813e-01  +1.5489e+01  1.50e+01  1.03e-01  1.63e+01  4.62e-05  2.44e-01  3.41e-01  
  4  +5.0075e-01  +1.4925e+00  9.92e-01  9.85e-03  1.65e+00  7.16e-06  1.16e-01  8.14e-01  
  5  +5.0040e-01  +1.1079e+00  6.07e-01  5.85e-03  9.88e-01  1.38e-05  5.17e-02  6.89e-01  
  6  +4.9988e-01  +9.7283e-01  4.73e-01  1.68e-03  2.90e-01  7.49e-05  5.15e-03  9.47e-01  
  7  +4.9689e-01  +9.2091e-01  4.24e-01  3.40e-04  5.91e-02  3.32e-04  9.54e-04  8.28e-01  
  8  +4.9347e-01  +8.6939e-01  3.76e-01  2.82e-04  4.88e-02  2.46e-04  7.98e-04  3.05e-01  
  9  +4.8975e-01  +8.3535e-01  3.46e-01  2.15e-04  3.72e-02  2.27e-04  6.16e-04  3.37e-01  
 10  +4.8577e-01  +7.9482e-01  3.09e-01  1.83e-04  3.15e-02  1.54e-04  5.31e-04  3.37e-01  
 11  +4.7366e-01  +6.8829e-01  2.15e-01  1.28e-04  2.20e-02  1.44e-06  3.95e-04  8.23e-01  
 12  +4.5952e-01  +6.1453e-01  1.55e-01  8.00e-05  1.37e-02  4.15e-06  2.59e-04  5.10e-01  
 13  +4.4098e-01  +5.2347e-01  8.25e-02  3.83e-05  6.55e-03  2.73e-06  1.33e-04  5.54e-01  
 14  +4.3225e-01  +4.8382e-01  5.16e-02  2.29e-05  3.91e-03  2.16e-06  8.29e-05  4.68e-01  
 15  +4.2394e-01  +4.4707e-01  2.31e-02  9.91e-06  1.69e-03  1.11e-06  3.74e-05  6.03e-01  
 16  +4.2012e-01  +4.3019e-01  1.01e-02  4.21e-06  7.19e-04  8.06e-07  1.63e-05  8.30e-01  
 17  +4.1775e-01  +4.2055e-01  2.80e-03  1.16e-06  1.98e-04  2.38e-07  4.57e-06  7.81e-01  
 18  +4.1688e-01  +4.1710e-01  2.25e-04  9.28e-08  1.58e-05  1.99e-08  3.68e-07  9.43e-01  
 19  +4.1680e-01  +4.1680e-01  2.47e-06  1.02e-09  1.74e-07  2.20e-10  4.04e-09  9.89e-01  
 20  +4.1680e-01  +4.1680e-01  2.47e-08  1.02e-11  1.74e-09  2.20e-12  4.05e-11  9.90e-01  
 21  +4.1680e-01  +4.1680e-01  2.47e-10  1.02e-13  1.74e-11  2.21e-14  4.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 100.8301ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:59 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:59 PM: Optimal value: 4.168e-01
(CVXPY) Sep 20 07:59:59 PM: Compilation took 2.359e-02 seconds
(CVXPY) Sep 20 07:59:59 PM: Solver (including time spent in interface) took 1.071e-01 seconds
Iteration: 19, Objective: 0.4168
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:59 PM: Your problem has 2709 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:59 PM: Finished problem compilation (took 2.406e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2709
  constraints   = 5209
  nnz(P)        = 0
  nnz(A)        = 47205
  cones (total) = 1
    : Nonnegative = 1,  numel = 5209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.80e-01  8.46e+01  1.00e+00  1.00e+00   ------   
  1  +5.7850e-01  +5.4324e+02  5.43e+02  4.34e-01  5.40e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3002e-01  +5.9895e+01  5.94e+01  1.61e-01  2.54e+01  1.66e-02  2.69e-01  9.54e-01  
  3  +5.0812e-01  +1.5476e+01  1.50e+01  1.03e-01  1.63e+01  4.62e-05  2.44e-01  3.42e-01  
  4  +5.0075e-01  +1.4896e+00  9.89e-01  9.83e-03  1.64e+00  7.17e-06  1.15e-01  8.16e-01  
  5  +5.0045e-01  +1.1668e+00  6.66e-01  6.43e-03  1.08e+00  1.39e-05  5.55e-02  6.62e-01  
  6  +4.9999e-01  +9.6574e-01  4.66e-01  2.00e-03  3.45e-01  5.85e-05  6.33e-03  9.37e-01  
  7  +4.9764e-01  +9.2921e-01  4.32e-01  4.01e-04  6.96e-02  2.82e-04  1.13e-03  8.29e-01  
  8  +4.9536e-01  +8.9155e-01  3.96e-01  3.36e-04  5.83e-02  2.51e-04  9.49e-04  2.36e-01  
  9  +4.9065e-01  +8.3557e-01  3.45e-01  2.34e-04  4.05e-02  2.10e-04  6.68e-04  4.51e-01  
 10  +4.8687e-01  +7.9725e-01  3.10e-01  1.90e-04  3.28e-02  1.44e-04  5.50e-04  4.11e-01  
 11  +4.8116e-01  +7.4786e-01  2.67e-01  1.65e-04  2.85e-02  8.25e-05  4.91e-04  3.33e-01  
 12  +4.6809e-01  +6.6745e-01  1.99e-01  1.08e-04  1.86e-02  4.01e-05  3.39e-04  5.59e-01  
 13  +4.4738e-01  +5.5906e-01  1.12e-01  5.34e-05  9.13e-03  1.14e-05  1.81e-04  7.50e-01  
 14  +4.3425e-01  +4.9810e-01  6.39e-02  2.87e-05  4.90e-03  6.01e-06  1.03e-04  5.81e-01  
 15  +4.2818e-01  +4.7102e-01  4.28e-02  1.87e-05  3.20e-03  4.01e-06  6.90e-05  3.87e-01  
 16  +4.2191e-01  +4.4343e-01  2.15e-02  9.14e-06  1.56e-03  2.04e-06  3.48e-05  6.23e-01  
 17  +4.1945e-01  +4.3266e-01  1.32e-02  5.54e-06  9.45e-04  1.29e-06  2.14e-05  5.90e-01  
 18  +4.1736e-01  +4.2397e-01  6.61e-03  2.76e-06  4.70e-04  6.46e-07  1.08e-05  5.41e-01  
 19  +4.1605e-01  +4.1849e-01  2.45e-03  1.01e-06  1.73e-04  2.41e-07  4.03e-06  8.31e-01  
 20  +4.1536e-01  +4.1580e-01  4.40e-04  1.82e-07  3.10e-05  4.33e-08  7.28e-07  8.42e-01  
 21  +4.1521e-01  +4.1522e-01  6.32e-06  2.61e-09  4.45e-07  6.21e-10  1.05e-08  9.86e-01  
 22  +4.1521e-01  +4.1521e-01  6.32e-08  2.61e-11  4.46e-09  6.21e-12  1.05e-10  9.90e-01  
 23  +4.1521e-01  +4.1521e-01  6.32e-10  2.61e-13  4.46e-11  6.22e-14  1.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 111.0206ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:59 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:59 PM: Optimal value: 4.152e-01
(CVXPY) Sep 20 07:59:59 PM: Compilation took 2.406e-02 seconds
(CVXPY) Sep 20 07:59:59 PM: Solver (including time spent in interface) took 1.174e-01 seconds
Iteration: 20, Objective: 0.4152
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:00 PM: Your problem has 2719 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:00 PM: Finished problem compilation (took 2.681e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2719
  constraints   = 5219
  nnz(P)        = 0
  nnz(A)        = 47522
  cones (total) = 1
    : Nonnegative = 1,  numel = 5219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.45e+01  1.00e+00  1.00e+00   ------   
  1  +5.7835e-01  +5.4325e+02  5.43e+02  4.34e-01  5.40e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2995e-01  +5.9826e+01  5.93e+01  1.61e-01  2.53e+01  1.67e-02  2.68e-01  9.55e-01  
  3  +5.0810e-01  +1.5458e+01  1.50e+01  1.03e-01  1.62e+01  4.63e-05  2.43e-01  3.44e-01  
  4  +5.0074e-01  +1.4701e+00  9.69e-01  9.65e-03  1.61e+00  7.13e-06  1.13e-01  8.25e-01  
  5  +5.0046e-01  +1.1791e+00  6.79e-01  6.53e-03  1.10e+00  1.47e-05  5.22e-02  6.81e-01  
  6  +4.9998e-01  +9.9041e-01  4.90e-01  1.83e-03  3.16e-01  6.95e-05  5.61e-03  9.29e-01  
  7  +4.9755e-01  +9.4408e-01  4.47e-01  3.89e-04  6.76e-02  2.99e-04  1.09e-03  8.22e-01  
  8  +4.9521e-01  +9.0375e-01  4.09e-01  3.37e-04  5.84e-02  2.51e-04  9.47e-04  2.21e-01  
  9  +4.8899e-01  +8.2829e-01  3.39e-01  2.14e-04  3.69e-02  1.84e-04  6.14e-04  5.70e-01  
 10  +4.8689e-01  +8.0485e-01  3.18e-01  2.06e-04  3.55e-02  1.45e-04  5.97e-04  1.34e-01  
 11  +4.8098e-01  +7.5984e-01  2.79e-01  1.67e-04  2.88e-02  9.83e-05  4.95e-04  3.67e-01  
 12  +4.6904e-01  +6.8183e-01  2.13e-01  1.17e-04  2.01e-02  3.43e-05  3.65e-04  6.34e-01  
 13  +4.5000e-01  +5.7995e-01  1.30e-01  6.32e-05  1.08e-02  1.40e-05  2.11e-04  6.58e-01  
 14  +4.3380e-01  +5.0170e-01  6.79e-02  3.08e-05  5.25e-03  6.34e-06  1.10e-04  6.39e-01  
 15  +4.2850e-01  +4.7737e-01  4.89e-02  2.16e-05  3.68e-03  4.59e-06  7.90e-05  3.85e-01  
 16  +4.2056e-01  +4.4041e-01  1.99e-02  8.43e-06  1.44e-03  2.01e-06  3.21e-05  9.90e-01  
 17  +4.1671e-01  +4.2437e-01  7.66e-03  3.22e-06  5.48e-04  7.81e-07  1.26e-05  8.13e-01  
 18  +4.1505e-01  +4.1780e-01  2.74e-03  1.14e-06  1.94e-04  2.78e-07  4.57e-06  6.98e-01  
 19  +4.1425e-01  +4.1464e-01  3.95e-04  1.62e-07  2.76e-05  3.81e-08  6.65e-07  9.90e-01  
 20  +4.1410e-01  +4.1411e-01  4.48e-06  1.83e-09  3.12e-07  4.28e-10  7.56e-09  9.89e-01  
 21  +4.1410e-01  +4.1410e-01  4.50e-08  1.84e-11  3.13e-09  4.30e-12  7.58e-11  9.90e-01  
 22  +4.1410e-01  +4.1410e-01  4.50e-10  1.84e-13  3.13e-11  4.45e-14  7.85e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 104.4177ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:00 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:00 PM: Optimal value: 4.141e-01
(CVXPY) Sep 20 08:00:00 PM: Compilation took 2.681e-02 seconds
(CVXPY) Sep 20 08:00:00 PM: Solver (including time spent in interface) took 1.111e-01 seconds
Iteration: 21, Objective: 0.4141
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:00 PM: Your problem has 2729 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:00 PM: Finished problem compilation (took 2.549e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2729
  constraints   = 5229
  nnz(P)        = 0
  nnz(A)        = 47855
  cones (total) = 1
    : Nonnegative = 1,  numel = 5229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.45e+01  1.00e+00  1.00e+00   ------   
  1  +5.7808e-01  +5.4347e+02  5.43e+02  4.34e-01  5.39e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2977e-01  +5.9678e+01  5.91e+01  1.61e-01  2.52e+01  1.67e-02  2.68e-01  9.58e-01  
  3  +5.0808e-01  +1.5430e+01  1.49e+01  1.02e-01  1.62e+01  4.66e-05  2.42e-01  3.49e-01  
  4  +5.0073e-01  +1.4521e+00  9.51e-01  9.49e-03  1.58e+00  7.12e-06  1.11e-01  8.36e-01  
  5  +5.0056e-01  +1.2873e+00  7.87e-01  7.63e-03  1.28e+00  1.38e-05  5.93e-02  5.82e-01  
  6  +5.0011e-01  +1.0162e+00  5.16e-01  2.03e-03  3.50e-01  6.04e-05  6.22e-03  9.60e-01  
  7  +4.9843e-01  +9.7412e-01  4.76e-01  4.93e-04  8.57e-02  2.29e-04  1.38e-03  8.02e-01  
  8  +4.9637e-01  +9.3232e-01  4.36e-01  4.10e-04  7.12e-02  2.06e-04  1.15e-03  2.44e-01  
  9  +4.9282e-01  +8.7627e-01  3.83e-01  3.06e-04  5.29e-02  1.60e-04  8.65e-04  4.33e-01  
 10  +4.8745e-01  +8.3174e-01  3.44e-01  2.10e-04  3.63e-02  1.50e-04  6.05e-04  4.35e-01  
 11  +4.8549e-01  +8.0987e-01  3.24e-01  2.07e-04  3.57e-02  1.22e-04  6.01e-04  8.85e-02  
 12  +4.8057e-01  +7.6871e-01  2.88e-01  1.80e-04  3.10e-02  8.04e-05  5.34e-04  3.10e-01  
 13  +4.7557e-01  +7.3481e-01  2.59e-01  1.56e-04  2.68e-02  4.88e-05  4.73e-04  4.08e-01  
 14  +4.6037e-01  +6.4723e-01  1.87e-01  9.66e-05  1.65e-02  3.39e-05  3.08e-04  3.90e-01  
 15  +4.4867e-01  +5.8312e-01  1.34e-01  6.61e-05  1.13e-02  1.44e-05  2.22e-04  6.85e-01  
 16  +4.2749e-01  +4.7873e-01  5.12e-02  2.29e-05  3.89e-03  4.27e-06  8.36e-05  7.95e-01  
 17  +4.2607e-01  +4.7241e-01  4.63e-02  2.03e-05  3.46e-03  4.01e-06  7.47e-05  2.41e-01  
 18  +4.2057e-01  +4.4790e-01  2.73e-02  1.16e-05  1.98e-03  2.62e-06  4.40e-05  7.62e-01  
 19  +4.1621e-01  +4.2962e-01  1.34e-02  5.62e-06  9.56e-04  1.30e-06  2.20e-05  5.99e-01  
 20  +4.1375e-01  +4.1953e-01  5.78e-03  2.39e-06  4.07e-04  5.60e-07  9.61e-06  6.59e-01  
 21  +4.1237e-01  +4.1395e-01  1.57e-03  6.44e-07  1.10e-04  1.54e-07  2.65e-06  9.90e-01  
 22  +4.1181e-01  +4.1183e-01  2.37e-05  9.64e-09  1.64e-06  2.28e-09  4.01e-08  9.87e-01  
 23  +4.1180e-01  +4.1180e-01  2.37e-07  9.65e-11  1.64e-08  2.28e-11  4.01e-10  9.90e-01  
 24  +4.1180e-01  +4.1180e-01  2.37e-09  9.65e-13  1.64e-10  2.30e-13  4.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 115.8932ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:00 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:00 PM: Optimal value: 4.118e-01
(CVXPY) Sep 20 08:00:00 PM: Compilation took 2.549e-02 seconds
(CVXPY) Sep 20 08:00:00 PM: Solver (including time spent in interface) took 1.214e-01 seconds
Iteration: 22, Objective: 0.4118
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:00 PM: Your problem has 2739 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:00 PM: Finished problem compilation (took 2.579e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:00 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2739
  constraints   = 5239
  nnz(P)        = 0
  nnz(A)        = 48376
  cones (total) = 1
    : Nonnegative = 1,  numel = 5239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.80e-01  8.44e+01  1.00e+00  1.00e+00   ------   
  1  +5.7803e-01  +5.4343e+02  5.43e+02  4.35e-01  5.38e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2972e-01  +5.9627e+01  5.91e+01  1.61e-01  2.51e+01  1.67e-02  2.67e-01  9.58e-01  
  3  +5.0806e-01  +1.5406e+01  1.49e+01  1.02e-01  1.61e+01  4.67e-05  2.42e-01  3.52e-01  
  4  +5.0077e-01  +1.5335e+00  1.03e+00  1.03e-02  1.71e+00  7.39e-06  1.15e-01  8.04e-01  
  5  +5.0050e-01  +1.2688e+00  7.68e-01  7.43e-03  1.25e+00  1.37e-05  5.96e-02  6.08e-01  
  6  +4.9981e-01  +9.5408e-01  4.54e-01  1.67e-03  2.88e-01  6.47e-05  5.08e-03  9.75e-01  
  7  +4.9653e-01  +9.0698e-01  4.10e-01  3.45e-04  5.99e-02  2.86e-04  9.57e-04  8.24e-01  
  8  +4.9399e-01  +8.7648e-01  3.82e-01  3.02e-04  5.24e-02  2.08e-04  8.44e-04  3.26e-01  
  9  +4.8894e-01  +8.3667e-01  3.48e-01  2.22e-04  3.84e-02  1.92e-04  6.29e-04  3.72e-01  
 10  +4.8621e-01  +8.1752e-01  3.31e-01  1.96e-04  3.38e-02  1.58e-04  5.60e-04  2.69e-01  
 11  +4.7609e-01  +7.3625e-01  2.60e-01  1.58e-04  2.72e-02  4.95e-05  4.73e-04  5.32e-01  
 12  +4.6213e-01  +6.5600e-01  1.94e-01  1.03e-04  1.77e-02  3.36e-05  3.25e-04  3.96e-01  
 13  +4.4634e-01  +5.7382e-01  1.27e-01  6.20e-05  1.06e-02  1.72e-05  2.06e-04  5.33e-01  
 14  +4.3257e-01  +5.0550e-01  7.29e-02  3.32e-05  5.66e-03  7.72e-06  1.17e-04  7.21e-01  
 15  +4.2629e-01  +4.7648e-01  5.02e-02  2.21e-05  3.77e-03  5.26e-06  7.97e-05  4.11e-01  
 16  +4.2200e-01  +4.5657e-01  3.46e-02  1.49e-05  2.53e-03  3.62e-06  5.46e-05  5.58e-01  
 17  +4.1708e-01  +4.3492e-01  1.78e-02  7.55e-06  1.28e-03  1.86e-06  2.85e-05  6.24e-01  
 18  +4.1549e-01  +4.2756e-01  1.21e-02  5.05e-06  8.59e-04  1.26e-06  1.92e-05  6.88e-01  
 19  +4.1322e-01  +4.1834e-01  5.12e-03  2.11e-06  3.59e-04  5.34e-07  8.19e-06  7.63e-01  
 20  +4.1182e-01  +4.1294e-01  1.13e-03  4.54e-07  7.73e-05  1.15e-07  1.81e-06  9.90e-01  
 21  +4.1141e-01  +4.1144e-01  2.60e-05  1.04e-08  1.77e-06  2.64e-09  4.17e-08  9.79e-01  
 22  +4.1140e-01  +4.1140e-01  2.61e-07  1.04e-10  1.77e-08  2.65e-11  4.18e-10  9.90e-01  
 23  +4.1140e-01  +4.1140e-01  2.70e-09  1.08e-12  1.84e-10  2.77e-13  4.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 108.9747ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:00 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:00 PM: Optimal value: 4.114e-01
(CVXPY) Sep 20 08:00:00 PM: Compilation took 2.579e-02 seconds
(CVXPY) Sep 20 08:00:00 PM: Solver (including time spent in interface) took 1.160e-01 seconds
Iteration: 23, Objective: 0.4114
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:00 PM: Your problem has 2749 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:00 PM: Finished problem compilation (took 2.464e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2749
  constraints   = 5249
  nnz(P)        = 0
  nnz(A)        = 48723
  cones (total) = 1
    : Nonnegative = 1,  numel = 5249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.80e-01  8.44e+01  1.00e+00  1.00e+00   ------   
  1  +5.7799e-01  +5.4335e+02  5.43e+02  4.35e-01  5.37e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2969e-01  +5.9582e+01  5.91e+01  1.60e-01  2.50e+01  1.67e-02  2.67e-01  9.59e-01  
  3  +5.0805e-01  +1.5390e+01  1.49e+01  1.02e-01  1.61e+01  4.67e-05  2.41e-01  3.53e-01  
  4  +5.0077e-01  +1.5410e+00  1.04e+00  1.04e-02  1.73e+00  7.43e-06  1.15e-01  8.01e-01  
  5  +5.0049e-01  +1.2669e+00  7.66e-01  7.40e-03  1.24e+00  1.42e-05  5.76e-02  6.28e-01  
  6  +4.9972e-01  +9.5889e-01  4.59e-01  1.52e-03  2.63e-01  7.30e-05  4.55e-03  9.74e-01  
  7  +4.9650e-01  +9.1503e-01  4.19e-01  3.67e-04  6.37e-02  2.74e-04  1.02e-03  7.91e-01  
  8  +4.9288e-01  +8.7523e-01  3.82e-01  2.89e-04  5.00e-02  2.38e-04  8.07e-04  3.35e-01  
  9  +4.8783e-01  +8.3645e-01  3.49e-01  2.18e-04  3.76e-02  2.10e-04  6.17e-04  3.71e-01  
 10  +4.8374e-01  +7.9435e-01  3.11e-01  2.08e-04  3.59e-02  1.25e-04  6.04e-04  2.27e-01  
 11  +4.8066e-01  +7.7365e-01  2.93e-01  1.91e-04  3.28e-02  1.01e-04  5.60e-04  2.03e-01  
 12  +4.7380e-01  +7.3250e-01  2.59e-01  1.56e-04  2.68e-02  6.12e-05  4.69e-04  4.32e-01  
 13  +4.5263e-01  +6.1227e-01  1.60e-01  7.92e-05  1.35e-02  3.59e-05  2.55e-04  4.97e-01  
 14  +4.4536e-01  +5.7546e-01  1.30e-01  6.36e-05  1.09e-02  2.01e-05  2.11e-04  5.09e-01  
 15  +4.3032e-01  +5.0163e-01  7.13e-02  3.27e-05  5.58e-03  9.96e-06  1.15e-04  5.07e-01  
 16  +4.2257e-01  +4.6531e-01  4.27e-02  1.88e-05  3.20e-03  5.63e-06  6.83e-05  5.29e-01  
 17  +4.1909e-01  +4.4797e-01  2.89e-02  1.23e-05  2.09e-03  3.21e-06  4.51e-05  8.67e-01  
 18  +4.1399e-01  +4.2685e-01  1.29e-02  5.31e-06  9.04e-04  1.41e-06  2.02e-05  7.47e-01  
 19  +4.1118e-01  +4.1571e-01  4.53e-03  1.83e-06  3.11e-04  4.90e-07  7.17e-06  7.30e-01  
 20  +4.0969e-01  +4.0995e-01  2.60e-04  1.04e-07  1.77e-05  2.74e-08  4.16e-07  9.54e-01  
 21  +4.0960e-01  +4.0960e-01  2.67e-06  1.06e-09  1.81e-07  2.80e-10  4.26e-09  9.90e-01  
 22  +4.0960e-01  +4.0960e-01  2.67e-08  1.07e-11  1.81e-09  2.81e-12  4.27e-11  9.90e-01  
 23  +4.0960e-01  +4.0960e-01  2.75e-10  1.10e-13  1.87e-11  2.91e-14  4.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 107.9598ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:01 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:01 PM: Optimal value: 4.096e-01
(CVXPY) Sep 20 08:00:01 PM: Compilation took 2.464e-02 seconds
(CVXPY) Sep 20 08:00:01 PM: Solver (including time spent in interface) took 1.146e-01 seconds
Iteration: 24, Objective: 0.4096
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:01 PM: Your problem has 2759 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:01 PM: Finished problem compilation (took 2.703e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2759
  constraints   = 5259
  nnz(P)        = 0
  nnz(A)        = 49109
  cones (total) = 1
    : Nonnegative = 1,  numel = 5259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.80e-01  8.43e+01  1.00e+00  1.00e+00   ------   
  1  +5.7792e-01  +5.4337e+02  5.43e+02  4.35e-01  5.36e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2964e-01  +5.9538e+01  5.90e+01  1.60e-01  2.49e+01  1.67e-02  2.67e-01  9.60e-01  
  3  +5.0804e-01  +1.5382e+01  1.49e+01  1.02e-01  1.60e+01  4.68e-05  2.41e-01  3.54e-01  
  4  +5.0077e-01  +1.5444e+00  1.04e+00  1.04e-02  1.73e+00  7.45e-06  1.15e-01  8.01e-01  
  5  +5.0050e-01  +1.2748e+00  7.74e-01  7.47e-03  1.25e+00  1.42e-05  5.75e-02  6.30e-01  
  6  +4.9980e-01  +1.0012e+00  5.01e-01  1.79e-03  3.09e-01  6.65e-05  5.42e-03  9.63e-01  
  7  +4.9635e-01  +9.4732e-01  4.51e-01  3.75e-04  6.51e-02  2.86e-04  1.04e-03  8.19e-01  
  8  +4.9255e-01  +8.9969e-01  4.07e-01  3.01e-04  5.21e-02  2.37e-04  8.40e-04  3.14e-01  
  9  +4.8634e-01  +8.4544e-01  3.59e-01  2.15e-04  3.71e-02  1.97e-04  6.11e-04  4.29e-01  
 10  +4.8235e-01  +8.0051e-01  3.18e-01  2.07e-04  3.56e-02  1.26e-04  6.02e-04  1.64e-01  
 11  +4.7449e-01  +7.4800e-01  2.74e-01  1.62e-04  2.79e-02  9.22e-05  4.85e-04  3.24e-01  
 12  +4.5968e-01  +6.5944e-01  2.00e-01  1.05e-04  1.79e-02  6.20e-05  3.29e-04  3.71e-01  
 13  +4.4769e-01  +5.9448e-01  1.47e-01  7.21e-05  1.23e-02  4.04e-05  2.37e-04  3.42e-01  
 14  +4.3570e-01  +5.3114e-01  9.54e-02  4.42e-05  7.52e-03  1.58e-05  1.52e-04  6.87e-01  
 15  +4.2150e-01  +4.6361e-01  4.21e-02  1.84e-05  3.14e-03  6.00e-06  6.75e-05  6.49e-01  
 16  +4.1885e-01  +4.5104e-01  3.22e-02  1.38e-05  2.35e-03  4.03e-06  5.12e-05  5.67e-01  
 17  +4.1402e-01  +4.3040e-01  1.64e-02  6.87e-06  1.17e-03  2.01e-06  2.63e-05  5.43e-01  
 18  +4.1086e-01  +4.1726e-01  6.39e-03  2.61e-06  4.45e-04  7.42e-07  1.03e-05  7.46e-01  
 19  +4.0892e-01  +4.0952e-01  5.95e-04  2.40e-07  4.09e-05  6.04e-08  9.70e-07  9.90e-01  
 20  +4.0870e-01  +4.0871e-01  6.37e-06  2.57e-09  4.37e-07  6.43e-10  1.04e-08  9.89e-01  
 21  +4.0870e-01  +4.0870e-01  6.37e-08  2.57e-11  4.37e-09  6.43e-12  1.04e-10  9.90e-01  
 22  +4.0870e-01  +4.0870e-01  6.52e-10  2.63e-13  4.47e-11  6.62e-14  1.07e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 190.9701ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:01 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:01 PM: Optimal value: 4.087e-01
(CVXPY) Sep 20 08:00:01 PM: Compilation took 2.703e-02 seconds
(CVXPY) Sep 20 08:00:01 PM: Solver (including time spent in interface) took 1.983e-01 seconds
Iteration: 25, Objective: 0.4087
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:01 PM: Your problem has 2769 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:01 PM: Finished problem compilation (took 4.671e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2769
  constraints   = 5269
  nnz(P)        = 0
  nnz(A)        = 49354
  cones (total) = 1
    : Nonnegative = 1,  numel = 5269

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5014e+03  2.50e+03  9.80e-01  8.42e+01  1.00e+00  1.00e+00   ------   
  1  +5.7781e-01  +5.4345e+02  5.43e+02  4.35e-01  5.36e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2958e-01  +5.9484e+01  5.90e+01  1.60e-01  2.48e+01  1.68e-02  2.67e-01  9.60e-01  
  3  +5.0803e-01  +1.5374e+01  1.49e+01  1.02e-01  1.60e+01  4.69e-05  2.40e-01  3.56e-01  
  4  +5.0078e-01  +1.5455e+00  1.04e+00  1.04e-02  1.73e+00  7.47e-06  1.14e-01  8.01e-01  
  5  +5.0049e-01  +1.2767e+00  7.76e-01  7.46e-03  1.25e+00  1.48e-05  5.50e-02  6.50e-01  
  6  +4.9972e-01  +1.0242e+00  5.24e-01  1.68e-03  2.90e-01  7.61e-05  4.99e-03  9.55e-01  
  7  +4.9668e-01  +9.7265e-01  4.76e-01  4.44e-04  7.70e-02  2.55e-04  1.24e-03  7.67e-01  
  8  +4.9392e-01  +9.2464e-01  4.31e-01  3.63e-04  6.28e-02  2.02e-04  1.01e-03  3.34e-01  
  9  +4.8890e-01  +8.7604e-01  3.87e-01  2.58e-04  4.46e-02  1.91e-04  7.31e-04  3.91e-01  
 10  +4.8246e-01  +8.1793e-01  3.35e-01  1.98e-04  3.41e-02  1.25e-04  5.72e-04  4.54e-01  
 11  +4.6173e-01  +6.6894e-01  2.07e-01  1.10e-04  1.88e-02  3.86e-05  3.43e-04  6.30e-01  
 12  +4.5040e-01  +6.0893e-01  1.59e-01  7.95e-05  1.36e-02  2.47e-05  2.59e-04  3.89e-01  
 13  +4.3309e-01  +5.2093e-01  8.78e-02  4.07e-05  6.93e-03  6.91e-06  1.42e-04  9.39e-01  
 14  +4.1971e-01  +4.5877e-01  3.91e-02  1.71e-05  2.91e-03  3.28e-06  6.33e-05  7.30e-01  
 15  +4.1700e-01  +4.4650e-01  2.95e-02  1.28e-05  2.17e-03  2.64e-06  4.81e-05  5.45e-01  
 16  +4.1445e-01  +4.3561e-01  2.12e-02  8.98e-06  1.53e-03  1.99e-06  3.43e-05  5.02e-01  
 17  +4.1208e-01  +4.2566e-01  1.36e-02  5.66e-06  9.61e-04  1.33e-06  2.20e-05  6.36e-01  
 18  +4.0897e-01  +4.1327e-01  4.30e-03  1.76e-06  2.99e-04  4.21e-07  7.05e-06  7.00e-01  
 19  +4.0755e-01  +4.0771e-01  1.53e-04  6.21e-08  1.06e-05  1.47e-08  2.53e-07  9.72e-01  
 20  +4.0750e-01  +4.0750e-01  1.54e-06  6.24e-10  1.06e-07  1.48e-10  2.54e-09  9.90e-01  
 21  +4.0750e-01  +4.0750e-01  1.54e-08  6.24e-12  1.06e-09  1.48e-12  2.54e-11  9.90e-01  
 22  +4.0750e-01  +4.0750e-01  1.57e-10  6.38e-14  1.08e-11  1.52e-14  2.61e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 193.703ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:01 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:01 PM: Optimal value: 4.075e-01
(CVXPY) Sep 20 08:00:01 PM: Compilation took 4.671e-02 seconds
(CVXPY) Sep 20 08:00:01 PM: Solver (including time spent in interface) took 2.036e-01 seconds
Iteration: 26, Objective: 0.4075
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:02 PM: Your problem has 2779 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:02 PM: Finished problem compilation (took 4.340e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2779
  constraints   = 5279
  nnz(P)        = 0
  nnz(A)        = 49681
  cones (total) = 1
    : Nonnegative = 1,  numel = 5279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5014e+03  2.50e+03  9.80e-01  8.42e+01  1.00e+00  1.00e+00   ------   
  1  +5.7769e-01  +5.4354e+02  5.43e+02  4.36e-01  5.35e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2949e-01  +5.9394e+01  5.89e+01  1.60e-01  2.47e+01  1.68e-02  2.66e-01  9.61e-01  
  3  +5.0802e-01  +1.5358e+01  1.48e+01  1.02e-01  1.59e+01  4.70e-05  2.40e-01  3.58e-01  
  4  +5.0079e-01  +1.5744e+00  1.07e+00  1.07e-02  1.78e+00  7.57e-06  1.15e-01  7.91e-01  
  5  +5.0047e-01  +1.2691e+00  7.69e-01  7.37e-03  1.23e+00  1.52e-05  5.33e-02  6.74e-01  
  6  +4.9959e-01  +1.0472e+00  5.48e-01  1.65e-03  2.84e-01  8.28e-05  4.85e-03  9.50e-01  
  7  +4.9628e-01  +9.8842e-01  4.92e-01  4.69e-04  8.13e-02  2.51e-04  1.31e-03  7.46e-01  
  8  +4.9254e-01  +9.3448e-01  4.42e-01  3.56e-04  6.16e-02  2.27e-04  9.99e-04  3.30e-01  
  9  +4.8730e-01  +8.8790e-01  4.01e-01  2.55e-04  4.40e-02  2.21e-04  7.24e-04  3.69e-01  
 10  +4.7711e-01  +7.7177e-01  2.95e-01  1.82e-04  3.13e-02  4.91e-05  5.39e-04  6.81e-01  
 11  +4.6574e-01  +7.0016e-01  2.34e-01  1.33e-04  2.27e-02  3.00e-05  4.10e-04  4.62e-01  
 12  +4.5099e-01  +6.1771e-01  1.67e-01  8.55e-05  1.46e-02  1.97e-05  2.78e-04  3.82e-01  
 13  +4.3981e-01  +5.5793e-01  1.18e-01  5.69e-05  9.68e-03  9.46e-06  1.93e-04  9.90e-01  
 14  +4.2203e-01  +4.7166e-01  4.96e-02  2.23e-05  3.79e-03  3.75e-06  8.14e-05  6.37e-01  
 15  +4.2049e-01  +4.6455e-01  4.41e-02  1.95e-05  3.32e-03  3.46e-06  7.15e-05  2.15e-01  
 16  +4.1546e-01  +4.4016e-01  2.47e-02  1.06e-05  1.80e-03  2.51e-06  3.96e-05  9.90e-01  
 17  +4.0974e-01  +4.1620e-01  6.46e-03  2.74e-06  4.65e-04  6.66e-07  1.06e-05  9.20e-01  
 18  +4.0806e-01  +4.0963e-01  1.56e-03  6.54e-07  1.11e-04  1.59e-07  2.58e-06  8.07e-01  
 19  +4.0757e-01  +4.0778e-01  2.01e-04  8.19e-08  1.39e-05  1.98e-08  3.32e-07  9.56e-01  
 20  +4.0750e-01  +4.0750e-01  2.48e-06  1.01e-09  1.71e-07  2.44e-10  4.10e-09  9.88e-01  
 21  +4.0750e-01  +4.0750e-01  2.50e-08  1.01e-11  1.72e-09  2.46e-12  4.14e-11  9.90e-01  
 22  +4.0750e-01  +4.0750e-01  2.98e-10  1.21e-13  2.06e-11  3.07e-14  5.14e-13  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 199.7965ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:02 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:02 PM: Optimal value: 4.075e-01
(CVXPY) Sep 20 08:00:02 PM: Compilation took 4.340e-02 seconds
(CVXPY) Sep 20 08:00:02 PM: Solver (including time spent in interface) took 2.119e-01 seconds
Iteration: 27, Objective: 0.4075
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:02 PM: Your problem has 2789 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:02 PM: Finished problem compilation (took 4.033e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2789
  constraints   = 5289
  nnz(P)        = 0
  nnz(A)        = 50050
  cones (total) = 1
    : Nonnegative = 1,  numel = 5289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.7754e-01  +5.4365e+02  5.43e+02  4.36e-01  5.34e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2940e-01  +5.9328e+01  5.88e+01  1.60e-01  2.46e+01  1.68e-02  2.66e-01  9.63e-01  
  3  +5.0800e-01  +1.5339e+01  1.48e+01  1.02e-01  1.59e+01  4.71e-05  2.39e-01  3.62e-01  
  4  +5.0080e-01  +1.5980e+00  1.10e+00  1.10e-02  1.82e+00  7.68e-06  1.16e-01  7.85e-01  
  5  +5.0048e-01  +1.3079e+00  8.07e-01  7.72e-03  1.29e+00  1.56e-05  5.38e-02  6.72e-01  
  6  +4.9934e-01  +1.0314e+00  5.32e-01  1.35e-03  2.33e-01  9.73e-05  3.89e-03  9.75e-01  
  7  +4.9530e-01  +9.7108e-01  4.76e-01  4.06e-04  7.03e-02  2.72e-04  1.12e-03  7.31e-01  
  8  +4.9320e-01  +9.4532e-01  4.52e-01  3.55e-04  6.15e-02  2.43e-04  9.86e-04  2.22e-01  
  9  +4.8758e-01  +8.9993e-01  4.12e-01  2.56e-04  4.43e-02  2.49e-04  7.22e-04  3.26e-01  
 10  +4.7696e-01  +7.8725e-01  3.10e-01  1.97e-04  3.38e-02  7.37e-05  5.83e-04  5.39e-01  
 11  +4.6961e-01  +7.3989e-01  2.70e-01  1.61e-04  2.76e-02  5.71e-05  4.90e-04  2.59e-01  
 12  +4.5735e-01  +6.6675e-01  2.09e-01  1.15e-04  1.96e-02  3.67e-05  3.65e-04  3.88e-01  
 13  +4.4149e-01  +5.7951e-01  1.38e-01  6.96e-05  1.18e-02  1.89e-05  2.34e-04  5.27e-01  
 14  +4.2489e-01  +4.9502e-01  7.01e-02  3.28e-05  5.57e-03  8.14e-06  1.18e-04  6.24e-01  
 15  +4.1843e-01  +4.6400e-01  4.56e-02  2.05e-05  3.47e-03  5.09e-06  7.53e-05  5.40e-01  
 16  +4.1475e-01  +4.4614e-01  3.14e-02  1.37e-05  2.33e-03  3.33e-06  5.12e-05  7.19e-01  
 17  +4.1064e-01  +4.2843e-01  1.78e-02  7.61e-06  1.29e-03  1.87e-06  2.92e-05  5.56e-01  
 18  +4.0647e-01  +4.1120e-01  4.73e-03  1.95e-06  3.31e-04  4.80e-07  7.80e-06  9.46e-01  
 19  +4.0508e-01  +4.0581e-01  7.38e-04  3.00e-07  5.10e-05  7.23e-08  1.23e-06  9.90e-01  
 20  +4.0480e-01  +4.0481e-01  8.45e-06  3.43e-09  5.83e-07  8.26e-10  1.41e-08  9.89e-01  
 21  +4.0480e-01  +4.0480e-01  8.47e-08  3.43e-11  5.85e-09  8.28e-12  1.41e-10  9.90e-01  
 22  +4.0480e-01  +4.0480e-01  8.47e-10  3.43e-13  5.85e-11  8.36e-14  1.42e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 175.6868ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:02 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:02 PM: Optimal value: 4.048e-01
(CVXPY) Sep 20 08:00:02 PM: Compilation took 4.033e-02 seconds
(CVXPY) Sep 20 08:00:02 PM: Solver (including time spent in interface) took 1.865e-01 seconds
Iteration: 28, Objective: 0.4048
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:03 PM: Your problem has 2799 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:03 PM: Finished problem compilation (took 3.391e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2799
  constraints   = 5299
  nnz(P)        = 0
  nnz(A)        = 50339
  cones (total) = 1
    : Nonnegative = 1,  numel = 5299

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.7749e-01  +5.4356e+02  5.43e+02  4.36e-01  5.33e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2936e-01  +5.9273e+01  5.87e+01  1.60e-01  2.45e+01  1.68e-02  2.65e-01  9.63e-01  
  3  +5.0799e-01  +1.5319e+01  1.48e+01  1.02e-01  1.58e+01  4.72e-05  2.39e-01  3.63e-01  
  4  +5.0079e-01  +1.5831e+00  1.08e+00  1.08e-02  1.79e+00  7.66e-06  1.14e-01  7.91e-01  
  5  +5.0048e-01  +1.3063e+00  8.06e-01  7.67e-03  1.28e+00  1.61e-05  5.12e-02  6.88e-01  
  6  +4.9933e-01  +1.0527e+00  5.53e-01  1.35e-03  2.33e-01  1.02e-04  3.87e-03  9.58e-01  
  7  +4.9543e-01  +9.8976e-01  4.94e-01  4.27e-04  7.40e-02  2.69e-04  1.18e-03  7.18e-01  
  8  +4.9417e-01  +9.6267e-01  4.68e-01  3.96e-04  6.85e-02  2.08e-04  1.10e-03  2.38e-01  
  9  +4.8786e-01  +9.0620e-01  4.18e-01  2.63e-04  4.54e-02  2.20e-04  7.39e-04  3.93e-01  
 10  +4.7896e-01  +8.0613e-01  3.27e-01  2.14e-04  3.67e-02  8.13e-05  6.28e-04  4.61e-01  
 11  +4.7532e-01  +7.8069e-01  3.05e-01  1.94e-04  3.32e-02  6.89e-05  5.77e-04  1.70e-01  
 12  +4.6747e-01  +7.2883e-01  2.61e-01  1.57e-04  2.68e-02  3.33e-05  4.81e-04  5.65e-01  
 13  +4.5075e-01  +6.3156e-01  1.81e-01  9.57e-05  1.63e-02  2.16e-05  3.10e-04  4.05e-01  
 14  +4.3697e-01  +5.5850e-01  1.22e-01  6.00e-05  1.02e-02  1.33e-05  2.05e-04  4.23e-01  
 15  +4.2601e-01  +5.0398e-01  7.80e-02  3.66e-05  6.21e-03  8.18e-06  1.30e-04  4.27e-01  
 16  +4.1909e-01  +4.7096e-01  5.19e-02  2.35e-05  3.99e-03  5.36e-06  8.61e-05  4.20e-01  
 17  +4.1232e-01  +4.3975e-01  2.74e-02  1.20e-05  2.04e-03  2.81e-06  4.54e-05  5.38e-01  
 18  +4.0851e-01  +4.2267e-01  1.42e-02  6.03e-06  1.02e-03  1.45e-06  2.34e-05  5.86e-01  
 19  +4.0694e-01  +4.1517e-01  8.23e-03  3.46e-06  5.88e-04  8.24e-07  1.36e-05  7.97e-01  
 20  +4.0467e-01  +4.0624e-01  1.58e-03  6.49e-07  1.10e-04  1.56e-07  2.62e-06  9.19e-01  
 21  +4.0414e-01  +4.0423e-01  9.62e-05  3.93e-08  6.69e-06  9.12e-09  1.61e-07  9.60e-01  
 22  +4.0410e-01  +4.0410e-01  1.03e-06  4.19e-10  7.13e-08  9.70e-11  1.72e-09  9.90e-01  
 23  +4.0410e-01  +4.0410e-01  1.03e-08  4.20e-12  7.14e-10  9.72e-13  1.73e-11  9.90e-01  
 24  +4.0410e-01  +4.0410e-01  1.03e-10  4.20e-14  7.15e-12  1.02e-14  1.80e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 169.7405ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:03 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:03 PM: Optimal value: 4.041e-01
(CVXPY) Sep 20 08:00:03 PM: Compilation took 3.391e-02 seconds
(CVXPY) Sep 20 08:00:03 PM: Solver (including time spent in interface) took 1.799e-01 seconds
Iteration: 29, Objective: 0.4041
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:03 PM: Your problem has 2809 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:03 PM: Finished problem compilation (took 3.228e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2809
  constraints   = 5309
  nnz(P)        = 0
  nnz(A)        = 50612
  cones (total) = 1
    : Nonnegative = 1,  numel = 5309

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.7738e-01  +5.4354e+02  5.43e+02  4.36e-01  5.32e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2932e-01  +5.9230e+01  5.87e+01  1.59e-01  2.45e+01  1.68e-02  2.65e-01  9.64e-01  
  3  +5.0798e-01  +1.5306e+01  1.48e+01  1.01e-01  1.58e+01  4.72e-05  2.38e-01  3.64e-01  
  4  +5.0079e-01  +1.5838e+00  1.08e+00  1.09e-02  1.79e+00  7.67e-06  1.14e-01  7.91e-01  
  5  +5.0048e-01  +1.3027e+00  8.02e-01  7.61e-03  1.27e+00  1.65e-05  4.96e-02  7.02e-01  
  6  +4.9931e-01  +1.0698e+00  5.71e-01  1.38e-03  2.38e-01  1.04e-04  3.95e-03  9.47e-01  
  7  +4.9632e-01  +1.0185e+00  5.22e-01  5.40e-04  9.34e-02  2.27e-04  1.50e-03  6.42e-01  
  8  +4.9440e-01  +9.7809e-01  4.84e-01  4.51e-04  7.79e-02  1.93e-04  1.25e-03  3.02e-01  
  9  +4.8746e-01  +9.1170e-01  4.24e-01  2.72e-04  4.69e-02  2.17e-04  7.67e-04  4.59e-01  
 10  +4.7946e-01  +8.1359e-01  3.34e-01  2.26e-04  3.88e-02  8.12e-05  6.63e-04  4.44e-01  
 11  +4.7529e-01  +7.8550e-01  3.10e-01  2.00e-04  3.42e-02  6.94e-05  5.95e-04  1.91e-01  
 12  +4.6235e-01  +7.0240e-01  2.40e-01  1.37e-04  2.34e-02  3.69e-05  4.27e-04  5.44e-01  
 13  +4.4147e-01  +5.8305e-01  1.42e-01  7.12e-05  1.21e-02  1.46e-05  2.39e-04  6.84e-01  
 14  +4.3012e-01  +5.2665e-01  9.65e-02  4.60e-05  7.80e-03  9.46e-06  1.61e-04  4.20e-01  
 15  +4.2051e-01  +4.8086e-01  6.04e-02  2.75e-05  4.67e-03  5.78e-06  1.01e-04  4.57e-01  
 16  +4.1328e-01  +4.4735e-01  3.41e-02  1.50e-05  2.55e-03  3.25e-06  5.70e-05  5.39e-01  
 17  +4.0911e-01  +4.2810e-01  1.90e-02  8.19e-06  1.39e-03  1.83e-06  3.18e-05  6.07e-01  
 18  +4.0637e-01  +4.1624e-01  9.87e-03  4.15e-06  7.05e-04  9.61e-07  1.65e-05  7.16e-01  
 19  +4.0351e-01  +4.0471e-01  1.19e-03  4.92e-07  8.36e-05  1.14e-07  2.03e-06  9.00e-01  
 20  +4.0311e-01  +4.0312e-01  1.55e-05  6.36e-09  1.08e-06  1.45e-09  2.65e-08  9.89e-01  
 21  +4.0310e-01  +4.0310e-01  1.55e-07  6.37e-11  1.08e-08  1.45e-11  2.65e-10  9.90e-01  
 22  +4.0310e-01  +4.0310e-01  1.55e-09  6.37e-13  1.08e-10  1.47e-13  2.68e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 186.5324ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:03 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:03 PM: Optimal value: 4.031e-01
(CVXPY) Sep 20 08:00:03 PM: Compilation took 3.228e-02 seconds
(CVXPY) Sep 20 08:00:03 PM: Solver (including time spent in interface) took 2.004e-01 seconds
Iteration: 30, Objective: 0.4031
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:04 PM: Your problem has 2814 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:04 PM: Finished problem compilation (took 3.056e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2814
  constraints   = 5314
  nnz(P)        = 0
  nnz(A)        = 50842
  cones (total) = 1
    : Nonnegative = 1,  numel = 5314

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.7734e-01  +5.4350e+02  5.43e+02  4.36e-01  5.32e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2932e-01  +5.9226e+01  5.87e+01  1.59e-01  2.44e+01  1.68e-02  2.65e-01  9.64e-01  
  3  +5.0798e-01  +1.5301e+01  1.48e+01  1.01e-01  1.58e+01  4.72e-05  2.38e-01  3.65e-01  
  4  +5.0080e-01  +1.5901e+00  1.09e+00  1.09e-02  1.80e+00  7.70e-06  1.14e-01  7.89e-01  
  5  +5.0048e-01  +1.3103e+00  8.10e-01  7.69e-03  1.28e+00  1.64e-05  5.01e-02  6.96e-01  
  6  +4.9916e-01  +1.0555e+00  5.56e-01  1.22e-03  2.10e-01  1.14e-04  3.46e-03  9.64e-01  
  7  +4.9658e-01  +1.0131e+00  5.17e-01  5.75e-04  9.94e-02  2.08e-04  1.60e-03  5.62e-01  
  8  +4.9623e-01  +9.8742e-01  4.91e-01  5.47e-04  9.46e-02  1.56e-04  1.52e-03  2.37e-01  
  9  +4.8917e-01  +9.1310e-01  4.24e-01  2.89e-04  4.99e-02  2.05e-04  8.11e-04  5.13e-01  
 10  +4.8397e-01  +8.6589e-01  3.82e-01  2.33e-04  4.01e-02  1.56e-04  6.64e-04  3.64e-01  
 11  +4.6499e-01  +7.1334e-01  2.48e-01  1.40e-04  2.39e-02  4.54e-05  4.29e-04  6.23e-01  
 12  +4.5478e-01  +6.5601e-01  2.01e-01  1.07e-04  1.83e-02  3.39e-05  3.41e-04  2.63e-01  
 13  +4.4016e-01  +5.7847e-01  1.38e-01  6.89e-05  1.17e-02  1.93e-05  2.32e-04  4.63e-01  
 14  +4.2441e-01  +5.0002e-01  7.56e-02  3.51e-05  5.95e-03  8.56e-06  1.26e-04  6.55e-01  
 15  +4.1710e-01  +4.6565e-01  4.86e-02  2.18e-05  3.69e-03  5.30e-06  8.05e-05  5.14e-01  
 16  +4.1251e-01  +4.4506e-01  3.26e-02  1.43e-05  2.42e-03  3.53e-06  5.41e-05  3.85e-01  
 17  +4.0732e-01  +4.2155e-01  1.42e-02  6.08e-06  1.03e-03  1.49e-06  2.37e-05  7.71e-01  
 18  +4.0602e-01  +4.1600e-01  9.98e-03  4.21e-06  7.13e-04  1.04e-06  1.65e-05  4.53e-01  
 19  +4.0334e-01  +4.0509e-01  1.75e-03  7.29e-07  1.24e-04  1.79e-07  2.92e-06  8.68e-01  
 20  +4.0276e-01  +4.0280e-01  3.48e-05  1.44e-08  2.45e-06  3.45e-09  5.82e-08  9.90e-01  
 21  +4.0275e-01  +4.0275e-01  3.48e-07  1.45e-10  2.45e-08  3.45e-11  5.82e-10  9.90e-01  
 22  +4.0275e-01  +4.0275e-01  3.48e-09  1.45e-12  2.45e-10  3.46e-13  5.84e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 162.2671ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:04 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:04 PM: Optimal value: 4.028e-01
(CVXPY) Sep 20 08:00:04 PM: Compilation took 3.056e-02 seconds
(CVXPY) Sep 20 08:00:04 PM: Solver (including time spent in interface) took 1.776e-01 seconds
Iteration: 31, Objective: 0.4028
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:04 PM: Your problem has 2824 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:04 PM: Finished problem compilation (took 3.531e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2824
  constraints   = 5324
  nnz(P)        = 0
  nnz(A)        = 51098
  cones (total) = 1
    : Nonnegative = 1,  numel = 5324

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.81e-01  8.39e+01  1.00e+00  1.00e+00   ------   
  1  +5.7725e-01  +5.4354e+02  5.43e+02  4.37e-01  5.31e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2927e-01  +5.9190e+01  5.87e+01  1.59e-01  2.43e+01  1.68e-02  2.65e-01  9.65e-01  
  3  +5.0797e-01  +1.5293e+01  1.48e+01  1.01e-01  1.57e+01  4.73e-05  2.38e-01  3.66e-01  
  4  +5.0079e-01  +1.5880e+00  1.09e+00  1.09e-02  1.80e+00  7.70e-06  1.14e-01  7.90e-01  
  5  +5.0048e-01  +1.3180e+00  8.18e-01  7.75e-03  1.29e+00  1.66e-05  4.96e-02  7.00e-01  
  6  +4.9907e-01  +1.0474e+00  5.48e-01  1.12e-03  1.94e-01  1.22e-04  3.18e-03  9.68e-01  
  7  +4.9625e-01  +1.0029e+00  5.07e-01  5.31e-04  9.18e-02  2.18e-04  1.47e-03  5.65e-01  
  8  +4.9558e-01  +9.7153e-01  4.76e-01  4.92e-04  8.50e-02  1.51e-04  1.37e-03  3.15e-01  
  9  +4.8775e-01  +9.0104e-01  4.13e-01  2.59e-04  4.47e-02  2.02e-04  7.29e-04  5.06e-01  
 10  +4.7848e-01  +8.0302e-01  3.25e-01  2.14e-04  3.67e-02  5.67e-05  6.31e-04  5.42e-01  
 11  +4.6733e-01  +7.3309e-01  2.66e-01  1.56e-04  2.66e-02  4.33e-05  4.76e-04  3.33e-01  
 12  +4.5175e-01  +6.4259e-01  1.91e-01  1.02e-04  1.73e-02  2.17e-05  3.30e-04  5.74e-01  
 13  +4.3584e-01  +5.5870e-01  1.23e-01  6.06e-05  1.03e-02  1.22e-05  2.08e-04  5.21e-01  
 14  +4.2573e-01  +5.0894e-01  8.32e-02  3.91e-05  6.62e-03  7.96e-06  1.40e-04  4.68e-01  
 15  +4.1406e-01  +4.5362e-01  3.96e-02  1.77e-05  2.99e-03  3.70e-06  6.65e-05  6.62e-01  
 16  +4.0999e-01  +4.3503e-01  2.50e-02  1.09e-05  1.85e-03  2.38e-06  4.21e-05  5.29e-01  
 17  +4.0674e-01  +4.1984e-01  1.31e-02  5.58e-06  9.45e-04  1.30e-06  2.19e-05  9.90e-01  
 18  +4.0305e-01  +4.0541e-01  2.36e-03  9.81e-07  1.67e-04  2.35e-07  4.02e-06  8.49e-01  
 19  +4.0223e-01  +4.0230e-01  7.25e-05  2.98e-08  5.06e-06  6.93e-09  1.24e-07  9.90e-01  
 20  +4.0220e-01  +4.0220e-01  7.26e-07  2.99e-10  5.07e-08  6.95e-11  1.24e-09  9.90e-01  
 21  +4.0220e-01  +4.0220e-01  7.26e-09  2.99e-12  5.08e-10  7.01e-13  1.25e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 175.1621ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:04 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:04 PM: Optimal value: 4.022e-01
(CVXPY) Sep 20 08:00:04 PM: Compilation took 3.531e-02 seconds
(CVXPY) Sep 20 08:00:04 PM: Solver (including time spent in interface) took 1.840e-01 seconds
Iteration: 32, Objective: 0.4022
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:04 PM: Your problem has 2834 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:04 PM: Finished problem compilation (took 5.227e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2834
  constraints   = 5334
  nnz(P)        = 0
  nnz(A)        = 51376
  cones (total) = 1
    : Nonnegative = 1,  numel = 5334

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.81e-01  8.38e+01  1.00e+00  1.00e+00   ------   
  1  +5.7709e-01  +5.4365e+02  5.43e+02  4.37e-01  5.31e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2920e-01  +5.9132e+01  5.86e+01  1.59e-01  2.43e+01  1.69e-02  2.65e-01  9.66e-01  
  3  +5.0796e-01  +1.5284e+01  1.48e+01  1.01e-01  1.57e+01  4.74e-05  2.37e-01  3.68e-01  
  4  +5.0081e-01  +1.6103e+00  1.11e+00  1.12e-02  1.84e+00  7.78e-06  1.15e-01  7.83e-01  
  5  +5.0047e-01  +1.3177e+00  8.17e-01  7.74e-03  1.29e+00  1.66e-05  4.94e-02  7.04e-01  
  6  +4.9916e-01  +1.0988e+00  6.00e-01  1.36e-03  2.35e-01  1.10e-04  3.89e-03  9.50e-01  
  7  +4.9644e-01  +1.0500e+00  5.54e-01  6.22e-04  1.07e-01  2.07e-04  1.73e-03  5.76e-01  
  8  +4.9611e-01  +1.0009e+00  5.05e-01  5.80e-04  1.00e-01  1.20e-04  1.62e-03  3.65e-01  
  9  +4.8797e-01  +9.1508e-01  4.27e-01  2.80e-04  4.82e-02  1.69e-04  7.87e-04  5.52e-01  
 10  +4.8413e-01  +8.7303e-01  3.89e-01  2.52e-04  4.33e-02  1.22e-04  7.19e-04  2.59e-01  
 11  +4.7423e-01  +7.9620e-01  3.22e-01  1.91e-04  3.28e-02  8.38e-05  5.66e-04  3.47e-01  
 12  +4.5125e-01  +6.3672e-01  1.85e-01  1.01e-04  1.72e-02  4.60e-06  3.29e-04  8.88e-01  
 13  +4.3720e-01  +5.6537e-01  1.28e-01  6.46e-05  1.09e-02  4.80e-06  2.21e-04  4.73e-01  
 14  +4.2488e-01  +5.0530e-01  8.04e-02  3.81e-05  6.45e-03  3.71e-06  1.37e-04  4.92e-01  
 15  +4.1806e-01  +4.7340e-01  5.53e-02  2.53e-05  4.29e-03  2.87e-06  9.40e-05  4.00e-01  
 16  +4.1208e-01  +4.4601e-01  3.39e-02  1.51e-05  2.55e-03  1.93e-06  5.77e-05  4.62e-01  
 17  +4.1061e-01  +4.3772e-01  2.71e-02  1.19e-05  2.01e-03  2.21e-06  4.54e-05  6.91e-01  
 18  +4.0540e-01  +4.1591e-01  1.05e-02  4.49e-06  7.61e-04  8.88e-07  1.78e-05  6.81e-01  
 19  +4.0287e-01  +4.0566e-01  2.79e-03  1.17e-06  1.98e-04  2.49e-07  4.77e-06  8.30e-01  
 20  +4.0196e-01  +4.0214e-01  1.74e-04  7.20e-08  1.22e-05  1.63e-08  2.98e-07  9.90e-01  
 21  +4.0190e-01  +4.0190e-01  1.77e-06  7.30e-10  1.24e-07  1.65e-10  3.03e-09  9.90e-01  
 22  +4.0190e-01  +4.0190e-01  1.77e-08  7.32e-12  1.24e-09  1.66e-12  3.04e-11  9.90e-01  
 23  +4.0190e-01  +4.0190e-01  1.77e-10  7.33e-14  1.24e-11  1.67e-14  3.06e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 169.331ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:05 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:05 PM: Optimal value: 4.019e-01
(CVXPY) Sep 20 08:00:05 PM: Compilation took 5.227e-02 seconds
(CVXPY) Sep 20 08:00:05 PM: Solver (including time spent in interface) took 1.796e-01 seconds
Iteration: 33, Objective: 0.4019
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:05 PM: Your problem has 2844 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:05 PM: Finished problem compilation (took 4.289e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2844
  constraints   = 5344
  nnz(P)        = 0
  nnz(A)        = 51618
  cones (total) = 1
    : Nonnegative = 1,  numel = 5344

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.81e-01  8.38e+01  1.00e+00  1.00e+00   ------   
  1  +5.7699e-01  +5.4367e+02  5.43e+02  4.37e-01  5.30e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2910e-01  +5.9040e+01  5.85e+01  1.59e-01  2.42e+01  1.69e-02  2.64e-01  9.67e-01  
  3  +5.0795e-01  +1.5259e+01  1.48e+01  1.01e-01  1.56e+01  4.75e-05  2.37e-01  3.71e-01  
  4  +5.0081e-01  +1.6194e+00  1.12e+00  1.13e-02  1.85e+00  7.84e-06  1.14e-01  7.81e-01  
  5  +5.0049e-01  +1.3551e+00  8.55e-01  8.06e-03  1.34e+00  1.71e-05  4.95e-02  7.00e-01  
  6  +4.9906e-01  +1.1133e+00  6.14e-01  1.32e-03  2.28e-01  1.15e-04  3.75e-03  9.52e-01  
  7  +4.9451e-01  +1.0281e+00  5.34e-01  4.61e-04  7.96e-02  2.55e-04  1.27e-03  6.90e-01  
  8  +4.9175e-01  +9.6932e-01  4.78e-01  3.84e-04  6.62e-02  1.36e-04  1.07e-03  5.05e-01  
  9  +4.8568e-01  +9.0928e-01  4.24e-01  2.77e-04  4.76e-02  1.22e-04  7.86e-04  3.98e-01  
 10  +4.7454e-01  +7.9367e-01  3.19e-01  2.09e-04  3.57e-02  3.71e-05  6.23e-04  6.01e-01  
 11  +4.5695e-01  +6.8301e-01  2.26e-01  1.26e-04  2.14e-02  2.33e-05  3.99e-04  5.07e-01  
 12  +4.4463e-01  +6.1408e-01  1.69e-01  8.88e-05  1.51e-02  1.64e-05  2.95e-04  3.19e-01  
 13  +4.3287e-01  +5.5246e-01  1.20e-01  5.92e-05  1.00e-02  1.09e-05  2.06e-04  4.49e-01  
 14  +4.2070e-01  +4.9165e-01  7.09e-02  3.32e-05  5.60e-03  6.32e-06  1.21e-04  5.25e-01  
 15  +4.1170e-01  +4.4892e-01  3.72e-02  1.67e-05  2.82e-03  3.31e-06  6.38e-05  5.58e-01  
 16  +4.0931e-01  +4.3780e-01  2.85e-02  1.26e-05  2.13e-03  2.57e-06  4.87e-05  3.46e-01  
 17  +4.0557e-01  +4.2033e-01  1.48e-02  6.39e-06  1.08e-03  1.38e-06  2.52e-05  7.21e-01  
 18  +4.0217e-01  +4.0607e-01  3.90e-03  1.64e-06  2.78e-04  3.75e-07  6.69e-06  9.37e-01  
 19  +4.0091e-01  +4.0123e-01  3.15e-04  1.31e-07  2.22e-05  2.97e-08  5.43e-07  9.85e-01  
 20  +4.0080e-01  +4.0080e-01  3.28e-06  1.36e-09  2.31e-07  3.09e-10  5.66e-09  9.90e-01  
 21  +4.0080e-01  +4.0080e-01  3.28e-08  1.36e-11  2.31e-09  3.10e-12  5.67e-11  9.90e-01  
 22  +4.0080e-01  +4.0080e-01  3.28e-10  1.36e-13  2.31e-11  3.12e-14  5.71e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 196.1581ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:05 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:05 PM: Optimal value: 4.008e-01
(CVXPY) Sep 20 08:00:05 PM: Compilation took 4.289e-02 seconds
(CVXPY) Sep 20 08:00:05 PM: Solver (including time spent in interface) took 2.092e-01 seconds
Iteration: 34, Objective: 0.4008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:05 PM: Your problem has 2854 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:05 PM: Finished problem compilation (took 4.736e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2854
  constraints   = 5354
  nnz(P)        = 0
  nnz(A)        = 51880
  cones (total) = 1
    : Nonnegative = 1,  numel = 5354

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.81e-01  8.37e+01  1.00e+00  1.00e+00   ------   
  1  +5.7696e-01  +5.4353e+02  5.43e+02  4.37e-01  5.29e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2910e-01  +5.9023e+01  5.85e+01  1.59e-01  2.41e+01  1.69e-02  2.64e-01  9.67e-01  
  3  +5.0794e-01  +1.5243e+01  1.47e+01  1.01e-01  1.56e+01  4.75e-05  2.36e-01  3.72e-01  
  4  +5.0081e-01  +1.6186e+00  1.12e+00  1.13e-02  1.85e+00  7.86e-06  1.14e-01  7.82e-01  
  5  +5.0049e-01  +1.3671e+00  8.67e-01  8.15e-03  1.36e+00  1.74e-05  4.91e-02  7.04e-01  
  6  +4.9910e-01  +1.1392e+00  6.40e-01  1.41e-03  2.43e-01  1.12e-04  4.01e-03  9.47e-01  
  7  +4.9564e-01  +1.0720e+00  5.76e-01  5.81e-04  1.00e-01  2.22e-04  1.61e-03  6.23e-01  
  8  +4.9044e-01  +9.3728e-01  4.47e-01  3.76e-04  6.46e-02  9.54e-05  1.06e-03  7.16e-01  
  9  +4.8561e-01  +8.9350e-01  4.08e-01  2.83e-04  4.85e-02  8.42e-05  8.09e-04  4.18e-01  
 10  +4.7185e-01  +7.6738e-01  2.96e-01  1.91e-04  3.26e-02  1.90e-05  5.78e-04  8.08e-01  
 11  +4.4187e-01  +5.9435e-01  1.52e-01  7.72e-05  1.31e-02  1.01e-05  2.58e-04  8.84e-01  
 12  +4.3395e-01  +5.5724e-01  1.23e-01  6.05e-05  1.02e-02  8.61e-06  2.09e-04  3.43e-01  
 13  +4.2356e-01  +5.0764e-01  8.41e-02  3.95e-05  6.68e-03  6.19e-06  1.43e-04  4.52e-01  
 14  +4.1612e-01  +4.7271e-01  5.66e-02  2.58e-05  4.36e-03  4.29e-06  9.68e-05  4.08e-01  
 15  +4.1131e-01  +4.5045e-01  3.91e-02  1.75e-05  2.96e-03  3.06e-06  6.75e-05  3.90e-01  
 16  +4.0885e-01  +4.3753e-01  2.87e-02  1.26e-05  2.13e-03  2.60e-06  4.91e-05  7.52e-01  
 17  +4.0256e-01  +4.1094e-01  8.38e-03  3.60e-06  6.09e-04  7.72e-07  1.48e-05  8.05e-01  
 18  +4.0012e-01  +4.0104e-01  9.22e-04  3.91e-07  6.62e-05  8.44e-08  1.65e-06  9.45e-01  
 19  +3.9980e-01  +3.9981e-01  1.09e-05  4.62e-09  7.82e-07  9.95e-10  1.96e-08  9.88e-01  
 20  +3.9980e-01  +3.9980e-01  1.09e-07  4.63e-11  7.84e-09  9.98e-12  1.96e-10  9.90e-01  
 21  +3.9980e-01  +3.9980e-01  1.09e-09  4.63e-13  7.84e-11  1.00e-13  1.97e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 239.958ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:06 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:06 PM: Optimal value: 3.998e-01
(CVXPY) Sep 20 08:00:06 PM: Compilation took 4.736e-02 seconds
(CVXPY) Sep 20 08:00:06 PM: Solver (including time spent in interface) took 2.502e-01 seconds
Iteration: 35, Objective: 0.3998
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:06 PM: Your problem has 2864 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:06 PM: Finished problem compilation (took 4.600e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2864
  constraints   = 5364
  nnz(P)        = 0
  nnz(A)        = 52077
  cones (total) = 1
    : Nonnegative = 1,  numel = 5364

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.81e-01  8.36e+01  1.00e+00  1.00e+00   ------   
  1  +5.7680e-01  +5.4357e+02  5.43e+02  4.37e-01  5.28e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2901e-01  +5.8936e+01  5.84e+01  1.59e-01  2.40e+01  1.69e-02  2.63e-01  9.68e-01  
  3  +5.0793e-01  +1.5227e+01  1.47e+01  1.01e-01  1.55e+01  4.76e-05  2.35e-01  3.74e-01  
  4  +5.0080e-01  +1.6074e+00  1.11e+00  1.12e-02  1.83e+00  7.85e-06  1.13e-01  7.87e-01  
  5  +5.0050e-01  +1.3758e+00  8.75e-01  8.16e-03  1.36e+00  1.82e-05  4.66e-02  7.20e-01  
  6  +4.9896e-01  +1.1577e+00  6.59e-01  1.29e-03  2.23e-01  1.26e-04  3.63e-03  9.43e-01  
  7  +4.9608e-01  +1.1015e+00  6.05e-01  6.48e-04  1.12e-01  2.10e-04  1.79e-03  5.35e-01  
  8  +4.9079e-01  +9.6898e-01  4.78e-01  3.91e-04  6.72e-02  1.38e-04  1.10e-03  6.62e-01  
  9  +4.8413e-01  +9.1036e-01  4.26e-01  2.71e-04  4.65e-02  1.31e-04  7.73e-04  4.17e-01  
 10  +4.6872e-01  +7.6125e-01  2.93e-01  1.89e-04  3.22e-02  1.33e-05  5.79e-04  7.56e-01  
 11  +4.4163e-01  +6.0265e-01  1.61e-01  8.36e-05  1.41e-02  1.12e-05  2.80e-04  9.90e-01  
 12  +4.3351e-01  +5.6409e-01  1.31e-01  6.52e-05  1.10e-02  9.56e-06  2.26e-04  3.96e-01  
 13  +4.2190e-01  +5.0741e-01  8.55e-02  4.06e-05  6.85e-03  6.33e-06  1.48e-04  4.33e-01  
 14  +4.1380e-01  +4.6902e-01  5.52e-02  2.53e-05  4.27e-03  4.25e-06  9.59e-05  4.69e-01  
 15  +4.0619e-01  +4.3354e-01  2.74e-02  1.22e-05  2.06e-03  2.18e-06  4.83e-05  6.03e-01  
 16  +4.0134e-01  +4.1146e-01  1.01e-02  4.38e-06  7.41e-04  9.29e-07  1.81e-05  9.48e-01  
 17  +3.9831e-01  +3.9922e-01  9.05e-04  3.87e-07  6.55e-05  8.12e-08  1.66e-06  9.61e-01  
 18  +3.9800e-01  +3.9801e-01  1.01e-05  4.30e-09  7.29e-07  9.00e-10  1.85e-08  9.89e-01  
 19  +3.9800e-01  +3.9800e-01  1.01e-07  4.31e-11  7.29e-09  9.01e-12  1.86e-10  9.90e-01  
 20  +3.9800e-01  +3.9800e-01  1.01e-09  4.31e-13  7.29e-11  9.05e-14  1.86e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 191.2789ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:06 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:06 PM: Optimal value: 3.980e-01
(CVXPY) Sep 20 08:00:06 PM: Compilation took 4.600e-02 seconds
(CVXPY) Sep 20 08:00:06 PM: Solver (including time spent in interface) took 2.016e-01 seconds
Iteration: 36, Objective: 0.3980
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:06 PM: Your problem has 2874 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:07 PM: Finished problem compilation (took 4.465e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2874
  constraints   = 5374
  nnz(P)        = 0
  nnz(A)        = 52299
  cones (total) = 1
    : Nonnegative = 1,  numel = 5374

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.81e-01  8.36e+01  1.00e+00  1.00e+00   ------   
  1  +5.7680e-01  +5.4357e+02  5.43e+02  4.38e-01  5.27e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2899e-01  +5.8911e+01  5.84e+01  1.59e-01  2.39e+01  1.69e-02  2.63e-01  9.68e-01  
  3  +5.0792e-01  +1.5216e+01  1.47e+01  1.01e-01  1.55e+01  4.76e-05  2.35e-01  3.75e-01  
  4  +5.0080e-01  +1.6115e+00  1.11e+00  1.12e-02  1.84e+00  7.87e-06  1.13e-01  7.85e-01  
  5  +5.0050e-01  +1.3813e+00  8.81e-01  8.20e-03  1.36e+00  1.83e-05  4.65e-02  7.21e-01  
  6  +4.9877e-01  +1.1497e+00  6.51e-01  1.15e-03  1.98e-01  1.39e-04  3.21e-03  9.60e-01  
  7  +4.9406e-01  +1.0574e+00  5.63e-01  4.75e-04  8.19e-02  2.49e-04  1.31e-03  6.36e-01  
  8  +4.8539e-01  +9.5757e-01  4.72e-01  2.97e-04  5.09e-02  2.18e-04  8.38e-04  4.93e-01  
  9  +4.7568e-01  +8.3720e-01  3.62e-01  2.34e-04  4.00e-02  8.60e-05  6.93e-04  4.41e-01  
 10  +4.6296e-01  +7.4966e-01  2.87e-01  1.66e-04  2.83e-02  6.27e-05  5.15e-04  3.24e-01  
 11  +4.3606e-01  +5.8048e-01  1.44e-01  7.33e-05  1.24e-02  2.00e-05  2.51e-04  6.54e-01  
 12  +4.2883e-01  +5.4490e-01  1.16e-01  5.70e-05  9.63e-03  1.42e-05  2.02e-04  4.12e-01  
 13  +4.1948e-01  +4.9943e-01  8.00e-02  3.76e-05  6.33e-03  9.29e-06  1.39e-04  4.31e-01  
 14  +4.1188e-01  +4.6307e-01  5.12e-02  2.33e-05  3.93e-03  5.73e-06  8.95e-05  4.50e-01  
 15  +4.0511e-01  +4.3101e-01  2.59e-02  1.15e-05  1.94e-03  2.73e-06  4.60e-05  6.59e-01  
 16  +3.9866e-01  +4.0240e-01  3.73e-03  1.61e-06  2.72e-04  3.43e-07  6.85e-06  9.68e-01  
 17  +3.9746e-01  +3.9764e-01  1.76e-04  7.56e-08  1.28e-05  1.55e-08  3.28e-07  9.80e-01  
 18  +3.9740e-01  +3.9740e-01  1.78e-06  7.62e-10  1.29e-07  1.57e-10  3.31e-09  9.90e-01  
 19  +3.9740e-01  +3.9740e-01  1.78e-08  7.62e-12  1.29e-09  1.57e-12  3.31e-11  9.90e-01  
 20  +3.9740e-01  +3.9740e-01  1.78e-10  7.62e-14  1.29e-11  1.57e-14  3.33e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 207.8731ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:07 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:07 PM: Optimal value: 3.974e-01
(CVXPY) Sep 20 08:00:07 PM: Compilation took 4.465e-02 seconds
(CVXPY) Sep 20 08:00:07 PM: Solver (including time spent in interface) took 2.187e-01 seconds
Iteration: 37, Objective: 0.3974
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:07 PM: Your problem has 2884 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:07 PM: Finished problem compilation (took 4.806e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2884
  constraints   = 5384
  nnz(P)        = 0
  nnz(A)        = 52498
  cones (total) = 1
    : Nonnegative = 1,  numel = 5384

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.81e-01  8.35e+01  1.00e+00  1.00e+00   ------   
  1  +5.7670e-01  +5.4361e+02  5.43e+02  4.38e-01  5.27e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2893e-01  +5.8851e+01  5.83e+01  1.58e-01  2.38e+01  1.69e-02  2.63e-01  9.69e-01  
  3  +5.0791e-01  +1.5203e+01  1.47e+01  1.01e-01  1.55e+01  4.77e-05  2.35e-01  3.77e-01  
  4  +5.0081e-01  +1.6289e+00  1.13e+00  1.14e-02  1.86e+00  7.94e-06  1.13e-01  7.80e-01  
  5  +5.0050e-01  +1.4167e+00  9.16e-01  8.43e-03  1.40e+00  1.95e-05  4.57e-02  7.41e-01  
  6  +4.9861e-01  +1.1509e+00  6.52e-01  1.12e-03  1.93e-01  1.43e-04  3.13e-03  9.59e-01  
  7  +4.9260e-01  +1.0352e+00  5.43e-01  4.15e-04  7.15e-02  2.68e-04  1.15e-03  6.82e-01  
  8  +4.8392e-01  +9.6238e-01  4.78e-01  2.78e-04  4.77e-02  2.56e-04  7.84e-04  4.09e-01  
  9  +4.7247e-01  +8.2252e-01  3.50e-01  2.23e-04  3.80e-02  7.87e-05  6.70e-04  4.20e-01  
 10  +4.6606e-01  +7.7761e-01  3.12e-01  1.89e-04  3.22e-02  5.90e-05  5.81e-04  2.82e-01  
 11  +4.3704e-01  +5.8652e-01  1.49e-01  7.60e-05  1.28e-02  3.99e-06  2.59e-04  9.90e-01  
 12  +4.2879e-01  +5.4738e-01  1.19e-01  5.83e-05  9.83e-03  5.80e-06  2.06e-04  4.83e-01  
 13  +4.1921e-01  +5.0142e-01  8.22e-02  3.87e-05  6.52e-03  4.60e-06  1.43e-04  4.27e-01  
 14  +4.0866e-01  +4.5179e-01  4.31e-02  1.95e-05  3.28e-03  2.70e-06  7.64e-05  5.77e-01  
 15  +4.0065e-01  +4.1510e-01  1.45e-02  6.34e-06  1.07e-03  1.09e-06  2.63e-05  8.12e-01  
 16  +3.9671e-01  +3.9832e-01  1.61e-03  6.98e-07  1.18e-04  1.24e-07  3.01e-06  9.10e-01  
 17  +3.9621e-01  +3.9623e-01  1.96e-05  8.48e-09  1.43e-06  1.51e-09  3.67e-08  9.88e-01  
 18  +3.9620e-01  +3.9620e-01  1.96e-07  8.48e-11  1.43e-08  1.51e-11  3.68e-10  9.90e-01  
 19  +3.9620e-01  +3.9620e-01  1.96e-09  8.49e-13  1.43e-10  1.51e-13  3.68e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 180.1859ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:07 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:07 PM: Optimal value: 3.962e-01
(CVXPY) Sep 20 08:00:07 PM: Compilation took 4.806e-02 seconds
(CVXPY) Sep 20 08:00:07 PM: Solver (including time spent in interface) took 1.904e-01 seconds
Iteration: 38, Objective: 0.3962
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:07 PM: Your problem has 2894 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:07 PM: Finished problem compilation (took 5.066e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2894
  constraints   = 5394
  nnz(P)        = 0
  nnz(A)        = 52741
  cones (total) = 1
    : Nonnegative = 1,  numel = 5394

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.81e-01  8.34e+01  1.00e+00  1.00e+00   ------   
  1  +5.7672e-01  +5.4360e+02  5.43e+02  4.38e-01  5.26e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2892e-01  +5.8834e+01  5.83e+01  1.59e-01  2.38e+01  1.69e-02  2.63e-01  9.69e-01  
  3  +5.0790e-01  +1.5193e+01  1.47e+01  1.01e-01  1.54e+01  4.77e-05  2.35e-01  3.77e-01  
  4  +5.0081e-01  +1.6306e+00  1.13e+00  1.14e-02  1.87e+00  7.95e-06  1.13e-01  7.80e-01  
  5  +5.0050e-01  +1.4270e+00  9.27e-01  8.50e-03  1.41e+00  1.97e-05  4.57e-02  7.45e-01  
  6  +4.9859e-01  +1.1514e+00  6.53e-01  1.12e-03  1.92e-01  1.43e-04  3.13e-03  9.59e-01  
  7  +4.9255e-01  +1.0346e+00  5.42e-01  4.17e-04  7.17e-02  2.65e-04  1.15e-03  6.80e-01  
  8  +4.8429e-01  +9.6400e-01  4.80e-01  2.83e-04  4.86e-02  2.46e-04  8.00e-04  4.18e-01  
  9  +4.7256e-01  +8.2171e-01  3.49e-01  2.22e-04  3.78e-02  7.19e-05  6.66e-04  4.62e-01  
 10  +4.6514e-01  +7.7047e-01  3.05e-01  1.84e-04  3.12e-02  5.67e-05  5.66e-04  2.42e-01  
 11  +4.4274e-01  +6.2571e-01  1.83e-01  9.65e-05  1.63e-02  2.02e-05  3.23e-04  6.80e-01  
 12  +4.2577e-01  +5.3527e-01  1.09e-01  5.36e-05  9.03e-03  9.81e-06  1.93e-04  6.98e-01  
 13  +4.1888e-01  +5.0140e-01  8.25e-02  3.91e-05  6.58e-03  7.37e-06  1.45e-04  3.43e-01  
 14  +4.0974e-01  +4.5742e-01  4.77e-02  2.17e-05  3.66e-03  4.25e-06  8.47e-05  5.58e-01  
 15  +4.0305e-01  +4.2609e-01  2.30e-02  1.03e-05  1.73e-03  2.06e-06  4.17e-05  6.36e-01  
 16  +3.9807e-01  +4.0394e-01  5.86e-03  2.55e-06  4.31e-04  5.26e-07  1.08e-05  8.69e-01  
 17  +3.9628e-01  +3.9654e-01  2.53e-04  1.10e-07  1.85e-05  2.22e-08  4.75e-07  9.71e-01  
 18  +3.9620e-01  +3.9620e-01  2.56e-06  1.11e-09  1.87e-07  2.24e-10  4.81e-09  9.90e-01  
 19  +3.9620e-01  +3.9620e-01  2.56e-08  1.11e-11  1.87e-09  2.24e-12  4.81e-11  9.90e-01  
 20  +3.9620e-01  +3.9620e-01  2.56e-10  1.11e-13  1.87e-11  2.25e-14  4.82e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 204.602ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:08 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:08 PM: Optimal value: 3.962e-01
(CVXPY) Sep 20 08:00:08 PM: Compilation took 5.066e-02 seconds
(CVXPY) Sep 20 08:00:08 PM: Solver (including time spent in interface) took 2.178e-01 seconds
Iteration: 39, Objective: 0.3962
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:08 PM: Your problem has 2898 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:08 PM: Finished problem compilation (took 4.343e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2898
  constraints   = 5398
  nnz(P)        = 0
  nnz(A)        = 52831
  cones (total) = 1
    : Nonnegative = 1,  numel = 5398

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.81e-01  8.34e+01  1.00e+00  1.00e+00   ------   
  1  +5.7668e-01  +5.4361e+02  5.43e+02  4.38e-01  5.25e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2892e-01  +5.8835e+01  5.83e+01  1.59e-01  2.37e+01  1.69e-02  2.63e-01  9.69e-01  
  3  +5.0790e-01  +1.5193e+01  1.47e+01  1.01e-01  1.54e+01  4.77e-05  2.35e-01  3.78e-01  
  4  +5.0081e-01  +1.6256e+00  1.12e+00  1.14e-02  1.86e+00  7.93e-06  1.13e-01  7.82e-01  
  5  +5.0051e-01  +1.4328e+00  9.32e-01  8.53e-03  1.42e+00  2.00e-05  4.52e-02  7.48e-01  
  6  +4.9862e-01  +1.1593e+00  6.61e-01  1.13e-03  1.95e-01  1.43e-04  3.18e-03  9.56e-01  
  7  +4.9268e-01  +1.0404e+00  5.48e-01  4.25e-04  7.31e-02  2.62e-04  1.18e-03  6.79e-01  
  8  +4.8419e-01  +9.6642e-01  4.82e-01  2.84e-04  4.87e-02  2.43e-04  8.03e-04  4.29e-01  
  9  +4.7303e-01  +8.2891e-01  3.56e-01  2.26e-04  3.85e-02  7.70e-05  6.77e-04  4.41e-01  
 10  +4.6643e-01  +7.8168e-01  3.15e-01  1.91e-04  3.25e-02  5.89e-05  5.87e-04  2.61e-01  
 11  +4.3944e-01  +6.0333e-01  1.64e-01  8.45e-05  1.43e-02  1.42e-05  2.86e-04  7.90e-01  
 12  +4.2534e-01  +5.3223e-01  1.07e-01  5.20e-05  8.76e-03  8.92e-06  1.87e-04  6.50e-01  
 13  +4.1867e-01  +4.9990e-01  8.12e-02  3.84e-05  6.46e-03  6.82e-06  1.43e-04  3.26e-01  
 14  +4.0844e-01  +4.5120e-01  4.28e-02  1.94e-05  3.26e-03  3.61e-06  7.62e-05  5.87e-01  
 15  +4.0336e-01  +4.2738e-01  2.40e-02  1.07e-05  1.80e-03  2.08e-06  4.34e-05  5.89e-01  
 16  +3.9768e-01  +4.0234e-01  4.66e-03  2.03e-06  3.42e-04  4.03e-07  8.65e-06  8.67e-01  
 17  +3.9626e-01  +3.9645e-01  1.91e-04  8.25e-08  1.39e-05  1.63e-08  3.58e-07  9.73e-01  
 18  +3.9620e-01  +3.9620e-01  1.92e-06  8.32e-10  1.40e-07  1.65e-10  3.61e-09  9.90e-01  
 19  +3.9620e-01  +3.9620e-01  1.92e-08  8.32e-12  1.40e-09  1.65e-12  3.61e-11  9.90e-01  
 20  +3.9620e-01  +3.9620e-01  1.92e-10  8.33e-14  1.40e-11  1.65e-14  3.62e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 242.8623ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:08 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:08 PM: Optimal value: 3.962e-01
(CVXPY) Sep 20 08:00:08 PM: Compilation took 4.343e-02 seconds
(CVXPY) Sep 20 08:00:08 PM: Solver (including time spent in interface) took 2.546e-01 seconds
Iteration: 40, Objective: 0.3962
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:09 PM: Your problem has 2904 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:09 PM: Finished problem compilation (took 5.013e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2904
  constraints   = 5404
  nnz(P)        = 0
  nnz(A)        = 53028
  cones (total) = 1
    : Nonnegative = 1,  numel = 5404

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.81e-01  8.34e+01  1.00e+00  1.00e+00   ------   
  1  +5.7667e-01  +5.4360e+02  5.43e+02  4.38e-01  5.25e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2891e-01  +5.8830e+01  5.83e+01  1.59e-01  2.37e+01  1.69e-02  2.63e-01  9.69e-01  
  3  +5.0790e-01  +1.5189e+01  1.47e+01  1.01e-01  1.54e+01  4.77e-05  2.35e-01  3.78e-01  
  4  +5.0081e-01  +1.6307e+00  1.13e+00  1.14e-02  1.87e+00  7.95e-06  1.13e-01  7.80e-01  
  5  +5.0051e-01  +1.4348e+00  9.34e-01  8.55e-03  1.42e+00  2.00e-05  4.54e-02  7.49e-01  
  6  +4.9858e-01  +1.1532e+00  6.55e-01  1.12e-03  1.92e-01  1.44e-04  3.14e-03  9.56e-01  
  7  +4.9252e-01  +1.0351e+00  5.43e-01  4.19e-04  7.20e-02  2.64e-04  1.16e-03  6.79e-01  
  8  +4.8455e-01  +9.6629e-01  4.82e-01  2.87e-04  4.91e-02  2.37e-04  8.09e-04  4.34e-01  
  9  +4.7297e-01  +8.2601e-01  3.53e-01  2.24e-04  3.81e-02  7.24e-05  6.71e-04  4.67e-01  
 10  +4.6460e-01  +7.6805e-01  3.03e-01  1.81e-04  3.06e-02  5.68e-05  5.58e-04  2.45e-01  
 11  +4.4629e-01  +6.4975e-01  2.03e-01  1.09e-04  1.85e-02  2.74e-05  3.62e-04  5.41e-01  
 12  +4.3135e-01  +5.6661e-01  1.35e-01  6.81e-05  1.15e-02  1.56e-05  2.40e-04  4.82e-01  
 13  +4.1911e-01  +5.0364e-01  8.45e-02  4.04e-05  6.79e-03  9.08e-06  1.50e-04  4.73e-01  
 14  +4.1299e-01  +4.7379e-01  6.08e-02  2.82e-05  4.74e-03  6.37e-06  1.08e-04  3.75e-01  
 15  +4.0516e-01  +4.3646e-01  3.13e-02  1.41e-05  2.37e-03  3.17e-06  5.66e-05  5.71e-01  
 16  +4.0084e-01  +4.1533e-01  1.45e-02  6.37e-06  1.07e-03  1.38e-06  2.63e-05  9.04e-01  
 17  +3.9682e-01  +3.9865e-01  1.83e-03  7.94e-07  1.34e-04  1.68e-07  3.42e-06  9.29e-01  
 18  +3.9626e-01  +3.9641e-01  1.56e-04  6.76e-08  1.14e-05  1.36e-08  2.93e-07  9.89e-01  
 19  +3.9620e-01  +3.9620e-01  1.61e-06  6.96e-10  1.17e-07  1.40e-10  3.02e-09  9.90e-01  
 20  +3.9620e-01  +3.9620e-01  1.61e-08  6.96e-12  1.17e-09  1.40e-12  3.02e-11  9.90e-01  
 21  +3.9620e-01  +3.9620e-01  1.61e-10  6.97e-14  1.17e-11  1.40e-14  3.03e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 305.4756ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:09 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:09 PM: Optimal value: 3.962e-01
(CVXPY) Sep 20 08:00:09 PM: Compilation took 5.013e-02 seconds
(CVXPY) Sep 20 08:00:09 PM: Solver (including time spent in interface) took 3.158e-01 seconds
Iteration: 41, Objective: 0.3962
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:09 PM: Your problem has 2909 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:09 PM: Finished problem compilation (took 4.854e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2909
  constraints   = 5409
  nnz(P)        = 0
  nnz(A)        = 53211
  cones (total) = 1
    : Nonnegative = 1,  numel = 5409

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.81e-01  8.33e+01  1.00e+00  1.00e+00   ------   
  1  +5.7666e-01  +5.4361e+02  5.43e+02  4.39e-01  5.25e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2889e-01  +5.8807e+01  5.83e+01  1.59e-01  2.37e+01  1.69e-02  2.63e-01  9.70e-01  
  3  +5.0790e-01  +1.5183e+01  1.47e+01  1.01e-01  1.54e+01  4.77e-05  2.35e-01  3.79e-01  
  4  +5.0081e-01  +1.6254e+00  1.12e+00  1.14e-02  1.86e+00  7.94e-06  1.13e-01  7.82e-01  
  5  +5.0051e-01  +1.4429e+00  9.42e-01  8.59e-03  1.43e+00  2.03e-05  4.49e-02  7.53e-01  
  6  +4.9862e-01  +1.1626e+00  6.64e-01  1.14e-03  1.96e-01  1.43e-04  3.19e-03  9.54e-01  
  7  +4.9276e-01  +1.0438e+00  5.51e-01  4.32e-04  7.42e-02  2.59e-04  1.20e-03  6.75e-01  
  8  +4.8455e-01  +9.6758e-01  4.83e-01  2.89e-04  4.95e-02  2.24e-04  8.17e-04  4.69e-01  
  9  +4.7449e-01  +8.4150e-01  3.67e-01  2.36e-04  4.01e-02  8.09e-05  7.04e-04  4.12e-01  
 10  +4.6924e-01  +8.0225e-01  3.33e-01  2.06e-04  3.50e-02  6.17e-05  6.28e-04  2.62e-01  
 11  +4.4497e-01  +6.3565e-01  1.91e-01  1.01e-04  1.71e-02  1.45e-05  3.37e-04  8.14e-01  
 12  +4.2995e-01  +5.5606e-01  1.26e-01  6.31e-05  1.06e-02  9.29e-06  2.23e-04  4.69e-01  
 13  +4.1767e-01  +4.9496e-01  7.73e-02  3.67e-05  6.17e-03  5.76e-06  1.37e-04  4.95e-01  
 14  +4.1064e-01  +4.6160e-01  5.10e-02  2.35e-05  3.94e-03  3.92e-06  9.09e-05  4.49e-01  
 15  +4.0369e-01  +4.2920e-01  2.55e-02  1.14e-05  1.92e-03  2.01e-06  4.63e-05  5.87e-01  
 16  +3.9990e-01  +4.1112e-01  1.12e-02  4.93e-06  8.29e-04  1.02e-06  2.05e-05  9.59e-01  
 17  +3.9695e-01  +3.9920e-01  2.25e-03  9.76e-07  1.64e-04  2.02e-07  4.20e-06  8.32e-01  
 18  +3.9626e-01  +3.9644e-01  1.75e-04  7.59e-08  1.28e-05  1.52e-08  3.29e-07  9.90e-01  
 19  +3.9620e-01  +3.9620e-01  1.80e-06  7.79e-10  1.31e-07  1.56e-10  3.38e-09  9.90e-01  
 20  +3.9620e-01  +3.9620e-01  1.80e-08  7.79e-12  1.31e-09  1.56e-12  3.39e-11  9.90e-01  
 21  +3.9620e-01  +3.9620e-01  1.80e-10  7.80e-14  1.31e-11  1.57e-14  3.40e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 268.1828ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:09 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:09 PM: Optimal value: 3.962e-01
(CVXPY) Sep 20 08:00:09 PM: Compilation took 4.854e-02 seconds
(CVXPY) Sep 20 08:00:09 PM: Solver (including time spent in interface) took 2.785e-01 seconds
Iteration: 42, Objective: 0.3962
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:10 PM: Your problem has 2919 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:10 PM: Finished problem compilation (took 4.578e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2919
  constraints   = 5419
  nnz(P)        = 0
  nnz(A)        = 53437
  cones (total) = 1
    : Nonnegative = 1,  numel = 5419

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.81e-01  8.33e+01  1.00e+00  1.00e+00   ------   
  1  +5.7664e-01  +5.4358e+02  5.43e+02  4.39e-01  5.24e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2885e-01  +5.8758e+01  5.82e+01  1.58e-01  2.36e+01  1.69e-02  2.63e-01  9.70e-01  
  3  +5.0788e-01  +1.5165e+01  1.47e+01  1.01e-01  1.53e+01  4.78e-05  2.34e-01  3.80e-01  
  4  +5.0081e-01  +1.6243e+00  1.12e+00  1.14e-02  1.86e+00  7.95e-06  1.12e-01  7.83e-01  
  5  +5.0051e-01  +1.4545e+00  9.54e-01  8.63e-03  1.43e+00  2.08e-05  4.39e-02  7.60e-01  
  6  +4.9862e-01  +1.1901e+00  6.91e-01  1.18e-03  2.03e-01  1.43e-04  3.31e-03  9.49e-01  
  7  +4.9288e-01  +1.0625e+00  5.70e-01  4.58e-04  7.86e-02  2.49e-04  1.27e-03  6.68e-01  
  8  +4.8523e-01  +9.8877e-01  5.04e-01  3.08e-04  5.27e-02  2.26e-04  8.69e-04  4.45e-01  
  9  +4.7572e-01  +8.6315e-01  3.87e-01  2.45e-04  4.17e-02  9.48e-05  7.24e-04  4.16e-01  
 10  +4.6538e-01  +7.8744e-01  3.22e-01  1.88e-04  3.18e-02  7.35e-05  5.75e-04  2.58e-01  
 11  +4.4740e-01  +6.6442e-01  2.17e-01  1.16e-04  1.96e-02  3.42e-05  3.82e-04  5.22e-01  
 12  +4.3099e-01  +5.6895e-01  1.38e-01  6.94e-05  1.17e-02  1.87e-05  2.44e-04  4.52e-01  
 13  +4.1904e-01  +5.0581e-01  8.68e-02  4.15e-05  6.97e-03  1.09e-05  1.54e-04  4.56e-01  
 14  +4.1315e-01  +4.7665e-01  6.35e-02  2.95e-05  4.95e-03  7.74e-06  1.13e-04  3.39e-01  
 15  +4.0588e-01  +4.4142e-01  3.55e-02  1.60e-05  2.69e-03  4.15e-06  6.40e-05  5.06e-01  
 16  +3.9968e-01  +4.1234e-01  1.27e-02  5.59e-06  9.38e-04  1.42e-06  2.33e-05  6.83e-01  
 17  +3.9788e-01  +4.0415e-01  6.27e-03  2.75e-06  4.60e-04  6.82e-07  1.16e-05  5.71e-01  
 18  +3.9638e-01  +3.9758e-01  1.20e-03  5.19e-07  8.71e-05  1.23e-07  2.23e-06  8.58e-01  
 19  +3.9602e-01  +3.9608e-01  5.88e-05  2.53e-08  4.25e-06  5.61e-09  1.10e-07  9.71e-01  
 20  +3.9600e-01  +3.9600e-01  5.90e-07  2.54e-10  4.26e-08  5.63e-11  1.11e-09  9.90e-01  
 21  +3.9600e-01  +3.9600e-01  5.90e-09  2.54e-12  4.26e-10  5.63e-13  1.11e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 246.6227ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:10 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:10 PM: Optimal value: 3.960e-01
(CVXPY) Sep 20 08:00:10 PM: Compilation took 4.578e-02 seconds
(CVXPY) Sep 20 08:00:10 PM: Solver (including time spent in interface) took 2.571e-01 seconds
Iteration: 43, Objective: 0.3960
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:10 PM: Your problem has 2925 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:10 PM: Finished problem compilation (took 4.051e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2925
  constraints   = 5425
  nnz(P)        = 0
  nnz(A)        = 53564
  cones (total) = 1
    : Nonnegative = 1,  numel = 5425

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.81e-01  8.32e+01  1.00e+00  1.00e+00   ------   
  1  +5.7661e-01  +5.4353e+02  5.43e+02  4.39e-01  5.23e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2884e-01  +5.8749e+01  5.82e+01  1.58e-01  2.35e+01  1.69e-02  2.63e-01  9.70e-01  
  3  +5.0788e-01  +1.5160e+01  1.47e+01  1.01e-01  1.53e+01  4.78e-05  2.34e-01  3.80e-01  
  4  +5.0081e-01  +1.6284e+00  1.13e+00  1.14e-02  1.86e+00  7.97e-06  1.12e-01  7.82e-01  
  5  +5.0050e-01  +1.4444e+00  9.44e-01  8.53e-03  1.41e+00  2.08e-05  4.34e-02  7.65e-01  
  6  +4.9857e-01  +1.1962e+00  6.98e-01  1.18e-03  2.03e-01  1.45e-04  3.31e-03  9.46e-01  
  7  +4.9267e-01  +1.0645e+00  5.72e-01  4.56e-04  7.82e-02  2.51e-04  1.26e-03  6.68e-01  
  8  +4.8504e-01  +9.9193e-01  5.07e-01  3.07e-04  5.25e-02  2.31e-04  8.66e-04  4.42e-01  
  9  +4.7620e-01  +8.7182e-01  3.96e-01  2.52e-04  4.28e-02  1.02e-04  7.41e-04  3.76e-01  
 10  +4.6596e-01  +7.9557e-01  3.30e-01  1.93e-04  3.27e-02  7.90e-05  5.88e-04  2.65e-01  
 11  +4.4798e-01  +6.7052e-01  2.23e-01  1.19e-04  2.01e-02  3.65e-05  3.91e-04  5.25e-01  
 12  +4.2792e-01  +5.5259e-01  1.25e-01  6.19e-05  1.04e-02  1.58e-05  2.20e-04  5.70e-01  
 13  +4.1313e-01  +4.7680e-01  6.37e-02  2.96e-05  4.96e-03  7.10e-06  1.13e-04  6.55e-01  
 14  +4.0744e-01  +4.4944e-01  4.20e-02  1.91e-05  3.20e-03  4.50e-06  7.51e-05  4.78e-01  
 15  +4.0062e-01  +4.1783e-01  1.72e-02  7.62e-06  1.28e-03  1.76e-06  3.15e-05  6.89e-01  
 16  +3.9780e-01  +4.0534e-01  7.54e-03  3.31e-06  5.55e-04  7.57e-07  1.40e-05  6.06e-01  
 17  +3.9604e-01  +3.9772e-01  1.68e-03  7.29e-07  1.22e-04  1.62e-07  3.15e-06  8.35e-01  
 18  +3.9556e-01  +3.9573e-01  1.74e-04  7.50e-08  1.26e-05  1.61e-08  3.28e-07  9.31e-01  
 19  +3.9550e-01  +3.9550e-01  1.78e-06  7.67e-10  1.29e-07  1.65e-10  3.36e-09  9.90e-01  
 20  +3.9550e-01  +3.9550e-01  1.78e-08  7.67e-12  1.29e-09  1.65e-12  3.36e-11  9.90e-01  
 21  +3.9550e-01  +3.9550e-01  1.78e-10  7.67e-14  1.29e-11  1.68e-14  3.42e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 245.4115ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:11 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:11 PM: Optimal value: 3.955e-01
(CVXPY) Sep 20 08:00:11 PM: Compilation took 4.051e-02 seconds
(CVXPY) Sep 20 08:00:11 PM: Solver (including time spent in interface) took 2.555e-01 seconds
Iteration: 44, Objective: 0.3955
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:11 PM: Your problem has 2930 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:11 PM: Finished problem compilation (took 4.252e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:11 PM: Invoking solver CLARABEL  to obtain a solution.
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres   -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2930
  constraints   = 5430
  nnz(P)        = 0
  nnz(A)        = 53650
  cones (total) = 1
    : Nonnegative = 1,  numel = 5430

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.81e-01  8.32e+01  1.00e+00  1.00e+00   ------   
  1  +5.7658e-01  +5.4354e+02  5.43e+02  4.39e-01  5.23e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2883e-01  +5.8736e+01  5.82e+01  1.58e-01  2.35e+01  1.69e-02  2.63e-01  9.70e-01  
  3  +5.0788e-01  +1.5158e+01  1.47e+01  1.01e-01  1.53e+01  4.78e-05  2.34e-01  3.81e-01  
  4  +5.0081e-01  +1.6249e+00  1.12e+00  1.14e-02  1.86e+00  7.96e-06  1.12e-01  7.83e-01  
  5  +5.0051e-01  +1.4473e+00  9.47e-01  8.54e-03  1.42e+00  2.09e-05  4.31e-02  7.66e-01  
  6  +4.9861e-01  +1.2043e+00  7.06e-01  1.20e-03  2.05e-01  1.44e-04  3.35e-03  9.45e-01  
  7  +4.9278e-01  +1.0702e+00  5.77e-01  4.62e-04  7.92e-02  2.49e-04  1.28e-03  6.70e-01  
  8  +4.8510e-01  +9.9529e-01  5.10e-01  3.10e-04  5.30e-02  2.27e-04  8.75e-04  4.45e-01  
  9  +4.7596e-01  +8.7059e-01  3.95e-01  2.51e-04  4.26e-02  9.79e-05  7.39e-04  3.92e-01  
 10  +4.6555e-01  +7.9323e-01  3.28e-01  1.91e-04  3.24e-02  7.56e-05  5.85e-04  2.66e-01  
 11  +4.4746e-01  +6.6819e-01  2.21e-01  1.18e-04  1.99e-02  3.56e-05  3.87e-04  5.19e-01  
 12  +4.2718e-01  +5.4937e-01  1.22e-01  6.05e-05  1.02e-02  1.53e-05  2.16e-04  5.74e-01  
 13  +4.1444e-01  +4.8385e-01  6.94e-02  3.25e-05  5.44e-03  7.89e-06  1.23e-04  5.89e-01  
 14  +4.0745e-01  +4.5013e-01  4.27e-02  1.94e-05  3.25e-03  4.64e-06  7.61e-05  5.06e-01  
 15  +4.0109e-01  +4.2044e-01  1.93e-02  8.57e-06  1.44e-03  2.02e-06  3.51e-05  6.46e-01  
 16  +3.9740e-01  +4.0397e-01  6.56e-03  2.87e-06  4.81e-04  6.68e-07  1.21e-05  7.08e-01  
 17  +3.9586e-01  +3.9726e-01  1.40e-03  6.06e-07  1.02e-04  1.34e-07  2.60e-06  8.70e-01  
 18  +3.9544e-01  +3.9554e-01  1.05e-04  4.51e-08  7.56e-06  9.67e-09  1.96e-07  9.51e-01  
 19  +3.9540e-01  +3.9540e-01  1.09e-06  4.67e-10  7.82e-08  1.00e-10  2.03e-09  9.90e-01  
 20  +3.9540e-01  +3.9540e-01  1.09e-08  4.67e-12  7.82e-10  1.00e-12  2.03e-11  9.90e-01  
 21  +3.9540e-01  +3.9540e-01  1.09e-10  4.67e-14  7.82e-12  1.02e-14  2.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 222.7161ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:11 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:11 PM: Optimal value: 3.954e-01
(CVXPY) Sep 20 08:00:11 PM: Compilation took 4.252e-02 seconds
(CVXPY) Sep 20 08:00:11 PM: Solver (including time spent in interface) took 2.322e-01 seconds
Iteration: 45, Objective: 0.3954
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:11 PM: Your problem has 2931 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:11 PM: Finished problem compilation (took 4.673e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2931
  constraints   = 5431
  nnz(P)        = 0
  nnz(A)        = 53668
  cones (total) = 1
    : Nonnegative = 1,  numel = 5431

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.81e-01  8.32e+01  1.00e+00  1.00e+00   ------   
  1  +5.7658e-01  +5.4355e+02  5.43e+02  4.39e-01  5.23e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2883e-01  +5.8732e+01  5.82e+01  1.58e-01  2.35e+01  1.69e-02  2.63e-01  9.71e-01  
  3  +5.0788e-01  +1.5158e+01  1.46e+01  1.01e-01  1.53e+01  4.78e-05  2.34e-01  3.81e-01  
  4  +5.0081e-01  +1.6247e+00  1.12e+00  1.14e-02  1.86e+00  7.96e-06  1.12e-01  7.83e-01  
  5  +5.0051e-01  +1.4505e+00  9.50e-01  8.55e-03  1.42e+00  2.11e-05  4.30e-02  7.67e-01  
  6  +4.9861e-01  +1.2051e+00  7.06e-01  1.20e-03  2.05e-01  1.44e-04  3.35e-03  9.45e-01  
  7  +4.9276e-01  +1.0700e+00  5.77e-01  4.61e-04  7.91e-02  2.49e-04  1.28e-03  6.71e-01  
  8  +4.8514e-01  +9.9510e-01  5.10e-01  3.10e-04  5.30e-02  2.23e-04  8.75e-04  4.55e-01  
  9  +4.7613e-01  +8.7142e-01  3.95e-01  2.53e-04  4.29e-02  9.64e-05  7.44e-04  3.85e-01  
 10  +4.6583e-01  +7.9486e-01  3.29e-01  1.93e-04  3.27e-02  7.47e-05  5.89e-04  2.68e-01  
 11  +4.4743e-01  +6.6755e-01  2.20e-01  1.18e-04  1.98e-02  3.47e-05  3.86e-04  5.28e-01  
 12  +4.2725e-01  +5.4958e-01  1.22e-01  6.06e-05  1.02e-02  1.50e-05  2.16e-04  5.77e-01  
 13  +4.1451e-01  +4.8414e-01  6.96e-02  3.26e-05  5.46e-03  7.78e-06  1.23e-04  5.86e-01  
 14  +4.0740e-01  +4.4989e-01  4.25e-02  1.93e-05  3.23e-03  4.56e-06  7.57e-05  5.09e-01  
 15  +4.0108e-01  +4.2038e-01  1.93e-02  8.55e-06  1.43e-03  1.99e-06  3.50e-05  6.45e-01  
 16  +3.9740e-01  +4.0392e-01  6.53e-03  2.86e-06  4.78e-04  6.57e-07  1.20e-05  7.09e-01  
 17  +3.9586e-01  +3.9724e-01  1.38e-03  6.00e-07  1.01e-04  1.32e-07  2.58e-06  8.69e-01  
 18  +3.9543e-01  +3.9553e-01  9.70e-05  4.17e-08  6.99e-06  8.88e-09  1.82e-07  9.56e-01  
 19  +3.9540e-01  +3.9540e-01  1.00e-06  4.30e-10  7.20e-08  9.15e-11  1.87e-09  9.90e-01  
 20  +3.9540e-01  +3.9540e-01  1.00e-08  4.30e-12  7.20e-10  9.15e-13  1.87e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 227.6047ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:12 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:12 PM: Optimal value: 3.954e-01
(CVXPY) Sep 20 08:00:12 PM: Compilation took 4.673e-02 seconds
(CVXPY) Sep 20 08:00:12 PM: Solver (including time spent in interface) took 2.365e-01 seconds
Iteration: 46, Objective: 0.3954
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:12 PM: Your problem has 2932 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:12 PM: Finished problem compilation (took 5.665e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2932
  constraints   = 5432
  nnz(P)        = 0
  nnz(A)        = 53675
  cones (total) = 1
    : Nonnegative = 1,  numel = 5432

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.81e-01  8.32e+01  1.00e+00  1.00e+00   ------   
  1  +5.7660e-01  +5.4354e+02  5.43e+02  4.39e-01  5.23e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2883e-01  +5.8731e+01  5.82e+01  1.58e-01  2.35e+01  1.69e-02  2.63e-01  9.70e-01  
  3  +5.0788e-01  +1.5155e+01  1.46e+01  1.01e-01  1.53e+01  4.78e-05  2.34e-01  3.81e-01  
  4  +5.0080e-01  +1.6178e+00  1.12e+00  1.13e-02  1.85e+00  7.94e-06  1.12e-01  7.86e-01  
  5  +5.0052e-01  +1.4607e+00  9.60e-01  8.61e-03  1.43e+00  2.14e-05  4.27e-02  7.70e-01  
  6  +4.9865e-01  +1.2089e+00  7.10e-01  1.21e-03  2.07e-01  1.43e-04  3.38e-03  9.43e-01  
  7  +4.9290e-01  +1.0734e+00  5.81e-01  4.65e-04  7.97e-02  2.47e-04  1.29e-03  6.72e-01  
  8  +4.8536e-01  +9.9668e-01  5.11e-01  3.13e-04  5.35e-02  2.17e-04  8.83e-04  4.62e-01  
  9  +4.7605e-01  +8.6925e-01  3.93e-01  2.51e-04  4.27e-02  9.15e-05  7.40e-04  4.08e-01  
 10  +4.6565e-01  +7.9235e-01  3.27e-01  1.91e-04  3.24e-02  7.11e-05  5.85e-04  2.65e-01  
 11  +4.4702e-01  +6.6442e-01  2.17e-01  1.16e-04  1.96e-02  3.32e-05  3.81e-04  5.28e-01  
 12  +4.2688e-01  +5.4734e-01  1.20e-01  5.96e-05  1.00e-02  1.45e-05  2.13e-04  5.74e-01  
 13  +4.1509e-01  +4.8708e-01  7.20e-02  3.37e-05  5.66e-03  7.99e-06  1.27e-04  5.54e-01  
 14  +4.0735e-01  +4.4975e-01  4.24e-02  1.92e-05  3.22e-03  4.52e-06  7.56e-05  5.23e-01  
 15  +4.0109e-01  +4.2040e-01  1.93e-02  8.55e-06  1.43e-03  1.98e-06  3.50e-05  6.53e-01  
 16  +3.9740e-01  +4.0392e-01  6.52e-03  2.85e-06  4.78e-04  6.53e-07  1.20e-05  7.09e-01  
 17  +3.9586e-01  +3.9724e-01  1.39e-03  6.01e-07  1.01e-04  1.32e-07  2.58e-06  8.69e-01  
 18  +3.9543e-01  +3.9553e-01  9.89e-05  4.25e-08  7.12e-06  9.02e-09  1.85e-07  9.56e-01  
 19  +3.9540e-01  +3.9540e-01  1.02e-06  4.39e-10  7.34e-08  9.30e-11  1.91e-09  9.90e-01  
 20  +3.9540e-01  +3.9540e-01  1.02e-08  4.39e-12  7.35e-10  9.30e-13  1.91e-11  9.90e-01  
 21  +3.9540e-01  +3.9540e-01  1.02e-10  4.39e-14  7.35e-12  9.47e-15  1.94e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 283.371ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:12 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:12 PM: Optimal value: 3.954e-01
(CVXPY) Sep 20 08:00:12 PM: Compilation took 5.665e-02 seconds
(CVXPY) Sep 20 08:00:12 PM: Solver (including time spent in interface) took 2.925e-01 seconds
FULL MODEL:
  Accruacy: 0.5382
  Our objective: 0.07640000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0052)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.0036)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.0092)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0044)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0012)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.0032)
 OR (x6 = 0 AND x7 = 1 AND x8 = 1)                                                                   <-- (term's our objective: 0.0324)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 29.36514973640442
Best over terms:
  Our final objective: 0.0324
    Its accruacy: 0.5162
    Its hamming distance: 10
  Shortest hamming distance: 5
    Its our objective: 0.0027999999999999596
  Highest accruacy: 0.5162
   dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 124 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 125 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 126 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 127 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 128 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 129 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 130 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 131 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 132 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 133 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 134 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 135 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 136 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 137 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 138 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 139 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 140 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 141 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

