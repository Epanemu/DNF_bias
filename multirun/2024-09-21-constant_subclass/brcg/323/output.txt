Command:
python test_script.py -s constant_subclass -d 9 -n 10 --seed 34 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 9.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:42 PM: Your problem has 24 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:42 PM: Finished problem compilation (took 5.359e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 24
  constraints   = 29
  nnz(P)        = 0
  nnz(A)        = 79
  cones (total) = 1
    : Nonnegative = 1,  numel = 29

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.9066e-01  +6.4570e+00  6.07e+00  7.74e-01  2.76e+00  1.00e+00  1.36e+00   ------   
  1  +3.2981e-01  +1.0059e+00  6.76e-01  2.46e-01  1.03e+00  3.26e-03  5.55e-01  8.27e-01  
  2  +1.7426e-01  +3.0633e-01  1.32e-01  4.92e-02  2.16e-01  5.89e-03  1.57e-01  8.21e-01  
  3  +1.5255e-01  +1.6571e-01  1.32e-02  4.94e-03  2.20e-02  7.91e-04  1.88e-02  9.72e-01  
  4  +1.5018e-01  +1.5036e-01  1.74e-04  6.64e-05  2.95e-04  9.63e-06  2.59e-04  9.86e-01  
  5  +1.5015e-01  +1.5015e-01  1.74e-06  6.64e-07  2.95e-06  9.62e-08  2.59e-06  9.90e-01  
  6  +1.5015e-01  +1.5015e-01  1.74e-08  6.64e-09  2.95e-08  9.62e-10  2.59e-08  9.90e-01  
  7  +1.5015e-01  +1.5015e-01  1.74e-10  6.64e-11  2.95e-10  9.62e-12  2.59e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 185µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:42 PM: Optimal value: 1.502e-01
(CVXPY) Sep 20 07:55:42 PM: Compilation took 5.359e-03 seconds
(CVXPY) Sep 20 07:55:42 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.1502
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:42 PM: Your problem has 34 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:42 PM: Finished problem compilation (took 4.520e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 39
  nnz(P)        = 0
  nnz(A)        = 112
  cones (total) = 1
    : Nonnegative = 1,  numel = 39

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.1427e-01  +6.5640e+00  6.25e+00  8.05e-01  2.88e+00  1.00e+00  1.38e+00   ------   
  1  +1.4989e-01  +8.5237e-01  7.02e-01  2.64e-01  1.01e+00  3.49e-03  5.25e-01  8.27e-01  
  2  +4.6504e-02  +1.9642e-01  1.50e-01  4.97e-02  2.48e-01  8.95e-03  1.54e-01  8.61e-01  
  3  +6.2489e-03  +2.7346e-02  2.11e-02  5.91e-03  3.23e-02  1.55e-03  2.21e-02  8.77e-01  
  4  +2.7224e-04  +5.3817e-04  2.66e-04  7.58e-05  4.14e-04  1.60e-05  2.87e-04  9.88e-01  
  5  +2.0213e-04  +2.1375e-04  1.16e-05  3.87e-06  1.95e-05  1.43e-07  1.49e-05  9.48e-01  
  6  +2.0001e-04  +2.0015e-04  1.40e-07  4.86e-08  2.38e-07  2.17e-09  1.90e-07  9.87e-01  
  7  +2.0000e-04  +2.0000e-04  1.40e-09  4.86e-10  2.38e-09  2.17e-11  1.90e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 159µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:42 PM: Optimal value: 2.000e-04
(CVXPY) Sep 20 07:55:42 PM: Compilation took 4.520e-03 seconds
(CVXPY) Sep 20 07:55:42 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:42 PM: Your problem has 44 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:42 PM: Finished problem compilation (took 4.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 49
  nnz(P)        = 0
  nnz(A)        = 148
  cones (total) = 1
    : Nonnegative = 1,  numel = 49

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +2.6797e-01  +6.5126e+00  6.24e+00  8.28e-01  3.01e+00  1.00e+00  1.37e+00   ------   
  1  +5.4000e-02  +7.9751e-01  7.44e-01  3.00e-01  1.07e+00  3.63e-03  5.31e-01  8.02e-01  
  2  +1.8749e-02  +1.7974e-01  1.61e-01  7.21e-02  3.17e-01  5.98e-03  1.87e-01  7.38e-01  
  3  -1.2147e-03  +2.5600e-02  2.68e-02  1.05e-02  5.26e-02  1.37e-03  3.36e-02  9.43e-01  
  4  +1.7075e-04  +5.9659e-04  4.26e-04  1.71e-04  8.57e-04  1.97e-05  5.61e-04  9.83e-01  
  5  +1.7439e-04  +2.4366e-04  6.93e-05  3.42e-05  1.48e-04  2.15e-06  1.12e-04  8.23e-01  
  6  +2.0043e-04  +2.0607e-04  5.64e-06  2.82e-06  1.20e-05  2.30e-07  9.24e-06  9.59e-01  
  7  +2.0000e-04  +2.0006e-04  5.80e-08  2.91e-08  1.23e-07  2.37e-09  9.55e-08  9.90e-01  
  8  +2.0000e-04  +2.0000e-04  5.80e-10  2.91e-10  1.24e-09  2.38e-11  9.55e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 207.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:42 PM: Optimal value: 2.000e-04
(CVXPY) Sep 20 07:55:42 PM: Compilation took 4.001e-03 seconds
(CVXPY) Sep 20 07:55:42 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:42 PM: Your problem has 45 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:42 PM: Finished problem compilation (took 4.568e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 45
  constraints   = 50
  nnz(P)        = 0
  nnz(A)        = 151
  cones (total) = 1
    : Nonnegative = 1,  numel = 50

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +2.6096e-01  +6.5415e+00  6.28e+00  8.29e-01  3.01e+00  1.00e+00  1.36e+00   ------   
  1  +3.7796e-02  +7.9962e-01  7.62e-01  3.05e-01  1.08e+00  3.67e-03  5.34e-01  7.95e-01  
  2  +1.3159e-02  +2.0845e-01  1.95e-01  8.27e-02  3.84e-01  8.84e-03  2.16e-01  7.42e-01  
  3  +1.6901e-03  +1.7674e-02  1.60e-02  6.79e-03  3.34e-02  1.00e-03  2.11e-02  9.26e-01  
  4  +2.2055e-04  +5.7251e-04  3.52e-04  1.54e-04  7.50e-04  1.82e-05  4.85e-04  9.77e-01  
  5  +1.6508e-04  +2.0776e-04  4.27e-05  2.41e-05  9.57e-05  8.03e-07  7.73e-05  9.15e-01  
  6  +1.6774e-04  +1.7366e-04  5.92e-06  3.25e-06  1.30e-05  1.25e-07  1.16e-05  8.58e-01  
  7  +1.6669e-04  +1.6678e-04  8.99e-08  4.85e-08  1.95e-07  1.86e-09  1.80e-07  9.85e-01  
  8  +1.6667e-04  +1.6667e-04  8.99e-10  4.85e-10  1.95e-09  1.86e-11  1.80e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 217.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:42 PM: Optimal value: 1.667e-04
(CVXPY) Sep 20 07:55:42 PM: Compilation took 4.568e-03 seconds
(CVXPY) Sep 20 07:55:42 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 1 AND x4 = 0) <-- (term's our objective: 0.4)
 OR (x1 = 0 AND x7 = 1) <-- (term's our objective: 0.8)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.3665063381195068
Best over terms:
  Our final objective: 0.8
    Its accruacy: 0.9
    Its hamming distance: 9
  Shortest hamming distance: 9
    Its our objective: 0.8
  Highest accruacy: 0.9
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

