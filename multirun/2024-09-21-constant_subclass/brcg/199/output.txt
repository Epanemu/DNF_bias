Command:
python test_script.py -s constant_subclass -d 5 -n 50000 --seed 21 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.03896
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 5.

Computed total variation: 0.04296
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:02 PM: Your problem has 25011 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:02 PM: Finished problem compilation (took 1.090e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25011
  constraints   = 50011
  nnz(P)        = 0
  nnz(A)        = 200011
  cones (total) = 1
    : Nonnegative = 1,  numel = 50011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.08e+02  1.00e+00  1.00e+00   ------   
  1  +5.9962e-01  +5.0087e+03  5.01e+03  3.68e-01  1.22e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4642e-01  +7.1491e+02  7.14e+02  1.49e-01  6.20e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1139e-01  +1.7344e+02  1.73e+02  1.36e-01  5.62e+01  2.41e-05  2.33e-01  8.02e-02  
  4  +5.0054e-01  +7.3237e+00  6.82e+00  2.02e-02  8.18e+00  2.53e-06  1.88e-01  5.15e-01  
  5  +5.0000e-01  +9.0426e-01  4.04e-01  1.23e-03  5.11e-01  2.30e-05  1.54e-01  8.74e-01  
  6  +5.0000e-01  +5.5195e-01  5.20e-02  1.55e-04  6.48e-02  3.41e-06  1.94e-02  8.76e-01  
  7  +5.0000e-01  +5.3920e-01  3.92e-02  1.17e-04  4.89e-02  5.22e-06  6.31e-03  7.31e-01  
  8  +4.9984e-01  +5.4986e-01  5.00e-02  7.98e-05  3.34e-02  1.08e-04  3.27e-04  9.69e-01  
  9  +4.9824e-01  +5.4662e-01  4.84e-02  9.30e-06  3.89e-03  1.10e-03  2.99e-05  9.09e-01  
 10  +4.9319e-01  +5.3018e-01  3.70e-02  1.88e-06  7.86e-04  3.29e-03  5.95e-06  8.23e-01  
 11  +4.9292e-01  +5.0970e-01  1.68e-02  9.02e-07  3.77e-04  4.39e-04  3.01e-06  6.84e-01  
 12  +4.8953e-01  +4.9263e-01  3.10e-03  1.33e-07  5.55e-05  6.30e-05  4.99e-07  8.52e-01  
 13  +4.8849e-01  +4.8856e-01  7.21e-05  2.85e-09  1.19e-06  1.10e-06  1.15e-08  9.79e-01  
 14  +4.8846e-01  +4.8846e-01  7.22e-07  2.85e-11  1.19e-08  1.10e-08  1.15e-10  9.90e-01  
 15  +4.8846e-01  +4.8846e-01  7.35e-09  2.88e-13  1.20e-10  1.67e-10  1.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 334.2009ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:02 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:02 PM: Optimal value: 4.885e-01
(CVXPY) Sep 20 07:33:02 PM: Compilation took 1.090e-01 seconds
(CVXPY) Sep 20 07:33:02 PM: Solver (including time spent in interface) took 3.683e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4885
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:03 PM: Your problem has 25021 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:03 PM: Finished problem compilation (took 1.298e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25021
  constraints   = 50021
  nnz(P)        = 0
  nnz(A)        = 227090
  cones (total) = 1
    : Nonnegative = 1,  numel = 50021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.12e+02  1.00e+00  1.00e+00   ------   
  1  +5.9961e-01  +5.0090e+03  5.01e+03  3.68e-01  1.24e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4640e-01  +7.1470e+02  7.14e+02  1.49e-01  6.31e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1138e-01  +1.7333e+02  1.73e+02  1.36e-01  5.72e+01  2.41e-05  2.33e-01  8.05e-02  
  4  +5.0053e-01  +7.2087e+00  6.71e+00  1.98e-02  8.19e+00  2.55e-06  1.87e-01  5.25e-01  
  5  +5.0003e-01  +1.3296e+00  8.30e-01  2.52e-03  1.06e+00  2.27e-05  1.67e-01  5.00e-01  
  6  +5.0001e-01  +8.2404e-01  3.24e-01  9.67e-04  4.10e-01  7.49e-06  8.27e-02  9.90e-01  
  7  +5.0000e-01  +5.9738e-01  9.74e-02  2.90e-04  1.23e-01  2.30e-06  2.65e-02  8.18e-01  
  8  +5.0000e-01  +5.6482e-01  6.48e-02  1.93e-04  8.20e-02  2.30e-06  9.88e-03  7.33e-01  
  9  +4.9998e-01  +5.6097e-01  6.10e-02  1.62e-04  6.90e-02  1.31e-05  1.23e-03  9.23e-01  
 10  +4.9897e-01  +5.5851e-01  5.95e-02  7.49e-06  3.19e-03  6.63e-04  2.27e-05  9.82e-01  
 11  +4.9739e-01  +5.5110e-01  5.37e-02  3.25e-06  1.38e-03  1.22e-03  9.74e-06  6.03e-01  
 12  +4.9666e-01  +5.4448e-01  4.78e-02  2.74e-06  1.17e-03  9.62e-04  8.12e-06  2.70e-01  
 13  +4.9691e-01  +5.4239e-01  4.55e-02  2.67e-06  1.14e-03  6.13e-04  7.91e-06  2.75e-01  
 14  +4.9702e-01  +5.4081e-01  4.38e-02  2.51e-06  1.07e-03  4.12e-04  7.37e-06  3.20e-01  
 15  +4.9663e-01  +5.3837e-01  4.17e-02  2.48e-06  1.06e-03  3.10e-04  7.30e-06  1.50e-01  
 16  +4.9539e-01  +5.3011e-01  3.47e-02  1.82e-06  7.75e-04  1.09e-04  5.25e-06  6.76e-01  
 17  +4.9551e-01  +5.3072e-01  3.52e-02  1.79e-06  7.61e-04  7.58e-05  5.18e-06  2.84e-01  
 18  +4.9404e-01  +5.2537e-01  3.13e-02  1.33e-06  5.66e-04  7.43e-05  3.84e-06  2.82e-01  
 19  +4.9281e-01  +5.2184e-01  2.90e-02  1.29e-06  5.51e-04  6.13e-05  3.84e-06  2.53e-02  
 20  +4.8720e-01  +5.0015e-01  1.30e-02  4.42e-07  1.88e-04  2.25e-05  1.29e-06  7.90e-01  
 21  +4.8672e-01  +4.9890e-01  1.22e-02  4.06e-07  1.73e-04  1.96e-05  1.18e-06  1.51e-01  
 22  +4.8658e-01  +4.9860e-01  1.20e-02  3.99e-07  1.70e-04  1.59e-05  1.17e-06  1.63e-01  
 23  +4.8657e-01  +4.9882e-01  1.22e-02  4.00e-07  1.70e-04  1.50e-05  1.16e-06  8.98e-02  
 24  +4.8249e-01  +4.8624e-01  3.75e-03  1.14e-07  4.83e-05  3.55e-06  3.30e-07  7.61e-01  
 25  +4.8086e-01  +4.8138e-01  5.16e-04  1.50e-08  6.38e-06  9.37e-08  4.36e-08  9.69e-01  
 26  +4.8062e-01  +4.8063e-01  6.18e-06  1.79e-10  7.62e-08  1.13e-09  5.22e-10  9.88e-01  
 27  +4.8062e-01  +4.8062e-01  6.18e-08  1.79e-12  7.62e-10  1.13e-11  5.22e-12  9.90e-01  
 28  +4.8062e-01  +4.8062e-01  6.19e-10  1.81e-14  7.64e-12  1.26e-13  5.81e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 743.2984ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:03 PM: Optimal value: 4.806e-01
(CVXPY) Sep 20 07:33:03 PM: Compilation took 1.298e-01 seconds
(CVXPY) Sep 20 07:33:03 PM: Solver (including time spent in interface) took 7.808e-01 seconds
Iteration: 2, Objective: 0.4806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:04 PM: Your problem has 25022 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:04 PM: Finished problem compilation (took 1.223e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25022
  constraints   = 50022
  nnz(P)        = 0
  nnz(A)        = 228681
  cones (total) = 1
    : Nonnegative = 1,  numel = 50022

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.12e+02  1.00e+00  1.00e+00   ------   
  1  +5.9960e-01  +5.0092e+03  5.01e+03  3.68e-01  1.24e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4639e-01  +7.1462e+02  7.14e+02  1.49e-01  6.32e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1137e-01  +1.7331e+02  1.73e+02  1.36e-01  5.72e+01  2.41e-05  2.33e-01  8.05e-02  
  4  +5.0053e-01  +7.2132e+00  6.71e+00  1.98e-02  8.20e+00  2.55e-06  1.87e-01  5.25e-01  
  5  +5.0003e-01  +1.2910e+00  7.91e-01  2.40e-03  1.02e+00  2.28e-05  1.66e-01  5.25e-01  
  6  +5.0002e-01  +8.6816e-01  3.68e-01  1.10e-03  4.66e-01  8.39e-06  9.03e-02  9.90e-01  
  7  +5.0001e-01  +6.2872e-01  1.29e-01  3.84e-04  1.63e-01  3.40e-06  3.56e-02  6.16e-01  
  8  +5.0000e-01  +5.7188e-01  7.19e-02  2.14e-04  9.11e-02  2.55e-06  1.41e-02  6.72e-01  
  9  +5.0000e-01  +5.6538e-01  6.54e-02  1.92e-04  8.18e-02  6.30e-06  3.62e-03  8.22e-01  
 10  +4.9946e-01  +5.5840e-01  5.89e-02  1.71e-05  7.31e-03  3.47e-04  5.31e-05  9.89e-01  
 11  +4.9690e-01  +5.5059e-01  5.37e-02  3.01e-06  1.28e-03  1.72e-03  9.05e-06  8.35e-01  
 12  +4.9701e-01  +5.4826e-01  5.13e-02  2.74e-06  1.17e-03  1.28e-03  8.08e-06  3.17e-01  
 13  +4.9687e-01  +5.4321e-01  4.63e-02  2.52e-06  1.07e-03  6.98e-04  7.39e-06  3.76e-01  
 14  +4.9512e-01  +5.3412e-01  3.90e-02  1.71e-06  7.30e-04  5.65e-04  4.96e-06  4.58e-01  
 15  +4.9441e-01  +5.3076e-01  3.63e-02  1.68e-06  7.18e-04  4.70e-04  4.96e-06  3.18e-02  
 16  +4.9439e-01  +5.3080e-01  3.64e-02  1.63e-06  6.96e-04  4.37e-04  4.78e-06  1.16e-01  
 17  +4.9386e-01  +5.2817e-01  3.43e-02  1.58e-06  6.74e-04  2.24e-04  4.68e-06  3.50e-01  
 18  +4.8897e-01  +5.0931e-01  2.03e-02  6.96e-07  2.97e-04  7.30e-05  2.03e-06  8.29e-01  
 19  +4.8526e-01  +4.9694e-01  1.17e-02  3.77e-07  1.60e-04  3.37e-05  1.11e-06  5.33e-01  
 20  +4.8512e-01  +4.9649e-01  1.14e-02  3.70e-07  1.58e-04  3.09e-05  1.11e-06  2.89e-02  
 21  +4.8428e-01  +4.9367e-01  9.39e-03  3.01e-07  1.28e-04  2.40e-05  9.06e-07  2.28e-01  
 22  +4.8202e-01  +4.8618e-01  4.17e-03  1.29e-07  5.52e-05  8.88e-06  3.92e-07  6.34e-01  
 23  +4.8195e-01  +4.8619e-01  4.24e-03  1.30e-07  5.52e-05  8.69e-06  3.87e-07  7.64e-02  
 24  +4.8007e-01  +4.8022e-01  1.45e-04  4.36e-09  1.86e-06  8.79e-08  1.31e-08  9.86e-01  
 25  +4.8000e-01  +4.8000e-01  1.46e-06  4.36e-11  1.86e-08  8.78e-10  1.32e-10  9.90e-01  
 26  +4.8000e-01  +4.8000e-01  1.46e-08  4.36e-13  1.86e-10  8.78e-12  1.32e-12  9.90e-01  
 27  +4.8000e-01  +4.8000e-01  1.46e-10  4.33e-15  1.86e-12  9.40e-14  1.41e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 678.1684ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:04 PM: Optimal value: 4.800e-01
(CVXPY) Sep 20 07:33:04 PM: Compilation took 1.223e-01 seconds
(CVXPY) Sep 20 07:33:04 PM: Solver (including time spent in interface) took 7.142e-01 seconds
Iteration: 3, Objective: 0.4800
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:05 PM: Your problem has 25023 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:05 PM: Finished problem compilation (took 1.222e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25023
  constraints   = 50023
  nnz(P)        = 0
  nnz(A)        = 229506
  cones (total) = 1
    : Nonnegative = 1,  numel = 50023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.12e+02  1.00e+00  1.00e+00   ------   
  1  +5.9960e-01  +5.0093e+03  5.01e+03  3.68e-01  1.24e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4638e-01  +7.1458e+02  7.14e+02  1.49e-01  6.32e+01  9.84e-03  2.36e-01  7.77e-01  
  3  +5.1137e-01  +1.7330e+02  1.73e+02  1.36e-01  5.72e+01  2.41e-05  2.33e-01  8.06e-02  
  4  +5.0053e-01  +7.2146e+00  6.71e+00  1.99e-02  8.21e+00  2.55e-06  1.87e-01  5.25e-01  
  5  +5.0003e-01  +1.2587e+00  7.59e-01  2.30e-03  9.75e-01  2.30e-05  1.65e-01  5.47e-01  
  6  +5.0002e-01  +8.5212e-01  3.52e-01  1.05e-03  4.46e-01  7.93e-06  8.70e-02  9.90e-01  
  7  +5.0000e-01  +6.2312e-01  1.23e-01  3.67e-04  1.56e-01  3.27e-06  3.37e-02  6.25e-01  
  8  +5.0000e-01  +5.5748e-01  5.75e-02  1.71e-04  7.28e-02  2.50e-06  9.20e-03  8.35e-01  
  9  +4.9997e-01  +5.9143e-01  9.15e-02  2.13e-04  9.07e-02  2.43e-05  1.20e-03  9.67e-01  
 10  +4.9867e-01  +5.8544e-01  8.68e-02  9.90e-06  4.22e-03  8.55e-04  3.07e-05  9.74e-01  
 11  +4.9705e-01  +5.6877e-01  7.17e-02  4.58e-06  1.95e-03  1.22e-03  1.41e-05  5.97e-01  
 12  +4.9663e-01  +5.5408e-01  5.74e-02  3.71e-06  1.58e-03  6.26e-04  1.12e-05  4.16e-01  
 13  +4.9713e-01  +5.5155e-01  5.44e-02  3.48e-06  1.48e-03  3.98e-04  1.03e-05  3.39e-01  
 14  +4.9686e-01  +5.4845e-01  5.16e-02  3.04e-06  1.30e-03  3.34e-04  8.95e-06  2.66e-01  
 15  +4.9650e-01  +5.4298e-01  4.65e-02  2.46e-06  1.05e-03  1.90e-04  7.14e-06  5.06e-01  
 16  +4.9613e-01  +5.4103e-01  4.49e-02  2.19e-06  9.34e-04  1.73e-04  6.35e-06  1.98e-01  
 17  +4.9611e-01  +5.3867e-01  4.26e-02  2.05e-06  8.74e-04  5.61e-05  5.98e-06  5.67e-01  
 18  +4.9361e-01  +5.2692e-01  3.33e-02  1.45e-06  6.19e-04  5.19e-06  4.26e-06  8.18e-01  
 19  +4.8917e-01  +5.1179e-01  2.26e-02  8.48e-07  3.62e-04  2.43e-06  2.51e-06  5.93e-01  
 20  +4.8226e-01  +4.8852e-01  6.25e-03  1.98e-07  8.45e-05  5.46e-07  5.96e-07  8.00e-01  
 21  +4.8226e-01  +4.8832e-01  6.05e-03  1.95e-07  8.30e-05  5.10e-07  5.97e-07  1.70e-03  
 22  +4.8226e-01  +4.8832e-01  6.06e-03  1.95e-07  8.30e-05  5.09e-07  5.96e-07  5.18e-03  
 23  +4.8223e-01  +4.8840e-01  6.17e-03  1.95e-07  8.30e-05  5.08e-07  5.87e-07  7.66e-02  
 24  +4.8129e-01  +4.8489e-01  3.60e-03  1.11e-07  4.73e-05  5.94e-08  3.38e-07  9.90e-01  
 25  +4.7988e-01  +4.8055e-01  6.70e-04  2.05e-08  8.73e-06  1.10e-08  6.29e-08  8.33e-01  
 26  +4.7956e-01  +4.7957e-01  7.25e-06  2.22e-10  9.44e-08  1.18e-10  6.82e-10  9.89e-01  
 27  +4.7956e-01  +4.7956e-01  7.25e-08  2.22e-12  9.44e-10  1.18e-12  6.82e-12  9.90e-01  
 28  +4.7956e-01  +4.7956e-01  7.26e-10  2.22e-14  9.44e-12  1.19e-14  6.92e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 682.8794ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:05 PM: Optimal value: 4.796e-01
(CVXPY) Sep 20 07:33:05 PM: Compilation took 1.222e-01 seconds
(CVXPY) Sep 20 07:33:05 PM: Solver (including time spent in interface) took 7.166e-01 seconds
Iteration: 4, Objective: 0.4796
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:05 PM: Your problem has 25024 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:06 PM: Finished problem compilation (took 1.234e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25024
  constraints   = 50024
  nnz(P)        = 0
  nnz(A)        = 230309
  cones (total) = 1
    : Nonnegative = 1,  numel = 50024

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.12e+02  1.00e+00  1.00e+00   ------   
  1  +5.9960e-01  +5.0093e+03  5.01e+03  3.68e-01  1.24e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4638e-01  +7.1457e+02  7.14e+02  1.49e-01  6.32e+01  9.84e-03  2.36e-01  7.77e-01  
  3  +5.1137e-01  +1.7330e+02  1.73e+02  1.36e-01  5.72e+01  2.41e-05  2.33e-01  8.06e-02  
  4  +5.0053e-01  +7.2144e+00  6.71e+00  1.99e-02  8.21e+00  2.55e-06  1.87e-01  5.25e-01  
  5  +5.0003e-01  +1.3148e+00  8.15e-01  2.47e-03  1.05e+00  2.28e-05  1.66e-01  5.10e-01  
  6  +5.0001e-01  +7.9160e-01  2.92e-01  8.70e-04  3.70e-01  6.68e-06  7.60e-02  9.90e-01  
  7  +5.0000e-01  +6.0770e-01  1.08e-01  3.21e-04  1.37e-01  2.91e-06  2.90e-02  6.46e-01  
  8  +5.0000e-01  +5.6962e-01  6.96e-02  2.07e-04  8.82e-02  2.85e-06  1.03e-02  7.62e-01  
  9  +4.9998e-01  +5.7176e-01  7.18e-02  1.82e-04  7.75e-02  1.91e-05  1.22e-03  9.34e-01  
 10  +4.9870e-01  +5.6810e-01  6.94e-02  8.35e-06  3.56e-03  8.30e-04  2.59e-05  9.79e-01  
 11  +4.9676e-01  +5.5591e-01  5.92e-02  3.53e-06  1.51e-03  1.39e-03  1.08e-05  6.27e-01  
 12  +4.9690e-01  +5.5025e-01  5.34e-02  3.32e-06  1.42e-03  8.11e-04  9.95e-06  3.24e-01  
 13  +4.9723e-01  +5.4806e-01  5.08e-02  3.07e-06  1.31e-03  4.82e-04  9.06e-06  3.99e-01  
 14  +4.9714e-01  +5.4546e-01  4.83e-02  3.00e-06  1.28e-03  3.07e-04  8.88e-06  2.65e-01  
 15  +4.9678e-01  +5.4317e-01  4.64e-02  2.68e-06  1.14e-03  2.73e-04  7.87e-06  2.13e-01  
 16  +4.9678e-01  +5.4271e-01  4.59e-02  2.67e-06  1.14e-03  2.50e-04  7.85e-06  5.64e-02  
 17  +4.9623e-01  +5.3958e-01  4.34e-02  2.22e-06  9.47e-04  1.87e-04  6.46e-06  3.93e-01  
 18  +4.9586e-01  +5.3829e-01  4.24e-02  2.19e-06  9.32e-04  1.64e-04  6.45e-06  7.07e-02  
 19  +4.9502e-01  +5.3551e-01  4.05e-02  2.14e-06  9.12e-04  1.37e-04  6.43e-06  6.57e-02  
 20  +4.9234e-01  +5.2270e-01  3.04e-02  1.33e-06  5.65e-04  3.51e-05  3.91e-06  7.87e-01  
 21  +4.8556e-01  +5.0013e-01  1.46e-02  4.74e-07  2.02e-04  1.57e-05  1.41e-06  7.35e-01  
 22  +4.8456e-01  +4.9667e-01  1.21e-02  3.87e-07  1.65e-04  1.25e-05  1.15e-06  2.13e-01  
 23  +4.8446e-01  +4.9624e-01  1.18e-02  3.81e-07  1.62e-04  1.13e-05  1.15e-06  4.63e-02  
 24  +4.8375e-01  +4.9305e-01  9.31e-03  2.92e-07  1.24e-04  2.91e-06  8.80e-07  7.70e-01  
 25  +4.8119e-01  +4.8472e-01  3.53e-03  1.09e-07  4.64e-05  9.79e-07  3.31e-07  6.72e-01  
 26  +4.7976e-01  +4.8016e-01  3.99e-04  1.22e-08  5.21e-06  9.75e-09  3.75e-08  9.86e-01  
 27  +4.7956e-01  +4.7957e-01  8.22e-06  2.51e-10  1.07e-07  1.98e-10  7.73e-10  9.81e-01  
 28  +4.7956e-01  +4.7956e-01  8.22e-08  2.51e-12  1.07e-09  1.98e-12  7.73e-12  9.90e-01  
 29  +4.7956e-01  +4.7956e-01  8.24e-10  2.51e-14  1.07e-11  2.20e-14  8.55e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 726.3146ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:06 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:06 PM: Optimal value: 4.796e-01
(CVXPY) Sep 20 07:33:06 PM: Compilation took 1.234e-01 seconds
(CVXPY) Sep 20 07:33:06 PM: Solver (including time spent in interface) took 7.621e-01 seconds
FULL MODEL:
  Accruacy: 0.52074
  Our objective: 0.04148000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.03896)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.00108)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1)            <-- (term's our objective: 0.00144)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.282958030700684
Best over terms:
  Our final objective: 0.03896000000000004
    Its accruacy: 0.51948
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.03896000000000004
  Highest accruacy: 0.51948
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

