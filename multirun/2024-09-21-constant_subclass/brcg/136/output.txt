Command:
python test_script.py -s constant_subclass -d 4 -n 500 --seed 56 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.092
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 4.

Computed total variation: 0.16400000000000003
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:57 PM: Your problem has 259 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:57 PM: Finished problem compilation (took 6.017e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 259
  constraints   = 509
  nnz(P)        = 0
  nnz(A)        = 1759
  cones (total) = 1
    : Nonnegative = 1,  numel = 509

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9944e-01  +2.5061e+02  2.50e+02  9.32e-01  1.85e+01  1.00e+00  1.01e+00   ------   
  1  +6.0739e-01  +4.8847e+01  4.82e+01  3.19e-01  1.01e+01  4.10e-03  4.76e-01  6.67e-01  
  2  +5.4799e-01  +7.6964e+00  7.15e+00  1.13e-01  4.30e+00  8.46e-03  2.18e-01  7.53e-01  
  3  +5.0121e-01  +1.2452e+00  7.44e-01  2.22e-02  8.15e-01  9.64e-04  1.97e-01  4.35e-01  
  4  +5.0039e-01  +6.6462e-01  1.64e-01  4.96e-03  1.87e-01  1.90e-04  5.38e-02  7.59e-01  
  5  +4.9861e-01  +6.5410e-01  1.55e-01  2.75e-03  1.05e-01  5.21e-04  1.10e-02  9.90e-01  
  6  +4.9103e-01  +6.1538e-01  1.24e-01  7.02e-04  2.71e-02  1.50e-03  2.48e-03  7.76e-01  
  7  +4.7827e-01  +5.3084e-01  5.26e-02  2.33e-04  9.00e-03  3.95e-04  8.96e-04  7.46e-01  
  8  +4.6762e-01  +4.7849e-01  1.09e-02  4.56e-05  1.76e-03  3.78e-06  1.95e-04  9.15e-01  
  9  +4.6416e-01  +4.6433e-01  1.67e-04  6.88e-07  2.65e-05  6.36e-08  3.07e-06  9.90e-01  
 10  +4.6410e-01  +4.6410e-01  1.67e-06  6.87e-09  2.65e-07  6.36e-10  3.08e-08  9.90e-01  
 11  +4.6410e-01  +4.6410e-01  1.67e-08  6.87e-11  2.65e-09  6.36e-12  3.08e-10  9.90e-01  
 12  +4.6410e-01  +4.6410e-01  1.67e-10  6.87e-13  2.65e-11  6.36e-14  3.08e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6496ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:57 PM: Optimal value: 4.641e-01
(CVXPY) Sep 20 07:28:57 PM: Compilation took 6.017e-03 seconds
(CVXPY) Sep 20 07:28:57 PM: Solver (including time spent in interface) took 3.000e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4641
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:57 PM: Your problem has 268 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:57 PM: Finished problem compilation (took 4.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 268
  constraints   = 518
  nnz(P)        = 0
  nnz(A)        = 2281
  cones (total) = 1
    : Nonnegative = 1,  numel = 518

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9890e-01  +2.5105e+02  2.51e+02  9.33e-01  1.99e+01  1.00e+00  1.02e+00   ------   
  1  +6.0372e-01  +4.9406e+01  4.88e+01  3.29e-01  1.09e+01  4.06e-03  4.93e-01  6.61e-01  
  2  +5.4454e-01  +7.3618e+00  6.82e+00  1.10e-01  4.39e+00  9.18e-03  2.16e-01  7.88e-01  
  3  +5.0182e-01  +1.4402e+00  9.38e-01  2.86e-02  1.11e+00  1.55e-03  1.90e-01  4.60e-01  
  4  +4.9970e-01  +7.9767e-01  2.98e-01  9.00e-03  3.58e-01  7.13e-04  5.70e-02  7.52e-01  
  5  +4.8529e-01  +1.0134e+00  5.28e-01  4.12e-03  1.68e-01  4.18e-03  1.44e-02  8.97e-01  
  6  +4.7614e-01  +8.2324e-01  3.47e-01  2.39e-03  9.74e-02  2.50e-03  8.97e-03  4.22e-01  
  7  +4.6991e-01  +6.9397e-01  2.24e-01  1.45e-03  5.88e-02  1.19e-03  5.66e-03  5.23e-01  
  8  +4.5895e-01  +5.2338e-01  6.44e-02  4.03e-04  1.64e-02  1.14e-05  1.72e-03  9.81e-01  
  9  +4.5613e-01  +5.0142e-01  4.53e-02  2.62e-04  1.06e-02  1.25e-05  1.05e-03  4.92e-01  
 10  +4.5095e-01  +4.6884e-01  1.79e-02  6.40e-05  2.61e-03  1.28e-05  2.24e-04  8.11e-01  
 11  +4.4832e-01  +4.5903e-01  1.07e-02  5.59e-05  2.27e-03  3.19e-06  2.21e-04  1.30e-01  
 12  +4.4314e-01  +4.4554e-01  2.40e-03  8.32e-06  3.39e-04  1.78e-06  3.05e-05  8.86e-01  
 13  +4.4211e-01  +4.4214e-01  2.80e-05  9.64e-08  3.92e-06  1.97e-08  3.58e-07  9.89e-01  
 14  +4.4210e-01  +4.4210e-01  2.80e-07  9.63e-10  3.92e-08  1.97e-10  3.58e-09  9.90e-01  
 15  +4.4210e-01  +4.4210e-01  2.80e-09  9.63e-12  3.92e-10  1.97e-12  3.58e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3179ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:57 PM: Optimal value: 4.421e-01
(CVXPY) Sep 20 07:28:57 PM: Compilation took 4.001e-03 seconds
(CVXPY) Sep 20 07:28:57 PM: Solver (including time spent in interface) took 3.170e-03 seconds
Iteration: 2, Objective: 0.4421
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:57 PM: Your problem has 274 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:57 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 274
  constraints   = 524
  nnz(P)        = 0
  nnz(A)        = 2537
  cones (total) = 1
    : Nonnegative = 1,  numel = 524

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9887e-01  +2.5092e+02  2.50e+02  9.35e-01  2.03e+01  1.00e+00  1.03e+00   ------   
  1  +6.0249e-01  +4.9628e+01  4.90e+01  3.35e-01  1.11e+01  4.04e-03  5.03e-01  6.57e-01  
  2  +5.4372e-01  +7.3036e+00  6.76e+00  1.11e-01  4.40e+00  9.54e-03  2.18e-01  7.99e-01  
  3  +5.0111e-01  +1.3516e+00  8.51e-01  2.64e-02  1.03e+00  1.46e-03  1.86e-01  5.44e-01  
  4  +4.9923e-01  +8.9963e-01  4.00e-01  1.20e-02  4.80e-01  9.92e-04  7.00e-02  6.78e-01  
  5  +4.8372e-01  +1.1163e+00  6.33e-01  5.11e-03  2.11e-01  4.38e-03  1.77e-02  9.30e-01  
  6  +4.7002e-01  +7.9584e-01  3.26e-01  2.11e-03  8.70e-02  2.40e-03  7.49e-03  6.27e-01  
  7  +4.6397e-01  +7.3456e-01  2.71e-01  1.51e-03  6.21e-02  1.93e-03  5.26e-03  3.99e-01  
  8  +4.5681e-01  +6.7257e-01  2.16e-01  1.06e-03  4.36e-02  1.46e-03  3.72e-03  3.73e-01  
  9  +4.5609e-01  +6.2584e-01  1.70e-01  8.67e-04  3.57e-02  5.33e-04  3.12e-03  5.38e-01  
 10  +4.3770e-01  +5.1852e-01  8.08e-02  3.61e-04  1.48e-02  2.24e-04  1.40e-03  5.89e-01  
 11  +4.2592e-01  +4.5212e-01  2.62e-02  1.12e-04  4.59e-03  5.86e-05  4.65e-04  7.64e-01  
 12  +4.2152e-01  +4.2982e-01  8.31e-03  3.63e-05  1.49e-03  4.10e-06  1.62e-04  9.28e-01  
 13  +4.1924e-01  +4.2241e-01  3.17e-03  1.31e-05  5.38e-04  2.14e-06  5.84e-05  7.77e-01  
 14  +4.1831e-01  +4.1835e-01  3.45e-05  1.43e-07  5.87e-06  2.27e-08  6.45e-07  9.89e-01  
 15  +4.1830e-01  +4.1830e-01  3.45e-07  1.43e-09  5.87e-08  2.26e-10  6.45e-09  9.90e-01  
 16  +4.1830e-01  +4.1830e-01  3.45e-09  1.43e-11  5.87e-10  2.27e-12  6.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4506ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:57 PM: Optimal value: 4.183e-01
(CVXPY) Sep 20 07:28:57 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:28:57 PM: Solver (including time spent in interface) took 3.285e-03 seconds
Iteration: 3, Objective: 0.4183
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:57 PM: Your problem has 275 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:57 PM: Finished problem compilation (took 4.011e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 275
  constraints   = 525
  nnz(P)        = 0
  nnz(A)        = 2574
  cones (total) = 1
    : Nonnegative = 1,  numel = 525

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9888e-01  +2.5092e+02  2.50e+02  9.35e-01  2.04e+01  1.00e+00  1.04e+00   ------   
  1  +6.0201e-01  +4.9705e+01  4.91e+01  3.37e-01  1.11e+01  4.02e-03  5.07e-01  6.55e-01  
  2  +5.4355e-01  +7.2934e+00  6.75e+00  1.11e-01  4.41e+00  9.63e-03  2.19e-01  8.02e-01  
  3  +5.0094e-01  +1.3254e+00  8.24e-01  2.56e-02  1.01e+00  1.40e-03  1.85e-01  5.64e-01  
  4  +4.9896e-01  +8.7153e-01  3.73e-01  1.11e-02  4.45e-01  9.64e-04  6.41e-02  7.15e-01  
  5  +4.8265e-01  +1.0612e+00  5.79e-01  4.58e-03  1.89e-01  4.24e-03  1.60e-02  9.48e-01  
  6  +4.6764e-01  +7.6029e-01  2.93e-01  1.80e-03  7.41e-02  2.36e-03  6.39e-03  6.52e-01  
  7  +4.6166e-01  +7.2000e-01  2.58e-01  1.29e-03  5.31e-02  2.05e-03  4.45e-03  4.46e-01  
  8  +4.5694e-01  +6.8023e-01  2.23e-01  1.03e-03  4.26e-02  1.67e-03  3.60e-03  2.70e-01  
  9  +4.5336e-01  +6.0323e-01  1.50e-01  7.29e-04  3.00e-02  3.58e-04  2.65e-03  7.09e-01  
 10  +4.3177e-01  +4.8120e-01  4.94e-02  2.18e-04  8.94e-03  8.06e-05  8.72e-04  7.39e-01  
 11  +4.2774e-01  +4.6210e-01  3.44e-02  1.44e-04  5.92e-03  5.55e-05  5.89e-04  4.14e-01  
 12  +4.1999e-01  +4.2483e-01  4.84e-03  2.02e-05  8.27e-04  4.64e-06  8.89e-05  9.89e-01  
 13  +4.1833e-01  +4.1840e-01  7.63e-05  3.17e-07  1.30e-05  6.65e-08  1.43e-06  9.90e-01  
 14  +4.1830e-01  +4.1830e-01  7.63e-07  3.17e-09  1.30e-07  6.65e-10  1.43e-08  9.90e-01  
 15  +4.1830e-01  +4.1830e-01  7.63e-09  3.17e-11  1.30e-09  6.65e-12  1.43e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.9298ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:57 PM: Optimal value: 4.183e-01
(CVXPY) Sep 20 07:28:57 PM: Compilation took 4.011e-03 seconds
(CVXPY) Sep 20 07:28:57 PM: Solver (including time spent in interface) took 4.532e-03 seconds
Iteration: 4, Objective: 0.4183
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:57 PM: Your problem has 277 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:57 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 277
  constraints   = 527
  nnz(P)        = 0
  nnz(A)        = 2628
  cones (total) = 1
    : Nonnegative = 1,  numel = 527

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9889e-01  +2.5092e+02  2.50e+02  9.35e-01  2.04e+01  1.00e+00  1.03e+00   ------   
  1  +6.0041e-01  +4.9996e+01  4.94e+01  3.42e-01  1.13e+01  4.01e-03  5.11e-01  6.52e-01  
  2  +5.4317e-01  +7.2853e+00  6.74e+00  1.11e-01  4.42e+00  9.94e-03  2.20e-01  8.10e-01  
  3  +5.0123e-01  +1.3685e+00  8.67e-01  2.70e-02  1.06e+00  1.39e-03  1.86e-01  5.53e-01  
  4  +4.9904e-01  +8.5153e-01  3.52e-01  1.05e-02  4.22e-01  8.91e-04  5.97e-02  7.34e-01  
  5  +4.8365e-01  +1.0461e+00  5.62e-01  4.43e-03  1.84e-01  3.86e-03  1.54e-02  9.70e-01  
  6  +4.6905e-01  +7.3864e-01  2.70e-01  1.65e-03  6.82e-02  1.61e-03  5.83e-03  7.49e-01  
  7  +4.6205e-01  +6.9920e-01  2.37e-01  1.21e-03  4.99e-02  1.48e-03  4.19e-03  3.61e-01  
  8  +4.5483e-01  +6.2852e-01  1.74e-01  8.46e-04  3.50e-02  7.49e-04  3.03e-03  4.74e-01  
  9  +4.4414e-01  +5.3833e-01  9.42e-02  4.49e-04  1.85e-02  7.25e-06  1.70e-03  9.68e-01  
 10  +4.2685e-01  +4.5402e-01  2.72e-02  1.18e-04  4.85e-03  6.64e-06  4.87e-04  7.71e-01  
 11  +4.2210e-01  +4.3288e-01  1.08e-02  4.72e-05  1.94e-03  5.81e-06  2.08e-04  7.85e-01  
 12  +4.1936e-01  +4.2291e-01  3.54e-03  1.48e-05  6.07e-04  2.42e-06  6.57e-05  7.83e-01  
 13  +4.1832e-01  +4.1837e-01  5.07e-05  2.11e-07  8.67e-06  3.62e-08  9.54e-07  9.89e-01  
 14  +4.1830e-01  +4.1830e-01  5.07e-07  2.11e-09  8.67e-08  3.62e-10  9.54e-09  9.90e-01  
 15  +4.1830e-01  +4.1830e-01  5.07e-09  2.11e-11  8.67e-10  3.62e-12  9.54e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3829ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:57 PM: Optimal value: 4.183e-01
(CVXPY) Sep 20 07:28:57 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:28:57 PM: Solver (including time spent in interface) took 2.122e-03 seconds
FULL MODEL:
  Accruacy: 0.58
  Our objective: 0.15999999999999998

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.092)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0)            <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1)            <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.024)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.8985040187835693
Best over terms:
  Our final objective: 0.092
    Its accruacy: 0.546
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.092
  Highest accruacy: 0.546
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

