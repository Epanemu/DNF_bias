Command:
python test_script.py -s constant_subclass -d 8 -n 50 --seed 21 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 8.

Computed total variation: 0.8400000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:43 PM: Your problem has 42 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:43 PM: Finished problem compilation (took 6.810e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 42
  constraints   = 67
  nnz(P)        = 0
  nnz(A)        = 292
  cones (total) = 1
    : Nonnegative = 1,  numel = 67

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9437e-01  +2.5827e+01  2.53e+01  8.34e-01  6.71e+00  1.00e+00  1.07e+00   ------   
  1  +5.7362e-01  +5.7144e+00  5.14e+00  3.57e-01  3.86e+00  3.78e-03  5.95e-01  6.02e-01  
  2  +4.9910e-01  +1.1426e+00  6.43e-01  8.04e-02  1.06e+00  1.85e-02  2.24e-01  9.90e-01  
  3  +4.6622e-01  +7.0800e-01  2.42e-01  1.97e-02  2.72e-01  1.09e-02  6.61e-02  7.64e-01  
  4  +4.4066e-01  +5.3860e-01  9.79e-02  6.38e-03  8.86e-02  3.88e-03  2.46e-02  6.78e-01  
  5  +4.2583e-01  +4.4937e-01  2.35e-02  1.35e-03  1.88e-02  6.31e-04  6.21e-03  8.24e-01  
  6  +4.2045e-01  +4.2183e-01  1.38e-03  7.57e-05  1.05e-03  1.52e-05  3.76e-04  9.85e-01  
  7  +4.2010e-01  +4.2012e-01  1.40e-05  7.67e-07  1.07e-05  1.54e-07  3.82e-06  9.90e-01  
  8  +4.2010e-01  +4.2010e-01  1.40e-07  7.67e-09  1.07e-07  1.54e-09  3.82e-08  9.90e-01  
  9  +4.2010e-01  +4.2010e-01  1.40e-09  7.67e-11  1.07e-09  1.54e-11  3.82e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 381.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:43 PM: Optimal value: 4.201e-01
(CVXPY) Sep 20 07:44:43 PM: Compilation took 6.810e-03 seconds
(CVXPY) Sep 20 07:44:43 PM: Solver (including time spent in interface) took 9.971e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:43 PM: Your problem has 52 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:43 PM: Finished problem compilation (took 2.938e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 52
  constraints   = 77
  nnz(P)        = 0
  nnz(A)        = 355
  cones (total) = 1
    : Nonnegative = 1,  numel = 77

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8509e-01  +2.6647e+01  2.62e+01  8.45e-01  6.69e+00  1.00e+00  1.10e+00   ------   
  1  +5.2094e-01  +5.8330e+00  5.31e+00  3.65e-01  3.72e+00  3.84e-03  6.07e-01  6.05e-01  
  2  +4.3280e-01  +1.4265e+00  9.94e-01  9.54e-02  1.22e+00  2.02e-02  2.52e-01  8.73e-01  
  3  +3.6545e-01  +6.2553e-01  2.60e-01  1.84e-02  2.43e-01  7.46e-03  6.03e-02  8.22e-01  
  4  +3.3427e-01  +4.8003e-01  1.46e-01  7.30e-03  9.97e-02  4.57e-03  2.60e-02  7.08e-01  
  5  +3.0683e-01  +3.8332e-01  7.65e-02  3.19e-03  4.42e-02  2.25e-03  1.20e-02  6.00e-01  
  6  +2.8268e-01  +2.8905e-01  6.37e-03  2.56e-04  3.53e-03  9.97e-05  1.02e-03  9.36e-01  
  7  +2.8042e-01  +2.8068e-01  2.61e-04  1.05e-05  1.45e-04  3.14e-06  4.28e-05  9.58e-01  
  8  +2.8030e-01  +2.8031e-01  8.29e-06  3.40e-07  4.62e-06  5.01e-08  1.52e-06  9.79e-01  
  9  +2.8030e-01  +2.8030e-01  8.31e-08  3.41e-09  4.63e-08  5.03e-10  1.53e-08  9.90e-01  
 10  +2.8030e-01  +2.8030e-01  8.31e-10  3.41e-11  4.63e-10  5.03e-12  1.53e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 468µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:43 PM: Optimal value: 2.803e-01
(CVXPY) Sep 20 07:44:43 PM: Compilation took 2.938e-03 seconds
(CVXPY) Sep 20 07:44:43 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2803
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:43 PM: Your problem has 62 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:43 PM: Finished problem compilation (took 3.680e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 62
  constraints   = 87
  nnz(P)        = 0
  nnz(A)        = 409
  cones (total) = 1
    : Nonnegative = 1,  numel = 87

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8169e-01  +2.6668e+01  2.62e+01  8.54e-01  6.56e+00  1.00e+00  1.10e+00   ------   
  1  +4.9931e-01  +5.8614e+00  5.36e+00  3.78e-01  3.60e+00  3.87e-03  6.05e-01  6.01e-01  
  2  +4.0069e-01  +1.3482e+00  9.48e-01  8.39e-02  1.08e+00  2.24e-02  2.22e-01  9.32e-01  
  3  +2.8230e-01  +6.9643e-01  4.14e-01  2.03e-02  2.72e-01  1.52e-02  6.53e-02  8.01e-01  
  4  +2.1254e-01  +3.0790e-01  9.54e-02  4.35e-03  5.91e-02  2.45e-03  1.55e-02  8.29e-01  
  5  +1.8757e-01  +2.0828e-01  2.07e-02  9.29e-04  1.26e-02  4.76e-04  3.51e-03  7.94e-01  
  6  +1.8069e-01  +1.8113e-01  4.49e-04  2.03e-05  2.75e-04  6.73e-06  7.86e-05  9.81e-01  
  7  +1.8051e-01  +1.8054e-01  2.41e-05  1.15e-06  1.50e-05  1.92e-07  4.80e-06  9.44e-01  
  8  +1.8050e-01  +1.8050e-01  2.54e-07  1.22e-08  1.58e-07  2.04e-09  5.15e-08  9.89e-01  
  9  +1.8050e-01  +1.8050e-01  2.54e-09  1.22e-10  1.58e-09  2.04e-11  5.15e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 437µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:43 PM: Optimal value: 1.805e-01
(CVXPY) Sep 20 07:44:43 PM: Compilation took 3.680e-03 seconds
(CVXPY) Sep 20 07:44:43 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1805
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:44 PM: Your problem has 72 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:44 PM: Finished problem compilation (took 3.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 72
  constraints   = 97
  nnz(P)        = 0
  nnz(A)        = 454
  cones (total) = 1
    : Nonnegative = 1,  numel = 97

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7532e-01  +2.6581e+01  2.61e+01  8.62e-01  6.40e+00  1.00e+00  1.10e+00   ------   
  1  +4.5776e-01  +5.8861e+00  5.43e+00  3.86e-01  3.40e+00  3.99e-03  5.97e-01  5.98e-01  
  2  +3.3783e-01  +1.4584e+00  1.12e+00  8.96e-02  1.07e+00  2.25e-02  2.31e-01  8.75e-01  
  3  +2.4377e-01  +6.4774e-01  4.04e-01  2.32e-02  2.90e-01  1.02e-02  7.31e-02  7.84e-01  
  4  +1.9172e-01  +3.2492e-01  1.33e-01  7.11e-03  9.16e-02  2.67e-03  2.46e-02  7.75e-01  
  5  +1.6622e-01  +1.8970e-01  2.35e-02  1.22e-03  1.58e-02  3.84e-04  4.53e-03  8.50e-01  
  6  +1.6098e-01  +1.6210e-01  1.11e-03  5.80e-05  7.53e-04  1.07e-05  2.19e-04  9.90e-01  
  7  +1.6066e-01  +1.6090e-01  2.39e-04  1.29e-05  1.63e-04  2.05e-06  5.04e-05  8.12e-01  
  8  +1.6056e-01  +1.6059e-01  2.96e-05  1.62e-06  2.00e-05  2.48e-07  6.61e-06  9.49e-01  
  9  +1.6055e-01  +1.6055e-01  3.07e-07  1.68e-08  2.08e-07  2.51e-09  6.92e-08  9.90e-01  
 10  +1.6055e-01  +1.6055e-01  3.08e-09  1.68e-10  2.08e-09  2.51e-11  6.92e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 543.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:44 PM: Optimal value: 1.606e-01
(CVXPY) Sep 20 07:44:44 PM: Compilation took 3.999e-03 seconds
(CVXPY) Sep 20 07:44:44 PM: Solver (including time spent in interface) took 1.009e-03 seconds
Iteration: 4, Objective: 0.1606
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:44 PM: Your problem has 82 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:44 PM: Finished problem compilation (took 3.622e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 82
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 485
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6982e-01  +2.7054e+01  2.66e+01  8.69e-01  6.20e+00  1.00e+00  1.12e+00   ------   
  1  +3.9302e-01  +6.0074e+00  5.61e+00  3.80e-01  3.18e+00  4.16e-03  5.90e-01  5.98e-01  
  2  +2.3316e-01  +1.3936e+00  1.16e+00  8.09e-02  9.09e-01  2.12e-02  2.15e-01  8.61e-01  
  3  +1.8474e-01  +5.0187e-01  3.17e-01  2.09e-02  2.45e-01  7.86e-03  6.47e-02  7.42e-01  
  4  +1.5257e-01  +3.2219e-01  1.70e-01  1.02e-02  1.26e-01  3.91e-03  3.42e-02  5.81e-01  
  5  +1.2676e-01  +1.5933e-01  3.26e-02  1.88e-03  2.34e-02  6.53e-04  6.88e-03  8.25e-01  
  6  +1.2161e-01  +1.2472e-01  3.11e-03  1.81e-04  2.25e-03  2.59e-05  6.78e-04  9.90e-01  
  7  +1.2083e-01  +1.2131e-01  4.83e-04  2.88e-05  3.52e-04  3.43e-06  1.11e-04  8.39e-01  
  8  +1.2069e-01  +1.2082e-01  1.27e-04  7.80e-06  9.20e-05  9.50e-07  3.19e-05  9.08e-01  
  9  +1.2065e-01  +1.2065e-01  1.93e-06  1.20e-07  1.41e-06  1.20e-08  5.00e-07  9.84e-01  
 10  +1.2065e-01  +1.2065e-01  1.93e-08  1.20e-09  1.41e-08  1.20e-10  5.00e-09  9.90e-01  
 11  +1.2065e-01  +1.2065e-01  1.93e-10  1.20e-11  1.41e-10  1.20e-12  5.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 565.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:44 PM: Optimal value: 1.207e-01
(CVXPY) Sep 20 07:44:44 PM: Compilation took 3.622e-03 seconds
(CVXPY) Sep 20 07:44:44 PM: Solver (including time spent in interface) took 1.222e-03 seconds
Iteration: 5, Objective: 0.1207
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:44 PM: Your problem has 92 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:44 PM: Finished problem compilation (took 4.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 92
  constraints   = 117
  nnz(P)        = 0
  nnz(A)        = 520
  cones (total) = 1
    : Nonnegative = 1,  numel = 117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6086e-01  +2.6971e+01  2.65e+01  8.73e-01  6.04e+00  1.00e+00  1.11e+00   ------   
  1  +3.4410e-01  +6.2096e+00  5.87e+00  3.94e-01  3.15e+00  4.29e-03  5.92e-01  5.77e-01  
  2  +1.8551e-01  +1.6981e+00  1.51e+00  9.82e-02  1.05e+00  2.33e-02  2.54e-01  7.87e-01  
  3  +1.5749e-01  +4.7896e-01  3.21e-01  2.34e-02  2.57e-01  7.76e-03  7.09e-02  7.66e-01  
  4  +1.2545e-01  +2.7969e-01  1.54e-01  1.02e-02  1.18e-01  3.48e-03  3.36e-02  6.57e-01  
  5  +1.0761e-01  +1.4922e-01  4.16e-02  2.66e-03  3.10e-02  8.77e-04  9.48e-03  7.39e-01  
  6  +1.0118e-01  +1.0312e-01  1.93e-03  1.25e-04  1.45e-03  2.25e-05  4.60e-04  9.74e-01  
  7  +1.0077e-01  +1.0105e-01  2.79e-04  1.86e-05  2.08e-04  1.91e-06  7.59e-05  8.95e-01  
  8  +1.0072e-01  +1.0080e-01  7.67e-05  5.23e-06  5.75e-05  5.35e-07  2.20e-05  8.38e-01  
  9  +1.0070e-01  +1.0070e-01  1.22e-06  8.38e-08  9.18e-07  8.06e-09  3.59e-07  9.84e-01  
 10  +1.0070e-01  +1.0070e-01  1.22e-08  8.37e-10  9.18e-09  8.06e-11  3.59e-09  9.90e-01  
 11  +1.0070e-01  +1.0070e-01  1.23e-10  8.38e-12  9.19e-11  8.07e-13  3.60e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 602.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:44 PM: Optimal value: 1.007e-01
(CVXPY) Sep 20 07:44:44 PM: Compilation took 4.002e-03 seconds
(CVXPY) Sep 20 07:44:44 PM: Solver (including time spent in interface) took 9.620e-04 seconds
Iteration: 6, Objective: 0.1007
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:44 PM: Your problem has 93 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:44 PM: Finished problem compilation (took 2.986e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 93
  constraints   = 118
  nnz(P)        = 0
  nnz(A)        = 525
  cones (total) = 1
    : Nonnegative = 1,  numel = 118

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5502e-01  +2.7757e+01  2.73e+01  8.73e-01  6.05e+00  1.00e+00  1.14e+00   ------   
  1  +3.1475e-01  +6.4557e+00  6.14e+00  3.98e-01  3.21e+00  4.31e-03  6.17e-01  5.68e-01  
  2  +1.5042e-01  +1.7297e+00  1.58e+00  1.02e-01  1.08e+00  2.37e-02  2.70e-01  7.80e-01  
  3  +1.3822e-01  +3.4766e-01  2.09e-01  1.59e-02  1.73e-01  6.11e-03  5.12e-02  8.56e-01  
  4  +1.1304e-01  +2.5637e-01  1.43e-01  9.33e-03  1.09e-01  3.87e-03  3.09e-02  5.99e-01  
  5  +9.7825e-02  +1.7339e-01  7.56e-02  4.46e-03  5.48e-02  2.03e-03  1.55e-02  5.45e-01  
  6  +8.5341e-02  +1.0093e-01  1.56e-02  9.25e-04  1.14e-02  8.60e-05  3.35e-03  9.90e-01  
  7  +8.1131e-02  +8.2231e-02  1.10e-03  6.45e-05  7.97e-04  5.15e-06  2.40e-04  9.29e-01  
  8  +8.0914e-02  +8.1318e-02  4.05e-04  2.45e-05  2.97e-04  2.32e-06  9.70e-05  7.34e-01  
  9  +8.0820e-02  +8.0877e-02  5.75e-05  3.54e-06  4.24e-05  4.28e-07  1.43e-05  9.90e-01  
 10  +8.0800e-02  +8.0801e-02  6.63e-07  4.10e-08  4.90e-07  4.76e-09  1.66e-07  9.88e-01  
 11  +8.0800e-02  +8.0800e-02  6.63e-09  4.10e-10  4.90e-09  4.76e-11  1.66e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 586.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:44 PM: Optimal value: 8.080e-02
(CVXPY) Sep 20 07:44:44 PM: Compilation took 2.986e-03 seconds
(CVXPY) Sep 20 07:44:44 PM: Solver (including time spent in interface) took 9.961e-04 seconds
FULL MODEL:
  Accruacy: 0.92
  Our objective: 0.84

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                  <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x6 = 0)                       <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x1 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x6 = 0)                       <-- (term's our objective: 0.16)
 OR (x1 = 0 AND x3 = 1 AND x4 = 0)                                  <-- (term's our objective: 0.16)
 OR (x1 = 1 AND x5 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.16)
 OR (x4 = 0 AND x6 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.16)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.8363893032073975
Best over terms:
  Our final objective: 0.16000000000000003
    Its accruacy: 0.58
    Its hamming distance: 7
  Shortest hamming distance: 4
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.58
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

