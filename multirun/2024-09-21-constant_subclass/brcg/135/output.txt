Command:
python test_script.py -s constant_subclass -d 4 -n 500 --seed 43 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 4.

Computed total variation: 0.16399999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:54 PM: Your problem has 259 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:54 PM: Finished problem compilation (took 7.519e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 259
  constraints   = 509
  nnz(P)        = 0
  nnz(A)        = 1759
  cones (total) = 1
    : Nonnegative = 1,  numel = 509

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9944e-01  +2.5068e+02  2.50e+02  9.32e-01  1.85e+01  1.00e+00  1.01e+00   ------   
  1  +6.0732e-01  +4.8851e+01  4.82e+01  3.19e-01  1.01e+01  4.10e-03  4.76e-01  6.67e-01  
  2  +5.4783e-01  +7.6781e+00  7.13e+00  1.13e-01  4.29e+00  8.46e-03  2.17e-01  7.54e-01  
  3  +5.0129e-01  +1.2938e+00  7.93e-01  2.36e-02  8.65e-01  1.18e-03  1.96e-01  4.32e-01  
  4  +5.0020e-01  +6.7653e-01  1.76e-01  5.30e-03  1.99e-01  2.83e-04  5.00e-02  7.83e-01  
  5  +4.8830e-01  +1.1192e+00  6.31e-01  3.42e-03  1.32e-01  3.70e-03  1.11e-02  9.15e-01  
  6  +4.7317e-01  +6.8633e-01  2.13e-01  8.92e-04  3.44e-02  1.20e-03  3.08e-03  7.57e-01  
  7  +4.6018e-01  +5.5444e-01  9.43e-02  3.81e-04  1.46e-02  4.52e-04  1.43e-03  5.92e-01  
  8  +4.5022e-01  +4.7891e-01  2.87e-02  1.15e-04  4.41e-03  1.06e-04  4.71e-04  7.47e-01  
  9  +4.4493e-01  +4.4744e-01  2.51e-03  1.01e-05  3.87e-04  3.32e-06  4.37e-05  9.90e-01  
 10  +4.4411e-01  +4.4413e-01  2.54e-05  1.02e-07  3.92e-06  3.34e-08  4.47e-07  9.90e-01  
 11  +4.4410e-01  +4.4410e-01  2.54e-07  1.02e-09  3.92e-08  3.34e-10  4.47e-09  9.90e-01  
 12  +4.4410e-01  +4.4410e-01  2.54e-09  1.02e-11  3.92e-10  3.34e-12  4.47e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0715ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:54 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:54 PM: Optimal value: 4.441e-01
(CVXPY) Sep 20 07:28:54 PM: Compilation took 7.519e-03 seconds
(CVXPY) Sep 20 07:28:54 PM: Solver (including time spent in interface) took 1.998e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:54 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:54 PM: Finished problem compilation (took 4.498e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 2343
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9882e-01  +2.5146e+02  2.51e+02  9.33e-01  2.00e+01  1.00e+00  1.02e+00   ------   
  1  +6.0298e-01  +4.9503e+01  4.89e+01  3.30e-01  1.10e+01  4.06e-03  4.92e-01  6.60e-01  
  2  +5.4401e-01  +7.3102e+00  6.77e+00  1.09e-01  4.39e+00  9.25e-03  2.13e-01  7.94e-01  
  3  +5.0133e-01  +1.4084e+00  9.07e-01  2.75e-02  1.08e+00  1.62e-03  1.84e-01  5.07e-01  
  4  +4.9903e-01  +8.0074e-01  3.02e-01  8.81e-03  3.55e-01  8.91e-04  4.89e-02  8.13e-01  
  5  +4.8108e-01  +8.4499e-01  3.64e-01  2.74e-03  1.14e-01  4.73e-03  8.93e-03  8.98e-01  
  6  +4.7983e-01  +8.2026e-01  3.40e-01  2.35e-03  9.75e-02  3.80e-03  7.60e-03  3.00e-01  
  7  +4.7337e-01  +6.8273e-01  2.09e-01  1.43e-03  5.93e-02  2.86e-04  4.74e-03  7.95e-01  
  8  +4.7094e-01  +6.6426e-01  1.93e-01  1.25e-03  5.17e-02  2.54e-04  4.14e-03  2.21e-01  
  9  +4.6651e-01  +6.2790e-01  1.61e-01  8.74e-04  3.61e-02  1.56e-04  2.98e-03  7.36e-01  
 10  +4.6137e-01  +5.8966e-01  1.28e-01  7.26e-04  2.99e-02  9.97e-05  2.52e-03  5.66e-01  
 11  +4.4507e-01  +4.9268e-01  4.76e-02  2.25e-04  9.24e-03  4.01e-05  8.23e-04  6.88e-01  
 12  +4.4074e-01  +4.7500e-01  3.43e-02  1.20e-04  4.95e-03  4.07e-05  4.14e-04  5.64e-01  
 13  +4.4019e-01  +4.7252e-01  3.23e-02  1.19e-04  4.91e-03  3.62e-05  4.13e-04  2.49e-02  
 14  +4.3480e-01  +4.5174e-01  1.69e-02  7.02e-05  2.88e-03  1.12e-05  2.57e-04  6.69e-01  
 15  +4.2919e-01  +4.3222e-01  3.04e-03  1.03e-05  4.25e-04  2.95e-06  3.77e-05  8.69e-01  
 16  +4.2811e-01  +4.2815e-01  3.95e-05  1.34e-07  5.52e-06  3.83e-08  4.93e-07  9.88e-01  
 17  +4.2810e-01  +4.2810e-01  3.95e-07  1.34e-09  5.52e-08  3.83e-10  4.94e-09  9.90e-01  
 18  +4.2810e-01  +4.2810e-01  3.95e-09  1.34e-11  5.52e-10  3.83e-12  4.94e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.3956ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:54 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:54 PM: Optimal value: 4.281e-01
(CVXPY) Sep 20 07:28:54 PM: Compilation took 4.498e-03 seconds
(CVXPY) Sep 20 07:28:54 PM: Solver (including time spent in interface) took 3.517e-03 seconds
Iteration: 2, Objective: 0.4281
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:54 PM: Your problem has 274 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:54 PM: Finished problem compilation (took 4.079e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 274
  constraints   = 524
  nnz(P)        = 0
  nnz(A)        = 2625
  cones (total) = 1
    : Nonnegative = 1,  numel = 524

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9867e-01  +2.5146e+02  2.51e+02  9.34e-01  2.07e+01  1.00e+00  1.02e+00   ------   
  1  +5.9759e-01  +5.0309e+01  4.97e+01  3.45e-01  1.16e+01  3.98e-03  5.11e-01  6.49e-01  
  2  +5.4152e-01  +7.4338e+00  6.89e+00  1.15e-01  4.71e+00  1.01e-02  2.26e-01  8.03e-01  
  3  +5.0279e-01  +1.4791e+00  9.76e-01  3.14e-02  1.27e+00  4.23e-04  1.67e-01  6.46e-01  
  4  +4.9959e-01  +8.3131e-01  3.32e-01  9.93e-03  4.12e-01  2.56e-04  4.67e-02  8.54e-01  
  5  +4.8421e-01  +8.5324e-01  3.69e-01  2.79e-03  1.20e-01  1.21e-03  8.72e-03  8.92e-01  
  6  +4.8535e-01  +8.6841e-01  3.83e-01  2.43e-03  1.04e-01  1.11e-03  7.37e-03  3.98e-01  
  7  +4.7554e-01  +7.8211e-01  3.07e-01  1.63e-03  7.00e-02  8.85e-04  5.14e-03  3.62e-01  
  8  +4.5511e-01  +5.9561e-01  1.40e-01  7.15e-04  3.04e-02  8.43e-06  2.48e-03  8.86e-01  
  9  +4.2909e-01  +4.5845e-01  2.94e-02  1.33e-04  5.64e-03  9.66e-06  5.37e-04  8.57e-01  
 10  +4.2309e-01  +4.3252e-01  9.42e-03  4.16e-05  1.75e-03  3.23e-06  1.85e-04  6.75e-01  
 11  +4.2090e-01  +4.2306e-01  2.17e-03  9.47e-06  4.00e-04  1.76e-06  4.45e-05  9.78e-01  
 12  +4.2021e-01  +4.2025e-01  4.02e-05  1.75e-07  7.40e-06  3.17e-08  8.39e-07  9.81e-01  
 13  +4.2020e-01  +4.2020e-01  4.02e-07  1.75e-09  7.40e-08  3.17e-10  8.39e-09  9.90e-01  
 14  +4.2020e-01  +4.2020e-01  4.02e-09  1.75e-11  7.40e-10  3.17e-12  8.39e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.905ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:54 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:54 PM: Optimal value: 4.202e-01
(CVXPY) Sep 20 07:28:54 PM: Compilation took 4.079e-03 seconds
(CVXPY) Sep 20 07:28:54 PM: Solver (including time spent in interface) took 2.991e-03 seconds
Iteration: 3, Objective: 0.4202
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:54 PM: Your problem has 282 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:54 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 282
  constraints   = 532
  nnz(P)        = 0
  nnz(A)        = 2835
  cones (total) = 1
    : Nonnegative = 1,  numel = 532

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9858e-01  +2.5132e+02  2.51e+02  9.34e-01  2.08e+01  1.00e+00  1.02e+00   ------   
  1  +5.9350e-01  +5.1058e+01  5.05e+01  3.55e-01  1.18e+01  3.96e-03  5.20e-01  6.39e-01  
  2  +5.3972e-01  +7.7118e+00  7.17e+00  1.21e-01  4.93e+00  1.07e-02  2.37e-01  8.00e-01  
  3  +5.0549e-01  +1.6746e+00  1.17e+00  3.88e-02  1.59e+00  8.40e-04  1.47e-01  6.91e-01  
  4  +4.9972e-01  +9.7506e-01  4.75e-01  1.25e-02  5.27e-01  7.72e-04  4.59e-02  8.65e-01  
  5  +4.9521e-01  +9.6547e-01  4.70e-01  7.44e-03  3.19e-01  1.20e-03  2.50e-02  5.07e-01  
  6  +4.8202e-01  +8.3352e-01  3.51e-01  3.00e-03  1.29e-01  1.53e-03  1.03e-02  6.16e-01  
  7  +4.7400e-01  +7.4973e-01  2.76e-01  2.02e-03  8.68e-02  1.03e-03  6.85e-03  4.81e-01  
  8  +4.6968e-01  +7.2835e-01  2.59e-01  1.53e-03  6.59e-02  9.01e-04  5.08e-03  4.43e-01  
  9  +4.5488e-01  +6.1878e-01  1.64e-01  9.52e-04  4.07e-02  8.40e-06  3.46e-03  8.67e-01  
 10  +4.3082e-01  +4.8435e-01  5.35e-02  2.57e-04  1.10e-02  6.36e-06  1.05e-03  7.28e-01  
 11  +4.2068e-01  +4.2982e-01  9.14e-03  4.34e-05  1.84e-03  1.78e-06  2.02e-04  8.32e-01  
 12  +4.1945e-01  +4.2371e-01  4.26e-03  2.00e-05  8.52e-04  2.14e-06  9.78e-05  7.81e-01  
 13  +4.1838e-01  +4.1865e-01  2.68e-04  1.26e-06  5.35e-05  1.73e-07  6.39e-06  9.88e-01  
 14  +4.1830e-01  +4.1830e-01  3.64e-06  1.71e-08  7.27e-07  2.08e-09  8.83e-08  9.87e-01  
 15  +4.1830e-01  +4.1830e-01  3.64e-08  1.71e-10  7.26e-09  2.08e-11  8.83e-10  9.90e-01  
 16  +4.1830e-01  +4.1830e-01  3.64e-10  1.71e-12  7.26e-11  2.08e-13  8.83e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.4874ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:54 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:54 PM: Optimal value: 4.183e-01
(CVXPY) Sep 20 07:28:54 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:28:54 PM: Solver (including time spent in interface) took 4.520e-03 seconds
FULL MODEL:
  Accruacy: 0.58
  Our objective: 0.15999999999999998

IF 
    (x0 = 0 AND x3 = 0) <-- (term's our objective: 0.144)
 OR (x0 = 1 AND x2 = 1) <-- (term's our objective: 0.016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.531222105026245
Best over terms:
  Our final objective: 0.14399999999999996
    Its accruacy: 0.572
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.14399999999999996
  Highest accruacy: 0.572
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

