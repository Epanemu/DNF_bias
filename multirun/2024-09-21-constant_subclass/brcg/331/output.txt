Command:
python test_script.py -s constant_subclass -d 9 -n 100 --seed 56 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 9.

Computed total variation: 0.92
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:07 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:07 PM: Finished problem compilation (took 7.010e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 619
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9784e-01  +5.1011e+01  5.05e+01  8.73e-01  1.04e+01  1.00e+00  1.04e+00   ------   
  1  +5.7606e-01  +1.1254e+01  1.07e+01  3.82e-01  6.28e+00  3.76e-03  5.94e-01  5.88e-01  
  2  +5.1449e-01  +1.7608e+00  1.25e+00  9.82e-02  2.00e+00  1.87e-02  2.53e-01  9.90e-01  
  3  +4.9600e-01  +8.2783e-01  3.32e-01  2.29e-02  4.89e-01  7.69e-03  7.25e-02  7.61e-01  
  4  +4.5658e-01  +7.6412e-01  3.08e-01  8.14e-03  1.79e-01  1.27e-02  2.89e-02  7.03e-01  
  5  +4.2011e-01  +5.3871e-01  1.19e-01  2.75e-03  5.94e-02  2.49e-03  1.19e-02  6.80e-01  
  6  +3.9441e-01  +4.0859e-01  1.42e-02  3.26e-04  6.99e-03  2.18e-05  1.66e-03  9.33e-01  
  7  +3.9015e-01  +3.9031e-01  1.57e-04  3.59e-06  7.67e-05  2.22e-07  1.87e-05  9.89e-01  
  8  +3.9010e-01  +3.9010e-01  1.57e-06  3.58e-08  7.67e-07  2.22e-09  1.87e-07  9.90e-01  
  9  +3.9010e-01  +3.9010e-01  1.57e-08  3.58e-10  7.67e-09  2.22e-11  1.87e-09  9.90e-01  
 10  +3.9010e-01  +3.9010e-01  1.57e-10  3.58e-12  7.67e-11  2.22e-13  1.87e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 640.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:07 PM: Optimal value: 3.901e-01
(CVXPY) Sep 20 07:56:07 PM: Compilation took 7.010e-03 seconds
(CVXPY) Sep 20 07:56:07 PM: Solver (including time spent in interface) took 1.008e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:07 PM: Your problem has 79 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:07 PM: Finished problem compilation (took 3.993e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 79
  constraints   = 129
  nnz(P)        = 0
  nnz(A)        = 702
  cones (total) = 1
    : Nonnegative = 1,  numel = 129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9470e-01  +5.1403e+01  5.09e+01  8.79e-01  1.03e+01  1.00e+00  1.05e+00   ------   
  1  +5.5730e-01  +1.1296e+01  1.07e+01  3.89e-01  6.08e+00  3.78e-03  5.97e-01  5.90e-01  
  2  +4.9468e-01  +1.8878e+00  1.39e+00  9.67e-02  1.98e+00  2.06e-02  2.43e-01  9.90e-01  
  3  +4.4866e-01  +9.0986e-01  4.61e-01  2.01e-02  4.33e-01  1.25e-02  5.92e-02  8.12e-01  
  4  +4.1061e-01  +7.5394e-01  3.43e-01  1.00e-02  2.16e-01  9.22e-03  3.40e-02  5.60e-01  
  5  +3.7265e-01  +5.0614e-01  1.33e-01  3.33e-03  7.36e-02  2.65e-03  1.28e-02  7.12e-01  
  6  +3.5372e-01  +3.9594e-01  4.22e-02  1.09e-03  2.32e-02  2.33e-05  4.70e-03  8.86e-01  
  7  +3.4271e-01  +3.5144e-01  8.73e-03  2.12e-04  4.65e-03  1.40e-05  9.70e-04  8.58e-01  
  8  +3.4038e-01  +3.4066e-01  2.77e-04  6.76e-06  1.47e-04  3.16e-07  3.22e-05  9.67e-01  
  9  +3.4030e-01  +3.4031e-01  8.45e-06  2.09e-07  4.47e-06  1.02e-08  1.05e-06  9.70e-01  
 10  +3.4030e-01  +3.4030e-01  8.47e-08  2.10e-09  4.48e-08  1.02e-10  1.05e-08  9.90e-01  
 11  +3.4030e-01  +3.4030e-01  8.47e-10  2.10e-11  4.48e-10  1.02e-12  1.05e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 790.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:07 PM: Optimal value: 3.403e-01
(CVXPY) Sep 20 07:56:07 PM: Compilation took 3.993e-03 seconds
(CVXPY) Sep 20 07:56:07 PM: Solver (including time spent in interface) took 1.513e-03 seconds
Iteration: 2, Objective: 0.3403
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:07 PM: Your problem has 89 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:07 PM: Finished problem compilation (took 3.701e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 89
  constraints   = 139
  nnz(P)        = 0
  nnz(A)        = 793
  cones (total) = 1
    : Nonnegative = 1,  numel = 139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9401e-01  +5.1489e+01  5.10e+01  8.83e-01  1.02e+01  1.00e+00  1.05e+00   ------   
  1  +5.5130e-01  +1.1277e+01  1.07e+01  3.98e-01  5.91e+00  3.78e-03  5.95e-01  5.92e-01  
  2  +4.8731e-01  +1.9634e+00  1.48e+00  9.53e-02  1.95e+00  2.16e-02  2.35e-01  9.90e-01  
  3  +4.2731e-01  +9.0042e-01  4.73e-01  1.73e-02  3.85e-01  1.46e-02  4.98e-02  8.32e-01  
  4  +3.7881e-01  +6.7014e-01  2.91e-01  7.52e-03  1.74e-01  9.78e-03  2.25e-02  6.46e-01  
  5  +3.5087e-01  +5.7034e-01  2.19e-01  4.45e-03  1.12e-01  7.70e-03  1.38e-02  4.61e-01  
  6  +3.1325e-01  +4.2605e-01  1.13e-01  2.07e-03  5.46e-02  2.85e-03  6.91e-03  6.20e-01  
  7  +2.7939e-01  +2.9935e-01  2.00e-02  3.46e-04  9.21e-03  3.54e-04  1.26e-03  8.40e-01  
  8  +2.7196e-01  +2.7467e-01  2.71e-03  4.68e-05  1.24e-03  3.84e-05  1.77e-04  8.96e-01  
  9  +2.7075e-01  +2.7083e-01  8.80e-05  1.56e-06  4.06e-05  7.32e-07  5.99e-06  9.66e-01  
 10  +2.7070e-01  +2.7070e-01  1.11e-06  2.02e-08  5.16e-07  8.97e-09  7.82e-08  9.88e-01  
 11  +2.7070e-01  +2.7070e-01  1.11e-08  2.03e-10  5.16e-09  8.98e-11  7.83e-10  9.90e-01  
 12  +2.7070e-01  +2.7070e-01  1.12e-10  2.03e-12  5.17e-11  8.99e-13  7.84e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 967.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:07 PM: Optimal value: 2.707e-01
(CVXPY) Sep 20 07:56:07 PM: Compilation took 3.701e-03 seconds
(CVXPY) Sep 20 07:56:07 PM: Solver (including time spent in interface) took 1.036e-03 seconds
Iteration: 3, Objective: 0.2707
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:07 PM: Your problem has 99 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:07 PM: Finished problem compilation (took 3.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 99
  constraints   = 149
  nnz(P)        = 0
  nnz(A)        = 860
  cones (total) = 1
    : Nonnegative = 1,  numel = 149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9186e-01  +5.1599e+01  5.11e+01  8.87e-01  1.00e+01  1.00e+00  1.05e+00   ------   
  1  +5.2748e-01  +1.1322e+01  1.08e+01  4.00e-01  5.71e+00  3.83e-03  5.93e-01  5.92e-01  
  2  +4.5505e-01  +2.1164e+00  1.66e+00  9.08e-02  1.83e+00  2.38e-02  2.23e-01  9.85e-01  
  3  +3.7466e-01  +1.0145e+00  6.40e-01  2.14e-02  4.57e-01  1.53e-02  5.94e-02  7.78e-01  
  4  +3.1617e-01  +7.0815e-01  3.92e-01  1.01e-02  2.23e-01  9.22e-03  2.95e-02  6.02e-01  
  5  +2.5479e-01  +4.0398e-01  1.49e-01  3.30e-03  7.61e-02  3.02e-03  1.05e-02  7.08e-01  
  6  +2.4567e-01  +3.6014e-01  1.14e-01  2.62e-03  5.96e-02  1.71e-03  8.65e-03  3.47e-01  
  7  +2.3980e-01  +3.4603e-01  1.06e-01  2.27e-03  5.33e-02  1.28e-03  7.43e-03  4.96e-01  
  8  +2.0676e-01  +2.2271e-01  1.59e-02  3.23e-04  7.62e-03  1.58e-04  1.13e-03  8.59e-01  
  9  +2.0131e-01  +2.0253e-01  1.22e-03  2.49e-05  5.80e-04  1.07e-05  8.95e-05  9.23e-01  
 10  +2.0088e-01  +2.0105e-01  1.71e-04  3.58e-06  7.90e-05  1.01e-06  1.37e-05  9.22e-01  
 11  +2.0080e-01  +2.0080e-01  3.02e-06  6.37e-08  1.39e-06  1.59e-08  2.49e-07  9.82e-01  
 12  +2.0080e-01  +2.0080e-01  3.02e-08  6.37e-10  1.39e-08  1.59e-10  2.49e-09  9.90e-01  
 13  +2.0080e-01  +2.0080e-01  3.02e-10  6.38e-12  1.39e-10  1.59e-12  2.50e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1656ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:07 PM: Optimal value: 2.008e-01
(CVXPY) Sep 20 07:56:07 PM: Compilation took 3.998e-03 seconds
(CVXPY) Sep 20 07:56:07 PM: Solver (including time spent in interface) took 2.000e-03 seconds
Iteration: 4, Objective: 0.2008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:08 PM: Your problem has 109 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Finished problem compilation (took 5.514e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 109
  constraints   = 159
  nnz(P)        = 0
  nnz(A)        = 900
  cones (total) = 1
    : Nonnegative = 1,  numel = 159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9084e-01  +5.1727e+01  5.12e+01  8.91e-01  9.77e+00  1.00e+00  1.06e+00   ------   
  1  +5.1055e-01  +1.1457e+01  1.09e+01  4.03e-01  5.52e+00  3.88e-03  5.93e-01  5.88e-01  
  2  +4.3247e-01  +2.2812e+00  1.85e+00  9.47e-02  1.84e+00  2.47e-02  2.33e-01  9.55e-01  
  3  +3.5158e-01  +1.1183e+00  7.67e-01  2.66e-02  5.43e-01  1.46e-02  7.34e-02  7.51e-01  
  4  +2.7831e-01  +7.0040e-01  4.22e-01  1.10e-02  2.32e-01  8.21e-03  3.21e-02  6.59e-01  
  5  +2.2480e-01  +4.2604e-01  2.01e-01  4.70e-03  1.03e-01  3.59e-03  1.49e-02  5.87e-01  
  6  +2.0033e-01  +3.2266e-01  1.22e-01  2.67e-03  6.05e-02  1.96e-03  8.94e-03  4.90e-01  
  7  +1.6805e-01  +1.8844e-01  2.04e-02  4.26e-04  9.63e-03  2.66e-04  1.55e-03  8.44e-01  
  8  +1.6121e-01  +1.6172e-01  5.13e-04  1.09e-05  2.43e-04  3.66e-06  4.08e-05  9.77e-01  
  9  +1.6101e-01  +1.6104e-01  2.63e-05  5.88e-07  1.27e-05  1.50e-07  2.32e-06  9.50e-01  
 10  +1.6100e-01  +1.6100e-01  2.66e-07  5.97e-09  1.29e-07  1.51e-09  2.37e-08  9.90e-01  
 11  +1.6100e-01  +1.6100e-01  2.67e-09  5.97e-11  1.29e-09  1.51e-11  2.37e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1735ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:08 PM: Optimal value: 1.610e-01
(CVXPY) Sep 20 07:56:08 PM: Compilation took 5.514e-03 seconds
(CVXPY) Sep 20 07:56:08 PM: Solver (including time spent in interface) took 1.009e-03 seconds
Iteration: 5, Objective: 0.1610
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:08 PM: Your problem has 119 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Finished problem compilation (took 4.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 119
  constraints   = 169
  nnz(P)        = 0
  nnz(A)        = 944
  cones (total) = 1
    : Nonnegative = 1,  numel = 169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8703e-01  +5.2171e+01  5.17e+01  8.94e-01  9.57e+00  1.00e+00  1.07e+00   ------   
  1  +4.7789e-01  +1.1784e+01  1.13e+01  4.10e-01  5.43e+00  3.94e-03  6.05e-01  5.77e-01  
  2  +3.9517e-01  +2.6793e+00  2.28e+00  1.10e-01  2.04e+00  2.65e-02  2.62e-01  8.94e-01  
  3  +3.1423e-01  +1.0276e+00  7.13e-01  2.55e-02  5.00e-01  1.30e-02  7.05e-02  7.70e-01  
  4  +2.4117e-01  +5.6758e-01  3.26e-01  9.30e-03  1.90e-01  4.76e-03  2.77e-02  7.45e-01  
  5  +2.1377e-01  +4.4429e-01  2.31e-01  6.11e-03  1.31e-01  2.71e-03  1.88e-02  5.23e-01  
  6  +1.6903e-01  +2.5460e-01  8.56e-02  1.96e-03  4.25e-02  8.88e-04  6.61e-03  7.33e-01  
  7  +1.4540e-01  +1.5565e-01  1.03e-02  2.29e-04  4.92e-03  4.71e-05  8.23e-04  9.90e-01  
  8  +1.4147e-01  +1.4225e-01  7.86e-04  1.78e-05  3.78e-04  2.69e-06  6.63e-05  9.20e-01  
  9  +1.4117e-01  +1.4131e-01  1.38e-04  3.29e-06  6.74e-05  6.16e-07  1.34e-05  9.63e-01  
 10  +1.4110e-01  +1.4111e-01  3.81e-06  9.15e-08  1.86e-06  1.61e-08  3.79e-07  9.77e-01  
 11  +1.4110e-01  +1.4110e-01  3.82e-08  9.16e-10  1.86e-08  1.61e-10  3.80e-09  9.90e-01  
 12  +1.4110e-01  +1.4110e-01  3.82e-10  9.16e-12  1.86e-10  1.61e-12  3.80e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2541ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:08 PM: Optimal value: 1.411e-01
(CVXPY) Sep 20 07:56:08 PM: Compilation took 4.009e-03 seconds
(CVXPY) Sep 20 07:56:08 PM: Solver (including time spent in interface) took 2.000e-03 seconds
Iteration: 6, Objective: 0.1411
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:08 PM: Your problem has 129 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Finished problem compilation (took 5.217e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 129
  constraints   = 179
  nnz(P)        = 0
  nnz(A)        = 969
  cones (total) = 1
    : Nonnegative = 1,  numel = 179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8590e-01  +5.2118e+01  5.16e+01  8.97e-01  9.34e+00  1.00e+00  1.07e+00   ------   
  1  +4.5729e-01  +1.2080e+01  1.16e+01  4.15e-01  5.32e+00  4.03e-03  6.08e-01  5.64e-01  
  2  +3.7879e-01  +2.7193e+00  2.34e+00  1.16e-01  2.05e+00  2.79e-02  2.73e-01  8.89e-01  
  3  +3.1070e-01  +1.0513e+00  7.41e-01  2.92e-02  5.47e-01  1.30e-02  7.97e-02  7.46e-01  
  4  +2.3199e-01  +5.8400e-01  3.52e-01  1.02e-02  2.02e-01  5.56e-03  3.01e-02  7.63e-01  
  5  +1.9068e-01  +4.0619e-01  2.16e-01  5.47e-03  1.16e-01  2.80e-03  1.69e-02  6.25e-01  
  6  +1.4622e-01  +2.1645e-01  7.02e-02  1.57e-03  3.40e-02  7.82e-04  5.31e-03  7.66e-01  
  7  +1.2456e-01  +1.3152e-01  6.96e-03  1.52e-04  3.26e-03  3.36e-05  5.43e-04  9.90e-01  
  8  +1.2170e-01  +1.2238e-01  6.73e-04  1.51e-05  3.18e-04  2.38e-06  5.63e-05  9.00e-01  
  9  +1.2143e-01  +1.2150e-01  6.34e-05  1.49e-06  3.05e-05  2.32e-07  5.80e-06  9.26e-01  
 10  +1.2140e-01  +1.2140e-01  7.30e-07  1.73e-08  3.53e-07  2.60e-09  6.79e-08  9.88e-01  
 11  +1.2140e-01  +1.2140e-01  7.33e-09  1.74e-10  3.54e-09  2.61e-11  6.81e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1425ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:08 PM: Optimal value: 1.214e-01
(CVXPY) Sep 20 07:56:08 PM: Compilation took 5.217e-03 seconds
(CVXPY) Sep 20 07:56:08 PM: Solver (including time spent in interface) took 2.008e-03 seconds
Iteration: 7, Objective: 0.1214
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:08 PM: Your problem has 139 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Finished problem compilation (took 5.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 139
  constraints   = 189
  nnz(P)        = 0
  nnz(A)        = 1016
  cones (total) = 1
    : Nonnegative = 1,  numel = 189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8456e-01  +5.2196e+01  5.17e+01  9.00e-01  9.16e+00  1.00e+00  1.07e+00   ------   
  1  +4.3963e-01  +1.2235e+01  1.18e+01  4.21e-01  5.21e+00  4.07e-03  6.12e-01  5.58e-01  
  2  +3.6118e-01  +2.9234e+00  2.56e+00  1.25e-01  2.11e+00  2.85e-02  2.88e-01  8.56e-01  
  3  +2.7698e-01  +1.0354e+00  7.58e-01  2.76e-02  5.02e-01  1.48e-02  7.56e-02  7.82e-01  
  4  +2.1931e-01  +5.6672e-01  3.47e-01  1.11e-02  2.06e-01  5.83e-03  3.25e-02  6.66e-01  
  5  +1.8530e-01  +4.1160e-01  2.26e-01  6.36e-03  1.27e-01  2.62e-03  1.97e-02  6.91e-01  
  6  +1.5394e-01  +2.6639e-01  1.12e-01  2.81e-03  5.76e-02  1.29e-03  9.27e-03  5.64e-01  
  7  +1.3063e-01  +1.5617e-01  2.55e-02  6.17e-04  1.26e-02  1.50e-04  2.14e-03  9.47e-01  
  8  +1.2200e-01  +1.2365e-01  1.64e-03  3.95e-05  7.96e-04  7.03e-06  1.43e-04  9.36e-01  
  9  +1.2147e-01  +1.2183e-01  3.60e-04  9.10e-06  1.75e-04  1.35e-06  3.70e-05  7.91e-01  
 10  +1.2131e-01  +1.2134e-01  2.58e-05  6.54e-07  1.22e-05  8.67e-08  2.92e-06  9.46e-01  
 11  +1.2130e-01  +1.2130e-01  2.93e-07  7.40e-09  1.38e-07  9.73e-10  3.34e-08  9.89e-01  
 12  +1.2130e-01  +1.2130e-01  2.93e-09  7.41e-11  1.38e-09  9.75e-12  3.35e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3093ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:08 PM: Optimal value: 1.213e-01
(CVXPY) Sep 20 07:56:08 PM: Compilation took 5.002e-03 seconds
(CVXPY) Sep 20 07:56:08 PM: Solver (including time spent in interface) took 2.006e-03 seconds
Iteration: 8, Objective: 0.1213
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:08 PM: Your problem has 149 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Finished problem compilation (took 4.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 149
  constraints   = 199
  nnz(P)        = 0
  nnz(A)        = 1067
  cones (total) = 1
    : Nonnegative = 1,  numel = 199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8221e-01  +5.2353e+01  5.19e+01  9.02e-01  9.02e+00  1.00e+00  1.08e+00   ------   
  1  +4.1165e-01  +1.2379e+01  1.20e+01  4.23e-01  5.08e+00  4.13e-03  6.12e-01  5.54e-01  
  2  +3.1437e-01  +2.7271e+00  2.41e+00  1.11e-01  1.87e+00  3.02e-02  2.65e-01  9.07e-01  
  3  +2.5576e-01  +1.4249e+00  1.17e+00  4.67e-02  8.18e-01  1.75e-02  1.23e-01  6.01e-01  
  4  +2.0351e-01  +6.5061e-01  4.47e-01  1.57e-02  2.81e-01  6.72e-03  4.50e-02  6.71e-01  
  5  +1.7132e-01  +4.6495e-01  2.94e-01  9.19e-03  1.74e-01  3.96e-03  2.77e-02  5.27e-01  
  6  +1.2829e-01  +2.2655e-01  9.83e-02  2.62e-03  5.22e-02  1.36e-03  8.73e-03  7.17e-01  
  7  +1.1277e-01  +1.4383e-01  3.11e-02  8.24e-04  1.63e-02  1.31e-04  2.85e-03  9.25e-01  
  8  +1.0283e-01  +1.0622e-01  3.39e-03  8.78e-05  1.73e-03  1.39e-05  3.17e-04  9.08e-01  
  9  +1.0177e-01  +1.0262e-01  8.46e-04  2.26e-05  4.33e-04  3.03e-06  8.78e-05  7.46e-01  
 10  +1.0148e-01  +1.0165e-01  1.74e-04  4.73e-06  8.89e-05  6.99e-07  1.99e-05  9.58e-01  
 11  +1.0140e-01  +1.0140e-01  2.35e-06  6.40e-08  1.20e-06  8.09e-09  2.75e-07  9.87e-01  
 12  +1.0140e-01  +1.0140e-01  2.35e-08  6.40e-10  1.19e-08  8.08e-11  2.75e-09  9.90e-01  
 13  +1.0140e-01  +1.0140e-01  2.35e-10  6.40e-12  1.19e-10  8.09e-13  2.75e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5005ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:08 PM: Optimal value: 1.014e-01
(CVXPY) Sep 20 07:56:08 PM: Compilation took 4.006e-03 seconds
(CVXPY) Sep 20 07:56:08 PM: Solver (including time spent in interface) took 1.993e-03 seconds
Iteration: 9, Objective: 0.1014
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:08 PM: Your problem has 159 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Finished problem compilation (took 4.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 159
  constraints   = 209
  nnz(P)        = 0
  nnz(A)        = 1104
  cones (total) = 1
    : Nonnegative = 1,  numel = 209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7984e-01  +5.2783e+01  5.23e+01  9.04e-01  8.86e+00  1.00e+00  1.08e+00   ------   
  1  +3.8249e-01  +1.3023e+01  1.26e+01  4.36e-01  5.09e+00  4.25e-03  6.24e-01  5.31e-01  
  2  +3.0412e-01  +2.4142e+00  2.11e+00  1.07e-01  1.76e+00  3.36e-02  2.53e-01  9.90e-01  
  3  +2.2482e-01  +8.6045e-01  6.36e-01  2.50e-02  4.35e-01  1.42e-02  6.84e-02  7.69e-01  
  4  +1.9767e-01  +6.9947e-01  5.02e-01  1.79e-02  3.20e-01  9.89e-03  5.09e-02  3.93e-01  
  5  +1.6043e-01  +4.6208e-01  3.02e-01  9.61e-03  1.81e-01  5.41e-03  2.91e-02  5.04e-01  
  6  +1.2105e-01  +2.5602e-01  1.35e-01  3.74e-03  7.37e-02  2.42e-03  1.22e-02  6.10e-01  
  7  +1.0388e-01  +1.8069e-01  7.68e-02  2.01e-03  4.02e-02  1.27e-03  6.73e-03  5.17e-01  
  8  +8.3521e-02  +8.8921e-02  5.40e-03  1.38e-04  2.73e-03  4.07e-05  4.88e-04  9.65e-01  
  9  +8.1894e-02  +8.2788e-02  8.94e-04  2.39e-05  4.56e-04  4.70e-06  9.14e-05  8.29e-01  
 10  +8.1550e-02  +8.1660e-02  1.10e-04  3.04e-06  5.57e-05  4.56e-07  1.33e-05  9.23e-01  
 11  +8.1501e-02  +8.1502e-02  1.23e-06  3.40e-08  6.21e-07  4.69e-09  1.53e-07  9.89e-01  
 12  +8.1500e-02  +8.1500e-02  1.23e-08  3.40e-10  6.21e-09  4.69e-11  1.53e-09  9.90e-01  
 13  +8.1500e-02  +8.1500e-02  1.23e-10  3.40e-12  6.21e-11  4.69e-13  1.53e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4446ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:08 PM: Optimal value: 8.150e-02
(CVXPY) Sep 20 07:56:08 PM: Compilation took 4.007e-03 seconds
(CVXPY) Sep 20 07:56:08 PM: Solver (including time spent in interface) took 2.003e-03 seconds
Iteration: 10, Objective: 0.0815
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:08 PM: Your problem has 169 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Finished problem compilation (took 4.991e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 169
  constraints   = 219
  nnz(P)        = 0
  nnz(A)        = 1137
  cones (total) = 1
    : Nonnegative = 1,  numel = 219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7644e-01  +5.2853e+01  5.24e+01  9.06e-01  8.70e+00  1.00e+00  1.08e+00   ------   
  1  +3.3111e-01  +1.3254e+01  1.29e+01  4.31e-01  4.92e+00  4.40e-03  6.15e-01  5.27e-01  
  2  +2.4846e-01  +2.6033e+00  2.35e+00  1.10e-01  1.74e+00  3.41e-02  2.51e-01  9.53e-01  
  3  +1.9126e-01  +1.1199e+00  9.29e-01  3.77e-02  6.31e-01  1.67e-02  9.76e-02  6.48e-01  
  4  +1.4809e-01  +4.4149e-01  2.93e-01  1.14e-02  1.93e-01  4.89e-03  3.26e-02  7.31e-01  
  5  +1.1164e-01  +2.9028e-01  1.79e-01  5.83e-03  1.07e-01  2.64e-03  1.79e-02  5.98e-01  
  6  +8.5804e-02  +1.7406e-01  8.83e-02  2.49e-03  4.85e-02  1.31e-03  8.19e-03  5.88e-01  
  7  +6.6330e-02  +7.9445e-02  1.31e-02  3.60e-04  6.96e-03  5.28e-05  1.25e-03  9.90e-01  
  8  +6.2207e-02  +6.3636e-02  1.43e-03  4.00e-05  7.56e-04  4.14e-06  1.46e-04  8.85e-01  
  9  +6.1685e-02  +6.1876e-02  1.91e-04  5.60e-06  1.01e-04  6.52e-07  2.44e-05  9.80e-01  
 10  +6.1602e-02  +6.1606e-02  3.82e-06  1.12e-07  2.00e-06  1.14e-08  5.07e-07  9.82e-01  
 11  +6.1600e-02  +6.1600e-02  3.82e-08  1.12e-09  2.00e-08  1.14e-10  5.08e-09  9.90e-01  
 12  +6.1600e-02  +6.1600e-02  3.82e-10  1.12e-11  2.00e-10  1.14e-12  5.08e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3958ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:08 PM: Optimal value: 6.160e-02
(CVXPY) Sep 20 07:56:08 PM: Compilation took 4.991e-03 seconds
(CVXPY) Sep 20 07:56:08 PM: Solver (including time spent in interface) took 2.010e-03 seconds
Iteration: 11, Objective: 0.0616
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:08 PM: Your problem has 179 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Finished problem compilation (took 3.995e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 179
  constraints   = 229
  nnz(P)        = 0
  nnz(A)        = 1167
  cones (total) = 1
    : Nonnegative = 1,  numel = 229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7621e-01  +5.2893e+01  5.24e+01  9.08e-01  8.54e+00  1.00e+00  1.08e+00   ------   
  1  +3.1900e-01  +1.3396e+01  1.31e+01  4.34e-01  4.80e+00  4.46e-03  6.14e-01  5.23e-01  
  2  +2.4027e-01  +2.5143e+00  2.27e+00  1.08e-01  1.67e+00  3.44e-02  2.50e-01  9.65e-01  
  3  +1.8409e-01  +9.8805e-01  8.04e-01  3.32e-02  5.45e-01  1.54e-02  8.81e-02  6.91e-01  
  4  +1.4689e-01  +4.8555e-01  3.39e-01  1.33e-02  2.23e-01  6.17e-03  3.81e-02  6.37e-01  
  5  +1.1004e-01  +2.9831e-01  1.88e-01  6.18e-03  1.13e-01  3.00e-03  1.92e-02  6.55e-01  
  6  +8.3912e-02  +1.7212e-01  8.82e-02  2.48e-03  4.84e-02  1.39e-03  8.24e-03  6.32e-01  
  7  +6.6619e-02  +8.0626e-02  1.40e-02  3.87e-04  7.48e-03  5.88e-05  1.35e-03  9.90e-01  
  8  +6.2280e-02  +6.3876e-02  1.60e-03  4.50e-05  8.50e-04  4.77e-06  1.65e-04  8.80e-01  
  9  +6.1721e-02  +6.1993e-02  2.72e-04  8.12e-06  1.44e-04  8.83e-07  3.55e-05  9.37e-01  
 10  +6.1604e-02  +6.1613e-02  9.12e-06  2.74e-07  4.79e-06  2.59e-08  1.27e-06  9.72e-01  
 11  +6.1600e-02  +6.1600e-02  9.13e-08  2.75e-09  4.80e-08  2.59e-10  1.27e-08  9.90e-01  
 12  +6.1600e-02  +6.1600e-02  9.17e-10  2.76e-11  4.82e-10  2.60e-12  1.28e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4607ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:08 PM: Optimal value: 6.160e-02
(CVXPY) Sep 20 07:56:08 PM: Compilation took 3.995e-03 seconds
(CVXPY) Sep 20 07:56:08 PM: Solver (including time spent in interface) took 1.495e-03 seconds
Iteration: 12, Objective: 0.0616
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:08 PM: Your problem has 189 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:08 PM: Finished problem compilation (took 4.020e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 189
  constraints   = 239
  nnz(P)        = 0
  nnz(A)        = 1194
  cones (total) = 1
    : Nonnegative = 1,  numel = 239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7455e-01  +5.2814e+01  5.23e+01  9.10e-01  8.39e+00  1.00e+00  1.07e+00   ------   
  1  +2.9357e-01  +1.3523e+01  1.32e+01  4.35e-01  4.69e+00  4.53e-03  6.11e-01  5.19e-01  
  2  +2.2207e-01  +2.4467e+00  2.22e+00  1.03e-01  1.58e+00  3.52e-02  2.41e-01  9.81e-01  
  3  +1.7026e-01  +9.9020e-01  8.20e-01  3.44e-02  5.53e-01  1.48e-02  9.12e-02  6.72e-01  
  4  +1.3272e-01  +4.5190e-01  3.19e-01  1.28e-02  2.09e-01  5.56e-03  3.70e-02  6.58e-01  
  5  +1.0075e-01  +2.7472e-01  1.74e-01  6.11e-03  1.07e-01  2.40e-03  1.89e-02  6.82e-01  
  6  +8.2953e-02  +1.8074e-01  9.78e-02  3.00e-03  5.63e-02  1.29e-03  9.74e-03  5.83e-01  
  7  +6.6222e-02  +8.1231e-02  1.50e-02  4.52e-04  8.43e-03  5.40e-05  1.54e-03  9.90e-01  
  8  +6.2272e-02  +6.4082e-02  1.81e-03  5.59e-05  1.02e-03  4.64e-06  2.01e-04  8.73e-01  
  9  +6.1733e-02  +6.2103e-02  3.69e-04  1.21e-05  2.08e-04  1.04e-06  5.18e-05  8.71e-01  
 10  +6.1613e-02  +6.1648e-02  3.47e-05  1.15e-06  1.94e-05  9.24e-08  5.17e-06  9.05e-01  
 11  +6.1600e-02  +6.1601e-02  3.67e-07  1.22e-08  2.06e-07  9.73e-10  5.52e-08  9.90e-01  
 12  +6.1600e-02  +6.1600e-02  3.68e-09  1.22e-10  2.06e-09  9.75e-12  5.54e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5711ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:08 PM: Optimal value: 6.160e-02
(CVXPY) Sep 20 07:56:08 PM: Compilation took 4.020e-03 seconds
(CVXPY) Sep 20 07:56:08 PM: Solver (including time spent in interface) took 2.445e-03 seconds
Iteration: 13, Objective: 0.0616
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:09 PM: Your problem has 199 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:09 PM: Finished problem compilation (took 4.523e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 199
  constraints   = 249
  nnz(P)        = 0
  nnz(A)        = 1236
  cones (total) = 1
    : Nonnegative = 1,  numel = 249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7052e-01  +5.3200e+01  5.27e+01  9.11e-01  8.28e+00  1.00e+00  1.08e+00   ------   
  1  +2.6137e-01  +1.4878e+01  1.46e+01  4.65e-01  4.85e+00  4.75e-03  6.43e-01  4.82e-01  
  2  +2.3631e-01  +2.4782e+00  2.24e+00  1.22e-01  1.80e+00  3.92e-02  2.85e-01  9.90e-01  
  3  +1.6603e-01  +8.7984e-01  7.14e-01  3.19e-02  4.94e-01  1.63e-02  8.72e-02  7.49e-01  
  4  +1.2390e-01  +4.3552e-01  3.12e-01  1.26e-02  2.03e-01  6.83e-03  3.82e-02  6.40e-01  
  5  +9.5174e-02  +2.8716e-01  1.92e-01  6.77e-03  1.17e-01  3.10e-03  2.20e-02  6.50e-01  
  6  +7.6234e-02  +1.8733e-01  1.11e-01  3.41e-03  6.30e-02  1.71e-03  1.17e-02  5.58e-01  
  7  +5.8583e-02  +8.1493e-02  2.29e-02  6.85e-04  1.26e-02  8.53e-05  2.48e-03  9.90e-01  
  8  +5.2524e-02  +5.4754e-02  2.23e-03  6.69e-05  1.21e-03  6.35e-06  2.52e-04  9.01e-01  
  9  +5.2016e-02  +5.2753e-02  7.37e-04  2.32e-05  4.06e-04  2.09e-06  9.66e-05  7.11e-01  
 10  +5.1843e-02  +5.2095e-02  2.52e-04  8.08e-06  1.39e-04  8.53e-07  3.53e-05  9.90e-01  
 11  +5.1752e-02  +5.1756e-02  4.18e-06  1.35e-07  2.32e-06  1.24e-08  6.01e-07  9.84e-01  
 12  +5.1750e-02  +5.1750e-02  4.18e-08  1.35e-09  2.31e-08  1.24e-10  6.02e-09  9.90e-01  
 13  +5.1750e-02  +5.1750e-02  4.18e-10  1.35e-11  2.32e-10  1.24e-12  6.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5524ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:09 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:09 PM: Optimal value: 5.175e-02
(CVXPY) Sep 20 07:56:09 PM: Compilation took 4.523e-03 seconds
(CVXPY) Sep 20 07:56:09 PM: Solver (including time spent in interface) took 2.011e-03 seconds
Iteration: 14, Objective: 0.0518
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:09 PM: Your problem has 206 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:09 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 206
  constraints   = 256
  nnz(P)        = 0
  nnz(A)        = 1269
  cones (total) = 1
    : Nonnegative = 1,  numel = 256

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6955e-01  +5.2967e+01  5.25e+01  9.12e-01  8.21e+00  1.00e+00  1.08e+00   ------   
  1  +2.3880e-01  +1.5110e+01  1.49e+01  4.67e-01  4.80e+00  4.86e-03  6.39e-01  4.88e-01  
  2  +2.1936e-01  +2.5221e+00  2.30e+00  1.26e-01  1.82e+00  4.12e-02  2.86e-01  9.90e-01  
  3  +1.6100e-01  +9.5249e-01  7.91e-01  3.77e-02  5.75e-01  1.73e-02  9.96e-02  6.89e-01  
  4  +1.1220e-01  +3.4032e-01  2.28e-01  9.78e-03  1.53e-01  4.71e-03  2.94e-02  7.60e-01  
  5  +9.2188e-02  +2.6464e-01  1.72e-01  6.46e-03  1.09e-01  2.67e-03  2.06e-02  5.40e-01  
  6  +6.4376e-02  +1.1901e-01  5.46e-02  1.83e-03  3.12e-02  5.84e-04  6.32e-03  8.11e-01  
  7  +5.2688e-02  +5.5979e-02  3.29e-03  1.08e-04  1.83e-03  2.60e-05  3.93e-04  9.43e-01  
  8  +5.2055e-02  +5.3046e-02  9.90e-04  3.44e-05  5.61e-04  6.10e-06  1.36e-04  7.11e-01  
  9  +5.1853e-02  +5.2183e-02  3.30e-04  1.17e-05  1.88e-04  1.12e-06  4.97e-05  9.90e-01  
 10  +5.1753e-02  +5.1762e-02  8.70e-06  3.12e-07  4.96e-06  2.73e-08  1.34e-06  9.74e-01  
 11  +5.1750e-02  +5.1750e-02  8.71e-08  3.12e-09  4.97e-08  2.73e-10  1.34e-08  9.90e-01  
 12  +5.1750e-02  +5.1750e-02  8.73e-10  3.13e-11  4.98e-10  2.73e-12  1.35e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5347ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:09 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:09 PM: Optimal value: 5.175e-02
(CVXPY) Sep 20 07:56:09 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:56:09 PM: Solver (including time spent in interface) took 2.000e-03 seconds
Iteration: 15, Objective: 0.0518
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:09 PM: Your problem has 207 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:09 PM: Finished problem compilation (took 4.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 207
  constraints   = 257
  nnz(P)        = 0
  nnz(A)        = 1271
  cones (total) = 1
    : Nonnegative = 1,  numel = 257

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6955e-01  +5.2971e+01  5.25e+01  9.13e-01  8.19e+00  1.00e+00  1.08e+00   ------   
  1  +2.3808e-01  +1.5123e+01  1.49e+01  4.68e-01  4.79e+00  4.86e-03  6.39e-01  4.88e-01  
  2  +2.1943e-01  +2.5221e+00  2.30e+00  1.27e-01  1.82e+00  4.13e-02  2.87e-01  9.90e-01  
  3  +1.6056e-01  +9.4672e-01  7.86e-01  3.75e-02  5.70e-01  1.72e-02  9.90e-02  6.92e-01  
  4  +1.1180e-01  +3.4169e-01  2.30e-01  9.84e-03  1.54e-01  4.78e-03  2.96e-02  7.58e-01  
  5  +9.1009e-02  +2.6298e-01  1.72e-01  6.40e-03  1.08e-01  2.67e-03  2.03e-02  5.52e-01  
  6  +6.3790e-02  +1.1790e-01  5.41e-02  1.81e-03  3.09e-02  5.79e-04  6.21e-03  8.12e-01  
  7  +5.2554e-02  +5.5341e-02  2.79e-03  9.18e-05  1.56e-03  2.04e-05  3.30e-04  9.52e-01  
  8  +5.1954e-02  +5.2640e-02  6.86e-04  2.43e-05  3.92e-04  2.88e-06  9.86e-05  8.49e-01  
  9  +5.1838e-02  +5.2155e-02  3.17e-04  1.14e-05  1.82e-04  1.18e-06  4.76e-05  7.36e-01  
 10  +5.1751e-02  +5.1827e-02  7.60e-05  2.69e-06  4.32e-05  2.62e-07  1.17e-05  8.48e-01  
 11  +5.1726e-02  +5.1727e-02  1.70e-06  6.04e-08  9.66e-07  5.62e-09  2.64e-07  9.79e-01  
 12  +5.1725e-02  +5.1725e-02  1.71e-08  6.04e-10  9.67e-09  5.63e-11  2.65e-09  9.90e-01  
 13  +5.1725e-02  +5.1725e-02  1.71e-10  6.05e-12  9.69e-11  5.64e-13  2.65e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6256ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:09 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:09 PM: Optimal value: 5.173e-02
(CVXPY) Sep 20 07:56:09 PM: Compilation took 4.002e-03 seconds
(CVXPY) Sep 20 07:56:09 PM: Solver (including time spent in interface) took 2.566e-03 seconds
FULL MODEL:
  Accruacy: 0.95
  Our objective: 0.9

IF 
    (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x2 = 0 AND x4 = 0 AND x6 = 1)                       <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1)                       <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0)            <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 0)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0)            <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x2 = 0 AND x6 = 0 AND x8 = 1)                       <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x8 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x3 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.04)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.1)
 OR (x1 = 0 AND x2 = 1 AND x4 = 1 AND x6 = 1 AND x8 = 0)            <-- (term's our objective: 0.06)
 OR (x1 = 0 AND x2 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.1)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0)            <-- (term's our objective: 0.06)
 OR (x1 = 1 AND x2 = 1 AND x4 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.08)
 OR (x1 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.04)
 OR (x2 = 1 AND x3 = 0 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.1)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 1) <-- (term's our objective: 0.04)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.174172401428223
Best over terms:
  Our final objective: 0.12
    Its accruacy: 0.56
    Its hamming distance: 7
  Shortest hamming distance: 7
    Its our objective: 0.12
  Highest accruacy: 0.56
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

