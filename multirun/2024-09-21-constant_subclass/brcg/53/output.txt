Command:
python test_script.py -s constant_subclass -d 2 -n 100 --seed 34 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 2.

Computed total variation: 0.19999999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:25:54 PM: Your problem has 55 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:25:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:25:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:25:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:25:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:25:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:25:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:25:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:25:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:25:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:25:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:25:54 PM: Finished problem compilation (took 4.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:25:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 55
  constraints   = 105
  nnz(P)        = 0
  nnz(A)        = 255
  cones (total) = 1
    : Nonnegative = 1,  numel = 105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9478e-01  +5.0713e+01  5.02e+01  8.48e-01  6.47e+00  1.00e+00  1.03e+00   ------   
  1  +6.3103e-01  +9.2006e+00  8.57e+00  2.34e-01  2.92e+00  4.48e-03  4.02e-01  7.25e-01  
  2  +5.4085e-01  +1.7224e+00  1.18e+00  6.54e-02  8.96e-01  6.28e-03  1.60e-01  7.65e-01  
  3  +4.9818e-01  +7.1803e-01  2.20e-01  1.30e-02  1.78e-01  6.97e-03  4.66e-02  9.90e-01  
  4  +4.7359e-01  +7.0369e-01  2.30e-01  4.53e-03  6.42e-02  1.82e-02  1.52e-02  7.18e-01  
  5  +4.5552e-01  +5.5752e-01  1.02e-01  2.56e-03  3.60e-02  1.33e-04  1.00e-02  5.69e-01  
  6  +4.2460e-01  +4.3633e-01  1.17e-02  2.34e-04  3.28e-03  1.31e-05  1.05e-03  9.07e-01  
  7  +4.2016e-01  +4.2033e-01  1.68e-04  3.34e-06  4.69e-05  2.08e-07  1.56e-05  9.86e-01  
  8  +4.2010e-01  +4.2010e-01  1.68e-06  3.34e-08  4.69e-07  2.08e-09  1.56e-07  9.90e-01  
  9  +4.2010e-01  +4.2010e-01  1.68e-08  3.34e-10  4.69e-09  2.08e-11  1.56e-09  9.90e-01  
 10  +4.2010e-01  +4.2010e-01  1.68e-10  3.34e-12  4.69e-11  2.08e-13  1.56e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 285.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:25:54 PM: Problem status: optimal
(CVXPY) Sep 20 07:25:54 PM: Optimal value: 4.201e-01
(CVXPY) Sep 20 07:25:54 PM: Compilation took 4.003e-03 seconds
(CVXPY) Sep 20 07:25:54 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:25:54 PM: Your problem has 56 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:25:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:25:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:25:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:25:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:25:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:25:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:25:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:25:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:25:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:25:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:25:54 PM: Finished problem compilation (took 2.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:25:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 56
  constraints   = 106
  nnz(P)        = 0
  nnz(A)        = 275
  cones (total) = 1
    : Nonnegative = 1,  numel = 106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9303e-01  +5.1032e+01  5.05e+01  8.50e-01  6.69e+00  1.00e+00  1.05e+00   ------   
  1  +6.2440e-01  +9.3540e+00  8.73e+00  2.41e-01  3.06e+00  4.42e-03  4.19e-01  7.19e-01  
  2  +5.4016e-01  +1.7198e+00  1.18e+00  6.45e-02  9.13e-01  6.65e-03  1.58e-01  7.86e-01  
  3  +4.9962e-01  +7.5189e-01  2.52e-01  1.40e-02  1.98e-01  6.92e-03  4.62e-02  9.27e-01  
  4  +4.7698e-01  +7.0658e-01  2.30e-01  4.77e-03  6.96e-02  1.45e-02  1.54e-02  7.12e-01  
  5  +4.5906e-01  +6.4434e-01  1.85e-01  3.06e-03  4.47e-02  1.18e-02  1.01e-02  4.35e-01  
  6  +4.2686e-01  +4.9658e-01  6.97e-02  1.26e-03  1.82e-02  9.33e-04  4.69e-03  7.43e-01  
  7  +4.0193e-01  +4.0600e-01  4.07e-03  7.02e-05  1.01e-03  9.16e-06  2.83e-04  9.56e-01  
  8  +4.0012e-01  +4.0016e-01  4.12e-05  7.08e-07  1.02e-05  9.12e-08  2.87e-06  9.90e-01  
  9  +4.0010e-01  +4.0010e-01  4.12e-07  7.08e-09  1.02e-07  9.12e-10  2.87e-08  9.90e-01  
 10  +4.0010e-01  +4.0010e-01  4.12e-09  7.08e-11  1.02e-09  9.12e-12  2.87e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 227.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:25:54 PM: Problem status: optimal
(CVXPY) Sep 20 07:25:54 PM: Optimal value: 4.001e-01
(CVXPY) Sep 20 07:25:54 PM: Compilation took 2.508e-03 seconds
(CVXPY) Sep 20 07:25:54 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.6
  Our objective: 0.2

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8283627033233643
Best over terms:
  Our final objective: 0.2
    Its accruacy: 0.6
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.2
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

