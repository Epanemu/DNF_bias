Command:
python test_script.py -s constant_subclass -d 7 -n 10000 --seed 73 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0094
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 7.

Computed total variation: 0.0956
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:02 PM: Your problem has 5015 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:02 PM: Finished problem compilation (took 2.665e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5015
  constraints   = 10015
  nnz(P)        = 0
  nnz(A)        = 50015
  cones (total) = 1
    : Nonnegative = 1,  numel = 10015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.85e-01  1.05e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +1.0510e+03  1.05e+03  4.04e-01  6.56e+01  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3818e-01  +1.3093e+02  1.30e+02  1.57e-01  3.24e+01  1.31e-02  2.55e-01  8.65e-01  
  3  +5.0993e-01  +3.3569e+01  3.31e+01  1.21e-01  2.47e+01  3.44e-05  2.46e-01  1.61e-01  
  4  +5.0062e-01  +2.0652e+00  1.56e+00  1.06e-02  2.20e+00  4.89e-06  1.54e-01  7.42e-01  
  5  +5.0007e-01  +7.3318e-01  2.33e-01  1.56e-03  3.29e-01  1.61e-05  6.78e-02  9.90e-01  
  6  +5.0001e-01  +5.3199e-01  3.20e-02  2.13e-04  4.51e-02  3.36e-06  1.13e-02  8.44e-01  
  7  +5.0000e-01  +5.3531e-01  3.53e-02  2.33e-04  4.92e-02  6.62e-06  4.34e-03  7.72e-01  
  8  +5.0001e-01  +5.3639e-01  3.64e-02  2.38e-04  5.02e-02  4.37e-06  3.50e-03  6.04e-01  
  9  +4.9982e-01  +5.2879e-01  2.90e-02  2.61e-05  5.54e-03  1.17e-04  8.74e-05  9.80e-01  
 10  +4.9921e-01  +5.2698e-01  2.78e-02  7.17e-06  1.52e-03  4.00e-04  2.32e-05  7.50e-01  
 11  +4.9700e-01  +5.1422e-01  1.72e-02  5.72e-06  1.21e-03  4.13e-05  2.00e-05  3.94e-01  
 12  +4.9468e-01  +5.0411e-01  9.43e-03  2.22e-06  4.71e-04  1.09e-06  8.21e-06  9.90e-01  
 13  +4.9286e-01  +4.9702e-01  4.16e-03  8.82e-07  1.87e-04  4.26e-07  3.43e-06  6.24e-01  
 14  +4.9259e-01  +4.9590e-01  3.31e-03  6.86e-07  1.45e-04  1.57e-07  2.68e-06  9.90e-01  
 15  +4.9154e-01  +4.9192e-01  3.85e-04  7.70e-08  1.63e-05  1.77e-08  3.12e-07  8.90e-01  
 16  +4.9140e-01  +4.9142e-01  1.23e-05  2.45e-09  5.19e-07  5.90e-10  9.96e-09  9.89e-01  
 17  +4.9140e-01  +4.9140e-01  1.23e-07  2.45e-11  5.19e-09  5.90e-12  9.96e-11  9.90e-01  
 18  +4.9140e-01  +4.9140e-01  1.23e-09  2.45e-13  5.19e-11  6.09e-14  1.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 77.2748ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:02 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:02 PM: Optimal value: 4.914e-01
(CVXPY) Sep 20 07:41:02 PM: Compilation took 2.665e-02 seconds
(CVXPY) Sep 20 07:41:02 PM: Solver (including time spent in interface) took 8.512e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4914
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:02 PM: Your problem has 5025 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:02 PM: Finished problem compilation (took 2.604e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5025
  constraints   = 10025
  nnz(P)        = 0
  nnz(A)        = 57021
  cones (total) = 1
    : Nonnegative = 1,  numel = 10025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.08e+02  1.00e+00  1.00e+00   ------   
  1  +5.8808e-01  +1.0512e+03  1.05e+03  4.04e-01  6.73e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3809e-01  +1.3075e+02  1.30e+02  1.57e-01  3.32e+01  1.31e-02  2.55e-01  8.65e-01  
  3  +5.0990e-01  +3.3509e+01  3.30e+01  1.21e-01  2.53e+01  3.44e-05  2.46e-01  1.63e-01  
  4  +5.0061e-01  +2.0507e+00  1.55e+00  1.05e-02  2.24e+00  4.92e-06  1.52e-01  7.50e-01  
  5  +5.0009e-01  +7.9415e-01  2.94e-01  1.97e-03  4.26e-01  1.56e-05  7.47e-02  8.82e-01  
  6  +5.0004e-01  +6.4492e-01  1.45e-01  9.69e-04  2.10e-01  9.08e-06  3.77e-02  5.83e-01  
  7  +5.0003e-01  +6.0156e-01  1.02e-01  6.76e-04  1.46e-01  9.33e-06  1.59e-02  6.74e-01  
  8  +4.9981e-01  +6.3713e-01  1.37e-01  2.58e-04  5.61e-02  1.52e-04  9.93e-04  9.90e-01  
  9  +4.9871e-01  +6.2711e-01  1.28e-01  5.17e-05  1.13e-02  7.28e-04  1.84e-04  8.19e-01  
 10  +4.9804e-01  +6.0757e-01  1.10e-01  4.72e-05  1.03e-02  4.89e-04  1.71e-04  1.52e-01  
 11  +4.9821e-01  +5.7547e-01  7.73e-02  3.81e-05  8.29e-03  4.27e-06  1.39e-04  6.93e-01  
 12  +4.9692e-01  +5.6266e-01  6.57e-02  2.78e-05  6.06e-03  3.48e-06  1.03e-04  3.89e-01  
 13  +4.9495e-01  +5.4517e-01  5.02e-02  1.83e-05  3.98e-03  2.12e-06  6.95e-05  5.54e-01  
 14  +4.9390e-01  +5.3697e-01  4.31e-02  1.45e-05  3.15e-03  1.63e-06  5.53e-05  3.95e-01  
 15  +4.9311e-01  +5.3085e-01  3.77e-02  1.24e-05  2.69e-03  1.26e-06  4.72e-05  3.95e-01  
 16  +4.9236e-01  +5.2552e-01  3.32e-02  1.07e-05  2.32e-03  1.06e-06  4.07e-05  2.77e-01  
 17  +4.9231e-01  +5.2490e-01  3.26e-02  1.04e-05  2.26e-03  1.02e-06  3.95e-05  1.88e-01  
 18  +4.8823e-01  +4.9823e-01  1.00e-02  2.77e-06  6.01e-04  3.18e-07  1.05e-05  8.13e-01  
 19  +4.8798e-01  +4.9729e-01  9.31e-03  2.06e-06  4.49e-04  3.84e-07  7.08e-06  4.45e-01  
 20  +4.8791e-01  +4.9699e-01  9.08e-03  2.07e-06  4.49e-04  3.65e-07  7.08e-06  4.71e-03  
 21  +4.8753e-01  +4.9550e-01  7.98e-03  1.82e-06  3.95e-04  3.16e-07  6.14e-06  3.01e-01  
 22  +4.8709e-01  +4.9434e-01  7.25e-03  1.33e-06  2.89e-04  3.61e-07  4.35e-06  6.81e-01  
 23  +4.8677e-01  +4.9305e-01  6.28e-03  1.23e-06  2.67e-04  2.71e-07  4.32e-06  1.08e-01  
 24  +4.8599e-01  +4.8959e-01  3.59e-03  7.27e-07  1.58e-04  1.37e-07  2.56e-06  5.61e-01  
 25  +4.8536e-01  +4.8735e-01  1.99e-03  3.60e-07  7.84e-05  9.36e-08  1.20e-06  6.56e-01  
 26  +4.8470e-01  +4.8508e-01  3.89e-04  6.60e-08  1.44e-05  1.73e-08  2.21e-07  9.19e-01  
 27  +4.8451e-01  +4.8452e-01  1.25e-05  2.05e-09  4.45e-07  6.29e-10  6.83e-09  9.73e-01  
 28  +4.8450e-01  +4.8450e-01  1.25e-07  2.05e-11  4.45e-09  6.30e-12  6.83e-11  9.90e-01  
 29  +4.8450e-01  +4.8450e-01  1.25e-09  2.05e-13  4.47e-11  7.48e-14  8.06e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 141.1319ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:02 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:02 PM: Optimal value: 4.845e-01
(CVXPY) Sep 20 07:41:02 PM: Compilation took 2.604e-02 seconds
(CVXPY) Sep 20 07:41:02 PM: Solver (including time spent in interface) took 1.496e-01 seconds
Iteration: 2, Objective: 0.4845
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:02 PM: Your problem has 5035 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:02 PM: Finished problem compilation (took 2.643e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5035
  constraints   = 10035
  nnz(P)        = 0
  nnz(A)        = 60861
  cones (total) = 1
    : Nonnegative = 1,  numel = 10035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8800e-01  +1.0514e+03  1.05e+03  4.04e-01  6.78e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3799e-01  +1.3055e+02  1.30e+02  1.56e-01  3.34e+01  1.31e-02  2.54e-01  8.66e-01  
  3  +5.0987e-01  +3.3444e+01  3.29e+01  1.21e-01  2.54e+01  3.45e-05  2.46e-01  1.64e-01  
  4  +5.0061e-01  +2.0392e+00  1.54e+00  1.05e-02  2.24e+00  4.94e-06  1.51e-01  7.57e-01  
  5  +5.0009e-01  +7.7878e-01  2.79e-01  1.87e-03  4.07e-01  1.57e-05  6.84e-02  9.24e-01  
  6  +5.0005e-01  +6.5629e-01  1.56e-01  1.05e-03  2.28e-01  1.09e-05  3.23e-02  6.59e-01  
  7  +5.0003e-01  +6.3136e-01  1.31e-01  8.53e-04  1.86e-01  1.71e-05  1.01e-02  8.43e-01  
  8  +4.9942e-01  +6.0189e-01  1.02e-01  8.87e-05  1.95e-02  3.87e-04  2.90e-04  9.78e-01  
  9  +4.9850e-01  +5.9364e-01  9.51e-02  4.57e-05  1.00e-02  6.19e-04  1.47e-04  5.53e-01  
 10  +4.9708e-01  +5.7841e-01  8.13e-02  3.75e-05  8.23e-03  4.58e-04  1.23e-04  2.57e-01  
 11  +4.9735e-01  +5.8054e-01  8.32e-02  3.77e-05  8.27e-03  4.59e-04  1.22e-04  4.02e-02  
 12  +4.9700e-01  +5.7485e-01  7.78e-02  3.67e-05  8.06e-03  2.94e-04  1.19e-04  2.40e-01  
 13  +4.9666e-01  +5.6916e-01  7.25e-02  3.31e-05  7.27e-03  1.77e-04  1.08e-04  3.62e-01  
 14  +4.9632e-01  +5.6732e-01  7.10e-02  3.22e-05  7.06e-03  1.55e-04  1.08e-04  7.55e-02  
 15  +4.9637e-01  +5.6711e-01  7.07e-02  3.03e-05  6.66e-03  9.65e-05  9.99e-05  4.01e-01  
 16  +4.9601e-01  +5.6350e-01  6.75e-02  2.75e-05  6.03e-03  3.91e-05  8.82e-05  5.77e-01  
 17  +4.9461e-01  +5.5438e-01  5.98e-02  2.10e-05  4.61e-03  3.36e-05  6.69e-05  3.33e-01  
 18  +4.9375e-01  +5.4980e-01  5.60e-02  1.65e-05  3.62e-03  2.11e-05  5.16e-05  5.44e-01  
 19  +4.9329e-01  +5.4802e-01  5.47e-02  1.64e-05  3.60e-03  1.89e-05  5.14e-05  6.05e-02  
 20  +4.9162e-01  +5.3987e-01  4.82e-02  1.27e-05  2.78e-03  1.58e-05  3.96e-05  3.26e-01  
 21  +4.9069e-01  +5.3582e-01  4.51e-02  1.19e-05  2.61e-03  7.75e-06  3.80e-05  4.26e-01  
 22  +4.8645e-01  +5.1577e-01  2.93e-02  6.51e-06  1.43e-03  4.47e-06  2.07e-05  5.78e-01  
 23  +4.8535e-01  +5.1005e-01  2.47e-02  5.15e-06  1.13e-03  1.22e-06  1.65e-05  8.99e-01  
 24  +4.8491e-01  +5.0818e-01  2.33e-02  4.82e-06  1.06e-03  1.16e-06  1.55e-05  1.73e-01  
 25  +4.7872e-01  +4.8315e-01  4.42e-03  8.43e-07  1.85e-04  1.91e-07  2.84e-06  9.45e-01  
 26  +4.7709e-01  +4.7731e-01  2.17e-04  3.87e-08  8.48e-06  1.01e-08  1.39e-07  9.66e-01  
 27  +4.7700e-01  +4.7700e-01  2.28e-06  4.05e-10  8.86e-08  1.06e-10  1.46e-09  9.90e-01  
 28  +4.7700e-01  +4.7700e-01  2.28e-08  4.05e-12  8.86e-10  1.06e-12  1.46e-11  9.90e-01  
 29  +4.7700e-01  +4.7700e-01  2.29e-10  4.06e-14  8.88e-12  1.18e-14  1.61e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 127.4049ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:03 PM: Optimal value: 4.770e-01
(CVXPY) Sep 20 07:41:03 PM: Compilation took 2.643e-02 seconds
(CVXPY) Sep 20 07:41:03 PM: Solver (including time spent in interface) took 1.357e-01 seconds
Iteration: 3, Objective: 0.4770
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:03 PM: Your problem has 5045 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:03 PM: Finished problem compilation (took 2.402e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5045
  constraints   = 10045
  nnz(P)        = 0
  nnz(A)        = 63675
  cones (total) = 1
    : Nonnegative = 1,  numel = 10045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8797e-01  +1.0514e+03  1.05e+03  4.04e-01  6.80e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3795e-01  +1.3047e+02  1.30e+02  1.57e-01  3.34e+01  1.32e-02  2.54e-01  8.67e-01  
  3  +5.0986e-01  +3.3416e+01  3.29e+01  1.21e-01  2.55e+01  3.45e-05  2.46e-01  1.65e-01  
  4  +5.0061e-01  +2.0379e+00  1.54e+00  1.05e-02  2.25e+00  4.95e-06  1.50e-01  7.58e-01  
  5  +5.0009e-01  +7.8176e-01  2.82e-01  1.89e-03  4.13e-01  1.57e-05  6.79e-02  9.23e-01  
  6  +5.0003e-01  +6.2835e-01  1.28e-01  8.59e-04  1.87e-01  1.07e-05  2.39e-02  7.75e-01  
  7  +5.0000e-01  +6.6181e-01  1.62e-01  9.02e-04  1.97e-01  3.87e-05  5.35e-03  9.52e-01  
  8  +4.9906e-01  +6.4783e-01  1.49e-01  8.78e-05  1.93e-02  6.11e-04  2.80e-04  9.48e-01  
  9  +4.9801e-01  +6.1782e-01  1.20e-01  5.86e-05  1.29e-02  4.78e-04  1.87e-04  4.78e-01  
 10  +4.9664e-01  +5.9906e-01  1.02e-01  4.44e-05  9.79e-03  3.81e-04  1.42e-04  3.35e-01  
 11  +4.9708e-01  +6.0135e-01  1.04e-01  4.44e-05  9.77e-03  3.66e-04  1.41e-04  7.89e-02  
 12  +4.9717e-01  +5.9752e-01  1.00e-01  4.35e-05  9.57e-03  2.83e-04  1.38e-04  1.71e-01  
 13  +4.9619e-01  +5.8943e-01  9.32e-02  3.46e-05  7.62e-03  2.72e-04  1.09e-04  2.72e-01  
 14  +4.9614e-01  +5.8223e-01  8.61e-02  3.28e-05  7.22e-03  1.33e-04  1.04e-04  3.89e-01  
 15  +4.9580e-01  +5.7590e-01  8.01e-02  2.80e-05  6.16e-03  5.60e-05  8.80e-05  5.91e-01  
 16  +4.9515e-01  +5.7189e-01  7.67e-02  2.63e-05  5.80e-03  4.08e-05  8.29e-05  2.56e-01  
 17  +4.9198e-01  +5.5496e-01  6.30e-02  1.74e-05  3.82e-03  3.28e-05  5.51e-05  4.41e-01  
 18  +4.9037e-01  +5.4805e-01  5.77e-02  1.66e-05  3.65e-03  2.40e-05  5.49e-05  1.02e-01  
 19  +4.8575e-01  +5.2394e-01  3.82e-02  9.72e-06  2.14e-03  1.23e-05  3.22e-05  5.55e-01  
 20  +4.8152e-01  +5.0716e-01  2.56e-02  5.45e-06  1.20e-03  2.99e-06  1.83e-05  8.57e-01  
 21  +4.7483e-01  +4.7867e-01  3.83e-03  7.67e-07  1.69e-04  2.93e-07  2.72e-06  8.85e-01  
 22  +4.7357e-01  +4.7399e-01  4.15e-04  7.96e-08  1.75e-05  2.98e-08  2.95e-07  9.08e-01  
 23  +4.7340e-01  +4.7341e-01  6.50e-06  1.21e-09  2.67e-07  4.54e-10  4.62e-09  9.86e-01  
 24  +4.7340e-01  +4.7340e-01  6.50e-08  1.21e-11  2.67e-09  4.54e-12  4.62e-11  9.90e-01  
 25  +4.7340e-01  +4.7340e-01  6.53e-10  1.22e-13  2.68e-11  5.59e-14  5.64e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 106.6392ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:03 PM: Optimal value: 4.734e-01
(CVXPY) Sep 20 07:41:03 PM: Compilation took 2.402e-02 seconds
(CVXPY) Sep 20 07:41:03 PM: Solver (including time spent in interface) took 1.130e-01 seconds
Iteration: 4, Objective: 0.4734
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:03 PM: Your problem has 5055 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:03 PM: Finished problem compilation (took 2.365e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5055
  constraints   = 10055
  nnz(P)        = 0
  nnz(A)        = 65895
  cones (total) = 1
    : Nonnegative = 1,  numel = 10055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8796e-01  +1.0515e+03  1.05e+03  4.05e-01  6.81e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3792e-01  +1.3042e+02  1.30e+02  1.57e-01  3.34e+01  1.32e-02  2.54e-01  8.67e-01  
  3  +5.0985e-01  +3.3396e+01  3.29e+01  1.21e-01  2.55e+01  3.45e-05  2.46e-01  1.66e-01  
  4  +5.0061e-01  +2.0366e+00  1.54e+00  1.05e-02  2.25e+00  4.96e-06  1.50e-01  7.60e-01  
  5  +5.0011e-01  +8.4154e-01  3.41e-01  2.30e-03  5.02e-01  1.52e-05  7.62e-02  8.25e-01  
  6  +5.0005e-01  +6.7662e-01  1.77e-01  1.18e-03  2.59e-01  1.11e-05  3.51e-02  6.11e-01  
  7  +5.0004e-01  +6.6818e-01  1.68e-01  1.10e-03  2.41e-01  1.83e-05  1.39e-02  7.24e-01  
  8  +4.9937e-01  +6.2917e-01  1.30e-01  1.11e-04  2.44e-02  4.27e-04  3.67e-04  9.89e-01  
  9  +4.9835e-01  +6.1889e-01  1.21e-01  5.65e-05  1.25e-02  6.90e-04  1.85e-04  5.61e-01  
 10  +4.9706e-01  +6.0543e-01  1.08e-01  4.61e-05  1.02e-02  6.02e-04  1.51e-04  2.53e-01  
 11  +4.9754e-01  +6.0880e-01  1.11e-01  4.61e-05  1.02e-02  5.77e-04  1.50e-04  9.70e-02  
 12  +4.9747e-01  +6.0671e-01  1.09e-01  4.57e-05  1.01e-02  5.07e-04  1.48e-04  9.43e-02  
 13  +4.9654e-01  +5.9958e-01  1.03e-01  3.74e-05  8.25e-03  4.87e-04  1.20e-04  2.71e-01  
 14  +4.9550e-01  +5.9151e-01  9.60e-02  3.10e-05  6.83e-03  4.05e-04  9.87e-05  3.31e-01  
 15  +4.9355e-01  +5.8087e-01  8.73e-02  2.39e-05  5.26e-03  3.32e-04  7.59e-05  3.86e-01  
 16  +4.9218e-01  +5.7399e-01  8.18e-02  2.30e-05  5.08e-03  2.52e-04  7.54e-05  1.11e-01  
 17  +4.9085e-01  +5.6638e-01  7.55e-02  2.13e-05  4.70e-03  1.89e-04  7.04e-05  1.87e-01  
 18  +4.8221e-01  +5.2600e-01  4.38e-02  9.82e-06  2.16e-03  9.68e-05  3.29e-05  6.26e-01  
 19  +4.7717e-01  +5.0340e-01  2.62e-02  5.68e-06  1.25e-03  5.07e-05  1.97e-05  4.42e-01  
 20  +4.7437e-01  +4.8950e-01  1.51e-02  3.14e-06  6.91e-04  7.58e-07  1.11e-05  9.90e-01  
 21  +4.7021e-01  +4.7297e-01  2.76e-03  5.65e-07  1.24e-04  1.31e-07  2.06e-06  8.23e-01  
 22  +4.6932e-01  +4.6961e-01  2.91e-04  5.72e-08  1.26e-05  1.42e-08  2.19e-07  9.11e-01  
 23  +4.6920e-01  +4.6920e-01  3.39e-06  6.53e-10  1.44e-07  1.66e-10  2.55e-09  9.89e-01  
 24  +4.6920e-01  +4.6920e-01  3.39e-08  6.53e-12  1.44e-09  1.66e-12  2.55e-11  9.90e-01  
 25  +4.6920e-01  +4.6920e-01  3.41e-10  6.57e-14  1.45e-11  2.14e-14  3.25e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 101.543ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:03 PM: Optimal value: 4.692e-01
(CVXPY) Sep 20 07:41:03 PM: Compilation took 2.365e-02 seconds
(CVXPY) Sep 20 07:41:03 PM: Solver (including time spent in interface) took 1.089e-01 seconds
Iteration: 5, Objective: 0.4692
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:03 PM: Your problem has 5065 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:03 PM: Finished problem compilation (took 2.359e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5065
  constraints   = 10065
  nnz(P)        = 0
  nnz(A)        = 69059
  cones (total) = 1
    : Nonnegative = 1,  numel = 10065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8791e-01  +1.0515e+03  1.05e+03  4.05e-01  6.83e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3789e-01  +1.3034e+02  1.30e+02  1.57e-01  3.35e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0984e-01  +3.3378e+01  3.29e+01  1.21e-01  2.55e+01  3.45e-05  2.46e-01  1.66e-01  
  4  +5.0061e-01  +2.0354e+00  1.53e+00  1.05e-02  2.26e+00  4.97e-06  1.50e-01  7.61e-01  
  5  +5.0013e-01  +8.7201e-01  3.72e-01  2.50e-03  5.49e-01  1.50e-05  7.92e-02  7.84e-01  
  6  +5.0006e-01  +6.9368e-01  1.94e-01  1.30e-03  2.85e-01  1.12e-05  3.69e-02  6.21e-01  
  7  +5.0004e-01  +6.7538e-01  1.75e-01  1.14e-03  2.51e-01  1.89e-05  1.32e-02  7.57e-01  
  8  +4.9935e-01  +6.3852e-01  1.39e-01  1.12e-04  2.48e-02  4.43e-04  3.63e-04  9.88e-01  
  9  +4.9841e-01  +6.2663e-01  1.28e-01  6.28e-05  1.39e-02  6.25e-04  2.02e-04  5.24e-01  
 10  +4.9785e-01  +6.1931e-01  1.21e-01  5.66e-05  1.25e-02  5.60e-04  1.82e-04  1.74e-01  
 11  +4.9625e-01  +5.9752e-01  1.01e-01  4.17e-05  9.25e-03  2.77e-04  1.33e-04  5.86e-01  
 12  +4.9629e-01  +5.9703e-01  1.01e-01  4.09e-05  9.07e-03  2.29e-04  1.30e-04  1.79e-01  
 13  +4.9492e-01  +5.8996e-01  9.50e-02  3.12e-05  6.91e-03  2.31e-04  9.86e-05  3.29e-01  
 14  +4.9458e-01  +5.8712e-01  9.25e-02  2.98e-05  6.60e-03  1.75e-04  9.41e-05  2.33e-01  
 15  +4.9331e-01  +5.8103e-01  8.77e-02  2.56e-05  5.67e-03  1.51e-04  8.11e-05  2.51e-01  
 16  +4.8961e-01  +5.6043e-01  7.08e-02  2.00e-05  4.43e-03  1.94e-05  6.46e-05  7.29e-01  
 17  +4.8095e-01  +5.2334e-01  4.24e-02  9.62e-06  2.13e-03  8.71e-06  3.23e-05  6.54e-01  
 18  +4.7693e-01  +5.0612e-01  2.92e-02  6.31e-06  1.40e-03  4.85e-06  2.17e-05  4.59e-01  
 19  +4.7107e-01  +4.8151e-01  1.04e-02  2.10e-06  4.64e-04  9.44e-07  7.49e-06  8.52e-01  
 20  +4.7019e-01  +4.7818e-01  7.99e-03  1.56e-06  3.46e-04  6.37e-07  5.65e-06  4.90e-01  
 21  +4.7014e-01  +4.7795e-01  7.81e-03  1.54e-06  3.40e-04  5.94e-07  5.57e-06  1.48e-01  
 22  +4.6980e-01  +4.7665e-01  6.85e-03  1.34e-06  2.96e-04  5.06e-07  4.88e-06  2.25e-01  
 23  +4.6840e-01  +4.7131e-01  2.90e-03  5.54e-07  1.22e-04  1.72e-07  2.06e-06  9.62e-01  
 24  +4.6739e-01  +4.6761e-01  2.19e-04  4.14e-08  9.16e-06  1.25e-08  1.58e-07  9.90e-01  
 25  +4.6730e-01  +4.6730e-01  2.25e-06  4.25e-10  9.40e-08  1.28e-10  1.62e-09  9.90e-01  
 26  +4.6730e-01  +4.6730e-01  2.25e-08  4.25e-12  9.40e-10  1.28e-12  1.62e-11  9.90e-01  
 27  +4.6730e-01  +4.6730e-01  2.26e-10  4.25e-14  9.40e-12  1.32e-14  1.67e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 123.5814ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:03 PM: Optimal value: 4.673e-01
(CVXPY) Sep 20 07:41:03 PM: Compilation took 2.359e-02 seconds
(CVXPY) Sep 20 07:41:03 PM: Solver (including time spent in interface) took 1.315e-01 seconds
Iteration: 6, Objective: 0.4673
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:03 PM: Your problem has 5075 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:03 PM: Finished problem compilation (took 2.612e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5075
  constraints   = 10075
  nnz(P)        = 0
  nnz(A)        = 71166
  cones (total) = 1
    : Nonnegative = 1,  numel = 10075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8788e-01  +1.0515e+03  1.05e+03  4.05e-01  6.84e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3786e-01  +1.3028e+02  1.30e+02  1.56e-01  3.35e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0984e-01  +3.3362e+01  3.29e+01  1.20e-01  2.55e+01  3.45e-05  2.45e-01  1.66e-01  
  4  +5.0061e-01  +2.0336e+00  1.53e+00  1.04e-02  2.26e+00  4.98e-06  1.49e-01  7.62e-01  
  5  +5.0011e-01  +8.4147e-01  3.41e-01  2.30e-03  5.05e-01  1.53e-05  7.41e-02  8.35e-01  
  6  +5.0006e-01  +7.0308e-01  2.03e-01  1.36e-03  3.00e-01  1.26e-05  3.64e-02  5.83e-01  
  7  +5.0004e-01  +6.9683e-01  1.97e-01  1.23e-03  2.72e-01  2.41e-05  1.05e-02  9.10e-01  
  8  +4.9924e-01  +6.6140e-01  1.62e-01  1.08e-04  2.41e-02  5.13e-04  3.45e-04  9.72e-01  
  9  +4.9823e-01  +6.4340e-01  1.45e-01  6.34e-05  1.41e-02  6.40e-04  2.00e-04  5.20e-01  
 10  +4.9777e-01  +6.3400e-01  1.36e-01  5.69e-05  1.26e-02  5.25e-04  1.79e-04  2.34e-01  
 11  +4.9622e-01  +6.2097e-01  1.25e-01  4.24e-05  9.42e-03  5.19e-04  1.34e-04  3.33e-01  
 12  +4.9571e-01  +6.1364e-01  1.18e-01  3.92e-05  8.71e-03  3.76e-04  1.24e-04  2.66e-01  
 13  +4.9265e-01  +5.9192e-01  9.93e-02  2.81e-05  6.23e-03  2.09e-04  9.03e-05  5.58e-01  
 14  +4.9177e-01  +5.8642e-01  9.47e-02  2.66e-05  5.90e-03  1.59e-04  8.58e-05  1.99e-01  
 15  +4.8606e-01  +5.5841e-01  7.23e-02  1.84e-05  4.07e-03  8.58e-05  6.10e-05  4.61e-01  
 16  +4.7386e-01  +5.0346e-01  2.96e-02  6.40e-06  1.42e-03  2.24e-05  2.27e-05  7.04e-01  
 17  +4.7263e-01  +4.9836e-01  2.57e-02  5.46e-06  1.21e-03  1.77e-05  1.95e-05  2.22e-01  
 18  +4.6958e-01  +4.8568e-01  1.61e-02  3.27e-06  7.25e-04  6.69e-06  1.20e-05  6.43e-01  
 19  +4.6817e-01  +4.8006e-01  1.19e-02  2.37e-06  5.25e-04  4.33e-06  8.81e-06  3.73e-01  
 20  +4.6765e-01  +4.7767e-01  1.00e-02  1.99e-06  4.40e-04  1.11e-06  7.47e-06  8.47e-01  
 21  +4.6557e-01  +4.6977e-01  4.20e-03  8.24e-07  1.82e-04  4.14e-07  3.17e-06  6.77e-01  
 22  +4.6425e-01  +4.6492e-01  6.70e-04  1.30e-07  2.88e-05  3.34e-08  5.11e-07  9.87e-01  
 23  +4.6401e-01  +4.6402e-01  1.76e-05  3.41e-09  7.56e-07  8.96e-10  1.35e-08  9.76e-01  
 24  +4.6400e-01  +4.6400e-01  1.77e-07  3.41e-11  7.56e-09  8.96e-12  1.35e-10  9.90e-01  
 25  +4.6400e-01  +4.6400e-01  1.77e-09  3.42e-13  7.57e-11  9.11e-14  1.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 106.9296ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:04 PM: Optimal value: 4.640e-01
(CVXPY) Sep 20 07:41:04 PM: Compilation took 2.612e-02 seconds
(CVXPY) Sep 20 07:41:04 PM: Solver (including time spent in interface) took 1.145e-01 seconds
Iteration: 7, Objective: 0.4640
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:04 PM: Your problem has 5085 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:04 PM: Finished problem compilation (took 2.754e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5085
  constraints   = 10085
  nnz(P)        = 0
  nnz(A)        = 73147
  cones (total) = 1
    : Nonnegative = 1,  numel = 10085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8787e-01  +1.0513e+03  1.05e+03  4.05e-01  6.85e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3787e-01  +1.3029e+02  1.30e+02  1.56e-01  3.35e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0983e-01  +3.3350e+01  3.28e+01  1.20e-01  2.55e+01  3.45e-05  2.45e-01  1.66e-01  
  4  +5.0060e-01  +2.0280e+00  1.53e+00  1.04e-02  2.26e+00  4.98e-06  1.49e-01  7.64e-01  
  5  +5.0015e-01  +9.2999e-01  4.30e-01  2.90e-03  6.37e-01  1.46e-05  8.48e-02  7.11e-01  
  6  +5.0007e-01  +7.2812e-01  2.28e-01  1.53e-03  3.37e-01  1.16e-05  4.14e-02  5.97e-01  
  7  +5.0005e-01  +6.9805e-01  1.98e-01  1.30e-03  2.87e-01  1.74e-05  1.69e-02  6.69e-01  
  8  +4.9989e-01  +6.7536e-01  1.75e-01  4.58e-04  1.02e-01  1.12e-04  1.66e-03  9.90e-01  
  9  +4.9882e-01  +6.6920e-01  1.70e-01  7.91e-05  1.76e-02  6.93e-04  2.52e-04  8.51e-01  
 10  +4.9788e-01  +6.5152e-01  1.54e-01  6.66e-05  1.48e-02  5.78e-04  2.12e-04  2.59e-01  
 11  +4.9564e-01  +6.2245e-01  1.27e-01  4.74e-05  1.05e-02  4.06e-04  1.51e-04  4.58e-01  
 12  +4.9501e-01  +6.1453e-01  1.20e-01  4.02e-05  8.93e-03  2.92e-04  1.27e-04  3.95e-01  
 13  +4.9395e-01  +6.0389e-01  1.10e-01  3.28e-05  7.30e-03  1.66e-04  1.04e-04  5.13e-01  
 14  +4.9094e-01  +5.8679e-01  9.58e-02  2.52e-05  5.61e-03  1.02e-04  8.07e-05  4.62e-01  
 15  +4.9065e-01  +5.8534e-01  9.47e-02  2.52e-05  5.59e-03  9.71e-05  8.06e-05  2.11e-02  
 16  +4.8865e-01  +5.7462e-01  8.60e-02  2.34e-05  5.20e-03  4.85e-05  7.61e-05  3.64e-01  
 17  +4.7916e-01  +5.3291e-01  5.38e-02  1.20e-05  2.67e-03  2.30e-05  4.09e-05  5.96e-01  
 18  +4.7424e-01  +5.1209e-01  3.79e-02  8.04e-06  1.78e-03  1.15e-05  2.81e-05  4.89e-01  
 19  +4.7354e-01  +5.0868e-01  3.51e-02  7.35e-06  1.63e-03  8.05e-06  2.58e-05  3.38e-01  
 20  +4.7023e-01  +4.9506e-01  2.48e-02  4.99e-06  1.11e-03  3.38e-06  1.79e-05  6.49e-01  
 21  +4.6397e-01  +4.7094e-01  6.97e-03  1.35e-06  2.98e-04  8.29e-07  5.05e-06  7.49e-01  
 22  +4.6395e-01  +4.7076e-01  6.81e-03  1.33e-06  2.94e-04  7.88e-07  5.04e-06  1.56e-02  
 23  +4.6395e-01  +4.7076e-01  6.82e-03  1.33e-06  2.94e-04  7.85e-07  5.03e-06  1.34e-02  
 24  +4.6394e-01  +4.7082e-01  6.88e-03  1.32e-06  2.93e-04  7.87e-07  4.96e-06  6.79e-02  
 25  +4.6269e-01  +4.6598e-01  3.29e-03  6.25e-07  1.39e-04  1.92e-07  2.37e-06  9.90e-01  
 26  +4.6144e-01  +4.6155e-01  1.08e-04  2.05e-08  4.55e-06  5.78e-09  7.90e-08  9.87e-01  
 27  +4.6140e-01  +4.6140e-01  1.10e-06  2.08e-10  4.62e-08  5.88e-11  8.04e-10  9.90e-01  
 28  +4.6140e-01  +4.6140e-01  1.10e-08  2.08e-12  4.62e-10  5.88e-13  8.04e-12  9.90e-01  
 29  +4.6140e-01  +4.6140e-01  1.10e-10  2.09e-14  4.63e-12  5.96e-15  8.14e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 129.4036ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:04 PM: Optimal value: 4.614e-01
(CVXPY) Sep 20 07:41:04 PM: Compilation took 2.754e-02 seconds
(CVXPY) Sep 20 07:41:04 PM: Solver (including time spent in interface) took 1.381e-01 seconds
Iteration: 8, Objective: 0.4614
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:04 PM: Your problem has 5095 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:04 PM: Finished problem compilation (took 2.479e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5095
  constraints   = 10095
  nnz(P)        = 0
  nnz(A)        = 74816
  cones (total) = 1
    : Nonnegative = 1,  numel = 10095

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8789e-01  +1.0512e+03  1.05e+03  4.05e-01  6.85e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3783e-01  +1.3018e+02  1.30e+02  1.56e-01  3.34e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0982e-01  +3.3309e+01  3.28e+01  1.20e-01  2.55e+01  3.45e-05  2.45e-01  1.67e-01  
  4  +5.0060e-01  +2.0257e+00  1.53e+00  1.04e-02  2.26e+00  4.98e-06  1.49e-01  7.65e-01  
  5  +5.0014e-01  +9.1861e-01  4.18e-01  2.82e-03  6.21e-01  1.47e-05  8.26e-02  7.31e-01  
  6  +5.0008e-01  +7.3904e-01  2.39e-01  1.61e-03  3.54e-01  1.24e-05  4.14e-02  5.63e-01  
  7  +5.0006e-01  +7.2016e-01  2.20e-01  1.45e-03  3.21e-01  1.82e-05  1.95e-02  6.01e-01  
  8  +4.9979e-01  +6.7540e-01  1.76e-01  3.48e-04  7.74e-02  1.74e-04  1.20e-03  9.79e-01  
  9  +4.9854e-01  +6.6690e-01  1.68e-01  7.57e-05  1.69e-02  8.05e-04  2.41e-04  8.08e-01  
 10  +4.9759e-01  +6.5240e-01  1.55e-01  6.70e-05  1.49e-02  6.78e-04  2.13e-04  2.02e-01  
 11  +4.9756e-01  +6.4784e-01  1.50e-01  6.33e-05  1.41e-02  5.57e-04  2.01e-04  2.05e-01  
 12  +4.9646e-01  +6.3750e-01  1.41e-01  4.81e-05  1.07e-02  5.29e-04  1.53e-04  3.73e-01  
 13  +4.9611e-01  +6.3329e-01  1.37e-01  4.66e-05  1.04e-02  4.67e-04  1.48e-04  1.08e-01  
 14  +4.9438e-01  +6.2227e-01  1.28e-01  3.76e-05  8.36e-03  4.43e-04  1.20e-04  2.60e-01  
 15  +4.9308e-01  +6.1227e-01  1.19e-01  3.50e-05  7.79e-03  3.19e-04  1.13e-04  2.29e-01  
 16  +4.8725e-01  +5.7983e-01  9.26e-02  2.46e-05  5.46e-03  1.88e-04  8.11e-05  4.27e-01  
 17  +4.8576e-01  +5.6926e-01  8.35e-02  2.24e-05  4.97e-03  6.41e-05  7.45e-05  5.23e-01  
 18  +4.7938e-01  +5.3943e-01  6.01e-02  1.46e-05  3.25e-03  2.01e-05  5.05e-05  6.36e-01  
 19  +4.7263e-01  +5.0974e-01  3.71e-02  8.28e-06  1.84e-03  8.21e-06  2.97e-05  5.87e-01  
 20  +4.6866e-01  +4.9289e-01  2.42e-02  5.12e-06  1.14e-03  3.95e-06  1.89e-05  5.60e-01  
 21  +4.6733e-01  +4.8727e-01  1.99e-02  4.12e-06  9.15e-04  2.82e-06  1.54e-05  3.48e-01  
 22  +4.6484e-01  +4.7667e-01  1.18e-02  2.34e-06  5.20e-04  7.05e-07  8.87e-06  9.76e-01  
 23  +4.6436e-01  +4.7485e-01  1.05e-02  2.10e-06  4.66e-04  5.90e-07  8.08e-06  3.84e-01  
 24  +4.6281e-01  +4.6875e-01  5.94e-03  1.18e-06  2.62e-04  3.27e-07  4.62e-06  7.61e-01  
 25  +4.6254e-01  +4.6781e-01  5.28e-03  1.04e-06  2.30e-04  2.95e-07  4.02e-06  2.79e-01  
 26  +4.6077e-01  +4.6120e-01  4.37e-04  8.55e-08  1.90e-05  2.29e-08  3.40e-07  9.90e-01  
 27  +4.6060e-01  +4.6061e-01  4.63e-06  9.05e-10  2.01e-07  2.41e-10  3.61e-09  9.89e-01  
 28  +4.6060e-01  +4.6060e-01  4.63e-08  9.05e-12  2.01e-09  2.41e-12  3.61e-11  9.90e-01  
 29  +4.6060e-01  +4.6060e-01  4.63e-10  9.05e-14  2.01e-11  2.42e-14  3.63e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 129.0959ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:04 PM: Optimal value: 4.606e-01
(CVXPY) Sep 20 07:41:04 PM: Compilation took 2.479e-02 seconds
(CVXPY) Sep 20 07:41:04 PM: Solver (including time spent in interface) took 1.375e-01 seconds
Iteration: 9, Objective: 0.4606
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:04 PM: Your problem has 5105 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:04 PM: Finished problem compilation (took 2.856e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5105
  constraints   = 10105
  nnz(P)        = 0
  nnz(A)        = 76304
  cones (total) = 1
    : Nonnegative = 1,  numel = 10105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8790e-01  +1.0511e+03  1.05e+03  4.05e-01  6.85e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3781e-01  +1.3012e+02  1.30e+02  1.56e-01  3.34e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0981e-01  +3.3288e+01  3.28e+01  1.20e-01  2.55e+01  3.45e-05  2.45e-01  1.67e-01  
  4  +5.0060e-01  +2.0231e+00  1.52e+00  1.04e-02  2.26e+00  4.98e-06  1.48e-01  7.66e-01  
  5  +5.0015e-01  +9.2174e-01  4.22e-01  2.85e-03  6.27e-01  1.47e-05  8.25e-02  7.28e-01  
  6  +5.0008e-01  +7.3966e-01  2.40e-01  1.61e-03  3.55e-01  1.27e-05  3.87e-02  6.75e-01  
  7  +5.0004e-01  +6.9707e-01  1.97e-01  1.23e-03  2.71e-01  2.77e-05  9.95e-03  8.06e-01  
  8  +4.9932e-01  +6.8392e-01  1.85e-01  1.49e-04  3.33e-02  4.65e-04  4.82e-04  9.67e-01  
  9  +4.9820e-01  +6.6667e-01  1.68e-01  7.56e-05  1.69e-02  7.33e-04  2.40e-04  5.72e-01  
 10  +4.9659e-01  +6.4793e-01  1.51e-01  5.88e-05  1.31e-02  6.71e-04  1.87e-04  3.00e-01  
 11  +4.9649e-01  +6.4035e-01  1.44e-01  5.26e-05  1.17e-02  4.72e-04  1.67e-04  3.50e-01  
 12  +4.9572e-01  +6.2743e-01  1.32e-01  4.76e-05  1.06e-02  2.70e-04  1.51e-04  3.83e-01  
 13  +4.9434e-01  +6.1853e-01  1.24e-01  4.01e-05  8.94e-03  2.35e-04  1.28e-04  2.76e-01  
 14  +4.9352e-01  +6.1196e-01  1.18e-01  3.89e-05  8.67e-03  1.72e-04  1.25e-04  1.91e-01  
 15  +4.8498e-01  +5.6808e-01  8.31e-02  2.04e-05  4.53e-03  1.26e-04  6.74e-05  5.47e-01  
 16  +4.8081e-01  +5.4809e-01  6.73e-02  1.60e-05  3.55e-03  8.78e-05  5.40e-05  2.74e-01  
 17  +4.7919e-01  +5.3964e-01  6.05e-02  1.42e-05  3.16e-03  5.26e-05  4.86e-05  3.59e-01  
 18  +4.7366e-01  +5.1506e-01  4.14e-02  9.21e-06  2.05e-03  2.78e-05  3.24e-05  4.57e-01  
 19  +4.6894e-01  +4.9491e-01  2.60e-02  5.50e-06  1.22e-03  1.57e-05  1.99e-05  4.38e-01  
 20  +4.6584e-01  +4.8113e-01  1.53e-02  2.99e-06  6.65e-04  1.28e-06  1.10e-05  9.90e-01  
 21  +4.6547e-01  +4.7979e-01  1.43e-02  2.87e-06  6.38e-04  1.08e-06  1.08e-05  1.20e-01  
 22  +4.6514e-01  +4.7841e-01  1.33e-02  2.64e-06  5.87e-04  9.49e-07  9.91e-06  2.93e-01  
 23  +4.6429e-01  +4.7502e-01  1.07e-02  2.12e-06  4.71e-04  7.09e-07  7.94e-06  4.99e-01  
 24  +4.6285e-01  +4.6972e-01  6.88e-03  1.32e-06  2.94e-04  4.43e-07  4.97e-06  5.57e-01  
 25  +4.6094e-01  +4.6267e-01  1.72e-03  3.28e-07  7.29e-05  1.07e-07  1.26e-06  7.94e-01  
 26  +4.6031e-01  +4.6034e-01  2.95e-05  5.61e-09  1.25e-06  1.77e-09  2.17e-08  9.84e-01  
 27  +4.6030e-01  +4.6030e-01  2.95e-07  5.61e-11  1.25e-08  1.77e-11  2.17e-10  9.90e-01  
 28  +4.6030e-01  +4.6030e-01  2.95e-09  5.61e-13  1.25e-10  1.77e-13  2.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 126.1517ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:04 PM: Optimal value: 4.603e-01
(CVXPY) Sep 20 07:41:04 PM: Compilation took 2.856e-02 seconds
(CVXPY) Sep 20 07:41:04 PM: Solver (including time spent in interface) took 1.346e-01 seconds
Iteration: 10, Objective: 0.4603
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:04 PM: Your problem has 5115 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:04 PM: Finished problem compilation (took 2.602e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5115
  constraints   = 10115
  nnz(P)        = 0
  nnz(A)        = 77940
  cones (total) = 1
    : Nonnegative = 1,  numel = 10115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8788e-01  +1.0512e+03  1.05e+03  4.05e-01  6.86e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3778e-01  +1.3005e+02  1.30e+02  1.56e-01  3.34e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0981e-01  +3.3274e+01  3.28e+01  1.20e-01  2.55e+01  3.45e-05  2.45e-01  1.68e-01  
  4  +5.0060e-01  +2.0256e+00  1.52e+00  1.04e-02  2.27e+00  4.99e-06  1.48e-01  7.66e-01  
  5  +5.0014e-01  +9.0864e-01  4.08e-01  2.76e-03  6.08e-01  1.49e-05  8.03e-02  7.51e-01  
  6  +5.0007e-01  +7.2427e-01  2.24e-01  1.51e-03  3.33e-01  1.33e-05  3.40e-02  7.06e-01  
  7  +5.0001e-01  +7.1074e-01  2.11e-01  1.14e-03  2.52e-01  4.67e-05  6.30e-03  8.93e-01  
  8  +4.9902e-01  +7.0494e-01  2.06e-01  1.28e-04  2.85e-02  6.45e-04  4.11e-04  9.36e-01  
  9  +4.9761e-01  +6.6917e-01  1.72e-01  7.65e-05  1.71e-02  6.30e-04  2.44e-04  5.53e-01  
 10  +4.9630e-01  +6.4894e-01  1.53e-01  6.11e-05  1.36e-02  4.67e-04  1.95e-04  3.77e-01  
 11  +4.9611e-01  +6.4502e-01  1.49e-01  5.52e-05  1.23e-02  4.12e-04  1.76e-04  2.28e-01  
 12  +4.9556e-01  +6.3736e-01  1.42e-01  4.96e-05  1.11e-02  3.25e-04  1.58e-04  2.68e-01  
 13  +4.9497e-01  +6.2661e-01  1.32e-01  4.56e-05  1.02e-02  1.74e-04  1.46e-04  4.13e-01  
 14  +4.9187e-01  +6.0284e-01  1.11e-01  3.51e-05  7.82e-03  2.51e-05  1.14e-04  8.03e-01  
 15  +4.8337e-01  +5.6223e-01  7.89e-02  2.01e-05  4.47e-03  1.58e-05  6.79e-05  5.27e-01  
 16  +4.8066e-01  +5.4981e-01  6.92e-02  1.72e-05  3.83e-03  1.06e-05  5.91e-05  3.21e-01  
 17  +4.7569e-01  +5.2700e-01  5.13e-02  1.21e-05  2.70e-03  3.39e-06  4.31e-05  7.24e-01  
 18  +4.7303e-01  +5.1556e-01  4.25e-02  9.74e-06  2.17e-03  2.74e-06  3.52e-05  2.15e-01  
 19  +4.7290e-01  +5.1494e-01  4.20e-02  9.60e-06  2.13e-03  2.68e-06  3.47e-05  5.69e-02  
 20  +4.7019e-01  +5.0291e-01  3.27e-02  7.13e-06  1.59e-03  1.67e-06  2.61e-05  7.67e-01  
 21  +4.6818e-01  +4.9449e-01  2.63e-02  5.56e-06  1.24e-03  1.34e-06  2.05e-05  4.46e-01  
 22  +4.6504e-01  +4.8154e-01  1.65e-02  3.36e-06  7.47e-04  8.56e-07  1.27e-05  4.85e-01  
 23  +4.6487e-01  +4.8087e-01  1.60e-02  3.32e-06  7.38e-04  8.08e-07  1.26e-05  7.59e-02  
 24  +4.6364e-01  +4.7596e-01  1.23e-02  2.50e-06  5.57e-04  6.31e-07  9.58e-06  2.65e-01  
 25  +4.6289e-01  +4.7270e-01  9.81e-03  1.96e-06  4.35e-04  5.11e-07  7.50e-06  9.62e-01  
 26  +4.6115e-01  +4.6605e-01  4.90e-03  9.65e-07  2.15e-04  2.59e-07  3.77e-06  5.48e-01  
 27  +4.5953e-01  +4.5989e-01  3.53e-04  6.94e-08  1.54e-05  1.82e-08  2.77e-07  9.90e-01  
 28  +4.5940e-01  +4.5941e-01  3.72e-06  7.31e-10  1.63e-07  1.91e-10  2.93e-09  9.89e-01  
 29  +4.5940e-01  +4.5940e-01  3.72e-08  7.31e-12  1.63e-09  1.91e-12  2.93e-11  9.90e-01  
 30  +4.5940e-01  +4.5940e-01  3.72e-10  7.31e-14  1.63e-11  1.92e-14  2.95e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 145.0405ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:05 PM: Optimal value: 4.594e-01
(CVXPY) Sep 20 07:41:05 PM: Compilation took 2.602e-02 seconds
(CVXPY) Sep 20 07:41:05 PM: Solver (including time spent in interface) took 1.538e-01 seconds
Iteration: 11, Objective: 0.4594
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:05 PM: Your problem has 5125 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:05 PM: Finished problem compilation (took 2.953e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5125
  constraints   = 10125
  nnz(P)        = 0
  nnz(A)        = 78973
  cones (total) = 1
    : Nonnegative = 1,  numel = 10125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8788e-01  +1.0511e+03  1.05e+03  4.05e-01  6.85e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3775e-01  +1.3000e+02  1.29e+02  1.56e-01  3.33e+01  1.32e-02  2.54e-01  8.69e-01  
  3  +5.0980e-01  +3.3257e+01  3.27e+01  1.20e-01  2.55e+01  3.45e-05  2.45e-01  1.68e-01  
  4  +5.0060e-01  +2.0266e+00  1.53e+00  1.04e-02  2.27e+00  4.98e-06  1.48e-01  7.66e-01  
  5  +5.0015e-01  +9.2359e-01  4.23e-01  2.86e-03  6.31e-01  1.48e-05  8.19e-02  7.32e-01  
  6  +5.0007e-01  +7.2668e-01  2.27e-01  1.52e-03  3.36e-01  1.32e-05  3.46e-02  7.03e-01  
  7  +5.0005e-01  +7.5661e-01  2.57e-01  1.53e-03  3.38e-01  3.12e-05  1.05e-02  8.84e-01  
  8  +4.9926e-01  +7.0456e-01  2.05e-01  1.35e-04  3.02e-02  5.05e-04  4.36e-04  9.74e-01  
  9  +4.9829e-01  +6.7865e-01  1.80e-01  8.72e-05  1.95e-02  5.26e-04  2.80e-04  4.86e-01  
 10  +4.9669e-01  +6.5868e-01  1.62e-01  6.63e-05  1.48e-02  4.88e-04  2.12e-04  3.26e-01  
 11  +4.9633e-01  +6.4917e-01  1.53e-01  5.63e-05  1.26e-02  3.58e-04  1.80e-04  3.88e-01  
 12  +4.9602e-01  +6.4333e-01  1.47e-01  5.47e-05  1.22e-02  2.81e-04  1.75e-04  1.74e-01  
 13  +4.9423e-01  +6.3093e-01  1.37e-01  4.41e-05  9.83e-03  2.46e-04  1.42e-04  3.09e-01  
 14  +4.9213e-01  +6.1669e-01  1.25e-01  3.80e-05  8.48e-03  1.81e-04  1.24e-04  2.82e-01  
 15  +4.8405e-01  +5.6763e-01  8.36e-02  2.30e-05  5.13e-03  1.48e-05  7.90e-05  7.95e-01  
 16  +4.8014e-01  +5.4939e-01  6.92e-02  1.80e-05  4.01e-03  9.80e-06  6.34e-05  3.50e-01  
 17  +4.7328e-01  +5.1844e-01  4.52e-02  1.07e-05  2.39e-03  5.12e-06  3.93e-05  4.99e-01  
 18  +4.7155e-01  +5.1093e-01  3.94e-02  9.08e-06  2.02e-03  4.22e-06  3.36e-05  2.18e-01  
 19  +4.7121e-01  +5.0938e-01  3.82e-02  8.75e-06  1.95e-03  3.92e-06  3.24e-05  1.02e-01  
 20  +4.6757e-01  +4.9311e-01  2.55e-02  5.51e-06  1.22e-03  1.10e-06  2.08e-05  9.90e-01  
 21  +4.6372e-01  +4.7713e-01  1.34e-02  2.76e-06  6.15e-04  6.16e-07  1.07e-05  5.88e-01  
 22  +4.6355e-01  +4.7645e-01  1.29e-02  2.72e-06  6.05e-04  5.72e-07  1.07e-05  4.54e-02  
 23  +4.6303e-01  +4.7439e-01  1.14e-02  2.36e-06  5.25e-04  5.13e-07  9.24e-06  1.66e-01  
 24  +4.6265e-01  +4.7296e-01  1.03e-02  2.09e-06  4.66e-04  4.95e-07  8.16e-06  5.43e-01  
 25  +4.6142e-01  +4.6816e-01  6.74e-03  1.36e-06  3.01e-04  3.25e-07  5.36e-06  3.74e-01  
 26  +4.5933e-01  +4.5995e-01  6.20e-04  1.24e-07  2.76e-05  3.08e-08  5.04e-07  9.90e-01  
 27  +4.5910e-01  +4.5911e-01  7.16e-06  1.43e-09  3.18e-07  3.51e-10  5.84e-09  9.89e-01  
 28  +4.5910e-01  +4.5910e-01  7.18e-08  1.44e-11  3.19e-09  3.52e-12  5.86e-11  9.90e-01  
 29  +4.5910e-01  +4.5910e-01  7.18e-10  1.44e-13  3.19e-11  3.53e-14  5.88e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 143.7539ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:05 PM: Optimal value: 4.591e-01
(CVXPY) Sep 20 07:41:05 PM: Compilation took 2.953e-02 seconds
(CVXPY) Sep 20 07:41:05 PM: Solver (including time spent in interface) took 1.527e-01 seconds
Iteration: 12, Objective: 0.4591
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:05 PM: Your problem has 5128 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:05 PM: Finished problem compilation (took 3.266e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5128
  constraints   = 10128
  nnz(P)        = 0
  nnz(A)        = 79219
  cones (total) = 1
    : Nonnegative = 1,  numel = 10128

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8786e-01  +1.0512e+03  1.05e+03  4.05e-01  6.85e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3774e-01  +1.2997e+02  1.29e+02  1.56e-01  3.33e+01  1.32e-02  2.54e-01  8.69e-01  
  3  +5.0980e-01  +3.3252e+01  3.27e+01  1.20e-01  2.54e+01  3.45e-05  2.45e-01  1.68e-01  
  4  +5.0060e-01  +2.0287e+00  1.53e+00  1.04e-02  2.27e+00  4.99e-06  1.48e-01  7.65e-01  
  5  +5.0015e-01  +9.2845e-01  4.28e-01  2.89e-03  6.38e-01  1.49e-05  8.23e-02  7.28e-01  
  6  +5.0008e-01  +7.5300e-01  2.53e-01  1.70e-03  3.76e-01  1.35e-05  3.91e-02  6.45e-01  
  7  +5.0005e-01  +7.4222e-01  2.42e-01  1.51e-03  3.34e-01  2.77e-05  1.23e-02  8.00e-01  
  8  +4.9957e-01  +6.9000e-01  1.90e-01  2.07e-04  4.62e-02  3.12e-04  6.86e-04  9.90e-01  
  9  +4.9835e-01  +6.7409e-01  1.76e-01  7.70e-05  1.72e-02  7.21e-04  2.47e-04  6.87e-01  
 10  +4.9668e-01  +6.5229e-01  1.56e-01  6.47e-05  1.44e-02  5.56e-04  2.08e-04  2.70e-01  
 11  +4.9668e-01  +6.4711e-01  1.50e-01  5.73e-05  1.28e-02  3.95e-04  1.83e-04  3.90e-01  
 12  +4.9586e-01  +6.3612e-01  1.40e-01  4.93e-05  1.10e-02  2.42e-04  1.58e-04  4.51e-01  
 13  +4.9353e-01  +6.1930e-01  1.26e-01  4.06e-05  9.05e-03  1.51e-04  1.32e-04  4.21e-01  
 14  +4.9171e-01  +6.0721e-01  1.16e-01  3.80e-05  8.47e-03  7.91e-05  1.25e-04  3.57e-01  
 15  +4.8518e-01  +5.7467e-01  8.95e-02  2.45e-05  5.45e-03  5.77e-05  8.31e-05  4.19e-01  
 16  +4.8269e-01  +5.6222e-01  7.95e-02  2.13e-05  4.73e-03  2.89e-05  7.35e-05  4.31e-01  
 17  +4.7543e-01  +5.2875e-01  5.33e-02  1.29e-05  2.87e-03  8.48e-06  4.66e-05  6.72e-01  
 18  +4.7104e-01  +5.0920e-01  3.82e-02  8.71e-06  1.94e-03  4.02e-06  3.23e-05  5.82e-01  
 19  +4.6805e-01  +4.9643e-01  2.84e-02  6.23e-06  1.39e-03  2.77e-06  2.36e-05  3.56e-01  
 20  +4.6649e-01  +4.8980e-01  2.33e-02  5.01e-06  1.11e-03  2.08e-06  1.91e-05  3.25e-01  
 21  +4.6457e-01  +4.8144e-01  1.69e-02  3.52e-06  7.84e-04  1.14e-06  1.37e-05  6.86e-01  
 22  +4.6040e-01  +4.6447e-01  4.07e-03  8.37e-07  1.86e-04  1.97e-07  3.39e-06  9.90e-01  
 23  +4.5906e-01  +4.5923e-01  1.74e-04  3.55e-08  7.90e-06  7.87e-09  1.48e-07  9.70e-01  
 24  +4.5900e-01  +4.5900e-01  1.75e-06  3.58e-10  7.96e-08  7.91e-11  1.49e-09  9.90e-01  
 25  +4.5900e-01  +4.5900e-01  1.75e-08  3.58e-12  7.97e-10  7.92e-13  1.49e-11  9.90e-01  
 26  +4.5900e-01  +4.5900e-01  1.75e-10  3.59e-14  7.97e-12  7.95e-15  1.50e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 132.5816ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:05 PM: Optimal value: 4.590e-01
(CVXPY) Sep 20 07:41:05 PM: Compilation took 3.266e-02 seconds
(CVXPY) Sep 20 07:41:05 PM: Solver (including time spent in interface) took 1.413e-01 seconds
FULL MODEL:
  Accruacy: 0.5171
  Our objective: 0.03419999999999995

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0094)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0036)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 1)            <-- (term's our objective: 0.0086)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x4 = 0 AND x5 = 0)                                             <-- (term's our objective: 0.011)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 8.080262660980225
Best over terms:
  Our final objective: 0.011000000000000051
    Its accruacy: 0.5055
    Its hamming distance: 6
  Shortest hamming distance: 0
    Its our objective: 0.009400000000000033
  Highest accruacy: 0.5055
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

