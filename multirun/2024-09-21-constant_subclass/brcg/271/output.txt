Command:
python test_script.py -s constant_subclass -d 7 -n 10000 --seed 56 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0078
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 7.

Computed total variation: 0.10719999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:51 PM: Your problem has 5015 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:51 PM: Finished problem compilation (took 2.602e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5015
  constraints   = 10015
  nnz(P)        = 0
  nnz(A)        = 50015
  cones (total) = 1
    : Nonnegative = 1,  numel = 10015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.85e-01  1.05e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +1.0510e+03  1.05e+03  4.04e-01  6.56e+01  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3818e-01  +1.3093e+02  1.30e+02  1.57e-01  3.24e+01  1.31e-02  2.55e-01  8.65e-01  
  3  +5.0993e-01  +3.3570e+01  3.31e+01  1.21e-01  2.47e+01  3.44e-05  2.46e-01  1.61e-01  
  4  +5.0062e-01  +2.0668e+00  1.57e+00  1.06e-02  2.21e+00  4.89e-06  1.54e-01  7.42e-01  
  5  +5.0007e-01  +7.3295e-01  2.33e-01  1.56e-03  3.28e-01  1.61e-05  6.80e-02  9.90e-01  
  6  +5.0001e-01  +5.3037e-01  3.04e-02  2.03e-04  4.28e-02  3.10e-06  1.10e-02  8.49e-01  
  7  +5.0000e-01  +5.2141e-01  2.14e-02  1.42e-04  3.00e-02  3.93e-06  3.66e-03  7.52e-01  
  8  +4.9990e-01  +5.2053e-01  2.06e-02  4.54e-05  9.62e-03  6.82e-05  1.60e-04  9.80e-01  
  9  +4.9904e-01  +5.1862e-01  1.96e-02  5.60e-06  1.19e-03  5.60e-04  1.76e-05  8.91e-01  
 10  +4.9767e-01  +5.0823e-01  1.06e-02  3.76e-06  7.98e-04  4.45e-06  1.23e-05  5.90e-01  
 11  +4.9641e-01  +5.0251e-01  6.10e-03  1.71e-06  3.63e-04  2.45e-06  5.76e-06  6.02e-01  
 12  +4.9522e-01  +4.9737e-01  2.14e-03  4.95e-07  1.05e-04  6.32e-08  1.77e-06  9.90e-01  
 13  +4.9458e-01  +4.9476e-01  1.86e-04  3.87e-08  8.20e-06  5.50e-09  1.52e-07  9.21e-01  
 14  +4.9450e-01  +4.9451e-01  3.71e-06  7.42e-10  1.57e-07  1.45e-10  3.03e-09  9.90e-01  
 15  +4.9450e-01  +4.9450e-01  3.71e-08  7.42e-12  1.57e-09  1.45e-12  3.03e-11  9.90e-01  
 16  +4.9450e-01  +4.9450e-01  3.76e-10  7.54e-14  1.60e-11  2.51e-14  5.11e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 69.8387ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:51 PM: Optimal value: 4.945e-01
(CVXPY) Sep 20 07:40:51 PM: Compilation took 2.602e-02 seconds
(CVXPY) Sep 20 07:40:51 PM: Solver (including time spent in interface) took 7.794e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4945
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:51 PM: Your problem has 5025 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:51 PM: Finished problem compilation (took 2.601e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5025
  constraints   = 10025
  nnz(P)        = 0
  nnz(A)        = 56067
  cones (total) = 1
    : Nonnegative = 1,  numel = 10025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.85e-01  1.07e+02  1.00e+00  1.00e+00   ------   
  1  +5.8807e-01  +1.0513e+03  1.05e+03  4.04e-01  6.70e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3807e-01  +1.3070e+02  1.30e+02  1.57e-01  3.31e+01  1.31e-02  2.55e-01  8.66e-01  
  3  +5.0989e-01  +3.3491e+01  3.30e+01  1.21e-01  2.52e+01  3.44e-05  2.46e-01  1.63e-01  
  4  +5.0061e-01  +2.0479e+00  1.55e+00  1.05e-02  2.23e+00  4.92e-06  1.52e-01  7.52e-01  
  5  +5.0008e-01  +7.7393e-01  2.74e-01  1.84e-03  3.95e-01  1.57e-05  7.06e-02  9.21e-01  
  6  +5.0004e-01  +6.5001e-01  1.50e-01  1.00e-03  2.16e-01  9.80e-06  3.82e-02  5.37e-01  
  7  +5.0003e-01  +5.9640e-01  9.64e-02  6.42e-04  1.38e-01  6.95e-06  1.58e-02  7.97e-01  
  8  +5.0000e-01  +5.7489e-01  7.49e-02  4.45e-04  9.60e-02  1.58e-05  3.14e-03  9.34e-01  
  9  +4.9943e-01  +5.6979e-01  7.04e-02  3.69e-05  8.01e-03  3.73e-04  1.15e-04  9.64e-01  
 10  +4.9882e-01  +5.6269e-01  6.39e-02  2.67e-05  5.80e-03  3.73e-04  8.29e-05  3.85e-01  
 11  +4.9728e-01  +5.5020e-01  5.29e-02  1.91e-05  4.14e-03  2.96e-04  5.96e-05  3.79e-01  
 12  +4.9713e-01  +5.4870e-01  5.16e-02  1.81e-05  3.94e-03  2.48e-04  5.67e-05  1.69e-01  
 13  +4.9652e-01  +5.4127e-01  4.48e-02  1.63e-05  3.54e-03  7.02e-06  5.28e-05  7.38e-01  
 14  +4.9341e-01  +5.2524e-01  3.18e-02  9.03e-06  1.96e-03  3.19e-06  2.95e-05  7.38e-01  
 15  +4.9299e-01  +5.2385e-01  3.09e-02  8.63e-06  1.87e-03  2.13e-06  2.81e-05  4.21e-01  
 16  +4.8967e-01  +5.1030e-01  2.06e-02  4.79e-06  1.04e-03  1.01e-06  1.61e-05  7.87e-01  
 17  +4.8465e-01  +4.9039e-01  5.74e-03  1.11e-06  2.41e-04  2.73e-07  3.89e-06  8.74e-01  
 18  +4.8409e-01  +4.8840e-01  4.30e-03  7.96e-07  1.73e-04  2.51e-07  2.83e-06  9.90e-01  
 19  +4.8259e-01  +4.8308e-01  4.86e-04  8.74e-08  1.89e-05  2.83e-08  3.18e-07  9.38e-01  
 20  +4.8240e-01  +4.8241e-01  6.27e-06  1.13e-09  2.44e-07  3.62e-10  4.11e-09  9.87e-01  
 21  +4.8240e-01  +4.8240e-01  6.27e-08  1.13e-11  2.44e-09  3.62e-12  4.11e-11  9.90e-01  
 22  +4.8240e-01  +4.8240e-01  6.27e-10  1.13e-13  2.44e-11  3.72e-14  4.22e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 105.7438ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:51 PM: Optimal value: 4.824e-01
(CVXPY) Sep 20 07:40:51 PM: Compilation took 2.601e-02 seconds
(CVXPY) Sep 20 07:40:51 PM: Solver (including time spent in interface) took 1.142e-01 seconds
Iteration: 2, Objective: 0.4824
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:51 PM: Your problem has 5035 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:51 PM: Finished problem compilation (took 2.803e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5035
  constraints   = 10035
  nnz(P)        = 0
  nnz(A)        = 60044
  cones (total) = 1
    : Nonnegative = 1,  numel = 10035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.08e+02  1.00e+00  1.00e+00   ------   
  1  +5.8798e-01  +1.0514e+03  1.05e+03  4.04e-01  6.75e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3798e-01  +1.3052e+02  1.30e+02  1.56e-01  3.32e+01  1.31e-02  2.54e-01  8.67e-01  
  3  +5.0987e-01  +3.3438e+01  3.29e+01  1.21e-01  2.53e+01  3.45e-05  2.46e-01  1.65e-01  
  4  +5.0061e-01  +2.0376e+00  1.54e+00  1.04e-02  2.23e+00  4.95e-06  1.50e-01  7.58e-01  
  5  +5.0009e-01  +7.7620e-01  2.76e-01  1.85e-03  4.02e-01  1.59e-05  6.71e-02  9.34e-01  
  6  +5.0006e-01  +6.9563e-01  1.96e-01  1.31e-03  2.84e-01  1.33e-05  4.00e-02  4.86e-01  
  7  +5.0003e-01  +6.3943e-01  1.39e-01  9.24e-04  2.00e-01  1.61e-05  1.53e-02  6.71e-01  
  8  +4.9993e-01  +6.2443e-01  1.24e-01  5.44e-04  1.18e-01  7.28e-05  2.40e-03  8.59e-01  
  9  +4.9863e-01  +6.1698e-01  1.18e-01  5.90e-05  1.29e-02  8.48e-04  1.85e-04  9.31e-01  
 10  +4.9660e-01  +5.9140e-01  9.48e-02  3.47e-05  7.59e-03  6.91e-04  1.10e-04  6.01e-01  
 11  +4.9546e-01  +5.8091e-01  8.54e-02  2.90e-05  6.34e-03  3.89e-04  9.27e-05  4.47e-01  
 12  +4.9532e-01  +5.7897e-01  8.37e-02  2.80e-05  6.12e-03  3.19e-04  8.95e-05  1.71e-01  
 13  +4.9433e-01  +5.7078e-01  7.64e-02  2.53e-05  5.54e-03  1.11e-04  8.21e-05  5.39e-01  
 14  +4.9152e-01  +5.5773e-01  6.62e-02  1.84e-05  4.01e-03  8.45e-05  6.06e-05  4.07e-01  
 15  +4.8893e-01  +5.4566e-01  5.67e-02  1.48e-05  3.22e-03  4.11e-05  4.93e-05  4.77e-01  
 16  +4.8451e-01  +5.2600e-01  4.15e-02  9.92e-06  2.17e-03  1.08e-05  3.43e-05  6.73e-01  
 17  +4.7654e-01  +4.9317e-01  1.66e-02  3.44e-06  7.51e-04  7.51e-07  1.26e-05  9.14e-01  
 18  +4.7634e-01  +4.9235e-01  1.60e-02  3.30e-06  7.20e-04  7.34e-07  1.21e-05  1.31e-01  
 19  +4.7345e-01  +4.8101e-01  7.56e-03  1.49e-06  3.25e-04  3.92e-07  5.68e-06  9.90e-01  
 20  +4.7092e-01  +4.7152e-01  5.95e-04  1.16e-07  2.53e-05  2.86e-08  4.59e-07  9.30e-01  
 21  +4.7070e-01  +4.7071e-01  6.60e-06  1.29e-09  2.81e-07  3.17e-10  5.11e-09  9.89e-01  
 22  +4.7070e-01  +4.7070e-01  6.60e-08  1.29e-11  2.81e-09  3.17e-12  5.11e-11  9.90e-01  
 23  +4.7070e-01  +4.7070e-01  6.60e-10  1.29e-13  2.81e-11  3.19e-14  5.15e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 112.2743ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:51 PM: Optimal value: 4.707e-01
(CVXPY) Sep 20 07:40:51 PM: Compilation took 2.803e-02 seconds
(CVXPY) Sep 20 07:40:51 PM: Solver (including time spent in interface) took 1.214e-01 seconds
Iteration: 3, Objective: 0.4707
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:51 PM: Your problem has 5045 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:52 PM: Finished problem compilation (took 3.241e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5045
  constraints   = 10045
  nnz(P)        = 0
  nnz(A)        = 64562
  cones (total) = 1
    : Nonnegative = 1,  numel = 10045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8796e-01  +1.0514e+03  1.05e+03  4.04e-01  6.81e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3795e-01  +1.3047e+02  1.30e+02  1.56e-01  3.35e+01  1.32e-02  2.54e-01  8.67e-01  
  3  +5.0986e-01  +3.3413e+01  3.29e+01  1.20e-01  2.55e+01  3.45e-05  2.46e-01  1.65e-01  
  4  +5.0060e-01  +2.0262e+00  1.53e+00  1.04e-02  2.24e+00  4.97e-06  1.50e-01  7.63e-01  
  5  +5.0010e-01  +8.0264e-01  3.03e-01  2.03e-03  4.44e-01  1.55e-05  6.93e-02  8.92e-01  
  6  +5.0007e-01  +7.1616e-01  2.16e-01  1.45e-03  3.17e-01  1.35e-05  3.87e-02  5.79e-01  
  7  +5.0001e-01  +6.2079e-01  1.21e-01  7.56e-04  1.66e-01  2.62e-05  6.56e-03  9.00e-01  
  8  +4.9896e-01  +6.2661e-01  1.28e-01  7.79e-05  1.72e-02  6.80e-04  2.47e-04  9.67e-01  
  9  +4.9720e-01  +6.1545e-01  1.18e-01  3.78e-05  8.34e-03  1.13e-03  1.19e-04  5.94e-01  
 10  +4.9590e-01  +6.0576e-01  1.10e-01  3.32e-05  7.32e-03  9.46e-04  1.04e-04  2.26e-01  
 11  +4.9279e-01  +5.8381e-01  9.10e-02  2.67e-05  5.90e-03  5.27e-04  8.49e-05  3.93e-01  
 12  +4.9217e-01  +5.8077e-01  8.86e-02  2.64e-05  5.83e-03  4.83e-04  8.48e-05  2.76e-02  
 13  +4.8742e-01  +5.5567e-01  6.83e-02  1.82e-05  4.01e-03  3.15e-04  5.89e-05  4.10e-01  
 14  +4.8484e-01  +5.4327e-01  5.84e-02  1.45e-05  3.20e-03  2.15e-04  4.71e-05  3.51e-01  
 15  +4.8455e-01  +5.4136e-01  5.68e-02  1.39e-05  3.05e-03  1.54e-04  4.47e-05  2.71e-01  
 16  +4.8089e-01  +5.2470e-01  4.38e-02  9.57e-06  2.11e-03  5.88e-05  3.09e-05  6.38e-01  
 17  +4.8068e-01  +5.2398e-01  4.33e-02  9.51e-06  2.10e-03  5.58e-05  3.08e-05  3.04e-02  
 18  +4.7900e-01  +5.1689e-01  3.79e-02  8.02e-06  1.77e-03  1.27e-05  2.61e-05  7.22e-01  
 19  +4.7275e-01  +4.9139e-01  1.86e-02  3.58e-06  7.87e-04  3.24e-06  1.19e-05  7.92e-01  
 20  +4.6734e-01  +4.7087e-01  3.53e-03  6.30e-07  1.39e-04  4.39e-07  2.21e-06  8.94e-01  
 21  +4.6600e-01  +4.6625e-01  2.47e-04  4.33e-08  9.52e-06  1.76e-08  1.54e-07  9.90e-01  
 22  +4.6590e-01  +4.6590e-01  2.49e-06  4.36e-10  9.59e-08  1.77e-10  1.55e-09  9.90e-01  
 23  +4.6590e-01  +4.6590e-01  2.49e-08  4.36e-12  9.59e-10  1.77e-12  1.55e-11  9.90e-01  
 24  +4.6590e-01  +4.6590e-01  2.49e-10  4.36e-14  9.60e-12  1.81e-14  1.59e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 128.6595ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:52 PM: Optimal value: 4.659e-01
(CVXPY) Sep 20 07:40:52 PM: Compilation took 3.241e-02 seconds
(CVXPY) Sep 20 07:40:52 PM: Solver (including time spent in interface) took 1.381e-01 seconds
Iteration: 4, Objective: 0.4659
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:52 PM: Your problem has 5055 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:52 PM: Finished problem compilation (took 3.262e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5055
  constraints   = 10055
  nnz(P)        = 0
  nnz(A)        = 66813
  cones (total) = 1
    : Nonnegative = 1,  numel = 10055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8789e-01  +1.0515e+03  1.05e+03  4.05e-01  6.83e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3789e-01  +1.3033e+02  1.30e+02  1.56e-01  3.35e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0984e-01  +3.3376e+01  3.29e+01  1.20e-01  2.55e+01  3.45e-05  2.45e-01  1.66e-01  
  4  +5.0060e-01  +2.0266e+00  1.53e+00  1.04e-02  2.25e+00  4.98e-06  1.49e-01  7.65e-01  
  5  +5.0011e-01  +8.2763e-01  3.28e-01  2.20e-03  4.83e-01  1.55e-05  7.14e-02  8.60e-01  
  6  +5.0007e-01  +7.1652e-01  2.16e-01  1.45e-03  3.18e-01  1.36e-05  3.57e-02  6.34e-01  
  7  +5.0003e-01  +6.7546e-01  1.75e-01  1.11e-03  2.44e-01  2.57e-05  1.02e-02  7.83e-01  
  8  +4.9939e-01  +6.5120e-01  1.52e-01  1.40e-04  3.10e-02  4.19e-04  4.50e-04  9.90e-01  
  9  +4.9778e-01  +6.3887e-01  1.41e-01  5.01e-05  1.11e-02  1.02e-03  1.57e-04  6.91e-01  
 10  +4.9664e-01  +6.2817e-01  1.32e-01  4.36e-05  9.64e-03  9.20e-04  1.36e-04  1.99e-01  
 11  +4.9573e-01  +6.1765e-01  1.22e-01  3.91e-05  8.65e-03  6.73e-04  1.22e-04  2.81e-01  
 12  +4.9465e-01  +6.0797e-01  1.13e-01  3.53e-05  7.81e-03  4.78e-04  1.11e-04  2.77e-01  
 13  +4.9403e-01  +6.0218e-01  1.08e-01  3.45e-05  7.63e-03  3.64e-04  1.08e-04  1.61e-01  
 14  +4.8857e-01  +5.7308e-01  8.45e-02  2.23e-05  4.92e-03  2.74e-04  7.12e-05  4.29e-01  
 15  +4.8542e-01  +5.5761e-01  7.22e-02  1.80e-05  3.97e-03  1.96e-04  5.82e-05  2.92e-01  
 16  +4.8488e-01  +5.5410e-01  6.92e-02  1.75e-05  3.86e-03  1.45e-04  5.69e-05  1.92e-01  
 17  +4.7582e-01  +5.1287e-01  3.70e-02  8.22e-06  1.82e-03  5.28e-05  2.78e-05  6.26e-01  
 18  +4.7537e-01  +5.1060e-01  3.52e-02  7.73e-06  1.71e-03  4.29e-05  2.61e-05  1.97e-01  
 19  +4.7188e-01  +4.9527e-01  2.34e-02  4.83e-06  1.07e-03  1.45e-05  1.65e-05  6.82e-01  
 20  +4.6900e-01  +4.8346e-01  1.45e-02  2.76e-06  6.09e-04  1.16e-06  9.59e-06  9.90e-01  
 21  +4.6558e-01  +4.7086e-01  5.28e-03  9.64e-07  2.13e-04  4.08e-07  3.47e-06  6.90e-01  
 22  +4.6557e-01  +4.7079e-01  5.22e-03  9.55e-07  2.11e-04  4.01e-07  3.44e-06  4.68e-02  
 23  +4.6518e-01  +4.6926e-01  4.08e-03  7.45e-07  1.64e-04  2.93e-07  2.69e-06  4.55e-01  
 24  +4.6517e-01  +4.6921e-01  4.04e-03  7.38e-07  1.63e-04  2.89e-07  2.66e-06  3.68e-02  
 25  +4.6516e-01  +4.6912e-01  3.96e-03  7.24e-07  1.60e-04  2.76e-07  2.61e-06  2.06e-01  
 26  +4.6393e-01  +4.6472e-01  7.92e-04  1.43e-07  3.16e-05  4.83e-08  5.24e-07  9.90e-01  
 27  +4.6360e-01  +4.6362e-01  1.15e-05  2.07e-09  4.56e-07  6.92e-10  7.59e-09  9.87e-01  
 28  +4.6360e-01  +4.6360e-01  1.15e-07  2.07e-11  4.56e-09  6.92e-12  7.59e-11  9.90e-01  
 29  +4.6360e-01  +4.6360e-01  1.15e-09  2.07e-13  4.57e-11  7.08e-14  7.76e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 155.1004ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:52 PM: Optimal value: 4.636e-01
(CVXPY) Sep 20 07:40:52 PM: Compilation took 3.262e-02 seconds
(CVXPY) Sep 20 07:40:52 PM: Solver (including time spent in interface) took 1.644e-01 seconds
Iteration: 5, Objective: 0.4636
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:52 PM: Your problem has 5065 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:52 PM: Finished problem compilation (took 3.454e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5065
  constraints   = 10065
  nnz(P)        = 0
  nnz(A)        = 68245
  cones (total) = 1
    : Nonnegative = 1,  numel = 10065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8785e-01  +1.0515e+03  1.05e+03  4.05e-01  6.83e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3784e-01  +1.3023e+02  1.30e+02  1.56e-01  3.34e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0983e-01  +3.3343e+01  3.28e+01  1.20e-01  2.55e+01  3.45e-05  2.45e-01  1.67e-01  
  4  +5.0060e-01  +2.0235e+00  1.52e+00  1.04e-02  2.24e+00  4.99e-06  1.48e-01  7.67e-01  
  5  +5.0013e-01  +8.9058e-01  3.90e-01  2.63e-03  5.76e-01  1.51e-05  7.80e-02  7.76e-01  
  6  +5.0008e-01  +7.5857e-01  2.58e-01  1.73e-03  3.80e-01  1.38e-05  4.10e-02  5.90e-01  
  7  +5.0005e-01  +7.1305e-01  2.13e-01  1.36e-03  2.99e-01  2.44e-05  1.31e-02  7.43e-01  
  8  +4.9972e-01  +6.8356e-01  1.84e-01  2.91e-04  6.44e-02  2.21e-04  9.76e-04  9.90e-01  
  9  +4.9814e-01  +6.7366e-01  1.76e-01  6.30e-05  1.40e-02  9.94e-04  1.99e-04  8.07e-01  
 10  +4.9576e-01  +6.4401e-01  1.48e-01  5.06e-05  1.12e-02  6.89e-04  1.61e-04  3.34e-01  
 11  +4.9368e-01  +6.2412e-01  1.30e-01  4.09e-05  9.05e-03  4.68e-04  1.30e-04  3.90e-01  
 12  +4.9129e-01  +6.0547e-01  1.14e-01  3.40e-05  7.53e-03  2.64e-04  1.08e-04  4.16e-01  
 13  +4.9062e-01  +6.0055e-01  1.10e-01  3.32e-05  7.36e-03  2.08e-04  1.06e-04  1.45e-01  
 14  +4.8617e-01  +5.7721e-01  9.10e-02  2.47e-05  5.45e-03  1.59e-04  8.00e-05  3.18e-01  
 15  +4.8182e-01  +5.5551e-01  7.37e-02  1.83e-05  4.04e-03  1.03e-04  6.04e-05  3.74e-01  
 16  +4.8114e-01  +5.5169e-01  7.05e-02  1.75e-05  3.88e-03  6.78e-05  5.83e-05  2.82e-01  
 17  +4.7728e-01  +5.3428e-01  5.70e-02  1.31e-05  2.90e-03  4.37e-05  4.44e-05  3.83e-01  
 18  +4.7681e-01  +5.3159e-01  5.48e-02  1.26e-05  2.79e-03  3.00e-05  4.29e-05  2.80e-01  
 19  +4.7389e-01  +5.1919e-01  4.53e-02  9.99e-06  2.21e-03  2.11e-05  3.45e-05  3.11e-01  
 20  +4.7156e-01  +5.0860e-01  3.70e-02  7.68e-06  1.70e-03  5.83e-06  2.68e-05  7.70e-01  
 21  +4.6443e-01  +4.7995e-01  1.55e-02  3.04e-06  6.71e-04  1.54e-06  1.11e-05  7.74e-01  
 22  +4.6080e-01  +4.6555e-01  4.75e-03  9.02e-07  1.99e-04  2.72e-07  3.40e-06  9.90e-01  
 23  +4.6075e-01  +4.6536e-01  4.61e-03  8.74e-07  1.93e-04  2.64e-07  3.30e-06  1.05e-01  
 24  +4.5955e-01  +4.6094e-01  1.39e-03  2.63e-07  5.81e-05  7.91e-08  1.00e-06  9.90e-01  
 25  +4.5902e-01  +4.5906e-01  4.54e-05  8.57e-09  1.89e-06  2.56e-09  3.30e-08  9.76e-01  
 26  +4.5900e-01  +4.5900e-01  4.55e-07  8.59e-11  1.90e-08  2.56e-11  3.30e-10  9.90e-01  
 27  +4.5900e-01  +4.5900e-01  4.55e-09  8.59e-13  1.90e-10  2.58e-13  3.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 156.8883ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:52 PM: Optimal value: 4.590e-01
(CVXPY) Sep 20 07:40:52 PM: Compilation took 3.454e-02 seconds
(CVXPY) Sep 20 07:40:52 PM: Solver (including time spent in interface) took 1.676e-01 seconds
Iteration: 6, Objective: 0.4590
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:52 PM: Your problem has 5074 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:53 PM: Finished problem compilation (took 3.862e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5074
  constraints   = 10074
  nnz(P)        = 0
  nnz(A)        = 70195
  cones (total) = 1
    : Nonnegative = 1,  numel = 10074

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8783e-01  +1.0515e+03  1.05e+03  4.05e-01  6.84e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3781e-01  +1.3017e+02  1.30e+02  1.56e-01  3.35e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0982e-01  +3.3323e+01  3.28e+01  1.20e-01  2.55e+01  3.45e-05  2.45e-01  1.67e-01  
  4  +5.0060e-01  +2.0226e+00  1.52e+00  1.04e-02  2.25e+00  5.00e-06  1.48e-01  7.68e-01  
  5  +5.0014e-01  +9.1393e-01  4.14e-01  2.79e-03  6.12e-01  1.50e-05  8.02e-02  7.48e-01  
  6  +5.0008e-01  +7.6258e-01  2.62e-01  1.76e-03  3.87e-01  1.38e-05  4.03e-02  6.13e-01  
  7  +5.0003e-01  +7.1076e-01  2.11e-01  1.26e-03  2.78e-01  3.27e-05  8.88e-03  8.63e-01  
  8  +4.9909e-01  +7.0045e-01  2.01e-01  1.26e-04  2.79e-02  6.15e-04  4.02e-04  9.64e-01  
  9  +4.9765e-01  +6.7696e-01  1.79e-01  6.56e-05  1.46e-02  8.64e-04  2.07e-04  5.82e-01  
 10  +4.9551e-01  +6.5243e-01  1.57e-01  5.29e-05  1.17e-02  6.93e-04  1.67e-04  2.96e-01  
 11  +4.9417e-01  +6.3863e-01  1.44e-01  4.69e-05  1.04e-02  5.22e-04  1.48e-04  2.58e-01  
 12  +4.9299e-01  +6.2577e-01  1.33e-01  4.14e-05  9.19e-03  3.19e-04  1.31e-04  3.74e-01  
 13  +4.8929e-01  +5.9777e-01  1.08e-01  3.30e-05  7.31e-03  1.08e-04  1.06e-04  5.48e-01  
 14  +4.8830e-01  +5.9187e-01  1.04e-01  3.08e-05  6.83e-03  7.86e-05  9.98e-05  2.50e-01  
 15  +4.8053e-01  +5.5186e-01  7.13e-02  1.82e-05  4.02e-03  1.07e-05  6.07e-05  8.17e-01  
 16  +4.7538e-01  +5.2924e-01  5.39e-02  1.25e-05  2.77e-03  6.79e-06  4.29e-05  4.25e-01  
 17  +4.7510e-01  +5.2806e-01  5.30e-02  1.24e-05  2.74e-03  6.28e-06  4.26e-05  7.18e-02  
 18  +4.7346e-01  +5.2122e-01  4.78e-02  1.08e-05  2.38e-03  5.12e-06  3.74e-05  2.53e-01  
 19  +4.7273e-01  +5.1796e-01  4.52e-02  1.01e-05  2.23e-03  4.28e-06  3.52e-05  2.33e-01  
 20  +4.6739e-01  +4.9587e-01  2.85e-02  5.95e-06  1.32e-03  2.33e-06  2.15e-05  5.28e-01  
 21  +4.6061e-01  +4.6785e-01  7.25e-03  1.43e-06  3.16e-04  3.44e-07  5.42e-06  9.90e-01  
 22  +4.5810e-01  +4.5838e-01  2.80e-04  5.43e-08  1.20e-05  1.27e-08  2.13e-07  9.72e-01  
 23  +4.5800e-01  +4.5800e-01  2.88e-06  5.58e-10  1.24e-07  1.31e-10  2.20e-09  9.90e-01  
 24  +4.5800e-01  +4.5800e-01  2.88e-08  5.58e-12  1.24e-09  1.31e-12  2.20e-11  9.90e-01  
 25  +4.5800e-01  +4.5800e-01  2.88e-10  5.59e-14  1.24e-11  1.33e-14  2.22e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 158.4001ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:53 PM: Optimal value: 4.580e-01
(CVXPY) Sep 20 07:40:53 PM: Compilation took 3.862e-02 seconds
(CVXPY) Sep 20 07:40:53 PM: Solver (including time spent in interface) took 1.701e-01 seconds
Iteration: 7, Objective: 0.4580
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:53 PM: Your problem has 5084 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:53 PM: Finished problem compilation (took 4.164e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5084
  constraints   = 10084
  nnz(P)        = 0
  nnz(A)        = 70915
  cones (total) = 1
    : Nonnegative = 1,  numel = 10084

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8777e-01  +1.0515e+03  1.05e+03  4.05e-01  6.83e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3778e-01  +1.3010e+02  1.30e+02  1.56e-01  3.34e+01  1.32e-02  2.54e-01  8.69e-01  
  3  +5.0981e-01  +3.3312e+01  3.28e+01  1.20e-01  2.55e+01  3.46e-05  2.45e-01  1.68e-01  
  4  +5.0060e-01  +2.0255e+00  1.52e+00  1.04e-02  2.25e+00  5.00e-06  1.48e-01  7.68e-01  
  5  +5.0013e-01  +8.9107e-01  3.91e-01  2.63e-03  5.78e-01  1.54e-05  7.66e-02  7.85e-01  
  6  +5.0009e-01  +7.8373e-01  2.84e-01  1.90e-03  4.18e-01  1.53e-05  4.16e-02  5.68e-01  
  7  +5.0006e-01  +7.6165e-01  2.62e-01  1.60e-03  3.53e-01  3.00e-05  1.22e-02  8.53e-01  
  8  +4.9919e-01  +7.3085e-01  2.32e-01  1.53e-04  3.39e-02  5.57e-04  4.94e-04  9.66e-01  
  9  +4.9800e-01  +7.0110e-01  2.03e-01  8.28e-05  1.84e-02  7.27e-04  2.65e-04  5.65e-01  
 10  +4.9621e-01  +6.7428e-01  1.78e-01  6.72e-05  1.49e-02  5.87e-04  2.15e-04  2.86e-01  
 11  +4.9493e-01  +6.6015e-01  1.65e-01  5.84e-05  1.30e-02  5.14e-04  1.86e-04  2.10e-01  
 12  +4.9316e-01  +6.4008e-01  1.47e-01  4.79e-05  1.06e-02  3.51e-04  1.53e-04  3.72e-01  
 13  +4.9158e-01  +6.1439e-01  1.23e-01  3.90e-05  8.64e-03  1.64e-05  1.25e-04  8.07e-01  
 14  +4.8970e-01  +6.0402e-01  1.14e-01  3.51e-05  7.79e-03  1.35e-05  1.14e-04  2.02e-01  
 15  +4.8145e-01  +5.6010e-01  7.86e-02  2.08e-05  4.60e-03  2.90e-06  6.95e-05  8.67e-01  
 16  +4.7580e-01  +5.3433e-01  5.85e-02  1.41e-05  3.13e-03  2.17e-06  4.85e-05  3.80e-01  
 17  +4.7487e-01  +5.3036e-01  5.55e-02  1.29e-05  2.86e-03  2.14e-06  4.44e-05  2.17e-01  
 18  +4.7347e-01  +5.2359e-01  5.01e-02  1.12e-05  2.48e-03  2.15e-06  3.89e-05  6.36e-01  
 19  +4.6825e-01  +5.0163e-01  3.34e-02  7.04e-06  1.56e-03  1.49e-06  2.52e-05  6.52e-01  
 20  +4.6340e-01  +4.8161e-01  1.82e-02  3.70e-06  8.19e-04  8.07e-07  1.37e-05  5.13e-01  
 21  +4.5969e-01  +4.6608e-01  6.38e-03  1.26e-06  2.78e-04  3.39e-07  4.81e-06  9.90e-01  
 22  +4.5760e-01  +4.5816e-01  5.54e-04  1.08e-07  2.40e-05  2.88e-08  4.25e-07  9.27e-01  
 23  +4.5740e-01  +4.5741e-01  5.67e-06  1.11e-09  2.45e-07  2.95e-10  4.36e-09  9.90e-01  
 24  +4.5740e-01  +4.5740e-01  5.68e-08  1.11e-11  2.45e-09  2.95e-12  4.36e-11  9.90e-01  
 25  +4.5740e-01  +4.5740e-01  5.68e-10  1.11e-13  2.45e-11  2.96e-14  4.39e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 166.1112ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:53 PM: Optimal value: 4.574e-01
(CVXPY) Sep 20 07:40:53 PM: Compilation took 4.164e-02 seconds
(CVXPY) Sep 20 07:40:53 PM: Solver (including time spent in interface) took 1.779e-01 seconds
Iteration: 8, Objective: 0.4574
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:53 PM: Your problem has 5094 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:53 PM: Finished problem compilation (took 4.257e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5094
  constraints   = 10094
  nnz(P)        = 0
  nnz(A)        = 72431
  cones (total) = 1
    : Nonnegative = 1,  numel = 10094

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8771e-01  +1.0516e+03  1.05e+03  4.05e-01  6.84e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3773e-01  +1.3001e+02  1.29e+02  1.56e-01  3.33e+01  1.32e-02  2.54e-01  8.69e-01  
  3  +5.0980e-01  +3.3296e+01  3.28e+01  1.20e-01  2.54e+01  3.46e-05  2.45e-01  1.68e-01  
  4  +5.0060e-01  +2.0294e+00  1.53e+00  1.04e-02  2.26e+00  5.01e-06  1.48e-01  7.67e-01  
  5  +5.0017e-01  +9.7875e-01  4.79e-01  3.23e-03  7.09e-01  1.48e-05  8.59e-02  6.80e-01  
  6  +5.0009e-01  +7.8351e-01  2.83e-01  1.90e-03  4.18e-01  1.44e-05  4.10e-02  6.08e-01  
  7  +5.0006e-01  +7.7404e-01  2.74e-01  1.67e-03  3.68e-01  3.19e-05  1.23e-02  8.06e-01  
  8  +4.9922e-01  +7.3052e-01  2.31e-01  1.59e-04  3.54e-02  5.39e-04  5.14e-04  9.77e-01  
  9  +4.9805e-01  +7.0531e-01  2.07e-01  8.87e-05  1.97e-02  7.09e-04  2.83e-04  5.54e-01  
 10  +4.9690e-01  +6.9102e-01  1.94e-01  7.58e-05  1.69e-02  6.60e-04  2.43e-04  2.07e-01  
 11  +4.9476e-01  +6.6125e-01  1.66e-01  6.27e-05  1.39e-02  3.94e-04  2.03e-04  3.86e-01  
 12  +4.9238e-01  +6.4095e-01  1.49e-01  5.02e-05  1.11e-02  2.90e-04  1.63e-04  3.60e-01  
 13  +4.9138e-01  +6.2978e-01  1.38e-01  4.54e-05  1.01e-02  1.61e-04  1.48e-04  3.99e-01  
 14  +4.8968e-01  +6.1628e-01  1.27e-01  4.26e-05  9.46e-03  8.01e-05  1.41e-04  3.64e-01  
 15  +4.8334e-01  +5.8156e-01  9.82e-02  2.81e-05  6.24e-03  5.82e-05  9.56e-05  3.98e-01  
 16  +4.7746e-01  +5.5048e-01  7.30e-02  1.93e-05  4.27e-03  3.47e-05  6.71e-05  4.11e-01  
 17  +4.7720e-01  +5.4885e-01  7.16e-02  1.83e-05  4.05e-03  2.83e-05  6.31e-05  2.33e-01  
 18  +4.7596e-01  +5.4184e-01  6.59e-02  1.58e-05  3.49e-03  9.76e-06  5.45e-05  6.86e-01  
 19  +4.7249e-01  +5.2641e-01  5.39e-02  1.22e-05  2.69e-03  4.60e-06  4.26e-05  6.37e-01  
 20  +4.7064e-01  +5.1811e-01  4.75e-02  1.04e-05  2.31e-03  3.59e-06  3.69e-05  3.34e-01  
 21  +4.6359e-01  +4.8625e-01  2.27e-02  4.72e-06  1.04e-03  1.26e-06  1.75e-05  8.21e-01  
 22  +4.5914e-01  +4.6774e-01  8.60e-03  1.74e-06  3.84e-04  4.62e-07  6.70e-06  6.95e-01  
 23  +4.5654e-01  +4.5724e-01  6.94e-04  1.38e-07  3.06e-05  3.51e-08  5.49e-07  9.55e-01  
 24  +4.5630e-01  +4.5631e-01  8.02e-06  1.59e-09  3.52e-07  4.04e-10  6.36e-09  9.89e-01  
 25  +4.5630e-01  +4.5630e-01  8.03e-08  1.59e-11  3.53e-09  4.04e-12  6.37e-11  9.90e-01  
 26  +4.5630e-01  +4.5630e-01  8.03e-10  1.59e-13  3.53e-11  4.08e-14  6.42e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 182.9757ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:53 PM: Optimal value: 4.563e-01
(CVXPY) Sep 20 07:40:53 PM: Compilation took 4.257e-02 seconds
(CVXPY) Sep 20 07:40:53 PM: Solver (including time spent in interface) took 1.954e-01 seconds
Iteration: 9, Objective: 0.4563
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:54 PM: Your problem has 5100 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:54 PM: Finished problem compilation (took 4.327e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5100
  constraints   = 10100
  nnz(P)        = 0
  nnz(A)        = 73567
  cones (total) = 1
    : Nonnegative = 1,  numel = 10100

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8763e-01  +1.0519e+03  1.05e+03  4.06e-01  6.85e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3765e-01  +1.2985e+02  1.29e+02  1.56e-01  3.34e+01  1.32e-02  2.54e-01  8.70e-01  
  3  +5.0979e-01  +3.3269e+01  3.28e+01  1.20e-01  2.55e+01  3.47e-05  2.45e-01  1.69e-01  
  4  +5.0061e-01  +2.0377e+00  1.54e+00  1.05e-02  2.28e+00  5.02e-06  1.48e-01  7.67e-01  
  5  +5.0016e-01  +9.6205e-01  4.62e-01  3.12e-03  6.85e-01  1.54e-05  8.23e-02  7.16e-01  
  6  +5.0011e-01  +8.3229e-01  3.32e-01  2.23e-03  4.91e-01  1.64e-05  4.49e-02  5.20e-01  
  7  +5.0010e-01  +8.8684e-01  3.87e-01  2.19e-03  4.84e-01  3.37e-05  1.32e-02  9.90e-01  
  8  +4.9939e-01  +8.2699e-01  3.28e-01  2.13e-04  4.75e-02  4.50e-04  6.98e-04  9.53e-01  
  9  +4.9853e-01  +7.6450e-01  2.66e-01  1.24e-04  2.77e-02  4.39e-04  4.04e-04  5.67e-01  
 10  +4.9641e-01  +7.0904e-01  2.13e-01  9.04e-05  2.01e-02  2.74e-04  2.95e-04  4.66e-01  
 11  +4.9446e-01  +6.6802e-01  1.74e-01  7.53e-05  1.68e-02  8.95e-05  2.46e-04  5.45e-01  
 12  +4.9258e-01  +6.5216e-01  1.60e-01  6.11e-05  1.36e-02  7.17e-05  1.99e-04  3.48e-01  
 13  +4.9062e-01  +6.3869e-01  1.48e-01  4.99e-05  1.11e-02  6.02e-05  1.64e-04  3.11e-01  
 14  +4.9017e-01  +6.3601e-01  1.46e-01  4.97e-05  1.10e-02  5.74e-05  1.64e-04  1.62e-02  
 15  +4.8198e-01  +5.8402e-01  1.02e-01  2.95e-05  6.54e-03  1.28e-05  1.01e-04  7.71e-01  
 16  +4.8089e-01  +5.7540e-01  9.45e-02  2.64e-05  5.87e-03  7.35e-06  9.00e-05  5.10e-01  
 17  +4.7635e-01  +5.5119e-01  7.48e-02  1.95e-05  4.34e-03  2.03e-06  6.78e-05  9.90e-01  
 18  +4.7015e-01  +5.2045e-01  5.03e-02  1.20e-05  2.66e-03  1.42e-06  4.28e-05  4.13e-01  
 19  +4.6964e-01  +5.1809e-01  4.84e-02  1.17e-05  2.60e-03  1.42e-06  4.24e-05  1.33e-01  
 20  +4.6852e-01  +5.1306e-01  4.45e-02  1.04e-05  2.31e-03  1.38e-06  3.78e-05  1.76e-01  
 21  +4.6803e-01  +5.1047e-01  4.24e-02  9.77e-06  2.17e-03  1.56e-06  3.53e-05  4.18e-01  
 22  +4.6269e-01  +4.8707e-01  2.44e-02  5.20e-06  1.15e-03  9.38e-07  1.94e-05  5.24e-01  
 23  +4.5680e-01  +4.6117e-01  4.37e-03  8.90e-07  1.97e-04  2.05e-07  3.52e-06  9.83e-01  
 24  +4.5542e-01  +4.5576e-01  3.38e-04  6.83e-08  1.51e-05  1.57e-08  2.76e-07  9.30e-01  
 25  +4.5530e-01  +4.5530e-01  3.55e-06  7.17e-10  1.59e-07  1.65e-10  2.90e-09  9.90e-01  
 26  +4.5530e-01  +4.5530e-01  3.55e-08  7.17e-12  1.59e-09  1.65e-12  2.90e-11  9.90e-01  
 27  +4.5530e-01  +4.5530e-01  3.55e-10  7.17e-14  1.59e-11  1.67e-14  2.93e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 186.0888ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:54 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:54 PM: Optimal value: 4.553e-01
(CVXPY) Sep 20 07:40:54 PM: Compilation took 4.327e-02 seconds
(CVXPY) Sep 20 07:40:54 PM: Solver (including time spent in interface) took 1.988e-01 seconds
Iteration: 10, Objective: 0.4553
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:54 PM: Your problem has 5110 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:54 PM: Finished problem compilation (took 4.519e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5110
  constraints   = 10110
  nnz(P)        = 0
  nnz(A)        = 75284
  cones (total) = 1
    : Nonnegative = 1,  numel = 10110

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8761e-01  +1.0520e+03  1.05e+03  4.06e-01  6.85e+01  3.86e-03  5.45e-01  6.10e-01  
  2  +5.3763e-01  +1.2983e+02  1.29e+02  1.56e-01  3.33e+01  1.32e-02  2.54e-01  8.70e-01  
  3  +5.0979e-01  +3.3266e+01  3.28e+01  1.20e-01  2.54e+01  3.47e-05  2.45e-01  1.70e-01  
  4  +5.0061e-01  +2.0409e+00  1.54e+00  1.05e-02  2.28e+00  5.03e-06  1.48e-01  7.66e-01  
  5  +5.0016e-01  +9.5071e-01  4.51e-01  3.04e-03  6.70e-01  1.56e-05  8.09e-02  7.32e-01  
  6  +5.0010e-01  +8.2334e-01  3.23e-01  2.17e-03  4.78e-01  1.71e-05  4.22e-02  5.47e-01  
  7  +5.0009e-01  +8.7666e-01  3.77e-01  2.02e-03  4.46e-01  4.13e-05  1.10e-02  9.90e-01  
  8  +4.9931e-01  +8.3712e-01  3.38e-01  2.16e-04  4.81e-02  4.97e-04  7.06e-04  9.41e-01  
  9  +4.9833e-01  +7.6284e-01  2.65e-01  1.22e-04  2.71e-02  4.56e-04  3.96e-04  5.98e-01  
 10  +4.9662e-01  +7.1870e-01  2.22e-01  9.73e-05  2.17e-02  3.05e-04  3.18e-04  3.60e-01  
 11  +4.9523e-01  +6.9810e-01  2.03e-01  8.41e-05  1.87e-02  2.53e-04  2.74e-04  2.29e-01  
 12  +4.9310e-01  +6.7046e-01  1.77e-01  6.76e-05  1.51e-02  1.76e-04  2.20e-04  3.68e-01  
 13  +4.9006e-01  +6.4115e-01  1.51e-01  5.02e-05  1.12e-02  1.07e-04  1.65e-04  4.81e-01  
 14  +4.8969e-01  +6.3671e-01  1.47e-01  4.78e-05  1.06e-02  8.40e-05  1.57e-04  2.15e-01  
 15  +4.8441e-01  +6.0047e-01  1.16e-01  3.60e-05  7.99e-03  3.29e-05  1.22e-04  5.22e-01  
 16  +4.7883e-01  +5.6913e-01  9.03e-02  2.54e-05  5.63e-03  2.22e-05  8.77e-05  3.73e-01  
 17  +4.7748e-01  +5.5988e-01  8.24e-02  2.16e-05  4.80e-03  1.22e-05  7.43e-05  5.25e-01  
 18  +4.7579e-01  +5.5040e-01  7.46e-02  1.87e-05  4.14e-03  5.20e-06  6.47e-05  6.74e-01  
 19  +4.7448e-01  +5.4402e-01  6.95e-02  1.74e-05  3.86e-03  4.24e-06  6.07e-05  2.77e-01  
 20  +4.6909e-01  +5.1707e-01  4.80e-02  1.09e-05  2.43e-03  2.47e-06  3.90e-05  6.93e-01  
 21  +4.6836e-01  +5.1370e-01  4.53e-02  1.02e-05  2.26e-03  2.31e-06  3.64e-05  1.90e-01  
 22  +4.6618e-01  +5.0219e-01  3.60e-02  7.86e-06  1.74e-03  1.72e-06  2.84e-05  9.90e-01  
 23  +4.6185e-01  +4.8401e-01  2.22e-02  4.68e-06  1.04e-03  1.05e-06  1.74e-05  5.07e-01  
 24  +4.5656e-01  +4.6157e-01  5.01e-03  1.03e-06  2.28e-04  2.36e-07  4.02e-06  8.85e-01  
 25  +4.5508e-01  +4.5559e-01  5.14e-04  1.04e-07  2.31e-05  2.42e-08  4.19e-07  9.23e-01  
 26  +4.5490e-01  +4.5491e-01  6.17e-06  1.25e-09  2.76e-07  2.91e-10  5.04e-09  9.89e-01  
 27  +4.5490e-01  +4.5490e-01  6.17e-08  1.25e-11  2.76e-09  2.91e-12  5.05e-11  9.90e-01  
 28  +4.5490e-01  +4.5490e-01  6.18e-10  1.25e-13  2.77e-11  2.96e-14  5.13e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 189.5401ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:54 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:54 PM: Optimal value: 4.549e-01
(CVXPY) Sep 20 07:40:54 PM: Compilation took 4.519e-02 seconds
(CVXPY) Sep 20 07:40:54 PM: Solver (including time spent in interface) took 2.020e-01 seconds
Iteration: 11, Objective: 0.4549
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:54 PM: Your problem has 5114 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:54 PM: Finished problem compilation (took 4.100e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5114
  constraints   = 10114
  nnz(P)        = 0
  nnz(A)        = 75882
  cones (total) = 1
    : Nonnegative = 1,  numel = 10114

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8761e-01  +1.0519e+03  1.05e+03  4.06e-01  6.85e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3763e-01  +1.2982e+02  1.29e+02  1.56e-01  3.33e+01  1.32e-02  2.54e-01  8.70e-01  
  3  +5.0978e-01  +3.3256e+01  3.27e+01  1.20e-01  2.54e+01  3.47e-05  2.45e-01  1.70e-01  
  4  +5.0061e-01  +2.0381e+00  1.54e+00  1.05e-02  2.28e+00  5.03e-06  1.48e-01  7.67e-01  
  5  +5.0015e-01  +9.2718e-01  4.27e-01  2.88e-03  6.35e-01  1.58e-05  7.78e-02  7.63e-01  
  6  +5.0010e-01  +8.1156e-01  3.11e-01  2.09e-03  4.61e-01  1.82e-05  3.81e-02  5.88e-01  
  7  +5.0010e-01  +8.7767e-01  3.78e-01  2.13e-03  4.70e-01  3.30e-05  1.26e-02  9.90e-01  
  8  +4.9940e-01  +8.3850e-01  3.39e-01  2.17e-04  4.84e-02  4.48e-04  7.08e-04  9.47e-01  
  9  +4.9856e-01  +7.7083e-01  2.72e-01  1.28e-04  2.86e-02  4.18e-04  4.16e-04  5.62e-01  
 10  +4.9711e-01  +7.3679e-01  2.40e-01  1.03e-04  2.29e-02  3.47e-04  3.35e-04  2.95e-01  
 11  +4.9541e-01  +7.1012e-01  2.15e-01  8.73e-05  1.95e-02  2.84e-04  2.85e-04  2.32e-01  
 12  +4.9379e-01  +6.7453e-01  1.81e-01  7.33e-05  1.63e-02  1.26e-04  2.39e-04  4.67e-01  
 13  +4.9126e-01  +6.4673e-01  1.55e-01  5.55e-05  1.24e-02  7.18e-05  1.82e-04  5.09e-01  
 14  +4.9081e-01  +6.4058e-01  1.50e-01  5.07e-05  1.13e-02  5.00e-05  1.66e-04  3.35e-01  
 15  +4.8808e-01  +6.1618e-01  1.28e-01  4.49e-05  9.99e-03  8.85e-06  1.50e-04  6.53e-01  
 16  +4.8306e-01  +5.8921e-01  1.06e-01  3.20e-05  7.12e-03  6.73e-06  1.09e-04  4.31e-01  
 17  +4.8259e-01  +5.8582e-01  1.03e-01  3.08e-05  6.84e-03  5.68e-06  1.05e-04  2.49e-01  
 18  +4.8022e-01  +5.7353e-01  9.33e-02  2.66e-05  5.91e-03  4.87e-06  9.13e-05  2.29e-01  
 19  +4.7565e-01  +5.4994e-01  7.43e-02  1.94e-05  4.31e-03  3.46e-06  6.77e-05  4.79e-01  
 20  +4.7394e-01  +5.4166e-01  6.77e-02  1.70e-05  3.78e-03  2.95e-06  5.99e-05  4.15e-01  
 21  +4.6802e-01  +5.1102e-01  4.30e-02  9.83e-06  2.18e-03  1.79e-06  3.52e-05  9.90e-01  
 22  +4.6720e-01  +5.0751e-01  4.03e-02  9.04e-06  2.01e-03  1.70e-06  3.25e-05  1.27e-01  
 23  +4.6670e-01  +5.0513e-01  3.84e-02  8.69e-06  1.93e-03  1.65e-06  3.14e-05  2.96e-01  
 24  +4.6207e-01  +4.8510e-01  2.30e-02  4.93e-06  1.10e-03  1.01e-06  1.83e-05  5.20e-01  
 25  +4.5930e-01  +4.7319e-01  1.39e-02  2.92e-06  6.48e-04  6.22e-07  1.11e-05  4.97e-01  
 26  +4.5910e-01  +4.7212e-01  1.30e-02  2.72e-06  6.03e-04  6.04e-07  1.03e-05  2.93e-01  
 27  +4.5643e-01  +4.6084e-01  4.41e-03  9.04e-07  2.01e-04  2.25e-07  3.53e-06  9.90e-01  
 28  +4.5505e-01  +4.5548e-01  4.25e-04  8.60e-08  1.91e-05  2.10e-08  3.47e-07  9.90e-01  
 29  +4.5490e-01  +4.5491e-01  5.30e-06  1.07e-09  2.38e-07  2.62e-10  4.34e-09  9.88e-01  
 30  +4.5490e-01  +4.5490e-01  5.32e-08  1.07e-11  2.38e-09  2.62e-12  4.35e-11  9.90e-01  
 31  +4.5490e-01  +4.5490e-01  5.32e-10  1.07e-13  2.38e-11  2.71e-14  4.49e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 203.5266ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:55 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:55 PM: Optimal value: 4.549e-01
(CVXPY) Sep 20 07:40:55 PM: Compilation took 4.100e-02 seconds
(CVXPY) Sep 20 07:40:55 PM: Solver (including time spent in interface) took 2.160e-01 seconds
Iteration: 12, Objective: 0.4549
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:55 PM: Your problem has 5116 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:55 PM: Finished problem compilation (took 4.006e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5116
  constraints   = 10116
  nnz(P)        = 0
  nnz(A)        = 76222
  cones (total) = 1
    : Nonnegative = 1,  numel = 10116

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8762e-01  +1.0518e+03  1.05e+03  4.06e-01  6.85e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3763e-01  +1.2981e+02  1.29e+02  1.56e-01  3.33e+01  1.32e-02  2.54e-01  8.70e-01  
  3  +5.0978e-01  +3.3253e+01  3.27e+01  1.20e-01  2.54e+01  3.47e-05  2.45e-01  1.70e-01  
  4  +5.0061e-01  +2.0382e+00  1.54e+00  1.05e-02  2.28e+00  5.03e-06  1.48e-01  7.67e-01  
  5  +5.0015e-01  +9.3416e-01  4.34e-01  2.93e-03  6.45e-01  1.57e-05  7.86e-02  7.54e-01  
  6  +5.0010e-01  +8.0881e-01  3.09e-01  2.07e-03  4.57e-01  1.80e-05  3.77e-02  6.00e-01  
  7  +5.0010e-01  +8.7775e-01  3.78e-01  2.14e-03  4.72e-01  3.21e-05  1.27e-02  9.90e-01  
  8  +4.9941e-01  +8.3874e-01  3.39e-01  2.17e-04  4.85e-02  4.40e-04  7.09e-04  9.47e-01  
  9  +4.9859e-01  +7.7147e-01  2.73e-01  1.29e-04  2.88e-02  4.09e-04  4.19e-04  5.59e-01  
 10  +4.9718e-01  +7.3789e-01  2.41e-01  1.04e-04  2.31e-02  3.42e-04  3.37e-04  2.94e-01  
 11  +4.9545e-01  +7.1059e-01  2.15e-01  8.76e-05  1.95e-02  2.80e-04  2.85e-04  2.36e-01  
 12  +4.9390e-01  +6.7543e-01  1.82e-01  7.40e-05  1.65e-02  1.23e-04  2.41e-04  4.63e-01  
 13  +4.9155e-01  +6.4964e-01  1.58e-01  5.72e-05  1.27e-02  7.49e-05  1.87e-04  4.73e-01  
 14  +4.9097e-01  +6.4159e-01  1.51e-01  5.12e-05  1.14e-02  4.88e-05  1.67e-04  3.82e-01  
 15  +4.8948e-01  +6.2974e-01  1.40e-01  4.92e-05  1.09e-02  3.06e-05  1.63e-04  2.63e-01  
 16  +4.8552e-01  +6.0678e-01  1.21e-01  3.78e-05  8.41e-03  2.47e-05  1.27e-04  3.06e-01  
 17  +4.8547e-01  +6.0558e-01  1.20e-01  3.76e-05  8.36e-03  2.22e-05  1.26e-04  8.96e-02  
 18  +4.7911e-01  +5.7044e-01  9.13e-02  2.54e-05  5.64e-03  1.44e-05  8.76e-05  4.15e-01  
 19  +4.7729e-01  +5.5952e-01  8.22e-02  2.16e-05  4.81e-03  8.64e-06  7.46e-05  4.81e-01  
 20  +4.7539e-01  +5.4892e-01  7.35e-02  1.85e-05  4.12e-03  5.23e-06  6.44e-05  5.24e-01  
 21  +4.7313e-01  +5.3630e-01  6.32e-02  1.53e-05  3.40e-03  2.81e-06  5.36e-05  8.12e-01  
 22  +4.6558e-01  +5.0109e-01  3.55e-02  7.90e-06  1.75e-03  1.55e-06  2.87e-05  5.45e-01  
 23  +4.6546e-01  +5.0047e-01  3.50e-02  7.88e-06  1.75e-03  1.51e-06  2.86e-05  2.88e-02  
 24  +4.6453e-01  +4.9630e-01  3.18e-02  6.95e-06  1.54e-03  1.42e-06  2.53e-05  2.87e-01  
 25  +4.6009e-01  +4.7668e-01  1.66e-02  3.54e-06  7.85e-04  7.43e-07  1.33e-05  6.49e-01  
 26  +4.5815e-01  +4.6821e-01  1.01e-02  2.10e-06  4.66e-04  4.71e-07  8.02e-06  6.08e-01  
 27  +4.5811e-01  +4.6800e-01  9.89e-03  2.07e-06  4.59e-04  4.63e-07  7.92e-06  4.77e-02  
 28  +4.5813e-01  +4.6808e-01  9.94e-03  2.07e-06  4.59e-04  4.69e-07  7.90e-06  4.40e-02  
 29  +4.5602e-01  +4.5922e-01  3.19e-03  6.53e-07  1.45e-04  1.62e-07  2.57e-06  9.90e-01  
 30  +4.5533e-01  +4.5652e-01  1.20e-03  2.42e-07  5.37e-05  6.03e-08  9.69e-07  9.90e-01  
 31  +4.5492e-01  +4.5499e-01  6.34e-05  1.28e-08  2.84e-06  3.15e-09  5.18e-08  9.54e-01  
 32  +4.5490e-01  +4.5490e-01  6.96e-07  1.41e-10  3.12e-08  3.45e-11  5.69e-10  9.90e-01  
 33  +4.5490e-01  +4.5490e-01  6.98e-09  1.41e-12  3.13e-10  3.46e-13  5.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 209.2809ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:55 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:55 PM: Optimal value: 4.549e-01
(CVXPY) Sep 20 07:40:55 PM: Compilation took 4.006e-02 seconds
(CVXPY) Sep 20 07:40:55 PM: Solver (including time spent in interface) took 2.206e-01 seconds
FULL MODEL:
  Accruacy: 0.5226
  Our objective: 0.04520000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.0022)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 0 AND x5 = 0)                                             <-- (term's our objective: 0.0168)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0022)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0044)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.0022)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.005)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0034)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.0032)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 10.503417015075684
Best over terms:
  Our final objective: 0.01680000000000001
    Its accruacy: 0.5084
    Its hamming distance: 4
  Shortest hamming distance: 4
    Its our objective: 0.01680000000000001
  Highest accruacy: 0.5084
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

