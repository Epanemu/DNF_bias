Command:
python test_script.py -s constant_subclass -d 9 -n 10000 --seed 43 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0021999999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 9.

Computed total variation: 0.1772
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:25 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:25 PM: Finished problem compilation (took 2.764e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 60019
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +5.0012e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +1.0852e+03  1.08e+03  4.32e-01  7.56e+01  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3196e-01  +1.2314e+02  1.23e+02  1.71e-01  3.84e+01  1.63e-02  2.77e-01  9.29e-01  
  3  +5.0884e-01  +3.2064e+01  3.16e+01  1.24e-01  2.77e+01  4.48e-05  2.59e-01  2.72e-01  
  4  +5.0107e-01  +3.2004e+00  2.70e+00  1.83e-02  4.17e+00  5.75e-06  1.71e-01  5.87e-01  
  5  +5.0008e-01  +8.8847e-01  3.88e-01  2.60e-03  6.05e-01  3.70e-05  1.04e-01  9.90e-01  
  6  +5.0001e-01  +5.5704e-01  5.70e-02  3.81e-04  8.88e-02  6.59e-06  2.01e-02  8.21e-01  
  7  +5.0000e-01  +5.4421e-01  4.42e-02  2.94e-04  6.87e-02  6.80e-06  9.05e-03  6.76e-01  
  8  +4.9993e-01  +5.3306e-01  3.31e-02  1.55e-04  3.62e-02  4.23e-05  7.71e-04  9.57e-01  
  9  +4.9819e-01  +5.2918e-01  3.10e-02  1.01e-05  2.38e-03  8.78e-04  3.28e-05  9.58e-01  
 10  +4.9696e-01  +5.2262e-01  2.57e-02  7.55e-06  1.77e-03  6.66e-04  2.51e-05  3.14e-01  
 11  +4.9544e-01  +5.1410e-01  1.87e-02  5.23e-06  1.23e-03  1.65e-04  1.84e-05  6.12e-01  
 12  +4.9465e-01  +5.1046e-01  1.58e-02  4.15e-06  9.73e-04  4.71e-05  1.50e-05  6.32e-01  
 13  +4.9211e-01  +5.0005e-01  7.94e-03  1.79e-06  4.18e-04  1.58e-05  6.82e-06  6.66e-01  
 14  +4.9175e-01  +4.9848e-01  6.73e-03  1.47e-06  3.43e-04  3.13e-06  5.61e-06  7.92e-01  
 15  +4.8983e-01  +4.9104e-01  1.22e-03  2.46e-07  5.76e-05  4.66e-07  9.92e-07  8.46e-01  
 16  +4.8956e-01  +4.8999e-01  4.29e-04  8.60e-08  2.01e-05  2.70e-08  3.49e-07  9.88e-01  
 17  +4.8940e-01  +4.8941e-01  4.64e-06  9.28e-10  2.18e-07  2.86e-10  3.79e-09  9.90e-01  
 18  +4.8940e-01  +4.8940e-01  4.64e-08  9.28e-12  2.18e-09  2.86e-12  3.79e-11  9.90e-01  
 19  +4.8940e-01  +4.8940e-01  4.64e-10  9.28e-14  2.18e-11  2.95e-14  3.89e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 83.5637ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:25 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:25 PM: Optimal value: 4.894e-01
(CVXPY) Sep 20 08:00:25 PM: Compilation took 2.764e-02 seconds
(CVXPY) Sep 20 08:00:25 PM: Solver (including time spent in interface) took 9.191e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4894
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:25 PM: Your problem has 5029 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:25 PM: Finished problem compilation (took 2.829e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5029
  constraints   = 10029
  nnz(P)        = 0
  nnz(A)        = 67281
  cones (total) = 1
    : Nonnegative = 1,  numel = 10029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8088e-01  +1.0854e+03  1.08e+03  4.32e-01  7.72e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3189e-01  +1.2299e+02  1.22e+02  1.71e-01  3.91e+01  1.63e-02  2.77e-01  9.30e-01  
  3  +5.0882e-01  +3.2018e+01  3.15e+01  1.24e-01  2.82e+01  4.49e-05  2.59e-01  2.74e-01  
  4  +5.0107e-01  +3.1969e+00  2.70e+00  1.83e-02  4.25e+00  5.76e-06  1.70e-01  5.89e-01  
  5  +5.0009e-01  +8.9731e-01  3.97e-01  2.66e-03  6.32e-01  3.72e-05  1.03e-01  9.90e-01  
  6  +5.0002e-01  +6.2885e-01  1.29e-01  8.61e-04  2.05e-01  1.35e-05  3.97e-02  6.37e-01  
  7  +5.0003e-01  +6.0654e-01  1.07e-01  7.11e-04  1.69e-01  6.79e-06  2.24e-02  8.90e-01  
  8  +5.0000e-01  +5.4459e-01  4.46e-02  2.92e-04  6.95e-02  7.29e-06  4.13e-03  8.95e-01  
  9  +4.9945e-01  +5.5982e-01  6.04e-02  3.98e-05  9.53e-03  2.85e-04  1.29e-04  9.85e-01  
 10  +4.9866e-01  +5.5109e-01  5.24e-02  2.20e-05  5.27e-03  3.68e-04  7.04e-05  5.13e-01  
 11  +4.9816e-01  +5.4594e-01  4.78e-02  1.94e-05  4.64e-03  3.21e-04  6.19e-05  1.60e-01  
 12  +4.9809e-01  +5.4059e-01  4.25e-02  1.86e-05  4.45e-03  1.51e-04  5.92e-05  3.40e-01  
 13  +4.9811e-01  +5.3862e-01  4.05e-02  1.80e-05  4.31e-03  1.00e-04  5.74e-05  2.52e-01  
 14  +4.9814e-01  +5.3727e-01  3.91e-02  1.75e-05  4.18e-03  6.47e-05  5.54e-05  2.96e-01  
 15  +4.9654e-01  +5.2691e-01  3.04e-02  9.90e-06  2.37e-03  5.95e-05  3.14e-05  4.87e-01  
 16  +4.9613e-01  +5.2478e-01  2.87e-02  9.22e-06  2.21e-03  3.68e-05  2.93e-05  3.27e-01  
 17  +4.9554e-01  +5.2144e-01  2.59e-02  7.77e-06  1.86e-03  2.50e-05  2.46e-05  3.59e-01  
 18  +4.9438e-01  +5.1472e-01  2.03e-02  5.46e-06  1.31e-03  2.81e-07  1.72e-05  9.15e-01  
 19  +4.9261e-01  +5.0606e-01  1.34e-02  3.24e-06  7.77e-04  2.71e-07  1.02e-05  5.19e-01  
 20  +4.9213e-01  +5.0374e-01  1.16e-02  2.67e-06  6.40e-04  2.86e-07  8.38e-06  2.91e-01  
 21  +4.9100e-01  +4.9811e-01  7.11e-03  1.46e-06  3.49e-04  3.86e-07  4.50e-06  9.90e-01  
 22  +4.8989e-01  +4.9371e-01  3.83e-03  6.96e-07  1.67e-04  2.27e-07  2.17e-06  6.15e-01  
 23  +4.8960e-01  +4.9239e-01  2.79e-03  5.23e-07  1.25e-04  1.81e-07  1.63e-06  9.28e-01  
 24  +4.8862e-01  +4.8885e-01  2.26e-04  4.05e-08  9.69e-06  1.16e-08  1.27e-07  9.62e-01  
 25  +4.8855e-01  +4.8856e-01  4.91e-06  8.76e-10  2.10e-07  2.52e-10  2.75e-09  9.78e-01  
 26  +4.8855e-01  +4.8855e-01  4.91e-08  8.77e-12  2.10e-09  2.52e-12  2.76e-11  9.90e-01  
 27  +4.8855e-01  +4.8855e-01  4.91e-10  8.77e-14  2.10e-11  2.59e-14  2.84e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 146.2396ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:25 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:25 PM: Optimal value: 4.886e-01
(CVXPY) Sep 20 08:00:25 PM: Compilation took 2.829e-02 seconds
(CVXPY) Sep 20 08:00:25 PM: Solver (including time spent in interface) took 1.555e-01 seconds
Iteration: 2, Objective: 0.4886
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:25 PM: Your problem has 5039 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:25 PM: Finished problem compilation (took 3.283e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5039
  constraints   = 10039
  nnz(P)        = 0
  nnz(A)        = 71511
  cones (total) = 1
    : Nonnegative = 1,  numel = 10039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +1.0854e+03  1.08e+03  4.32e-01  7.77e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3184e-01  +1.2290e+02  1.22e+02  1.71e-01  3.93e+01  1.63e-02  2.77e-01  9.31e-01  
  3  +5.0881e-01  +3.1979e+01  3.15e+01  1.24e-01  2.83e+01  4.49e-05  2.59e-01  2.76e-01  
  4  +5.0106e-01  +3.1861e+00  2.69e+00  1.83e-02  4.27e+00  5.77e-06  1.69e-01  5.93e-01  
  5  +5.0009e-01  +9.1159e-01  4.11e-01  2.76e-03  6.60e-01  3.75e-05  1.01e-01  9.90e-01  
  6  +5.0002e-01  +6.3664e-01  1.37e-01  9.14e-04  2.19e-01  1.53e-05  3.74e-02  6.49e-01  
  7  +5.0001e-01  +5.9762e-01  9.76e-02  6.49e-04  1.55e-01  1.39e-05  1.38e-02  8.51e-01  
  8  +4.9990e-01  +5.7082e-01  7.09e-02  3.31e-04  7.96e-02  6.63e-05  1.56e-03  9.01e-01  
  9  +4.9770e-01  +5.6307e-01  6.54e-02  2.62e-05  6.32e-03  1.11e-03  8.15e-05  9.48e-01  
 10  +4.9732e-01  +5.6026e-01  6.29e-02  2.36e-05  5.70e-03  1.01e-03  7.31e-05  1.89e-01  
 11  +4.9694e-01  +5.5625e-01  5.93e-02  2.16e-05  5.21e-03  7.58e-04  6.67e-05  2.64e-01  
 12  +4.9648e-01  +5.5250e-01  5.60e-02  1.91e-05  4.60e-03  5.33e-04  5.88e-05  3.44e-01  
 13  +4.9618e-01  +5.4955e-01  5.34e-02  1.78e-05  4.30e-03  3.49e-04  5.48e-05  3.16e-01  
 14  +4.9508e-01  +5.4330e-01  4.82e-02  1.43e-05  3.45e-03  1.76e-04  4.41e-05  5.45e-01  
 15  +4.9364e-01  +5.3611e-01  4.25e-02  1.10e-05  2.65e-03  2.03e-06  3.37e-05  9.09e-01  
 16  +4.9193e-01  +5.2917e-01  3.72e-02  8.81e-06  2.12e-03  1.78e-06  2.73e-05  3.40e-01  
 17  +4.9122e-01  +5.2591e-01  3.47e-02  8.35e-06  2.01e-03  1.55e-06  2.60e-05  4.05e-01  
 18  +4.8534e-01  +5.0230e-01  1.70e-02  3.34e-06  8.05e-04  8.11e-07  1.07e-05  6.30e-01  
 19  +4.8132e-01  +4.8674e-01  5.42e-03  9.88e-07  2.38e-04  2.55e-07  3.27e-06  7.28e-01  
 20  +4.7939e-01  +4.7982e-01  4.25e-04  7.35e-08  1.77e-05  2.51e-08  2.55e-07  9.89e-01  
 21  +4.7920e-01  +4.7921e-01  4.42e-06  7.59e-10  1.83e-07  2.59e-10  2.66e-09  9.90e-01  
 22  +4.7920e-01  +4.7920e-01  4.42e-08  7.59e-12  1.83e-09  2.59e-12  2.66e-11  9.90e-01  
 23  +4.7920e-01  +4.7920e-01  4.42e-10  7.61e-14  1.83e-11  2.79e-14  2.85e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 133.2274ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:25 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:25 PM: Optimal value: 4.792e-01
(CVXPY) Sep 20 08:00:25 PM: Compilation took 3.283e-02 seconds
(CVXPY) Sep 20 08:00:25 PM: Solver (including time spent in interface) took 1.426e-01 seconds
Iteration: 3, Objective: 0.4792
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:25 PM: Your problem has 5049 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:26 PM: Finished problem compilation (took 3.627e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5049
  constraints   = 10049
  nnz(P)        = 0
  nnz(A)        = 75251
  cones (total) = 1
    : Nonnegative = 1,  numel = 10049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.8080e-01  +1.0855e+03  1.08e+03  4.32e-01  7.81e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3181e-01  +1.2283e+02  1.22e+02  1.71e-01  3.94e+01  1.63e-02  2.77e-01  9.31e-01  
  3  +5.0880e-01  +3.1959e+01  3.15e+01  1.24e-01  2.84e+01  4.50e-05  2.58e-01  2.76e-01  
  4  +5.0106e-01  +3.1829e+00  2.68e+00  1.82e-02  4.28e+00  5.78e-06  1.69e-01  5.94e-01  
  5  +5.0009e-01  +9.1819e-01  4.18e-01  2.81e-03  6.74e-01  3.77e-05  1.00e-01  9.90e-01  
  6  +5.0003e-01  +6.6200e-01  1.62e-01  1.08e-03  2.61e-01  1.81e-05  4.14e-02  6.08e-01  
  7  +5.0000e-01  +6.1069e-01  1.11e-01  7.35e-04  1.77e-01  2.08e-05  1.44e-02  7.49e-01  
  8  +4.9967e-01  +5.9963e-01  1.00e-01  3.02e-04  7.29e-02  1.84e-04  1.15e-03  9.49e-01  
  9  +4.9562e-01  +5.8464e-01  8.90e-02  2.75e-05  6.67e-03  2.03e-03  8.71e-05  9.25e-01  
 10  +4.9400e-01  +5.6845e-01  7.44e-02  2.20e-05  5.33e-03  1.22e-03  6.90e-05  4.07e-01  
 11  +4.9330e-01  +5.6283e-01  6.95e-02  1.93e-05  4.68e-03  9.22e-04  6.02e-05  2.94e-01  
 12  +4.9309e-01  +5.6035e-01  6.73e-02  1.90e-05  4.60e-03  7.27e-04  5.94e-05  1.46e-01  
 13  +4.9026e-01  +5.4472e-01  5.45e-02  1.34e-05  3.24e-03  2.91e-04  4.20e-05  6.29e-01  
 14  +4.8673e-01  +5.2862e-01  4.19e-02  9.68e-06  2.35e-03  1.97e-04  3.08e-05  3.28e-01  
 15  +4.8555e-01  +5.2004e-01  3.45e-02  7.73e-06  1.87e-03  2.04e-06  2.47e-05  8.77e-01  
 16  +4.8099e-01  +5.0148e-01  2.05e-02  4.35e-06  1.05e-03  1.13e-06  1.41e-05  4.88e-01  
 17  +4.7965e-01  +4.9544e-01  1.58e-02  3.17e-06  7.67e-04  8.97e-07  1.03e-05  9.90e-01  
 18  +4.7480e-01  +4.7638e-01  1.57e-03  3.12e-07  7.56e-05  7.46e-08  1.05e-06  9.19e-01  
 19  +4.7427e-01  +4.7435e-01  7.05e-05  1.41e-08  3.41e-06  3.23e-09  4.79e-08  9.68e-01  
 20  +4.7425e-01  +4.7425e-01  7.80e-07  1.56e-10  3.77e-08  3.60e-11  5.32e-10  9.89e-01  
 21  +4.7425e-01  +4.7425e-01  7.80e-09  1.56e-12  3.77e-10  3.60e-13  5.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 131.8305ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:26 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:26 PM: Optimal value: 4.743e-01
(CVXPY) Sep 20 08:00:26 PM: Compilation took 3.627e-02 seconds
(CVXPY) Sep 20 08:00:26 PM: Solver (including time spent in interface) took 1.430e-01 seconds
Iteration: 4, Objective: 0.4743
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:26 PM: Your problem has 5059 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:26 PM: Finished problem compilation (took 3.757e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5059
  constraints   = 10059
  nnz(P)        = 0
  nnz(A)        = 77132
  cones (total) = 1
    : Nonnegative = 1,  numel = 10059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.8077e-01  +1.0855e+03  1.08e+03  4.33e-01  7.81e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3176e-01  +1.2275e+02  1.22e+02  1.71e-01  3.94e+01  1.63e-02  2.77e-01  9.31e-01  
  3  +5.0879e-01  +3.1929e+01  3.14e+01  1.23e-01  2.84e+01  4.50e-05  2.58e-01  2.78e-01  
  4  +5.0106e-01  +3.1794e+00  2.68e+00  1.82e-02  4.28e+00  5.79e-06  1.69e-01  5.95e-01  
  5  +5.0010e-01  +9.2635e-01  4.26e-01  2.86e-03  6.88e-01  3.79e-05  9.93e-02  9.90e-01  
  6  +5.0003e-01  +6.6809e-01  1.68e-01  1.13e-03  2.71e-01  1.92e-05  4.01e-02  6.30e-01  
  7  +5.0001e-01  +6.4541e-01  1.45e-01  9.69e-04  2.33e-01  2.37e-05  2.06e-02  5.46e-01  
  8  +4.9979e-01  +6.0624e-01  1.06e-01  4.64e-04  1.12e-01  1.26e-04  2.08e-03  9.21e-01  
  9  +4.9652e-01  +5.9627e-01  9.97e-02  4.41e-05  1.07e-02  1.68e-03  1.39e-04  9.33e-01  
 10  +4.9490e-01  +5.8698e-01  9.21e-02  3.17e-05  7.69e-03  1.72e-03  9.94e-05  3.80e-01  
 11  +4.9478e-01  +5.8057e-01  8.58e-02  2.99e-05  7.24e-03  8.46e-04  9.41e-05  4.21e-01  
 12  +4.9220e-01  +5.6548e-01  7.33e-02  2.15e-05  5.22e-03  4.95e-04  6.81e-05  5.49e-01  
 13  +4.9217e-01  +5.6525e-01  7.31e-02  2.13e-05  5.17e-03  4.25e-04  6.72e-05  1.32e-01  
 14  +4.8607e-01  +5.3841e-01  5.23e-02  1.26e-05  3.05e-03  2.45e-04  4.05e-05  5.43e-01  
 15  +4.8123e-01  +5.1692e-01  3.57e-02  7.90e-06  1.91e-03  2.62e-06  2.59e-05  8.79e-01  
 16  +4.7246e-01  +4.8206e-01  9.59e-03  1.88e-06  4.56e-04  4.43e-07  6.43e-06  9.35e-01  
 17  +4.7034e-01  +4.7420e-01  3.86e-03  7.37e-07  1.78e-04  1.85e-07  2.58e-06  6.71e-01  
 18  +4.7010e-01  +4.7323e-01  3.14e-03  5.98e-07  1.45e-04  1.75e-07  2.11e-06  7.12e-01  
 19  +4.6895e-01  +4.6906e-01  1.19e-04  2.24e-08  5.43e-06  6.35e-09  8.07e-08  9.68e-01  
 20  +4.6890e-01  +4.6890e-01  1.20e-06  2.27e-10  5.49e-08  6.40e-11  8.18e-10  9.90e-01  
 21  +4.6890e-01  +4.6890e-01  1.20e-08  2.27e-12  5.49e-10  6.40e-13  8.18e-12  9.90e-01  
 22  +4.6890e-01  +4.6890e-01  1.20e-10  2.26e-14  5.49e-12  6.45e-15  8.25e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 136.7429ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:26 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:26 PM: Optimal value: 4.689e-01
(CVXPY) Sep 20 08:00:26 PM: Compilation took 3.757e-02 seconds
(CVXPY) Sep 20 08:00:26 PM: Solver (including time spent in interface) took 1.479e-01 seconds
Iteration: 5, Objective: 0.4689
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:26 PM: Your problem has 5069 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:26 PM: Finished problem compilation (took 3.983e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5069
  constraints   = 10069
  nnz(P)        = 0
  nnz(A)        = 79354
  cones (total) = 1
    : Nonnegative = 1,  numel = 10069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.8071e-01  +1.0855e+03  1.08e+03  4.33e-01  7.82e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3171e-01  +1.2265e+02  1.22e+02  1.71e-01  3.94e+01  1.63e-02  2.77e-01  9.32e-01  
  3  +5.0877e-01  +3.1896e+01  3.14e+01  1.23e-01  2.84e+01  4.50e-05  2.58e-01  2.79e-01  
  4  +5.0106e-01  +3.1746e+00  2.67e+00  1.82e-02  4.28e+00  5.80e-06  1.68e-01  5.98e-01  
  5  +5.0010e-01  +9.3717e-01  4.37e-01  2.94e-03  7.07e-01  3.82e-05  9.81e-02  9.90e-01  
  6  +5.0003e-01  +6.8401e-01  1.84e-01  1.23e-03  2.97e-01  2.14e-05  4.02e-02  6.29e-01  
  7  +4.9998e-01  +6.4108e-01  1.41e-01  9.14e-04  2.20e-01  3.93e-05  1.03e-02  8.43e-01  
  8  +4.9815e-01  +6.2606e-01  1.28e-01  1.05e-04  2.55e-02  9.40e-04  3.37e-04  9.74e-01  
  9  +4.9696e-01  +6.1875e-01  1.22e-01  6.94e-05  1.69e-02  1.25e-03  2.20e-04  3.68e-01  
 10  +4.9606e-01  +6.0473e-01  1.09e-01  4.73e-05  1.15e-02  9.61e-04  1.48e-04  6.01e-01  
 11  +4.9602e-01  +5.9930e-01  1.03e-01  4.32e-05  1.05e-02  5.90e-04  1.34e-04  3.98e-01  
 12  +4.9440e-01  +5.9024e-01  9.58e-02  3.33e-05  8.10e-03  6.00e-04  1.03e-04  2.78e-01  
 13  +4.9387e-01  +5.8455e-01  9.07e-02  2.98e-05  7.24e-03  2.59e-04  9.25e-05  5.43e-01  
 14  +4.9190e-01  +5.7485e-01  8.29e-02  2.44e-05  5.93e-03  2.24e-04  7.63e-05  2.61e-01  
 15  +4.9097e-01  +5.6940e-01  7.84e-02  2.32e-05  5.64e-03  1.23e-04  7.29e-05  3.53e-01  
 16  +4.8727e-01  +5.5249e-01  6.52e-02  1.72e-05  4.17e-03  8.50e-05  5.46e-05  3.84e-01  
 17  +4.8711e-01  +5.5128e-01  6.42e-02  1.66e-05  4.03e-03  5.62e-05  5.27e-05  3.08e-01  
 18  +4.8063e-01  +5.2324e-01  4.26e-02  9.70e-06  2.35e-03  3.48e-05  3.16e-05  4.39e-01  
 19  +4.7766e-01  +5.0951e-01  3.19e-02  6.69e-06  1.62e-03  5.11e-06  2.20e-05  8.42e-01  
 20  +4.7485e-01  +4.9782e-01  2.30e-02  4.56e-06  1.11e-03  1.16e-06  1.52e-05  9.90e-01  
 21  +4.6938e-01  +4.7680e-01  7.43e-03  1.40e-06  3.39e-04  3.71e-07  4.86e-06  7.12e-01  
 22  +4.6714e-01  +4.6872e-01  1.59e-03  2.87e-07  6.97e-05  9.48e-08  1.04e-06  9.90e-01  
 23  +4.6652e-01  +4.6656e-01  4.55e-05  8.18e-09  1.98e-06  2.61e-09  2.99e-08  9.76e-01  
 24  +4.6650e-01  +4.6650e-01  4.55e-07  8.18e-11  1.98e-08  2.61e-11  2.99e-10  9.90e-01  
 25  +4.6650e-01  +4.6650e-01  4.55e-09  8.18e-13  1.98e-10  2.61e-13  2.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 157.9371ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:26 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:26 PM: Optimal value: 4.665e-01
(CVXPY) Sep 20 08:00:26 PM: Compilation took 3.983e-02 seconds
(CVXPY) Sep 20 08:00:26 PM: Solver (including time spent in interface) took 1.690e-01 seconds
Iteration: 6, Objective: 0.4665
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:27 PM: Your problem has 5079 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:27 PM: Finished problem compilation (took 3.909e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5079
  constraints   = 10079
  nnz(P)        = 0
  nnz(A)        = 81748
  cones (total) = 1
    : Nonnegative = 1,  numel = 10079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8070e-01  +1.0855e+03  1.08e+03  4.33e-01  7.83e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3170e-01  +1.2261e+02  1.22e+02  1.71e-01  3.94e+01  1.63e-02  2.77e-01  9.32e-01  
  3  +5.0877e-01  +3.1880e+01  3.14e+01  1.23e-01  2.84e+01  4.50e-05  2.58e-01  2.80e-01  
  4  +5.0106e-01  +3.1704e+00  2.67e+00  1.82e-02  4.28e+00  5.80e-06  1.68e-01  5.99e-01  
  5  +5.0010e-01  +9.4192e-01  4.42e-01  2.97e-03  7.16e-01  3.82e-05  9.74e-02  9.90e-01  
  6  +5.0003e-01  +6.8296e-01  1.83e-01  1.23e-03  2.96e-01  2.16e-05  3.88e-02  6.36e-01  
  7  +4.9999e-01  +6.6018e-01  1.60e-01  1.05e-03  2.53e-01  3.71e-05  1.31e-02  7.62e-01  
  8  +4.9883e-01  +6.3123e-01  1.32e-01  1.67e-04  4.06e-02  6.06e-04  5.48e-04  9.69e-01  
  9  +4.9607e-01  +6.1675e-01  1.21e-01  5.53e-05  1.35e-02  1.59e-03  1.74e-04  6.94e-01  
 10  +4.9471e-01  +6.0581e-01  1.11e-01  4.25e-05  1.04e-02  1.49e-03  1.33e-04  3.38e-01  
 11  +4.9462e-01  +6.0331e-01  1.09e-01  4.07e-05  9.90e-03  1.32e-03  1.27e-04  1.44e-01  
 12  +4.9331e-01  +5.9282e-01  9.95e-02  3.15e-05  7.66e-03  1.01e-03  9.73e-05  4.37e-01  
 13  +4.9326e-01  +5.9205e-01  9.88e-02  3.12e-05  7.61e-03  9.45e-04  9.66e-05  5.46e-02  
 14  +4.9273e-01  +5.8653e-01  9.38e-02  2.91e-05  7.08e-03  5.64e-04  9.00e-05  3.61e-01  
 15  +4.8993e-01  +5.6767e-01  7.77e-02  2.17e-05  5.27e-03  6.27e-06  6.75e-05  8.84e-01  
 16  +4.8708e-01  +5.5518e-01  6.81e-02  1.76e-05  4.29e-03  5.18e-06  5.55e-05  2.72e-01  
 17  +4.7986e-01  +5.2356e-01  4.37e-02  9.84e-06  2.39e-03  2.59e-06  3.18e-05  6.52e-01  
 18  +4.7939e-01  +5.2124e-01  4.19e-02  9.28e-06  2.26e-03  2.35e-06  3.00e-05  3.13e-01  
 19  +4.7263e-01  +4.9379e-01  2.12e-02  4.33e-06  1.05e-03  1.12e-06  1.44e-05  5.81e-01  
 20  +4.6733e-01  +4.7281e-01  5.48e-03  1.06e-06  2.58e-04  2.84e-07  3.63e-06  7.99e-01  
 21  +4.6556e-01  +4.6601e-01  4.50e-04  8.59e-08  2.09e-05  2.42e-08  2.97e-07  9.48e-01  
 22  +4.6540e-01  +4.6541e-01  5.47e-06  1.04e-09  2.54e-07  2.99e-10  3.61e-09  9.90e-01  
 23  +4.6540e-01  +4.6540e-01  5.47e-08  1.04e-11  2.54e-09  2.99e-12  3.61e-11  9.90e-01  
 24  +4.6540e-01  +4.6540e-01  5.47e-10  1.04e-13  2.54e-11  3.01e-14  3.63e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 151.2871ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:27 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:27 PM: Optimal value: 4.654e-01
(CVXPY) Sep 20 08:00:27 PM: Compilation took 3.909e-02 seconds
(CVXPY) Sep 20 08:00:27 PM: Solver (including time spent in interface) took 1.630e-01 seconds
Iteration: 7, Objective: 0.4654
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:27 PM: Your problem has 5089 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:27 PM: Finished problem compilation (took 3.774e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5089
  constraints   = 10089
  nnz(P)        = 0
  nnz(A)        = 83105
  cones (total) = 1
    : Nonnegative = 1,  numel = 10089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8066e-01  +1.0854e+03  1.08e+03  4.33e-01  7.82e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3166e-01  +1.2253e+02  1.22e+02  1.70e-01  3.93e+01  1.63e-02  2.76e-01  9.33e-01  
  3  +5.0876e-01  +3.1853e+01  3.13e+01  1.23e-01  2.84e+01  4.51e-05  2.57e-01  2.81e-01  
  4  +5.0105e-01  +3.1646e+00  2.66e+00  1.82e-02  4.28e+00  5.81e-06  1.67e-01  6.01e-01  
  5  +5.0010e-01  +9.5112e-01  4.51e-01  3.04e-03  7.31e-01  3.85e-05  9.63e-02  9.90e-01  
  6  +5.0003e-01  +6.9930e-01  1.99e-01  1.34e-03  3.23e-01  2.37e-05  3.93e-02  6.29e-01  
  7  +4.9998e-01  +6.7729e-01  1.77e-01  1.14e-03  2.75e-01  4.81e-05  1.16e-02  7.98e-01  
  8  +4.9860e-01  +6.5793e-01  1.59e-01  1.82e-04  4.43e-02  7.21e-04  5.95e-04  9.53e-01  
  9  +4.9628e-01  +6.4218e-01  1.46e-01  7.54e-05  1.84e-02  1.48e-03  2.39e-04  6.20e-01  
 10  +4.9683e-01  +6.3466e-01  1.38e-01  6.90e-05  1.68e-02  9.50e-04  2.15e-04  3.85e-01  
 11  +4.9523e-01  +6.2221e-01  1.27e-01  4.94e-05  1.21e-02  9.97e-04  1.53e-04  3.68e-01  
 12  +4.9470e-01  +6.0884e-01  1.14e-01  4.20e-05  1.02e-02  4.29e-04  1.29e-04  5.67e-01  
 13  +4.9423e-01  +6.0518e-01  1.11e-01  3.94e-05  9.61e-03  3.77e-04  1.21e-04  1.55e-01  
 14  +4.9221e-01  +5.9468e-01  1.02e-01  3.18e-05  7.74e-03  3.55e-04  9.80e-05  2.50e-01  
 15  +4.9187e-01  +5.9278e-01  1.01e-01  3.15e-05  7.68e-03  3.21e-04  9.75e-05  6.25e-02  
 16  +4.8566e-01  +5.6035e-01  7.47e-02  1.91e-05  4.65e-03  7.87e-05  6.00e-05  7.85e-01  
 17  +4.7971e-01  +5.3298e-01  5.33e-02  1.24e-05  3.02e-03  2.15e-05  3.98e-05  6.78e-01  
 18  +4.7313e-01  +5.0509e-01  3.20e-02  6.82e-06  1.66e-03  9.09e-06  2.24e-05  5.89e-01  
 19  +4.6992e-01  +4.9107e-01  2.12e-02  4.21e-06  1.03e-03  1.06e-06  1.40e-05  9.90e-01  
 20  +4.6490e-01  +4.7150e-01  6.60e-03  1.28e-06  3.12e-04  3.89e-07  4.35e-06  9.90e-01  
 21  +4.6268e-01  +4.6303e-01  3.55e-04  6.86e-08  1.67e-05  2.01e-08  2.36e-07  9.49e-01  
 22  +4.6255e-01  +4.6256e-01  8.24e-06  1.59e-09  3.88e-07  4.66e-10  5.50e-09  9.77e-01  
 23  +4.6255e-01  +4.6255e-01  8.24e-08  1.59e-11  3.88e-09  4.66e-12  5.50e-11  9.90e-01  
 24  +4.6255e-01  +4.6255e-01  8.29e-10  1.60e-13  3.90e-11  4.66e-14  5.50e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 151.8946ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:27 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:27 PM: Optimal value: 4.626e-01
(CVXPY) Sep 20 08:00:27 PM: Compilation took 3.774e-02 seconds
(CVXPY) Sep 20 08:00:27 PM: Solver (including time spent in interface) took 1.620e-01 seconds
Iteration: 8, Objective: 0.4626
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:27 PM: Your problem has 5099 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:27 PM: Finished problem compilation (took 3.762e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5099
  constraints   = 10099
  nnz(P)        = 0
  nnz(A)        = 84264
  cones (total) = 1
    : Nonnegative = 1,  numel = 10099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8062e-01  +1.0855e+03  1.08e+03  4.33e-01  7.82e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3162e-01  +1.2244e+02  1.22e+02  1.70e-01  3.92e+01  1.63e-02  2.76e-01  9.33e-01  
  3  +5.0874e-01  +3.1824e+01  3.13e+01  1.23e-01  2.83e+01  4.51e-05  2.57e-01  2.82e-01  
  4  +5.0105e-01  +3.1645e+00  2.66e+00  1.82e-02  4.28e+00  5.82e-06  1.67e-01  6.02e-01  
  5  +5.0011e-01  +9.5856e-01  4.58e-01  3.09e-03  7.44e-01  3.88e-05  9.57e-02  9.90e-01  
  6  +5.0003e-01  +7.0108e-01  2.01e-01  1.35e-03  3.26e-01  2.44e-05  3.78e-02  6.45e-01  
  7  +4.9997e-01  +6.8131e-01  1.81e-01  1.15e-03  2.79e-01  5.30e-05  1.08e-02  7.97e-01  
  8  +4.9715e-01  +6.4762e-01  1.50e-01  9.00e-05  2.19e-02  1.43e-03  2.84e-04  9.81e-01  
  9  +4.9494e-01  +6.3128e-01  1.36e-01  5.59e-05  1.36e-02  1.73e-03  1.74e-04  4.54e-01  
 10  +4.9407e-01  +6.2069e-01  1.27e-01  4.59e-05  1.12e-02  1.35e-03  1.42e-04  3.84e-01  
 11  +4.9258e-01  +6.0931e-01  1.17e-01  3.69e-05  9.00e-03  1.06e-03  1.14e-04  3.77e-01  
 12  +4.9239e-01  +6.0772e-01  1.15e-01  3.67e-05  8.95e-03  9.88e-04  1.13e-04  4.62e-02  
 13  +4.8943e-01  +5.9204e-01  1.03e-01  2.87e-05  6.99e-03  8.20e-04  8.90e-05  3.15e-01  
 14  +4.8651e-01  +5.7314e-01  8.66e-02  2.35e-05  5.72e-03  3.00e-04  7.39e-05  5.32e-01  
 15  +4.8151e-01  +5.4735e-01  6.58e-02  1.64e-05  3.99e-03  3.22e-06  5.25e-05  8.57e-01  
 16  +4.7295e-01  +5.1107e-01  3.81e-02  8.40e-06  2.04e-03  1.81e-06  2.77e-05  5.14e-01  
 17  +4.6604e-01  +4.8220e-01  1.62e-02  3.29e-06  8.01e-04  7.68e-07  1.12e-05  7.53e-01  
 18  +4.6382e-01  +4.7298e-01  9.17e-03  1.83e-06  4.46e-04  4.61e-07  6.29e-06  6.04e-01  
 19  +4.6170e-01  +4.6452e-01  2.82e-03  5.58e-07  1.36e-04  1.55e-07  1.95e-06  8.72e-01  
 20  +4.6094e-01  +4.6161e-01  6.74e-04  1.33e-07  3.23e-05  3.70e-08  4.70e-07  7.94e-01  
 21  +4.6070e-01  +4.6072e-01  1.15e-05  2.27e-09  5.54e-07  6.36e-10  8.07e-09  9.90e-01  
 22  +4.6070e-01  +4.6070e-01  1.15e-07  2.27e-11  5.54e-09  6.36e-12  8.07e-11  9.90e-01  
 23  +4.6070e-01  +4.6070e-01  1.16e-09  2.29e-13  5.58e-11  6.36e-14  8.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 143.3267ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:27 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:27 PM: Optimal value: 4.607e-01
(CVXPY) Sep 20 08:00:27 PM: Compilation took 3.762e-02 seconds
(CVXPY) Sep 20 08:00:27 PM: Solver (including time spent in interface) took 1.537e-01 seconds
Iteration: 9, Objective: 0.4607
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:28 PM: Your problem has 5109 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:28 PM: Finished problem compilation (took 3.930e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5109
  constraints   = 10109
  nnz(P)        = 0
  nnz(A)        = 85957
  cones (total) = 1
    : Nonnegative = 1,  numel = 10109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8059e-01  +1.0855e+03  1.08e+03  4.33e-01  7.82e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3159e-01  +1.2239e+02  1.22e+02  1.70e-01  3.92e+01  1.63e-02  2.76e-01  9.34e-01  
  3  +5.0874e-01  +3.1808e+01  3.13e+01  1.23e-01  2.83e+01  4.51e-05  2.57e-01  2.82e-01  
  4  +5.0105e-01  +3.1638e+00  2.66e+00  1.82e-02  4.28e+00  5.82e-06  1.66e-01  6.02e-01  
  5  +5.0011e-01  +9.6201e-01  4.62e-01  3.11e-03  7.50e-01  3.88e-05  9.53e-02  9.90e-01  
  6  +5.0003e-01  +7.0306e-01  2.03e-01  1.36e-03  3.29e-01  2.49e-05  3.73e-02  6.45e-01  
  7  +4.9995e-01  +6.8451e-01  1.85e-01  1.16e-03  2.80e-01  5.97e-05  9.82e-03  8.14e-01  
  8  +4.9734e-01  +6.6152e-01  1.64e-01  1.09e-04  2.65e-02  1.34e-03  3.42e-04  9.68e-01  
  9  +4.9442e-01  +6.3045e-01  1.36e-01  4.92e-05  1.20e-02  1.64e-03  1.52e-04  7.38e-01  
 10  +4.9415e-01  +6.2487e-01  1.31e-01  4.61e-05  1.12e-02  1.30e-03  1.42e-04  2.25e-01  
 11  +4.9292e-01  +6.1764e-01  1.25e-01  3.95e-05  9.63e-03  1.21e-03  1.22e-04  2.30e-01  
 12  +4.9255e-01  +6.1373e-01  1.21e-01  3.89e-05  9.48e-03  9.88e-04  1.20e-04  1.28e-01  
 13  +4.8931e-01  +5.9606e-01  1.07e-01  3.03e-05  7.39e-03  8.01e-04  9.44e-05  3.15e-01  
 14  +4.8911e-01  +5.9337e-01  1.04e-01  3.00e-05  7.30e-03  6.37e-04  9.34e-05  1.48e-01  
 15  +4.8153e-01  +5.5631e-01  7.48e-02  1.83e-05  4.47e-03  4.08e-04  5.86e-05  4.53e-01  
 16  +4.7545e-01  +5.2662e-01  5.12e-02  1.17e-05  2.84e-03  6.93e-05  3.82e-05  7.48e-01  
 17  +4.7018e-01  +5.0427e-01  3.41e-02  7.34e-06  1.79e-03  4.08e-05  2.46e-05  4.14e-01  
 18  +4.6530e-01  +4.8295e-01  1.77e-02  3.55e-06  8.64e-04  6.23e-07  1.21e-05  9.90e-01  
 19  +4.6098e-01  +4.6602e-01  5.04e-03  9.95e-07  2.42e-04  1.89e-07  3.47e-06  7.49e-01  
 20  +4.5954e-01  +4.6043e-01  8.86e-04  1.74e-07  4.23e-05  4.07e-08  6.15e-07  9.00e-01  
 21  +4.5925e-01  +4.5936e-01  1.10e-04  2.10e-08  5.11e-06  5.96e-09  7.83e-08  9.85e-01  
 22  +4.5920e-01  +4.5920e-01  1.44e-06  2.71e-10  6.59e-08  7.62e-11  1.03e-09  9.90e-01  
 23  +4.5920e-01  +4.5920e-01  1.44e-08  2.71e-12  6.59e-10  7.62e-13  1.03e-11  9.90e-01  
 24  +4.5920e-01  +4.5920e-01  1.47e-10  2.75e-14  6.69e-12  1.38e-14  1.81e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 149.259ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:28 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:28 PM: Optimal value: 4.592e-01
(CVXPY) Sep 20 08:00:28 PM: Compilation took 3.930e-02 seconds
(CVXPY) Sep 20 08:00:28 PM: Solver (including time spent in interface) took 1.602e-01 seconds
Iteration: 10, Objective: 0.4592
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:28 PM: Your problem has 5119 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:28 PM: Finished problem compilation (took 4.072e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5119
  constraints   = 10119
  nnz(P)        = 0
  nnz(A)        = 87390
  cones (total) = 1
    : Nonnegative = 1,  numel = 10119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8053e-01  +1.0856e+03  1.09e+03  4.33e-01  7.82e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3155e-01  +1.2232e+02  1.22e+02  1.70e-01  3.91e+01  1.63e-02  2.76e-01  9.34e-01  
  3  +5.0873e-01  +3.1793e+01  3.13e+01  1.23e-01  2.83e+01  4.52e-05  2.57e-01  2.84e-01  
  4  +5.0105e-01  +3.1638e+00  2.66e+00  1.82e-02  4.28e+00  5.83e-06  1.66e-01  6.03e-01  
  5  +5.0011e-01  +9.7027e-01  4.70e-01  3.17e-03  7.64e-01  3.91e-05  9.46e-02  9.90e-01  
  6  +5.0004e-01  +7.2802e-01  2.28e-01  1.53e-03  3.70e-01  2.70e-05  4.00e-02  6.16e-01  
  7  +4.9990e-01  +6.6770e-01  1.68e-01  9.77e-04  2.36e-01  8.15e-05  6.30e-03  9.11e-01  
  8  +4.9643e-01  +6.5668e-01  1.60e-01  8.25e-05  2.01e-02  1.76e-03  2.57e-04  9.60e-01  
  9  +4.9433e-01  +6.3946e-01  1.45e-01  5.27e-05  1.29e-02  1.78e-03  1.63e-04  5.40e-01  
 10  +4.9360e-01  +6.3111e-01  1.38e-01  4.68e-05  1.14e-02  1.40e-03  1.44e-04  2.90e-01  
 11  +4.9329e-01  +6.2596e-01  1.33e-01  4.58e-05  1.12e-02  1.06e-03  1.41e-04  1.81e-01  
 12  +4.8833e-01  +5.9974e-01  1.11e-01  3.12e-05  7.61e-03  9.32e-04  9.77e-05  3.78e-01  
 13  +4.8815e-01  +5.9751e-01  1.09e-01  3.09e-05  7.55e-03  7.92e-04  9.70e-05  1.05e-01  
 14  +4.8072e-01  +5.6088e-01  8.02e-02  2.00e-05  4.88e-03  5.23e-04  6.47e-05  3.94e-01  
 15  +4.7287e-01  +5.2460e-01  5.17e-02  1.18e-05  2.88e-03  2.76e-04  3.96e-05  4.63e-01  
 16  +4.6797e-01  +5.0106e-01  3.31e-02  7.08e-06  1.72e-03  1.59e-05  2.42e-05  9.00e-01  
 17  +4.6109e-01  +4.7272e-01  1.16e-02  2.38e-06  5.80e-04  4.69e-06  8.56e-06  6.85e-01  
 18  +4.6034e-01  +4.6948e-01  9.14e-03  1.82e-06  4.44e-04  1.87e-06  6.64e-06  6.88e-01  
 19  +4.6018e-01  +4.6885e-01  8.67e-03  1.73e-06  4.22e-04  1.52e-06  6.32e-06  2.30e-01  
 20  +4.5837e-01  +4.6190e-01  3.53e-03  6.94e-07  1.69e-04  5.97e-07  2.61e-06  6.05e-01  
 21  +4.5714e-01  +4.5725e-01  1.11e-04  2.16e-08  5.25e-06  8.67e-09  8.37e-08  9.90e-01  
 22  +4.5710e-01  +4.5710e-01  1.11e-06  2.17e-10  5.27e-08  8.70e-11  8.42e-10  9.90e-01  
 23  +4.5710e-01  +4.5710e-01  1.11e-08  2.17e-12  5.27e-10  8.70e-13  8.42e-12  9.90e-01  
 24  +4.5710e-01  +4.5710e-01  1.12e-10  2.16e-14  5.28e-12  9.04e-15  8.74e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 151.8343ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:28 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:28 PM: Optimal value: 4.571e-01
(CVXPY) Sep 20 08:00:28 PM: Compilation took 4.072e-02 seconds
(CVXPY) Sep 20 08:00:28 PM: Solver (including time spent in interface) took 1.624e-01 seconds
Iteration: 11, Objective: 0.4571
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:28 PM: Your problem has 5129 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:28 PM: Finished problem compilation (took 3.946e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5129
  constraints   = 10129
  nnz(P)        = 0
  nnz(A)        = 88004
  cones (total) = 1
    : Nonnegative = 1,  numel = 10129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8047e-01  +1.0855e+03  1.08e+03  4.34e-01  7.82e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3150e-01  +1.2221e+02  1.22e+02  1.70e-01  3.90e+01  1.64e-02  2.76e-01  9.35e-01  
  3  +5.0872e-01  +3.1764e+01  3.13e+01  1.23e-01  2.82e+01  4.52e-05  2.56e-01  2.85e-01  
  4  +5.0105e-01  +3.1614e+00  2.66e+00  1.82e-02  4.28e+00  5.84e-06  1.65e-01  6.05e-01  
  5  +5.0011e-01  +9.7685e-01  4.77e-01  3.22e-03  7.75e-01  3.93e-05  9.38e-02  9.90e-01  
  6  +5.0003e-01  +7.0927e-01  2.09e-01  1.41e-03  3.39e-01  2.66e-05  3.51e-02  6.60e-01  
  7  +4.9990e-01  +7.0042e-01  2.01e-01  1.15e-03  2.78e-01  8.87e-05  7.03e-03  8.79e-01  
  8  +4.9609e-01  +6.8095e-01  1.85e-01  8.78e-05  2.14e-02  1.93e-03  2.71e-04  9.62e-01  
  9  +4.9263e-01  +6.5500e-01  1.62e-01  5.07e-05  1.24e-02  2.29e-03  1.56e-04  5.08e-01  
 10  +4.9100e-01  +6.3831e-01  1.47e-01  4.36e-05  1.06e-02  1.79e-03  1.34e-04  2.59e-01  
 11  +4.9066e-01  +6.3360e-01  1.43e-01  4.33e-05  1.06e-02  1.58e-03  1.34e-04  5.61e-02  
 12  +4.8420e-01  +5.9208e-01  1.08e-01  2.83e-05  6.89e-03  9.89e-04  8.92e-05  4.58e-01  
 13  +4.7636e-01  +5.4957e-01  7.32e-02  1.76e-05  4.28e-03  5.34e-04  5.72e-05  4.45e-01  
 14  +4.6929e-01  +5.1255e-01  4.33e-02  9.58e-06  2.33e-03  1.24e-04  3.20e-05  7.25e-01  
 15  +4.6369e-01  +4.8648e-01  2.28e-02  4.66e-06  1.13e-03  1.32e-06  1.59e-05  9.82e-01  
 16  +4.5940e-01  +4.6906e-01  9.66e-03  1.92e-06  4.66e-04  5.58e-07  6.72e-06  6.83e-01  
 17  +4.5861e-01  +4.6588e-01  7.28e-03  1.42e-06  3.46e-04  4.24e-07  5.00e-06  5.88e-01  
 18  +4.5852e-01  +4.6550e-01  6.99e-03  1.37e-06  3.33e-04  4.06e-07  4.82e-06  1.87e-01  
 19  +4.5692e-01  +4.5946e-01  2.55e-03  4.91e-07  1.19e-04  1.47e-07  1.76e-06  6.67e-01  
 20  +4.5602e-01  +4.5609e-01  6.37e-05  1.22e-08  2.97e-06  3.61e-09  4.42e-08  9.80e-01  
 21  +4.5600e-01  +4.5600e-01  6.39e-07  1.23e-10  2.98e-08  3.62e-11  4.44e-10  9.90e-01  
 22  +4.5600e-01  +4.5600e-01  6.41e-09  1.23e-12  2.99e-10  3.68e-13  4.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 150.4363ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:28 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:28 PM: Optimal value: 4.560e-01
(CVXPY) Sep 20 08:00:28 PM: Compilation took 3.946e-02 seconds
(CVXPY) Sep 20 08:00:28 PM: Solver (including time spent in interface) took 1.610e-01 seconds
Iteration: 12, Objective: 0.4560
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:29 PM: Your problem has 5139 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:29 PM: Finished problem compilation (took 4.615e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5139
  constraints   = 10139
  nnz(P)        = 0
  nnz(A)        = 88942
  cones (total) = 1
    : Nonnegative = 1,  numel = 10139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8042e-01  +1.0856e+03  1.08e+03  4.34e-01  7.81e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3146e-01  +1.2214e+02  1.22e+02  1.70e-01  3.90e+01  1.64e-02  2.76e-01  9.35e-01  
  3  +5.0871e-01  +3.1743e+01  3.12e+01  1.23e-01  2.82e+01  4.53e-05  2.56e-01  2.86e-01  
  4  +5.0105e-01  +3.1609e+00  2.66e+00  1.82e-02  4.28e+00  5.85e-06  1.65e-01  6.06e-01  
  5  +5.0011e-01  +9.8329e-01  4.83e-01  3.26e-03  7.85e-01  3.95e-05  9.31e-02  9.90e-01  
  6  +5.0003e-01  +7.0553e-01  2.06e-01  1.38e-03  3.33e-01  2.70e-05  3.26e-02  6.97e-01  
  7  +4.9988e-01  +7.0270e-01  2.03e-01  1.13e-03  2.73e-01  9.94e-05  6.43e-03  8.62e-01  
  8  +4.9595e-01  +6.8362e-01  1.88e-01  8.87e-05  2.17e-02  1.99e-03  2.73e-04  9.58e-01  
  9  +4.9326e-01  +6.6089e-01  1.68e-01  5.70e-05  1.39e-02  2.13e-03  1.75e-04  4.59e-01  
 10  +4.9241e-01  +6.4572e-01  1.53e-01  5.10e-05  1.24e-02  1.53e-03  1.56e-04  2.75e-01  
 11  +4.9157e-01  +6.3728e-01  1.46e-01  4.61e-05  1.13e-02  1.26e-03  1.41e-04  2.19e-01  
 12  +4.9116e-01  +6.3131e-01  1.40e-01  4.55e-05  1.11e-02  1.01e-03  1.40e-04  1.27e-01  
 13  +4.8235e-01  +5.8324e-01  1.01e-01  2.53e-05  6.16e-03  7.73e-04  7.99e-05  4.85e-01  
 14  +4.7352e-01  +5.3558e-01  6.21e-02  1.47e-05  3.57e-03  1.24e-04  4.84e-05  7.18e-01  
 15  +4.7144e-01  +5.2556e-01  5.41e-02  1.23e-05  3.00e-03  6.96e-05  4.10e-05  4.35e-01  
 16  +4.6276e-01  +4.8851e-01  2.58e-02  5.41e-06  1.32e-03  2.63e-05  1.89e-05  6.09e-01  
 17  +4.5851e-01  +4.7130e-01  1.28e-02  2.56e-06  6.25e-04  1.01e-05  9.29e-06  6.19e-01  
 18  +4.5750e-01  +4.6686e-01  9.36e-03  1.85e-06  4.50e-04  2.51e-06  6.76e-06  7.99e-01  
 19  +4.5449e-01  +4.5556e-01  1.07e-03  2.06e-07  5.02e-05  2.47e-07  7.85e-07  8.98e-01  
 20  +4.5411e-01  +4.5413e-01  1.81e-05  3.49e-09  8.52e-07  2.84e-09  1.34e-08  9.90e-01  
 21  +4.5410e-01  +4.5410e-01  1.81e-07  3.49e-11  8.52e-09  2.84e-11  1.34e-10  9.90e-01  
 22  +4.5410e-01  +4.5410e-01  1.81e-09  3.50e-13  8.52e-11  2.88e-13  1.36e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 158.3007ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:29 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:29 PM: Optimal value: 4.541e-01
(CVXPY) Sep 20 08:00:29 PM: Compilation took 4.615e-02 seconds
(CVXPY) Sep 20 08:00:29 PM: Solver (including time spent in interface) took 1.690e-01 seconds
Iteration: 13, Objective: 0.4541
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:29 PM: Your problem has 5149 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:29 PM: Finished problem compilation (took 4.383e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5149
  constraints   = 10149
  nnz(P)        = 0
  nnz(A)        = 90099
  cones (total) = 1
    : Nonnegative = 1,  numel = 10149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8038e-01  +1.0855e+03  1.08e+03  4.34e-01  7.81e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3143e-01  +1.2206e+02  1.22e+02  1.70e-01  3.89e+01  1.64e-02  2.75e-01  9.36e-01  
  3  +5.0870e-01  +3.1717e+01  3.12e+01  1.23e-01  2.81e+01  4.53e-05  2.56e-01  2.87e-01  
  4  +5.0105e-01  +3.1583e+00  2.66e+00  1.82e-02  4.28e+00  5.86e-06  1.64e-01  6.07e-01  
  5  +5.0012e-01  +9.9192e-01  4.92e-01  3.32e-03  8.00e-01  3.98e-05  9.24e-02  9.90e-01  
  6  +5.0003e-01  +7.2242e-01  2.22e-01  1.49e-03  3.61e-01  2.97e-05  3.29e-02  6.89e-01  
  7  +4.9988e-01  +7.2975e-01  2.30e-01  1.25e-03  3.03e-01  1.08e-04  6.89e-03  8.63e-01  
  8  +4.9574e-01  +7.0603e-01  2.10e-01  9.63e-05  2.35e-02  2.09e-03  2.96e-04  9.59e-01  
  9  +4.9113e-01  +6.6733e-01  1.76e-01  5.37e-05  1.31e-02  2.39e-03  1.65e-04  5.04e-01  
 10  +4.9013e-01  +6.4584e-01  1.56e-01  4.74e-05  1.16e-02  1.34e-03  1.46e-04  3.65e-01  
 11  +4.8834e-01  +6.2716e-01  1.39e-01  4.29e-05  1.05e-02  7.64e-04  1.34e-04  3.19e-01  
 12  +4.8081e-01  +5.8433e-01  1.04e-01  2.75e-05  6.70e-03  4.82e-04  8.81e-05  4.49e-01  
 13  +4.7424e-01  +5.4572e-01  7.15e-02  1.77e-05  4.30e-03  5.07e-06  5.81e-05  8.59e-01  
 14  +4.6243e-01  +4.9261e-01  3.02e-02  6.65e-06  1.62e-03  1.84e-06  2.30e-05  6.62e-01  
 15  +4.6017e-01  +4.8286e-01  2.27e-02  4.83e-06  1.18e-03  1.32e-06  1.69e-05  4.93e-01  
 16  +4.5885e-01  +4.7743e-01  1.86e-02  3.89e-06  9.47e-04  1.08e-06  1.38e-05  2.57e-01  
 17  +4.5740e-01  +4.7145e-01  1.41e-02  2.88e-06  7.02e-04  8.05e-07  1.04e-05  3.93e-01  
 18  +4.5555e-01  +4.6371e-01  8.16e-03  1.63e-06  3.97e-04  4.50e-07  6.01e-06  9.90e-01  
 19  +4.5325e-01  +4.5500e-01  1.75e-03  3.42e-07  8.34e-05  9.49e-08  1.32e-06  8.20e-01  
 20  +4.5261e-01  +4.5264e-01  2.56e-05  4.95e-09  1.21e-06  1.34e-09  1.94e-08  9.87e-01  
 21  +4.5260e-01  +4.5260e-01  2.56e-07  4.95e-11  1.21e-08  1.34e-11  1.94e-10  9.90e-01  
 22  +4.5260e-01  +4.5260e-01  2.56e-09  4.95e-13  1.21e-10  1.39e-13  2.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 155.5761ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:29 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:29 PM: Optimal value: 4.526e-01
(CVXPY) Sep 20 08:00:29 PM: Compilation took 4.383e-02 seconds
(CVXPY) Sep 20 08:00:29 PM: Solver (including time spent in interface) took 1.676e-01 seconds
Iteration: 14, Objective: 0.4526
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:29 PM: Your problem has 5159 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:29 PM: Finished problem compilation (took 4.660e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5159
  constraints   = 10159
  nnz(P)        = 0
  nnz(A)        = 91032
  cones (total) = 1
    : Nonnegative = 1,  numel = 10159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8034e-01  +1.0855e+03  1.08e+03  4.34e-01  7.80e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3140e-01  +1.2200e+02  1.21e+02  1.70e-01  3.88e+01  1.64e-02  2.75e-01  9.36e-01  
  3  +5.0870e-01  +3.1701e+01  3.12e+01  1.23e-01  2.81e+01  4.53e-05  2.56e-01  2.88e-01  
  4  +5.0105e-01  +3.1586e+00  2.66e+00  1.82e-02  4.28e+00  5.86e-06  1.64e-01  6.07e-01  
  5  +5.0012e-01  +9.9771e-01  4.98e-01  3.36e-03  8.09e-01  4.01e-05  9.20e-02  9.90e-01  
  6  +5.0003e-01  +7.1894e-01  2.19e-01  1.47e-03  3.55e-01  3.06e-05  3.08e-02  7.10e-01  
  7  +4.9969e-01  +7.3960e-01  2.40e-01  9.42e-04  2.29e-01  2.02e-04  3.80e-03  9.42e-01  
  8  +4.9448e-01  +7.1255e-01  2.18e-01  8.16e-05  1.99e-02  2.61e-03  2.50e-04  9.35e-01  
  9  +4.9111e-01  +6.8083e-01  1.90e-01  5.85e-05  1.43e-02  2.42e-03  1.80e-04  3.47e-01  
 10  +4.8985e-01  +6.6502e-01  1.75e-01  5.14e-05  1.25e-02  1.94e-03  1.58e-04  2.37e-01  
 11  +4.8949e-01  +6.5138e-01  1.62e-01  4.97e-05  1.21e-02  1.26e-03  1.53e-04  2.22e-01  
 12  +4.8298e-01  +6.0979e-01  1.27e-01  3.37e-05  8.22e-03  8.82e-04  1.06e-04  3.99e-01  
 13  +4.7513e-01  +5.6264e-01  8.75e-02  2.16e-05  5.27e-03  3.67e-04  7.03e-05  5.25e-01  
 14  +4.6443e-01  +5.0896e-01  4.45e-02  9.95e-06  2.42e-03  1.13e-04  3.37e-05  6.61e-01  
 15  +4.5801e-01  +4.7954e-01  2.15e-02  4.53e-06  1.10e-03  3.42e-05  1.58e-05  6.97e-01  
 16  +4.5685e-01  +4.7444e-01  1.76e-02  3.66e-06  8.89e-04  2.57e-05  1.28e-05  2.60e-01  
 17  +4.5545e-01  +4.6769e-01  1.22e-02  2.49e-06  6.05e-04  5.83e-06  8.78e-06  8.06e-01  
 18  +4.5504e-01  +4.6602e-01  1.10e-02  2.23e-06  5.42e-04  4.71e-06  7.88e-06  2.03e-01  
 19  +4.5489e-01  +4.6532e-01  1.04e-02  2.11e-06  5.13e-04  3.53e-06  7.47e-06  2.89e-01  
 20  +4.5236e-01  +4.5533e-01  2.97e-03  5.95e-07  1.45e-04  7.83e-07  2.15e-06  7.88e-01  
 21  +4.5143e-01  +4.5178e-01  3.51e-04  6.96e-08  1.70e-05  7.09e-08  2.55e-07  9.16e-01  
 22  +4.5130e-01  +4.5131e-01  4.42e-06  8.77e-10  2.14e-07  8.80e-10  3.22e-09  9.87e-01  
 23  +4.5130e-01  +4.5130e-01  4.46e-08  8.84e-12  2.15e-09  8.86e-12  3.25e-11  9.90e-01  
 24  +4.5130e-01  +4.5130e-01  4.47e-10  8.86e-14  2.16e-11  8.90e-14  3.26e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 177.8546ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:30 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:30 PM: Optimal value: 4.513e-01
(CVXPY) Sep 20 08:00:30 PM: Compilation took 4.660e-02 seconds
(CVXPY) Sep 20 08:00:30 PM: Solver (including time spent in interface) took 1.893e-01 seconds
Iteration: 15, Objective: 0.4513
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:30 PM: Your problem has 5169 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:30 PM: Finished problem compilation (took 4.349e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5169
  constraints   = 10169
  nnz(P)        = 0
  nnz(A)        = 91663
  cones (total) = 1
    : Nonnegative = 1,  numel = 10169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8027e-01  +1.0856e+03  1.09e+03  4.34e-01  7.80e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3135e-01  +1.2192e+02  1.21e+02  1.70e-01  3.87e+01  1.64e-02  2.75e-01  9.37e-01  
  3  +5.0869e-01  +3.1682e+01  3.12e+01  1.23e-01  2.80e+01  4.54e-05  2.55e-01  2.89e-01  
  4  +5.0105e-01  +3.1599e+00  2.66e+00  1.82e-02  4.28e+00  5.87e-06  1.64e-01  6.08e-01  
  5  +5.0012e-01  +1.0043e+00  5.04e-01  3.41e-03  8.20e-01  4.03e-05  9.14e-02  9.90e-01  
  6  +5.0003e-01  +7.2518e-01  2.25e-01  1.51e-03  3.65e-01  3.20e-05  3.00e-02  7.27e-01  
  7  +4.9963e-01  +7.5266e-01  2.53e-01  9.05e-04  2.20e-01  2.32e-04  3.49e-03  9.47e-01  
  8  +4.9406e-01  +7.2398e-01  2.30e-01  8.12e-05  1.98e-02  2.78e-03  2.48e-04  9.29e-01  
  9  +4.9078e-01  +6.8554e-01  1.95e-01  6.03e-05  1.47e-02  2.22e-03  1.85e-04  3.56e-01  
 10  +4.8861e-01  +6.6729e-01  1.79e-01  5.14e-05  1.25e-02  1.93e-03  1.58e-04  2.07e-01  
 11  +4.8834e-01  +6.6097e-01  1.73e-01  5.10e-05  1.24e-02  1.66e-03  1.57e-04  7.17e-02  
 12  +4.8339e-01  +6.1706e-01  1.34e-01  3.71e-05  9.05e-03  7.15e-04  1.17e-04  5.10e-01  
 13  +4.7497e-01  +5.6841e-01  9.34e-02  2.34e-05  5.69e-03  3.71e-04  7.59e-05  4.77e-01  
 14  +4.6446e-01  +5.1244e-01  4.80e-02  1.08e-05  2.63e-03  5.12e-05  3.66e-05  8.03e-01  
 15  +4.5617e-01  +4.7490e-01  1.87e-02  3.95e-06  9.61e-04  9.83e-06  1.39e-05  8.02e-01  
 16  +4.5547e-01  +4.7185e-01  1.64e-02  3.42e-06  8.32e-04  7.98e-06  1.21e-05  2.05e-01  
 17  +4.5410e-01  +4.6569e-01  1.16e-02  2.38e-06  5.78e-04  2.76e-06  8.44e-06  7.13e-01  
 18  +4.5384e-01  +4.6465e-01  1.08e-02  2.22e-06  5.39e-04  2.41e-06  7.88e-06  1.42e-01  
 19  +4.5373e-01  +4.6409e-01  1.04e-02  2.12e-06  5.15e-04  1.91e-06  7.53e-06  2.73e-01  
 20  +4.5119e-01  +4.5397e-01  2.79e-03  5.62e-07  1.37e-04  3.50e-07  2.05e-06  8.53e-01  
 21  +4.5031e-01  +4.5062e-01  3.12e-04  6.24e-08  1.52e-05  3.59e-08  2.30e-07  9.02e-01  
 22  +4.5020e-01  +4.5021e-01  3.81e-06  7.62e-10  1.85e-07  4.34e-10  2.81e-09  9.88e-01  
 23  +4.5020e-01  +4.5020e-01  3.83e-08  7.66e-12  1.87e-09  4.36e-12  2.83e-11  9.90e-01  
 24  +4.5020e-01  +4.5020e-01  3.85e-10  7.71e-14  1.88e-11  4.40e-14  2.86e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 174.9267ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:30 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:30 PM: Optimal value: 4.502e-01
(CVXPY) Sep 20 08:00:30 PM: Compilation took 4.349e-02 seconds
(CVXPY) Sep 20 08:00:30 PM: Solver (including time spent in interface) took 1.860e-01 seconds
Iteration: 16, Objective: 0.4502
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:30 PM: Your problem has 5179 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:30 PM: Finished problem compilation (took 4.425e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5179
  constraints   = 10179
  nnz(P)        = 0
  nnz(A)        = 92761
  cones (total) = 1
    : Nonnegative = 1,  numel = 10179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8019e-01  +1.0858e+03  1.09e+03  4.34e-01  7.80e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3130e-01  +1.2183e+02  1.21e+02  1.70e-01  3.87e+01  1.64e-02  2.75e-01  9.37e-01  
  3  +5.0868e-01  +3.1664e+01  3.12e+01  1.23e-01  2.80e+01  4.54e-05  2.55e-01  2.90e-01  
  4  +5.0105e-01  +3.1627e+00  2.66e+00  1.82e-02  4.28e+00  5.88e-06  1.63e-01  6.09e-01  
  5  +5.0012e-01  +1.0124e+00  5.12e-01  3.47e-03  8.33e-01  4.06e-05  9.09e-02  9.90e-01  
  6  +5.0003e-01  +7.5156e-01  2.52e-01  1.69e-03  4.07e-01  3.36e-05  3.28e-02  6.91e-01  
  7  +4.9967e-01  +7.6456e-01  2.65e-01  9.70e-04  2.35e-01  2.18e-04  3.75e-03  9.71e-01  
  8  +4.9430e-01  +7.3726e-01  2.43e-01  8.64e-05  2.11e-02  2.68e-03  2.62e-04  9.30e-01  
  9  +4.9015e-01  +6.8877e-01  1.99e-01  5.89e-05  1.44e-02  2.10e-03  1.81e-04  4.26e-01  
 10  +4.8890e-01  +6.7429e-01  1.85e-01  5.40e-05  1.32e-02  1.74e-03  1.66e-04  1.66e-01  
 11  +4.8843e-01  +6.6297e-01  1.75e-01  5.30e-05  1.29e-02  1.29e-03  1.64e-04  1.38e-01  
 12  +4.7780e-01  +5.8994e-01  1.12e-01  2.87e-05  6.98e-03  6.13e-04  9.19e-05  5.75e-01  
 13  +4.7325e-01  +5.5977e-01  8.65e-02  2.13e-05  5.19e-03  1.74e-04  6.97e-05  6.29e-01  
 14  +4.6166e-01  +5.0384e-01  4.22e-02  9.43e-06  2.29e-03  6.85e-05  3.23e-05  5.89e-01  
 15  +4.6082e-01  +4.9979e-01  3.90e-02  8.56e-06  2.08e-03  5.48e-05  2.94e-05  2.16e-01  
 16  +4.5685e-01  +4.8060e-01  2.37e-02  4.92e-06  1.19e-03  1.77e-06  1.71e-05  9.90e-01  
 17  +4.5524e-01  +4.7411e-01  1.89e-02  3.86e-06  9.37e-04  1.39e-06  1.36e-05  2.43e-01  
 18  +4.5266e-01  +4.6375e-01  1.11e-02  2.20e-06  5.35e-04  7.16e-07  7.95e-06  7.39e-01  
 19  +4.5224e-01  +4.6211e-01  9.87e-03  1.95e-06  4.74e-04  6.27e-07  7.08e-06  2.15e-01  
 20  +4.5219e-01  +4.6185e-01  9.66e-03  1.91e-06  4.63e-04  6.04e-07  6.91e-06  1.73e-01  
 21  +4.4921e-01  +4.5053e-01  1.32e-03  2.51e-07  6.09e-05  7.60e-08  9.49e-07  9.80e-01  
 22  +4.4871e-01  +4.4875e-01  3.37e-05  6.35e-09  1.54e-06  1.92e-09  2.43e-08  9.77e-01  
 23  +4.4870e-01  +4.4870e-01  3.37e-07  6.35e-11  1.54e-08  1.92e-11  2.43e-10  9.90e-01  
 24  +4.4870e-01  +4.4870e-01  3.37e-09  6.35e-13  1.54e-10  1.98e-13  2.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 172.3924ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:30 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:30 PM: Optimal value: 4.487e-01
(CVXPY) Sep 20 08:00:30 PM: Compilation took 4.425e-02 seconds
(CVXPY) Sep 20 08:00:30 PM: Solver (including time spent in interface) took 1.848e-01 seconds
Iteration: 17, Objective: 0.4487
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:30 PM: Your problem has 5189 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:31 PM: Finished problem compilation (took 4.858e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5189
  constraints   = 10189
  nnz(P)        = 0
  nnz(A)        = 93713
  cones (total) = 1
    : Nonnegative = 1,  numel = 10189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8017e-01  +1.0857e+03  1.09e+03  4.35e-01  7.79e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3128e-01  +1.2179e+02  1.21e+02  1.70e-01  3.86e+01  1.64e-02  2.75e-01  9.38e-01  
  3  +5.0867e-01  +3.1653e+01  3.11e+01  1.23e-01  2.79e+01  4.55e-05  2.55e-01  2.91e-01  
  4  +5.0105e-01  +3.1625e+00  2.66e+00  1.82e-02  4.28e+00  5.88e-06  1.63e-01  6.09e-01  
  5  +5.0012e-01  +1.0144e+00  5.14e-01  3.48e-03  8.37e-01  4.07e-05  9.07e-02  9.90e-01  
  6  +5.0003e-01  +7.4238e-01  2.42e-01  1.63e-03  3.92e-01  3.35e-05  3.12e-02  7.01e-01  
  7  +4.9954e-01  +7.7551e-01  2.76e-01  8.33e-04  2.02e-01  2.85e-04  3.00e-03  9.85e-01  
  8  +4.9349e-01  +7.4384e-01  2.50e-01  8.04e-05  1.96e-02  3.00e-03  2.44e-04  9.19e-01  
  9  +4.8963e-01  +6.9245e-01  2.03e-01  5.74e-05  1.40e-02  2.07e-03  1.76e-04  4.21e-01  
 10  +4.8904e-01  +6.8358e-01  1.95e-01  5.68e-05  1.39e-02  1.80e-03  1.75e-04  4.41e-02  
 11  +4.8443e-01  +6.4088e-01  1.56e-01  4.42e-05  1.08e-02  1.04e-03  1.38e-04  3.62e-01  
 12  +4.7966e-01  +6.0173e-01  1.22e-01  3.32e-05  8.08e-03  4.11e-04  1.06e-04  5.14e-01  
 13  +4.6555e-01  +5.2197e-01  5.64e-02  1.32e-05  3.21e-03  2.77e-05  4.44e-05  8.52e-01  
 14  +4.6148e-01  +5.0360e-01  4.21e-02  9.47e-06  2.30e-03  1.78e-05  3.23e-05  3.75e-01  
 15  +4.5924e-01  +4.9358e-01  3.43e-02  7.52e-06  1.83e-03  1.23e-05  2.59e-05  3.41e-01  
 16  +4.5503e-01  +4.7508e-01  2.01e-02  4.24e-06  1.03e-03  5.89e-06  1.49e-05  5.42e-01  
 17  +4.5315e-01  +4.6699e-01  1.38e-02  2.87e-06  6.98e-04  3.43e-06  1.02e-05  4.49e-01  
 18  +4.5099e-01  +4.5798e-01  7.00e-03  1.43e-06  3.48e-04  1.48e-06  5.13e-06  5.88e-01  
 19  +4.4933e-01  +4.5111e-01  1.77e-03  3.59e-07  8.73e-05  1.06e-07  1.31e-06  9.90e-01  
 20  +4.4872e-01  +4.4878e-01  6.15e-05  1.24e-08  3.01e-06  3.49e-09  4.56e-08  9.79e-01  
 21  +4.4870e-01  +4.4870e-01  6.30e-07  1.27e-10  3.09e-08  3.57e-11  4.67e-10  9.90e-01  
 22  +4.4870e-01  +4.4870e-01  6.31e-09  1.27e-12  3.09e-10  3.58e-13  4.68e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 170.0601ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:31 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:31 PM: Optimal value: 4.487e-01
(CVXPY) Sep 20 08:00:31 PM: Compilation took 4.858e-02 seconds
(CVXPY) Sep 20 08:00:31 PM: Solver (including time spent in interface) took 1.809e-01 seconds
Iteration: 18, Objective: 0.4487
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:31 PM: Your problem has 5199 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:31 PM: Finished problem compilation (took 4.941e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5199
  constraints   = 10199
  nnz(P)        = 0
  nnz(A)        = 94408
  cones (total) = 1
    : Nonnegative = 1,  numel = 10199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8006e-01  +1.0861e+03  1.09e+03  4.35e-01  7.79e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3120e-01  +1.2167e+02  1.21e+02  1.70e-01  3.86e+01  1.64e-02  2.75e-01  9.39e-01  
  3  +5.0866e-01  +3.1634e+01  3.11e+01  1.22e-01  2.79e+01  4.56e-05  2.55e-01  2.92e-01  
  4  +5.0106e-01  +3.1717e+00  2.67e+00  1.83e-02  4.30e+00  5.89e-06  1.63e-01  6.09e-01  
  5  +5.0013e-01  +1.0251e+00  5.25e-01  3.56e-03  8.54e-01  4.13e-05  9.03e-02  9.90e-01  
  6  +5.0002e-01  +7.3770e-01  2.38e-01  1.60e-03  3.84e-01  3.51e-05  2.84e-02  7.40e-01  
  7  +4.9941e-01  +7.7517e-01  2.76e-01  7.36e-04  1.79e-01  3.44e-04  2.57e-03  9.68e-01  
  8  +4.9310e-01  +7.4083e-01  2.48e-01  7.93e-05  1.94e-02  3.11e-03  2.40e-04  9.07e-01  
  9  +4.9027e-01  +7.0526e-01  2.15e-01  6.29e-05  1.53e-02  2.32e-03  1.92e-04  3.28e-01  
 10  +4.8805e-01  +6.6221e-01  1.74e-01  5.39e-05  1.31e-02  8.33e-04  1.66e-04  4.49e-01  
 11  +4.7696e-01  +5.9023e-01  1.13e-01  2.95e-05  7.17e-03  4.02e-04  9.47e-05  5.65e-01  
 12  +4.7002e-01  +5.5039e-01  8.04e-02  1.98e-05  4.81e-03  1.49e-04  6.54e-05  5.66e-01  
 13  +4.6242e-01  +5.1312e-01  5.07e-02  1.17e-05  2.84e-03  7.99e-05  3.98e-05  4.64e-01  
 14  +4.6008e-01  +5.0192e-01  4.18e-02  9.39e-06  2.28e-03  5.95e-05  3.22e-05  2.71e-01  
 15  +4.5770e-01  +4.8962e-01  3.19e-02  6.88e-06  1.67e-03  2.41e-05  2.37e-05  6.24e-01  
 16  +4.5517e-01  +4.7843e-01  2.33e-02  4.90e-06  1.19e-03  1.41e-05  1.71e-05  4.34e-01  
 17  +4.5208e-01  +4.6529e-01  1.32e-02  2.70e-06  6.55e-04  6.27e-06  9.65e-06  5.73e-01  
 18  +4.4944e-01  +4.5447e-01  5.02e-03  9.84e-07  2.39e-04  3.58e-07  3.65e-06  9.90e-01  
 19  +4.4779e-01  +4.4830e-01  5.06e-04  9.65e-08  2.34e-05  3.36e-08  3.70e-07  9.23e-01  
 20  +4.4760e-01  +4.4761e-01  1.06e-05  2.01e-09  4.88e-07  6.38e-10  7.74e-09  9.90e-01  
 21  +4.4760e-01  +4.4760e-01  1.06e-07  2.01e-11  4.88e-09  6.38e-12  7.74e-11  9.90e-01  
 22  +4.4760e-01  +4.4760e-01  1.06e-09  2.01e-13  4.89e-11  6.65e-14  8.05e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 248.7971ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:31 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:31 PM: Optimal value: 4.476e-01
(CVXPY) Sep 20 08:00:31 PM: Compilation took 4.941e-02 seconds
(CVXPY) Sep 20 08:00:31 PM: Solver (including time spent in interface) took 2.629e-01 seconds
Iteration: 19, Objective: 0.4476
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:31 PM: Your problem has 5209 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:32 PM: Finished problem compilation (took 7.122e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5209
  constraints   = 10209
  nnz(P)        = 0
  nnz(A)        = 95250
  cones (total) = 1
    : Nonnegative = 1,  numel = 10209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7997e-01  +1.0861e+03  1.09e+03  4.35e-01  7.79e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3115e-01  +1.2157e+02  1.21e+02  1.70e-01  3.85e+01  1.64e-02  2.75e-01  9.39e-01  
  3  +5.0865e-01  +3.1612e+01  3.11e+01  1.22e-01  2.78e+01  4.57e-05  2.54e-01  2.94e-01  
  4  +5.0106e-01  +3.1711e+00  2.67e+00  1.83e-02  4.30e+00  5.90e-06  1.63e-01  6.10e-01  
  5  +5.0013e-01  +1.0340e+00  5.34e-01  3.62e-03  8.69e-01  4.16e-05  8.96e-02  9.90e-01  
  6  +5.0003e-01  +7.5248e-01  2.52e-01  1.69e-03  4.08e-01  3.62e-05  2.93e-02  7.29e-01  
  7  +4.9952e-01  +7.7327e-01  2.74e-01  8.27e-04  2.01e-01  2.92e-04  2.96e-03  9.58e-01  
  8  +4.9373e-01  +7.4201e-01  2.48e-01  8.59e-05  2.10e-02  2.85e-03  2.59e-04  9.13e-01  
  9  +4.9147e-01  +7.0990e-01  2.18e-01  6.79e-05  1.66e-02  2.13e-03  2.06e-04  3.59e-01  
 10  +4.9079e-01  +6.9712e-01  2.06e-01  6.50e-05  1.59e-02  1.73e-03  1.98e-04  1.33e-01  
 11  +4.8502e-01  +6.4568e-01  1.61e-01  4.64e-05  1.13e-02  8.97e-04  1.44e-04  4.73e-01  
 12  +4.7865e-01  +5.9941e-01  1.21e-01  3.35e-05  8.14e-03  2.54e-04  1.07e-04  5.95e-01  
 13  +4.6886e-01  +5.4789e-01  7.90e-02  1.97e-05  4.78e-03  1.15e-04  6.53e-05  5.33e-01  
 14  +4.6273e-01  +5.1820e-01  5.55e-02  1.30e-05  3.16e-03  6.84e-05  4.42e-05  4.13e-01  
 15  +4.5876e-01  +4.9958e-01  4.08e-02  9.14e-06  2.22e-03  4.30e-05  3.16e-05  3.91e-01  
 16  +4.5588e-01  +4.8547e-01  2.96e-02  6.31e-06  1.53e-03  1.32e-05  2.21e-05  7.24e-01  
 17  +4.5116e-01  +4.6526e-01  1.41e-02  2.89e-06  7.02e-04  3.76e-06  1.04e-05  7.42e-01  
 18  +4.4788e-01  +4.5199e-01  4.11e-03  8.15e-07  1.98e-04  4.14e-07  3.08e-06  9.34e-01  
 19  +4.4654e-01  +4.4691e-01  3.69e-04  7.18e-08  1.75e-05  2.13e-08  2.80e-07  9.90e-01  
 20  +4.4640e-01  +4.4641e-01  3.99e-06  7.73e-10  1.88e-07  2.29e-10  3.03e-09  9.89e-01  
 21  +4.4640e-01  +4.4640e-01  3.99e-08  7.73e-12  1.88e-09  2.29e-12  3.03e-11  9.90e-01  
 22  +4.4640e-01  +4.4640e-01  4.00e-10  7.75e-14  1.88e-11  2.39e-14  3.15e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 263.4458ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:32 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:32 PM: Optimal value: 4.464e-01
(CVXPY) Sep 20 08:00:32 PM: Compilation took 7.122e-02 seconds
(CVXPY) Sep 20 08:00:32 PM: Solver (including time spent in interface) took 2.818e-01 seconds
Iteration: 20, Objective: 0.4464
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:32 PM: Your problem has 5219 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:32 PM: Finished problem compilation (took 8.037e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5219
  constraints   = 10219
  nnz(P)        = 0
  nnz(A)        = 95978
  cones (total) = 1
    : Nonnegative = 1,  numel = 10219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7988e-01  +1.0863e+03  1.09e+03  4.35e-01  7.78e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3108e-01  +1.2146e+02  1.21e+02  1.70e-01  3.84e+01  1.65e-02  2.75e-01  9.40e-01  
  3  +5.0864e-01  +3.1589e+01  3.11e+01  1.22e-01  2.78e+01  4.58e-05  2.54e-01  2.95e-01  
  4  +5.0106e-01  +3.1748e+00  2.67e+00  1.83e-02  4.30e+00  5.91e-06  1.62e-01  6.10e-01  
  5  +5.0013e-01  +1.0463e+00  5.46e-01  3.70e-03  8.88e-01  4.22e-05  8.90e-02  9.90e-01  
  6  +5.0004e-01  +7.9512e-01  2.95e-01  1.98e-03  4.76e-01  3.91e-05  3.30e-02  6.85e-01  
  7  +4.9968e-01  +7.7935e-01  2.80e-01  1.07e-03  2.60e-01  2.12e-04  4.19e-03  9.30e-01  
  8  +4.9476e-01  +7.5088e-01  2.56e-01  1.04e-04  2.54e-02  2.44e-03  3.14e-04  9.26e-01  
  9  +4.9274e-01  +7.1733e-01  2.25e-01  7.92e-05  1.93e-02  1.81e-03  2.40e-04  4.18e-01  
 10  +4.9090e-01  +6.9971e-01  2.09e-01  6.73e-05  1.64e-02  1.56e-03  2.05e-04  2.47e-01  
 11  +4.8923e-01  +6.7582e-01  1.87e-01  6.12e-05  1.49e-02  8.93e-04  1.88e-04  3.21e-01  
 12  +4.7771e-01  +6.0016e-01  1.22e-01  3.26e-05  7.92e-03  4.10e-04  1.04e-04  6.21e-01  
 13  +4.7206e-01  +5.6989e-01  9.78e-02  2.50e-05  6.07e-03  2.58e-04  8.17e-05  3.37e-01  
 14  +4.6110e-01  +5.1308e-01  5.20e-02  1.21e-05  2.94e-03  3.14e-05  4.15e-05  8.16e-01  
 15  +4.5824e-01  +5.0003e-01  4.18e-02  9.37e-06  2.27e-03  2.03e-05  3.24e-05  3.89e-01  
 16  +4.5590e-01  +4.8920e-01  3.33e-02  7.21e-06  1.75e-03  9.48e-06  2.52e-05  5.84e-01  
 17  +4.5178e-01  +4.7155e-01  1.98e-02  4.15e-06  1.01e-03  5.09e-06  1.49e-05  4.77e-01  
 18  +4.5031e-01  +4.6489e-01  1.46e-02  3.03e-06  7.35e-04  2.04e-06  1.10e-05  6.79e-01  
 19  +4.4896e-01  +4.5914e-01  1.02e-02  2.10e-06  5.08e-04  1.05e-06  7.67e-06  6.08e-01  
 20  +4.4769e-01  +4.5401e-01  6.32e-03  1.28e-06  3.12e-04  5.29e-07  4.75e-06  6.42e-01  
 21  +4.4623e-01  +4.4830e-01  2.07e-03  4.17e-07  1.01e-04  1.64e-07  1.57e-06  7.18e-01  
 22  +4.4565e-01  +4.4605e-01  3.99e-04  7.98e-08  1.94e-05  2.18e-08  3.02e-07  9.90e-01  
 23  +4.4550e-01  +4.4551e-01  4.64e-06  9.27e-10  2.25e-07  2.53e-10  3.52e-09  9.89e-01  
 24  +4.4550e-01  +4.4550e-01  4.71e-08  9.42e-12  2.29e-09  2.58e-12  3.58e-11  9.90e-01  
 25  +4.4550e-01  +4.4550e-01  4.85e-10  9.70e-14  2.35e-11  2.69e-14  3.74e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 268.363ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:32 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:32 PM: Optimal value: 4.455e-01
(CVXPY) Sep 20 08:00:32 PM: Compilation took 8.037e-02 seconds
(CVXPY) Sep 20 08:00:32 PM: Solver (including time spent in interface) took 2.836e-01 seconds
Iteration: 21, Objective: 0.4455
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:33 PM: Your problem has 5229 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:33 PM: Finished problem compilation (took 6.539e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5229
  constraints   = 10229
  nnz(P)        = 0
  nnz(A)        = 96480
  cones (total) = 1
    : Nonnegative = 1,  numel = 10229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7988e-01  +1.0862e+03  1.09e+03  4.35e-01  7.77e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3107e-01  +1.2142e+02  1.21e+02  1.70e-01  3.83e+01  1.65e-02  2.74e-01  9.40e-01  
  3  +5.0864e-01  +3.1573e+01  3.11e+01  1.22e-01  2.77e+01  4.58e-05  2.54e-01  2.96e-01  
  4  +5.0106e-01  +3.1732e+00  2.67e+00  1.83e-02  4.30e+00  5.91e-06  1.62e-01  6.11e-01  
  5  +5.0014e-01  +1.0490e+00  5.49e-01  3.72e-03  8.93e-01  4.23e-05  8.87e-02  9.90e-01  
  6  +5.0004e-01  +7.9167e-01  2.92e-01  1.96e-03  4.70e-01  4.01e-05  3.14e-02  7.02e-01  
  7  +4.9954e-01  +7.8703e-01  2.87e-01  9.06e-04  2.20e-01  2.81e-04  3.29e-03  9.47e-01  
  8  +4.9427e-01  +7.5465e-01  2.60e-01  1.01e-04  2.45e-02  2.59e-03  3.05e-04  9.08e-01  
  9  +4.9334e-01  +7.3323e-01  2.40e-01  8.55e-05  2.09e-02  1.99e-03  2.58e-04  3.19e-01  
 10  +4.9148e-01  +7.1205e-01  2.21e-01  7.03e-05  1.71e-02  1.67e-03  2.13e-04  2.97e-01  
 11  +4.8968e-01  +6.7900e-01  1.89e-01  6.55e-05  1.60e-02  6.73e-04  2.01e-04  3.82e-01  
 12  +4.8119e-01  +6.2583e-01  1.45e-01  4.06e-05  9.88e-03  4.57e-04  1.28e-04  4.85e-01  
 13  +4.7258e-01  +5.7829e-01  1.06e-01  2.74e-05  6.65e-03  2.72e-04  8.98e-05  3.87e-01  
 14  +4.6309e-01  +5.2875e-01  6.57e-02  1.57e-05  3.80e-03  8.70e-05  5.35e-05  6.36e-01  
 15  +4.5628e-01  +4.9609e-01  3.98e-02  8.88e-06  2.15e-03  3.09e-05  3.13e-05  6.48e-01  
 16  +4.5359e-01  +4.8381e-01  3.02e-02  6.54e-06  1.59e-03  1.69e-05  2.33e-05  4.79e-01  
 17  +4.5095e-01  +4.7228e-01  2.13e-02  4.53e-06  1.10e-03  1.10e-05  1.64e-05  3.53e-01  
 18  +4.4999e-01  +4.6805e-01  1.81e-02  3.80e-06  9.22e-04  8.59e-06  1.39e-05  2.32e-01  
 19  +4.4715e-01  +4.5569e-01  8.54e-03  1.75e-06  4.25e-04  1.88e-06  6.56e-06  8.20e-01  
 20  +4.4469e-01  +4.4602e-01  1.33e-03  2.63e-07  6.39e-05  8.86e-08  1.03e-06  9.90e-01  
 21  +4.4421e-01  +4.4425e-01  3.71e-05  7.29e-09  1.77e-06  2.43e-09  2.88e-08  9.74e-01  
 22  +4.4420e-01  +4.4420e-01  3.73e-07  7.32e-11  1.78e-08  2.43e-11  2.89e-10  9.90e-01  
 23  +4.4420e-01  +4.4420e-01  3.73e-09  7.32e-13  1.78e-10  2.50e-13  2.96e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 212.4571ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:33 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:33 PM: Optimal value: 4.442e-01
(CVXPY) Sep 20 08:00:33 PM: Compilation took 6.539e-02 seconds
(CVXPY) Sep 20 08:00:33 PM: Solver (including time spent in interface) took 2.273e-01 seconds
Iteration: 22, Objective: 0.4442
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:33 PM: Your problem has 5239 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:33 PM: Finished problem compilation (took 8.101e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:33 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5239
  constraints   = 10239
  nnz(P)        = 0
  nnz(A)        = 97391
  cones (total) = 1
    : Nonnegative = 1,  numel = 10239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7983e-01  +1.0862e+03  1.09e+03  4.36e-01  7.77e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3104e-01  +1.2136e+02  1.21e+02  1.70e-01  3.83e+01  1.65e-02  2.74e-01  9.41e-01  
  3  +5.0863e-01  +3.1550e+01  3.10e+01  1.22e-01  2.77e+01  4.58e-05  2.54e-01  2.97e-01  
  4  +5.0106e-01  +3.1720e+00  2.67e+00  1.83e-02  4.30e+00  5.92e-06  1.62e-01  6.12e-01  
  5  +5.0015e-01  +1.0788e+00  5.79e-01  3.93e-03  9.42e-01  4.21e-05  9.03e-02  9.61e-01  
  6  +5.0003e-01  +7.6736e-01  2.67e-01  1.79e-03  4.31e-01  3.90e-05  2.76e-02  7.53e-01  
  7  +4.9928e-01  +7.9239e-01  2.93e-01  6.77e-04  1.65e-01  4.10e-04  2.28e-03  9.54e-01  
  8  +4.9337e-01  +7.5778e-01  2.64e-01  9.12e-05  2.23e-02  2.89e-03  2.75e-04  8.80e-01  
  9  +4.9302e-01  +7.3274e-01  2.40e-01  8.00e-05  1.95e-02  1.73e-03  2.41e-04  3.90e-01  
 10  +4.9093e-01  +6.9643e-01  2.06e-01  7.00e-05  1.71e-02  8.12e-04  2.13e-04  4.10e-01  
 11  +4.8257e-01  +6.2438e-01  1.42e-01  4.33e-05  1.05e-02  8.79e-06  1.36e-04  8.73e-01  
 12  +4.7630e-01  +5.9257e-01  1.16e-01  3.27e-05  7.94e-03  6.47e-06  1.06e-04  3.62e-01  
 13  +4.6699e-01  +5.4737e-01  8.04e-02  2.04e-05  4.95e-03  4.08e-06  6.84e-05  4.63e-01  
 14  +4.5906e-01  +5.1083e-01  5.18e-02  1.20e-05  2.92e-03  2.42e-06  4.18e-05  6.27e-01  
 15  +4.5739e-01  +5.0314e-01  4.58e-02  1.03e-05  2.51e-03  2.17e-06  3.60e-05  3.79e-01  
 16  +4.5277e-01  +4.8238e-01  2.96e-02  6.33e-06  1.54e-03  1.50e-06  2.26e-05  9.90e-01  
 17  +4.4866e-01  +4.6503e-01  1.64e-02  3.42e-06  8.29e-04  8.34e-07  1.25e-05  5.28e-01  
 18  +4.4783e-01  +4.6082e-01  1.30e-02  2.70e-06  6.55e-04  6.89e-07  9.96e-06  9.90e-01  
 19  +4.4575e-01  +4.5255e-01  6.80e-03  1.39e-06  3.38e-04  3.65e-07  5.23e-06  6.68e-01  
 20  +4.4394e-01  +4.4567e-01  1.73e-03  3.43e-07  8.33e-05  9.12e-08  1.34e-06  9.83e-01  
 21  +4.4332e-01  +4.4338e-01  5.58e-05  1.09e-08  2.64e-06  2.94e-09  4.31e-08  9.73e-01  
 22  +4.4330e-01  +4.4330e-01  5.60e-07  1.09e-10  2.65e-08  2.95e-11  4.33e-10  9.90e-01  
 23  +4.4330e-01  +4.4330e-01  5.60e-09  1.09e-12  2.65e-10  2.95e-13  4.33e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 285.1031ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:34 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:34 PM: Optimal value: 4.433e-01
(CVXPY) Sep 20 08:00:34 PM: Compilation took 8.101e-02 seconds
(CVXPY) Sep 20 08:00:34 PM: Solver (including time spent in interface) took 3.003e-01 seconds
Iteration: 23, Objective: 0.4433
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:34 PM: Your problem has 5249 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:34 PM: Finished problem compilation (took 6.832e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5249
  constraints   = 10249
  nnz(P)        = 0
  nnz(A)        = 98064
  cones (total) = 1
    : Nonnegative = 1,  numel = 10249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7972e-01  +1.0864e+03  1.09e+03  4.36e-01  7.77e+01  3.78e-03  5.75e-01  5.85e-01  
  2  +5.3098e-01  +1.2126e+02  1.21e+02  1.70e-01  3.82e+01  1.65e-02  2.74e-01  9.42e-01  
  3  +5.0862e-01  +3.1534e+01  3.10e+01  1.22e-01  2.77e+01  4.59e-05  2.53e-01  2.99e-01  
  4  +5.0106e-01  +3.1778e+00  2.68e+00  1.84e-02  4.31e+00  5.93e-06  1.61e-01  6.12e-01  
  5  +5.0014e-01  +1.0665e+00  5.66e-01  3.85e-03  9.22e-01  4.30e-05  8.78e-02  9.88e-01  
  6  +5.0003e-01  +7.9636e-01  2.96e-01  1.99e-03  4.77e-01  4.31e-05  2.90e-02  7.25e-01  
  7  +4.9939e-01  +7.9709e-01  2.98e-01  7.93e-04  1.93e-01  3.59e-04  2.74e-03  9.36e-01  
  8  +4.9322e-01  +7.6103e-01  2.68e-01  9.25e-05  2.26e-02  3.00e-03  2.79e-04  8.99e-01  
  9  +4.9178e-01  +7.3422e-01  2.42e-01  7.87e-05  1.92e-02  2.11e-03  2.38e-04  3.35e-01  
 10  +4.8976e-01  +7.0335e-01  2.14e-01  6.96e-05  1.70e-02  1.26e-03  2.12e-04  3.24e-01  
 11  +4.8620e-01  +6.7127e-01  1.85e-01  5.83e-05  1.42e-02  7.43e-04  1.81e-04  3.57e-01  
 12  +4.8496e-01  +6.5762e-01  1.73e-01  5.47e-05  1.33e-02  4.37e-04  1.70e-04  3.18e-01  
 13  +4.7788e-01  +6.1697e-01  1.39e-01  3.95e-05  9.60e-03  3.35e-04  1.26e-04  3.01e-01  
 14  +4.6948e-01  +5.7111e-01  1.02e-01  2.64e-05  6.40e-03  1.94e-04  8.73e-05  4.16e-01  
 15  +4.6655e-01  +5.5376e-01  8.72e-02  2.16e-05  5.25e-03  7.95e-05  7.24e-05  5.64e-01  
 16  +4.5927e-01  +5.1907e-01  5.98e-02  1.40e-05  3.41e-03  5.02e-05  4.85e-05  3.64e-01  
 17  +4.5509e-01  +4.9933e-01  4.42e-02  9.98e-06  2.42e-03  3.06e-05  3.51e-05  4.04e-01  
 18  +4.5203e-01  +4.8467e-01  3.26e-02  7.14e-06  1.73e-03  1.36e-05  2.55e-05  5.79e-01  
 19  +4.4665e-01  +4.6110e-01  1.45e-02  3.06e-06  7.42e-04  4.79e-06  1.13e-05  6.57e-01  
 20  +4.4365e-01  +4.4845e-01  4.80e-03  9.89e-07  2.40e-04  1.15e-06  3.78e-06  7.76e-01  
 21  +4.4260e-01  +4.4430e-01  1.70e-03  3.43e-07  8.30e-05  2.98e-07  1.35e-06  7.65e-01  
 22  +4.4232e-01  +4.4319e-01  8.73e-04  1.74e-07  4.22e-05  1.05e-07  6.92e-07  7.14e-01  
 23  +4.4201e-01  +4.4202e-01  1.64e-05  3.26e-09  7.90e-07  1.88e-09  1.31e-08  9.82e-01  
 24  +4.4200e-01  +4.4200e-01  1.66e-07  3.28e-11  7.96e-09  1.90e-11  1.32e-10  9.90e-01  
 25  +4.4200e-01  +4.4200e-01  1.66e-09  3.29e-13  7.97e-11  2.01e-13  1.39e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 351.7057ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:34 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:34 PM: Optimal value: 4.420e-01
(CVXPY) Sep 20 08:00:34 PM: Compilation took 6.832e-02 seconds
(CVXPY) Sep 20 08:00:34 PM: Solver (including time spent in interface) took 3.696e-01 seconds
Iteration: 24, Objective: 0.4420
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:35 PM: Your problem has 5259 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:35 PM: Finished problem compilation (took 7.915e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5259
  constraints   = 10259
  nnz(P)        = 0
  nnz(A)        = 98479
  cones (total) = 1
    : Nonnegative = 1,  numel = 10259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7971e-01  +1.0864e+03  1.09e+03  4.36e-01  7.76e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3094e-01  +1.2116e+02  1.21e+02  1.69e-01  3.81e+01  1.65e-02  2.74e-01  9.42e-01  
  3  +5.0861e-01  +3.1503e+01  3.10e+01  1.22e-01  2.76e+01  4.59e-05  2.53e-01  3.00e-01  
  4  +5.0106e-01  +3.1755e+00  2.67e+00  1.84e-02  4.31e+00  5.93e-06  1.61e-01  6.13e-01  
  5  +5.0015e-01  +1.0825e+00  5.82e-01  3.96e-03  9.48e-01  4.30e-05  8.80e-02  9.78e-01  
  6  +5.0002e-01  +7.8152e-01  2.82e-01  1.88e-03  4.52e-01  4.39e-05  2.57e-02  7.71e-01  
  7  +4.9838e-01  +8.4427e-01  3.46e-01  4.11e-04  1.00e-01  8.60e-04  1.29e-03  9.90e-01  
  8  +4.9306e-01  +7.9735e-01  3.04e-01  1.11e-04  2.70e-02  2.64e-03  3.35e-04  7.50e-01  
  9  +4.9010e-01  +7.5579e-01  2.66e-01  8.45e-05  2.06e-02  2.14e-03  2.57e-04  3.45e-01  
 10  +4.8977e-01  +7.3420e-01  2.44e-01  8.26e-05  2.01e-02  1.48e-03  2.52e-04  1.61e-01  
 11  +4.8437e-01  +6.7862e-01  1.94e-01  5.92e-05  1.44e-02  7.93e-04  1.84e-04  4.79e-01  
 12  +4.8081e-01  +6.3808e-01  1.57e-01  4.80e-05  1.17e-02  1.50e-04  1.52e-04  6.39e-01  
 13  +4.7063e-01  +5.8146e-01  1.11e-01  2.97e-05  7.21e-03  9.83e-05  9.80e-05  3.93e-01  
 14  +4.6606e-01  +5.5714e-01  9.11e-02  2.32e-05  5.63e-03  6.71e-05  7.80e-05  3.23e-01  
 15  +4.6182e-01  +5.3359e-01  7.18e-02  1.72e-05  4.16e-03  2.26e-05  5.84e-05  6.70e-01  
 16  +4.5488e-01  +5.0066e-01  4.58e-02  1.04e-05  2.51e-03  9.77e-06  3.64e-05  5.89e-01  
 17  +4.5373e-01  +4.9522e-01  4.15e-02  9.30e-06  2.26e-03  8.04e-06  3.28e-05  2.05e-01  
 18  +4.4791e-01  +4.6894e-01  2.10e-02  4.56e-06  1.11e-03  3.26e-06  1.66e-05  6.18e-01  
 19  +4.4523e-01  +4.5671e-01  1.15e-02  2.44e-06  5.92e-04  1.28e-06  9.06e-06  6.92e-01  
 20  +4.4397e-01  +4.5103e-01  7.06e-03  1.47e-06  3.57e-04  3.86e-07  5.53e-06  9.90e-01  
 21  +4.4238e-01  +4.4475e-01  2.37e-03  4.87e-07  1.18e-04  1.30e-07  1.87e-06  7.08e-01  
 22  +4.4190e-01  +4.4298e-01  1.08e-03  2.17e-07  5.27e-05  5.90e-08  8.49e-07  6.03e-01  
 23  +4.4173e-01  +4.4234e-01  6.11e-04  1.22e-07  2.95e-05  3.12e-08  4.79e-07  9.90e-01  
 24  +4.4151e-01  +4.4154e-01  2.59e-05  5.10e-09  1.24e-06  1.33e-09  2.03e-08  9.59e-01  
 25  +4.4150e-01  +4.4150e-01  2.60e-07  5.11e-11  1.24e-08  1.33e-11  2.04e-10  9.90e-01  
 26  +4.4150e-01  +4.4150e-01  2.60e-09  5.11e-13  1.24e-10  1.33e-13  2.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 296.9461ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:35 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:35 PM: Optimal value: 4.415e-01
(CVXPY) Sep 20 08:00:35 PM: Compilation took 7.915e-02 seconds
(CVXPY) Sep 20 08:00:35 PM: Solver (including time spent in interface) took 3.148e-01 seconds
Iteration: 25, Objective: 0.4415
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:35 PM: Your problem has 5269 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:35 PM: Finished problem compilation (took 9.303e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5269
  constraints   = 10269
  nnz(P)        = 0
  nnz(A)        = 99030
  cones (total) = 1
    : Nonnegative = 1,  numel = 10269

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7970e-01  +1.0863e+03  1.09e+03  4.36e-01  7.75e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3091e-01  +1.2108e+02  1.21e+02  1.69e-01  3.80e+01  1.65e-02  2.74e-01  9.42e-01  
  3  +5.0860e-01  +3.1482e+01  3.10e+01  1.22e-01  2.76e+01  4.59e-05  2.53e-01  3.00e-01  
  4  +5.0106e-01  +3.1739e+00  2.67e+00  1.84e-02  4.30e+00  5.93e-06  1.60e-01  6.14e-01  
  5  +5.0015e-01  +1.0808e+00  5.81e-01  3.95e-03  9.45e-01  4.34e-05  8.68e-02  9.88e-01  
  6  +5.0001e-01  +7.6690e-01  2.67e-01  1.78e-03  4.26e-01  4.69e-05  2.21e-02  8.20e-01  
  7  +4.9764e-01  +8.5100e-01  3.53e-01  3.07e-04  7.47e-02  1.22e-03  9.44e-04  9.86e-01  
  8  +4.9206e-01  +7.9028e-01  2.98e-01  1.04e-04  2.54e-02  2.66e-03  3.15e-04  6.91e-01  
  9  +4.9087e-01  +7.5652e-01  2.66e-01  8.86e-05  2.16e-02  1.77e-03  2.69e-04  3.37e-01  
 10  +4.8933e-01  +7.2132e-01  2.32e-01  7.62e-05  1.86e-02  9.55e-04  2.32e-04  3.98e-01  
 11  +4.8407e-01  +6.5563e-01  1.72e-01  5.62e-05  1.37e-02  9.36e-06  1.76e-04  7.85e-01  
 12  +4.7198e-01  +5.8839e-01  1.16e-01  3.15e-05  7.65e-03  6.24e-06  1.03e-04  4.90e-01  
 13  +4.6444e-01  +5.4960e-01  8.52e-02  2.15e-05  5.20e-03  4.09e-06  7.25e-05  4.88e-01  
 14  +4.6142e-01  +5.3497e-01  7.36e-02  1.79e-05  4.34e-03  3.43e-06  6.12e-05  3.61e-01  
 15  +4.5263e-01  +4.9360e-01  4.10e-02  9.31e-06  2.26e-03  1.86e-06  3.31e-05  5.51e-01  
 16  +4.5241e-01  +4.9251e-01  4.01e-02  9.09e-06  2.20e-03  1.82e-06  3.23e-05  5.72e-02  
 17  +4.4912e-01  +4.7730e-01  2.82e-02  6.23e-06  1.51e-03  1.31e-06  2.25e-05  5.10e-01  
 18  +4.4597e-01  +4.6334e-01  1.74e-02  3.77e-06  9.13e-04  8.10e-07  1.39e-05  4.41e-01  
 19  +4.4585e-01  +4.6258e-01  1.67e-02  3.62e-06  8.76e-04  7.93e-07  1.33e-05  1.86e-01  
 20  +4.4379e-01  +4.5332e-01  9.53e-03  2.03e-06  4.92e-04  4.71e-07  7.59e-06  7.15e-01  
 21  +4.4163e-01  +4.4434e-01  2.71e-03  5.73e-07  1.39e-04  1.35e-07  2.18e-06  7.55e-01  
 22  +4.4116e-01  +4.4243e-01  1.27e-03  2.65e-07  6.41e-05  6.39e-08  1.01e-06  6.43e-01  
 23  +4.4092e-01  +4.4152e-01  6.01e-04  1.21e-07  2.94e-05  3.04e-08  4.74e-07  7.77e-01  
 24  +4.4091e-01  +4.4147e-01  5.64e-04  1.14e-07  2.75e-05  2.85e-08  4.44e-07  1.45e-01  
 25  +4.4074e-01  +4.4083e-01  9.63e-05  1.90e-08  4.62e-06  4.88e-09  7.56e-08  9.90e-01  
 26  +4.4070e-01  +4.4070e-01  1.50e-06  2.95e-10  7.15e-08  7.60e-11  1.18e-09  9.85e-01  
 27  +4.4070e-01  +4.4070e-01  1.50e-08  2.95e-12  7.15e-10  7.60e-13  1.18e-11  9.90e-01  
 28  +4.4070e-01  +4.4070e-01  1.51e-10  2.97e-14  7.19e-12  9.66e-15  1.48e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 277.3061ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:36 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:36 PM: Optimal value: 4.407e-01
(CVXPY) Sep 20 08:00:36 PM: Compilation took 9.303e-02 seconds
(CVXPY) Sep 20 08:00:36 PM: Solver (including time spent in interface) took 2.926e-01 seconds
Iteration: 26, Objective: 0.4407
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:36 PM: Your problem has 5279 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:36 PM: Finished problem compilation (took 7.953e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5279
  constraints   = 10279
  nnz(P)        = 0
  nnz(A)        = 99627
  cones (total) = 1
    : Nonnegative = 1,  numel = 10279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7963e-01  +1.0865e+03  1.09e+03  4.36e-01  7.75e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3085e-01  +1.2098e+02  1.20e+02  1.69e-01  3.80e+01  1.65e-02  2.74e-01  9.43e-01  
  3  +5.0859e-01  +3.1466e+01  3.10e+01  1.22e-01  2.75e+01  4.60e-05  2.52e-01  3.02e-01  
  4  +5.0106e-01  +3.1793e+00  2.68e+00  1.84e-02  4.31e+00  5.94e-06  1.60e-01  6.14e-01  
  5  +5.0015e-01  +1.0871e+00  5.87e-01  3.99e-03  9.55e-01  4.39e-05  8.63e-02  9.90e-01  
  6  +5.0003e-01  +8.1720e-01  3.17e-01  2.12e-03  5.08e-01  4.83e-05  2.69e-02  7.58e-01  
  7  +4.9890e-01  +8.3301e-01  3.34e-01  5.59e-04  1.36e-01  6.00e-04  1.80e-03  9.71e-01  
  8  +4.9399e-01  +7.9597e-01  3.02e-01  1.22e-04  2.99e-02  2.46e-03  3.70e-04  7.98e-01  
  9  +4.9302e-01  +7.6397e-01  2.71e-01  1.02e-04  2.48e-02  1.66e-03  3.07e-04  3.90e-01  
 10  +4.9176e-01  +7.3945e-01  2.48e-01  8.91e-05  2.17e-02  1.18e-03  2.70e-04  3.04e-01  
 11  +4.8927e-01  +7.0307e-01  2.14e-01  7.49e-05  1.82e-02  5.32e-04  2.29e-04  4.79e-01  
 12  +4.8150e-01  +6.4975e-01  1.68e-01  5.09e-05  1.24e-02  3.23e-04  1.61e-04  4.62e-01  
 13  +4.7177e-01  +5.9417e-01  1.22e-01  3.34e-05  8.10e-03  1.94e-04  1.10e-04  4.05e-01  
 14  +4.6429e-01  +5.5475e-01  9.05e-02  2.30e-05  5.58e-03  1.11e-04  7.81e-05  4.19e-01  
 15  +4.6007e-01  +5.3388e-01  7.38e-02  1.79e-05  4.34e-03  7.04e-05  6.18e-05  3.73e-01  
 16  +4.5267e-01  +4.9834e-01  4.57e-02  1.05e-05  2.53e-03  3.48e-05  3.73e-05  5.06e-01  
 17  +4.5183e-01  +4.9431e-01  4.25e-02  9.65e-06  2.34e-03  3.04e-05  3.46e-05  1.32e-01  
 18  +4.4677e-01  +4.7075e-01  2.40e-02  5.27e-06  1.28e-03  1.22e-05  1.94e-05  6.06e-01  
 19  +4.4408e-01  +4.5754e-01  1.35e-02  2.88e-06  6.98e-04  9.83e-07  1.07e-05  9.90e-01  
 20  +4.4097e-01  +4.4473e-01  3.76e-03  7.99e-07  1.93e-04  2.54e-07  3.05e-06  7.83e-01  
 21  +4.4001e-01  +4.4084e-01  8.23e-04  1.74e-07  4.21e-05  5.26e-08  6.71e-07  8.33e-01  
 22  +4.3981e-01  +4.4005e-01  2.33e-04  4.91e-08  1.19e-05  1.18e-08  1.90e-07  9.54e-01  
 23  +4.3973e-01  +4.3974e-01  4.07e-06  8.57e-10  2.07e-07  2.07e-10  3.31e-09  9.83e-01  
 24  +4.3973e-01  +4.3973e-01  4.13e-08  8.70e-12  2.11e-09  2.11e-12  3.36e-11  9.90e-01  
 25  +4.3973e-01  +4.3973e-01  4.24e-10  8.95e-14  2.16e-11  2.20e-14  3.51e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 318.0049ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:36 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:36 PM: Optimal value: 4.397e-01
(CVXPY) Sep 20 08:00:36 PM: Compilation took 7.953e-02 seconds
(CVXPY) Sep 20 08:00:36 PM: Solver (including time spent in interface) took 3.370e-01 seconds
Iteration: 27, Objective: 0.4397
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:36 PM: Your problem has 5289 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:37 PM: Finished problem compilation (took 8.449e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5289
  constraints   = 10289
  nnz(P)        = 0
  nnz(A)        = 100281
  cones (total) = 1
    : Nonnegative = 1,  numel = 10289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7961e-01  +1.0864e+03  1.09e+03  4.36e-01  7.74e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3081e-01  +1.2089e+02  1.20e+02  1.69e-01  3.79e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0859e-01  +3.1446e+01  3.09e+01  1.22e-01  2.75e+01  4.60e-05  2.52e-01  3.02e-01  
  4  +5.0106e-01  +3.1785e+00  2.68e+00  1.84e-02  4.31e+00  5.94e-06  1.60e-01  6.14e-01  
  5  +5.0015e-01  +1.0942e+00  5.94e-01  4.04e-03  9.66e-01  4.42e-05  8.59e-02  9.90e-01  
  6  +5.0003e-01  +8.2448e-01  3.24e-01  2.16e-03  5.18e-01  4.95e-05  2.67e-02  7.59e-01  
  7  +4.9884e-01  +8.3828e-01  3.39e-01  5.40e-04  1.31e-01  6.32e-04  1.73e-03  9.71e-01  
  8  +4.9442e-01  +8.0281e-01  3.08e-01  1.35e-04  3.29e-02  2.26e-03  4.09e-04  7.69e-01  
  9  +4.9289e-01  +7.6893e-01  2.76e-01  1.05e-04  2.55e-02  1.72e-03  3.17e-04  4.16e-01  
 10  +4.9096e-01  +7.3843e-01  2.47e-01  8.75e-05  2.13e-02  1.21e-03  2.66e-04  3.44e-01  
 11  +4.8755e-01  +7.0689e-01  2.19e-01  7.20e-05  1.75e-02  8.96e-04  2.22e-04  3.00e-01  
 12  +4.7700e-01  +6.2372e-01  1.47e-01  4.29e-05  1.04e-02  1.90e-04  1.39e-04  7.02e-01  
 13  +4.7172e-01  +5.9335e-01  1.22e-01  3.37e-05  8.18e-03  8.25e-05  1.11e-04  5.10e-01  
 14  +4.6309e-01  +5.4930e-01  8.62e-02  2.19e-05  5.30e-03  4.46e-05  7.47e-05  4.63e-01  
 15  +4.6042e-01  +5.3581e-01  7.54e-02  1.84e-05  4.45e-03  2.29e-05  6.32e-05  5.05e-01  
 16  +4.5293e-01  +5.0078e-01  4.79e-02  1.10e-05  2.66e-03  1.17e-05  3.91e-05  5.02e-01  
 17  +4.5112e-01  +4.9223e-01  4.11e-02  9.30e-06  2.25e-03  8.88e-06  3.34e-05  2.70e-01  
 18  +4.4489e-01  +4.6385e-01  1.90e-02  4.13e-06  1.00e-03  2.98e-06  1.53e-05  6.94e-01  
 19  +4.4320e-01  +4.5618e-01  1.30e-02  2.79e-06  6.74e-04  1.57e-06  1.04e-05  5.57e-01  
 20  +4.4136e-01  +4.4821e-01  6.85e-03  1.45e-06  3.52e-04  6.47e-07  5.53e-06  6.77e-01  
 21  +4.3991e-01  +4.4211e-01  2.20e-03  4.65e-07  1.13e-04  1.47e-07  1.78e-06  8.85e-01  
 22  +4.3931e-01  +4.3973e-01  4.13e-04  8.71e-08  2.11e-05  2.18e-08  3.36e-07  9.64e-01  
 23  +4.3917e-01  +4.3918e-01  9.63e-06  2.03e-09  4.92e-07  5.06e-10  7.84e-09  9.78e-01  
 24  +4.3917e-01  +4.3917e-01  9.74e-08  2.05e-11  4.97e-09  5.11e-12  7.93e-11  9.90e-01  
 25  +4.3917e-01  +4.3917e-01  9.88e-10  2.08e-13  5.05e-11  5.16e-14  8.00e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 286.3713ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:37 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:37 PM: Optimal value: 4.392e-01
(CVXPY) Sep 20 08:00:37 PM: Compilation took 8.449e-02 seconds
(CVXPY) Sep 20 08:00:37 PM: Solver (including time spent in interface) took 3.056e-01 seconds
Iteration: 28, Objective: 0.4392
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:37 PM: Your problem has 5299 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:37 PM: Finished problem compilation (took 8.903e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5299
  constraints   = 10299
  nnz(P)        = 0
  nnz(A)        = 100814
  cones (total) = 1
    : Nonnegative = 1,  numel = 10299

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7955e-01  +1.0865e+03  1.09e+03  4.36e-01  7.74e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3075e-01  +1.2077e+02  1.20e+02  1.69e-01  3.78e+01  1.65e-02  2.73e-01  9.44e-01  
  3  +5.0858e-01  +3.1418e+01  3.09e+01  1.22e-01  2.74e+01  4.61e-05  2.52e-01  3.03e-01  
  4  +5.0106e-01  +3.1803e+00  2.68e+00  1.84e-02  4.31e+00  5.95e-06  1.60e-01  6.15e-01  
  5  +5.0015e-01  +1.1048e+00  6.05e-01  4.12e-03  9.84e-01  4.47e-05  8.54e-02  9.90e-01  
  6  +5.0003e-01  +8.3823e-01  3.38e-01  2.25e-03  5.40e-01  5.14e-05  2.70e-02  7.41e-01  
  7  +4.9869e-01  +8.4550e-01  3.47e-01  5.06e-04  1.23e-01  7.06e-04  1.60e-03  9.72e-01  
  8  +4.9356e-01  +8.0694e-01  3.13e-01  1.23e-04  2.99e-02  2.57e-03  3.71e-04  7.75e-01  
  9  +4.9021e-01  +7.7252e-01  2.82e-01  9.09e-05  2.21e-02  2.41e-03  2.76e-04  3.39e-01  
 10  +4.8893e-01  +7.4222e-01  2.53e-01  8.65e-05  2.11e-02  1.56e-03  2.65e-04  2.00e-01  
 11  +4.8518e-01  +7.1088e-01  2.26e-01  7.22e-05  1.76e-02  1.27e-03  2.25e-04  2.19e-01  
 12  +4.8516e-01  +7.0677e-01  2.22e-01  7.19e-05  1.75e-02  1.13e-03  2.24e-04  7.17e-02  
 13  +4.7485e-01  +6.3556e-01  1.61e-01  4.51e-05  1.09e-02  7.21e-04  1.46e-04  4.19e-01  
 14  +4.6851e-01  +5.9289e-01  1.24e-01  3.33e-05  8.07e-03  3.24e-04  1.11e-04  4.88e-01  
 15  +4.5910e-01  +5.4078e-01  8.17e-02  2.02e-05  4.88e-03  1.43e-04  6.99e-05  5.37e-01  
 16  +4.5422e-01  +5.1513e-01  6.09e-02  1.43e-05  3.47e-03  7.04e-05  5.08e-05  5.11e-01  
 17  +4.4950e-01  +4.9249e-01  4.30e-02  9.81e-06  2.37e-03  4.40e-05  3.57e-05  3.73e-01  
 18  +4.4660e-01  +4.7858e-01  3.20e-02  7.16e-06  1.73e-03  2.83e-05  2.65e-05  3.59e-01  
 19  +4.4073e-01  +4.5122e-01  1.05e-02  2.28e-06  5.52e-04  6.03e-06  8.79e-06  7.84e-01  
 20  +4.3976e-01  +4.4685e-01  7.09e-03  1.54e-06  3.71e-04  3.70e-06  5.98e-06  3.88e-01  
 21  +4.3890e-01  +4.4276e-01  3.86e-03  8.27e-07  2.00e-04  2.53e-07  3.27e-06  9.90e-01  
 22  +4.3821e-01  +4.3998e-01  1.78e-03  3.78e-07  9.14e-05  9.07e-08  1.52e-06  9.17e-01  
 23  +4.3767e-01  +4.3787e-01  2.03e-04  4.28e-08  1.04e-05  1.02e-08  1.76e-07  8.97e-01  
 24  +4.3760e-01  +4.3760e-01  2.27e-06  4.78e-10  1.15e-07  1.12e-10  1.97e-09  9.90e-01  
 25  +4.3760e-01  +4.3760e-01  2.28e-08  4.78e-12  1.16e-09  1.13e-12  1.97e-11  9.90e-01  
 26  +4.3760e-01  +4.3760e-01  2.29e-10  4.81e-14  1.16e-11  1.22e-14  2.12e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 378.2308ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:38 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:38 PM: Optimal value: 4.376e-01
(CVXPY) Sep 20 08:00:38 PM: Compilation took 8.903e-02 seconds
(CVXPY) Sep 20 08:00:38 PM: Solver (including time spent in interface) took 3.950e-01 seconds
Iteration: 29, Objective: 0.4376
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:38 PM: Your problem has 5305 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:38 PM: Finished problem compilation (took 9.264e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5305
  constraints   = 10305
  nnz(P)        = 0
  nnz(A)        = 101315
  cones (total) = 1
    : Nonnegative = 1,  numel = 10305

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7957e-01  +1.0865e+03  1.09e+03  4.36e-01  7.73e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3074e-01  +1.2072e+02  1.20e+02  1.69e-01  3.78e+01  1.65e-02  2.73e-01  9.44e-01  
  3  +5.0857e-01  +3.1395e+01  3.09e+01  1.22e-01  2.74e+01  4.61e-05  2.52e-01  3.04e-01  
  4  +5.0106e-01  +3.1771e+00  2.68e+00  1.84e-02  4.31e+00  5.95e-06  1.59e-01  6.15e-01  
  5  +5.0020e-01  +1.2108e+00  7.11e-01  4.84e-03  1.16e+00  4.30e-05  9.30e-02  8.84e-01  
  6  +5.0004e-01  +8.3168e-01  3.32e-01  2.21e-03  5.31e-01  4.42e-05  2.69e-02  8.34e-01  
  7  +4.9836e-01  +8.8927e-01  3.91e-01  4.14e-04  1.01e-01  8.72e-04  1.28e-03  9.90e-01  
  8  +4.9383e-01  +8.3734e-01  3.44e-01  1.33e-04  3.23e-02  2.20e-03  3.99e-04  7.06e-01  
  9  +4.9162e-01  +8.0437e-01  3.13e-01  1.04e-04  2.53e-02  1.91e-03  3.14e-04  3.26e-01  
 10  +4.8930e-01  +7.5008e-01  2.61e-01  8.90e-05  2.17e-02  9.30e-04  2.72e-04  3.83e-01  
 11  +4.7975e-01  +6.6399e-01  1.84e-01  5.52e-05  1.34e-02  3.96e-04  1.76e-04  5.64e-01  
 12  +4.7145e-01  +6.1292e-01  1.41e-01  3.92e-05  9.49e-03  2.63e-04  1.29e-04  3.31e-01  
 13  +4.6645e-01  +5.8286e-01  1.16e-01  3.08e-05  7.45e-03  1.56e-04  1.04e-04  3.85e-01  
 14  +4.5849e-01  +5.4049e-01  8.20e-02  2.03e-05  4.91e-03  9.08e-05  7.09e-05  4.10e-01  
 15  +4.5314e-01  +5.1264e-01  5.95e-02  1.39e-05  3.37e-03  4.38e-05  5.00e-05  5.27e-01  
 16  +4.4970e-01  +4.9468e-01  4.50e-02  1.02e-05  2.46e-03  1.68e-05  3.73e-05  6.41e-01  
 17  +4.4241e-01  +4.6178e-01  1.94e-02  4.22e-06  1.02e-03  5.93e-06  1.64e-05  6.34e-01  
 18  +4.3836e-01  +4.4387e-01  5.51e-03  1.17e-06  2.83e-04  1.02e-06  4.76e-06  8.41e-01  
 19  +4.3715e-01  +4.3873e-01  1.58e-03  3.32e-07  8.03e-05  8.53e-08  1.39e-06  9.90e-01  
 20  +4.3661e-01  +4.3664e-01  2.80e-05  5.87e-09  1.42e-06  1.48e-09  2.48e-08  9.83e-01  
 21  +4.3660e-01  +4.3660e-01  2.82e-07  5.91e-11  1.43e-08  1.49e-11  2.49e-10  9.90e-01  
 22  +4.3660e-01  +4.3660e-01  2.82e-09  5.91e-13  1.43e-10  1.51e-13  2.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 318.6941ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:38 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:38 PM: Optimal value: 4.366e-01
(CVXPY) Sep 20 08:00:38 PM: Compilation took 9.264e-02 seconds
(CVXPY) Sep 20 08:00:38 PM: Solver (including time spent in interface) took 3.410e-01 seconds
Iteration: 30, Objective: 0.4366
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:39 PM: Your problem has 5315 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:39 PM: Finished problem compilation (took 1.050e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5315
  constraints   = 10315
  nnz(P)        = 0
  nnz(A)        = 102075
  cones (total) = 1
    : Nonnegative = 1,  numel = 10315

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7958e-01  +1.0864e+03  1.09e+03  4.36e-01  7.73e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3073e-01  +1.2070e+02  1.20e+02  1.69e-01  3.77e+01  1.65e-02  2.73e-01  9.44e-01  
  3  +5.0857e-01  +3.1387e+01  3.09e+01  1.22e-01  2.73e+01  4.60e-05  2.52e-01  3.04e-01  
  4  +5.0106e-01  +3.1763e+00  2.68e+00  1.84e-02  4.31e+00  5.95e-06  1.59e-01  6.16e-01  
  5  +5.0018e-01  +1.1805e+00  6.80e-01  4.64e-03  1.11e+00  4.36e-05  9.05e-02  9.16e-01  
  6  +5.0004e-01  +8.4010e-01  3.40e-01  2.26e-03  5.43e-01  4.71e-05  2.63e-02  8.31e-01  
  7  +4.9830e-01  +8.7881e-01  3.81e-01  3.96e-04  9.65e-02  9.00e-04  1.22e-03  9.90e-01  
  8  +4.9375e-01  +8.2780e-01  3.34e-01  1.30e-04  3.17e-02  2.20e-03  3.91e-04  6.99e-01  
  9  +4.9182e-01  +7.9997e-01  3.08e-01  1.02e-04  2.50e-02  1.93e-03  3.09e-04  3.36e-01  
 10  +4.8917e-01  +7.4778e-01  2.59e-01  8.69e-05  2.11e-02  1.00e-03  2.65e-04  3.75e-01  
 11  +4.7880e-01  +6.5830e-01  1.80e-01  5.25e-05  1.28e-02  4.29e-04  1.67e-04  5.68e-01  
 12  +4.6784e-01  +5.9122e-01  1.23e-01  3.29e-05  7.98e-03  2.03e-04  1.10e-04  4.85e-01  
 13  +4.6246e-01  +5.6236e-01  9.99e-02  2.53e-05  6.13e-03  1.35e-04  8.66e-05  3.35e-01  
 14  +4.5715e-01  +5.3469e-01  7.75e-02  1.87e-05  4.52e-03  7.59e-05  6.54e-05  4.37e-01  
 15  +4.5065e-01  +5.0204e-01  5.14e-02  1.17e-05  2.84e-03  2.70e-05  4.24e-05  6.44e-01  
 16  +4.4700e-01  +4.8431e-01  3.73e-02  8.30e-06  2.01e-03  1.39e-05  3.06e-05  5.10e-01  
 17  +4.4334e-01  +4.6750e-01  2.42e-02  5.28e-06  1.28e-03  7.25e-06  2.00e-05  4.90e-01  
 18  +4.4177e-01  +4.5970e-01  1.79e-02  3.84e-06  9.29e-04  2.40e-06  1.47e-05  7.73e-01  
 19  +4.3772e-01  +4.4281e-01  5.09e-03  1.07e-06  2.59e-04  5.30e-07  4.30e-06  8.08e-01  
 20  +4.3621e-01  +4.3680e-01  5.93e-04  1.22e-07  2.96e-05  4.77e-08  5.09e-07  9.29e-01  
 21  +4.3600e-01  +4.3601e-01  8.26e-06  1.70e-09  4.11e-07  5.93e-10  7.11e-09  9.90e-01  
 22  +4.3600e-01  +4.3600e-01  8.28e-08  1.71e-11  4.12e-09  5.94e-12  7.12e-11  9.90e-01  
 23  +4.3600e-01  +4.3600e-01  8.28e-10  1.70e-13  4.12e-11  6.09e-14  7.29e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 288.2948ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:39 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:39 PM: Optimal value: 4.360e-01
(CVXPY) Sep 20 08:00:39 PM: Compilation took 1.050e-01 seconds
(CVXPY) Sep 20 08:00:39 PM: Solver (including time spent in interface) took 3.058e-01 seconds
Iteration: 31, Objective: 0.4360
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:39 PM: Your problem has 5325 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:39 PM: Finished problem compilation (took 9.009e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5325
  constraints   = 10325
  nnz(P)        = 0
  nnz(A)        = 102926
  cones (total) = 1
    : Nonnegative = 1,  numel = 10325

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7959e-01  +1.0864e+03  1.09e+03  4.37e-01  7.72e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3072e-01  +1.2067e+02  1.20e+02  1.69e-01  3.77e+01  1.65e-02  2.73e-01  9.44e-01  
  3  +5.0856e-01  +3.1376e+01  3.09e+01  1.22e-01  2.73e+01  4.61e-05  2.52e-01  3.04e-01  
  4  +5.0106e-01  +3.1751e+00  2.67e+00  1.84e-02  4.30e+00  5.95e-06  1.59e-01  6.16e-01  
  5  +5.0019e-01  +1.1907e+00  6.91e-01  4.71e-03  1.12e+00  4.35e-05  9.08e-02  9.08e-01  
  6  +5.0004e-01  +8.3843e-01  3.38e-01  2.25e-03  5.40e-01  4.66e-05  2.62e-02  8.30e-01  
  7  +4.9880e-01  +8.8670e-01  3.88e-01  5.34e-04  1.30e-01  6.55e-04  1.67e-03  9.90e-01  
  8  +4.9466e-01  +8.4519e-01  3.51e-01  1.47e-04  3.59e-02  2.07e-03  4.42e-04  7.44e-01  
  9  +4.9253e-01  +8.0606e-01  3.14e-01  1.12e-04  2.73e-02  1.74e-03  3.37e-04  3.72e-01  
 10  +4.9168e-01  +7.6807e-01  2.76e-01  1.01e-04  2.45e-02  9.66e-04  3.05e-04  3.44e-01  
 11  +4.8500e-01  +6.8759e-01  2.03e-01  6.67e-05  1.62e-02  2.44e-04  2.07e-04  6.96e-01  
 12  +4.7264e-01  +6.1234e-01  1.40e-01  3.89e-05  9.43e-03  1.44e-04  1.27e-04  4.72e-01  
 13  +4.6938e-01  +5.9442e-01  1.25e-01  3.37e-05  8.16e-03  8.39e-05  1.12e-04  3.87e-01  
 14  +4.6218e-01  +5.5810e-01  9.59e-02  2.43e-05  5.89e-03  5.92e-05  8.32e-05  2.95e-01  
 15  +4.5557e-01  +5.2572e-01  7.02e-02  1.68e-05  4.07e-03  3.43e-05  5.93e-05  4.23e-01  
 16  +4.5281e-01  +5.1060e-01  5.78e-02  1.33e-05  3.21e-03  1.10e-05  4.72e-05  7.30e-01  
 17  +4.4690e-01  +4.8365e-01  3.67e-02  8.16e-06  1.97e-03  5.03e-06  3.00e-05  5.93e-01  
 18  +4.4292e-01  +4.6582e-01  2.29e-02  5.00e-06  1.21e-03  2.82e-06  1.88e-05  4.66e-01  
 19  +4.4049e-01  +4.5482e-01  1.43e-02  3.09e-06  7.46e-04  1.38e-06  1.18e-05  6.07e-01  
 20  +4.3838e-01  +4.4555e-01  7.17e-03  1.53e-06  3.69e-04  4.78e-07  5.95e-06  8.25e-01  
 21  +4.3706e-01  +4.4019e-01  3.13e-03  6.60e-07  1.59e-04  1.96e-07  2.64e-06  6.48e-01  
 22  +4.3635e-01  +4.3733e-01  9.83e-04  2.05e-07  4.94e-05  4.76e-08  8.40e-07  9.90e-01  
 23  +4.3604e-01  +4.3614e-01  1.07e-04  2.21e-08  5.33e-06  5.14e-09  9.20e-08  8.94e-01  
 24  +4.3600e-01  +4.3600e-01  1.11e-06  2.30e-10  5.55e-08  5.35e-11  9.60e-10  9.90e-01  
 25  +4.3600e-01  +4.3600e-01  1.12e-08  2.30e-12  5.55e-10  5.35e-13  9.60e-12  9.90e-01  
 26  +4.3600e-01  +4.3600e-01  1.12e-10  2.30e-14  5.56e-12  5.69e-15  1.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 346.2386ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:40 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:40 PM: Optimal value: 4.360e-01
(CVXPY) Sep 20 08:00:40 PM: Compilation took 9.009e-02 seconds
(CVXPY) Sep 20 08:00:40 PM: Solver (including time spent in interface) took 3.636e-01 seconds
Iteration: 32, Objective: 0.4360
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:40 PM: Your problem has 5335 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:40 PM: Finished problem compilation (took 1.062e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5335
  constraints   = 10335
  nnz(P)        = 0
  nnz(A)        = 103537
  cones (total) = 1
    : Nonnegative = 1,  numel = 10335

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7955e-01  +1.0863e+03  1.09e+03  4.37e-01  7.71e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3070e-01  +1.2063e+02  1.20e+02  1.69e-01  3.76e+01  1.65e-02  2.73e-01  9.45e-01  
  3  +5.0856e-01  +3.1362e+01  3.09e+01  1.21e-01  2.73e+01  4.61e-05  2.51e-01  3.05e-01  
  4  +5.0106e-01  +3.1738e+00  2.67e+00  1.84e-02  4.30e+00  5.96e-06  1.59e-01  6.17e-01  
  5  +5.0019e-01  +1.1925e+00  6.92e-01  4.73e-03  1.13e+00  4.38e-05  9.00e-02  9.13e-01  
  6  +5.0005e-01  +8.6954e-01  3.69e-01  2.46e-03  5.91e-01  4.75e-05  2.89e-02  7.81e-01  
  7  +4.9890e-01  +8.7586e-01  3.77e-01  5.63e-04  1.37e-01  6.05e-04  1.77e-03  9.85e-01  
  8  +4.9441e-01  +8.3541e-01  3.41e-01  1.37e-04  3.33e-02  2.20e-03  4.10e-04  7.76e-01  
  9  +4.9309e-01  +8.0435e-01  3.11e-01  1.14e-04  2.78e-02  1.72e-03  3.43e-04  3.15e-01  
 10  +4.9139e-01  +7.7562e-01  2.84e-01  9.88e-05  2.41e-02  1.32e-03  2.99e-04  2.69e-01  
 11  +4.8800e-01  +7.0436e-01  2.16e-01  8.11e-05  1.97e-02  3.34e-05  2.50e-04  7.24e-01  
 12  +4.7588e-01  +6.3004e-01  1.54e-01  4.42e-05  1.07e-02  2.31e-05  1.42e-04  5.46e-01  
 13  +4.6980e-01  +5.9739e-01  1.28e-01  3.48e-05  8.43e-03  1.41e-05  1.15e-04  4.04e-01  
 14  +4.6095e-01  +5.5301e-01  9.21e-02  2.32e-05  5.61e-03  9.19e-06  7.94e-05  3.77e-01  
 15  +4.5638e-01  +5.3057e-01  7.42e-02  1.78e-05  4.30e-03  5.91e-06  6.20e-05  4.73e-01  
 16  +4.5025e-01  +5.0017e-01  4.99e-02  1.12e-05  2.70e-03  2.28e-06  3.98e-05  9.90e-01  
 17  +4.4855e-01  +4.9266e-01  4.41e-02  9.76e-06  2.36e-03  2.04e-06  3.50e-05  2.16e-01  
 18  +4.4442e-01  +4.7463e-01  3.02e-02  6.54e-06  1.58e-03  1.40e-06  2.40e-05  3.92e-01  
 19  +4.4116e-01  +4.6037e-01  1.92e-02  4.08e-06  9.87e-04  9.11e-07  1.53e-05  5.05e-01  
 20  +4.3932e-01  +4.5243e-01  1.31e-02  2.76e-06  6.66e-04  6.31e-07  1.04e-05  4.36e-01  
 21  +4.3777e-01  +4.4558e-01  7.81e-03  1.63e-06  3.93e-04  3.91e-07  6.23e-06  7.62e-01  
 22  +4.3593e-01  +4.3811e-01  2.18e-03  4.50e-07  1.09e-04  1.11e-07  1.75e-06  9.90e-01  
 23  +4.3541e-01  +4.3615e-01  7.32e-04  1.50e-07  3.63e-05  3.74e-08  5.88e-07  7.48e-01  
 24  +4.3516e-01  +4.3520e-01  3.47e-05  7.09e-09  1.71e-06  1.76e-09  2.79e-08  9.63e-01  
 25  +4.3515e-01  +4.3515e-01  3.48e-07  7.11e-11  1.72e-08  1.76e-11  2.79e-10  9.90e-01  
 26  +4.3515e-01  +4.3515e-01  3.70e-09  7.57e-13  1.83e-10  1.89e-13  3.00e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 396.5469ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:41 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:41 PM: Optimal value: 4.352e-01
(CVXPY) Sep 20 08:00:41 PM: Compilation took 1.062e-01 seconds
(CVXPY) Sep 20 08:00:41 PM: Solver (including time spent in interface) took 4.142e-01 seconds
Iteration: 33, Objective: 0.4352
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:41 PM: Your problem has 5345 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:41 PM: Finished problem compilation (took 1.060e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5345
  constraints   = 10345
  nnz(P)        = 0
  nnz(A)        = 104268
  cones (total) = 1
    : Nonnegative = 1,  numel = 10345

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7951e-01  +1.0864e+03  1.09e+03  4.37e-01  7.71e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3067e-01  +1.2057e+02  1.20e+02  1.69e-01  3.75e+01  1.65e-02  2.73e-01  9.45e-01  
  3  +5.0855e-01  +3.1346e+01  3.08e+01  1.21e-01  2.72e+01  4.61e-05  2.51e-01  3.06e-01  
  4  +5.0106e-01  +3.1745e+00  2.67e+00  1.84e-02  4.30e+00  5.96e-06  1.58e-01  6.17e-01  
  5  +5.0019e-01  +1.1940e+00  6.94e-01  4.74e-03  1.13e+00  4.47e-05  8.84e-02  9.27e-01  
  6  +5.0004e-01  +8.5997e-01  3.60e-01  2.40e-03  5.74e-01  5.06e-05  2.72e-02  7.44e-01  
  7  +4.9831e-01  +8.9452e-01  3.96e-01  4.32e-04  1.05e-01  8.96e-04  1.33e-03  9.90e-01  
  8  +4.9354e-01  +8.4116e-01  3.48e-01  1.36e-04  3.32e-02  2.30e-03  4.10e-04  7.11e-01  
  9  +4.9345e-01  +8.0918e-01  3.16e-01  1.19e-04  2.91e-02  1.43e-03  3.57e-04  3.76e-01  
 10  +4.9174e-01  +7.7528e-01  2.84e-01  1.02e-04  2.48e-02  9.73e-04  3.07e-04  3.34e-01  
 11  +4.8504e-01  +6.9808e-01  2.13e-01  6.99e-05  1.70e-02  2.81e-04  2.17e-04  6.57e-01  
 12  +4.7364e-01  +6.2680e-01  1.53e-01  4.33e-05  1.05e-02  1.73e-04  1.41e-04  4.35e-01  
 13  +4.6774e-01  +5.9390e-01  1.26e-01  3.39e-05  8.21e-03  9.45e-05  1.13e-04  4.20e-01  
 14  +4.5946e-01  +5.5148e-01  9.20e-02  2.31e-05  5.58e-03  6.02e-05  7.96e-05  3.64e-01  
 15  +4.5487e-01  +5.2852e-01  7.37e-02  1.76e-05  4.26e-03  3.55e-05  6.18e-05  4.28e-01  
 16  +4.4952e-01  +5.0065e-01  5.11e-02  1.14e-05  2.76e-03  2.15e-06  4.08e-05  9.90e-01  
 17  +4.4768e-01  +4.9254e-01  4.49e-02  9.89e-06  2.39e-03  1.92e-06  3.57e-05  2.05e-01  
 18  +4.4366e-01  +4.7453e-01  3.09e-02  6.64e-06  1.60e-03  1.46e-06  2.44e-05  6.75e-01  
 19  +4.3883e-01  +4.5326e-01  1.44e-02  3.03e-06  7.32e-04  7.43e-07  1.15e-05  9.88e-01  
 20  +4.3715e-01  +4.4634e-01  9.19e-03  1.91e-06  4.62e-04  4.72e-07  7.37e-06  6.19e-01  
 21  +4.3672e-01  +4.4432e-01  7.60e-03  1.58e-06  3.83e-04  3.87e-07  6.10e-06  7.35e-01  
 22  +4.3487e-01  +4.3710e-01  2.22e-03  4.60e-07  1.11e-04  1.13e-07  1.80e-06  7.85e-01  
 23  +4.3439e-01  +4.3522e-01  8.30e-04  1.72e-07  4.14e-05  4.18e-08  6.75e-07  7.45e-01  
 24  +4.3411e-01  +4.3413e-01  2.56e-05  5.29e-09  1.28e-06  1.28e-09  2.09e-08  9.79e-01  
 25  +4.3410e-01  +4.3410e-01  2.62e-07  5.41e-11  1.31e-08  1.31e-11  2.13e-10  9.90e-01  
 26  +4.3410e-01  +4.3410e-01  2.98e-09  6.15e-13  1.49e-10  1.49e-13  2.44e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 372.859ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:41 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:41 PM: Optimal value: 4.341e-01
(CVXPY) Sep 20 08:00:41 PM: Compilation took 1.060e-01 seconds
(CVXPY) Sep 20 08:00:41 PM: Solver (including time spent in interface) took 3.946e-01 seconds
Iteration: 34, Objective: 0.4341
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:42 PM: Your problem has 5355 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:42 PM: Finished problem compilation (took 1.193e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5355
  constraints   = 10355
  nnz(P)        = 0
  nnz(A)        = 105183
  cones (total) = 1
    : Nonnegative = 1,  numel = 10355

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7945e-01  +1.0865e+03  1.09e+03  4.37e-01  7.71e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3064e-01  +1.2054e+02  1.20e+02  1.69e-01  3.75e+01  1.65e-02  2.73e-01  9.45e-01  
  3  +5.0855e-01  +3.1338e+01  3.08e+01  1.21e-01  2.72e+01  4.62e-05  2.51e-01  3.07e-01  
  4  +5.0106e-01  +3.1776e+00  2.68e+00  1.85e-02  4.31e+00  5.97e-06  1.58e-01  6.17e-01  
  5  +5.0020e-01  +1.2325e+00  7.32e-01  5.00e-03  1.19e+00  4.43e-05  9.07e-02  8.94e-01  
  6  +5.0005e-01  +8.7155e-01  3.71e-01  2.48e-03  5.95e-01  4.82e-05  2.90e-02  7.33e-01  
  7  +4.9852e-01  +8.9931e-01  4.01e-01  4.75e-04  1.16e-01  7.96e-04  1.47e-03  9.90e-01  
  8  +4.9379e-01  +8.4717e-01  3.53e-01  1.38e-04  3.37e-02  2.25e-03  4.15e-04  7.34e-01  
  9  +4.9295e-01  +8.1907e-01  3.26e-01  1.18e-04  2.87e-02  1.70e-03  3.53e-04  3.23e-01  
 10  +4.9154e-01  +7.8496e-01  2.93e-01  1.04e-04  2.53e-02  1.14e-03  3.13e-04  3.04e-01  
 11  +4.8648e-01  +7.1412e-01  2.28e-01  7.85e-05  1.91e-02  3.15e-04  2.42e-04  6.03e-01  
 12  +4.7106e-01  +6.1340e-01  1.42e-01  3.86e-05  9.36e-03  1.60e-04  1.26e-04  5.97e-01  
 13  +4.6672e-01  +5.9064e-01  1.24e-01  3.25e-05  7.87e-03  1.05e-04  1.08e-04  3.26e-01  
 14  +4.5869e-01  +5.5020e-01  9.15e-02  2.26e-05  5.46e-03  6.73e-05  7.78e-05  3.53e-01  
 15  +4.5421e-01  +5.2843e-01  7.42e-02  1.76e-05  4.25e-03  4.59e-05  6.18e-05  3.31e-01  
 16  +4.4894e-01  +5.0104e-01  5.21e-02  1.16e-05  2.79e-03  2.18e-06  4.13e-05  9.90e-01  
 17  +4.4794e-01  +4.9661e-01  4.87e-02  1.07e-05  2.59e-03  2.07e-06  3.85e-05  1.47e-01  
 18  +4.4377e-01  +4.7839e-01  3.46e-02  7.46e-06  1.80e-03  1.55e-06  2.73e-05  5.08e-01  
 19  +4.3787e-01  +4.5241e-01  1.45e-02  3.05e-06  7.36e-04  7.19e-07  1.16e-05  8.75e-01  
 20  +4.3656e-01  +4.4689e-01  1.03e-02  2.15e-06  5.19e-04  5.18e-07  8.23e-06  4.56e-01  
 21  +4.3462e-01  +4.3907e-01  4.45e-03  9.15e-07  2.21e-04  2.24e-07  3.56e-06  6.24e-01  
 22  +4.3367e-01  +4.3529e-01  1.62e-03  3.29e-07  7.94e-05  8.19e-08  1.30e-06  8.16e-01  
 23  +4.3316e-01  +4.3333e-01  1.68e-04  3.40e-08  8.22e-06  8.49e-09  1.35e-07  9.28e-01  
 24  +4.3310e-01  +4.3310e-01  1.90e-06  3.84e-10  9.28e-08  9.58e-11  1.53e-09  9.90e-01  
 25  +4.3310e-01  +4.3310e-01  1.92e-08  3.87e-12  9.35e-10  9.66e-13  1.54e-11  9.90e-01  
 26  +4.3310e-01  +4.3310e-01  2.43e-10  4.92e-14  1.19e-11  1.23e-14  1.96e-13  9.87e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 403.3685ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:42 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:42 PM: Optimal value: 4.331e-01
(CVXPY) Sep 20 08:00:42 PM: Compilation took 1.193e-01 seconds
(CVXPY) Sep 20 08:00:42 PM: Solver (including time spent in interface) took 4.219e-01 seconds
Iteration: 35, Objective: 0.4331
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:43 PM: Your problem has 5365 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:43 PM: Finished problem compilation (took 1.068e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5365
  constraints   = 10365
  nnz(P)        = 0
  nnz(A)        = 105637
  cones (total) = 1
    : Nonnegative = 1,  numel = 10365

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7940e-01  +1.0866e+03  1.09e+03  4.37e-01  7.70e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3062e-01  +1.2050e+02  1.20e+02  1.69e-01  3.74e+01  1.66e-02  2.73e-01  9.46e-01  
  3  +5.0854e-01  +3.1328e+01  3.08e+01  1.21e-01  2.71e+01  4.62e-05  2.51e-01  3.08e-01  
  4  +5.0106e-01  +3.1799e+00  2.68e+00  1.85e-02  4.31e+00  5.97e-06  1.58e-01  6.17e-01  
  5  +5.0020e-01  +1.2180e+00  7.18e-01  4.91e-03  1.17e+00  4.49e-05  8.91e-02  9.14e-01  
  6  +5.0004e-01  +8.6234e-01  3.62e-01  2.41e-03  5.77e-01  5.10e-05  2.62e-02  7.77e-01  
  7  +4.9810e-01  +9.0098e-01  4.03e-01  3.90e-04  9.49e-02  9.96e-04  1.19e-03  9.90e-01  
  8  +4.9300e-01  +8.3954e-01  3.47e-01  1.28e-04  3.11e-02  2.34e-03  3.83e-04  7.04e-01  
  9  +4.9112e-01  +8.1021e-01  3.19e-01  1.06e-04  2.57e-02  1.94e-03  3.18e-04  2.98e-01  
 10  +4.8925e-01  +7.7194e-01  2.83e-01  9.37e-05  2.28e-02  1.21e-03  2.85e-04  2.99e-01  
 11  +4.8399e-01  +7.0699e-01  2.23e-01  7.35e-05  1.78e-02  4.26e-04  2.29e-04  5.04e-01  
 12  +4.7273e-01  +6.3374e-01  1.61e-01  4.54e-05  1.10e-02  2.76e-04  1.48e-04  4.22e-01  
 13  +4.6460e-01  +5.8662e-01  1.22e-01  3.21e-05  7.76e-03  1.51e-04  1.08e-04  4.28e-01  
 14  +4.5761e-01  +5.4995e-01  9.23e-02  2.29e-05  5.53e-03  1.00e-04  7.95e-05  3.39e-01  
 15  +4.5261e-01  +5.2445e-01  7.18e-02  1.70e-05  4.10e-03  6.34e-05  6.01e-05  3.82e-01  
 16  +4.5014e-01  +5.1046e-01  6.03e-02  1.37e-05  3.32e-03  3.12e-05  4.90e-05  5.38e-01  
 17  +4.4671e-01  +4.9390e-01  4.72e-02  1.04e-05  2.52e-03  1.72e-05  3.77e-05  4.81e-01  
 18  +4.4238e-01  +4.7264e-01  3.03e-02  6.50e-06  1.57e-03  1.76e-06  2.39e-05  9.90e-01  
 19  +4.3917e-01  +4.5919e-01  2.00e-02  4.25e-06  1.02e-03  1.16e-06  1.59e-05  3.74e-01  
 20  +4.3626e-01  +4.4667e-01  1.04e-02  2.18e-06  5.26e-04  5.66e-07  8.33e-06  7.79e-01  
 21  +4.3420e-01  +4.3835e-01  4.15e-03  8.62e-07  2.08e-04  2.25e-07  3.34e-06  6.42e-01  
 22  +4.3343e-01  +4.3527e-01  1.83e-03  3.79e-07  9.14e-05  9.70e-08  1.48e-06  7.11e-01  
 23  +4.3296e-01  +4.3343e-01  4.68e-04  9.63e-08  2.32e-05  2.44e-08  3.78e-07  8.09e-01  
 24  +4.3281e-01  +4.3284e-01  2.69e-05  5.54e-09  1.34e-06  1.35e-09  2.17e-08  9.90e-01  
 25  +4.3280e-01  +4.3280e-01  2.71e-07  5.58e-11  1.35e-08  1.36e-11  2.19e-10  9.90e-01  
 26  +4.3280e-01  +4.3280e-01  2.87e-09  5.91e-13  1.43e-10  1.45e-13  2.33e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 337.1649ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:43 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:43 PM: Optimal value: 4.328e-01
(CVXPY) Sep 20 08:00:43 PM: Compilation took 1.068e-01 seconds
(CVXPY) Sep 20 08:00:43 PM: Solver (including time spent in interface) took 3.567e-01 seconds
Iteration: 36, Objective: 0.4328
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:43 PM: Your problem has 5375 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:43 PM: Finished problem compilation (took 1.068e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5375
  constraints   = 10375
  nnz(P)        = 0
  nnz(A)        = 105927
  cones (total) = 1
    : Nonnegative = 1,  numel = 10375

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7931e-01  +1.0868e+03  1.09e+03  4.38e-01  7.70e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.3060e-01  +1.2051e+02  1.20e+02  1.69e-01  3.73e+01  1.66e-02  2.73e-01  9.46e-01  
  3  +5.0854e-01  +3.1333e+01  3.08e+01  1.21e-01  2.71e+01  4.63e-05  2.51e-01  3.09e-01  
  4  +5.0106e-01  +3.1838e+00  2.68e+00  1.85e-02  4.32e+00  5.98e-06  1.58e-01  6.17e-01  
  5  +5.0019e-01  +1.1966e+00  6.96e-01  4.76e-03  1.13e+00  4.58e-05  8.69e-02  9.41e-01  
  6  +5.0003e-01  +8.6073e-01  3.61e-01  2.38e-03  5.71e-01  5.49e-05  2.43e-02  7.99e-01  
  7  +4.9810e-01  +8.9922e-01  4.01e-01  3.94e-04  9.58e-02  9.92e-04  1.21e-03  9.90e-01  
  8  +4.9284e-01  +8.4060e-01  3.48e-01  1.25e-04  3.06e-02  2.44e-03  3.77e-04  7.10e-01  
  9  +4.9142e-01  +8.0306e-01  3.12e-01  1.06e-04  2.59e-02  1.63e-03  3.20e-04  3.52e-01  
 10  +4.8948e-01  +7.6654e-01  2.77e-01  9.56e-05  2.32e-02  1.01e-03  2.90e-04  2.92e-01  
 11  +4.8306e-01  +6.9714e-01  2.14e-01  7.00e-05  1.70e-02  3.14e-04  2.19e-04  5.84e-01  
 12  +4.7233e-01  +6.2941e-01  1.57e-01  4.46e-05  1.08e-02  1.95e-04  1.46e-04  4.29e-01  
 13  +4.6399e-01  +5.8251e-01  1.19e-01  3.12e-05  7.54e-03  9.91e-05  1.06e-04  4.66e-01  
 14  +4.5660e-01  +5.4480e-01  8.82e-02  2.18e-05  5.28e-03  6.38e-05  7.62e-05  3.58e-01  
 15  +4.5106e-01  +5.1770e-01  6.66e-02  1.57e-05  3.80e-03  4.31e-05  5.63e-05  3.36e-01  
 16  +4.4669e-01  +4.9426e-01  4.76e-02  1.06e-05  2.56e-03  9.38e-06  3.83e-05  8.28e-01  
 17  +4.4454e-01  +4.8467e-01  4.01e-02  8.82e-06  2.13e-03  7.10e-06  3.22e-05  2.75e-01  
 18  +4.3887e-01  +4.5961e-01  2.07e-02  4.44e-06  1.07e-03  2.91e-06  1.67e-05  6.28e-01  
 19  +4.3718e-01  +4.5159e-01  1.44e-02  3.04e-06  7.34e-04  1.19e-06  1.15e-05  7.71e-01  
 20  +4.3448e-01  +4.4063e-01  6.14e-03  1.28e-06  3.09e-04  4.79e-07  4.95e-06  6.38e-01  
 21  +4.3346e-01  +4.3645e-01  2.99e-03  6.18e-07  1.49e-04  1.86e-07  2.41e-06  7.93e-01  
 22  +4.3288e-01  +4.3423e-01  1.35e-03  2.76e-07  6.65e-05  8.24e-08  1.09e-06  5.99e-01  
 23  +4.3249e-01  +4.3274e-01  2.51e-04  5.10e-08  1.23e-05  1.40e-08  2.02e-07  9.08e-01  
 24  +4.3240e-01  +4.3241e-01  8.40e-06  1.70e-09  4.11e-07  4.34e-10  6.76e-09  9.90e-01  
 25  +4.3240e-01  +4.3240e-01  8.49e-08  1.72e-11  4.15e-09  4.38e-12  6.83e-11  9.90e-01  
 26  +4.3240e-01  +4.3240e-01  1.18e-09  2.39e-13  5.76e-11  6.15e-14  9.58e-13  9.86e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 275.3781ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:44 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:44 PM: Optimal value: 4.324e-01
(CVXPY) Sep 20 08:00:44 PM: Compilation took 1.068e-01 seconds
(CVXPY) Sep 20 08:00:44 PM: Solver (including time spent in interface) took 2.909e-01 seconds
Iteration: 37, Objective: 0.4324
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:44 PM: Your problem has 5385 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:44 PM: Finished problem compilation (took 9.921e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5385
  constraints   = 10385
  nnz(P)        = 0
  nnz(A)        = 106407
  cones (total) = 1
    : Nonnegative = 1,  numel = 10385

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7930e-01  +1.0868e+03  1.09e+03  4.38e-01  7.69e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.3059e-01  +1.2050e+02  1.20e+02  1.69e-01  3.73e+01  1.66e-02  2.73e-01  9.46e-01  
  3  +5.0854e-01  +3.1331e+01  3.08e+01  1.21e-01  2.71e+01  4.63e-05  2.51e-01  3.09e-01  
  4  +5.0106e-01  +3.1848e+00  2.68e+00  1.85e-02  4.32e+00  5.98e-06  1.58e-01  6.17e-01  
  5  +5.0022e-01  +1.2652e+00  7.65e-01  5.23e-03  1.25e+00  4.46e-05  9.17e-02  8.77e-01  
  6  +5.0006e-01  +8.8881e-01  3.89e-01  2.60e-03  6.22e-01  4.81e-05  3.00e-02  7.34e-01  
  7  +4.9880e-01  +9.1259e-01  4.14e-01  5.70e-04  1.39e-01  6.58e-04  1.78e-03  9.90e-01  
  8  +4.9412e-01  +8.6448e-01  3.70e-01  1.44e-04  3.51e-02  2.24e-03  4.32e-04  7.67e-01  
  9  +4.9186e-01  +8.2741e-01  3.36e-01  1.17e-04  2.86e-02  1.88e-03  3.54e-04  2.86e-01  
 10  +4.9105e-01  +7.9495e-01  3.04e-01  1.06e-04  2.59e-02  1.21e-03  3.21e-04  2.96e-01  
 11  +4.8565e-01  +7.0654e-01  2.21e-01  7.71e-05  1.87e-02  8.46e-05  2.39e-04  7.49e-01  
 12  +4.7398e-01  +6.3456e-01  1.61e-01  4.61e-05  1.12e-02  5.49e-05  1.50e-04  4.73e-01  
 13  +4.6568e-01  +5.8983e-01  1.24e-01  3.31e-05  8.01e-03  3.03e-05  1.11e-04  4.39e-01  
 14  +4.5798e-01  +5.5148e-01  9.35e-02  2.33e-05  5.62e-03  1.86e-05  8.06e-05  4.08e-01  
 15  +4.5144e-01  +5.2036e-01  6.89e-02  1.61e-05  3.89e-03  1.11e-05  5.75e-05  4.43e-01  
 16  +4.4868e-01  +5.0562e-01  5.69e-02  1.27e-05  3.07e-03  4.05e-06  4.56e-05  8.23e-01  
 17  +4.4641e-01  +4.9564e-01  4.92e-02  1.08e-05  2.61e-03  3.34e-06  3.93e-05  2.78e-01  
 18  +4.3998e-01  +4.6706e-01  2.71e-02  5.75e-06  1.39e-03  1.40e-06  2.16e-05  9.73e-01  
 19  +4.3714e-01  +4.5506e-01  1.79e-02  3.77e-06  9.10e-04  9.21e-07  1.45e-05  4.50e-01  
 20  +4.3338e-01  +4.3937e-01  5.99e-03  1.25e-06  3.01e-04  3.04e-07  4.93e-06  7.98e-01  
 21  +4.3167e-01  +4.3243e-01  7.62e-04  1.58e-07  3.81e-05  3.75e-08  6.35e-07  9.90e-01  
 22  +4.3141e-01  +4.3144e-01  2.99e-05  6.19e-09  1.49e-06  1.46e-09  2.49e-08  9.66e-01  
 23  +4.3140e-01  +4.3140e-01  3.01e-07  6.24e-11  1.50e-08  1.48e-11  2.52e-10  9.90e-01  
 24  +4.3140e-01  +4.3140e-01  3.04e-09  6.30e-13  1.52e-10  1.50e-13  2.55e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 287.3349ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:44 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:44 PM: Optimal value: 4.314e-01
(CVXPY) Sep 20 08:00:44 PM: Compilation took 9.921e-02 seconds
(CVXPY) Sep 20 08:00:44 PM: Solver (including time spent in interface) took 3.061e-01 seconds
Iteration: 38, Objective: 0.4314
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:45 PM: Your problem has 5395 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:45 PM: Finished problem compilation (took 9.955e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5395
  constraints   = 10395
  nnz(P)        = 0
  nnz(A)        = 106867
  cones (total) = 1
    : Nonnegative = 1,  numel = 10395

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7927e-01  +1.0869e+03  1.09e+03  4.38e-01  7.69e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.3057e-01  +1.2048e+02  1.20e+02  1.69e-01  3.72e+01  1.66e-02  2.73e-01  9.47e-01  
  3  +5.0854e-01  +3.1325e+01  3.08e+01  1.21e-01  2.70e+01  4.64e-05  2.51e-01  3.10e-01  
  4  +5.0106e-01  +3.1867e+00  2.69e+00  1.86e-02  4.32e+00  5.99e-06  1.58e-01  6.18e-01  
  5  +5.0021e-01  +1.2618e+00  7.62e-01  5.21e-03  1.24e+00  4.49e-05  9.10e-02  8.84e-01  
  6  +5.0005e-01  +8.8481e-01  3.85e-01  2.57e-03  6.15e-01  4.91e-05  2.91e-02  7.34e-01  
  7  +4.9863e-01  +9.1397e-01  4.15e-01  5.19e-04  1.26e-01  7.42e-04  1.61e-03  9.90e-01  
  8  +4.9377e-01  +8.6160e-01  3.68e-01  1.40e-04  3.41e-02  2.30e-03  4.19e-04  7.52e-01  
  9  +4.9200e-01  +8.2536e-01  3.33e-01  1.17e-04  2.86e-02  1.79e-03  3.53e-04  2.95e-01  
 10  +4.9081e-01  +7.9233e-01  3.02e-01  1.05e-04  2.55e-02  1.18e-03  3.17e-04  2.94e-01  
 11  +4.8436e-01  +7.0056e-01  2.16e-01  7.26e-05  1.76e-02  1.30e-04  2.26e-04  7.40e-01  
 12  +4.7325e-01  +6.3281e-01  1.60e-01  4.54e-05  1.10e-02  8.55e-05  1.48e-04  4.29e-01  
 13  +4.6427e-01  +5.8444e-01  1.20e-01  3.15e-05  7.61e-03  4.36e-05  1.06e-04  4.76e-01  
 14  +4.5449e-01  +5.3639e-01  8.19e-02  1.97e-05  4.76e-03  2.39e-05  6.91e-05  4.64e-01  
 15  +4.5112e-01  +5.2071e-01  6.96e-02  1.62e-05  3.91e-03  1.87e-05  5.76e-05  2.40e-01  
 16  +4.4917e-01  +5.1071e-01  6.15e-02  1.39e-05  3.36e-03  1.18e-05  4.96e-05  4.38e-01  
 17  +4.4360e-01  +4.8609e-01  4.25e-02  9.26e-06  2.23e-03  7.43e-06  3.39e-05  3.85e-01  
 18  +4.4070e-01  +4.7112e-01  3.04e-02  6.43e-06  1.55e-03  1.66e-06  2.38e-05  9.90e-01  
 19  +4.3629e-01  +4.5333e-01  1.70e-02  3.54e-06  8.54e-04  9.12e-07  1.35e-05  5.56e-01  
 20  +4.3223e-01  +4.3685e-01  4.62e-03  9.50e-07  2.29e-04  2.42e-07  3.73e-06  8.42e-01  
 21  +4.3179e-01  +4.3507e-01  3.28e-03  6.66e-07  1.60e-04  1.69e-07  2.64e-06  6.40e-01  
 22  +4.3078e-01  +4.3125e-01  4.75e-04  9.52e-08  2.30e-05  2.47e-08  3.83e-07  8.74e-01  
 23  +4.3061e-01  +4.3064e-01  2.70e-05  5.39e-09  1.30e-06  1.37e-09  2.18e-08  9.72e-01  
 24  +4.3060e-01  +4.3060e-01  2.72e-07  5.43e-11  1.31e-08  1.38e-11  2.19e-10  9.90e-01  
 25  +4.3060e-01  +4.3060e-01  2.72e-09  5.44e-13  1.31e-10  1.38e-13  2.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 284.3638ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:45 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:45 PM: Optimal value: 4.306e-01
(CVXPY) Sep 20 08:00:45 PM: Compilation took 9.955e-02 seconds
(CVXPY) Sep 20 08:00:45 PM: Solver (including time spent in interface) took 3.001e-01 seconds
Iteration: 39, Objective: 0.4306
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:45 PM: Your problem has 5405 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:45 PM: Finished problem compilation (took 1.117e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5405
  constraints   = 10405
  nnz(P)        = 0
  nnz(A)        = 107317
  cones (total) = 1
    : Nonnegative = 1,  numel = 10405

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7928e-01  +1.0868e+03  1.09e+03  4.38e-01  7.68e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.3057e-01  +1.2046e+02  1.20e+02  1.69e-01  3.72e+01  1.66e-02  2.72e-01  9.47e-01  
  3  +5.0854e-01  +3.1315e+01  3.08e+01  1.21e-01  2.70e+01  4.63e-05  2.51e-01  3.10e-01  
  4  +5.0106e-01  +3.1833e+00  2.68e+00  1.86e-02  4.31e+00  5.98e-06  1.58e-01  6.18e-01  
  5  +5.0022e-01  +1.2678e+00  7.68e-01  5.26e-03  1.25e+00  4.48e-05  9.10e-02  8.81e-01  
  6  +5.0005e-01  +8.8016e-01  3.80e-01  2.54e-03  6.07e-01  4.92e-05  2.83e-02  7.46e-01  
  7  +4.9857e-01  +9.1735e-01  4.19e-01  5.01e-04  1.22e-01  7.72e-04  1.55e-03  9.90e-01  
  8  +4.9376e-01  +8.6260e-01  3.69e-01  1.41e-04  3.43e-02  2.26e-03  4.23e-04  7.43e-01  
  9  +4.9194e-01  +8.2471e-01  3.33e-01  1.17e-04  2.84e-02  1.72e-03  3.51e-04  3.19e-01  
 10  +4.9106e-01  +7.8282e-01  2.92e-01  1.04e-04  2.53e-02  8.57e-04  3.15e-04  3.94e-01  
 11  +4.8565e-01  +7.1082e-01  2.25e-01  7.81e-05  1.89e-02  1.78e-04  2.42e-04  6.61e-01  
 12  +4.7369e-01  +6.3631e-01  1.63e-01  4.62e-05  1.12e-02  1.15e-04  1.49e-04  4.79e-01  
 13  +4.6396e-01  +5.8373e-01  1.20e-01  3.13e-05  7.56e-03  5.14e-05  1.05e-04  5.18e-01  
 14  +4.5497e-01  +5.3988e-01  8.49e-02  2.06e-05  4.96e-03  2.99e-05  7.20e-05  4.26e-01  
 15  +4.4963e-01  +5.1486e-01  6.52e-02  1.51e-05  3.64e-03  1.97e-05  5.40e-05  3.62e-01  
 16  +4.4491e-01  +4.9320e-01  4.83e-02  1.07e-05  2.59e-03  1.24e-05  3.92e-05  4.00e-01  
 17  +4.4327e-01  +4.8577e-01  4.25e-02  9.32e-06  2.25e-03  1.00e-05  3.43e-05  2.10e-01  
 18  +4.3858e-01  +4.6348e-01  2.49e-02  5.23e-06  1.26e-03  1.53e-06  1.96e-05  9.73e-01  
 19  +4.3564e-01  +4.5159e-01  1.60e-02  3.30e-06  7.96e-04  9.48e-07  1.27e-05  4.80e-01  
 20  +4.3201e-01  +4.3710e-01  5.09e-03  1.04e-06  2.50e-04  2.87e-07  4.10e-06  7.77e-01  
 21  +4.3039e-01  +4.3078e-01  3.84e-04  7.78e-08  1.87e-05  1.95e-08  3.12e-07  9.88e-01  
 22  +4.3025e-01  +4.3026e-01  4.00e-06  8.10e-10  1.95e-07  2.03e-10  3.26e-09  9.90e-01  
 23  +4.3025e-01  +4.3025e-01  4.01e-08  8.11e-12  1.95e-09  2.03e-12  3.26e-11  9.90e-01  
 24  +4.3025e-01  +4.3025e-01  4.01e-10  8.11e-14  1.95e-11  2.05e-14  3.29e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 293.6133ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:46 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:46 PM: Optimal value: 4.303e-01
(CVXPY) Sep 20 08:00:46 PM: Compilation took 1.117e-01 seconds
(CVXPY) Sep 20 08:00:46 PM: Solver (including time spent in interface) took 3.094e-01 seconds
Iteration: 40, Objective: 0.4303
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:46 PM: Your problem has 5407 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:46 PM: Finished problem compilation (took 9.690e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5407
  constraints   = 10407
  nnz(P)        = 0
  nnz(A)        = 107492
  cones (total) = 1
    : Nonnegative = 1,  numel = 10407

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7926e-01  +1.0869e+03  1.09e+03  4.38e-01  7.68e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.3057e-01  +1.2046e+02  1.20e+02  1.69e-01  3.71e+01  1.66e-02  2.73e-01  9.47e-01  
  3  +5.0854e-01  +3.1316e+01  3.08e+01  1.21e-01  2.70e+01  4.63e-05  2.51e-01  3.10e-01  
  4  +5.0106e-01  +3.1844e+00  2.68e+00  1.86e-02  4.31e+00  5.99e-06  1.58e-01  6.18e-01  
  5  +5.0021e-01  +1.2576e+00  7.57e-01  5.19e-03  1.23e+00  4.52e-05  9.01e-02  8.92e-01  
  6  +5.0005e-01  +8.8386e-01  3.84e-01  2.56e-03  6.12e-01  5.05e-05  2.81e-02  7.44e-01  
  7  +4.9854e-01  +9.1762e-01  4.19e-01  4.97e-04  1.21e-01  7.86e-04  1.54e-03  9.90e-01  
  8  +4.9369e-01  +8.6255e-01  3.69e-01  1.41e-04  3.43e-02  2.28e-03  4.23e-04  7.41e-01  
  9  +4.9142e-01  +8.2271e-01  3.31e-01  1.15e-04  2.79e-02  1.80e-03  3.47e-04  3.09e-01  
 10  +4.9065e-01  +7.8051e-01  2.90e-01  1.03e-04  2.50e-02  8.52e-04  3.11e-04  4.07e-01  
 11  +4.8540e-01  +7.0213e-01  2.17e-01  7.69e-05  1.86e-02  8.32e-06  2.39e-04  7.96e-01  
 12  +4.7263e-01  +6.2752e-01  1.55e-01  4.35e-05  1.05e-02  6.49e-06  1.41e-04  4.63e-01  
 13  +4.6531e-01  +5.8990e-01  1.25e-01  3.29e-05  7.95e-03  4.89e-06  1.10e-04  4.44e-01  
 14  +4.5415e-01  +5.3581e-01  8.17e-02  1.97e-05  4.75e-03  3.12e-06  6.93e-05  4.90e-01  
 15  +4.5005e-01  +5.1684e-01  6.68e-02  1.55e-05  3.73e-03  2.64e-06  5.54e-05  3.57e-01  
 16  +4.4539e-01  +4.9592e-01  5.05e-02  1.13e-05  2.72e-03  2.04e-06  4.13e-05  3.43e-01  
 17  +4.4363e-01  +4.8784e-01  4.42e-02  9.72e-06  2.34e-03  1.84e-06  3.58e-05  2.50e-01  
 18  +4.4014e-01  +4.7106e-01  3.09e-02  6.57e-06  1.58e-03  1.50e-06  2.45e-05  8.63e-01  
 19  +4.3461e-01  +4.4839e-01  1.38e-02  2.87e-06  6.90e-04  6.64e-07  1.11e-05  6.35e-01  
 20  +4.3197e-01  +4.3750e-01  5.53e-03  1.14e-06  2.73e-04  2.74e-07  4.50e-06  8.26e-01  
 21  +4.3018e-01  +4.3055e-01  3.65e-04  7.43e-08  1.79e-05  1.80e-08  3.00e-07  9.90e-01  
 22  +4.3005e-01  +4.3006e-01  3.85e-06  7.83e-10  1.89e-07  1.90e-10  3.17e-09  9.90e-01  
 23  +4.3005e-01  +4.3005e-01  3.85e-08  7.84e-12  1.89e-09  1.90e-12  3.17e-11  9.90e-01  
 24  +4.3005e-01  +4.3005e-01  3.85e-10  7.83e-14  1.89e-11  1.91e-14  3.19e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 315.987ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:46 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:46 PM: Optimal value: 4.301e-01
(CVXPY) Sep 20 08:00:46 PM: Compilation took 9.690e-02 seconds
(CVXPY) Sep 20 08:00:46 PM: Solver (including time spent in interface) took 3.350e-01 seconds
Iteration: 41, Objective: 0.4301
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:47 PM: Your problem has 5408 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:47 PM: Finished problem compilation (took 1.011e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5408
  constraints   = 10408
  nnz(P)        = 0
  nnz(A)        = 107537
  cones (total) = 1
    : Nonnegative = 1,  numel = 10408

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7926e-01  +1.0869e+03  1.09e+03  4.38e-01  7.68e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.3056e-01  +1.2046e+02  1.20e+02  1.69e-01  3.71e+01  1.66e-02  2.73e-01  9.47e-01  
  3  +5.0853e-01  +3.1315e+01  3.08e+01  1.21e-01  2.70e+01  4.64e-05  2.51e-01  3.10e-01  
  4  +5.0106e-01  +3.1847e+00  2.68e+00  1.86e-02  4.31e+00  5.99e-06  1.58e-01  6.18e-01  
  5  +5.0021e-01  +1.2556e+00  7.55e-01  5.17e-03  1.23e+00  4.52e-05  9.00e-02  8.94e-01  
  6  +5.0005e-01  +8.8268e-01  3.83e-01  2.55e-03  6.10e-01  5.08e-05  2.78e-02  7.46e-01  
  7  +4.9848e-01  +9.1823e-01  4.20e-01  4.82e-04  1.17e-01  8.15e-04  1.49e-03  9.90e-01  
  8  +4.9357e-01  +8.6174e-01  3.68e-01  1.40e-04  3.40e-02  2.29e-03  4.19e-04  7.36e-01  
  9  +4.9137e-01  +8.2212e-01  3.31e-01  1.14e-04  2.78e-02  1.79e-03  3.45e-04  3.12e-01  
 10  +4.9057e-01  +7.8027e-01  2.90e-01  1.03e-04  2.50e-02  8.57e-04  3.11e-04  3.99e-01  
 11  +4.8515e-01  +7.0079e-01  2.16e-01  7.61e-05  1.85e-02  8.40e-06  2.37e-04  7.99e-01  
 12  +4.7188e-01  +6.2370e-01  1.52e-01  4.22e-05  1.02e-02  6.41e-06  1.38e-04  4.91e-01  
 13  +4.6493e-01  +5.8823e-01  1.23e-01  3.24e-05  7.82e-03  4.86e-06  1.09e-04  4.69e-01  
 14  +4.5468e-01  +5.3868e-01  8.40e-02  2.03e-05  4.90e-03  3.23e-06  7.12e-05  4.71e-01  
 15  +4.4975e-01  +5.1583e-01  6.61e-02  1.53e-05  3.69e-03  2.62e-06  5.48e-05  3.83e-01  
 16  +4.4485e-01  +4.9380e-01  4.90e-02  1.09e-05  2.63e-03  1.98e-06  3.99e-05  3.53e-01  
 17  +4.4346e-01  +4.8738e-01  4.39e-02  9.63e-06  2.32e-03  1.83e-06  3.54e-05  2.36e-01  
 18  +4.3904e-01  +4.6635e-01  2.73e-02  5.74e-06  1.38e-03  1.37e-06  2.15e-05  9.90e-01  
 19  +4.3609e-01  +4.5451e-01  1.84e-02  3.82e-06  9.20e-04  9.26e-07  1.46e-05  3.69e-01  
 20  +4.3245e-01  +4.3985e-01  7.40e-03  1.50e-06  3.62e-04  3.78e-07  5.89e-06  8.67e-01  
 21  +4.3011e-01  +4.3084e-01  7.25e-04  1.46e-07  3.51e-05  3.65e-08  5.84e-07  9.51e-01  
 22  +4.2985e-01  +4.2986e-01  8.05e-06  1.62e-09  3.89e-07  4.05e-10  6.49e-09  9.89e-01  
 23  +4.2985e-01  +4.2985e-01  8.07e-08  1.62e-11  3.90e-09  4.05e-12  6.50e-11  9.90e-01  
 24  +4.2985e-01  +4.2985e-01  8.07e-10  1.62e-13  3.90e-11  4.08e-14  6.55e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 315.4134ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:47 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:47 PM: Optimal value: 4.299e-01
(CVXPY) Sep 20 08:00:47 PM: Compilation took 1.011e-01 seconds
(CVXPY) Sep 20 08:00:47 PM: Solver (including time spent in interface) took 3.338e-01 seconds
Iteration: 42, Objective: 0.4299
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:47 PM: Your problem has 5415 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:47 PM: Finished problem compilation (took 9.889e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5415
  constraints   = 10415
  nnz(P)        = 0
  nnz(A)        = 107857
  cones (total) = 1
    : Nonnegative = 1,  numel = 10415

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7925e-01  +1.0869e+03  1.09e+03  4.38e-01  7.68e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.3056e-01  +1.2046e+02  1.20e+02  1.69e-01  3.71e+01  1.66e-02  2.72e-01  9.47e-01  
  3  +5.0853e-01  +3.1312e+01  3.08e+01  1.21e-01  2.70e+01  4.64e-05  2.51e-01  3.10e-01  
  4  +5.0106e-01  +3.1841e+00  2.68e+00  1.86e-02  4.31e+00  5.99e-06  1.58e-01  6.18e-01  
  5  +5.0021e-01  +1.2570e+00  7.57e-01  5.19e-03  1.23e+00  4.53e-05  8.99e-02  8.94e-01  
  6  +5.0005e-01  +8.8089e-01  3.81e-01  2.54e-03  6.06e-01  5.10e-05  2.75e-02  7.51e-01  
  7  +4.9841e-01  +9.1795e-01  4.20e-01  4.64e-04  1.13e-01  8.48e-04  1.43e-03  9.90e-01  
  8  +4.9348e-01  +8.6007e-01  3.67e-01  1.38e-04  3.36e-02  2.29e-03  4.15e-04  7.29e-01  
  9  +4.9134e-01  +8.2175e-01  3.30e-01  1.14e-04  2.77e-02  1.79e-03  3.44e-04  3.05e-01  
 10  +4.9044e-01  +7.7940e-01  2.89e-01  1.02e-04  2.47e-02  8.57e-04  3.08e-04  4.05e-01  
 11  +4.8538e-01  +7.0296e-01  2.18e-01  7.75e-05  1.88e-02  8.27e-06  2.41e-04  7.85e-01  
 12  +4.7403e-01  +6.3675e-01  1.63e-01  4.68e-05  1.13e-02  6.69e-06  1.52e-04  4.28e-01  
 13  +4.6404e-01  +5.8400e-01  1.20e-01  3.16e-05  7.62e-03  4.52e-06  1.07e-04  5.41e-01  
 14  +4.5494e-01  +5.4012e-01  8.52e-02  2.07e-05  4.99e-03  3.20e-06  7.26e-05  4.66e-01  
 15  +4.4899e-01  +5.1277e-01  6.38e-02  1.47e-05  3.55e-03  2.47e-06  5.29e-05  3.96e-01  
 16  +4.4435e-01  +4.9187e-01  4.75e-02  1.06e-05  2.54e-03  1.89e-06  3.87e-05  3.67e-01  
 17  +4.4305e-01  +4.8593e-01  4.29e-02  9.38e-06  2.26e-03  1.76e-06  3.46e-05  2.14e-01  
 18  +4.3794e-01  +4.6223e-01  2.43e-02  5.08e-06  1.22e-03  1.21e-06  1.91e-05  9.90e-01  
 19  +4.3369e-01  +4.4525e-01  1.16e-02  2.37e-06  5.72e-04  5.76e-07  9.24e-06  5.99e-01  
 20  +4.3066e-01  +4.3324e-01  2.58e-03  5.22e-07  1.26e-04  1.29e-07  2.09e-06  8.83e-01  
 21  +4.2979e-01  +4.2991e-01  1.14e-04  2.30e-08  5.53e-06  5.66e-09  9.27e-08  9.90e-01  
 22  +4.2975e-01  +4.2975e-01  1.14e-06  2.31e-10  5.56e-08  5.68e-11  9.31e-10  9.90e-01  
 23  +4.2975e-01  +4.2975e-01  1.14e-08  2.31e-12  5.56e-10  5.68e-13  9.31e-12  9.90e-01  
 24  +4.2975e-01  +4.2975e-01  1.14e-10  2.30e-14  5.56e-12  5.72e-15  9.37e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 254.9727ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:48 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:48 PM: Optimal value: 4.298e-01
(CVXPY) Sep 20 08:00:48 PM: Compilation took 9.889e-02 seconds
(CVXPY) Sep 20 08:00:48 PM: Solver (including time spent in interface) took 2.699e-01 seconds
Iteration: 43, Objective: 0.4298
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:48 PM: Your problem has 5425 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:48 PM: Finished problem compilation (took 1.258e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5425
  constraints   = 10425
  nnz(P)        = 0
  nnz(A)        = 108509
  cones (total) = 1
    : Nonnegative = 1,  numel = 10425

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7927e-01  +1.0867e+03  1.09e+03  4.38e-01  7.67e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.3055e-01  +1.2043e+02  1.20e+02  1.69e-01  3.70e+01  1.66e-02  2.72e-01  9.47e-01  
  3  +5.0853e-01  +3.1301e+01  3.08e+01  1.21e-01  2.69e+01  4.63e-05  2.50e-01  3.10e-01  
  4  +5.0106e-01  +3.1820e+00  2.68e+00  1.86e-02  4.31e+00  5.99e-06  1.58e-01  6.18e-01  
  5  +5.0021e-01  +1.2524e+00  7.52e-01  5.16e-03  1.22e+00  4.55e-05  8.92e-02  9.01e-01  
  6  +5.0004e-01  +8.7644e-01  3.76e-01  2.50e-03  5.97e-01  5.25e-05  2.61e-02  7.74e-01  
  7  +4.9838e-01  +9.2062e-01  4.22e-01  4.59e-04  1.11e-01  8.63e-04  1.41e-03  9.90e-01  
  8  +4.9352e-01  +8.6221e-01  3.69e-01  1.41e-04  3.42e-02  2.26e-03  4.22e-04  7.21e-01  
  9  +4.9129e-01  +8.2446e-01  3.33e-01  1.15e-04  2.80e-02  1.80e-03  3.48e-04  3.03e-01  
 10  +4.9020e-01  +7.8850e-01  2.98e-01  1.04e-04  2.53e-02  1.11e-03  3.16e-04  3.01e-01  
 11  +4.8520e-01  +7.1807e-01  2.33e-01  8.06e-05  1.95e-02  2.70e-04  2.51e-04  6.04e-01  
 12  +4.7364e-01  +6.4539e-01  1.72e-01  4.88e-05  1.18e-02  1.94e-04  1.58e-04  4.28e-01  
 13  +4.6427e-01  +5.9319e-01  1.29e-01  3.38e-05  8.16e-03  1.12e-04  1.14e-04  4.04e-01  
 14  +4.5486e-01  +5.4513e-01  9.03e-02  2.19e-05  5.29e-03  5.83e-05  7.72e-05  4.69e-01  
 15  +4.4679e-01  +5.0680e-01  6.00e-02  1.37e-05  3.31e-03  3.38e-05  5.01e-05  4.24e-01  
 16  +4.4392e-01  +4.9355e-01  4.96e-02  1.11e-05  2.67e-03  2.56e-05  4.09e-05  2.57e-01  
 17  +4.4185e-01  +4.8397e-01  4.21e-02  9.24e-06  2.22e-03  1.96e-05  3.44e-05  2.53e-01  
 18  +4.3912e-01  +4.7011e-01  3.10e-02  6.60e-06  1.59e-03  6.59e-06  2.48e-05  7.26e-01  
 19  +4.3277e-01  +4.4369e-01  1.09e-02  2.26e-06  5.45e-04  1.59e-06  8.90e-06  7.82e-01  
 20  +4.3015e-01  +4.3300e-01  2.85e-03  5.83e-07  1.40e-04  2.31e-07  2.34e-06  9.18e-01  
 21  +4.2918e-01  +4.2925e-01  7.07e-05  1.44e-08  3.47e-06  4.34e-09  5.84e-08  9.90e-01  
 22  +4.2915e-01  +4.2915e-01  7.08e-07  1.45e-10  3.48e-08  4.35e-11  5.86e-10  9.90e-01  
 23  +4.2915e-01  +4.2915e-01  7.11e-09  1.45e-12  3.49e-10  4.38e-13  5.90e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 323.4889ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:48 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:48 PM: Optimal value: 4.292e-01
(CVXPY) Sep 20 08:00:48 PM: Compilation took 1.258e-01 seconds
(CVXPY) Sep 20 08:00:48 PM: Solver (including time spent in interface) took 3.424e-01 seconds
Iteration: 44, Objective: 0.4292
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:49 PM: Your problem has 5426 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:49 PM: Finished problem compilation (took 1.263e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:49 PM: Invoking solver CLARABEL  to obtain a solution.
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres   -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5426
  constraints   = 10426
  nnz(P)        = 0
  nnz(A)        = 108553
  cones (total) = 1
    : Nonnegative = 1,  numel = 10426

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7927e-01  +1.0867e+03  1.09e+03  4.38e-01  7.67e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.3055e-01  +1.2041e+02  1.20e+02  1.69e-01  3.70e+01  1.66e-02  2.72e-01  9.47e-01  
  3  +5.0853e-01  +3.1299e+01  3.08e+01  1.21e-01  2.69e+01  4.63e-05  2.50e-01  3.10e-01  
  4  +5.0106e-01  +3.1819e+00  2.68e+00  1.86e-02  4.31e+00  5.99e-06  1.57e-01  6.18e-01  
  5  +5.0021e-01  +1.2462e+00  7.46e-01  5.11e-03  1.21e+00  4.56e-05  8.87e-02  9.08e-01  
  6  +5.0004e-01  +8.7896e-01  3.79e-01  2.52e-03  6.01e-01  5.33e-05  2.60e-02  7.73e-01  
  7  +4.9842e-01  +9.1881e-01  4.20e-01  4.68e-04  1.14e-01  8.43e-04  1.44e-03  9.90e-01  
  8  +4.9355e-01  +8.6181e-01  3.68e-01  1.40e-04  3.41e-02  2.27e-03  4.22e-04  7.26e-01  
  9  +4.9131e-01  +8.2374e-01  3.32e-01  1.15e-04  2.80e-02  1.80e-03  3.48e-04  3.05e-01  
 10  +4.9022e-01  +7.8730e-01  2.97e-01  1.04e-04  2.53e-02  1.09e-03  3.16e-04  3.07e-01  
 11  +4.8515e-01  +7.1573e-01  2.31e-01  8.01e-05  1.94e-02  2.25e-04  2.49e-04  6.35e-01  
 12  +4.7404e-01  +6.4693e-01  1.73e-01  4.95e-05  1.20e-02  1.68e-04  1.60e-04  4.05e-01  
 13  +4.6431e-01  +5.9280e-01  1.28e-01  3.38e-05  8.16e-03  9.22e-05  1.14e-04  4.30e-01  
 14  +4.5511e-01  +5.4606e-01  9.09e-02  2.22e-05  5.35e-03  4.86e-05  7.80e-05  4.65e-01  
 15  +4.4684e-01  +5.0683e-01  6.00e-02  1.38e-05  3.32e-03  2.82e-05  5.02e-05  4.25e-01  
 16  +4.4410e-01  +4.9419e-01  5.01e-02  1.12e-05  2.70e-03  2.14e-05  4.14e-05  2.62e-01  
 17  +4.4192e-01  +4.8417e-01  4.23e-02  9.28e-06  2.23e-03  1.63e-05  3.46e-05  2.56e-01  
 18  +4.3906e-01  +4.6972e-01  3.07e-02  6.52e-06  1.57e-03  4.98e-06  2.45e-05  7.72e-01  
 19  +4.3289e-01  +4.4420e-01  1.13e-02  2.35e-06  5.64e-04  1.40e-06  9.20e-06  7.44e-01  
 20  +4.3008e-01  +4.3274e-01  2.66e-03  5.44e-07  1.31e-04  2.06e-07  2.19e-06  9.14e-01  
 21  +4.2920e-01  +4.2934e-01  1.41e-04  2.87e-08  6.91e-06  7.66e-09  1.16e-07  9.90e-01  
 22  +4.2915e-01  +4.2915e-01  1.42e-06  2.89e-10  6.96e-08  7.71e-11  1.17e-09  9.90e-01  
 23  +4.2915e-01  +4.2915e-01  1.42e-08  2.89e-12  6.96e-10  7.71e-13  1.17e-11  9.90e-01  
 24  +4.2915e-01  +4.2915e-01  1.43e-10  2.91e-14  7.00e-12  7.79e-15  1.18e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 321.1214ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:49 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:49 PM: Optimal value: 4.292e-01
(CVXPY) Sep 20 08:00:49 PM: Compilation took 1.263e-01 seconds
(CVXPY) Sep 20 08:00:49 PM: Solver (including time spent in interface) took 3.421e-01 seconds
Iteration: 45, Objective: 0.4292
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:49 PM: Your problem has 5436 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:49 PM: Finished problem compilation (took 1.051e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5436
  constraints   = 10436
  nnz(P)        = 0
  nnz(A)        = 108913
  cones (total) = 1
    : Nonnegative = 1,  numel = 10436

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7925e-01  +1.0868e+03  1.09e+03  4.38e-01  7.66e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.3050e-01  +1.2029e+02  1.20e+02  1.69e-01  3.70e+01  1.66e-02  2.72e-01  9.47e-01  
  3  +5.0852e-01  +3.1275e+01  3.08e+01  1.21e-01  2.69e+01  4.64e-05  2.50e-01  3.11e-01  
  4  +5.0106e-01  +3.1836e+00  2.68e+00  1.86e-02  4.31e+00  5.99e-06  1.57e-01  6.18e-01  
  5  +5.0023e-01  +1.3030e+00  8.03e-01  5.51e-03  1.31e+00  4.49e-05  9.19e-02  8.63e-01  
  6  +5.0006e-01  +9.1183e-01  4.12e-01  2.75e-03  6.56e-01  5.00e-05  3.00e-02  7.38e-01  
  7  +4.9872e-01  +9.3343e-01  4.35e-01  5.56e-04  1.35e-01  7.00e-04  1.73e-03  9.90e-01  
  8  +4.9444e-01  +8.8184e-01  3.87e-01  1.60e-04  3.89e-02  2.04e-03  4.82e-04  7.36e-01  
  9  +4.9200e-01  +8.3907e-01  3.47e-01  1.29e-04  3.13e-02  1.69e-03  3.90e-04  2.96e-01  
 10  +4.9048e-01  +8.1038e-01  3.20e-01  1.10e-04  2.67e-02  1.33e-03  3.34e-04  2.87e-01  
 11  +4.8755e-01  +7.5642e-01  2.69e-01  9.38e-05  2.27e-02  6.08e-04  2.88e-04  4.18e-01  
 12  +4.7947e-01  +6.9278e-01  2.13e-01  6.54e-05  1.58e-02  3.90e-04  2.08e-04  4.11e-01  
 13  +4.7188e-01  +6.3968e-01  1.68e-01  4.79e-05  1.16e-02  1.54e-04  1.57e-04  5.37e-01  
 14  +4.6300e-01  +5.8822e-01  1.25e-01  3.29e-05  7.93e-03  5.53e-05  1.12e-04  5.95e-01  
 15  +4.5113e-01  +5.2850e-01  7.74e-02  1.84e-05  4.43e-03  2.05e-05  6.59e-05  6.22e-01  
 16  +4.4655e-01  +5.0722e-01  6.07e-02  1.39e-05  3.35e-03  1.42e-05  5.09e-05  3.27e-01  
 17  +4.4159e-01  +4.8447e-01  4.29e-02  9.49e-06  2.28e-03  8.49e-06  3.55e-05  4.31e-01  
 18  +4.3516e-01  +4.5570e-01  2.05e-02  4.37e-06  1.05e-03  2.93e-06  1.69e-05  6.96e-01  
 19  +4.3192e-01  +4.4149e-01  9.57e-03  1.99e-06  4.78e-04  6.68e-07  7.87e-06  9.09e-01  
 20  +4.2928e-01  +4.3105e-01  1.76e-03  3.63e-07  8.74e-05  8.93e-08  1.47e-06  9.90e-01  
 21  +4.2866e-01  +4.2869e-01  3.16e-05  6.51e-09  1.57e-06  1.59e-09  2.66e-08  9.83e-01  
 22  +4.2865e-01  +4.2865e-01  3.17e-07  6.53e-11  1.57e-08  1.60e-11  2.66e-10  9.90e-01  
 23  +4.2865e-01  +4.2865e-01  3.20e-09  6.57e-13  1.58e-10  1.62e-13  2.69e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 289.7255ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:50 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:50 PM: Optimal value: 4.287e-01
(CVXPY) Sep 20 08:00:50 PM: Compilation took 1.051e-01 seconds
(CVXPY) Sep 20 08:00:50 PM: Solver (including time spent in interface) took 3.053e-01 seconds
Iteration: 46, Objective: 0.4287
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:50 PM: Your problem has 5438 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:50 PM: Finished problem compilation (took 1.200e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5438
  constraints   = 10438
  nnz(P)        = 0
  nnz(A)        = 109013
  cones (total) = 1
    : Nonnegative = 1,  numel = 10438

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7925e-01  +1.0868e+03  1.09e+03  4.38e-01  7.66e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.3050e-01  +1.2030e+02  1.20e+02  1.69e-01  3.70e+01  1.66e-02  2.72e-01  9.47e-01  
  3  +5.0852e-01  +3.1275e+01  3.08e+01  1.21e-01  2.69e+01  4.64e-05  2.50e-01  3.11e-01  
  4  +5.0106e-01  +3.1832e+00  2.68e+00  1.86e-02  4.31e+00  5.99e-06  1.57e-01  6.19e-01  
  5  +5.0023e-01  +1.2951e+00  7.95e-01  5.45e-03  1.29e+00  4.51e-05  9.14e-02  8.70e-01  
  6  +5.0006e-01  +9.0269e-01  4.03e-01  2.69e-03  6.41e-01  5.07e-05  2.88e-02  7.52e-01  
  7  +4.9854e-01  +9.3399e-01  4.35e-01  5.04e-04  1.22e-01  7.86e-04  1.56e-03  9.90e-01  
  8  +4.9418e-01  +8.7872e-01  3.85e-01  1.57e-04  3.81e-02  2.07e-03  4.72e-04  7.15e-01  
  9  +4.9188e-01  +8.3698e-01  3.45e-01  1.27e-04  3.08e-02  1.67e-03  3.84e-04  3.03e-01  
 10  +4.8986e-01  +8.0198e-01  3.12e-01  1.05e-04  2.54e-02  1.26e-03  3.18e-04  3.34e-01  
 11  +4.8773e-01  +7.5615e-01  2.68e-01  9.71e-05  2.35e-02  5.75e-04  2.99e-04  3.34e-01  
 12  +4.7865e-01  +6.8851e-01  2.10e-01  6.34e-05  1.53e-02  4.02e-04  2.02e-04  4.29e-01  
 13  +4.7059e-01  +6.3398e-01  1.63e-01  4.58e-05  1.11e-02  1.77e-04  1.51e-04  5.04e-01  
 14  +4.6266e-01  +5.8759e-01  1.25e-01  3.25e-05  7.84e-03  6.89e-05  1.11e-04  5.69e-01  
 15  +4.4993e-01  +5.2305e-01  7.31e-02  1.72e-05  4.14e-03  2.31e-05  6.19e-05  6.48e-01  
 16  +4.4621e-01  +5.0565e-01  5.94e-02  1.35e-05  3.26e-03  1.57e-05  4.95e-05  3.52e-01  
 17  +4.4143e-01  +4.8363e-01  4.22e-02  9.28e-06  2.23e-03  8.59e-06  3.47e-05  4.87e-01  
 18  +4.3511e-01  +4.5582e-01  2.07e-02  4.40e-06  1.06e-03  3.38e-06  1.71e-05  6.31e-01  
 19  +4.3140e-01  +4.3956e-01  8.16e-03  1.69e-06  4.07e-04  5.83e-07  6.74e-06  9.32e-01  
 20  +4.2912e-01  +4.3057e-01  1.46e-03  3.00e-07  7.22e-05  8.30e-08  1.22e-06  9.36e-01  
 21  +4.2861e-01  +4.2863e-01  2.31e-05  4.76e-09  1.14e-06  1.24e-09  1.94e-08  9.90e-01  
 22  +4.2860e-01  +4.2860e-01  2.32e-07  4.78e-11  1.15e-08  1.24e-11  1.96e-10  9.90e-01  
 23  +4.2860e-01  +4.2860e-01  2.34e-09  4.81e-13  1.16e-10  1.26e-13  1.98e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 301.7168ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:50 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:50 PM: Optimal value: 4.286e-01
(CVXPY) Sep 20 08:00:50 PM: Compilation took 1.200e-01 seconds
(CVXPY) Sep 20 08:00:50 PM: Solver (including time spent in interface) took 3.176e-01 seconds
Iteration: 47, Objective: 0.4286
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:00:51 PM: Your problem has 5439 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:00:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:00:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:00:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:00:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:00:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:00:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:00:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:00:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:00:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:00:51 PM: Finished problem compilation (took 1.200e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5439
  constraints   = 10439
  nnz(P)        = 0
  nnz(A)        = 109038
  cones (total) = 1
    : Nonnegative = 1,  numel = 10439

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7925e-01  +1.0868e+03  1.09e+03  4.39e-01  7.66e+01  3.79e-03  5.75e-01  5.85e-01  
  2  +5.3050e-01  +1.2030e+02  1.20e+02  1.69e-01  3.70e+01  1.66e-02  2.72e-01  9.47e-01  
  3  +5.0852e-01  +3.1274e+01  3.08e+01  1.21e-01  2.69e+01  4.64e-05  2.50e-01  3.11e-01  
  4  +5.0106e-01  +3.1840e+00  2.68e+00  1.86e-02  4.31e+00  5.99e-06  1.57e-01  6.18e-01  
  5  +5.0023e-01  +1.2965e+00  7.96e-01  5.46e-03  1.30e+00  4.51e-05  9.15e-02  8.69e-01  
  6  +5.0006e-01  +9.0199e-01  4.02e-01  2.68e-03  6.40e-01  5.07e-05  2.87e-02  7.53e-01  
  7  +4.9858e-01  +9.3531e-01  4.37e-01  5.17e-04  1.25e-01  7.67e-04  1.60e-03  9.90e-01  
  8  +4.9424e-01  +8.8059e-01  3.86e-01  1.58e-04  3.85e-02  2.06e-03  4.76e-04  7.20e-01  
  9  +4.9191e-01  +8.3818e-01  3.46e-01  1.28e-04  3.11e-02  1.67e-03  3.87e-04  3.02e-01  
 10  +4.9004e-01  +8.0669e-01  3.17e-01  1.07e-04  2.60e-02  1.32e-03  3.25e-04  3.01e-01  
 11  +4.8816e-01  +7.7029e-01  2.82e-01  9.95e-05  2.41e-02  8.14e-04  3.06e-04  2.43e-01  
 12  +4.8137e-01  +7.1249e-01  2.31e-01  7.26e-05  1.76e-02  5.53e-04  2.29e-04  3.75e-01  
 13  +4.7547e-01  +6.6333e-01  1.88e-01  5.60e-05  1.35e-02  2.07e-04  1.81e-04  5.38e-01  
 14  +4.5974e-01  +5.7098e-01  1.11e-01  2.84e-05  6.83e-03  6.92e-05  9.76e-05  6.45e-01  
 15  +4.5232e-01  +5.3447e-01  8.22e-02  1.95e-05  4.71e-03  3.25e-05  6.95e-05  5.38e-01  
 16  +4.4739e-01  +5.1150e-01  6.41e-02  1.47e-05  3.54e-03  2.23e-05  5.35e-05  3.25e-01  
 17  +4.4309e-01  +4.9177e-01  4.87e-02  1.09e-05  2.61e-03  1.50e-05  4.03e-05  3.37e-01  
 18  +4.3516e-01  +4.5579e-01  2.06e-02  4.38e-06  1.05e-03  3.64e-06  1.70e-05  7.85e-01  
 19  +4.3221e-01  +4.4315e-01  1.09e-02  2.29e-06  5.50e-04  1.40e-06  9.05e-06  6.75e-01  
 20  +4.2985e-01  +4.3363e-01  3.78e-03  7.82e-07  1.88e-04  4.63e-07  3.16e-06  6.71e-01  
 21  +4.2874e-01  +4.2914e-01  4.00e-04  8.23e-08  1.98e-05  2.24e-08  3.36e-07  9.90e-01  
 22  +4.2860e-01  +4.2861e-01  4.28e-06  8.81e-10  2.12e-07  2.39e-10  3.60e-09  9.89e-01  
 23  +4.2860e-01  +4.2860e-01  4.30e-08  8.84e-12  2.13e-09  2.40e-12  3.62e-11  9.90e-01  
 24  +4.2860e-01  +4.2860e-01  4.33e-10  8.91e-14  2.14e-11  2.43e-14  3.65e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 392.4586ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:00:51 PM: Problem status: optimal
(CVXPY) Sep 20 08:00:51 PM: Optimal value: 4.286e-01
(CVXPY) Sep 20 08:00:51 PM: Compilation took 1.200e-01 seconds
(CVXPY) Sep 20 08:00:51 PM: Solver (including time spent in interface) took 4.099e-01 seconds
FULL MODEL:
  Accruacy: 0.5361
  Our objective: 0.07219999999999999

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.0028)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x8 = 0)            <-- (term's our objective: 0.0026)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0038)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.003)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.0042)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.003)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.003)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0018)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 1)            <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.0022)
 OR (x0 = 1 AND x1 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.0072)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0028)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.0022)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.003)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.0024)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 42.20539331436157
Best over terms:
  Our final objective: 0.00720000000000004
    Its accruacy: 0.5036
    Its hamming distance: 11
  Shortest hamming distance: 1
    Its our objective: 0.0029999999999999615
  Highest accruacy: 0.5036
   dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 124 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 125 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 126 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 127 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 128 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 129 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 130 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 131 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 132 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 133 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 134 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 135 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 136 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 137 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 138 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 139 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 140 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 141 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 142 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 143 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 144 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

