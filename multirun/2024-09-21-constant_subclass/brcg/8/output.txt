Command:
python test_script.py -s constant_subclass -d 1 -n 50 --seed 34 -m brcg -k 1 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.56
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 1.

Computed total variation: 0.56
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:24:53 PM: Your problem has 28 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:24:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:24:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:24:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:24:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:24:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:24:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:24:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:24:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:24:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:24:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:24:53 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:24:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 28
  constraints   = 53
  nnz(P)        = 0
  nnz(A)        = 103
  cones (total) = 1
    : Nonnegative = 1,  numel = 53

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7127e-01  +2.6374e+01  2.59e+01  7.93e-01  4.08e+00  1.00e+00  1.12e+00   ------   
  1  +6.1952e-01  +4.4197e+00  3.80e+00  1.76e-01  1.50e+00  4.83e-03  3.53e-01  7.77e-01  
  2  +4.3889e-01  +1.2340e+00  7.95e-01  3.60e-02  3.34e-01  6.76e-03  9.37e-02  7.89e-01  
  3  +2.8630e-01  +5.0975e-01  2.23e-01  9.76e-03  8.60e-02  2.88e-04  3.51e-02  7.12e-01  
  4  +2.2465e-01  +2.4544e-01  2.08e-02  1.00e-03  8.45e-03  2.24e-04  5.65e-03  9.49e-01  
  5  +2.2016e-01  +2.2043e-01  2.70e-04  1.30e-05  1.10e-04  2.19e-06  7.73e-05  9.86e-01  
  6  +2.2010e-01  +2.2010e-01  2.69e-06  1.30e-07  1.10e-06  2.19e-08  7.73e-07  9.90e-01  
  7  +2.2010e-01  +2.2010e-01  2.69e-08  1.30e-09  1.10e-08  2.19e-10  7.73e-09  9.90e-01  
  8  +2.2010e-01  +2.2010e-01  2.69e-10  1.30e-11  1.10e-10  2.19e-12  7.73e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 141.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:24:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:24:53 PM: Optimal value: 2.201e-01
(CVXPY) Sep 20 07:24:53 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 07:24:53 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
FULL MODEL:
  Accruacy: 0.78
  Our objective: 0.56

IF 
    (x0 = 0) <-- (term's our objective: 0.56)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.697929859161377
Best over terms:
  Our final objective: 0.56
    Its accruacy: 0.78
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.56
  Highest accruacy: 0.78
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

