Command:
python test_script.py -s constant_subclass -d 8 -n 1000 --seed 43 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.008
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 8.

Computed total variation: 0.402
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:40 PM: Your problem has 517 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:40 PM: Finished problem compilation (took 7.658e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 517
  constraints   = 1017
  nnz(P)        = 0
  nnz(A)        = 5517
  cones (total) = 1
    : Nonnegative = 1,  numel = 1017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9996e-01  +5.0061e+02  5.00e+02  9.55e-01  3.42e+01  1.00e+00  1.00e+00   ------   
  1  +5.8390e-01  +1.0730e+02  1.07e+02  4.03e-01  2.15e+01  3.82e-03  5.62e-01  5.98e-01  
  2  +5.3350e-01  +1.2837e+01  1.23e+01  1.39e-01  9.42e+00  1.49e-02  2.60e-01  9.16e-01  
  3  +5.0645e-01  +3.1748e+00  2.67e+00  5.51e-02  3.61e+00  3.58e-05  2.36e-01  3.67e-01  
  4  +5.0033e-01  +6.3761e-01  1.37e-01  3.05e-03  2.10e-01  8.77e-06  4.64e-02  9.90e-01  
  5  +5.0006e-01  +5.4765e-01  4.76e-02  1.04e-03  7.17e-02  5.10e-06  1.21e-02  8.02e-01  
  6  +4.9962e-01  +5.6568e-01  6.61e-02  7.61e-04  5.31e-02  2.44e-05  2.90e-03  8.43e-01  
  7  +4.9802e-01  +5.5269e-01  5.47e-02  2.31e-04  1.62e-02  6.02e-05  7.80e-04  7.96e-01  
  8  +4.9276e-01  +5.2095e-01  2.82e-02  6.69e-05  4.70e-03  5.44e-05  2.30e-04  7.72e-01  
  9  +4.8814e-01  +5.0057e-01  1.24e-02  2.67e-05  1.87e-03  1.35e-05  1.02e-04  7.35e-01  
 10  +4.8523e-01  +4.8845e-01  3.22e-03  6.39e-06  4.49e-04  1.45e-06  2.59e-05  9.90e-01  
 11  +4.8417e-01  +4.8435e-01  1.86e-04  3.64e-07  2.55e-05  8.87e-08  1.51e-06  9.90e-01  
 12  +4.8410e-01  +4.8410e-01  1.88e-06  3.67e-09  2.58e-07  8.96e-10  1.53e-08  9.90e-01  
 13  +4.8410e-01  +4.8410e-01  1.88e-08  3.67e-11  2.58e-09  8.98e-12  1.53e-10  9.90e-01  
 14  +4.8410e-01  +4.8410e-01  1.88e-10  3.67e-13  2.58e-11  8.99e-14  1.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.0624ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:40 PM: Optimal value: 4.841e-01
(CVXPY) Sep 20 07:45:40 PM: Compilation took 7.658e-03 seconds
(CVXPY) Sep 20 07:45:40 PM: Solver (including time spent in interface) took 7.624e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4841
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:40 PM: Your problem has 527 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:40 PM: Finished problem compilation (took 5.754e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 527
  constraints   = 1027
  nnz(P)        = 0
  nnz(A)        = 6223
  cones (total) = 1
    : Nonnegative = 1,  numel = 1027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9982e-01  +5.0115e+02  5.01e+02  9.55e-01  3.48e+01  1.00e+00  1.01e+00   ------   
  1  +5.8266e-01  +1.0746e+02  1.07e+02  4.05e-01  2.18e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3213e-01  +1.2562e+01  1.20e+01  1.36e-01  9.33e+00  1.51e-02  2.56e-01  9.32e-01  
  3  +5.0588e-01  +3.0563e+00  2.55e+00  5.30e-02  3.53e+00  3.65e-05  2.25e-01  4.30e-01  
  4  +5.0109e-01  +9.9607e-01  4.95e-01  1.10e-02  7.65e-01  1.30e-05  1.01e-01  6.43e-01  
  5  +5.0050e-01  +8.5500e-01  3.55e-01  7.63e-03  5.34e-01  1.46e-05  4.98e-02  6.19e-01  
  6  +4.9739e-01  +6.8279e-01  1.85e-01  1.64e-03  1.17e-01  4.74e-05  5.34e-03  9.18e-01  
  7  +4.8934e-01  +6.1788e-01  1.29e-01  5.28e-04  3.80e-02  7.86e-05  1.66e-03  7.07e-01  
  8  +4.8606e-01  +5.9829e-01  1.12e-01  4.12e-04  2.96e-02  6.71e-05  1.30e-03  3.11e-01  
  9  +4.7834e-01  +5.5635e-01  7.80e-02  2.12e-04  1.52e-02  4.03e-05  6.78e-04  8.06e-01  
 10  +4.7416e-01  +5.3696e-01  6.28e-02  1.74e-04  1.24e-02  2.58e-05  5.59e-04  5.13e-01  
 11  +4.6715e-01  +5.0355e-01  3.64e-02  8.23e-05  5.87e-03  1.72e-05  2.67e-04  5.69e-01  
 12  +4.6582e-01  +4.9848e-01  3.27e-02  6.89e-05  4.92e-03  1.61e-05  2.24e-04  2.16e-01  
 13  +4.6563e-01  +4.9778e-01  3.22e-02  6.72e-05  4.79e-03  1.60e-05  2.19e-04  1.41e-01  
 14  +4.6322e-01  +4.8851e-01  2.53e-02  4.76e-05  3.39e-03  1.35e-05  1.56e-04  3.86e-01  
 15  +4.6278e-01  +4.8686e-01  2.41e-02  4.63e-05  3.30e-03  1.24e-05  1.53e-04  9.72e-02  
 16  +4.6271e-01  +4.8426e-01  2.16e-02  3.78e-05  2.70e-03  1.36e-05  1.24e-04  9.90e-01  
 17  +4.5940e-01  +4.7227e-01  1.29e-02  2.37e-05  1.69e-03  7.16e-06  7.92e-05  6.11e-01  
 18  +4.5580e-01  +4.5982e-01  4.02e-03  6.81e-06  4.86e-04  2.26e-06  2.34e-05  7.19e-01  
 19  +4.5466e-01  +4.5566e-01  1.00e-03  1.66e-06  1.18e-04  6.87e-07  5.75e-06  9.90e-01  
 20  +4.5420e-01  +4.5422e-01  1.10e-05  1.81e-08  1.29e-06  7.48e-09  6.28e-08  9.89e-01  
 21  +4.5420e-01  +4.5420e-01  1.10e-07  1.81e-10  1.29e-08  7.48e-11  6.28e-10  9.90e-01  
 22  +4.5420e-01  +4.5420e-01  1.10e-09  1.81e-12  1.29e-10  7.49e-13  6.29e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.4483ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:40 PM: Optimal value: 4.542e-01
(CVXPY) Sep 20 07:45:40 PM: Compilation took 5.754e-03 seconds
(CVXPY) Sep 20 07:45:40 PM: Solver (including time spent in interface) took 1.152e-02 seconds
Iteration: 2, Objective: 0.4542
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:40 PM: Your problem has 537 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:40 PM: Finished problem compilation (took 5.816e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 537
  constraints   = 1037
  nnz(P)        = 0
  nnz(A)        = 6684
  cones (total) = 1
    : Nonnegative = 1,  numel = 1037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9981e-01  +5.0123e+02  5.01e+02  9.55e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.8192e-01  +1.0745e+02  1.07e+02  4.06e-01  2.18e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3158e-01  +1.2446e+01  1.19e+01  1.35e-01  9.17e+00  1.52e-02  2.53e-01  9.39e-01  
  3  +5.0561e-01  +2.9974e+00  2.49e+00  5.19e-02  3.47e+00  3.68e-05  2.19e-01  4.63e-01  
  4  +5.0108e-01  +1.0192e+00  5.18e-01  1.15e-02  8.05e-01  1.35e-05  9.52e-02  6.44e-01  
  5  +4.9967e-01  +8.1293e-01  3.13e-01  5.75e-03  4.08e-01  2.21e-05  2.48e-02  8.13e-01  
  6  +4.9005e-01  +7.2910e-01  2.39e-01  9.47e-04  6.86e-02  1.20e-04  2.82e-03  8.93e-01  
  7  +4.8360e-01  +6.9359e-01  2.10e-01  6.39e-04  4.63e-02  1.13e-04  1.93e-03  4.85e-01  
  8  +4.7553e-01  +6.3452e-01  1.59e-01  4.64e-04  3.35e-02  5.87e-05  1.44e-03  6.87e-01  
  9  +4.6837e-01  +6.0005e-01  1.32e-01  3.14e-04  2.26e-02  5.46e-05  9.95e-04  5.73e-01  
 10  +4.6537e-01  +5.8251e-01  1.17e-01  2.95e-04  2.12e-02  4.62e-05  9.42e-04  3.19e-01  
 11  +4.6585e-01  +5.8796e-01  1.22e-01  2.76e-04  1.99e-02  5.53e-05  8.69e-04  4.93e-01  
 12  +4.4353e-01  +4.8396e-01  4.04e-02  8.04e-05  5.77e-03  1.57e-05  2.72e-04  7.59e-01  
 13  +4.3409e-01  +4.4659e-01  1.25e-02  2.33e-05  1.67e-03  6.16e-06  8.44e-05  8.65e-01  
 14  +4.3006e-01  +4.3168e-01  1.62e-03  2.96e-06  2.12e-04  9.47e-07  1.12e-05  9.90e-01  
 15  +4.2941e-01  +4.2942e-01  1.77e-05  3.22e-08  2.31e-06  1.02e-08  1.23e-07  9.89e-01  
 16  +4.2940e-01  +4.2940e-01  1.77e-07  3.22e-10  2.31e-08  1.02e-10  1.23e-09  9.90e-01  
 17  +4.2940e-01  +4.2940e-01  1.77e-09  3.22e-12  2.31e-10  1.02e-12  1.23e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.3194ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:40 PM: Optimal value: 4.294e-01
(CVXPY) Sep 20 07:45:40 PM: Compilation took 5.816e-03 seconds
(CVXPY) Sep 20 07:45:40 PM: Solver (including time spent in interface) took 1.065e-02 seconds
Iteration: 3, Objective: 0.4294
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:40 PM: Your problem has 547 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:40 PM: Finished problem compilation (took 5.971e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 547
  constraints   = 1047
  nnz(P)        = 0
  nnz(A)        = 7067
  cones (total) = 1
    : Nonnegative = 1,  numel = 1047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9971e-01  +5.0127e+02  5.01e+02  9.56e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.8030e-01  +1.0752e+02  1.07e+02  4.08e-01  2.18e+01  3.82e-03  5.64e-01  5.97e-01  
  2  +5.3035e-01  +1.2201e+01  1.17e+01  1.32e-01  8.93e+00  1.55e-02  2.47e-01  9.55e-01  
  3  +5.0514e-01  +2.8988e+00  2.39e+00  5.00e-02  3.36e+00  3.79e-05  2.07e-01  5.30e-01  
  4  +5.0094e-01  +1.0516e+00  5.51e-01  1.22e-02  8.53e-01  1.50e-05  8.26e-02  6.56e-01  
  5  +4.9440e-01  +1.2576e+00  7.63e-01  4.46e-03  3.24e-01  1.09e-04  1.26e-02  9.81e-01  
  6  +4.7991e-01  +9.3544e-01  4.56e-01  1.58e-03  1.15e-01  1.09e-04  4.58e-03  6.56e-01  
  7  +4.7021e-01  +8.6149e-01  3.91e-01  1.05e-03  7.61e-02  1.17e-04  3.09e-03  3.97e-01  
  8  +4.6278e-01  +7.4853e-01  2.86e-01  7.17e-04  5.18e-02  9.99e-05  2.18e-03  5.81e-01  
  9  +4.5256e-01  +6.2987e-01  1.77e-01  4.55e-04  3.27e-02  7.05e-05  1.45e-03  9.22e-01  
 10  +4.3438e-01  +5.3308e-01  9.87e-02  2.25e-04  1.61e-02  3.84e-05  7.63e-04  5.20e-01  
 11  +4.2018e-01  +4.6341e-01  4.32e-02  9.13e-05  6.52e-03  1.69e-05  3.30e-04  6.13e-01  
 12  +4.1814e-01  +4.5481e-01  3.67e-02  7.54e-05  5.39e-03  1.49e-05  2.75e-04  2.66e-01  
 13  +4.1310e-01  +4.3234e-01  1.92e-02  3.79e-05  2.72e-03  9.54e-06  1.43e-04  8.23e-01  
 14  +4.0729e-01  +4.0919e-01  1.89e-03  3.66e-06  2.63e-04  9.01e-07  1.46e-05  9.48e-01  
 15  +4.0661e-01  +4.0663e-01  2.34e-05  4.52e-08  3.24e-06  1.10e-08  1.82e-07  9.88e-01  
 16  +4.0660e-01  +4.0660e-01  2.34e-07  4.52e-10  3.24e-08  1.10e-10  1.82e-09  9.90e-01  
 17  +4.0660e-01  +4.0660e-01  2.34e-09  4.52e-12  3.24e-10  1.10e-12  1.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.9743ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:40 PM: Optimal value: 4.066e-01
(CVXPY) Sep 20 07:45:40 PM: Compilation took 5.971e-03 seconds
(CVXPY) Sep 20 07:45:40 PM: Solver (including time spent in interface) took 1.067e-02 seconds
Iteration: 4, Objective: 0.4066
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:40 PM: Your problem has 557 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:40 PM: Finished problem compilation (took 4.997e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 557
  constraints   = 1057
  nnz(P)        = 0
  nnz(A)        = 7302
  cones (total) = 1
    : Nonnegative = 1,  numel = 1057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9970e-01  +5.0123e+02  5.01e+02  9.56e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.7975e-01  +1.0749e+02  1.07e+02  4.09e-01  2.16e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.2983e-01  +1.2086e+01  1.16e+01  1.31e-01  8.75e+00  1.55e-02  2.44e-01  9.61e-01  
  3  +5.0498e-01  +2.8612e+00  2.36e+00  4.94e-02  3.31e+00  3.84e-05  2.01e-01  5.57e-01  
  4  +5.0090e-01  +1.0594e+00  5.59e-01  1.24e-02  8.63e-01  1.55e-05  7.83e-02  6.60e-01  
  5  +4.9270e-01  +1.1640e+00  6.71e-01  3.51e-03  2.57e-01  1.17e-04  9.77e-03  9.75e-01  
  6  +4.7462e-01  +8.6137e-01  3.87e-01  1.18e-03  8.61e-02  1.17e-04  3.37e-03  6.93e-01  
  7  +4.6169e-01  +7.7781e-01  3.16e-01  7.55e-04  5.48e-02  1.17e-04  2.21e-03  4.61e-01  
  8  +4.4876e-01  +6.5664e-01  2.08e-01  5.24e-04  3.79e-02  7.44e-05  1.62e-03  5.48e-01  
  9  +4.1966e-01  +4.8871e-01  6.90e-02  1.51e-04  1.09e-02  2.27e-05  5.15e-04  7.41e-01  
 10  +4.1065e-01  +4.4719e-01  3.65e-02  7.21e-05  5.18e-03  1.73e-05  2.51e-04  7.56e-01  
 11  +4.0788e-01  +4.3503e-01  2.71e-02  5.58e-05  4.01e-03  1.16e-05  2.08e-04  4.93e-01  
 12  +4.0681e-01  +4.2975e-01  2.29e-02  4.70e-05  3.37e-03  1.01e-05  1.75e-04  2.46e-01  
 13  +4.0591e-01  +4.2572e-01  1.98e-02  4.01e-05  2.88e-03  9.73e-06  1.46e-04  4.77e-01  
 14  +4.0216e-01  +4.1284e-01  1.07e-02  2.03e-05  1.45e-03  5.82e-06  7.36e-05  6.24e-01  
 15  +3.9859e-01  +3.9926e-01  6.73e-04  1.27e-06  9.08e-05  3.53e-07  4.71e-06  9.38e-01  
 16  +3.9835e-01  +3.9836e-01  8.83e-06  1.66e-08  1.19e-06  4.61e-09  6.19e-08  9.87e-01  
 17  +3.9835e-01  +3.9835e-01  8.83e-08  1.66e-10  1.19e-08  4.61e-11  6.19e-10  9.90e-01  
 18  +3.9835e-01  +3.9835e-01  8.83e-10  1.66e-12  1.19e-10  4.61e-13  6.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.9472ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:40 PM: Optimal value: 3.984e-01
(CVXPY) Sep 20 07:45:40 PM: Compilation took 4.997e-03 seconds
(CVXPY) Sep 20 07:45:40 PM: Solver (including time spent in interface) took 1.133e-02 seconds
Iteration: 5, Objective: 0.3984
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:40 PM: Your problem has 567 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:40 PM: Finished problem compilation (took 7.022e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 567
  constraints   = 1067
  nnz(P)        = 0
  nnz(A)        = 7501
  cones (total) = 1
    : Nonnegative = 1,  numel = 1067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9964e-01  +5.0130e+02  5.01e+02  9.56e-01  3.48e+01  1.00e+00  1.01e+00   ------   
  1  +5.7858e-01  +1.0756e+02  1.07e+02  4.10e-01  2.15e+01  3.82e-03  5.64e-01  5.97e-01  
  2  +5.2879e-01  +1.1875e+01  1.13e+01  1.28e-01  8.53e+00  1.57e-02  2.40e-01  9.73e-01  
  3  +5.0470e-01  +2.7981e+00  2.29e+00  4.81e-02  3.23e+00  3.99e-05  1.91e-01  6.12e-01  
  4  +5.0084e-01  +1.1403e+00  6.39e-01  1.39e-02  9.72e-01  1.84e-05  7.50e-02  6.40e-01  
  5  +4.9087e-01  +1.2412e+00  7.50e-01  3.72e-03  2.72e-01  1.28e-04  1.01e-02  9.55e-01  
  6  +4.6918e-01  +8.8578e-01  4.17e-01  1.24e-03  9.03e-02  1.21e-04  3.50e-03  7.02e-01  
  7  +4.5733e-01  +8.1395e-01  3.57e-01  8.77e-04  6.36e-02  1.22e-04  2.54e-03  3.84e-01  
  8  +4.3774e-01  +6.5959e-01  2.22e-01  5.53e-04  3.99e-02  7.30e-05  1.73e-03  5.46e-01  
  9  +4.0695e-01  +4.8461e-01  7.77e-02  1.74e-04  1.25e-02  2.35e-05  6.04e-04  7.10e-01  
 10  +3.9558e-01  +4.2914e-01  3.36e-02  7.06e-05  5.06e-03  1.27e-05  2.55e-04  6.82e-01  
 11  +3.9486e-01  +4.2718e-01  3.23e-02  6.52e-05  4.67e-03  1.28e-05  2.36e-04  1.48e-01  
 12  +3.9068e-01  +4.0841e-01  1.77e-02  3.50e-05  2.51e-03  8.88e-06  1.30e-04  7.86e-01  
 13  +3.8520e-01  +3.8692e-01  1.71e-03  3.37e-06  2.41e-04  8.74e-07  1.29e-05  9.90e-01  
 14  +3.8457e-01  +3.8461e-01  4.10e-05  8.03e-08  5.73e-06  2.04e-08  3.10e-07  9.80e-01  
 15  +3.8455e-01  +3.8455e-01  4.11e-07  8.04e-10  5.73e-08  2.04e-10  3.10e-09  9.90e-01  
 16  +3.8455e-01  +3.8455e-01  4.11e-09  8.04e-12  5.73e-10  2.04e-12  3.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.852ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:40 PM: Optimal value: 3.846e-01
(CVXPY) Sep 20 07:45:40 PM: Compilation took 7.022e-03 seconds
(CVXPY) Sep 20 07:45:40 PM: Solver (including time spent in interface) took 1.238e-02 seconds
Iteration: 6, Objective: 0.3846
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:40 PM: Your problem has 577 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:40 PM: Finished problem compilation (took 6.690e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 577
  constraints   = 1077
  nnz(P)        = 0
  nnz(A)        = 7658
  cones (total) = 1
    : Nonnegative = 1,  numel = 1077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9958e-01  +5.0138e+02  5.01e+02  9.56e-01  3.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.7667e-01  +1.0764e+02  1.07e+02  4.11e-01  2.14e+01  3.82e-03  5.64e-01  5.97e-01  
  2  +5.2763e-01  +1.1646e+01  1.11e+01  1.24e-01  8.27e+00  1.60e-02  2.34e-01  9.89e-01  
  3  +5.0432e-01  +2.7126e+00  2.21e+00  4.62e-02  3.11e+00  4.20e-05  1.77e-01  6.85e-01  
  4  +5.0042e-01  +1.1701e+00  6.70e-01  1.39e-02  9.77e-01  2.33e-05  6.16e-02  6.76e-01  
  5  +4.8655e-01  +1.1616e+00  6.75e-01  3.01e-03  2.21e-01  1.47e-04  8.00e-03  9.14e-01  
  6  +4.6406e-01  +8.7517e-01  4.11e-01  1.28e-03  9.28e-02  1.19e-04  3.58e-03  6.28e-01  
  7  +4.5331e-01  +8.1104e-01  3.58e-01  9.47e-04  6.85e-02  1.19e-04  2.71e-03  3.65e-01  
  8  +4.3623e-01  +6.8941e-01  2.53e-01  6.65e-04  4.77e-02  8.74e-05  2.02e-03  5.72e-01  
  9  +4.0526e-01  +5.1995e-01  1.15e-01  2.60e-04  1.85e-02  3.85e-05  8.65e-04  6.28e-01  
 10  +3.8688e-01  +4.3128e-01  4.44e-02  9.56e-05  6.83e-03  1.93e-05  3.42e-04  8.42e-01  
 11  +3.7910e-01  +3.9831e-01  1.92e-02  3.93e-05  2.81e-03  9.17e-06  1.47e-04  7.17e-01  
 12  +3.7494e-01  +3.8066e-01  5.71e-03  1.16e-05  8.28e-04  3.05e-06  4.44e-05  9.90e-01  
 13  +3.7292e-01  +3.7311e-01  1.89e-04  3.83e-07  2.73e-05  9.71e-08  1.49e-06  9.68e-01  
 14  +3.7285e-01  +3.7285e-01  1.95e-06  3.94e-09  2.81e-07  9.99e-10  1.53e-08  9.90e-01  
 15  +3.7285e-01  +3.7285e-01  1.95e-08  3.94e-11  2.81e-09  9.99e-12  1.53e-10  9.90e-01  
 16  +3.7285e-01  +3.7285e-01  1.95e-10  3.94e-13  2.81e-11  1.00e-13  1.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.0631ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:40 PM: Optimal value: 3.729e-01
(CVXPY) Sep 20 07:45:40 PM: Compilation took 6.690e-03 seconds
(CVXPY) Sep 20 07:45:40 PM: Solver (including time spent in interface) took 1.169e-02 seconds
Iteration: 7, Objective: 0.3729
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:40 PM: Your problem has 587 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:40 PM: Finished problem compilation (took 5.680e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 587
  constraints   = 1087
  nnz(P)        = 0
  nnz(A)        = 7837
  cones (total) = 1
    : Nonnegative = 1,  numel = 1087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9950e-01  +5.0162e+02  5.01e+02  9.57e-01  3.46e+01  1.00e+00  1.01e+00   ------   
  1  +5.7412e-01  +1.0776e+02  1.07e+02  4.12e-01  2.12e+01  3.83e-03  5.64e-01  5.97e-01  
  2  +5.2634e-01  +1.1776e+01  1.12e+01  1.24e-01  8.18e+00  1.62e-02  2.32e-01  9.90e-01  
  3  +5.0491e-01  +2.4929e+00  1.99e+00  4.21e-02  2.91e+00  5.01e-05  1.33e-01  8.26e-01  
  4  +4.9927e-01  +1.2209e+00  7.22e-01  1.14e-02  8.21e-01  5.86e-05  3.40e-02  7.94e-01  
  5  +4.8531e-01  +1.0992e+00  6.14e-01  2.86e-03  2.11e-01  1.91e-04  7.40e-03  7.97e-01  
  6  +4.6402e-01  +9.1273e-01  4.49e-01  1.49e-03  1.08e-01  1.70e-04  4.06e-03  5.63e-01  
  7  +4.3732e-01  +7.4131e-01  3.04e-01  8.18e-04  5.86e-02  1.17e-04  2.44e-03  6.12e-01  
  8  +4.2971e-01  +7.0247e-01  2.73e-01  7.30e-04  5.22e-02  1.04e-04  2.23e-03  2.80e-01  
  9  +3.9985e-01  +5.4542e-01  1.46e-01  3.47e-04  2.46e-02  5.16e-05  1.17e-03  6.08e-01  
 10  +3.8882e-01  +4.9292e-01  1.04e-01  2.39e-04  1.69e-02  3.94e-05  8.43e-04  4.37e-01  
 11  +3.6724e-01  +3.8983e-01  2.26e-02  4.96e-05  3.51e-03  7.45e-06  1.95e-04  7.95e-01  
 12  +3.6174e-01  +3.6574e-01  4.00e-03  8.67e-06  6.13e-04  1.33e-06  3.62e-05  8.43e-01  
 13  +3.6054e-01  +3.6066e-01  1.16e-04  2.51e-07  1.78e-05  3.59e-08  1.08e-06  9.76e-01  
 14  +3.6050e-01  +3.6050e-01  1.18e-06  2.54e-09  1.79e-07  3.63e-10  1.10e-08  9.90e-01  
 15  +3.6050e-01  +3.6050e-01  1.18e-08  2.54e-11  1.79e-09  3.63e-12  1.10e-10  9.90e-01  
 16  +3.6050e-01  +3.6050e-01  1.18e-10  2.54e-13  1.79e-11  3.64e-14  1.10e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.0348ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:41 PM: Optimal value: 3.605e-01
(CVXPY) Sep 20 07:45:41 PM: Compilation took 5.680e-03 seconds
(CVXPY) Sep 20 07:45:41 PM: Solver (including time spent in interface) took 1.264e-02 seconds
Iteration: 8, Objective: 0.3605
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:41 PM: Your problem has 597 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:41 PM: Finished problem compilation (took 5.658e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 597
  constraints   = 1097
  nnz(P)        = 0
  nnz(A)        = 7939
  cones (total) = 1
    : Nonnegative = 1,  numel = 1097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +5.0167e+02  5.01e+02  9.57e-01  3.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.7321e-01  +1.0778e+02  1.07e+02  4.13e-01  2.11e+01  3.83e-03  5.64e-01  5.97e-01  
  2  +5.2616e-01  +1.1820e+01  1.13e+01  1.23e-01  8.07e+00  1.62e-02  2.31e-01  9.90e-01  
  3  +5.0496e-01  +2.4195e+00  1.91e+00  4.05e-02  2.79e+00  5.13e-05  1.24e-01  8.49e-01  
  4  +4.9879e-01  +1.2085e+00  7.10e-01  9.79e-03  7.07e-01  7.15e-05  2.77e-02  8.27e-01  
  5  +4.8481e-01  +1.0908e+00  6.06e-01  2.71e-03  1.99e-01  2.06e-04  6.97e-03  7.58e-01  
  6  +4.6546e-01  +9.4952e-01  4.84e-01  1.55e-03  1.13e-01  2.03e-04  4.17e-03  4.88e-01  
  7  +4.4055e-01  +7.9726e-01  3.57e-01  9.46e-04  6.79e-02  1.53e-04  2.72e-03  4.50e-01  
  8  +4.0779e-01  +6.2131e-01  2.14e-01  5.47e-04  3.86e-02  7.82e-05  1.78e-03  7.98e-01  
  9  +3.8613e-01  +5.0819e-01  1.22e-01  2.91e-04  2.05e-02  4.28e-05  1.03e-03  4.72e-01  
 10  +3.7035e-01  +4.2826e-01  5.79e-02  1.32e-04  9.28e-03  2.75e-05  5.02e-04  9.90e-01  
 11  +3.5778e-01  +3.7139e-01  1.36e-02  3.03e-05  2.13e-03  5.94e-06  1.27e-04  7.72e-01  
 12  +3.5397e-01  +3.5476e-01  7.92e-04  1.75e-06  1.23e-04  2.87e-07  7.77e-06  9.70e-01  
 13  +3.5370e-01  +3.5371e-01  8.92e-06  1.96e-08  1.38e-06  3.13e-09  8.88e-08  9.89e-01  
 14  +3.5370e-01  +3.5370e-01  8.92e-08  1.96e-10  1.38e-08  3.13e-11  8.89e-10  9.90e-01  
 15  +3.5370e-01  +3.5370e-01  8.92e-10  1.96e-12  1.38e-10  3.14e-13  8.90e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.7588ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:41 PM: Optimal value: 3.537e-01
(CVXPY) Sep 20 07:45:41 PM: Compilation took 5.658e-03 seconds
(CVXPY) Sep 20 07:45:41 PM: Solver (including time spent in interface) took 1.170e-02 seconds
Iteration: 9, Objective: 0.3537
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:41 PM: Your problem has 607 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:41 PM: Finished problem compilation (took 7.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 607
  constraints   = 1107
  nnz(P)        = 0
  nnz(A)        = 8078
  cones (total) = 1
    : Nonnegative = 1,  numel = 1107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9947e-01  +5.0172e+02  5.01e+02  9.57e-01  3.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.7242e-01  +1.0780e+02  1.07e+02  4.14e-01  2.09e+01  3.83e-03  5.64e-01  5.97e-01  
  2  +5.2559e-01  +1.1881e+01  1.14e+01  1.23e-01  7.99e+00  1.63e-02  2.31e-01  9.90e-01  
  3  +5.0516e-01  +2.2569e+00  1.75e+00  3.64e-02  2.54e+00  5.46e-05  1.07e-01  8.91e-01  
  4  +4.9791e-01  +1.2968e+00  7.99e-01  7.17e-03  5.25e-01  1.28e-04  1.85e-02  8.86e-01  
  5  +4.7954e-01  +1.1275e+00  6.48e-01  2.16e-03  1.59e-01  2.88e-04  5.45e-03  7.31e-01  
  6  +4.5307e-01  +9.2599e-01  4.73e-01  1.31e-03  9.47e-02  2.10e-04  3.55e-03  4.66e-01  
  7  +4.2941e-01  +7.8091e-01  3.51e-01  8.87e-04  6.33e-02  1.51e-04  2.57e-03  3.62e-01  
  8  +3.9203e-01  +5.6213e-01  1.70e-01  4.12e-04  2.89e-02  6.44e-05  1.37e-03  6.77e-01  
  9  +3.8306e-01  +5.1643e-01  1.33e-01  3.14e-04  2.21e-02  5.19e-05  1.08e-03  2.81e-01  
 10  +3.6745e-01  +4.3653e-01  6.91e-02  1.58e-04  1.11e-02  3.00e-05  5.82e-04  6.99e-01  
 11  +3.5618e-01  +3.8263e-01  2.64e-02  5.96e-05  4.20e-03  1.13e-05  2.34e-04  6.37e-01  
 12  +3.5043e-01  +3.5549e-01  5.06e-03  1.13e-05  7.94e-04  2.36e-06  4.60e-05  9.86e-01  
 13  +3.4895e-01  +3.4942e-01  4.70e-04  1.05e-06  7.37e-05  2.16e-07  4.33e-06  9.13e-01  
 14  +3.4880e-01  +3.4881e-01  7.38e-06  1.64e-08  1.16e-06  3.37e-09  6.82e-08  9.87e-01  
 15  +3.4880e-01  +3.4880e-01  7.38e-08  1.65e-10  1.16e-08  3.37e-11  6.83e-10  9.90e-01  
 16  +3.4880e-01  +3.4880e-01  7.39e-10  1.65e-12  1.16e-10  3.37e-13  6.83e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.6749ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:41 PM: Optimal value: 3.488e-01
(CVXPY) Sep 20 07:45:41 PM: Compilation took 7.001e-03 seconds
(CVXPY) Sep 20 07:45:41 PM: Solver (including time spent in interface) took 1.304e-02 seconds
Iteration: 10, Objective: 0.3488
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:41 PM: Your problem has 617 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:41 PM: Finished problem compilation (took 7.665e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 617
  constraints   = 1117
  nnz(P)        = 0
  nnz(A)        = 8193
  cones (total) = 1
    : Nonnegative = 1,  numel = 1117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9944e-01  +5.0168e+02  5.01e+02  9.57e-01  3.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.7145e-01  +1.0786e+02  1.07e+02  4.15e-01  2.08e+01  3.83e-03  5.64e-01  5.96e-01  
  2  +5.2523e-01  +1.1945e+01  1.14e+01  1.23e-01  7.93e+00  1.64e-02  2.30e-01  9.90e-01  
  3  +5.0528e-01  +2.1511e+00  1.65e+00  3.36e-02  2.35e+00  5.70e-05  9.57e-02  9.11e-01  
  4  +5.0189e-01  +1.8862e+00  1.38e+00  1.38e-02  1.00e+00  1.25e-04  3.45e-02  6.91e-01  
  5  +4.8909e-01  +1.6222e+00  1.13e+00  4.30e-03  3.17e-01  2.60e-04  1.05e-02  7.14e-01  
  6  +4.6235e-01  +1.1585e+00  6.96e-01  2.04e-03  1.48e-01  2.02e-04  5.35e-03  6.17e-01  
  7  +4.4003e-01  +9.5404e-01  5.14e-01  1.36e-03  9.77e-02  1.59e-04  3.78e-03  4.01e-01  
  8  +4.0743e-01  +6.8790e-01  2.80e-01  7.43e-04  5.24e-02  1.11e-04  2.33e-03  8.51e-01  
  9  +3.7907e-01  +5.1712e-01  1.38e-01  3.38e-04  2.37e-02  5.07e-05  1.17e-03  5.64e-01  
 10  +3.7115e-01  +4.7689e-01  1.06e-01  2.51e-04  1.76e-02  4.04e-05  8.94e-04  3.35e-01  
 11  +3.5429e-01  +3.9106e-01  3.68e-02  8.46e-05  5.94e-03  1.42e-05  3.25e-04  7.09e-01  
 12  +3.4826e-01  +3.6199e-01  1.37e-02  3.13e-05  2.20e-03  5.41e-06  1.25e-04  6.69e-01  
 13  +3.4507e-01  +3.4706e-01  1.99e-03  4.52e-06  3.18e-04  7.83e-07  1.84e-05  8.68e-01  
 14  +3.4456e-01  +3.4475e-01  1.94e-04  4.40e-07  3.09e-05  7.77e-08  1.81e-06  9.19e-01  
 15  +3.4450e-01  +3.4450e-01  2.02e-06  4.59e-09  3.22e-07  8.11e-10  1.89e-08  9.90e-01  
 16  +3.4450e-01  +3.4450e-01  2.02e-08  4.59e-11  3.23e-09  8.12e-12  1.89e-10  9.90e-01  
 17  +3.4450e-01  +3.4450e-01  2.03e-10  4.60e-13  3.23e-11  8.12e-14  1.89e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.7168ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:41 PM: Optimal value: 3.445e-01
(CVXPY) Sep 20 07:45:41 PM: Compilation took 7.665e-03 seconds
(CVXPY) Sep 20 07:45:41 PM: Solver (including time spent in interface) took 1.368e-02 seconds
Iteration: 11, Objective: 0.3445
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:41 PM: Your problem has 627 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:41 PM: Finished problem compilation (took 5.656e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 627
  constraints   = 1127
  nnz(P)        = 0
  nnz(A)        = 8342
  cones (total) = 1
    : Nonnegative = 1,  numel = 1127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9940e-01  +5.0167e+02  5.01e+02  9.57e-01  3.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.6967e-01  +1.0799e+02  1.07e+02  4.16e-01  2.07e+01  3.84e-03  5.64e-01  5.96e-01  
  2  +5.2418e-01  +1.2068e+01  1.15e+01  1.23e-01  7.87e+00  1.66e-02  2.30e-01  9.90e-01  
  3  +5.0546e-01  +1.9011e+00  1.40e+00  2.68e-02  1.91e+00  6.33e-05  7.31e-02  9.41e-01  
  4  +5.0560e-01  +1.9780e+00  1.47e+00  1.92e-02  1.39e+00  9.88e-05  4.76e-02  3.73e-01  
  5  +5.0282e-01  +2.1126e+00  1.61e+00  1.61e-02  1.16e+00  1.61e-04  4.05e-02  5.23e-01  
  6  +4.9171e-01  +1.8059e+00  1.31e+00  4.34e-03  3.21e-01  3.94e-04  1.04e-02  7.49e-01  
  7  +4.7298e-01  +1.4567e+00  9.84e-01  3.01e-03  2.20e-01  3.10e-04  7.56e-03  4.05e-01  
  8  +4.5585e-01  +1.2362e+00  7.80e-01  2.17e-03  1.56e-01  2.63e-04  5.67e-03  3.77e-01  
  9  +4.1529e-01  +7.6331e-01  3.48e-01  1.00e-03  7.06e-02  1.02e-04  3.03e-03  8.38e-01  
 10  +3.8744e-01  +5.9156e-01  2.04e-01  5.35e-04  3.74e-02  5.86e-05  1.78e-03  4.58e-01  
 11  +3.7143e-01  +5.0312e-01  1.32e-01  3.29e-04  2.30e-02  4.00e-05  1.16e-03  4.24e-01  
 12  +3.5823e-01  +4.3299e-01  7.48e-02  1.79e-04  1.25e-02  2.72e-05  6.67e-04  6.26e-01  
 13  +3.4688e-01  +3.7838e-01  3.15e-02  7.27e-05  5.13e-03  1.19e-05  2.88e-04  6.38e-01  
 14  +3.4001e-01  +3.4582e-01  5.81e-03  1.32e-05  9.34e-04  2.32e-06  5.49e-05  8.92e-01  
 15  +3.3860e-01  +3.3960e-01  1.00e-03  2.28e-06  1.61e-04  4.28e-07  9.65e-06  9.90e-01  
 16  +3.3826e-01  +3.3829e-01  3.01e-05  6.81e-08  4.82e-06  1.26e-08  2.90e-07  9.90e-01  
 17  +3.3825e-01  +3.3825e-01  3.01e-07  6.82e-10  4.83e-08  1.27e-10  2.91e-09  9.90e-01  
 18  +3.3825e-01  +3.3825e-01  3.01e-09  6.82e-12  4.83e-10  1.27e-12  2.91e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.2851ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:41 PM: Optimal value: 3.383e-01
(CVXPY) Sep 20 07:45:41 PM: Compilation took 5.656e-03 seconds
(CVXPY) Sep 20 07:45:41 PM: Solver (including time spent in interface) took 1.538e-02 seconds
Iteration: 12, Objective: 0.3383
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:41 PM: Your problem has 637 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:41 PM: Finished problem compilation (took 5.987e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 637
  constraints   = 1137
  nnz(P)        = 0
  nnz(A)        = 8485
  cones (total) = 1
    : Nonnegative = 1,  numel = 1137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0180e+02  5.01e+02  9.57e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.6851e-01  +1.0810e+02  1.08e+02  4.18e-01  2.06e+01  3.84e-03  5.65e-01  5.95e-01  
  2  +5.2347e-01  +1.2165e+01  1.16e+01  1.23e-01  7.81e+00  1.68e-02  2.30e-01  9.90e-01  
  3  +5.0706e-01  +2.6689e+00  2.16e+00  3.72e-02  2.62e+00  1.56e-03  9.31e-02  7.67e-01  
  4  +5.0629e-01  +2.6337e+00  2.13e+00  2.68e-02  1.92e+00  2.13e-03  6.43e-02  3.30e-01  
  5  +5.0268e-01  +2.4038e+00  1.90e+00  2.34e-02  1.65e+00  1.27e-03  6.11e-02  2.75e-01  
  6  +4.8818e-01  +1.8494e+00  1.36e+00  4.75e-03  3.51e-01  3.45e-03  1.14e-02  8.27e-01  
  7  +4.7284e-01  +1.5586e+00  1.09e+00  3.36e-03  2.45e-01  2.49e-03  8.36e-03  3.54e-01  
  8  +4.5635e-01  +1.3113e+00  8.55e-01  2.45e-03  1.77e-01  1.60e-03  6.34e-03  3.60e-01  
  9  +4.2339e-01  +8.8067e-01  4.57e-01  1.38e-03  9.76e-02  1.35e-05  4.04e-03  8.10e-01  
 10  +3.8670e-01  +6.0454e-01  2.18e-01  5.89e-04  4.11e-02  1.22e-05  1.92e-03  5.58e-01  
 11  +3.6685e-01  +4.8619e-01  1.19e-01  3.09e-04  2.15e-02  1.49e-05  1.09e-03  5.31e-01  
 12  +3.5361e-01  +4.1563e-01  6.20e-02  1.52e-04  1.07e-02  1.62e-05  5.70e-04  6.90e-01  
 13  +3.4535e-01  +3.7459e-01  2.92e-02  6.98e-05  4.95e-03  9.35e-06  2.75e-04  6.71e-01  
 14  +3.3924e-01  +3.4573e-01  6.48e-03  1.52e-05  1.08e-03  2.19e-06  6.27e-05  8.14e-01  
 15  +3.3851e-01  +3.4217e-01  3.66e-03  8.61e-06  6.13e-04  1.32e-06  3.60e-05  6.79e-01  
 16  +3.3780e-01  +3.3923e-01  1.42e-03  3.29e-06  2.33e-04  5.48e-07  1.39e-05  7.40e-01  
 17  +3.3737e-01  +3.3745e-01  7.58e-05  1.75e-07  1.24e-05  2.92e-08  7.46e-07  9.53e-01  
 18  +3.3735e-01  +3.3735e-01  7.74e-07  1.79e-09  1.26e-07  2.98e-10  7.61e-09  9.90e-01  
 19  +3.3735e-01  +3.3735e-01  7.74e-09  1.79e-11  1.27e-09  2.99e-12  7.62e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.2276ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:41 PM: Optimal value: 3.374e-01
(CVXPY) Sep 20 07:45:41 PM: Compilation took 5.987e-03 seconds
(CVXPY) Sep 20 07:45:41 PM: Solver (including time spent in interface) took 1.637e-02 seconds
Iteration: 13, Objective: 0.3374
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:41 PM: Your problem has 647 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:41 PM: Finished problem compilation (took 6.026e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 647
  constraints   = 1147
  nnz(P)        = 0
  nnz(A)        = 8591
  cones (total) = 1
    : Nonnegative = 1,  numel = 1147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0185e+02  5.01e+02  9.58e-01  3.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.6794e-01  +1.0808e+02  1.08e+02  4.18e-01  2.04e+01  3.84e-03  5.64e-01  5.96e-01  
  2  +5.2301e-01  +1.2186e+01  1.17e+01  1.22e-01  7.74e+00  1.68e-02  2.29e-01  9.90e-01  
  3  +5.0758e-01  +2.9376e+00  2.43e+00  3.99e-02  2.79e+00  2.10e-03  9.74e-02  7.18e-01  
  4  +5.0631e-01  +2.7981e+00  2.29e+00  2.81e-02  2.00e+00  2.75e-03  6.72e-02  3.31e-01  
  5  +5.0261e-01  +2.5400e+00  2.04e+00  2.44e-02  1.72e+00  1.61e-03  6.29e-02  3.05e-01  
  6  +4.8748e-01  +1.8502e+00  1.36e+00  4.84e-03  3.56e-01  4.01e-03  1.17e-02  8.26e-01  
  7  +4.7177e-01  +1.5512e+00  1.08e+00  3.37e-03  2.45e-01  2.87e-03  8.40e-03  3.68e-01  
  8  +4.5628e-01  +1.3208e+00  8.65e-01  2.50e-03  1.80e-01  1.77e-03  6.49e-03  3.84e-01  
  9  +4.2572e-01  +9.1720e-01  4.91e-01  1.49e-03  1.05e-01  1.07e-04  4.28e-03  7.61e-01  
 10  +3.8546e-01  +5.9979e-01  2.14e-01  5.76e-04  4.00e-02  4.37e-05  1.87e-03  6.05e-01  
 11  +3.7034e-01  +5.1137e-01  1.41e-01  3.67e-04  2.55e-02  3.33e-05  1.26e-03  4.12e-01  
 12  +3.5300e-01  +4.1547e-01  6.25e-02  1.55e-04  1.08e-02  1.77e-05  5.75e-04  6.36e-01  
 13  +3.4480e-01  +3.7587e-01  3.11e-02  7.41e-05  5.20e-03  9.91e-06  2.89e-04  6.09e-01  
 14  +3.3831e-01  +3.4480e-01  6.49e-03  1.51e-05  1.06e-03  2.35e-06  6.17e-05  8.68e-01  
 15  +3.3710e-01  +3.3940e-01  2.30e-03  5.28e-06  3.70e-04  8.96e-07  2.21e-05  8.30e-01  
 16  +3.3649e-01  +3.3691e-01  4.20e-04  9.57e-07  6.70e-05  1.68e-07  4.07e-06  8.68e-01  
 17  +3.3635e-01  +3.3636e-01  5.70e-06  1.30e-08  9.08e-07  2.30e-09  5.53e-08  9.89e-01  
 18  +3.3635e-01  +3.3635e-01  5.71e-08  1.30e-10  9.08e-09  2.30e-11  5.53e-10  9.90e-01  
 19  +3.3635e-01  +3.3635e-01  5.73e-10  1.30e-12  9.12e-11  2.31e-13  5.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.994ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:41 PM: Optimal value: 3.364e-01
(CVXPY) Sep 20 07:45:41 PM: Compilation took 6.026e-03 seconds
(CVXPY) Sep 20 07:45:41 PM: Solver (including time spent in interface) took 1.733e-02 seconds
Iteration: 14, Objective: 0.3364
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:41 PM: Your problem has 656 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:41 PM: Finished problem compilation (took 7.072e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 656
  constraints   = 1156
  nnz(P)        = 0
  nnz(A)        = 8754
  cones (total) = 1
    : Nonnegative = 1,  numel = 1156

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +5.0190e+02  5.01e+02  9.58e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.6771e-01  +1.0807e+02  1.08e+02  4.19e-01  2.03e+01  3.84e-03  5.64e-01  5.96e-01  
  2  +5.2268e-01  +1.2206e+01  1.17e+01  1.22e-01  7.67e+00  1.68e-02  2.29e-01  9.90e-01  
  3  +5.0780e-01  +3.0645e+00  2.56e+00  4.08e-02  2.84e+00  2.39e-03  9.83e-02  6.97e-01  
  4  +5.0628e-01  +2.8648e+00  2.36e+00  2.85e-02  2.02e+00  3.04e-03  6.79e-02  3.28e-01  
  5  +5.0255e-01  +2.5955e+00  2.09e+00  2.47e-02  1.73e+00  1.76e-03  6.33e-02  3.14e-01  
  6  +4.8692e-01  +1.8506e+00  1.36e+00  4.78e-03  3.51e-01  4.32e-03  1.15e-02  8.28e-01  
  7  +4.7157e-01  +1.5687e+00  1.10e+00  3.35e-03  2.44e-01  3.21e-03  8.33e-03  3.61e-01  
  8  +4.5766e-01  +1.3620e+00  9.04e-01  2.60e-03  1.88e-01  2.15e-03  6.70e-03  3.19e-01  
  9  +4.2346e-01  +9.1182e-01  4.88e-01  1.41e-03  9.96e-02  3.31e-04  4.03e-03  6.65e-01  
 10  +3.8096e-01  +5.7569e-01  1.95e-01  5.20e-04  3.60e-02  9.62e-05  1.70e-03  6.45e-01  
 11  +3.6439e-01  +4.8387e-01  1.19e-01  3.06e-04  2.13e-02  5.90e-05  1.06e-03  4.99e-01  
 12  +3.4829e-01  +3.9590e-01  4.76e-02  1.18e-04  8.28e-03  2.29e-05  4.42e-04  6.41e-01  
 13  +3.4541e-01  +3.8021e-01  3.48e-02  8.46e-05  5.96e-03  1.67e-05  3.22e-04  4.95e-01  
 14  +3.3838e-01  +3.4558e-01  7.20e-03  1.72e-05  1.21e-03  3.29e-06  6.88e-05  8.78e-01  
 15  +3.3713e-01  +3.3978e-01  2.65e-03  6.29e-06  4.42e-04  1.16e-06  2.57e-05  7.75e-01  
 16  +3.3663e-01  +3.3765e-01  1.02e-03  2.37e-06  1.67e-04  4.46e-07  9.91e-06  6.97e-01  
 17  +3.3634e-01  +3.3644e-01  1.06e-04  2.45e-07  1.72e-05  4.49e-08  1.03e-06  9.83e-01  
 18  +3.3630e-01  +3.3630e-01  1.14e-06  2.62e-09  1.85e-07  4.82e-10  1.11e-08  9.89e-01  
 19  +3.3630e-01  +3.3630e-01  1.15e-08  2.63e-11  1.85e-09  4.84e-12  1.12e-10  9.90e-01  
 20  +3.3630e-01  +3.3630e-01  1.19e-10  2.73e-13  1.93e-11  5.04e-14  1.16e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.6917ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:41 PM: Optimal value: 3.363e-01
(CVXPY) Sep 20 07:45:41 PM: Compilation took 7.072e-03 seconds
(CVXPY) Sep 20 07:45:41 PM: Solver (including time spent in interface) took 1.856e-02 seconds
Iteration: 15, Objective: 0.3363
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:42 PM: Your problem has 666 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:42 PM: Finished problem compilation (took 5.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 666
  constraints   = 1166
  nnz(P)        = 0
  nnz(A)        = 8836
  cones (total) = 1
    : Nonnegative = 1,  numel = 1166

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9934e-01  +5.0188e+02  5.01e+02  9.58e-01  3.37e+01  1.00e+00  1.01e+00   ------   
  1  +5.6634e-01  +1.0814e+02  1.08e+02  4.20e-01  2.02e+01  3.84e-03  5.64e-01  5.96e-01  
  2  +5.2209e-01  +1.2290e+01  1.18e+01  1.22e-01  7.62e+00  1.69e-02  2.28e-01  9.90e-01  
  3  +5.0796e-01  +3.2024e+00  2.69e+00  4.10e-02  2.85e+00  2.77e-03  9.73e-02  6.76e-01  
  4  +5.0646e-01  +2.9952e+00  2.49e+00  2.95e-02  2.09e+00  3.37e-03  6.95e-02  3.00e-01  
  5  +5.0259e-01  +2.7119e+00  2.21e+00  2.55e-02  1.79e+00  1.97e-03  6.46e-02  3.17e-01  
  6  +4.8674e-01  +1.8957e+00  1.41e+00  5.06e-03  3.71e-01  4.56e-03  1.21e-02  8.21e-01  
  7  +4.6950e-01  +1.5623e+00  1.09e+00  3.40e-03  2.46e-01  3.17e-03  8.47e-03  3.98e-01  
  8  +4.5562e-01  +1.3614e+00  9.06e-01  2.62e-03  1.88e-01  2.18e-03  6.73e-03  3.25e-01  
  9  +4.2054e-01  +8.9700e-01  4.76e-01  1.41e-03  9.88e-02  1.91e-05  4.05e-03  8.12e-01  
 10  +3.7575e-01  +5.4815e-01  1.72e-01  4.59e-04  3.17e-02  1.55e-05  1.51e-03  6.78e-01  
 11  +3.5946e-01  +4.6631e-01  1.07e-01  2.72e-04  1.89e-02  1.93e-05  9.52e-04  5.22e-01  
 12  +3.4453e-01  +3.9127e-01  4.67e-02  1.15e-04  8.00e-03  9.79e-06  4.33e-04  5.97e-01  
 13  +3.3844e-01  +3.6166e-01  2.32e-02  5.52e-05  3.87e-03  6.08e-06  2.19e-04  6.04e-01  
 14  +3.3346e-01  +3.3930e-01  5.85e-03  1.33e-05  9.32e-04  1.75e-06  5.64e-05  8.03e-01  
 15  +3.3204e-01  +3.3337e-01  1.33e-03  2.96e-06  2.07e-04  4.10e-07  1.31e-05  7.91e-01  
 16  +3.3162e-01  +3.3166e-01  4.80e-05  1.05e-07  7.36e-06  1.49e-08  4.75e-07  9.67e-01  
 17  +3.3160e-01  +3.3160e-01  4.81e-07  1.06e-09  7.38e-08  1.49e-10  4.77e-09  9.90e-01  
 18  +3.3160e-01  +3.3160e-01  4.81e-09  1.06e-11  7.38e-10  1.50e-12  4.77e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.3022ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:42 PM: Optimal value: 3.316e-01
(CVXPY) Sep 20 07:45:42 PM: Compilation took 5.998e-03 seconds
(CVXPY) Sep 20 07:45:42 PM: Solver (including time spent in interface) took 1.841e-02 seconds
Iteration: 16, Objective: 0.3316
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:42 PM: Your problem has 671 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:42 PM: Finished problem compilation (took 6.385e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 671
  constraints   = 1171
  nnz(P)        = 0
  nnz(A)        = 8918
  cones (total) = 1
    : Nonnegative = 1,  numel = 1171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9933e-01  +5.0189e+02  5.01e+02  9.58e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.6616e-01  +1.0809e+02  1.08e+02  4.20e-01  2.01e+01  3.85e-03  5.64e-01  5.96e-01  
  2  +5.2191e-01  +1.2288e+01  1.18e+01  1.22e-01  7.57e+00  1.69e-02  2.28e-01  9.90e-01  
  3  +5.0789e-01  +3.1964e+00  2.69e+00  4.04e-02  2.80e+00  2.82e-03  9.57e-02  6.76e-01  
  4  +5.0647e-01  +3.0044e+00  2.50e+00  2.94e-02  2.08e+00  3.40e-03  6.93e-02  2.88e-01  
  5  +5.0263e-01  +2.7207e+00  2.22e+00  2.57e-02  1.79e+00  2.00e-03  6.48e-02  3.03e-01  
  6  +4.8701e-01  +1.9104e+00  1.42e+00  5.18e-03  3.80e-01  4.57e-03  1.24e-02  8.16e-01  
  7  +4.7041e-01  +1.5865e+00  1.12e+00  3.54e-03  2.56e-01  3.22e-03  8.80e-03  3.88e-01  
  8  +4.5557e-01  +1.3826e+00  9.27e-01  2.63e-03  1.89e-01  2.41e-03  6.74e-03  3.25e-01  
  9  +4.2160e-01  +9.0714e-01  4.86e-01  1.46e-03  1.02e-01  2.03e-05  4.20e-03  7.71e-01  
 10  +3.7722e-01  +5.6025e-01  1.83e-01  4.89e-04  3.37e-02  1.57e-05  1.60e-03  6.67e-01  
 11  +3.6005e-01  +4.7259e-01  1.13e-01  2.86e-04  1.98e-02  1.86e-05  9.94e-04  5.06e-01  
 12  +3.4482e-01  +3.9656e-01  5.17e-02  1.26e-04  8.82e-03  1.09e-05  4.72e-04  6.00e-01  
 13  +3.3685e-01  +3.5971e-01  2.29e-02  5.32e-05  3.75e-03  5.86e-06  2.13e-04  6.33e-01  
 14  +3.3213e-01  +3.3860e-01  6.48e-03  1.45e-05  1.03e-03  2.46e-06  6.14e-05  9.03e-01  
 15  +3.3131e-01  +3.3537e-01  4.06e-03  8.92e-06  6.29e-04  1.59e-06  3.81e-05  4.61e-01  
 16  +3.3027e-01  +3.3123e-01  9.63e-04  2.10e-06  1.48e-04  4.15e-07  9.11e-06  9.90e-01  
 17  +3.2990e-01  +3.2992e-01  1.30e-05  2.81e-08  1.98e-06  5.47e-09  1.23e-07  9.88e-01  
 18  +3.2990e-01  +3.2990e-01  1.30e-07  2.81e-10  1.98e-08  5.47e-11  1.23e-09  9.90e-01  
 19  +3.2990e-01  +3.2990e-01  1.30e-09  2.81e-12  1.98e-10  5.48e-13  1.23e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.9477ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:42 PM: Optimal value: 3.299e-01
(CVXPY) Sep 20 07:45:42 PM: Compilation took 6.385e-03 seconds
(CVXPY) Sep 20 07:45:42 PM: Solver (including time spent in interface) took 1.938e-02 seconds
Iteration: 17, Objective: 0.3299
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:42 PM: Your problem has 673 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:42 PM: Finished problem compilation (took 7.667e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 673
  constraints   = 1173
  nnz(P)        = 0
  nnz(A)        = 8939
  cones (total) = 1
    : Nonnegative = 1,  numel = 1173

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9933e-01  +5.0189e+02  5.01e+02  9.58e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.6593e-01  +1.0809e+02  1.08e+02  4.20e-01  2.01e+01  3.85e-03  5.64e-01  5.96e-01  
  2  +5.2174e-01  +1.2298e+01  1.18e+01  1.22e-01  7.55e+00  1.69e-02  2.27e-01  9.90e-01  
  3  +5.0787e-01  +3.2043e+00  2.70e+00  4.02e-02  2.78e+00  2.87e-03  9.49e-02  6.74e-01  
  4  +5.0652e-01  +3.0264e+00  2.52e+00  2.96e-02  2.09e+00  3.44e-03  6.95e-02  2.79e-01  
  5  +5.0260e-01  +2.7415e+00  2.24e+00  2.57e-02  1.80e+00  2.02e-03  6.49e-02  3.07e-01  
  6  +4.8675e-01  +1.9172e+00  1.43e+00  5.18e-03  3.79e-01  4.60e-03  1.24e-02  8.16e-01  
  7  +4.7008e-01  +1.6000e+00  1.13e+00  3.55e-03  2.57e-01  3.29e-03  8.82e-03  3.85e-01  
  8  +4.5511e-01  +1.3830e+00  9.28e-01  2.65e-03  1.90e-01  2.32e-03  6.82e-03  3.36e-01  
  9  +4.2145e-01  +9.1537e-01  4.94e-01  1.49e-03  1.04e-01  1.97e-05  4.28e-03  7.84e-01  
 10  +3.7610e-01  +5.5612e-01  1.80e-01  4.81e-04  3.30e-02  1.54e-05  1.58e-03  6.78e-01  
 11  +3.6079e-01  +4.8110e-01  1.20e-01  3.04e-04  2.10e-02  1.85e-05  1.06e-03  4.49e-01  
 12  +3.4404e-01  +3.9675e-01  5.27e-02  1.27e-04  8.90e-03  1.08e-05  4.79e-04  6.19e-01  
 13  +3.3606e-01  +3.5972e-01  2.37e-02  5.50e-05  3.88e-03  6.03e-06  2.19e-04  6.34e-01  
 14  +3.3049e-01  +3.3503e-01  4.54e-03  1.03e-05  7.25e-04  1.46e-06  4.30e-05  8.76e-01  
 15  +3.2932e-01  +3.3021e-01  8.88e-04  1.97e-06  1.39e-04  3.06e-07  8.45e-06  8.42e-01  
 16  +3.2909e-01  +3.2934e-01  2.51e-04  5.47e-07  3.86e-05  9.96e-08  2.38e-06  8.91e-01  
 17  +3.2900e-01  +3.2900e-01  3.13e-06  6.80e-09  4.80e-07  1.24e-09  2.97e-08  9.88e-01  
 18  +3.2900e-01  +3.2900e-01  3.15e-08  6.83e-11  4.82e-09  1.25e-11  2.98e-10  9.90e-01  
 19  +3.2900e-01  +3.2900e-01  3.15e-10  6.83e-13  4.82e-11  1.26e-13  3.00e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.2301ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:42 PM: Optimal value: 3.290e-01
(CVXPY) Sep 20 07:45:42 PM: Compilation took 7.667e-03 seconds
(CVXPY) Sep 20 07:45:42 PM: Solver (including time spent in interface) took 2.038e-02 seconds
Iteration: 18, Objective: 0.3290
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:42 PM: Your problem has 680 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:42 PM: Finished problem compilation (took 6.681e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 680
  constraints   = 1180
  nnz(P)        = 0
  nnz(A)        = 9011
  cones (total) = 1
    : Nonnegative = 1,  numel = 1180

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0182e+02  5.01e+02  9.58e-01  3.35e+01  1.00e+00  1.01e+00   ------   
  1  +5.6478e-01  +1.0813e+02  1.08e+02  4.20e-01  2.00e+01  3.85e-03  5.64e-01  5.96e-01  
  2  +5.2110e-01  +1.2377e+01  1.19e+01  1.21e-01  7.51e+00  1.70e-02  2.27e-01  9.90e-01  
  3  +5.0769e-01  +3.1995e+00  2.69e+00  3.85e-02  2.67e+00  3.02e-03  9.05e-02  6.75e-01  
  4  +5.0662e-01  +3.0850e+00  2.58e+00  2.97e-02  2.09e+00  3.55e-03  6.93e-02  2.43e-01  
  5  +5.0257e-01  +2.8293e+00  2.33e+00  2.59e-02  1.81e+00  2.15e-03  6.46e-02  3.14e-01  
  6  +4.8592e-01  +2.0031e+00  1.52e+00  5.32e-03  3.89e-01  4.89e-03  1.27e-02  8.12e-01  
  7  +4.6850e-01  +1.6625e+00  1.19e+00  3.66e-03  2.65e-01  3.50e-03  9.05e-03  3.75e-01  
  8  +4.5376e-01  +1.4443e+00  9.91e-01  2.85e-03  2.04e-01  2.40e-03  7.28e-03  3.16e-01  
  9  +4.2159e-01  +9.8110e-01  5.60e-01  1.67e-03  1.17e-01  3.64e-04  4.75e-03  6.56e-01  
 10  +3.7439e-01  +5.6979e-01  1.95e-01  5.34e-04  3.65e-02  8.13e-05  1.75e-03  7.02e-01  
 11  +3.5899e-01  +4.8885e-01  1.30e-01  3.42e-04  2.35e-02  5.55e-05  1.19e-03  4.35e-01  
 12  +3.4337e-01  +4.0506e-01  6.17e-02  1.57e-04  1.09e-02  2.65e-05  5.91e-04  5.78e-01  
 13  +3.3582e-01  +3.6759e-01  3.18e-02  7.76e-05  5.44e-03  1.39e-05  3.07e-04  6.06e-01  
 14  +3.2963e-01  +3.3814e-01  8.50e-03  2.01e-05  1.41e-03  3.68e-06  8.42e-05  8.73e-01  
 15  +3.2775e-01  +3.3006e-01  2.31e-03  5.35e-06  3.75e-04  1.00e-06  2.30e-05  7.76e-01  
 16  +3.2724e-01  +3.2793e-01  6.94e-04  1.59e-06  1.11e-04  2.92e-07  6.93e-06  8.40e-01  
 17  +3.2700e-01  +3.2702e-01  1.17e-05  2.67e-08  1.87e-06  4.88e-09  1.17e-07  9.84e-01  
 18  +3.2700e-01  +3.2700e-01  1.17e-07  2.67e-10  1.87e-08  4.88e-11  1.17e-09  9.90e-01  
 19  +3.2700e-01  +3.2700e-01  1.18e-09  2.68e-12  1.88e-10  4.92e-13  1.18e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.8214ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:42 PM: Optimal value: 3.270e-01
(CVXPY) Sep 20 07:45:42 PM: Compilation took 6.681e-03 seconds
(CVXPY) Sep 20 07:45:42 PM: Solver (including time spent in interface) took 2.235e-02 seconds
Iteration: 19, Objective: 0.3270
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:42 PM: Your problem has 682 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:42 PM: Finished problem compilation (took 7.649e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 682
  constraints   = 1182
  nnz(P)        = 0
  nnz(A)        = 9027
  cones (total) = 1
    : Nonnegative = 1,  numel = 1182

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9930e-01  +5.0182e+02  5.01e+02  9.58e-01  3.35e+01  1.00e+00  1.01e+00   ------   
  1  +5.6446e-01  +1.0815e+02  1.08e+02  4.20e-01  2.00e+01  3.85e-03  5.64e-01  5.96e-01  
  2  +5.2098e-01  +1.2400e+01  1.19e+01  1.21e-01  7.49e+00  1.71e-02  2.27e-01  9.90e-01  
  3  +5.0762e-01  +3.1888e+00  2.68e+00  3.80e-02  2.64e+00  3.04e-03  8.93e-02  6.77e-01  
  4  +5.0662e-01  +3.0879e+00  2.58e+00  2.96e-02  2.08e+00  3.56e-03  6.90e-02  2.36e-01  
  5  +5.0254e-01  +2.8453e+00  2.34e+00  2.59e-02  1.80e+00  2.18e-03  6.43e-02  3.17e-01  
  6  +4.8552e-01  +2.0226e+00  1.54e+00  5.29e-03  3.86e-01  5.01e-03  1.26e-02  8.12e-01  
  7  +4.6789e-01  +1.6691e+00  1.20e+00  3.67e-03  2.65e-01  3.49e-03  9.09e-03  3.66e-01  
  8  +4.5245e-01  +1.4468e+00  9.94e-01  2.83e-03  2.02e-01  2.50e-03  7.23e-03  3.02e-01  
  9  +4.2084e-01  +9.9566e-01  5.75e-01  1.70e-03  1.19e-01  5.41e-04  4.82e-03  5.90e-01  
 10  +3.7220e-01  +5.6011e-01  1.88e-01  5.13e-04  3.50e-02  9.66e-05  1.69e-03  7.31e-01  
 11  +3.5811e-01  +4.8804e-01  1.30e-01  3.38e-04  2.31e-02  6.77e-05  1.18e-03  4.09e-01  
 12  +3.4284e-01  +4.0803e-01  6.52e-02  1.63e-04  1.13e-02  3.32e-05  6.13e-04  6.59e-01  
 13  +3.3318e-01  +3.6117e-01  2.80e-02  6.65e-05  4.64e-03  1.41e-05  2.68e-04  6.68e-01  
 14  +3.2762e-01  +3.3580e-01  8.18e-03  1.88e-05  1.32e-03  3.82e-06  8.03e-05  8.34e-01  
 15  +3.2520e-01  +3.2550e-01  3.00e-04  6.82e-07  4.78e-05  1.26e-07  3.01e-06  9.72e-01  
 16  +3.2510e-01  +3.2510e-01  3.12e-06  7.09e-09  4.96e-07  1.31e-09  3.13e-08  9.90e-01  
 17  +3.2510e-01  +3.2510e-01  3.12e-08  7.09e-11  4.97e-09  1.31e-11  3.14e-10  9.90e-01  
 18  +3.2510e-01  +3.2510e-01  3.12e-10  7.10e-13  4.97e-11  1.31e-13  3.14e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.3816ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:42 PM: Optimal value: 3.251e-01
(CVXPY) Sep 20 07:45:42 PM: Compilation took 7.649e-03 seconds
(CVXPY) Sep 20 07:45:42 PM: Solver (including time spent in interface) took 2.246e-02 seconds
Iteration: 20, Objective: 0.3251
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:42 PM: Your problem has 692 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:42 PM: Finished problem compilation (took 8.669e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 692
  constraints   = 1192
  nnz(P)        = 0
  nnz(A)        = 9166
  cones (total) = 1
    : Nonnegative = 1,  numel = 1192

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0186e+02  5.01e+02  9.58e-01  3.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.6360e-01  +1.0818e+02  1.08e+02  4.22e-01  1.99e+01  3.85e-03  5.64e-01  5.95e-01  
  2  +5.2038e-01  +1.2468e+01  1.19e+01  1.21e-01  7.43e+00  1.72e-02  2.27e-01  9.90e-01  
  3  +5.0721e-01  +3.0934e+00  2.59e+00  3.55e-02  2.46e+00  3.07e-03  8.34e-02  6.89e-01  
  4  +5.0644e-01  +3.0474e+00  2.54e+00  2.86e-02  2.00e+00  3.56e-03  6.65e-02  2.11e-01  
  5  +5.0247e-01  +2.9086e+00  2.41e+00  2.51e-02  1.75e+00  2.35e-03  6.16e-02  3.38e-01  
  6  +4.8575e-01  +2.1601e+00  1.67e+00  5.78e-03  4.20e-01  5.11e-03  1.38e-02  7.85e-01  
  7  +4.6542e-01  +1.7066e+00  1.24e+00  3.76e-03  2.70e-01  3.28e-03  9.35e-03  4.19e-01  
  8  +4.5031e-01  +1.4604e+00  1.01e+00  2.94e-03  2.09e-01  2.13e-03  7.59e-03  3.18e-01  
  9  +4.0989e-01  +8.7952e-01  4.70e-01  1.39e-03  9.61e-02  1.84e-05  4.09e-03  8.31e-01  
 10  +3.6683e-01  +5.3901e-01  1.72e-01  4.75e-04  3.23e-02  1.72e-05  1.62e-03  6.70e-01  
 11  +3.5067e-01  +4.5254e-01  1.02e-01  2.68e-04  1.83e-02  1.60e-05  9.70e-04  5.01e-01  
 12  +3.3956e-01  +3.9381e-01  5.42e-02  1.37e-04  9.41e-03  1.15e-05  5.23e-04  5.60e-01  
 13  +3.3282e-01  +3.6040e-01  2.76e-02  6.78e-05  4.68e-03  6.80e-06  2.69e-04  5.66e-01  
 14  +3.2825e-01  +3.3860e-01  1.03e-02  2.46e-05  1.70e-03  3.41e-06  1.01e-04  8.02e-01  
 15  +3.2552e-01  +3.2679e-01  1.27e-03  2.96e-06  2.05e-04  4.82e-07  1.26e-05  9.55e-01  
 16  +3.2511e-01  +3.2513e-01  1.97e-05  4.58e-08  3.17e-06  7.38e-09  1.96e-07  9.85e-01  
 17  +3.2510e-01  +3.2510e-01  1.97e-07  4.58e-10  3.18e-08  7.39e-11  1.96e-09  9.90e-01  
 18  +3.2510e-01  +3.2510e-01  1.97e-09  4.59e-12  3.18e-10  7.40e-13  1.96e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.6032ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:42 PM: Optimal value: 3.251e-01
(CVXPY) Sep 20 07:45:42 PM: Compilation took 8.669e-03 seconds
(CVXPY) Sep 20 07:45:42 PM: Solver (including time spent in interface) took 2.334e-02 seconds
Iteration: 21, Objective: 0.3251
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:43 PM: Your problem has 702 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:43 PM: Finished problem compilation (took 7.707e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 702
  constraints   = 1202
  nnz(P)        = 0
  nnz(A)        = 9278
  cones (total) = 1
    : Nonnegative = 1,  numel = 1202

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9927e-01  +5.0189e+02  5.01e+02  9.59e-01  3.32e+01  1.00e+00  1.01e+00   ------   
  1  +5.6315e-01  +1.0820e+02  1.08e+02  4.22e-01  1.98e+01  3.85e-03  5.64e-01  5.95e-01  
  2  +5.1999e-01  +1.2503e+01  1.20e+01  1.21e-01  7.35e+00  1.72e-02  2.26e-01  9.90e-01  
  3  +5.0693e-01  +3.0218e+00  2.51e+00  3.39e-02  2.34e+00  3.06e-03  7.95e-02  6.99e-01  
  4  +5.0632e-01  +3.0219e+00  2.52e+00  2.79e-02  1.95e+00  3.53e-03  6.49e-02  2.03e-01  
  5  +5.0217e-01  +2.9928e+00  2.49e+00  2.41e-02  1.67e+00  2.47e-03  5.83e-02  4.07e-01  
  6  +4.8432e-01  +2.2144e+00  1.73e+00  5.62e-03  4.08e-01  5.22e-03  1.34e-02  7.77e-01  
  7  +4.6295e-01  +1.7258e+00  1.26e+00  3.67e-03  2.63e-01  3.25e-03  9.13e-03  4.14e-01  
  8  +4.4216e-01  +1.3719e+00  9.30e-01  2.67e-03  1.88e-01  1.80e-03  7.00e-03  3.49e-01  
  9  +3.9086e-01  +7.0554e-01  3.15e-01  8.95e-04  6.11e-02  6.99e-05  2.76e-03  8.17e-01  
 10  +3.6183e-01  +5.2571e-01  1.64e-01  4.46e-04  3.02e-02  4.38e-05  1.54e-03  5.66e-01  
 11  +3.4542e-01  +4.3352e-01  8.81e-02  2.31e-04  1.57e-02  3.15e-05  8.59e-04  7.12e-01  
 12  +3.3342e-01  +3.6955e-01  3.61e-02  9.09e-05  6.21e-03  1.33e-05  3.62e-04  6.26e-01  
 13  +3.3042e-01  +3.5442e-01  2.40e-02  5.95e-05  4.08e-03  9.07e-06  2.41e-04  4.37e-01  
 14  +3.2563e-01  +3.3104e-01  5.42e-03  1.32e-05  9.10e-04  2.04e-06  5.56e-05  8.12e-01  
 15  +3.2459e-01  +3.2621e-01  1.62e-03  3.90e-06  2.69e-04  6.24e-07  1.66e-05  7.76e-01  
 16  +3.2424e-01  +3.2466e-01  4.19e-04  9.96e-07  6.88e-05  1.63e-07  4.34e-06  9.11e-01  
 17  +3.2411e-01  +3.2414e-01  3.16e-05  7.43e-08  5.15e-06  1.21e-08  3.30e-07  9.32e-01  
 18  +3.2410e-01  +3.2410e-01  3.37e-07  7.90e-10  5.47e-08  1.29e-10  3.52e-09  9.89e-01  
 19  +3.2410e-01  +3.2410e-01  3.38e-09  7.93e-12  5.49e-10  1.29e-12  3.53e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.2703ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:43 PM: Optimal value: 3.241e-01
(CVXPY) Sep 20 07:45:43 PM: Compilation took 7.707e-03 seconds
(CVXPY) Sep 20 07:45:43 PM: Solver (including time spent in interface) took 2.712e-02 seconds
Iteration: 22, Objective: 0.3241
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:43 PM: Your problem has 712 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:43 PM: Finished problem compilation (took 8.663e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:43 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 712
  constraints   = 1212
  nnz(P)        = 0
  nnz(A)        = 9429
  cones (total) = 1
    : Nonnegative = 1,  numel = 1212

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9927e-01  +5.0189e+02  5.01e+02  9.59e-01  3.32e+01  1.00e+00  1.01e+00   ------   
  1  +5.6232e-01  +1.0824e+02  1.08e+02  4.23e-01  1.97e+01  3.85e-03  5.64e-01  5.95e-01  
  2  +5.1943e-01  +1.2545e+01  1.20e+01  1.21e-01  7.28e+00  1.73e-02  2.26e-01  9.90e-01  
  3  +5.0640e-01  +2.8751e+00  2.37e+00  3.10e-02  2.14e+00  2.99e-03  7.32e-02  7.17e-01  
  4  +5.0603e-01  +2.9534e+00  2.45e+00  2.65e-02  1.85e+00  3.45e-03  6.18e-02  2.00e-01  
  5  +5.0181e-01  +3.1419e+00  2.64e+00  2.20e-02  1.53e+00  2.86e-03  5.22e-02  4.92e-01  
  6  +4.8489e-01  +2.3910e+00  1.91e+00  6.42e-03  4.63e-01  4.97e-03  1.53e-02  7.12e-01  
  7  +4.6176e-01  +1.7843e+00  1.32e+00  3.95e-03  2.81e-01  2.94e-03  9.87e-03  4.53e-01  
  8  +4.4631e-01  +1.5146e+00  1.07e+00  3.09e-03  2.18e-01  1.94e-03  8.03e-03  3.11e-01  
  9  +4.0947e-01  +9.3009e-01  5.21e-01  1.59e-03  1.09e-01  1.62e-05  4.70e-03  8.61e-01  
 10  +3.6192e-01  +5.1842e-01  1.57e-01  4.38e-04  2.94e-02  1.42e-05  1.51e-03  7.32e-01  
 11  +3.4560e-01  +4.3828e-01  9.27e-02  2.46e-04  1.67e-02  1.59e-05  9.04e-04  5.44e-01  
 12  +3.3169e-01  +3.6742e-01  3.57e-02  9.06e-05  6.18e-03  7.96e-06  3.60e-04  6.81e-01  
 13  +3.2867e-01  +3.5319e-01  2.45e-02  6.06e-05  4.17e-03  6.49e-06  2.45e-04  4.59e-01  
 14  +3.2495e-01  +3.3637e-01  1.14e-02  2.73e-05  1.88e-03  3.29e-06  1.14e-04  5.97e-01  
 15  +3.2277e-01  +3.2685e-01  4.08e-03  9.38e-06  6.49e-04  1.49e-06  4.03e-05  8.67e-01  
 16  +3.2145e-01  +3.2161e-01  1.53e-04  3.46e-07  2.40e-05  5.65e-08  1.51e-06  9.76e-01  
 17  +3.2140e-01  +3.2140e-01  1.54e-06  3.48e-09  2.41e-07  5.69e-10  1.53e-08  9.90e-01  
 18  +3.2140e-01  +3.2140e-01  1.54e-08  3.48e-11  2.41e-09  5.69e-12  1.53e-10  9.90e-01  
 19  +3.2140e-01  +3.2140e-01  1.55e-10  3.50e-13  2.42e-11  5.73e-14  1.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.6552ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:43 PM: Optimal value: 3.214e-01
(CVXPY) Sep 20 07:45:43 PM: Compilation took 8.663e-03 seconds
(CVXPY) Sep 20 07:45:43 PM: Solver (including time spent in interface) took 2.902e-02 seconds
Iteration: 23, Objective: 0.3214
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:43 PM: Your problem has 722 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:43 PM: Finished problem compilation (took 8.750e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 722
  constraints   = 1222
  nnz(P)        = 0
  nnz(A)        = 9557
  cones (total) = 1
    : Nonnegative = 1,  numel = 1222

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0200e+02  5.02e+02  9.59e-01  3.30e+01  1.00e+00  1.01e+00   ------   
  1  +5.6086e-01  +1.0840e+02  1.08e+02  4.24e-01  1.96e+01  3.85e-03  5.65e-01  5.95e-01  
  2  +5.1853e-01  +1.2635e+01  1.21e+01  1.21e-01  7.20e+00  1.74e-02  2.26e-01  9.90e-01  
  3  +5.0548e-01  +2.6027e+00  2.10e+00  2.65e-02  1.83e+00  2.82e-03  6.29e-02  7.53e-01  
  4  +5.0517e-01  +2.7578e+00  2.25e+00  2.33e-02  1.62e+00  3.25e-03  5.43e-02  2.25e-01  
  5  +4.9998e-01  +3.1931e+00  2.69e+00  1.75e-02  1.23e+00  3.49e-03  4.08e-02  5.91e-01  
  6  +4.8181e-01  +2.3886e+00  1.91e+00  6.52e-03  4.67e-01  4.39e-03  1.56e-02  6.24e-01  
  7  +4.6068e-01  +1.8706e+00  1.41e+00  4.34e-03  3.07e-01  2.95e-03  1.08e-02  4.01e-01  
  8  +4.4032e-01  +1.4908e+00  1.05e+00  3.02e-03  2.12e-01  1.80e-03  7.93e-03  4.04e-01  
  9  +4.1211e-01  +1.0018e+00  5.90e-01  1.92e-03  1.31e-01  1.41e-05  5.68e-03  8.84e-01  
 10  +3.6621e-01  +5.7287e-01  2.07e-01  5.84e-04  3.92e-02  1.29e-05  1.97e-03  6.90e-01  
 11  +3.5163e-01  +4.8845e-01  1.37e-01  3.75e-04  2.52e-02  1.42e-05  1.34e-03  3.94e-01  
 12  +3.3640e-01  +4.0138e-01  6.50e-02  1.72e-04  1.16e-02  1.19e-05  6.64e-04  6.26e-01  
 13  +3.2724e-01  +3.5353e-01  2.63e-02  6.70e-05  4.57e-03  6.15e-06  2.73e-04  6.77e-01  
 14  +3.2409e-01  +3.3868e-01  1.46e-02  3.56e-05  2.46e-03  4.05e-06  1.48e-04  5.83e-01  
 15  +3.2209e-01  +3.2986e-01  7.76e-03  1.82e-05  1.26e-03  2.44e-06  7.76e-05  6.20e-01  
 16  +3.1992e-01  +3.2057e-01  6.51e-04  1.49e-06  1.04e-04  2.29e-07  6.55e-06  9.55e-01  
 17  +3.1970e-01  +3.1971e-01  7.26e-06  1.66e-08  1.15e-06  2.54e-09  7.31e-08  9.89e-01  
 18  +3.1970e-01  +3.1970e-01  7.26e-08  1.66e-10  1.15e-08  2.54e-11  7.32e-10  9.90e-01  
 19  +3.1970e-01  +3.1970e-01  7.29e-10  1.67e-12  1.16e-10  2.55e-13  7.35e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.0055ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:43 PM: Optimal value: 3.197e-01
(CVXPY) Sep 20 07:45:43 PM: Compilation took 8.750e-03 seconds
(CVXPY) Sep 20 07:45:43 PM: Solver (including time spent in interface) took 2.993e-02 seconds
Iteration: 24, Objective: 0.3197
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:43 PM: Your problem has 728 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:43 PM: Finished problem compilation (took 7.704e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 728
  constraints   = 1228
  nnz(P)        = 0
  nnz(A)        = 9620
  cones (total) = 1
    : Nonnegative = 1,  numel = 1228

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0199e+02  5.01e+02  9.59e-01  3.30e+01  1.00e+00  1.01e+00   ------   
  1  +5.6043e-01  +1.0838e+02  1.08e+02  4.24e-01  1.95e+01  3.85e-03  5.64e-01  5.95e-01  
  2  +5.1808e-01  +1.2654e+01  1.21e+01  1.21e-01  7.16e+00  1.75e-02  2.26e-01  9.90e-01  
  3  +5.0487e-01  +2.4097e+00  1.90e+00  2.36e-02  1.63e+00  2.66e-03  5.63e-02  7.81e-01  
  4  +5.0442e-01  +2.6000e+00  2.10e+00  2.06e-02  1.43e+00  3.10e-03  4.82e-02  2.66e-01  
  5  +4.9727e-01  +3.0663e+00  2.57e+00  1.37e-02  9.69e-01  3.84e-03  3.20e-02  6.63e-01  
  6  +4.7517e-01  +2.1242e+00  1.65e+00  5.42e-03  3.87e-01  3.56e-03  1.31e-02  6.21e-01  
  7  +4.5346e-01  +1.7091e+00  1.26e+00  3.68e-03  2.59e-01  2.52e-03  9.29e-03  3.82e-01  
  8  +4.3746e-01  +1.4845e+00  1.05e+00  2.88e-03  2.02e-01  1.89e-03  7.55e-03  2.95e-01  
  9  +4.0383e-01  +9.4689e-01  5.43e-01  1.71e-03  1.16e-01  1.43e-05  5.16e-03  9.14e-01  
 10  +3.5744e-01  +5.2069e-01  1.63e-01  4.61e-04  3.08e-02  1.22e-05  1.60e-03  7.32e-01  
 11  +3.4364e-01  +4.4891e-01  1.05e-01  2.87e-04  1.94e-02  1.64e-05  1.06e-03  4.91e-01  
 12  +3.2860e-01  +3.6721e-01  3.86e-02  1.01e-04  6.85e-03  8.39e-06  4.04e-04  7.05e-01  
 13  +3.2481e-01  +3.4870e-01  2.39e-02  6.06e-05  4.15e-03  6.25e-06  2.47e-04  5.23e-01  
 14  +3.2125e-01  +3.3237e-01  1.11e-02  2.69e-05  1.85e-03  3.30e-06  1.13e-04  6.35e-01  
 15  +3.1894e-01  +3.2248e-01  3.54e-03  8.26e-06  5.71e-04  1.19e-06  3.59e-05  8.22e-01  
 16  +3.1783e-01  +3.1792e-01  9.21e-05  2.12e-07  1.47e-05  3.03e-08  9.38e-07  9.76e-01  
 17  +3.1780e-01  +3.1780e-01  9.24e-07  2.13e-09  1.47e-07  3.04e-10  9.41e-09  9.90e-01  
 18  +3.1780e-01  +3.1780e-01  9.24e-09  2.13e-11  1.47e-09  3.05e-12  9.42e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.1509ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:43 PM: Optimal value: 3.178e-01
(CVXPY) Sep 20 07:45:43 PM: Compilation took 7.704e-03 seconds
(CVXPY) Sep 20 07:45:43 PM: Solver (including time spent in interface) took 2.899e-02 seconds
Iteration: 25, Objective: 0.3178
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:43 PM: Your problem has 731 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:43 PM: Finished problem compilation (took 8.679e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 731
  constraints   = 1231
  nnz(P)        = 0
  nnz(A)        = 9642
  cones (total) = 1
    : Nonnegative = 1,  numel = 1231

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0199e+02  5.01e+02  9.59e-01  3.29e+01  1.00e+00  1.01e+00   ------   
  1  +5.6036e-01  +1.0835e+02  1.08e+02  4.24e-01  1.95e+01  3.85e-03  5.64e-01  5.95e-01  
  2  +5.1796e-01  +1.2653e+01  1.21e+01  1.21e-01  7.13e+00  1.74e-02  2.25e-01  9.90e-01  
  3  +5.0472e-01  +2.3604e+00  1.86e+00  2.28e-02  1.58e+00  2.62e-03  5.47e-02  7.88e-01  
  4  +5.0419e-01  +2.5631e+00  2.06e+00  1.98e-02  1.38e+00  3.08e-03  4.65e-02  2.83e-01  
  5  +4.9626e-01  +3.0165e+00  2.52e+00  1.27e-02  8.96e-01  3.97e-03  2.96e-02  6.81e-01  
  6  +4.7291e-01  +2.0452e+00  1.57e+00  5.11e-03  3.63e-01  3.30e-03  1.24e-02  6.20e-01  
  7  +4.4984e-01  +1.6094e+00  1.16e+00  3.39e-03  2.38e-01  2.19e-03  8.65e-03  3.96e-01  
  8  +4.3606e-01  +1.4394e+00  1.00e+00  2.78e-03  1.94e-01  1.70e-03  7.33e-03  2.56e-01  
  9  +3.9483e-01  +8.4765e-01  4.53e-01  1.38e-03  9.33e-02  1.32e-05  4.26e-03  9.28e-01  
 10  +3.5433e-01  +5.0536e-01  1.51e-01  4.32e-04  2.88e-02  1.40e-05  1.54e-03  7.02e-01  
 11  +3.3995e-01  +4.2820e-01  8.82e-02  2.42e-04  1.63e-02  1.48e-05  9.11e-04  5.46e-01  
 12  +3.2762e-01  +3.6223e-01  3.46e-02  9.11e-05  6.18e-03  7.65e-06  3.66e-04  6.86e-01  
 13  +3.2463e-01  +3.4787e-01  2.32e-02  5.91e-05  4.05e-03  6.09e-06  2.41e-04  4.81e-01  
 14  +3.2093e-01  +3.3093e-01  1.00e-02  2.40e-05  1.66e-03  3.08e-06  1.02e-04  6.95e-01  
 15  +3.1866e-01  +3.2133e-01  2.67e-03  6.22e-06  4.30e-04  9.00e-07  2.72e-05  8.34e-01  
 16  +3.1782e-01  +3.1787e-01  5.56e-05  1.28e-07  8.87e-06  1.85e-08  5.67e-07  9.81e-01  
 17  +3.1780e-01  +3.1780e-01  5.56e-07  1.28e-09  8.87e-08  1.85e-10  5.68e-09  9.90e-01  
 18  +3.1780e-01  +3.1780e-01  5.56e-09  1.28e-11  8.88e-10  1.86e-12  5.69e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.1412ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:43 PM: Optimal value: 3.178e-01
(CVXPY) Sep 20 07:45:43 PM: Compilation took 8.679e-03 seconds
(CVXPY) Sep 20 07:45:43 PM: Solver (including time spent in interface) took 2.799e-02 seconds
Iteration: 26, Objective: 0.3178
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:45:43 PM: Your problem has 732 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:45:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:45:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:45:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:45:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:45:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:45:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:45:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:45:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:45:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:45:44 PM: Finished problem compilation (took 7.656e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 732
  constraints   = 1232
  nnz(P)        = 0
  nnz(A)        = 9652
  cones (total) = 1
    : Nonnegative = 1,  numel = 1232

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0199e+02  5.01e+02  9.59e-01  3.29e+01  1.00e+00  1.01e+00   ------   
  1  +5.6025e-01  +1.0836e+02  1.08e+02  4.24e-01  1.95e+01  3.85e-03  5.64e-01  5.95e-01  
  2  +5.1786e-01  +1.2662e+01  1.21e+01  1.21e-01  7.13e+00  1.75e-02  2.26e-01  9.90e-01  
  3  +5.0455e-01  +2.3069e+00  1.80e+00  2.21e-02  1.52e+00  2.57e-03  5.29e-02  7.95e-01  
  4  +5.0392e-01  +2.5276e+00  2.02e+00  1.90e-02  1.33e+00  3.06e-03  4.47e-02  3.05e-01  
  5  +4.9488e-01  +2.9482e+00  2.45e+00  1.16e-02  8.18e-01  4.11e-03  2.70e-02  6.98e-01  
  6  +4.7046e-01  +1.9473e+00  1.48e+00  4.88e-03  3.46e-01  2.83e-03  1.20e-02  6.16e-01  
  7  +4.4933e-01  +1.5638e+00  1.11e+00  3.36e-03  2.36e-01  1.83e-03  8.64e-03  3.87e-01  
  8  +4.3515e-01  +1.3930e+00  9.58e-01  2.72e-03  1.89e-01  1.45e-03  7.21e-03  2.45e-01  
  9  +3.9192e-01  +8.1939e-01  4.27e-01  1.29e-03  8.71e-02  3.34e-05  4.01e-03  9.24e-01  
 10  +3.5383e-01  +5.0580e-01  1.52e-01  4.36e-04  2.91e-02  1.86e-05  1.56e-03  6.78e-01  
 11  +3.3891e-01  +4.2333e-01  8.44e-02  2.32e-04  1.56e-02  1.61e-05  8.79e-04  5.68e-01  
 12  +3.2778e-01  +3.6333e-01  3.55e-02  9.38e-05  6.36e-03  8.48e-06  3.77e-04  6.63e-01  
 13  +3.2458e-01  +3.4776e-01  2.32e-02  5.90e-05  4.04e-03  6.41e-06  2.41e-04  4.98e-01  
 14  +3.2090e-01  +3.3084e-01  9.94e-03  2.39e-05  1.65e-03  3.16e-06  1.01e-04  6.94e-01  
 15  +3.1868e-01  +3.2138e-01  2.70e-03  6.31e-06  4.36e-04  9.34e-07  2.76e-05  8.38e-01  
 16  +3.1782e-01  +3.1788e-01  5.81e-05  1.34e-07  9.27e-06  1.98e-08  5.94e-07  9.81e-01  
 17  +3.1780e-01  +3.1780e-01  5.82e-07  1.34e-09  9.28e-08  1.98e-10  5.94e-09  9.90e-01  
 18  +3.1780e-01  +3.1780e-01  5.82e-09  1.34e-11  9.28e-10  1.98e-12  5.95e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.1492ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:45:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:45:44 PM: Optimal value: 3.178e-01
(CVXPY) Sep 20 07:45:44 PM: Compilation took 7.656e-03 seconds
(CVXPY) Sep 20 07:45:44 PM: Solver (including time spent in interface) took 2.880e-02 seconds
FULL MODEL:
  Accruacy: 0.622
  Our objective: 0.24399999999999997

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0)            <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x7 = 0)                       <-- (term's our objective: 0.018)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 0)                       <-- (term's our objective: 0.018)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 1)                       <-- (term's our objective: 0.008)
 OR (x1 = 0 AND x2 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.032)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 1)                                  <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0)                       <-- (term's our objective: 0.024)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 7.538680553436279
Best over terms:
  Our final objective: 0.03200000000000004
    Its accruacy: 0.516
    Its hamming distance: 7
  Shortest hamming distance: 1
    Its our objective: 0.014000000000000014
  Highest accruacy: 0.516
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

