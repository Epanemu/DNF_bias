Command:
python test_script.py -s constant_subclass -d 5 -n 10000 --seed 34 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0344
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 5.

Computed total variation: 0.06439999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:32:10 PM: Your problem has 5011 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:32:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:32:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:32:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:32:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:32:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:32:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:32:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:32:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:32:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:32:10 PM: Finished problem compilation (took 2.103e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5011
  constraints   = 10011
  nnz(P)        = 0
  nnz(A)        = 40011
  cones (total) = 1
    : Nonnegative = 1,  numel = 10011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  9.26e+01  1.00e+00  1.00e+00   ------   
  1  +5.9959e-01  +1.0021e+03  1.00e+03  3.64e-01  5.41e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4629e-01  +1.4312e+02  1.43e+02  1.45e-01  2.69e+01  9.84e-03  2.35e-01  7.78e-01  
  3  +5.1094e-01  +3.4170e+01  3.37e+01  1.16e-01  2.11e+01  2.36e-05  2.32e-01  8.71e-02  
  4  +5.0019e-01  +1.1985e+00  6.98e-01  4.71e-03  8.70e-01  4.11e-06  1.38e-01  9.90e-01  
  5  +5.0002e-01  +6.0938e-01  1.09e-01  7.30e-04  1.36e-01  1.05e-06  3.70e-02  7.90e-01  
  6  +5.0001e-01  +5.6775e-01  6.77e-02  4.51e-04  8.39e-02  9.35e-07  1.36e-02  7.66e-01  
  7  +4.9966e-01  +5.5876e-01  5.91e-02  1.46e-04  2.73e-02  1.55e-05  5.39e-04  9.86e-01  
  8  +4.9551e-01  +5.3895e-01  4.34e-02  1.10e-05  2.05e-03  1.64e-04  3.54e-05  9.34e-01  
  9  +4.9147e-01  +5.1930e-01  2.78e-02  7.13e-06  1.33e-03  6.77e-05  2.41e-05  4.20e-01  
 10  +4.8800e-01  +5.0329e-01  1.53e-02  3.58e-06  6.69e-04  6.93e-07  1.30e-05  8.90e-01  
 11  +4.8356e-01  +4.8472e-01  1.16e-03  2.41e-07  4.50e-05  3.13e-08  9.61e-07  9.53e-01  
 12  +4.8311e-01  +4.8312e-01  1.32e-05  2.66e-09  4.97e-07  3.47e-10  1.09e-08  9.89e-01  
 13  +4.8310e-01  +4.8310e-01  1.32e-07  2.66e-11  4.97e-09  3.47e-12  1.09e-10  9.90e-01  
 14  +4.8310e-01  +4.8310e-01  1.32e-09  2.66e-13  4.98e-11  3.86e-14  1.21e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 48.7125ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:10 PM: Problem status: optimal
(CVXPY) Sep 20 07:32:10 PM: Optimal value: 4.831e-01
(CVXPY) Sep 20 07:32:10 PM: Compilation took 2.103e-02 seconds
(CVXPY) Sep 20 07:32:10 PM: Solver (including time spent in interface) took 5.608e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4831
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:32:10 PM: Your problem has 5021 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:32:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:32:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:32:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:32:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:32:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:32:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:32:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:32:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:32:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:32:10 PM: Finished problem compilation (took 1.902e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5021
  constraints   = 10021
  nnz(P)        = 0
  nnz(A)        = 45306
  cones (total) = 1
    : Nonnegative = 1,  numel = 10021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0012e+03  5.00e+03  9.85e-01  9.42e+01  1.00e+00  1.00e+00   ------   
  1  +5.9954e-01  +1.0023e+03  1.00e+03  3.65e-01  5.50e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4620e-01  +1.4294e+02  1.42e+02  1.45e-01  2.73e+01  9.86e-03  2.36e-01  7.79e-01  
  3  +5.1090e-01  +3.4071e+01  3.36e+01  1.16e-01  2.14e+01  2.36e-05  2.32e-01  8.82e-02  
  4  +5.0036e-01  +1.7512e+00  1.25e+00  8.43e-03  1.57e+00  4.54e-06  1.67e-01  6.73e-01  
  5  +5.0004e-01  +7.3974e-01  2.40e-01  1.60e-03  3.02e-01  1.75e-06  6.97e-02  6.93e-01  
  6  +5.0002e-01  +6.4399e-01  1.44e-01  9.61e-04  1.82e-01  1.15e-06  3.70e-02  5.57e-01  
  7  +5.0001e-01  +6.1798e-01  1.18e-01  7.85e-04  1.48e-01  1.28e-06  1.94e-02  5.33e-01  
  8  +5.0001e-01  +6.2493e-01  1.25e-01  8.26e-04  1.56e-01  1.17e-06  1.52e-02  4.77e-01  
  9  +4.9982e-01  +5.8034e-01  8.05e-02  2.93e-04  5.56e-02  6.59e-06  1.19e-03  9.78e-01  
 10  +4.9679e-01  +5.6130e-01  6.45e-02  2.10e-05  3.99e-03  9.10e-05  6.60e-05  9.46e-01  
 11  +4.9609e-01  +5.5688e-01  6.08e-02  2.01e-05  3.83e-03  7.30e-05  6.36e-05  1.29e-01  
 12  +4.9122e-01  +5.2555e-01  3.43e-02  1.17e-05  2.22e-03  6.86e-07  3.83e-05  7.56e-01  
 13  +4.9054e-01  +5.2168e-01  3.11e-02  9.48e-06  1.80e-03  8.02e-07  3.06e-05  4.72e-01  
 14  +4.9023e-01  +5.1996e-01  2.97e-02  8.91e-06  1.69e-03  8.69e-07  2.85e-05  3.73e-01  
 15  +4.8608e-01  +4.9682e-01  1.07e-02  2.69e-06  5.11e-04  3.86e-07  8.51e-06  7.47e-01  
 16  +4.8616e-01  +4.9790e-01  1.17e-02  2.39e-06  4.54e-04  5.23e-07  7.23e-06  2.20e-01  
 17  +4.8611e-01  +4.9773e-01  1.16e-02  2.39e-06  4.54e-04  5.14e-07  7.23e-06  7.67e-03  
 18  +4.8587e-01  +4.9726e-01  1.14e-02  2.21e-06  4.19e-04  5.43e-07  6.65e-06  2.14e-01  
 19  +4.8534e-01  +4.9548e-01  1.01e-02  2.17e-06  4.12e-04  4.26e-07  6.65e-06  2.58e-02  
 20  +4.8349e-01  +4.9005e-01  6.56e-03  1.07e-06  2.04e-04  3.57e-07  3.22e-06  5.81e-01  
 21  +4.8306e-01  +4.8851e-01  5.45e-03  8.75e-07  1.66e-04  3.20e-07  2.63e-06  3.40e-01  
 22  +4.8307e-01  +4.8853e-01  5.47e-03  8.75e-07  1.66e-04  3.23e-07  2.63e-06  4.71e-03  
 23  +4.8295e-01  +4.8795e-01  5.00e-03  7.91e-07  1.50e-04  3.40e-07  2.38e-06  4.66e-01  
 24  +4.8252e-01  +4.8654e-01  4.01e-03  6.28e-07  1.19e-04  2.85e-07  1.90e-06  3.90e-01  
 25  +4.8249e-01  +4.8642e-01  3.93e-03  6.14e-07  1.17e-04  2.81e-07  1.86e-06  6.92e-02  
 26  +4.8245e-01  +4.8625e-01  3.79e-03  5.87e-07  1.12e-04  2.89e-07  1.77e-06  3.81e-01  
 27  +4.8096e-01  +4.8150e-01  5.37e-04  8.19e-08  1.56e-05  4.23e-08  2.50e-07  9.90e-01  
 28  +4.8071e-01  +4.8072e-01  1.33e-05  2.02e-09  3.84e-07  9.53e-10  6.23e-09  9.77e-01  
 29  +4.8070e-01  +4.8070e-01  1.33e-07  2.02e-11  3.84e-09  9.53e-12  6.24e-11  9.90e-01  
 30  +4.8070e-01  +4.8070e-01  1.33e-09  2.02e-13  3.84e-11  9.53e-14  6.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 114.1139ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:10 PM: Problem status: optimal
(CVXPY) Sep 20 07:32:10 PM: Optimal value: 4.807e-01
(CVXPY) Sep 20 07:32:10 PM: Compilation took 1.902e-02 seconds
(CVXPY) Sep 20 07:32:10 PM: Solver (including time spent in interface) took 1.212e-01 seconds
Iteration: 2, Objective: 0.4807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:32:10 PM: Your problem has 5030 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:32:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:32:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:32:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:32:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:32:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:32:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:32:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:32:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:32:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:32:10 PM: Finished problem compilation (took 2.402e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5030
  constraints   = 10030
  nnz(P)        = 0
  nnz(A)        = 53313
  cones (total) = 1
    : Nonnegative = 1,  numel = 10030

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0012e+03  5.00e+03  9.85e-01  9.83e+01  1.00e+00  1.00e+00   ------   
  1  +5.9942e-01  +1.0028e+03  1.00e+03  3.65e-01  5.75e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4605e-01  +1.4264e+02  1.42e+02  1.45e-01  2.84e+01  9.89e-03  2.36e-01  7.80e-01  
  3  +5.1087e-01  +3.4035e+01  3.35e+01  1.16e-01  2.23e+01  2.37e-05  2.32e-01  8.90e-02  
  4  +5.0037e-01  +1.7791e+00  1.28e+00  8.62e-03  1.68e+00  4.57e-06  1.68e-01  6.65e-01  
  5  +5.0004e-01  +7.4486e-01  2.45e-01  1.64e-03  3.22e-01  1.81e-06  7.05e-02  6.95e-01  
  6  +5.0002e-01  +6.5174e-01  1.52e-01  1.01e-03  2.00e-01  1.27e-06  3.75e-02  5.46e-01  
  7  +5.0001e-01  +6.4749e-01  1.47e-01  9.83e-04  1.94e-01  1.42e-06  2.59e-02  4.06e-01  
  8  +4.9997e-01  +6.3670e-01  1.37e-01  8.72e-04  1.72e-01  2.55e-06  9.31e-03  7.35e-01  
  9  +4.9965e-01  +6.1340e-01  1.14e-01  3.05e-04  6.05e-02  1.22e-05  1.17e-03  9.90e-01  
 10  +4.9729e-01  +5.9128e-01  9.40e-02  4.67e-05  9.28e-03  7.10e-05  1.55e-04  8.71e-01  
 11  +4.9715e-01  +5.8638e-01  8.92e-02  4.35e-05  8.63e-03  5.55e-05  1.44e-04  2.24e-01  
 12  +4.9750e-01  +5.8564e-01  8.81e-02  4.05e-05  8.05e-03  4.06e-05  1.32e-04  3.48e-01  
 13  +4.9747e-01  +5.8462e-01  8.71e-02  4.00e-05  7.94e-03  3.65e-05  1.30e-04  9.74e-02  
 14  +4.9463e-01  +5.6697e-01  7.23e-02  2.16e-05  4.29e-03  3.88e-05  6.89e-05  5.91e-01  
 15  +4.9274e-01  +5.5728e-01  6.45e-02  1.93e-05  3.84e-03  2.07e-05  6.75e-05  2.72e-01  
 16  +4.9252e-01  +5.5673e-01  6.42e-02  1.87e-05  3.71e-03  1.91e-05  6.44e-05  1.35e-01  
 17  +4.9180e-01  +5.5105e-01  5.92e-02  1.77e-05  3.52e-03  1.08e-05  6.28e-05  3.12e-01  
 18  +4.8785e-01  +5.3259e-01  4.47e-02  1.12e-05  2.22e-03  4.92e-06  3.77e-05  7.41e-01  
 19  +4.8499e-01  +5.1988e-01  3.49e-02  7.98e-06  1.58e-03  2.90e-06  2.66e-05  5.81e-01  
 20  +4.7788e-01  +4.8864e-01  1.08e-02  2.18e-06  4.32e-04  6.22e-07  7.49e-06  8.73e-01  
 21  +4.7788e-01  +4.8884e-01  1.10e-02  2.11e-06  4.19e-04  6.61e-07  7.17e-06  9.23e-02  
 22  +4.7752e-01  +4.8728e-01  9.76e-03  2.01e-06  3.98e-04  5.21e-07  7.00e-06  2.73e-01  
 23  +4.7563e-01  +4.8046e-01  4.83e-03  8.52e-07  1.69e-04  3.23e-07  2.89e-06  7.06e-01  
 24  +4.7558e-01  +4.8024e-01  4.66e-03  8.46e-07  1.68e-04  3.00e-07  2.89e-06  1.66e-02  
 25  +4.7555e-01  +4.8016e-01  4.61e-03  8.41e-07  1.67e-04  2.92e-07  2.87e-06  8.43e-02  
 26  +4.7425e-01  +4.7607e-01  1.82e-03  3.15e-07  6.25e-05  1.01e-07  1.09e-06  8.27e-01  
 27  +4.7364e-01  +4.7375e-01  1.07e-04  1.85e-08  3.67e-06  5.49e-09  6.49e-08  9.43e-01  
 28  +4.7360e-01  +4.7360e-01  1.14e-06  1.99e-10  3.94e-08  5.76e-11  7.02e-10  9.90e-01  
 29  +4.7360e-01  +4.7360e-01  1.14e-08  1.99e-12  3.94e-10  5.76e-13  7.02e-12  9.90e-01  
 30  +4.7360e-01  +4.7360e-01  1.14e-10  1.98e-14  3.94e-12  5.78e-15  7.05e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 134.6565ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:10 PM: Problem status: optimal
(CVXPY) Sep 20 07:32:10 PM: Optimal value: 4.736e-01
(CVXPY) Sep 20 07:32:10 PM: Compilation took 2.402e-02 seconds
(CVXPY) Sep 20 07:32:10 PM: Solver (including time spent in interface) took 1.432e-01 seconds
Iteration: 3, Objective: 0.4736
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:32:10 PM: Your problem has 5040 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:32:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:32:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:32:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:32:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:32:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:32:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:32:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:32:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:32:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:32:10 PM: Finished problem compilation (took 2.703e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5040
  constraints   = 10040
  nnz(P)        = 0
  nnz(A)        = 56929
  cones (total) = 1
    : Nonnegative = 1,  numel = 10040

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0010e+03  5.00e+03  9.85e-01  9.90e+01  1.00e+00  1.00e+00   ------   
  1  +5.9933e-01  +1.0033e+03  1.00e+03  3.66e-01  5.79e+01  3.99e-03  5.04e-01  6.44e-01  
  2  +5.4592e-01  +1.4240e+02  1.42e+02  1.45e-01  2.86e+01  9.92e-03  2.36e-01  7.81e-01  
  3  +5.1085e-01  +3.3982e+01  3.35e+01  1.16e-01  2.25e+01  2.38e-05  2.32e-01  9.00e-02  
  4  +5.0027e-01  +1.4710e+00  9.71e-01  6.56e-03  1.29e+00  4.40e-06  1.53e-01  8.15e-01  
  5  +5.0006e-01  +7.7570e-01  2.76e-01  1.85e-03  3.66e-01  1.87e-06  7.28e-02  5.88e-01  
  6  +5.0005e-01  +7.2274e-01  2.23e-01  1.49e-03  2.96e-01  1.60e-06  5.04e-02  4.22e-01  
  7  +5.0003e-01  +6.8892e-01  1.89e-01  1.26e-03  2.50e-01  1.68e-06  3.12e-02  4.31e-01  
  8  +5.0005e-01  +7.2252e-01  2.22e-01  1.42e-03  2.82e-01  1.61e-06  1.45e-02  9.90e-01  
  9  +4.9946e-01  +6.1847e-01  1.19e-01  1.34e-04  2.68e-02  2.10e-05  4.60e-04  9.75e-01  
 10  +4.9856e-01  +6.0788e-01  1.09e-01  6.65e-05  1.33e-02  3.36e-05  2.21e-04  6.09e-01  
 11  +4.9838e-01  +6.0468e-01  1.06e-01  6.10e-05  1.22e-02  2.67e-05  2.01e-04  2.97e-01  
 12  +4.9761e-01  +5.9957e-01  1.02e-01  4.55e-05  9.10e-03  3.01e-05  1.49e-04  3.19e-01  
 13  +4.9694e-01  +5.9372e-01  9.68e-02  4.49e-05  8.97e-03  2.39e-05  1.48e-04  1.19e-01  
 14  +4.9582e-01  +5.8727e-01  9.14e-02  3.64e-05  7.29e-03  2.34e-05  1.19e-04  2.74e-01  
 15  +4.9472e-01  +5.8182e-01  8.71e-02  3.04e-05  6.08e-03  1.93e-05  9.87e-05  3.53e-01  
 16  +4.9447e-01  +5.8049e-01  8.60e-02  3.01e-05  6.01e-03  1.78e-05  9.76e-05  7.06e-02  
 17  +4.9335e-01  +5.7461e-01  8.13e-02  2.66e-05  5.32e-03  1.43e-05  8.66e-05  2.68e-01  
 18  +4.9198e-01  +5.6728e-01  7.53e-02  2.29e-05  4.58e-03  8.83e-06  7.47e-05  4.52e-01  
 19  +4.8836e-01  +5.5015e-01  6.18e-02  1.63e-05  3.26e-03  5.45e-06  5.41e-05  5.29e-01  
 20  +4.8792e-01  +5.4805e-01  6.01e-02  1.58e-05  3.15e-03  4.61e-06  5.24e-05  2.05e-01  
 21  +4.8228e-01  +5.2311e-01  4.08e-02  9.44e-06  1.89e-03  2.93e-06  3.22e-05  4.54e-01  
 22  +4.7559e-01  +4.9437e-01  1.88e-02  3.87e-06  7.72e-04  1.18e-06  1.39e-05  6.55e-01  
 23  +4.7562e-01  +4.9450e-01  1.89e-02  3.87e-06  7.72e-04  1.19e-06  1.39e-05  2.13e-03  
 24  +4.7560e-01  +4.9433e-01  1.87e-02  3.86e-06  7.70e-04  1.16e-06  1.38e-05  5.76e-02  
 25  +4.7517e-01  +4.9218e-01  1.70e-02  3.45e-06  6.89e-04  1.01e-06  1.24e-05  3.81e-01  
 26  +4.7515e-01  +4.9207e-01  1.69e-02  3.44e-06  6.88e-04  1.00e-06  1.24e-05  1.69e-02  
 27  +4.7528e-01  +4.9248e-01  1.72e-02  3.44e-06  6.87e-04  1.03e-06  1.23e-05  1.34e-01  
 28  +4.7177e-01  +4.7830e-01  6.53e-03  1.27e-06  2.54e-04  3.59e-07  4.73e-06  9.90e-01  
 29  +4.6956e-01  +4.6999e-01  4.23e-04  8.21e-08  1.64e-05  2.03e-08  3.18e-07  9.76e-01  
 30  +4.6940e-01  +4.6941e-01  6.27e-06  1.22e-09  2.43e-07  2.53e-10  4.82e-09  9.87e-01  
 31  +4.6940e-01  +4.6940e-01  6.27e-08  1.22e-11  2.43e-09  2.53e-12  4.82e-11  9.90e-01  
 32  +4.6940e-01  +4.6940e-01  6.27e-10  1.22e-13  2.43e-11  2.53e-14  4.82e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 149.4836ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:11 PM: Problem status: optimal
(CVXPY) Sep 20 07:32:11 PM: Optimal value: 4.694e-01
(CVXPY) Sep 20 07:32:11 PM: Compilation took 2.703e-02 seconds
(CVXPY) Sep 20 07:32:11 PM: Solver (including time spent in interface) took 1.589e-01 seconds
Iteration: 4, Objective: 0.4694
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:32:11 PM: Your problem has 5043 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:32:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:32:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:32:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:32:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:32:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:32:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:32:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:32:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:32:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:32:11 PM: Finished problem compilation (took 2.857e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5043
  constraints   = 10043
  nnz(P)        = 0
  nnz(A)        = 58090
  cones (total) = 1
    : Nonnegative = 1,  numel = 10043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0010e+03  5.00e+03  9.85e-01  9.93e+01  1.00e+00  1.00e+00   ------   
  1  +5.9923e-01  +1.0036e+03  1.00e+03  3.66e-01  5.80e+01  3.99e-03  5.03e-01  6.44e-01  
  2  +5.4586e-01  +1.4224e+02  1.42e+02  1.45e-01  2.86e+01  9.93e-03  2.36e-01  7.81e-01  
  3  +5.1084e-01  +3.3989e+01  3.35e+01  1.16e-01  2.25e+01  2.38e-05  2.32e-01  9.02e-02  
  4  +5.0026e-01  +1.4489e+00  9.49e-01  6.41e-03  1.26e+00  4.39e-06  1.52e-01  8.30e-01  
  5  +5.0006e-01  +7.7876e-01  2.79e-01  1.87e-03  3.71e-01  1.90e-06  7.29e-02  5.79e-01  
  6  +5.0005e-01  +7.3896e-01  2.39e-01  1.60e-03  3.18e-01  1.73e-06  5.15e-02  4.30e-01  
  7  +5.0004e-01  +7.1959e-01  2.20e-01  1.47e-03  2.92e-01  1.85e-06  3.66e-02  3.39e-01  
  8  +5.0005e-01  +7.4590e-01  2.46e-01  1.56e-03  3.11e-01  2.00e-06  1.53e-02  9.90e-01  
  9  +4.9932e-01  +6.3646e-01  1.37e-01  1.40e-04  2.80e-02  2.64e-05  4.98e-04  9.77e-01  
 10  +4.9869e-01  +6.2528e-01  1.27e-01  9.76e-05  1.96e-02  2.97e-05  3.40e-04  3.94e-01  
 11  +4.9847e-01  +6.1956e-01  1.21e-01  8.44e-05  1.69e-02  2.48e-05  2.86e-04  3.48e-01  
 12  +4.9848e-01  +6.1379e-01  1.15e-01  7.27e-05  1.46e-02  1.29e-05  2.40e-04  6.09e-01  
 13  +4.9835e-01  +6.0855e-01  1.10e-01  5.77e-05  1.16e-02  5.87e-06  1.89e-04  8.02e-01  
 14  +4.9795e-01  +6.0654e-01  1.09e-01  4.59e-05  9.21e-03  5.57e-06  1.49e-04  5.05e-01  
 15  +4.9725e-01  +6.0306e-01  1.06e-01  4.22e-05  8.46e-03  5.07e-06  1.37e-04  2.77e-01  
 16  +4.9691e-01  +6.0095e-01  1.04e-01  4.09e-05  8.20e-03  4.54e-06  1.33e-04  2.01e-01  
 17  +4.9386e-01  +5.8443e-01  9.06e-02  2.68e-05  5.37e-03  4.75e-06  8.78e-05  4.37e-01  
 18  +4.8995e-01  +5.6253e-01  7.26e-02  2.04e-05  4.09e-03  2.99e-06  6.83e-05  5.28e-01  
 19  +4.8957e-01  +5.6059e-01  7.10e-02  1.96e-05  3.92e-03  2.85e-06  6.55e-05  2.14e-01  
 20  +4.8741e-01  +5.4984e-01  6.24e-02  1.65e-05  3.30e-03  2.34e-06  5.58e-05  4.60e-01  
 21  +4.8621e-01  +5.4439e-01  5.82e-02  1.49e-05  2.99e-03  2.18e-06  5.08e-05  2.06e-01  
 22  +4.8137e-01  +5.2224e-01  4.09e-02  9.50e-06  1.90e-03  1.53e-06  3.32e-05  7.67e-01  
 23  +4.8019e-01  +5.1724e-01  3.71e-02  8.37e-06  1.68e-03  1.41e-06  2.94e-05  1.54e-01  
 24  +4.8001e-01  +5.1638e-01  3.64e-02  8.26e-06  1.65e-03  1.40e-06  2.92e-05  1.12e-01  
 25  +4.7631e-01  +5.0080e-01  2.45e-02  5.25e-06  1.05e-03  9.46e-07  1.90e-05  4.10e-01  
 26  +4.7081e-01  +4.7771e-01  6.90e-03  1.40e-06  2.80e-04  2.72e-07  5.35e-06  8.34e-01  
 27  +4.6867e-01  +4.6915e-01  4.82e-04  9.66e-08  1.94e-05  1.64e-08  3.86e-07  9.35e-01  
 28  +4.6850e-01  +4.6851e-01  8.78e-06  1.76e-09  3.53e-07  2.70e-10  7.20e-09  9.85e-01  
 29  +4.6850e-01  +4.6850e-01  8.78e-08  1.76e-11  3.53e-09  2.70e-12  7.21e-11  9.90e-01  
 30  +4.6850e-01  +4.6850e-01  8.78e-10  1.76e-13  3.53e-11  2.70e-14  7.21e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 147.3375ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:11 PM: Problem status: optimal
(CVXPY) Sep 20 07:32:11 PM: Optimal value: 4.685e-01
(CVXPY) Sep 20 07:32:11 PM: Compilation took 2.857e-02 seconds
(CVXPY) Sep 20 07:32:11 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 5, Objective: 0.4685
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:32:11 PM: Your problem has 5044 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:32:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:32:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:32:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:32:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:32:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:32:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:32:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:32:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:32:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:32:11 PM: Finished problem compilation (took 2.906e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5044
  constraints   = 10044
  nnz(P)        = 0
  nnz(A)        = 58269
  cones (total) = 1
    : Nonnegative = 1,  numel = 10044

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0010e+03  5.00e+03  9.85e-01  9.93e+01  1.00e+00  1.00e+00   ------   
  1  +5.9924e-01  +1.0037e+03  1.00e+03  3.66e-01  5.81e+01  3.99e-03  5.04e-01  6.44e-01  
  2  +5.4585e-01  +1.4224e+02  1.42e+02  1.45e-01  2.86e+01  9.93e-03  2.36e-01  7.81e-01  
  3  +5.1084e-01  +3.3988e+01  3.35e+01  1.16e-01  2.25e+01  2.38e-05  2.32e-01  9.02e-02  
  4  +5.0025e-01  +1.4092e+00  9.09e-01  6.14e-03  1.21e+00  4.37e-06  1.49e-01  8.54e-01  
  5  +5.0006e-01  +7.7767e-01  2.78e-01  1.86e-03  3.70e-01  1.90e-06  7.24e-02  5.70e-01  
  6  +5.0005e-01  +7.3833e-01  2.38e-01  1.60e-03  3.18e-01  1.74e-06  5.09e-02  4.35e-01  
  7  +5.0004e-01  +7.1997e-01  2.20e-01  1.47e-03  2.93e-01  1.86e-06  3.65e-02  3.30e-01  
  8  +5.0005e-01  +7.4943e-01  2.49e-01  1.59e-03  3.17e-01  1.89e-06  1.60e-02  9.90e-01  
  9  +4.9945e-01  +6.3977e-01  1.40e-01  1.63e-04  3.26e-02  2.22e-05  5.84e-04  9.74e-01  
 10  +4.9873e-01  +6.2720e-01  1.28e-01  9.87e-05  1.98e-02  2.95e-05  3.44e-04  4.64e-01  
 11  +4.9860e-01  +6.2208e-01  1.23e-01  8.84e-05  1.77e-02  2.38e-05  3.00e-04  3.23e-01  
 12  +4.9857e-01  +6.1403e-01  1.15e-01  7.55e-05  1.51e-02  1.06e-05  2.50e-04  6.64e-01  
 13  +4.9841e-01  +6.0879e-01  1.10e-01  6.19e-05  1.24e-02  3.94e-06  2.04e-04  8.56e-01  
 14  +4.9834e-01  +6.0850e-01  1.10e-01  5.88e-05  1.18e-02  3.87e-06  1.93e-04  1.67e-01  
 15  +4.9812e-01  +6.0736e-01  1.09e-01  5.13e-05  1.03e-02  3.98e-06  1.68e-04  2.92e-01  
 16  +4.9781e-01  +6.0631e-01  1.09e-01  3.86e-05  7.75e-03  3.56e-06  1.26e-04  9.62e-01  
 17  +4.9515e-01  +5.8704e-01  9.19e-02  3.12e-05  6.26e-03  2.87e-06  1.02e-04  6.43e-01  
 18  +4.9186e-01  +5.7041e-01  7.86e-02  2.32e-05  4.66e-03  2.63e-06  7.69e-05  4.08e-01  
 19  +4.9056e-01  +5.6419e-01  7.36e-02  2.09e-05  4.19e-03  2.50e-06  6.94e-05  1.63e-01  
 20  +4.8939e-01  +5.5878e-01  6.94e-02  1.89e-05  3.79e-03  2.38e-06  6.32e-05  1.65e-01  
 21  +4.8728e-01  +5.4852e-01  6.12e-02  1.61e-05  3.23e-03  2.11e-06  5.45e-05  4.45e-01  
 22  +4.8657e-01  +5.4538e-01  5.88e-02  1.52e-05  3.04e-03  2.05e-06  5.16e-05  2.02e-01  
 23  +4.8161e-01  +5.2336e-01  4.17e-02  9.78e-06  1.96e-03  1.52e-06  3.41e-05  7.04e-01  
 24  +4.8010e-01  +5.1688e-01  3.68e-02  8.34e-06  1.67e-03  1.35e-06  2.94e-05  1.75e-01  
 25  +4.7981e-01  +5.1548e-01  3.57e-02  8.10e-06  1.62e-03  1.36e-06  2.87e-05  2.20e-01  
 26  +4.7343e-01  +4.8826e-01  1.48e-02  3.08e-06  6.17e-04  5.74e-07  1.14e-05  7.13e-01  
 27  +4.6944e-01  +4.7206e-01  2.63e-03  5.26e-07  1.05e-04  1.25e-07  2.05e-06  9.90e-01  
 28  +4.6862e-01  +4.6894e-01  3.20e-04  6.41e-08  1.28e-05  1.61e-08  2.57e-07  9.90e-01  
 29  +4.6850e-01  +4.6851e-01  3.84e-06  7.68e-10  1.54e-07  1.89e-10  3.09e-09  9.90e-01  
 30  +4.6850e-01  +4.6850e-01  3.86e-08  7.73e-12  1.55e-09  1.90e-12  3.11e-11  9.90e-01  
 31  +4.6850e-01  +4.6850e-01  3.87e-10  7.75e-14  1.55e-11  1.90e-14  3.11e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 157.2ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:11 PM: Problem status: optimal
(CVXPY) Sep 20 07:32:11 PM: Optimal value: 4.685e-01
(CVXPY) Sep 20 07:32:11 PM: Compilation took 2.906e-02 seconds
(CVXPY) Sep 20 07:32:11 PM: Solver (including time spent in interface) took 1.658e-01 seconds
Iteration: 6, Objective: 0.4685
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:32:11 PM: Your problem has 5045 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:32:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:32:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:32:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:32:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:32:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:32:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:32:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:32:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:32:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:32:11 PM: Finished problem compilation (took 3.206e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5045
  constraints   = 10045
  nnz(P)        = 0
  nnz(A)        = 58601
  cones (total) = 1
    : Nonnegative = 1,  numel = 10045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0010e+03  5.00e+03  9.85e-01  9.94e+01  1.00e+00  1.00e+00   ------   
  1  +5.9923e-01  +1.0038e+03  1.00e+03  3.66e-01  5.81e+01  3.99e-03  5.04e-01  6.44e-01  
  2  +5.4585e-01  +1.4224e+02  1.42e+02  1.45e-01  2.86e+01  9.94e-03  2.36e-01  7.82e-01  
  3  +5.1084e-01  +3.3991e+01  3.35e+01  1.16e-01  2.25e+01  2.38e-05  2.32e-01  9.03e-02  
  4  +5.0025e-01  +1.3951e+00  8.95e-01  6.05e-03  1.19e+00  4.36e-06  1.49e-01  8.63e-01  
  5  +5.0006e-01  +7.7308e-01  2.73e-01  1.83e-03  3.64e-01  1.89e-06  7.14e-02  5.73e-01  
  6  +5.0005e-01  +7.3301e-01  2.33e-01  1.56e-03  3.11e-01  1.73e-06  4.80e-02  4.89e-01  
  7  +5.0004e-01  +7.1889e-01  2.19e-01  1.46e-03  2.91e-01  1.89e-06  3.45e-02  3.34e-01  
  8  +5.0002e-01  +7.2402e-01  2.24e-01  1.37e-03  2.74e-01  2.67e-06  1.13e-02  9.90e-01  
  9  +4.9911e-01  +6.7488e-01  1.76e-01  1.60e-04  3.20e-02  3.47e-05  5.67e-04  9.56e-01  
 10  +4.9932e-01  +6.4787e-01  1.49e-01  1.41e-04  2.84e-02  1.49e-05  4.93e-04  4.86e-01  
 11  +4.9832e-01  +6.2669e-01  1.28e-01  7.91e-05  1.59e-02  1.82e-05  2.68e-04  5.65e-01  
 12  +4.9726e-01  +6.0670e-01  1.09e-01  4.95e-05  9.95e-03  1.26e-05  1.62e-04  7.24e-01  
 13  +4.9720e-01  +6.0640e-01  1.09e-01  4.63e-05  9.29e-03  1.17e-05  1.51e-04  2.01e-01  
 14  +4.9672e-01  +6.0381e-01  1.07e-01  4.07e-05  8.17e-03  1.11e-05  1.33e-04  2.53e-01  
 15  +4.9404e-01  +5.8522e-01  9.12e-02  2.98e-05  5.98e-03  6.06e-06  9.81e-05  6.74e-01  
 16  +4.9152e-01  +5.7258e-01  8.11e-02  2.38e-05  4.77e-03  5.27e-06  7.89e-05  2.92e-01  
 17  +4.9071e-01  +5.6849e-01  7.78e-02  2.21e-05  4.44e-03  4.88e-06  7.37e-05  1.34e-01  
 18  +4.8939e-01  +5.6179e-01  7.24e-02  1.97e-05  3.96e-03  4.11e-06  6.60e-05  2.72e-01  
 19  +4.8676e-01  +5.4860e-01  6.18e-02  1.60e-05  3.21e-03  3.02e-06  5.43e-05  4.15e-01  
 20  +4.8565e-01  +5.4326e-01  5.76e-02  1.45e-05  2.91e-03  2.71e-06  4.95e-05  2.14e-01  
 21  +4.8227e-01  +5.2671e-01  4.44e-02  1.05e-05  2.10e-03  1.78e-06  3.64e-05  7.50e-01  
 22  +4.8068e-01  +5.1979e-01  3.91e-02  8.88e-06  1.78e-03  1.58e-06  3.12e-05  2.15e-01  
 23  +4.8041e-01  +5.1853e-01  3.81e-02  8.72e-06  1.75e-03  1.54e-06  3.08e-05  1.39e-01  
 24  +4.7897e-01  +5.1197e-01  3.30e-02  7.27e-06  1.46e-03  1.41e-06  2.59e-05  4.50e-01  
 25  +4.7462e-01  +4.9367e-01  1.90e-02  3.99e-06  7.99e-04  8.03e-07  1.47e-05  5.31e-01  
 26  +4.7274e-01  +4.8545e-01  1.27e-02  2.59e-06  5.19e-04  6.00e-07  9.72e-06  6.78e-01  
 27  +4.6956e-01  +4.7266e-01  3.10e-03  6.23e-07  1.25e-04  1.44e-07  2.44e-06  8.20e-01  
 28  +4.6859e-01  +4.6885e-01  2.59e-04  5.17e-08  1.04e-05  1.27e-08  2.07e-07  9.88e-01  
 29  +4.6850e-01  +4.6850e-01  3.34e-06  6.69e-10  1.34e-07  1.62e-10  2.70e-09  9.90e-01  
 30  +4.6850e-01  +4.6850e-01  3.35e-08  6.71e-12  1.34e-09  1.62e-12  2.70e-11  9.90e-01  
 31  +4.6850e-01  +4.6850e-01  3.35e-10  6.71e-14  1.35e-11  1.62e-14  2.70e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 154.766ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:32:11 PM: Problem status: optimal
(CVXPY) Sep 20 07:32:11 PM: Optimal value: 4.685e-01
(CVXPY) Sep 20 07:32:11 PM: Compilation took 3.206e-02 seconds
(CVXPY) Sep 20 07:32:11 PM: Solver (including time spent in interface) took 1.638e-01 seconds
FULL MODEL:
  Accruacy: 0.5272
  Our objective: 0.054400000000000004

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.005)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.0386)
 OR (x1 = 1 AND x3 = 1 AND x4 = 0)                       <-- (term's our objective: 0.0108)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.627270936965942
Best over terms:
  Our final objective: 0.0386
    Its accruacy: 0.5193
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.0386
  Highest accruacy: 0.5193
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

