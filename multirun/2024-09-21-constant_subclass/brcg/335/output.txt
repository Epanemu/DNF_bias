Command:
python test_script.py -s constant_subclass -d 9 -n 500 --seed 43 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 9.

Computed total variation: 0.6799999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:24 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:24 PM: Finished problem compilation (took 7.512e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 3019
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9977e-01  +2.5086e+02  2.50e+02  9.38e-01  2.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.8023e-01  +5.4649e+01  5.41e+01  4.07e-01  1.58e+01  3.78e-03  5.77e-01  5.86e-01  
  2  +5.2871e-01  +6.3159e+00  5.79e+00  1.29e-01  6.32e+00  1.68e-02  2.64e-01  9.71e-01  
  3  +5.0307e-01  +1.5198e+00  1.02e+00  3.19e-02  1.56e+00  4.00e-05  1.95e-01  7.71e-01  
  4  +5.0032e-01  +6.7018e-01  1.70e-01  5.43e-03  2.74e-01  1.04e-05  4.39e-02  8.01e-01  
  5  +4.9430e-01  +6.9010e-01  1.96e-01  2.01e-03  1.04e-01  6.72e-05  6.42e-03  9.10e-01  
  6  +4.8301e-01  +5.7457e-01  9.16e-02  6.46e-04  3.33e-02  4.42e-05  2.13e-03  7.19e-01  
  7  +4.7491e-01  +5.3020e-01  5.53e-02  2.89e-04  1.49e-02  3.60e-05  1.05e-03  7.57e-01  
  8  +4.6464e-01  +4.7974e-01  1.51e-02  6.40e-05  3.29e-03  1.15e-05  2.69e-04  9.40e-01  
  9  +4.6053e-01  +4.6179e-01  1.26e-03  5.16e-06  2.65e-04  1.00e-06  2.28e-05  9.90e-01  
 10  +4.6010e-01  +4.6012e-01  1.35e-05  5.48e-08  2.82e-06  1.05e-08  2.43e-07  9.90e-01  
 11  +4.6010e-01  +4.6010e-01  1.35e-07  5.48e-10  2.82e-08  1.05e-10  2.43e-09  9.90e-01  
 12  +4.6010e-01  +4.6010e-01  1.35e-09  5.48e-12  2.82e-10  1.06e-12  2.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.0446ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:24 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:24 PM: Optimal value: 4.601e-01
(CVXPY) Sep 20 07:56:24 PM: Compilation took 7.512e-03 seconds
(CVXPY) Sep 20 07:56:24 PM: Solver (including time spent in interface) took 4.516e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4601
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:24 PM: Your problem has 279 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:24 PM: Finished problem compilation (took 4.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 279
  constraints   = 529
  nnz(P)        = 0
  nnz(A)        = 3323
  cones (total) = 1
    : Nonnegative = 1,  numel = 529

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9957e-01  +2.5125e+02  2.51e+02  9.39e-01  2.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.7752e-01  +5.4723e+01  5.41e+01  4.10e-01  1.58e+01  3.78e-03  5.79e-01  5.86e-01  
  2  +5.2634e-01  +6.2223e+00  5.70e+00  1.25e-01  6.16e+00  1.72e-02  2.57e-01  9.90e-01  
  3  +5.0316e-01  +1.3860e+00  8.83e-01  3.03e-02  1.51e+00  9.93e-05  1.35e-01  9.51e-01  
  4  +4.9819e-01  +8.5969e-01  3.62e-01  9.12e-03  4.73e-01  1.14e-04  3.13e-02  8.37e-01  
  5  +4.8371e-01  +7.5774e-01  2.74e-01  2.41e-03  1.28e-01  2.96e-04  7.15e-03  7.81e-01  
  6  +4.6166e-01  +6.0701e-01  1.45e-01  9.18e-04  4.82e-02  1.54e-04  3.04e-03  6.82e-01  
  7  +4.4345e-01  +5.0525e-01  6.18e-02  3.61e-04  1.89e-02  3.34e-05  1.35e-03  8.46e-01  
  8  +4.3692e-01  +4.6955e-01  3.26e-02  1.81e-04  9.44e-03  1.88e-05  7.19e-04  6.07e-01  
  9  +4.3385e-01  +4.5399e-01  2.01e-02  1.03e-04  5.47e-03  1.32e-05  4.27e-04  5.79e-01  
 10  +4.2996e-01  +4.3538e-01  5.42e-03  2.57e-05  1.38e-03  4.12e-06  1.16e-04  9.90e-01  
 11  +4.2844e-01  +4.2857e-01  1.35e-04  6.25e-07  3.35e-05  9.57e-08  2.94e-06  9.77e-01  
 12  +4.2840e-01  +4.2840e-01  1.36e-06  6.25e-09  3.36e-07  9.57e-10  2.94e-08  9.90e-01  
 13  +4.2840e-01  +4.2840e-01  1.36e-08  6.25e-11  3.36e-09  9.58e-12  2.95e-10  9.90e-01  
 14  +4.2840e-01  +4.2840e-01  1.36e-10  6.25e-13  3.36e-11  9.59e-14  2.95e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.4174ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:24 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:24 PM: Optimal value: 4.284e-01
(CVXPY) Sep 20 07:56:24 PM: Compilation took 4.008e-03 seconds
(CVXPY) Sep 20 07:56:24 PM: Solver (including time spent in interface) took 4.504e-03 seconds
Iteration: 2, Objective: 0.4284
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:25 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:25 PM: Finished problem compilation (took 5.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 3707
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +2.5147e+02  2.51e+02  9.39e-01  2.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.7557e-01  +5.4796e+01  5.42e+01  4.13e-01  1.59e+01  3.78e-03  5.80e-01  5.86e-01  
  2  +5.2468e-01  +6.3290e+00  5.80e+00  1.26e-01  6.20e+00  1.76e-02  2.57e-01  9.90e-01  
  3  +5.0527e-01  +1.5122e+00  1.01e+00  3.43e-02  1.77e+00  1.45e-03  1.09e-01  8.44e-01  
  4  +5.0137e-01  +1.3820e+00  8.81e-01  1.69e-02  9.08e-01  2.35e-03  4.64e-02  6.52e-01  
  5  +4.8688e-01  +1.1825e+00  6.96e-01  5.39e-03  2.95e-01  4.21e-03  1.45e-02  7.17e-01  
  6  +4.6866e-01  +8.1318e-01  3.45e-01  2.74e-03  1.47e-01  5.51e-04  8.02e-03  6.40e-01  
  7  +4.5713e-01  +7.2428e-01  2.67e-01  1.72e-03  9.26e-02  4.51e-04  5.11e-03  4.35e-01  
  8  +4.4339e-01  +6.2855e-01  1.85e-01  9.75e-04  5.22e-02  3.14e-04  2.98e-03  5.17e-01  
  9  +4.4105e-01  +6.0596e-01  1.65e-01  9.32e-04  5.00e-02  2.16e-04  2.88e-03  2.68e-01  
 10  +4.2416e-01  +5.1186e-01  8.77e-02  4.08e-04  2.18e-02  1.26e-04  1.30e-03  5.97e-01  
 11  +4.1083e-01  +4.5128e-01  4.05e-02  1.57e-04  8.43e-03  6.08e-05  5.20e-04  6.92e-01  
 12  +4.0564e-01  +4.2866e-01  2.30e-02  8.80e-05  4.72e-03  3.01e-05  2.95e-04  6.87e-01  
 13  +3.9821e-01  +4.0005e-01  1.85e-03  6.80e-06  3.65e-04  2.02e-06  2.34e-05  9.41e-01  
 14  +3.9756e-01  +3.9759e-01  2.76e-05  1.01e-07  5.44e-06  3.01e-08  3.51e-07  9.85e-01  
 15  +3.9755e-01  +3.9755e-01  2.76e-07  1.01e-09  5.44e-08  3.01e-10  3.51e-09  9.90e-01  
 16  +3.9755e-01  +3.9755e-01  2.76e-09  1.01e-11  5.44e-10  3.01e-12  3.51e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.5579ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:25 PM: Optimal value: 3.976e-01
(CVXPY) Sep 20 07:56:25 PM: Compilation took 5.509e-03 seconds
(CVXPY) Sep 20 07:56:25 PM: Solver (including time spent in interface) took 5.004e-03 seconds
Iteration: 3, Objective: 0.3976
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:25 PM: Your problem has 299 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:25 PM: Finished problem compilation (took 5.044e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 299
  constraints   = 549
  nnz(P)        = 0
  nnz(A)        = 3940
  cones (total) = 1
    : Nonnegative = 1,  numel = 549

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9916e-01  +2.5157e+02  2.51e+02  9.40e-01  2.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.7263e-01  +5.4886e+01  5.43e+01  4.16e-01  1.59e+01  3.78e-03  5.81e-01  5.85e-01  
  2  +5.2243e-01  +6.4560e+00  5.93e+00  1.26e-01  6.19e+00  1.80e-02  2.57e-01  9.90e-01  
  3  +5.0632e-01  +1.6147e+00  1.11e+00  3.37e-02  1.77e+00  2.51e-03  9.37e-02  7.62e-01  
  4  +5.0572e-01  +1.6207e+00  1.11e+00  2.70e-02  1.44e+00  3.07e-03  7.12e-02  2.62e-01  
  5  +5.0236e-01  +1.5832e+00  1.08e+00  2.32e-02  1.23e+00  2.13e-03  6.80e-02  2.89e-01  
  6  +4.8523e-01  +1.2942e+00  8.09e-01  5.38e-03  2.97e-01  5.57e-03  1.37e-02  8.20e-01  
  7  +4.6834e-01  +1.0922e+00  6.24e-01  3.62e-03  1.99e-01  3.90e-03  9.54e-03  3.84e-01  
  8  +4.5227e-01  +9.0981e-01  4.58e-01  2.58e-03  1.40e-01  1.84e-03  7.11e-03  4.47e-01  
  9  +4.2076e-01  +6.5755e-01  2.37e-01  1.16e-03  6.25e-02  4.89e-04  3.50e-03  7.21e-01  
 10  +4.0190e-01  +5.4862e-01  1.47e-01  6.95e-04  3.74e-02  1.55e-04  2.20e-03  8.65e-01  
 11  +3.8095e-01  +4.4409e-01  6.31e-02  2.82e-04  1.52e-02  6.26e-05  9.47e-04  6.00e-01  
 12  +3.7031e-01  +3.9664e-01  2.63e-02  1.13e-04  6.18e-03  2.62e-05  3.96e-04  6.26e-01  
 13  +3.6285e-01  +3.6572e-01  2.87e-03  1.19e-05  6.57e-04  2.88e-06  4.38e-05  9.28e-01  
 14  +3.6186e-01  +3.6189e-01  3.21e-05  1.33e-07  7.34e-06  3.19e-08  4.93e-07  9.89e-01  
 15  +3.6185e-01  +3.6185e-01  3.21e-07  1.33e-09  7.34e-08  3.19e-10  4.93e-09  9.90e-01  
 16  +3.6185e-01  +3.6185e-01  3.21e-09  1.33e-11  7.34e-10  3.20e-12  4.93e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.0289ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:25 PM: Optimal value: 3.619e-01
(CVXPY) Sep 20 07:56:25 PM: Compilation took 5.044e-03 seconds
(CVXPY) Sep 20 07:56:25 PM: Solver (including time spent in interface) took 6.009e-03 seconds
Iteration: 4, Objective: 0.3619
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:25 PM: Your problem has 309 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:25 PM: Finished problem compilation (took 5.513e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 309
  constraints   = 559
  nnz(P)        = 0
  nnz(A)        = 4065
  cones (total) = 1
    : Nonnegative = 1,  numel = 559

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9905e-01  +2.5157e+02  2.51e+02  9.40e-01  2.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.6963e-01  +5.4912e+01  5.43e+01  4.17e-01  1.57e+01  3.79e-03  5.81e-01  5.85e-01  
  2  +5.2068e-01  +6.5683e+00  6.05e+00  1.26e-01  6.11e+00  1.83e-02  2.55e-01  9.90e-01  
  3  +5.0608e-01  +1.6759e+00  1.17e+00  3.21e-02  1.70e+00  3.22e-03  8.50e-02  7.31e-01  
  4  +5.0574e-01  +1.7260e+00  1.22e+00  2.79e-02  1.49e+00  3.74e-03  7.12e-02  2.14e-01  
  5  +5.0175e-01  +1.8779e+00  1.38e+00  2.36e-02  1.26e+00  3.11e-03  6.19e-02  5.01e-01  
  6  +4.7944e-01  +1.4733e+00  9.94e-01  5.67e-03  3.13e-01  7.03e-03  1.40e-02  7.81e-01  
  7  +4.5718e-01  +1.2190e+00  7.62e-01  3.85e-03  2.11e-01  4.84e-03  9.91e-03  3.69e-01  
  8  +4.2358e-01  +8.0578e-01  3.82e-01  2.16e-03  1.16e-01  3.92e-05  6.18e-03  7.10e-01  
  9  +3.8698e-01  +5.7577e-01  1.89e-01  9.41e-04  5.03e-02  3.86e-05  2.93e-03  5.84e-01  
 10  +3.6272e-01  +4.4983e-01  8.71e-02  4.11e-04  2.20e-02  4.49e-05  1.38e-03  7.06e-01  
 11  +3.4687e-01  +3.7433e-01  2.75e-02  1.26e-04  6.70e-03  1.57e-05  4.52e-04  7.22e-01  
 12  +3.3960e-01  +3.4145e-01  1.85e-03  8.40e-06  4.47e-04  1.21e-06  3.17e-05  9.51e-01  
 13  +3.3905e-01  +3.3919e-01  1.47e-04  6.63e-07  3.52e-05  9.84e-08  2.54e-06  9.30e-01  
 14  +3.3900e-01  +3.3900e-01  1.67e-06  7.57e-09  4.02e-07  1.12e-09  2.91e-08  9.89e-01  
 15  +3.3900e-01  +3.3900e-01  1.67e-08  7.57e-11  4.02e-09  1.12e-11  2.91e-10  9.90e-01  
 16  +3.3900e-01  +3.3900e-01  1.67e-10  7.57e-13  4.02e-11  1.12e-13  2.91e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.0807ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:25 PM: Optimal value: 3.390e-01
(CVXPY) Sep 20 07:56:25 PM: Compilation took 5.513e-03 seconds
(CVXPY) Sep 20 07:56:25 PM: Solver (including time spent in interface) took 7.004e-03 seconds
Iteration: 5, Objective: 0.3390
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:25 PM: Your problem has 319 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:25 PM: Finished problem compilation (took 5.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 319
  constraints   = 569
  nnz(P)        = 0
  nnz(A)        = 4181
  cones (total) = 1
    : Nonnegative = 1,  numel = 569

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9896e-01  +2.5170e+02  2.51e+02  9.41e-01  2.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.6544e-01  +5.4908e+01  5.43e+01  4.18e-01  1.54e+01  3.80e-03  5.79e-01  5.86e-01  
  2  +5.1829e-01  +6.7023e+00  6.18e+00  1.24e-01  5.96e+00  1.86e-02  2.50e-01  9.90e-01  
  3  +5.0406e-01  +1.6153e+00  1.11e+00  2.67e-02  1.42e+00  3.81e-03  6.85e-02  7.56e-01  
  4  +4.8941e-01  +1.8549e+00  1.37e+00  1.17e-02  6.42e-01  8.31e-03  2.81e-02  7.71e-01  
  5  +4.5860e-01  +1.3736e+00  9.15e-01  5.30e-03  2.89e-01  6.52e-03  1.33e-02  6.05e-01  
  6  +4.3231e-01  +1.0737e+00  6.41e-01  3.45e-03  1.86e-01  2.93e-03  9.07e-03  4.97e-01  
  7  +3.7845e-01  +6.3351e-01  2.55e-01  1.30e-03  6.86e-02  1.15e-04  3.88e-03  8.28e-01  
  8  +3.4280e-01  +4.4439e-01  1.02e-01  4.91e-04  2.57e-02  5.56e-05  1.62e-03  6.81e-01  
  9  +3.2504e-01  +3.5616e-01  3.11e-02  1.46e-04  7.64e-03  1.98e-05  5.14e-04  7.42e-01  
 10  +3.2209e-01  +3.4391e-01  2.18e-02  9.97e-05  5.29e-03  1.59e-05  3.55e-04  4.69e-01  
 11  +3.1679e-01  +3.2137e-01  4.59e-03  2.06e-05  1.10e-03  3.34e-06  7.67e-05  8.04e-01  
 12  +3.1537e-01  +3.1558e-01  2.08e-04  9.28e-07  4.95e-05  1.43e-07  3.56e-06  9.58e-01  
 13  +3.1530e-01  +3.1530e-01  2.48e-06  1.10e-08  5.88e-07  1.67e-09  4.25e-08  9.88e-01  
 14  +3.1530e-01  +3.1530e-01  2.48e-08  1.10e-10  5.89e-09  1.68e-11  4.26e-10  9.90e-01  
 15  +3.1530e-01  +3.1530e-01  2.48e-10  1.10e-12  5.89e-11  1.68e-13  4.26e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.8081ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:25 PM: Optimal value: 3.153e-01
(CVXPY) Sep 20 07:56:25 PM: Compilation took 5.001e-03 seconds
(CVXPY) Sep 20 07:56:25 PM: Solver (including time spent in interface) took 6.060e-03 seconds
Iteration: 6, Objective: 0.3153
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:25 PM: Your problem has 329 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:25 PM: Finished problem compilation (took 4.503e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 329
  constraints   = 579
  nnz(P)        = 0
  nnz(A)        = 4297
  cones (total) = 1
    : Nonnegative = 1,  numel = 579

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9893e-01  +2.5177e+02  2.51e+02  9.41e-01  2.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.6304e-01  +5.4928e+01  5.44e+01  4.19e-01  1.52e+01  3.81e-03  5.78e-01  5.87e-01  
  2  +5.1678e-01  +6.7768e+00  6.26e+00  1.23e-01  5.85e+00  1.88e-02  2.48e-01  9.90e-01  
  3  +5.0269e-01  +1.6111e+00  1.11e+00  2.48e-02  1.32e+00  4.18e-03  6.27e-02  7.71e-01  
  4  +4.8663e-01  +1.7068e+00  1.22e+00  1.08e-02  5.90e-01  8.62e-03  2.60e-02  7.02e-01  
  5  +4.6045e-01  +1.4015e+00  9.41e-01  5.82e-03  3.17e-01  7.86e-03  1.44e-02  5.09e-01  
  6  +4.3426e-01  +1.1649e+00  7.31e-01  3.87e-03  2.08e-01  4.80e-03  9.97e-03  4.71e-01  
  7  +3.8826e-01  +7.7403e-01  3.86e-01  2.02e-03  1.06e-01  5.26e-04  5.78e-03  7.16e-01  
  8  +3.3662e-01  +4.5953e-01  1.23e-01  5.95e-04  3.07e-02  1.17e-04  1.94e-03  7.15e-01  
  9  +3.1740e-01  +3.7669e-01  5.93e-02  2.70e-04  1.41e-02  6.00e-05  9.47e-04  7.10e-01  
 10  +3.0818e-01  +3.3555e-01  2.74e-02  1.23e-04  6.41e-03  2.79e-05  4.51e-04  6.54e-01  
 11  +3.0090e-01  +3.0501e-01  4.11e-03  1.80e-05  9.47e-04  4.04e-06  7.03e-05  8.87e-01  
 12  +2.9952e-01  +2.9969e-01  1.79e-04  7.77e-07  4.09e-05  1.58e-07  3.11e-06  9.68e-01  
 13  +2.9945e-01  +2.9945e-01  1.90e-06  8.26e-09  4.34e-07  1.65e-09  3.33e-08  9.89e-01  
 14  +2.9945e-01  +2.9945e-01  1.90e-08  8.26e-11  4.34e-09  1.65e-11  3.33e-10  9.90e-01  
 15  +2.9945e-01  +2.9945e-01  1.90e-10  8.26e-13  4.34e-11  1.65e-13  3.33e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.3171ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:25 PM: Optimal value: 2.995e-01
(CVXPY) Sep 20 07:56:25 PM: Compilation took 4.503e-03 seconds
(CVXPY) Sep 20 07:56:25 PM: Solver (including time spent in interface) took 6.508e-03 seconds
Iteration: 7, Objective: 0.2995
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:25 PM: Your problem has 339 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:25 PM: Finished problem compilation (took 4.041e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 339
  constraints   = 589
  nnz(P)        = 0
  nnz(A)        = 4386
  cones (total) = 1
    : Nonnegative = 1,  numel = 589

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9882e-01  +2.5181e+02  2.51e+02  9.42e-01  2.48e+01  1.00e+00  1.01e+00   ------   
  1  +5.5990e-01  +5.4936e+01  5.44e+01  4.20e-01  1.50e+01  3.82e-03  5.78e-01  5.87e-01  
  2  +5.1447e-01  +6.8995e+00  6.39e+00  1.22e-01  5.77e+00  1.92e-02  2.45e-01  9.90e-01  
  3  +5.0063e-01  +1.7580e+00  1.26e+00  2.54e-02  1.35e+00  5.17e-03  6.26e-02  7.61e-01  
  4  +4.7441e-01  +1.6746e+00  1.20e+00  8.81e-03  4.82e-01  1.13e-02  2.10e-02  7.20e-01  
  5  +4.4603e-01  +1.4100e+00  9.64e-01  5.44e-03  2.95e-01  9.56e-03  1.34e-02  4.31e-01  
  6  +4.1136e-01  +1.0595e+00  6.48e-01  3.46e-03  1.84e-01  3.61e-03  9.07e-03  5.25e-01  
  7  +3.5382e-01  +6.1174e-01  2.58e-01  1.30e-03  6.75e-02  6.25e-04  3.84e-03  7.02e-01  
  8  +3.2063e-01  +4.3906e-01  1.18e-01  5.65e-04  2.94e-02  2.50e-04  1.83e-03  6.18e-01  
  9  +3.0648e-01  +3.8109e-01  7.46e-02  3.37e-04  1.78e-02  1.38e-04  1.15e-03  5.18e-01  
 10  +2.9150e-01  +3.1673e-01  2.52e-02  1.10e-04  5.84e-03  4.33e-05  4.03e-04  6.75e-01  
 11  +2.8423e-01  +2.8579e-01  1.56e-03  6.71e-06  3.55e-04  2.22e-06  2.59e-05  9.43e-01  
 12  +2.8376e-01  +2.8394e-01  1.77e-04  7.63e-07  4.01e-05  2.18e-07  3.03e-06  9.18e-01  
 13  +2.8370e-01  +2.8370e-01  2.13e-06  9.17e-09  4.82e-07  2.59e-09  3.65e-08  9.88e-01  
 14  +2.8370e-01  +2.8370e-01  2.13e-08  9.17e-11  4.82e-09  2.59e-11  3.66e-10  9.90e-01  
 15  +2.8370e-01  +2.8370e-01  2.13e-10  9.18e-13  4.82e-11  2.60e-13  3.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.3371ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:25 PM: Optimal value: 2.837e-01
(CVXPY) Sep 20 07:56:25 PM: Compilation took 4.041e-03 seconds
(CVXPY) Sep 20 07:56:25 PM: Solver (including time spent in interface) took 7.000e-03 seconds
Iteration: 8, Objective: 0.2837
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:25 PM: Your problem has 349 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:25 PM: Finished problem compilation (took 4.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 349
  constraints   = 599
  nnz(P)        = 0
  nnz(A)        = 4458
  cones (total) = 1
    : Nonnegative = 1,  numel = 599

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9871e-01  +2.5181e+02  2.51e+02  9.42e-01  2.46e+01  1.00e+00  1.01e+00   ------   
  1  +5.5682e-01  +5.5020e+01  5.45e+01  4.22e-01  1.49e+01  3.82e-03  5.78e-01  5.86e-01  
  2  +5.1203e-01  +7.0218e+00  6.51e+00  1.22e-01  5.71e+00  1.95e-02  2.44e-01  9.90e-01  
  3  +4.9767e-01  +1.8173e+00  1.32e+00  2.43e-02  1.29e+00  5.91e-03  5.92e-02  7.77e-01  
  4  +4.6977e-01  +1.6389e+00  1.17e+00  9.12e-03  4.95e-01  1.09e-02  2.18e-02  6.64e-01  
  5  +4.3804e-01  +1.3713e+00  9.33e-01  5.39e-03  2.91e-01  9.67e-03  1.33e-02  4.52e-01  
  6  +4.0528e-01  +1.0685e+00  6.63e-01  3.59e-03  1.90e-01  4.44e-03  9.35e-03  4.77e-01  
  7  +3.4220e-01  +5.7197e-01  2.30e-01  1.18e-03  6.05e-02  3.09e-04  3.52e-03  7.91e-01  
  8  +3.1002e-01  +4.1319e-01  1.03e-01  4.96e-04  2.58e-02  1.31e-04  1.61e-03  6.99e-01  
  9  +2.9570e-01  +3.5201e-01  5.63e-02  2.61e-04  1.37e-02  6.41e-05  8.95e-04  6.53e-01  
 10  +2.8321e-01  +2.9984e-01  1.66e-02  7.33e-05  3.87e-03  1.83e-05  2.69e-04  7.38e-01  
 11  +2.7854e-01  +2.8051e-01  1.97e-03  8.57e-06  4.52e-04  1.98e-06  3.29e-05  8.91e-01  
 12  +2.7799e-01  +2.7837e-01  3.83e-04  1.67e-06  8.73e-05  3.68e-07  6.66e-06  8.41e-01  
 13  +2.7786e-01  +2.7787e-01  1.44e-05  6.26e-08  3.28e-06  1.35e-08  2.54e-07  9.79e-01  
 14  +2.7785e-01  +2.7785e-01  1.46e-07  6.33e-10  3.31e-08  1.36e-10  2.57e-09  9.90e-01  
 15  +2.7785e-01  +2.7785e-01  1.46e-09  6.33e-12  3.31e-10  1.36e-12  2.57e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.7012ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:25 PM: Optimal value: 2.779e-01
(CVXPY) Sep 20 07:56:25 PM: Compilation took 4.998e-03 seconds
(CVXPY) Sep 20 07:56:25 PM: Solver (including time spent in interface) took 7.509e-03 seconds
Iteration: 9, Objective: 0.2779
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:25 PM: Your problem has 359 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:25 PM: Finished problem compilation (took 5.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 359
  constraints   = 609
  nnz(P)        = 0
  nnz(A)        = 4537
  cones (total) = 1
    : Nonnegative = 1,  numel = 609

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9855e-01  +2.5179e+02  2.51e+02  9.43e-01  2.45e+01  1.00e+00  1.02e+00   ------   
  1  +5.5323e-01  +5.5058e+01  5.45e+01  4.23e-01  1.47e+01  3.82e-03  5.78e-01  5.86e-01  
  2  +5.0883e-01  +7.1697e+00  6.66e+00  1.21e-01  5.64e+00  2.00e-02  2.43e-01  9.90e-01  
  3  +4.9327e-01  +1.8922e+00  1.40e+00  2.31e-02  1.23e+00  6.83e-03  5.57e-02  7.90e-01  
  4  +4.5158e-01  +1.5354e+00  1.08e+00  7.26e-03  3.93e-01  1.22e-02  1.74e-02  7.12e-01  
  5  +4.1952e-01  +1.3077e+00  8.88e-01  4.75e-03  2.54e-01  1.02e-02  1.18e-02  3.96e-01  
  6  +3.6342e-01  +7.8943e-01  4.26e-01  2.36e-03  1.22e-01  8.75e-05  6.64e-03  7.65e-01  
  7  +3.1261e-01  +4.5087e-01  1.38e-01  7.21e-04  3.67e-02  4.33e-05  2.29e-03  7.15e-01  
  8  +3.0454e-01  +4.1963e-01  1.15e-01  5.68e-04  2.93e-02  4.83e-05  1.84e-03  3.13e-01  
  9  +2.8287e-01  +3.2376e-01  4.09e-02  1.88e-04  9.84e-03  2.85e-05  6.55e-04  8.06e-01  
 10  +2.7465e-01  +2.8848e-01  1.38e-02  6.18e-05  3.23e-03  9.88e-06  2.29e-04  6.85e-01  
 11  +2.7078e-01  +2.7292e-01  2.15e-03  9.30e-06  4.83e-04  1.66e-06  3.64e-05  8.87e-01  
 12  +2.7003e-01  +2.7009e-01  6.75e-05  2.92e-07  1.51e-05  4.77e-08  1.18e-06  9.81e-01  
 13  +2.7000e-01  +2.7000e-01  6.89e-07  2.98e-09  1.55e-07  4.86e-10  1.21e-08  9.90e-01  
 14  +2.7000e-01  +2.7000e-01  6.90e-09  2.99e-11  1.55e-09  4.87e-12  1.21e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.8565ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:25 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:25 PM: Optimal value: 2.700e-01
(CVXPY) Sep 20 07:56:25 PM: Compilation took 5.002e-03 seconds
(CVXPY) Sep 20 07:56:25 PM: Solver (including time spent in interface) took 7.512e-03 seconds
Iteration: 10, Objective: 0.2700
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:26 PM: Your problem has 369 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:26 PM: Finished problem compilation (took 4.529e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 369
  constraints   = 619
  nnz(P)        = 0
  nnz(A)        = 4614
  cones (total) = 1
    : Nonnegative = 1,  numel = 619

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9839e-01  +2.5181e+02  2.51e+02  9.43e-01  2.43e+01  1.00e+00  1.02e+00   ------   
  1  +5.4964e-01  +5.5231e+01  5.47e+01  4.26e-01  1.46e+01  3.82e-03  5.80e-01  5.84e-01  
  2  +5.0624e-01  +7.3097e+00  6.80e+00  1.21e-01  5.61e+00  2.05e-02  2.44e-01  9.90e-01  
  3  +4.8977e-01  +1.9258e+00  1.44e+00  2.23e-02  1.18e+00  7.38e-03  5.35e-02  7.98e-01  
  4  +4.4434e-01  +1.5230e+00  1.08e+00  7.27e-03  3.90e-01  1.20e-02  1.75e-02  6.96e-01  
  5  +4.1178e-01  +1.2941e+00  8.82e-01  4.80e-03  2.55e-01  1.02e-02  1.20e-02  3.66e-01  
  6  +3.5167e-01  +7.5088e-01  3.99e-01  2.26e-03  1.15e-01  1.65e-04  6.46e-03  7.53e-01  
  7  +3.0415e-01  +4.5084e-01  1.47e-01  7.87e-04  3.96e-02  6.31e-05  2.56e-03  6.62e-01  
  8  +2.9595e-01  +4.1671e-01  1.21e-01  6.16e-04  3.14e-02  6.23e-05  2.05e-03  3.11e-01  
  9  +2.7509e-01  +3.1874e-01  4.37e-02  2.12e-04  1.09e-02  3.49e-05  7.62e-04  8.60e-01  
 10  +2.6807e-01  +2.8673e-01  1.87e-02  8.84e-05  4.58e-03  1.54e-05  3.30e-04  6.16e-01  
 11  +2.6412e-01  +2.6970e-01  5.59e-03  2.58e-05  1.33e-03  4.65e-06  1.00e-04  7.72e-01  
 12  +2.6262e-01  +2.6381e-01  1.19e-03  5.32e-06  2.75e-04  1.01e-06  2.15e-05  8.51e-01  
 13  +2.6221e-01  +2.6224e-01  2.79e-05  1.25e-07  6.44e-06  2.14e-08  5.14e-07  9.78e-01  
 14  +2.6220e-01  +2.6220e-01  2.80e-07  1.25e-09  6.45e-08  2.14e-10  5.15e-09  9.90e-01  
 15  +2.6220e-01  +2.6220e-01  2.80e-09  1.25e-11  6.45e-10  2.14e-12  5.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.99ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:26 PM: Optimal value: 2.622e-01
(CVXPY) Sep 20 07:56:26 PM: Compilation took 4.529e-03 seconds
(CVXPY) Sep 20 07:56:26 PM: Solver (including time spent in interface) took 9.190e-03 seconds
Iteration: 11, Objective: 0.2622
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:26 PM: Your problem has 379 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:26 PM: Finished problem compilation (took 4.528e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 379
  constraints   = 629
  nnz(P)        = 0
  nnz(A)        = 4670
  cones (total) = 1
    : Nonnegative = 1,  numel = 629

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9836e-01  +2.5178e+02  2.51e+02  9.44e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.4690e-01  +5.5295e+01  5.47e+01  4.26e-01  1.44e+01  3.84e-03  5.79e-01  5.84e-01  
  2  +5.0413e-01  +7.3709e+00  6.87e+00  1.20e-01  5.52e+00  2.07e-02  2.42e-01  9.90e-01  
  3  +4.8607e-01  +1.9468e+00  1.46e+00  2.14e-02  1.13e+00  7.87e-03  5.11e-02  8.08e-01  
  4  +4.3616e-01  +1.4873e+00  1.05e+00  7.01e-03  3.73e-01  1.15e-02  1.70e-02  7.00e-01  
  5  +3.9879e-01  +1.2290e+00  8.30e-01  4.47e-03  2.35e-01  8.94e-03  1.12e-02  4.12e-01  
  6  +3.4043e-01  +7.1390e-01  3.73e-01  2.07e-03  1.05e-01  1.32e-03  5.92e-03  6.58e-01  
  7  +3.0083e-01  +4.7327e-01  1.72e-01  9.18e-04  4.61e-02  4.82e-04  2.91e-03  6.03e-01  
  8  +2.8789e-01  +4.1242e-01  1.25e-01  6.24e-04  3.18e-02  3.31e-04  2.04e-03  3.88e-01  
  9  +2.6767e-01  +3.1482e-01  4.71e-02  2.23e-04  1.15e-02  6.97e-05  7.76e-04  9.05e-01  
 10  +2.5721e-01  +2.6884e-01  1.16e-02  5.38e-05  2.78e-03  1.42e-05  1.97e-04  8.34e-01  
 11  +2.5410e-01  +2.5590e-01  1.80e-03  8.32e-06  4.28e-04  2.03e-06  3.15e-05  8.52e-01  
 12  +2.5358e-01  +2.5380e-01  2.21e-04  1.02e-06  5.22e-05  2.23e-07  3.98e-06  9.26e-01  
 13  +2.5350e-01  +2.5351e-01  3.91e-06  1.80e-08  9.21e-07  3.90e-09  7.07e-08  9.83e-01  
 14  +2.5350e-01  +2.5350e-01  3.91e-08  1.80e-10  9.21e-09  3.90e-11  7.07e-10  9.90e-01  
 15  +2.5350e-01  +2.5350e-01  3.91e-10  1.80e-12  9.21e-11  3.90e-13  7.08e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.6164ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:26 PM: Optimal value: 2.535e-01
(CVXPY) Sep 20 07:56:26 PM: Compilation took 4.528e-03 seconds
(CVXPY) Sep 20 07:56:26 PM: Solver (including time spent in interface) took 8.009e-03 seconds
Iteration: 12, Objective: 0.2535
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:26 PM: Your problem has 389 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:26 PM: Finished problem compilation (took 5.476e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 389
  constraints   = 639
  nnz(P)        = 0
  nnz(A)        = 4736
  cones (total) = 1
    : Nonnegative = 1,  numel = 639

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9823e-01  +2.5197e+02  2.51e+02  9.44e-01  2.40e+01  1.00e+00  1.02e+00   ------   
  1  +5.4283e-01  +5.5390e+01  5.48e+01  4.27e-01  1.43e+01  3.84e-03  5.79e-01  5.84e-01  
  2  +5.0034e-01  +7.5234e+00  7.02e+00  1.19e-01  5.43e+00  2.11e-02  2.40e-01  9.90e-01  
  3  +4.7926e-01  +1.9907e+00  1.51e+00  2.01e-02  1.06e+00  8.68e-03  4.81e-02  8.18e-01  
  4  +4.2246e-01  +1.5076e+00  1.09e+00  6.99e-03  3.68e-01  1.12e-02  1.70e-02  7.03e-01  
  5  +3.8982e-01  +1.2313e+00  8.41e-01  4.90e-03  2.54e-01  6.78e-03  1.25e-02  3.98e-01  
  6  +3.2230e-01  +6.3106e-01  3.09e-01  1.74e-03  8.70e-02  5.13e-04  5.09e-03  7.79e-01  
  7  +2.9312e-01  +4.6937e-01  1.76e-01  9.61e-04  4.81e-02  2.68e-04  3.03e-03  5.33e-01  
  8  +2.7895e-01  +3.9912e-01  1.20e-01  6.16e-04  3.13e-02  1.82e-04  2.03e-03  4.12e-01  
  9  +2.6063e-01  +3.0807e-01  4.74e-02  2.31e-04  1.19e-02  5.97e-05  8.07e-04  8.08e-01  
 10  +2.5468e-01  +2.8175e-01  2.71e-02  1.29e-04  6.65e-03  3.30e-05  4.64e-04  4.84e-01  
 11  +2.4765e-01  +2.5074e-01  3.09e-03  1.46e-05  7.49e-04  2.97e-06  5.49e-05  9.45e-01  
 12  +2.4672e-01  +2.4706e-01  3.37e-04  1.59e-06  8.10e-05  2.98e-07  6.20e-06  9.28e-01  
 13  +2.4660e-01  +2.4662e-01  1.15e-05  5.43e-08  2.76e-06  1.01e-08  2.14e-07  9.73e-01  
 14  +2.4660e-01  +2.4660e-01  1.16e-07  5.44e-10  2.77e-08  1.01e-10  2.15e-09  9.90e-01  
 15  +2.4660e-01  +2.4660e-01  1.16e-09  5.44e-12  2.77e-10  1.02e-12  2.15e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.2296ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:26 PM: Optimal value: 2.466e-01
(CVXPY) Sep 20 07:56:26 PM: Compilation took 5.476e-03 seconds
(CVXPY) Sep 20 07:56:26 PM: Solver (including time spent in interface) took 8.526e-03 seconds
Iteration: 13, Objective: 0.2466
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:26 PM: Your problem has 399 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:26 PM: Finished problem compilation (took 5.011e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 399
  constraints   = 649
  nnz(P)        = 0
  nnz(A)        = 4813
  cones (total) = 1
    : Nonnegative = 1,  numel = 649

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9805e-01  +2.5205e+02  2.52e+02  9.45e-01  2.38e+01  1.00e+00  1.02e+00   ------   
  1  +5.3774e-01  +5.5523e+01  5.50e+01  4.28e-01  1.41e+01  3.85e-03  5.79e-01  5.83e-01  
  2  +4.9605e-01  +7.7118e+00  7.22e+00  1.18e-01  5.36e+00  2.16e-02  2.38e-01  9.90e-01  
  3  +4.7059e-01  +1.9453e+00  1.47e+00  1.79e-02  9.39e-01  9.35e-03  4.25e-02  8.40e-01  
  4  +4.2129e-01  +1.6449e+00  1.22e+00  8.50e-03  4.45e-01  1.09e-02  2.06e-02  5.95e-01  
  5  +3.6480e-01  +1.0862e+00  7.21e-01  4.25e-03  2.17e-01  4.16e-03  1.11e-02  6.20e-01  
  6  +3.0932e-01  +6.1057e-01  3.01e-01  1.75e-03  8.71e-02  1.22e-03  5.16e-03  5.88e-01  
  7  +2.7661e-01  +4.2099e-01  1.44e-01  8.01e-04  4.00e-02  4.97e-04  2.56e-03  6.19e-01  
  8  +2.6934e-01  +3.8862e-01  1.19e-01  6.27e-04  3.17e-02  3.96e-04  2.05e-03  2.68e-01  
  9  +2.5315e-01  +3.1046e-01  5.73e-02  2.85e-04  1.46e-02  1.44e-04  9.87e-04  6.82e-01  
 10  +2.4295e-01  +2.6298e-01  2.00e-02  9.72e-05  5.00e-03  4.57e-05  3.55e-04  6.78e-01  
 11  +2.3799e-01  +2.4084e-01  2.84e-03  1.34e-05  6.89e-04  2.66e-06  5.21e-05  9.90e-01  
 12  +2.3699e-01  +2.3722e-01  2.30e-04  1.09e-06  5.55e-05  1.95e-07  4.36e-06  9.23e-01  
 13  +2.3690e-01  +2.3690e-01  2.48e-06  1.17e-08  5.97e-07  2.05e-09  4.73e-08  9.90e-01  
 14  +2.3690e-01  +2.3690e-01  2.48e-08  1.17e-10  5.98e-09  2.06e-11  4.73e-10  9.90e-01  
 15  +2.3690e-01  +2.3690e-01  2.48e-10  1.17e-12  5.98e-11  2.06e-13  4.73e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.6155ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:26 PM: Optimal value: 2.369e-01
(CVXPY) Sep 20 07:56:26 PM: Compilation took 5.011e-03 seconds
(CVXPY) Sep 20 07:56:26 PM: Solver (including time spent in interface) took 9.520e-03 seconds
Iteration: 14, Objective: 0.2369
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:26 PM: Your problem has 409 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:26 PM: Finished problem compilation (took 5.521e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 409
  constraints   = 659
  nnz(P)        = 0
  nnz(A)        = 4874
  cones (total) = 1
    : Nonnegative = 1,  numel = 659

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9798e-01  +2.5205e+02  2.52e+02  9.45e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +5.3438e-01  +5.5663e+01  5.51e+01  4.29e-01  1.40e+01  3.86e-03  5.79e-01  5.82e-01  
  2  +4.9303e-01  +7.7982e+00  7.31e+00  1.17e-01  5.27e+00  2.20e-02  2.38e-01  9.90e-01  
  3  +4.6486e-01  +1.8649e+00  1.40e+00  1.63e-02  8.50e-01  9.31e-03  3.90e-02  8.54e-01  
  4  +4.1949e-01  +1.6695e+00  1.25e+00  8.92e-03  4.62e-01  1.05e-02  2.18e-02  5.45e-01  
  5  +3.7169e-01  +1.2173e+00  8.46e-01  5.10e-03  2.59e-01  5.48e-03  1.32e-02  5.33e-01  
  6  +3.1599e-01  +7.0568e-01  3.90e-01  2.27e-03  1.12e-01  1.70e-03  6.52e-03  5.84e-01  
  7  +2.7796e-01  +4.6544e-01  1.87e-01  1.06e-03  5.17e-02  6.63e-04  3.35e-03  5.86e-01  
  8  +2.6189e-01  +3.8251e-01  1.21e-01  6.44e-04  3.22e-02  3.80e-04  2.14e-03  4.86e-01  
  9  +2.4732e-01  +3.0730e-01  6.00e-02  3.09e-04  1.55e-02  1.63e-04  1.08e-03  5.92e-01  
 10  +2.3768e-01  +2.6023e-01  2.26e-02  1.13e-04  5.69e-03  5.66e-05  4.12e-04  6.69e-01  
 11  +2.3279e-01  +2.3860e-01  5.80e-03  2.83e-05  1.43e-03  1.04e-05  1.08e-04  8.32e-01  
 12  +2.3115e-01  +2.3175e-01  6.01e-04  2.93e-06  1.47e-04  8.89e-07  1.16e-05  9.07e-01  
 13  +2.3096e-01  +2.3100e-01  3.43e-05  1.67e-07  8.40e-06  4.98e-08  6.73e-07  9.44e-01  
 14  +2.3095e-01  +2.3095e-01  3.49e-07  1.70e-09  8.54e-08  5.06e-10  6.85e-09  9.90e-01  
 15  +2.3095e-01  +2.3095e-01  3.50e-09  1.70e-11  8.56e-10  5.07e-12  6.87e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.3128ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:26 PM: Optimal value: 2.310e-01
(CVXPY) Sep 20 07:56:26 PM: Compilation took 5.521e-03 seconds
(CVXPY) Sep 20 07:56:26 PM: Solver (including time spent in interface) took 9.041e-03 seconds
Iteration: 15, Objective: 0.2310
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:26 PM: Your problem has 419 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:26 PM: Finished problem compilation (took 5.260e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 419
  constraints   = 669
  nnz(P)        = 0
  nnz(A)        = 4955
  cones (total) = 1
    : Nonnegative = 1,  numel = 669

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9801e-01  +2.5203e+02  2.52e+02  9.46e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +5.3371e-01  +5.5595e+01  5.51e+01  4.30e-01  1.38e+01  3.87e-03  5.77e-01  5.83e-01  
  2  +4.9194e-01  +7.8017e+00  7.31e+00  1.16e-01  5.16e+00  2.19e-02  2.35e-01  9.90e-01  
  3  +4.6173e-01  +1.8981e+00  1.44e+00  1.62e-02  8.37e-01  9.58e-03  3.90e-02  8.54e-01  
  4  +4.1510e-01  +1.6959e+00  1.28e+00  9.01e-03  4.63e-01  1.07e-02  2.21e-02  5.34e-01  
  5  +3.7010e-01  +1.2764e+00  9.06e-01  5.50e-03  2.78e-01  5.53e-03  1.42e-02  5.21e-01  
  6  +3.0663e-01  +6.5826e-01  3.52e-01  2.04e-03  9.97e-02  1.14e-03  5.94e-03  6.84e-01  
  7  +2.7614e-01  +4.8737e-01  2.11e-01  1.18e-03  5.76e-02  6.00e-04  3.68e-03  5.01e-01  
  8  +2.5778e-01  +3.9573e-01  1.38e-01  7.21e-04  3.61e-02  3.72e-04  2.36e-03  4.41e-01  
  9  +2.3846e-01  +3.0103e-01  6.26e-02  3.10e-04  1.58e-02  1.46e-04  1.09e-03  6.28e-01  
 10  +2.2646e-01  +2.4404e-01  1.76e-02  8.52e-05  4.34e-03  3.64e-05  3.16e-04  7.52e-01  
 11  +2.2205e-01  +2.2456e-01  2.51e-03  1.21e-05  6.09e-04  2.90e-06  4.72e-05  9.38e-01  
 12  +2.2124e-01  +2.2149e-01  2.52e-04  1.21e-06  6.08e-05  2.62e-07  4.94e-06  9.08e-01  
 13  +2.2115e-01  +2.2115e-01  3.32e-06  1.60e-08  8.01e-07  3.39e-09  6.57e-08  9.87e-01  
 14  +2.2115e-01  +2.2115e-01  3.32e-08  1.60e-10  8.01e-09  3.39e-11  6.57e-10  9.90e-01  
 15  +2.2115e-01  +2.2115e-01  3.33e-10  1.60e-12  8.02e-11  3.39e-13  6.58e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.9188ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:26 PM: Optimal value: 2.212e-01
(CVXPY) Sep 20 07:56:26 PM: Compilation took 5.260e-03 seconds
(CVXPY) Sep 20 07:56:26 PM: Solver (including time spent in interface) took 9.517e-03 seconds
Iteration: 16, Objective: 0.2212
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:26 PM: Your problem has 429 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:26 PM: Finished problem compilation (took 5.409e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 429
  constraints   = 679
  nnz(P)        = 0
  nnz(A)        = 5016
  cones (total) = 1
    : Nonnegative = 1,  numel = 679

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9800e-01  +2.5206e+02  2.52e+02  9.46e-01  2.33e+01  1.00e+00  1.02e+00   ------   
  1  +5.3126e-01  +5.5560e+01  5.50e+01  4.29e-01  1.37e+01  3.88e-03  5.76e-01  5.84e-01  
  2  +4.8872e-01  +7.8796e+00  7.39e+00  1.14e-01  5.05e+00  2.21e-02  2.32e-01  9.90e-01  
  3  +4.5479e-01  +2.0760e+00  1.62e+00  1.73e-02  8.87e-01  1.04e-02  4.15e-02  8.41e-01  
  4  +4.0467e-01  +1.7969e+00  1.39e+00  9.37e-03  4.78e-01  1.12e-02  2.30e-02  5.35e-01  
  5  +3.3133e-01  +8.9137e-01  5.60e-01  3.23e-03  1.60e-01  1.20e-03  8.77e-03  8.13e-01  
  6  +2.8253e-01  +5.5554e-01  2.73e-01  1.56e-03  7.54e-02  4.81e-04  4.74e-03  5.81e-01  
  7  +2.5539e-01  +4.0783e-01  1.52e-01  8.09e-04  3.99e-02  2.61e-04  2.63e-03  5.56e-01  
  8  +2.4407e-01  +3.5402e-01  1.10e-01  5.57e-04  2.80e-02  1.84e-04  1.87e-03  3.45e-01  
  9  +2.2829e-01  +2.7880e-01  5.05e-02  2.44e-04  1.24e-02  8.01e-05  8.64e-04  5.94e-01  
 10  +2.1833e-01  +2.3363e-01  1.53e-02  7.11e-05  3.63e-03  2.25e-05  2.66e-04  7.40e-01  
 11  +2.1438e-01  +2.1718e-01  2.79e-03  1.28e-05  6.51e-04  2.98e-06  5.08e-05  8.91e-01  
 12  +2.1340e-01  +2.1364e-01  2.40e-04  1.09e-06  5.49e-05  2.01e-07  4.64e-06  9.47e-01  
 13  +2.1330e-01  +2.1330e-01  2.85e-06  1.29e-08  6.49e-07  2.32e-09  5.58e-08  9.88e-01  
 14  +2.1330e-01  +2.1330e-01  2.85e-08  1.29e-10  6.50e-09  2.32e-11  5.59e-10  9.90e-01  
 15  +2.1330e-01  +2.1330e-01  2.85e-10  1.29e-12  6.50e-11  2.33e-13  5.61e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.2569ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:26 PM: Optimal value: 2.133e-01
(CVXPY) Sep 20 07:56:26 PM: Compilation took 5.409e-03 seconds
(CVXPY) Sep 20 07:56:26 PM: Solver (including time spent in interface) took 1.051e-02 seconds
Iteration: 17, Objective: 0.2133
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:26 PM: Your problem has 439 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:26 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 439
  constraints   = 689
  nnz(P)        = 0
  nnz(A)        = 5067
  cones (total) = 1
    : Nonnegative = 1,  numel = 689

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9798e-01  +2.5205e+02  2.52e+02  9.46e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.2821e-01  +5.5579e+01  5.51e+01  4.29e-01  1.35e+01  3.89e-03  5.74e-01  5.84e-01  
  2  +4.8570e-01  +7.9459e+00  7.46e+00  1.13e-01  4.96e+00  2.23e-02  2.30e-01  9.90e-01  
  3  +4.4976e-01  +2.1638e+00  1.71e+00  1.78e-02  9.03e-01  1.07e-02  4.25e-02  8.34e-01  
  4  +3.9684e-01  +1.8693e+00  1.47e+00  9.59e-03  4.85e-01  1.17e-02  2.35e-02  5.32e-01  
  5  +3.2764e-01  +8.6897e-01  5.41e-01  3.28e-03  1.60e-01  1.14e-04  8.92e-03  8.43e-01  
  6  +2.8195e-01  +5.7633e-01  2.94e-01  1.72e-03  8.25e-02  1.10e-04  5.16e-03  5.48e-01  
  7  +2.4929e-01  +3.9526e-01  1.46e-01  7.91e-04  3.83e-02  7.51e-05  2.58e-03  6.14e-01  
  8  +2.3870e-01  +3.4655e-01  1.08e-01  5.58e-04  2.74e-02  6.04e-05  1.88e-03  3.41e-01  
  9  +2.1865e-01  +2.5140e-01  3.27e-02  1.60e-04  7.90e-03  1.99e-05  5.86e-04  7.44e-01  
 10  +2.1130e-01  +2.1714e-01  5.85e-03  2.84e-05  1.39e-03  3.97e-06  1.11e-04  8.94e-01  
 11  +2.0958e-01  +2.1031e-01  7.31e-04  3.54e-06  1.70e-04  4.62e-07  1.53e-05  9.24e-01  
 12  +2.0931e-01  +2.0933e-01  2.47e-05  1.19e-07  5.72e-06  1.54e-08  5.37e-07  9.73e-01  
 13  +2.0930e-01  +2.0930e-01  2.48e-07  1.20e-09  5.73e-08  1.54e-10  5.39e-09  9.90e-01  
 14  +2.0930e-01  +2.0930e-01  2.48e-09  1.20e-11  5.74e-10  1.54e-12  5.40e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.4877ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:26 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:26 PM: Optimal value: 2.093e-01
(CVXPY) Sep 20 07:56:26 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:56:26 PM: Solver (including time spent in interface) took 1.039e-02 seconds
Iteration: 18, Objective: 0.2093
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:27 PM: Your problem has 449 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:27 PM: Finished problem compilation (took 5.521e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 449
  constraints   = 699
  nnz(P)        = 0
  nnz(A)        = 5127
  cones (total) = 1
    : Nonnegative = 1,  numel = 699

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9800e-01  +2.5206e+02  2.52e+02  9.47e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +5.2591e-01  +5.5504e+01  5.50e+01  4.27e-01  1.33e+01  3.91e-03  5.71e-01  5.86e-01  
  2  +4.8284e-01  +8.0017e+00  7.52e+00  1.11e-01  4.79e+00  2.24e-02  2.25e-01  9.90e-01  
  3  +4.4144e-01  +2.0890e+00  1.65e+00  1.60e-02  8.08e-01  1.09e-02  3.85e-02  8.48e-01  
  4  +3.8933e-01  +1.8263e+00  1.44e+00  9.16e-03  4.61e-01  1.16e-02  2.25e-02  5.00e-01  
  5  +3.1861e-01  +8.2400e-01  5.05e-01  3.07e-03  1.48e-01  1.10e-04  8.43e-03  8.37e-01  
  6  +2.6334e-01  +4.9700e-01  2.34e-01  1.34e-03  6.38e-02  1.11e-04  4.16e-03  6.81e-01  
  7  +2.4330e-01  +3.9885e-01  1.56e-01  8.41e-04  4.04e-02  8.95e-05  2.74e-03  4.64e-01  
  8  +2.2932e-01  +3.2989e-01  1.01e-01  5.23e-04  2.54e-02  6.07e-05  1.79e-03  4.03e-01  
  9  +2.0969e-01  +2.3238e-01  2.27e-02  1.14e-04  5.52e-03  1.39e-05  4.25e-04  8.05e-01  
 10  +2.0470e-01  +2.0868e-01  3.97e-03  2.01e-05  9.59e-04  2.28e-06  8.00e-05  8.39e-01  
 11  +2.0371e-01  +2.0445e-01  7.46e-04  3.77e-06  1.78e-04  4.16e-07  1.64e-05  8.31e-01  
 12  +2.0348e-01  +2.0357e-01  8.89e-05  4.42e-07  2.08e-05  5.05e-08  2.05e-06  9.06e-01  
 13  +2.0345e-01  +2.0345e-01  1.19e-06  5.89e-09  2.77e-07  6.58e-10  2.79e-08  9.87e-01  
 14  +2.0345e-01  +2.0345e-01  1.20e-08  5.89e-11  2.77e-09  6.59e-12  2.80e-10  9.90e-01  
 15  +2.0345e-01  +2.0345e-01  1.20e-10  5.90e-13  2.77e-11  6.80e-14  2.89e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.3748ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:27 PM: Optimal value: 2.035e-01
(CVXPY) Sep 20 07:56:27 PM: Compilation took 5.521e-03 seconds
(CVXPY) Sep 20 07:56:27 PM: Solver (including time spent in interface) took 1.154e-02 seconds
Iteration: 19, Objective: 0.2035
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:27 PM: Your problem has 459 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:27 PM: Finished problem compilation (took 4.507e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 459
  constraints   = 709
  nnz(P)        = 0
  nnz(A)        = 5186
  cones (total) = 1
    : Nonnegative = 1,  numel = 709

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9799e-01  +2.5210e+02  2.52e+02  9.47e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +5.2291e-01  +5.5599e+01  5.51e+01  4.27e-01  1.32e+01  3.92e-03  5.70e-01  5.86e-01  
  2  +4.7948e-01  +8.0773e+00  7.60e+00  1.10e-01  4.69e+00  2.26e-02  2.24e-01  9.90e-01  
  3  +4.3464e-01  +2.1375e+00  1.70e+00  1.60e-02  8.00e-01  1.11e-02  3.87e-02  8.48e-01  
  4  +3.8518e-01  +1.8700e+00  1.48e+00  9.62e-03  4.79e-01  1.14e-02  2.37e-02  4.70e-01  
  5  +3.1651e-01  +8.9207e-01  5.76e-01  3.54e-03  1.70e-01  1.08e-04  9.73e-03  8.57e-01  
  6  +2.6120e-01  +4.9612e-01  2.35e-01  1.38e-03  6.52e-02  9.38e-05  4.30e-03  6.87e-01  
  7  +2.4430e-01  +4.1710e-01  1.73e-01  9.67e-04  4.60e-02  8.36e-05  3.12e-03  3.81e-01  
  8  +2.3031e-01  +3.4864e-01  1.18e-01  6.33e-04  3.06e-02  6.23e-05  2.13e-03  3.76e-01  
  9  +2.0940e-01  +2.4514e-01  3.57e-02  1.83e-04  8.84e-03  2.16e-05  6.69e-04  7.68e-01  
 10  +2.0197e-01  +2.0983e-01  7.86e-03  4.01e-05  1.92e-03  4.55e-06  1.56e-04  7.88e-01  
 11  +2.0018e-01  +2.0180e-01  1.62e-03  8.28e-06  3.92e-04  1.05e-06  3.50e-05  8.88e-01  
 12  +1.9975e-01  +2.0015e-01  4.05e-04  2.03e-06  9.57e-05  2.77e-07  9.10e-06  8.44e-01  
 13  +1.9960e-01  +1.9961e-01  5.99e-06  2.99e-08  1.41e-06  3.88e-09  1.36e-07  9.85e-01  
 14  +1.9960e-01  +1.9960e-01  5.99e-08  2.99e-10  1.41e-08  3.88e-11  1.37e-09  9.90e-01  
 15  +1.9960e-01  +1.9960e-01  6.00e-10  2.99e-12  1.41e-10  3.90e-13  1.37e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.8785ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:27 PM: Optimal value: 1.996e-01
(CVXPY) Sep 20 07:56:27 PM: Compilation took 4.507e-03 seconds
(CVXPY) Sep 20 07:56:27 PM: Solver (including time spent in interface) took 1.364e-02 seconds
Iteration: 20, Objective: 0.1996
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:27 PM: Your problem has 469 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:27 PM: Finished problem compilation (took 4.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 469
  constraints   = 719
  nnz(P)        = 0
  nnz(A)        = 5216
  cones (total) = 1
    : Nonnegative = 1,  numel = 719

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9795e-01  +2.5218e+02  2.52e+02  9.48e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.1998e-01  +5.5538e+01  5.50e+01  4.26e-01  1.30e+01  3.93e-03  5.68e-01  5.87e-01  
  2  +4.7535e-01  +8.1805e+00  7.71e+00  1.07e-01  4.59e+00  2.29e-02  2.20e-01  9.90e-01  
  3  +4.2694e-01  +2.3748e+00  1.95e+00  1.75e-02  8.63e-01  1.21e-02  4.20e-02  8.27e-01  
  4  +3.7659e-01  +1.9187e+00  1.54e+00  9.98e-03  4.94e-01  1.11e-02  2.46e-02  4.70e-01  
  5  +3.0493e-01  +7.7765e-01  4.73e-01  2.91e-03  1.39e-01  1.04e-04  8.05e-03  8.70e-01  
  6  +2.6391e-01  +5.5081e-01  2.87e-01  1.70e-03  7.99e-02  1.26e-04  5.13e-03  5.50e-01  
  7  +2.2922e-01  +3.5391e-01  1.25e-01  6.83e-04  3.23e-02  6.96e-05  2.27e-03  6.55e-01  
  8  +2.1932e-01  +3.0773e-01  8.84e-02  4.65e-04  2.23e-02  5.46e-05  1.61e-03  4.17e-01  
  9  +2.0163e-01  +2.2255e-01  2.09e-02  1.06e-04  5.06e-03  1.26e-05  3.96e-04  7.84e-01  
 10  +1.9735e-01  +2.0238e-01  5.03e-03  2.55e-05  1.20e-03  3.05e-06  1.02e-04  7.99e-01  
 11  +1.9608e-01  +1.9710e-01  1.02e-03  5.09e-06  2.38e-04  7.23e-07  2.27e-05  9.48e-01  
 12  +1.9571e-01  +1.9573e-01  2.35e-05  1.17e-07  5.45e-06  1.37e-08  5.43e-07  9.78e-01  
 13  +1.9570e-01  +1.9570e-01  2.35e-07  1.17e-09  5.45e-08  1.37e-10  5.44e-09  9.90e-01  
 14  +1.9570e-01  +1.9570e-01  2.35e-09  1.17e-11  5.45e-10  1.37e-12  5.44e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.8605ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:27 PM: Optimal value: 1.957e-01
(CVXPY) Sep 20 07:56:27 PM: Compilation took 4.999e-03 seconds
(CVXPY) Sep 20 07:56:27 PM: Solver (including time spent in interface) took 1.222e-02 seconds
Iteration: 21, Objective: 0.1957
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:27 PM: Your problem has 479 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:27 PM: Finished problem compilation (took 5.613e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 479
  constraints   = 729
  nnz(P)        = 0
  nnz(A)        = 5242
  cones (total) = 1
    : Nonnegative = 1,  numel = 729

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9786e-01  +2.5234e+02  2.52e+02  9.48e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.1439e-01  +5.5785e+01  5.53e+01  4.26e-01  1.29e+01  3.95e-03  5.69e-01  5.86e-01  
  2  +4.6958e-01  +8.3462e+00  7.88e+00  1.06e-01  4.52e+00  2.34e-02  2.18e-01  9.90e-01  
  3  +4.2069e-01  +2.5385e+00  2.12e+00  1.90e-02  9.27e-01  1.21e-02  4.54e-02  8.08e-01  
  4  +3.6942e-01  +2.0311e+00  1.66e+00  1.08e-02  5.30e-01  1.07e-02  2.66e-02  4.80e-01  
  5  +2.9952e-01  +7.4940e-01  4.50e-01  2.80e-03  1.32e-01  1.01e-04  7.73e-03  8.77e-01  
  6  +2.6556e-01  +5.9135e-01  3.26e-01  1.94e-03  9.09e-02  1.40e-04  5.75e-03  4.61e-01  
  7  +2.2692e-01  +3.6621e-01  1.39e-01  7.76e-04  3.62e-02  7.28e-05  2.55e-03  6.39e-01  
  8  +2.1936e-01  +3.3122e-01  1.12e-01  6.03e-04  2.85e-02  6.44e-05  2.04e-03  3.06e-01  
  9  +2.0097e-01  +2.4130e-01  4.03e-02  2.09e-04  9.86e-03  2.42e-05  7.64e-04  6.82e-01  
 10  +1.9193e-01  +1.9811e-01  6.18e-03  3.18e-05  1.49e-03  3.26e-06  1.26e-04  8.45e-01  
 11  +1.9066e-01  +1.9253e-01  1.87e-03  9.53e-06  4.41e-04  1.29e-06  4.18e-05  8.96e-01  
 12  +1.9003e-01  +1.9010e-01  7.29e-05  3.71e-07  1.71e-05  4.03e-08  1.71e-06  9.61e-01  
 13  +1.9000e-01  +1.9000e-01  7.41e-07  3.77e-09  1.74e-07  4.08e-10  1.75e-08  9.90e-01  
 14  +1.9000e-01  +1.9000e-01  7.41e-09  3.77e-11  1.74e-09  4.08e-12  1.75e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.6678ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:27 PM: Optimal value: 1.900e-01
(CVXPY) Sep 20 07:56:27 PM: Compilation took 5.613e-03 seconds
(CVXPY) Sep 20 07:56:27 PM: Solver (including time spent in interface) took 1.305e-02 seconds
Iteration: 22, Objective: 0.1900
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:27 PM: Your problem has 489 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:27 PM: Finished problem compilation (took 6.010e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 489
  constraints   = 739
  nnz(P)        = 0
  nnz(A)        = 5287
  cones (total) = 1
    : Nonnegative = 1,  numel = 739

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9787e-01  +2.5234e+02  2.52e+02  9.48e-01  2.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.1304e-01  +5.5869e+01  5.54e+01  4.26e-01  1.28e+01  3.96e-03  5.68e-01  5.85e-01  
  2  +4.6780e-01  +8.3761e+00  7.91e+00  1.06e-01  4.49e+00  2.35e-02  2.19e-01  9.89e-01  
  3  +4.1742e-01  +2.3723e+00  1.95e+00  1.74e-02  8.46e-01  1.16e-02  4.19e-02  8.25e-01  
  4  +3.6300e-01  +1.8555e+00  1.49e+00  9.54e-03  4.64e-01  1.00e-02  2.37e-02  5.03e-01  
  5  +2.9571e-01  +7.3910e-01  4.43e-01  2.77e-03  1.30e-01  8.06e-04  7.69e-03  8.01e-01  
  6  +2.5995e-01  +5.6659e-01  3.07e-01  1.82e-03  8.45e-02  4.78e-04  5.44e-03  5.12e-01  
  7  +2.2365e-01  +3.5701e-01  1.33e-01  7.32e-04  3.41e-02  1.95e-04  2.42e-03  6.40e-01  
  8  +2.1464e-01  +3.1476e-01  1.00e-01  5.30e-04  2.50e-02  1.38e-04  1.80e-03  3.72e-01  
  9  +1.9616e-01  +2.2493e-01  2.88e-02  1.47e-04  6.90e-03  3.57e-05  5.39e-04  7.32e-01  
 10  +1.8997e-01  +1.9562e-01  5.65e-03  2.88e-05  1.34e-03  6.07e-06  1.13e-04  8.04e-01  
 11  +1.8870e-01  +1.9007e-01  1.37e-03  6.97e-06  3.21e-04  1.13e-06  3.01e-05  9.25e-01  
 12  +1.8822e-01  +1.8826e-01  4.68e-05  2.37e-07  1.09e-05  3.29e-08  1.06e-06  9.66e-01  
 13  +1.8820e-01  +1.8820e-01  4.69e-07  2.38e-09  1.09e-07  3.29e-10  1.07e-08  9.90e-01  
 14  +1.8820e-01  +1.8820e-01  4.69e-09  2.38e-11  1.09e-09  3.30e-12  1.07e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.4947ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:27 PM: Optimal value: 1.882e-01
(CVXPY) Sep 20 07:56:27 PM: Compilation took 6.010e-03 seconds
(CVXPY) Sep 20 07:56:27 PM: Solver (including time spent in interface) took 1.259e-02 seconds
Iteration: 23, Objective: 0.1882
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:27 PM: Your problem has 499 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:27 PM: Finished problem compilation (took 6.562e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 499
  constraints   = 749
  nnz(P)        = 0
  nnz(A)        = 5335
  cones (total) = 1
    : Nonnegative = 1,  numel = 749

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9781e-01  +2.5241e+02  2.52e+02  9.49e-01  2.23e+01  1.00e+00  1.02e+00   ------   
  1  +5.1003e-01  +5.6019e+01  5.55e+01  4.27e-01  1.27e+01  3.97e-03  5.68e-01  5.85e-01  
  2  +4.6435e-01  +8.4192e+00  7.95e+00  1.05e-01  4.42e+00  2.37e-02  2.18e-01  9.90e-01  
  3  +4.1291e-01  +2.3228e+00  1.91e+00  1.69e-02  8.17e-01  1.12e-02  4.11e-02  8.29e-01  
  4  +3.5315e-01  +1.7775e+00  1.42e+00  8.84e-03  4.27e-01  9.50e-03  2.21e-02  5.39e-01  
  5  +2.8852e-01  +6.9850e-01  4.10e-01  2.56e-03  1.19e-01  1.01e-03  7.19e-03  7.74e-01  
  6  +2.5765e-01  +5.5820e-01  3.01e-01  1.77e-03  8.19e-02  6.21e-04  5.29e-03  4.78e-01  
  7  +2.2097e-01  +3.5118e-01  1.30e-01  7.06e-04  3.27e-02  2.48e-04  2.31e-03  6.41e-01  
  8  +2.1179e-01  +3.0795e-01  9.62e-02  5.05e-04  2.37e-02  1.66e-04  1.70e-03  3.88e-01  
  9  +1.9338e-01  +2.1865e-01  2.53e-02  1.29e-04  6.00e-03  3.84e-05  4.66e-04  7.54e-01  
 10  +1.8810e-01  +1.9374e-01  5.64e-03  2.89e-05  1.33e-03  7.37e-06  1.12e-04  7.80e-01  
 11  +1.8706e-01  +1.8931e-01  2.24e-03  1.14e-05  5.23e-04  2.50e-06  4.76e-05  7.10e-01  
 12  +1.8635e-01  +1.8650e-01  1.46e-04  7.41e-07  3.37e-05  1.29e-07  3.28e-06  9.45e-01  
 13  +1.8630e-01  +1.8630e-01  1.73e-06  8.74e-09  3.97e-07  1.49e-09  3.91e-08  9.89e-01  
 14  +1.8630e-01  +1.8630e-01  1.73e-08  8.75e-11  3.98e-09  1.49e-11  3.91e-10  9.90e-01  
 15  +1.8630e-01  +1.8630e-01  1.73e-10  8.77e-13  3.99e-11  1.50e-13  3.93e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.6449ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:27 PM: Optimal value: 1.863e-01
(CVXPY) Sep 20 07:56:27 PM: Compilation took 6.562e-03 seconds
(CVXPY) Sep 20 07:56:27 PM: Solver (including time spent in interface) took 1.397e-02 seconds
Iteration: 24, Objective: 0.1863
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:28 PM: Your problem has 509 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:28 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 509
  constraints   = 759
  nnz(P)        = 0
  nnz(A)        = 5364
  cones (total) = 1
    : Nonnegative = 1,  numel = 759

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9780e-01  +2.5240e+02  2.52e+02  9.49e-01  2.22e+01  1.00e+00  1.02e+00   ------   
  1  +5.0890e-01  +5.6022e+01  5.55e+01  4.27e-01  1.26e+01  3.98e-03  5.67e-01  5.85e-01  
  2  +4.6285e-01  +8.3864e+00  7.92e+00  1.04e-01  4.37e+00  2.36e-02  2.17e-01  9.90e-01  
  3  +4.1180e-01  +2.3271e+00  1.92e+00  1.71e-02  8.21e-01  1.09e-02  4.18e-02  8.27e-01  
  4  +3.5784e-01  +1.8935e+00  1.54e+00  9.85e-03  4.73e-01  9.91e-03  2.46e-02  4.85e-01  
  5  +2.9077e-01  +7.0649e-01  4.16e-01  2.64e-03  1.22e-01  2.59e-04  7.39e-03  8.46e-01  
  6  +2.6494e-01  +5.9083e-01  3.26e-01  1.98e-03  9.11e-02  2.26e-04  5.83e-03  3.81e-01  
  7  +2.3295e-01  +4.1435e-01  1.81e-01  1.04e-03  4.75e-02  1.33e-04  3.28e-03  5.15e-01  
  8  +2.1730e-01  +3.3738e-01  1.20e-01  6.52e-04  3.03e-02  9.18e-05  2.16e-03  4.31e-01  
  9  +1.9723e-01  +2.3668e-01  3.95e-02  2.07e-04  9.57e-03  3.08e-05  7.36e-04  7.92e-01  
 10  +1.8850e-01  +1.9540e-01  6.90e-03  3.61e-05  1.65e-03  4.69e-06  1.37e-04  8.21e-01  
 11  +1.8738e-01  +1.9061e-01  3.23e-03  1.68e-05  7.63e-04  2.29e-06  6.88e-05  6.60e-01  
 12  +1.8653e-01  +1.8719e-01  6.62e-04  3.42e-06  1.55e-04  4.57e-07  1.49e-05  8.38e-01  
 13  +1.8631e-01  +1.8633e-01  2.07e-05  1.07e-07  4.82e-06  1.36e-08  4.78e-07  9.74e-01  
 14  +1.8630e-01  +1.8630e-01  2.07e-07  1.07e-09  4.83e-08  1.36e-10  4.79e-09  9.90e-01  
 15  +1.8630e-01  +1.8630e-01  2.08e-09  1.07e-11  4.84e-10  1.36e-12  4.80e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.6359ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:28 PM: Optimal value: 1.863e-01
(CVXPY) Sep 20 07:56:28 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:56:28 PM: Solver (including time spent in interface) took 1.404e-02 seconds
Iteration: 25, Objective: 0.1863
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:28 PM: Your problem has 519 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:28 PM: Finished problem compilation (took 5.755e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 769
  nnz(P)        = 0
  nnz(A)        = 5404
  cones (total) = 1
    : Nonnegative = 1,  numel = 769

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9773e-01  +2.5236e+02  2.52e+02  9.49e-01  2.20e+01  1.00e+00  1.02e+00   ------   
  1  +5.0624e-01  +5.6155e+01  5.56e+01  4.29e-01  1.25e+01  3.98e-03  5.68e-01  5.83e-01  
  2  +4.5942e-01  +8.4600e+00  8.00e+00  1.04e-01  4.34e+00  2.39e-02  2.19e-01  9.90e-01  
  3  +4.1057e-01  +2.4815e+00  2.07e+00  1.89e-02  8.97e-01  1.09e-02  4.63e-02  8.07e-01  
  4  +3.5850e-01  +2.0728e+00  1.71e+00  1.13e-02  5.36e-01  1.03e-02  2.82e-02  4.65e-01  
  5  +2.9607e-01  +7.9947e-01  5.03e-01  3.25e-03  1.49e-01  9.48e-05  9.03e-03  8.69e-01  
  6  +2.4737e-01  +5.1192e-01  2.65e-01  1.60e-03  7.23e-02  1.12e-04  4.92e-03  6.32e-01  
  7  +2.2318e-01  +3.7613e-01  1.53e-01  8.72e-04  3.94e-02  7.55e-05  2.84e-03  4.98e-01  
  8  +2.0583e-01  +2.8419e-01  7.84e-02  4.26e-04  1.94e-02  4.19e-05  1.46e-03  5.35e-01  
  9  +1.9110e-01  +2.0637e-01  1.53e-02  8.18e-05  3.69e-03  1.17e-05  3.01e-04  9.63e-01  
 10  +1.8799e-01  +1.9289e-01  4.90e-03  2.64e-05  1.18e-03  3.55e-06  1.04e-04  6.99e-01  
 11  +1.8708e-01  +1.8932e-01  2.24e-03  1.18e-05  5.30e-04  1.66e-06  4.98e-05  7.46e-01  
 12  +1.8637e-01  +1.8655e-01  1.86e-04  9.67e-07  4.34e-05  1.25e-07  4.32e-06  9.38e-01  
 13  +1.8630e-01  +1.8630e-01  2.59e-06  1.34e-08  6.03e-07  1.73e-09  6.07e-08  9.88e-01  
 14  +1.8630e-01  +1.8630e-01  2.59e-08  1.35e-10  6.04e-09  1.73e-11  6.08e-10  9.90e-01  
 15  +1.8630e-01  +1.8630e-01  2.61e-10  1.36e-12  6.08e-11  1.75e-13  6.14e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.9216ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:28 PM: Optimal value: 1.863e-01
(CVXPY) Sep 20 07:56:28 PM: Compilation took 5.755e-03 seconds
(CVXPY) Sep 20 07:56:28 PM: Solver (including time spent in interface) took 1.377e-02 seconds
Iteration: 26, Objective: 0.1863
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:28 PM: Your problem has 529 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:28 PM: Finished problem compilation (took 6.511e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 529
  constraints   = 779
  nnz(P)        = 0
  nnz(A)        = 5454
  cones (total) = 1
    : Nonnegative = 1,  numel = 779

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9772e-01  +2.5235e+02  2.52e+02  9.50e-01  2.19e+01  1.00e+00  1.02e+00   ------   
  1  +5.0442e-01  +5.6255e+01  5.58e+01  4.30e-01  1.24e+01  3.98e-03  5.68e-01  5.83e-01  
  2  +4.5774e-01  +8.4622e+00  8.00e+00  1.04e-01  4.31e+00  2.40e-02  2.19e-01  9.90e-01  
  3  +4.1060e-01  +2.5858e+00  2.18e+00  2.03e-02  9.51e-01  1.09e-02  4.97e-02  7.93e-01  
  4  +3.6253e-01  +2.2540e+00  1.89e+00  1.29e-02  6.07e-01  1.08e-02  3.21e-02  4.26e-01  
  5  +3.0685e-01  +1.0040e+00  6.97e-01  4.59e-03  2.10e-01  1.03e-04  1.25e-02  8.81e-01  
  6  +2.6284e-01  +6.1855e-01  3.56e-01  2.26e-03  1.02e-01  8.39e-05  6.72e-03  5.31e-01  
  7  +2.3760e-01  +4.6509e-01  2.27e-01  1.37e-03  6.13e-02  7.41e-05  4.29e-03  4.45e-01  
  8  +2.1301e-01  +3.2608e-01  1.13e-01  6.35e-04  2.86e-02  4.79e-05  2.12e-03  5.87e-01  
  9  +2.0262e-01  +2.7250e-01  6.99e-02  3.79e-04  1.72e-02  3.38e-05  1.31e-03  4.61e-01  
 10  +1.9096e-01  +2.1400e-01  2.30e-02  1.22e-04  5.53e-03  1.18e-05  4.44e-04  7.03e-01  
 11  +1.8613e-01  +1.9091e-01  4.77e-03  2.53e-05  1.14e-03  2.32e-06  9.80e-05  7.97e-01  
 12  +1.8534e-01  +1.8779e-01  2.45e-03  1.26e-05  5.74e-04  1.42e-06  5.22e-05  6.31e-01  
 13  +1.8466e-01  +1.8512e-01  4.60e-04  2.34e-06  1.07e-04  2.75e-07  1.02e-05  8.43e-01  
 14  +1.8450e-01  +1.8451e-01  7.67e-06  3.90e-08  1.77e-06  4.55e-09  1.73e-07  9.85e-01  
 15  +1.8450e-01  +1.8450e-01  7.67e-08  3.90e-10  1.77e-08  4.55e-11  1.73e-09  9.90e-01  
 16  +1.8450e-01  +1.8450e-01  7.67e-10  3.90e-12  1.77e-10  4.56e-13  1.73e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.0048ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:28 PM: Optimal value: 1.845e-01
(CVXPY) Sep 20 07:56:28 PM: Compilation took 6.511e-03 seconds
(CVXPY) Sep 20 07:56:28 PM: Solver (including time spent in interface) took 1.460e-02 seconds
Iteration: 27, Objective: 0.1845
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:28 PM: Your problem has 539 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:28 PM: Finished problem compilation (took 5.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 539
  constraints   = 789
  nnz(P)        = 0
  nnz(A)        = 5493
  cones (total) = 1
    : Nonnegative = 1,  numel = 789

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9772e-01  +2.5235e+02  2.52e+02  9.50e-01  2.18e+01  1.00e+00  1.02e+00   ------   
  1  +5.0378e-01  +5.6286e+01  5.58e+01  4.31e-01  1.23e+01  3.98e-03  5.68e-01  5.82e-01  
  2  +4.5631e-01  +8.4725e+00  8.02e+00  1.04e-01  4.27e+00  2.41e-02  2.20e-01  9.90e-01  
  3  +4.0829e-01  +2.5417e+00  2.13e+00  1.98e-02  9.23e-01  1.08e-02  4.88e-02  7.98e-01  
  4  +3.5827e-01  +2.1871e+00  1.83e+00  1.24e-02  5.78e-01  1.05e-02  3.10e-02  4.37e-01  
  5  +3.0218e-01  +9.2992e-01  6.28e-01  4.17e-03  1.89e-01  9.77e-05  1.15e-02  8.69e-01  
  6  +2.6023e-01  +6.0897e-01  3.49e-01  2.22e-03  9.89e-02  8.64e-05  6.63e-03  4.99e-01  
  7  +2.3433e-01  +4.5408e-01  2.20e-01  1.32e-03  5.88e-02  7.07e-05  4.18e-03  4.40e-01  
  8  +2.0652e-01  +2.9874e-01  9.22e-02  5.16e-04  2.31e-02  4.07e-05  1.75e-03  6.68e-01  
  9  +1.9652e-01  +2.4855e-01  5.20e-02  2.82e-04  1.27e-02  2.76e-05  9.92e-04  5.57e-01  
 10  +1.8568e-01  +1.9480e-01  9.12e-03  4.88e-05  2.19e-03  5.78e-06  1.83e-04  9.08e-01  
 11  +1.8381e-01  +1.8713e-01  3.33e-03  1.76e-05  7.94e-04  2.19e-06  7.13e-05  7.09e-01  
 12  +1.8291e-01  +1.8378e-01  8.70e-04  4.50e-06  2.03e-04  5.80e-07  1.95e-05  7.98e-01  
 13  +1.8261e-01  +1.8263e-01  2.32e-05  1.20e-07  5.40e-06  1.52e-08  5.32e-07  9.86e-01  
 14  +1.8260e-01  +1.8260e-01  2.32e-07  1.20e-09  5.40e-08  1.52e-10  5.33e-09  9.90e-01  
 15  +1.8260e-01  +1.8260e-01  2.32e-09  1.20e-11  5.40e-10  1.52e-12  5.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.5601ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:28 PM: Optimal value: 1.826e-01
(CVXPY) Sep 20 07:56:28 PM: Compilation took 5.999e-03 seconds
(CVXPY) Sep 20 07:56:28 PM: Solver (including time spent in interface) took 1.319e-02 seconds
Iteration: 28, Objective: 0.1826
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:28 PM: Your problem has 546 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:28 PM: Finished problem compilation (took 5.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 546
  constraints   = 796
  nnz(P)        = 0
  nnz(A)        = 5537
  cones (total) = 1
    : Nonnegative = 1,  numel = 796

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9769e-01  +2.5234e+02  2.52e+02  9.50e-01  2.17e+01  1.00e+00  1.02e+00   ------   
  1  +5.0120e-01  +5.6358e+01  5.59e+01  4.31e-01  1.22e+01  3.99e-03  5.68e-01  5.82e-01  
  2  +4.5288e-01  +8.5077e+00  8.05e+00  1.03e-01  4.23e+00  2.42e-02  2.19e-01  9.90e-01  
  3  +4.0510e-01  +2.6892e+00  2.28e+00  2.13e-02  9.84e-01  1.10e-02  5.25e-02  7.84e-01  
  4  +3.4713e-01  +2.1891e+00  1.84e+00  1.21e-02  5.59e-01  1.02e-02  3.05e-02  4.98e-01  
  5  +2.9228e-01  +7.7490e-01  4.83e-01  3.21e-03  1.44e-01  9.09e-05  9.00e-03  8.69e-01  
  6  +2.4582e-01  +5.2178e-01  2.76e-01  1.70e-03  7.55e-02  1.11e-04  5.24e-03  5.97e-01  
  7  +2.2164e-01  +3.8640e-01  1.65e-01  9.64e-04  4.28e-02  8.33e-05  3.14e-03  5.28e-01  
  8  +2.0185e-01  +2.7903e-01  7.72e-02  4.28e-04  1.92e-02  4.27e-05  1.48e-03  5.87e-01  
  9  +1.9064e-01  +2.1956e-01  2.89e-02  1.58e-04  7.07e-03  1.86e-05  5.78e-04  7.55e-01  
 10  +1.8448e-01  +1.9023e-01  5.74e-03  3.14e-05  1.39e-03  3.32e-06  1.22e-04  8.01e-01  
 11  +1.8338e-01  +1.8573e-01  2.35e-03  1.26e-05  5.64e-04  1.48e-06  5.28e-05  7.06e-01  
 12  +1.8268e-01  +1.8290e-01  2.20e-04  1.17e-06  5.25e-05  1.35e-07  5.18e-06  9.26e-01  
 13  +1.8260e-01  +1.8260e-01  2.61e-06  1.39e-08  6.21e-07  1.57e-09  6.19e-08  9.88e-01  
 14  +1.8260e-01  +1.8260e-01  2.62e-08  1.39e-10  6.22e-09  1.57e-11  6.20e-10  9.90e-01  
 15  +1.8260e-01  +1.8260e-01  2.62e-10  1.39e-12  6.22e-11  1.57e-13  6.21e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.2711ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:28 PM: Optimal value: 1.826e-01
(CVXPY) Sep 20 07:56:28 PM: Compilation took 5.998e-03 seconds
(CVXPY) Sep 20 07:56:28 PM: Solver (including time spent in interface) took 1.370e-02 seconds
Iteration: 29, Objective: 0.1826
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:28 PM: Your problem has 548 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:28 PM: Finished problem compilation (took 5.355e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 548
  constraints   = 798
  nnz(P)        = 0
  nnz(A)        = 5555
  cones (total) = 1
    : Nonnegative = 1,  numel = 798

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9770e-01  +2.5234e+02  2.52e+02  9.50e-01  2.17e+01  1.00e+00  1.02e+00   ------   
  1  +5.0109e-01  +5.6342e+01  5.58e+01  4.31e-01  1.22e+01  3.99e-03  5.68e-01  5.82e-01  
  2  +4.5224e-01  +8.5259e+00  8.07e+00  1.03e-01  4.21e+00  2.43e-02  2.19e-01  9.90e-01  
  3  +4.0280e-01  +2.6703e+00  2.27e+00  2.08e-02  9.61e-01  1.10e-02  5.14e-02  7.90e-01  
  4  +3.4337e-01  +2.1096e+00  1.77e+00  1.14e-02  5.30e-01  9.73e-03  2.91e-02  5.18e-01  
  5  +2.8698e-01  +7.2737e-01  4.40e-01  2.91e-03  1.31e-01  9.01e-05  8.26e-03  8.83e-01  
  6  +2.5234e-01  +5.5593e-01  3.04e-01  1.89e-03  8.41e-02  1.12e-04  5.73e-03  4.72e-01  
  7  +2.2438e-01  +3.9916e-01  1.75e-01  1.03e-03  4.57e-02  8.18e-05  3.34e-03  5.31e-01  
  8  +2.0206e-01  +2.7899e-01  7.69e-02  4.28e-04  1.92e-02  4.07e-05  1.48e-03  6.22e-01  
  9  +1.9146e-01  +2.2335e-01  3.19e-02  1.76e-04  7.83e-03  1.99e-05  6.39e-04  7.26e-01  
 10  +1.8457e-01  +1.9063e-01  6.06e-03  3.32e-05  1.48e-03  3.39e-06  1.29e-04  8.09e-01  
 11  +1.8336e-01  +1.8567e-01  2.31e-03  1.24e-05  5.55e-04  1.42e-06  5.19e-05  7.26e-01  
 12  +1.8267e-01  +1.8289e-01  2.16e-04  1.15e-06  5.16e-05  1.30e-07  5.09e-06  9.27e-01  
 13  +1.8260e-01  +1.8260e-01  2.36e-06  1.26e-08  5.63e-07  1.40e-09  5.60e-08  9.89e-01  
 14  +1.8260e-01  +1.8260e-01  2.36e-08  1.26e-10  5.64e-09  1.40e-11  5.61e-10  9.90e-01  
 15  +1.8260e-01  +1.8260e-01  2.36e-10  1.26e-12  5.65e-11  1.40e-13  5.62e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.5114ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:28 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:28 PM: Optimal value: 1.826e-01
(CVXPY) Sep 20 07:56:28 PM: Compilation took 5.355e-03 seconds
(CVXPY) Sep 20 07:56:28 PM: Solver (including time spent in interface) took 1.351e-02 seconds
FULL MODEL:
  Accruacy: 0.798
  Our objective: 0.596

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x8 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0)            <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x8 = 1)                                             <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.028)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.028)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1)                                  <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.008)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x6 = 1 AND x8 = 1)                                             <-- (term's our objective: 0.024)
 OR (x1 = 0 AND x2 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.02)
 OR (x1 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.024)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.024)
 OR (x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.004)
 OR (x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.028)
 OR (x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.044)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.949229717254639
Best over terms:
  Our final objective: 0.04400000000000004
    Its accruacy: 0.522
    Its hamming distance: 8
  Shortest hamming distance: 3
    Its our objective: 0.028000000000000025
  Highest accruacy: 0.522
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

