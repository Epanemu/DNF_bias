Command:
python test_script.py -s constant_subclass -d 9 -n 50 --seed 34 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 9.

Computed total variation: 0.92
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:57 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:57 PM: Finished problem compilation (took 9.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 319
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9477e-01  +2.6014e+01  2.55e+01  8.37e-01  6.92e+00  1.00e+00  1.07e+00   ------   
  1  +5.6846e-01  +5.7996e+00  5.23e+00  3.69e-01  4.04e+00  3.74e-03  6.08e-01  5.93e-01  
  2  +4.9207e-01  +1.1914e+00  6.99e-01  8.66e-02  1.17e+00  2.05e-02  2.40e-01  9.90e-01  
  3  +4.4706e-01  +6.8986e-01  2.43e-01  1.84e-02  2.63e-01  1.14e-02  6.27e-02  8.14e-01  
  4  +4.3014e-01  +5.2812e-01  9.80e-02  6.90e-03  9.80e-02  4.26e-03  2.61e-02  6.07e-01  
  5  +4.1854e-01  +4.9384e-01  7.53e-02  3.51e-03  5.10e-02  2.82e-03  1.58e-02  6.23e-01  
  6  +4.0284e-01  +4.1321e-01  1.04e-02  4.37e-04  6.36e-03  3.33e-04  2.19e-03  8.73e-01  
  7  +4.0013e-01  +4.0025e-01  1.17e-04  4.93e-06  7.16e-05  3.39e-06  2.51e-05  9.89e-01  
  8  +4.0010e-01  +4.0010e-01  1.17e-06  4.93e-08  7.16e-07  3.39e-08  2.51e-07  9.90e-01  
  9  +4.0010e-01  +4.0010e-01  1.17e-08  4.93e-10  7.16e-09  3.39e-10  2.51e-09  9.90e-01  
 10  +4.0010e-01  +4.0010e-01  1.17e-10  4.93e-12  7.16e-11  3.39e-12  2.51e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 855.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:57 PM: Optimal value: 4.001e-01
(CVXPY) Sep 20 07:55:57 PM: Compilation took 9.000e-03 seconds
(CVXPY) Sep 20 07:55:57 PM: Solver (including time spent in interface) took 9.880e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:57 PM: Your problem has 54 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:57 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 54
  constraints   = 79
  nnz(P)        = 0
  nnz(A)        = 382
  cones (total) = 1
    : Nonnegative = 1,  numel = 79

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8839e-01  +2.6541e+01  2.61e+01  8.47e-01  6.86e+00  1.00e+00  1.09e+00   ------   
  1  +5.2962e-01  +5.8461e+00  5.32e+00  3.77e-01  3.87e+00  3.79e-03  6.09e-01  5.99e-01  
  2  +4.3988e-01  +1.5284e+00  1.09e+00  1.06e-01  1.40e+00  2.17e-02  2.72e-01  8.52e-01  
  3  +3.3720e-01  +7.3214e-01  3.95e-01  2.48e-02  3.41e-01  9.69e-03  8.29e-02  9.00e-01  
  4  +3.0356e-01  +4.1828e-01  1.15e-01  6.80e-03  1.01e-01  2.75e-03  2.60e-02  7.42e-01  
  5  +2.8726e-01  +3.1252e-01  2.53e-02  1.52e-03  2.27e-02  1.77e-04  6.45e-03  8.89e-01  
  6  +2.8063e-01  +2.8189e-01  1.26e-03  7.38e-05  1.12e-03  7.27e-06  3.33e-04  9.58e-01  
  7  +2.8032e-01  +2.8041e-01  8.98e-05  5.40e-06  7.92e-05  3.50e-07  2.55e-05  9.25e-01  
  8  +2.8030e-01  +2.8030e-01  1.73e-06  1.06e-07  1.51e-06  6.45e-09  5.25e-07  9.82e-01  
  9  +2.8030e-01  +2.8030e-01  1.73e-08  1.05e-09  1.51e-08  6.44e-11  5.25e-09  9.90e-01  
 10  +2.8030e-01  +2.8030e-01  1.73e-10  1.05e-11  1.51e-10  6.46e-13  5.26e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 518.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:57 PM: Optimal value: 2.803e-01
(CVXPY) Sep 20 07:55:57 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:55:57 PM: Solver (including time spent in interface) took 1.510e-03 seconds
Iteration: 2, Objective: 0.2803
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:57 PM: Your problem has 64 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:57 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 64
  constraints   = 89
  nnz(P)        = 0
  nnz(A)        = 449
  cones (total) = 1
    : Nonnegative = 1,  numel = 89

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7497e-01  +2.7009e+01  2.65e+01  8.56e-01  6.86e+00  1.00e+00  1.11e+00   ------   
  1  +4.6838e-01  +5.8471e+00  5.38e+00  3.79e-01  3.73e+00  3.86e-03  6.04e-01  6.07e-01  
  2  +3.4908e-01  +1.4607e+00  1.11e+00  9.19e-02  1.24e+00  2.21e-02  2.27e-01  8.85e-01  
  3  +2.6895e-01  +5.6771e-01  2.99e-01  1.84e-02  2.67e-01  9.21e-03  5.42e-02  8.84e-01  
  4  +2.0986e-01  +3.6385e-01  1.54e-01  7.08e-03  1.22e-01  4.64e-03  2.25e-02  6.90e-01  
  5  +1.6379e-01  +2.1211e-01  4.83e-02  2.04e-03  3.58e-02  4.06e-04  6.96e-03  9.85e-01  
  6  +1.4177e-01  +1.4428e-01  2.51e-03  1.01e-04  1.80e-03  1.87e-05  3.59e-04  9.55e-01  
  7  +1.4065e-01  +1.4075e-01  9.61e-05  3.99e-06  6.94e-05  3.84e-07  1.44e-05  9.60e-01  
  8  +1.4060e-01  +1.4060e-01  1.79e-06  7.79e-08  1.31e-06  7.80e-09  2.90e-07  9.81e-01  
  9  +1.4060e-01  +1.4060e-01  1.79e-08  7.79e-10  1.31e-08  7.79e-11  2.90e-09  9.90e-01  
 10  +1.4060e-01  +1.4060e-01  1.79e-10  7.81e-12  1.31e-10  7.80e-13  2.91e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 456µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:57 PM: Optimal value: 1.406e-01
(CVXPY) Sep 20 07:55:57 PM: Compilation took 3.000e-03 seconds
(CVXPY) Sep 20 07:55:57 PM: Solver (including time spent in interface) took 1.194e-03 seconds
Iteration: 3, Objective: 0.1406
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:57 PM: Your problem has 74 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:57 PM: Finished problem compilation (took 4.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 74
  constraints   = 99
  nnz(P)        = 0
  nnz(A)        = 495
  cones (total) = 1
    : Nonnegative = 1,  numel = 99

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6734e-01  +2.7093e+01  2.66e+01  8.64e-01  6.69e+00  1.00e+00  1.11e+00   ------   
  1  +4.1160e-01  +5.8047e+00  5.39e+00  3.76e-01  3.51e+00  3.96e-03  5.89e-01  6.13e-01  
  2  +2.4816e-01  +1.3441e+00  1.10e+00  7.62e-02  9.88e-01  2.22e-02  1.87e-01  9.08e-01  
  3  +1.6221e-01  +4.7849e-01  3.16e-01  1.92e-02  2.60e-01  7.37e-03  5.40e-02  8.19e-01  
  4  +1.0399e-01  +2.1840e-01  1.14e-01  5.77e-03  8.66e-02  2.49e-03  1.79e-02  8.20e-01  
  5  +6.7163e-02  +8.4789e-02  1.76e-02  8.04e-04  1.24e-02  3.24e-04  2.66e-03  8.90e-01  
  6  +6.0948e-02  +6.1319e-02  3.72e-04  1.71e-05  2.62e-04  4.43e-06  5.78e-05  9.79e-01  
  7  +6.0806e-02  +6.0821e-02  1.52e-05  7.62e-07  1.12e-05  1.16e-07  2.67e-06  9.55e-01  
  8  +6.0800e-02  +6.0800e-02  1.53e-07  7.72e-09  1.13e-07  1.17e-09  2.71e-08  9.90e-01  
  9  +6.0800e-02  +6.0800e-02  1.53e-09  7.72e-11  1.13e-09  1.17e-11  2.72e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 454.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:57 PM: Optimal value: 6.080e-02
(CVXPY) Sep 20 07:55:57 PM: Compilation took 4.509e-03 seconds
(CVXPY) Sep 20 07:55:57 PM: Solver (including time spent in interface) took 9.999e-04 seconds
Iteration: 4, Objective: 0.0608
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:57 PM: Your problem has 84 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:57 PM: Finished problem compilation (took 3.505e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 84
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 521
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5901e-01  +2.7275e+01  2.68e+01  8.70e-01  6.47e+00  1.00e+00  1.12e+00   ------   
  1  +3.4566e-01  +6.0662e+00  5.72e+00  3.84e-01  3.38e+00  4.17e-03  5.94e-01  5.92e-01  
  2  +1.9809e-01  +1.3350e+00  1.14e+00  8.26e-02  9.79e-01  2.32e-02  2.01e-01  8.98e-01  
  3  +1.3536e-01  +5.5817e-01  4.23e-01  2.78e-02  3.46e-01  9.96e-03  7.67e-02  7.09e-01  
  4  +8.6171e-02  +2.4406e-01  1.58e-01  9.17e-03  1.21e-01  3.58e-03  2.82e-02  7.09e-01  
  5  +5.5486e-02  +1.0894e-01  5.35e-02  2.75e-03  3.82e-02  1.24e-03  8.92e-03  7.20e-01  
  6  +4.1555e-02  +4.4057e-02  2.50e-03  1.27e-04  1.75e-03  4.83e-05  4.25e-04  9.55e-01  
  7  +4.0904e-02  +4.1193e-02  2.89e-04  1.56e-05  2.07e-04  3.70e-06  5.51e-05  8.73e-01  
  8  +4.0812e-02  +4.0850e-02  3.85e-05  2.16e-06  2.77e-05  4.33e-07  8.18e-06  9.16e-01  
  9  +4.0800e-02  +4.0801e-02  4.18e-07  2.36e-08  3.01e-07  4.64e-09  8.94e-08  9.89e-01  
 10  +4.0800e-02  +4.0800e-02  4.18e-09  2.36e-10  3.01e-09  4.64e-11  8.94e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 491.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:57 PM: Optimal value: 4.080e-02
(CVXPY) Sep 20 07:55:57 PM: Compilation took 3.505e-03 seconds
(CVXPY) Sep 20 07:55:57 PM: Solver (including time spent in interface) took 1.005e-03 seconds
Iteration: 5, Objective: 0.0408
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:57 PM: Your problem has 85 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:57 PM: Finished problem compilation (took 4.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 85
  constraints   = 110
  nnz(P)        = 0
  nnz(A)        = 525
  cones (total) = 1
    : Nonnegative = 1,  numel = 110

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5882e-01  +2.7291e+01  2.68e+01  8.71e-01  6.45e+00  1.00e+00  1.12e+00   ------   
  1  +3.4470e-01  +6.0784e+00  5.73e+00  3.86e-01  3.38e+00  4.17e-03  5.96e-01  5.91e-01  
  2  +1.9527e-01  +1.3235e+00  1.13e+00  8.19e-02  9.70e-01  2.35e-02  2.01e-01  9.03e-01  
  3  +1.3665e-01  +6.0391e-01  4.67e-01  3.08e-02  3.83e-01  1.09e-02  8.48e-02  6.63e-01  
  4  +8.7396e-02  +2.5869e-01  1.71e-01  1.00e-02  1.31e-01  3.95e-03  3.09e-02  6.98e-01  
  5  +5.5215e-02  +1.0822e-01  5.30e-02  2.75e-03  3.79e-02  1.26e-03  8.95e-03  7.49e-01  
  6  +4.1583e-02  +4.4200e-02  2.62e-03  1.34e-04  1.83e-03  5.17e-05  4.52e-04  9.53e-01  
  7  +4.0878e-02  +4.1095e-02  2.18e-04  1.19e-05  1.56e-04  2.25e-06  4.23e-05  9.08e-01  
  8  +4.0810e-02  +4.0849e-02  3.83e-05  2.17e-06  2.77e-05  4.02e-07  8.19e-06  8.54e-01  
  9  +4.0800e-02  +4.0801e-02  4.63e-07  2.64e-08  3.35e-07  4.79e-09  1.00e-07  9.89e-01  
 10  +4.0800e-02  +4.0800e-02  4.63e-09  2.64e-10  3.35e-09  4.80e-11  1.00e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 468.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:57 PM: Optimal value: 4.080e-02
(CVXPY) Sep 20 07:55:57 PM: Compilation took 4.006e-03 seconds
(CVXPY) Sep 20 07:55:57 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.0408
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:57 PM: Your problem has 87 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:57 PM: Finished problem compilation (took 3.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 87
  constraints   = 112
  nnz(P)        = 0
  nnz(A)        = 533
  cones (total) = 1
    : Nonnegative = 1,  numel = 112

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5525e-01  +2.7276e+01  2.68e+01  8.72e-01  6.42e+00  1.00e+00  1.12e+00   ------   
  1  +3.1634e-01  +6.0961e+00  5.78e+00  3.83e-01  3.33e+00  4.25e-03  5.89e-01  5.90e-01  
  2  +1.5969e-01  +1.2662e+00  1.11e+00  7.97e-02  9.30e-01  2.29e-02  1.92e-01  9.03e-01  
  3  +1.1103e-01  +3.5206e-01  2.41e-01  1.83e-02  2.17e-01  5.60e-03  5.00e-02  8.36e-01  
  4  +7.3795e-02  +1.8581e-01  1.12e-01  6.90e-03  9.07e-02  2.77e-03  2.08e-02  6.60e-01  
  5  +4.6158e-02  +6.5880e-02  1.97e-02  1.09e-03  1.48e-02  4.52e-04  3.56e-03  8.42e-01  
  6  +4.1047e-02  +4.1794e-02  7.47e-04  4.18e-05  5.61e-04  1.16e-05  1.40e-04  9.62e-01  
  7  +4.0832e-02  +4.0947e-02  1.15e-04  6.76e-06  8.58e-05  1.32e-06  2.51e-05  8.71e-01  
  8  +4.0802e-02  +4.0807e-02  5.07e-06  3.03e-07  3.81e-06  5.17e-08  1.14e-06  9.83e-01  
  9  +4.0800e-02  +4.0800e-02  5.10e-08  3.04e-09  3.83e-08  5.20e-10  1.15e-08  9.90e-01  
 10  +4.0800e-02  +4.0800e-02  5.11e-10  3.05e-11  3.84e-10  5.21e-12  1.15e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 475µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:57 PM: Optimal value: 4.080e-02
(CVXPY) Sep 20 07:55:57 PM: Compilation took 3.005e-03 seconds
(CVXPY) Sep 20 07:55:57 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.96
  Our objective: 0.92

IF 
    (x0 = 0 AND x1 = 0 AND x4 = 0 AND x5 = 0 AND x8 = 0) <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x6 = 0)            <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.2)
 OR (x0 = 1 AND x1 = 1 AND x5 = 1 AND x6 = 1 AND x8 = 1) <-- (term's our objective: 0.16)
 OR (x0 = 1 AND x3 = 1 AND x8 = 1)                       <-- (term's our objective: 0.2)
 OR (x1 = 0 AND x2 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0) <-- (term's our objective: 0.08)
 OR (x3 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 1)            <-- (term's our objective: 0.12)
 OR (x3 = 1 AND x4 = 1 AND x8 = 1)                       <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.124708890914917
Best over terms:
  Our final objective: 0.19999999999999996
    Its accruacy: 0.6
    Its hamming distance: 12
  Shortest hamming distance: 4
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

