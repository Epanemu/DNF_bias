Command:
python test_script.py -s constant_subclass -d 9 -n 500 --seed 73 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 9.

Computed total variation: 0.6639999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:41 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:41 PM: Finished problem compilation (took 7.540e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 3019
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9978e-01  +2.5075e+02  2.50e+02  9.38e-01  2.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.8034e-01  +5.4640e+01  5.41e+01  4.07e-01  1.58e+01  3.78e-03  5.77e-01  5.86e-01  
  2  +5.2899e-01  +6.3444e+00  5.82e+00  1.29e-01  6.36e+00  1.67e-02  2.65e-01  9.67e-01  
  3  +5.0366e-01  +1.5762e+00  1.07e+00  3.37e-02  1.64e+00  4.03e-05  2.04e-01  7.04e-01  
  4  +5.0062e-01  +6.5276e-01  1.52e-01  4.91e-03  2.48e-01  7.81e-06  4.76e-02  8.03e-01  
  5  +5.0002e-01  +6.2301e-01  1.23e-01  3.53e-03  1.79e-01  1.27e-05  1.78e-02  6.87e-01  
  6  +4.9471e-01  +5.8163e-01  8.69e-02  6.06e-04  3.14e-02  6.21e-05  1.99e-03  9.02e-01  
  7  +4.8934e-01  +5.4282e-01  5.35e-02  3.62e-04  1.87e-02  3.14e-05  1.22e-03  4.95e-01  
  8  +4.8528e-01  +5.1864e-01  3.34e-02  1.93e-04  9.99e-03  2.10e-05  6.72e-04  5.32e-01  
  9  +4.8131e-01  +4.9955e-01  1.82e-02  8.96e-05  4.63e-03  1.22e-05  3.29e-04  5.61e-01  
 10  +4.7837e-01  +4.8534e-01  6.97e-03  3.11e-05  1.60e-03  5.91e-06  1.24e-04  9.90e-01  
 11  +4.7622e-01  +4.7657e-01  3.48e-04  1.41e-06  7.28e-05  2.73e-07  6.13e-06  9.60e-01  
 12  +4.7610e-01  +4.7610e-01  3.51e-06  1.41e-08  7.28e-07  2.75e-09  6.18e-08  9.90e-01  
 13  +4.7610e-01  +4.7610e-01  3.51e-08  1.41e-10  7.28e-09  2.75e-11  6.18e-10  9.90e-01  
 14  +4.7610e-01  +4.7610e-01  3.51e-10  1.41e-12  7.28e-11  2.76e-13  6.21e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.3923ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:41 PM: Optimal value: 4.761e-01
(CVXPY) Sep 20 07:56:41 PM: Compilation took 7.540e-03 seconds
(CVXPY) Sep 20 07:56:41 PM: Solver (including time spent in interface) took 3.997e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4761
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:41 PM: Your problem has 279 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:41 PM: Finished problem compilation (took 5.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 279
  constraints   = 529
  nnz(P)        = 0
  nnz(A)        = 3465
  cones (total) = 1
    : Nonnegative = 1,  numel = 529

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9940e-01  +2.5110e+02  2.51e+02  9.39e-01  2.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.7712e-01  +5.4748e+01  5.42e+01  4.10e-01  1.61e+01  3.78e-03  5.79e-01  5.86e-01  
  2  +5.2585e-01  +6.2419e+00  5.72e+00  1.26e-01  6.29e+00  1.74e-02  2.58e-01  9.90e-01  
  3  +5.0376e-01  +1.3491e+00  8.45e-01  2.98e-02  1.51e+00  5.37e-05  1.24e-01  9.57e-01  
  4  +4.9856e-01  +7.9758e-01  2.99e-01  7.42e-03  3.90e-01  7.06e-05  2.48e-02  8.96e-01  
  5  +4.8593e-01  +7.1943e-01  2.34e-01  1.98e-03  1.06e-01  1.90e-04  5.84e-03  7.73e-01  
  6  +4.7434e-01  +6.8907e-01  2.15e-01  1.26e-03  6.72e-02  1.94e-04  3.77e-03  6.74e-01  
  7  +4.4949e-01  +5.7263e-01  1.23e-01  5.40e-04  2.87e-02  1.20e-04  1.72e-03  6.93e-01  
  8  +4.3214e-01  +4.9981e-01  6.77e-02  2.66e-04  1.41e-02  6.56e-05  8.98e-04  5.18e-01  
  9  +4.1721e-01  +4.4092e-01  2.37e-02  8.75e-05  4.61e-03  2.74e-05  3.17e-04  9.90e-01  
 10  +4.0884e-01  +4.1022e-01  1.37e-03  4.93e-06  2.60e-04  1.40e-06  1.87e-05  9.52e-01  
 11  +4.0831e-01  +4.0832e-01  1.46e-05  5.23e-08  2.76e-06  1.48e-08  1.99e-07  9.89e-01  
 12  +4.0830e-01  +4.0830e-01  1.46e-07  5.23e-10  2.76e-08  1.48e-10  1.99e-09  9.90e-01  
 13  +4.0830e-01  +4.0830e-01  1.46e-09  5.23e-12  2.76e-10  1.48e-12  1.99e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6747ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:41 PM: Optimal value: 4.083e-01
(CVXPY) Sep 20 07:56:41 PM: Compilation took 5.509e-03 seconds
(CVXPY) Sep 20 07:56:41 PM: Solver (including time spent in interface) took 4.004e-03 seconds
Iteration: 2, Objective: 0.4083
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:41 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:41 PM: Finished problem compilation (took 5.012e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 3704
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9918e-01  +2.5122e+02  2.51e+02  9.39e-01  2.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.7408e-01  +5.4789e+01  5.42e+01  4.13e-01  1.60e+01  3.79e-03  5.80e-01  5.86e-01  
  2  +5.2360e-01  +6.3820e+00  5.86e+00  1.26e-01  6.24e+00  1.78e-02  2.56e-01  9.90e-01  
  3  +5.0542e-01  +1.3537e+00  8.48e-01  2.83e-02  1.48e+00  1.18e-03  8.63e-02  8.76e-01  
  4  +5.0466e-01  +1.3549e+00  8.50e-01  2.05e-02  1.10e+00  1.63e-03  5.57e-02  3.81e-01  
  5  +5.0013e-01  +1.5136e+00  1.01e+00  1.26e-02  6.84e-01  1.90e-03  3.26e-02  7.90e-01  
  6  +4.8426e-01  +1.2205e+00  7.36e-01  4.51e-03  2.48e-01  2.70e-03  1.17e-02  6.47e-01  
  7  +4.6676e-01  +1.0052e+00  5.38e-01  2.84e-03  1.55e-01  1.80e-03  7.67e-03  4.45e-01  
  8  +4.4699e-01  +8.1005e-01  3.63e-01  1.70e-03  9.28e-02  9.52e-04  4.83e-03  5.24e-01  
  9  +4.3016e-01  +6.5013e-01  2.20e-01  1.11e-03  6.02e-02  1.40e-04  3.34e-03  8.50e-01  
 10  +3.9160e-01  +4.5492e-01  6.33e-02  2.66e-04  1.45e-02  3.93e-05  8.81e-04  7.71e-01  
 11  +3.7526e-01  +3.8878e-01  1.35e-02  5.48e-05  3.01e-03  1.04e-05  1.95e-04  8.53e-01  
 12  +3.7082e-01  +3.7104e-01  2.14e-04  8.63e-07  4.75e-05  1.54e-07  3.14e-06  9.85e-01  
 13  +3.7075e-01  +3.7075e-01  2.14e-06  8.63e-09  4.75e-07  1.54e-09  3.14e-08  9.90e-01  
 14  +3.7075e-01  +3.7075e-01  2.14e-08  8.63e-11  4.75e-09  1.54e-11  3.15e-10  9.90e-01  
 15  +3.7075e-01  +3.7075e-01  2.14e-10  8.63e-13  4.75e-11  1.54e-13  3.15e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.0254ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:41 PM: Optimal value: 3.708e-01
(CVXPY) Sep 20 07:56:41 PM: Compilation took 5.012e-03 seconds
(CVXPY) Sep 20 07:56:41 PM: Solver (including time spent in interface) took 6.534e-03 seconds
Iteration: 3, Objective: 0.3708
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:41 PM: Your problem has 299 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:41 PM: Finished problem compilation (took 4.514e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 299
  constraints   = 549
  nnz(P)        = 0
  nnz(A)        = 3857
  cones (total) = 1
    : Nonnegative = 1,  numel = 549

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9899e-01  +2.5131e+02  2.51e+02  9.40e-01  2.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.7014e-01  +5.4871e+01  5.43e+01  4.15e-01  1.58e+01  3.79e-03  5.80e-01  5.85e-01  
  2  +5.2146e-01  +6.5250e+00  6.00e+00  1.25e-01  6.19e+00  1.82e-02  2.55e-01  9.90e-01  
  3  +5.0680e-01  +1.7522e+00  1.25e+00  3.58e-02  1.89e+00  3.12e-03  9.56e-02  7.13e-01  
  4  +5.0604e-01  +1.7355e+00  1.23e+00  2.91e-02  1.55e+00  3.65e-03  7.50e-02  2.28e-01  
  5  +5.0247e-01  +1.6916e+00  1.19e+00  2.51e-02  1.32e+00  2.51e-03  7.10e-02  3.06e-01  
  6  +4.8626e-01  +1.3055e+00  8.19e-01  6.21e-03  3.40e-01  5.40e-03  1.57e-02  7.89e-01  
  7  +4.6703e-01  +1.1363e+00  6.69e-01  3.59e-03  1.96e-01  4.95e-03  9.32e-03  4.96e-01  
  8  +4.4748e-01  +9.4394e-01  4.96e-01  2.46e-03  1.33e-01  2.63e-03  6.65e-03  4.43e-01  
  9  +4.0221e-01  +5.8921e-01  1.87e-01  8.80e-04  4.70e-02  1.07e-04  2.68e-03  8.16e-01  
 10  +3.7603e-01  +4.7026e-01  9.42e-02  4.14e-04  2.22e-02  6.25e-05  1.37e-03  6.11e-01  
 11  +3.6049e-01  +4.0140e-01  4.09e-02  1.74e-04  9.33e-03  2.96e-05  6.10e-04  6.30e-01  
 12  +3.4877e-01  +3.5114e-01  2.37e-03  9.97e-06  5.31e-04  2.14e-06  3.68e-05  9.86e-01  
 13  +3.4803e-01  +3.4838e-01  3.46e-04  1.44e-06  7.67e-05  3.14e-07  5.46e-06  8.70e-01  
 14  +3.4790e-01  +3.4791e-01  5.35e-06  2.22e-08  1.18e-06  4.79e-09  8.49e-08  9.86e-01  
 15  +3.4790e-01  +3.4790e-01  5.35e-08  2.22e-10  1.18e-08  4.79e-11  8.49e-10  9.90e-01  
 16  +3.4790e-01  +3.4790e-01  5.35e-10  2.22e-12  1.18e-10  4.81e-13  8.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.6315ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:41 PM: Optimal value: 3.479e-01
(CVXPY) Sep 20 07:56:41 PM: Compilation took 4.514e-03 seconds
(CVXPY) Sep 20 07:56:41 PM: Solver (including time spent in interface) took 5.999e-03 seconds
Iteration: 4, Objective: 0.3479
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:41 PM: Your problem has 309 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:41 PM: Finished problem compilation (took 5.518e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 309
  constraints   = 559
  nnz(P)        = 0
  nnz(A)        = 4009
  cones (total) = 1
    : Nonnegative = 1,  numel = 559

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9891e-01  +2.5146e+02  2.51e+02  9.40e-01  2.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.6776e-01  +5.4858e+01  5.43e+01  4.16e-01  1.56e+01  3.80e-03  5.80e-01  5.86e-01  
  2  +5.1971e-01  +6.6345e+00  6.11e+00  1.25e-01  6.07e+00  1.85e-02  2.52e-01  9.90e-01  
  3  +5.0535e-01  +1.5786e+00  1.07e+00  2.81e-02  1.50e+00  3.17e-03  7.35e-02  7.53e-01  
  4  +5.0507e-01  +1.6582e+00  1.15e+00  2.51e-02  1.35e+00  3.65e-03  6.32e-02  2.29e-01  
  5  +4.9966e-01  +1.9885e+00  1.49e+00  1.94e-02  1.05e+00  3.88e-03  4.77e-02  6.68e-01  
  6  +4.7508e-01  +1.5476e+00  1.07e+00  5.78e-03  3.20e-01  6.67e-03  1.41e-02  7.10e-01  
  7  +4.4682e-01  +1.1941e+00  7.47e-01  3.62e-03  1.98e-01  3.93e-03  9.29e-03  4.25e-01  
  8  +4.1052e-01  +7.6497e-01  3.54e-01  1.96e-03  1.05e-01  3.07e-05  5.68e-03  7.31e-01  
  9  +3.7847e-01  +5.6847e-01  1.90e-01  9.45e-04  5.02e-02  4.06e-05  2.97e-03  5.51e-01  
 10  +3.6050e-01  +4.7537e-01  1.15e-01  5.40e-04  2.86e-02  4.60e-05  1.79e-03  5.33e-01  
 11  +3.4434e-01  +3.9472e-01  5.04e-02  2.30e-04  1.22e-02  2.43e-05  8.11e-04  6.13e-01  
 12  +3.3331e-01  +3.4087e-01  7.56e-03  3.41e-05  1.80e-03  5.57e-06  1.27e-04  9.22e-01  
 13  +3.3133e-01  +3.3220e-01  8.71e-04  3.92e-06  2.06e-04  6.30e-07  1.49e-05  8.92e-01  
 14  +3.3109e-01  +3.3122e-01  1.23e-04  5.47e-07  2.87e-05  9.21e-08  2.16e-06  8.95e-01  
 15  +3.3105e-01  +3.3106e-01  3.85e-06  1.68e-08  8.84e-07  3.12e-09  6.84e-08  9.82e-01  
 16  +3.3105e-01  +3.3105e-01  3.86e-08  1.69e-10  8.86e-09  3.13e-11  6.86e-10  9.90e-01  
 17  +3.3105e-01  +3.3105e-01  3.86e-10  1.69e-12  8.86e-11  3.16e-13  6.93e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.8637ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:41 PM: Optimal value: 3.311e-01
(CVXPY) Sep 20 07:56:41 PM: Compilation took 5.518e-03 seconds
(CVXPY) Sep 20 07:56:41 PM: Solver (including time spent in interface) took 8.003e-03 seconds
Iteration: 5, Objective: 0.3311
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:41 PM: Your problem has 319 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:41 PM: Finished problem compilation (took 6.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 319
  constraints   = 569
  nnz(P)        = 0
  nnz(A)        = 4148
  cones (total) = 1
    : Nonnegative = 1,  numel = 569

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9869e-01  +2.5179e+02  2.51e+02  9.41e-01  2.51e+01  1.00e+00  1.02e+00   ------   
  1  +5.6352e-01  +5.5005e+01  5.44e+01  4.18e-01  1.55e+01  3.80e-03  5.81e-01  5.85e-01  
  2  +5.1733e-01  +6.7807e+00  6.26e+00  1.25e-01  5.96e+00  1.89e-02  2.51e-01  9.90e-01  
  3  +5.0372e-01  +1.7623e+00  1.26e+00  2.91e-02  1.54e+00  4.43e-03  7.34e-02  7.33e-01  
  4  +4.8853e-01  +1.7691e+00  1.28e+00  1.21e-02  6.64e-01  8.43e-03  2.92e-02  6.98e-01  
  5  +4.6216e-01  +1.3196e+00  8.57e-01  6.09e-03  3.31e-01  5.34e-03  1.55e-02  5.76e-01  
  6  +4.3556e-01  +1.0964e+00  6.61e-01  3.63e-03  1.96e-01  4.31e-03  9.62e-03  4.41e-01  
  7  +4.1284e-01  +9.1217e-01  4.99e-01  2.58e-03  1.38e-01  2.77e-03  7.19e-03  3.34e-01  
  8  +3.7084e-01  +5.8903e-01  2.18e-01  1.12e-03  5.90e-02  3.74e-04  3.59e-03  7.59e-01  
  9  +3.4693e-01  +4.5685e-01  1.10e-01  5.31e-04  2.78e-02  1.57e-04  1.84e-03  6.72e-01  
 10  +3.3095e-01  +3.7734e-01  4.64e-02  2.12e-04  1.12e-02  5.61e-05  7.94e-04  8.04e-01  
 11  +3.2042e-01  +3.2975e-01  9.33e-03  4.14e-05  2.18e-03  9.23e-06  1.65e-04  9.90e-01  
 12  +3.1771e-01  +3.1908e-01  1.37e-03  6.03e-06  3.16e-04  1.33e-06  2.48e-05  8.64e-01  
 13  +3.1726e-01  +3.1741e-01  1.53e-04  6.56e-07  3.43e-05  1.44e-07  2.77e-06  9.45e-01  
 14  +3.1720e-01  +3.1720e-01  1.55e-06  6.64e-09  3.47e-07  1.45e-09  2.81e-08  9.90e-01  
 15  +3.1720e-01  +3.1720e-01  1.55e-08  6.64e-11  3.47e-09  1.45e-11  2.81e-10  9.90e-01  
 16  +3.1720e-01  +3.1720e-01  1.55e-10  6.64e-13  3.47e-11  1.45e-13  2.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.756ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:41 PM: Optimal value: 3.172e-01
(CVXPY) Sep 20 07:56:41 PM: Compilation took 6.005e-03 seconds
(CVXPY) Sep 20 07:56:41 PM: Solver (including time spent in interface) took 7.511e-03 seconds
Iteration: 6, Objective: 0.3172
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:41 PM: Your problem has 329 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:41 PM: Finished problem compilation (took 5.483e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 329
  constraints   = 579
  nnz(P)        = 0
  nnz(A)        = 4244
  cones (total) = 1
    : Nonnegative = 1,  numel = 579

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9868e-01  +2.5187e+02  2.51e+02  9.42e-01  2.49e+01  1.00e+00  1.02e+00   ------   
  1  +5.6154e-01  +5.5014e+01  5.45e+01  4.19e-01  1.52e+01  3.81e-03  5.80e-01  5.86e-01  
  2  +5.1566e-01  +6.8472e+00  6.33e+00  1.24e-01  5.87e+00  1.91e-02  2.49e-01  9.90e-01  
  3  +5.0222e-01  +1.7980e+00  1.30e+00  2.79e-02  1.48e+00  4.91e-03  6.94e-02  7.41e-01  
  4  +4.8292e-01  +1.7083e+00  1.23e+00  1.08e-02  5.93e-01  9.30e-03  2.60e-02  6.88e-01  
  5  +4.5475e-01  +1.3155e+00  8.61e-01  5.85e-03  3.17e-01  5.85e-03  1.49e-02  5.51e-01  
  6  +4.2540e-01  +1.0804e+00  6.55e-01  3.49e-03  1.88e-01  4.36e-03  9.28e-03  4.67e-01  
  7  +3.7707e-01  +6.6078e-01  2.84e-01  1.55e-03  8.13e-02  3.70e-05  4.76e-03  7.95e-01  
  8  +3.4764e-01  +4.9814e-01  1.50e-01  7.61e-04  3.96e-02  2.60e-05  2.54e-03  4.98e-01  
  9  +3.3353e-01  +4.2811e-01  9.46e-02  4.62e-04  2.39e-02  2.13e-05  1.62e-03  4.06e-01  
 10  +3.1753e-01  +3.5048e-01  3.30e-02  1.55e-04  7.99e-03  1.07e-05  5.87e-04  6.91e-01  
 11  +3.1073e-01  +3.2134e-01  1.06e-02  4.70e-05  2.43e-03  6.14e-06  1.92e-04  8.09e-01  
 12  +3.0754e-01  +3.0821e-01  6.75e-04  2.94e-06  1.52e-04  4.05e-07  1.25e-05  9.50e-01  
 13  +3.0730e-01  +3.0731e-01  8.24e-06  3.58e-08  1.85e-06  4.88e-09  1.55e-07  9.89e-01  
 14  +3.0730e-01  +3.0730e-01  8.23e-08  3.58e-10  1.85e-08  4.88e-11  1.55e-09  9.90e-01  
 15  +3.0730e-01  +3.0730e-01  8.23e-10  3.58e-12  1.85e-10  4.88e-13  1.55e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.5328ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:42 PM: Optimal value: 3.073e-01
(CVXPY) Sep 20 07:56:42 PM: Compilation took 5.483e-03 seconds
(CVXPY) Sep 20 07:56:42 PM: Solver (including time spent in interface) took 6.520e-03 seconds
Iteration: 7, Objective: 0.3073
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:42 PM: Your problem has 339 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:42 PM: Finished problem compilation (took 5.534e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 339
  constraints   = 589
  nnz(P)        = 0
  nnz(A)        = 4333
  cones (total) = 1
    : Nonnegative = 1,  numel = 589

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9855e-01  +2.5195e+02  2.51e+02  9.42e-01  2.48e+01  1.00e+00  1.02e+00   ------   
  1  +5.5724e-01  +5.5080e+01  5.45e+01  4.20e-01  1.50e+01  3.82e-03  5.79e-01  5.86e-01  
  2  +5.1291e-01  +6.9869e+00  6.47e+00  1.23e-01  5.76e+00  1.95e-02  2.46e-01  9.90e-01  
  3  +4.9900e-01  +1.8439e+00  1.34e+00  2.58e-02  1.37e+00  5.73e-03  6.30e-02  7.61e-01  
  4  +4.7123e-01  +1.6680e+00  1.20e+00  9.36e-03  5.14e-01  1.09e-02  2.24e-02  6.86e-01  
  5  +4.3916e-01  +1.3583e+00  9.19e-01  5.53e-03  3.00e-01  8.41e-03  1.39e-02  4.64e-01  
  6  +4.0922e-01  +1.0799e+00  6.71e-01  3.70e-03  1.98e-01  4.97e-03  9.82e-03  3.88e-01  
  7  +3.5814e-01  +6.6315e-01  3.05e-01  1.67e-03  8.71e-02  4.35e-05  5.14e-03  8.43e-01  
  8  +3.2607e-01  +4.8252e-01  1.56e-01  7.85e-04  4.09e-02  3.42e-05  2.65e-03  5.35e-01  
  9  +3.0774e-01  +3.9142e-01  8.37e-02  4.07e-04  2.12e-02  4.03e-05  1.46e-03  6.49e-01  
 10  +2.9247e-01  +3.1881e-01  2.63e-02  1.24e-04  6.46e-03  1.36e-05  4.77e-04  7.12e-01  
 11  +2.8703e-01  +2.9447e-01  7.45e-03  3.39e-05  1.76e-03  5.08e-06  1.38e-04  8.31e-01  
 12  +2.8479e-01  +2.8519e-01  3.96e-04  1.80e-06  9.29e-05  2.55e-07  7.58e-06  9.61e-01  
 13  +2.8465e-01  +2.8466e-01  4.23e-06  1.92e-08  9.90e-07  2.65e-09  8.19e-08  9.90e-01  
 14  +2.8465e-01  +2.8465e-01  4.23e-08  1.92e-10  9.90e-09  2.65e-11  8.19e-10  9.90e-01  
 15  +2.8465e-01  +2.8465e-01  4.23e-10  1.92e-12  9.90e-11  2.66e-13  8.20e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.9732ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:42 PM: Optimal value: 2.847e-01
(CVXPY) Sep 20 07:56:42 PM: Compilation took 5.534e-03 seconds
(CVXPY) Sep 20 07:56:42 PM: Solver (including time spent in interface) took 8.009e-03 seconds
Iteration: 8, Objective: 0.2847
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:42 PM: Your problem has 349 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:42 PM: Finished problem compilation (took 4.993e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 349
  constraints   = 599
  nnz(P)        = 0
  nnz(A)        = 4462
  cones (total) = 1
    : Nonnegative = 1,  numel = 599

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9842e-01  +2.5193e+02  2.51e+02  9.43e-01  2.46e+01  1.00e+00  1.02e+00   ------   
  1  +5.5496e-01  +5.5117e+01  5.46e+01  4.21e-01  1.49e+01  3.83e-03  5.79e-01  5.86e-01  
  2  +5.1061e-01  +7.0753e+00  6.56e+00  1.22e-01  5.69e+00  1.97e-02  2.45e-01  9.90e-01  
  3  +4.9612e-01  +1.8539e+00  1.36e+00  2.42e-02  1.29e+00  6.22e-03  5.85e-02  7.78e-01  
  4  +4.6562e-01  +1.5854e+00  1.12e+00  8.87e-03  4.85e-01  1.04e-02  2.12e-02  6.67e-01  
  5  +4.2850e-01  +1.2890e+00  8.60e-01  5.01e-03  2.70e-01  8.07e-03  1.26e-02  5.10e-01  
  6  +4.0114e-01  +1.0474e+00  6.46e-01  3.52e-03  1.87e-01  4.92e-03  9.38e-03  3.60e-01  
  7  +3.4943e-01  +6.2591e-01  2.76e-01  1.51e-03  7.85e-02  4.27e-05  4.66e-03  8.63e-01  
  8  +3.1861e-01  +4.5587e-01  1.37e-01  6.85e-04  3.57e-02  4.11e-05  2.30e-03  5.96e-01  
  9  +2.9727e-01  +3.5368e-01  5.64e-02  2.66e-04  1.39e-02  4.48e-05  9.59e-04  8.86e-01  
 10  +2.8774e-01  +3.1100e-01  2.33e-02  1.07e-04  5.62e-03  1.84e-05  4.09e-04  6.04e-01  
 11  +2.8158e-01  +2.8384e-01  2.26e-03  1.03e-05  5.38e-04  1.96e-06  4.16e-05  9.90e-01  
 12  +2.8078e-01  +2.8088e-01  9.17e-05  4.19e-07  2.17e-05  6.71e-08  1.75e-06  9.64e-01  
 13  +2.8075e-01  +2.8075e-01  9.33e-07  4.26e-09  2.21e-07  6.81e-10  1.79e-08  9.90e-01  
 14  +2.8075e-01  +2.8075e-01  9.36e-09  4.28e-11  2.22e-09  6.83e-12  1.79e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.186ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:42 PM: Optimal value: 2.808e-01
(CVXPY) Sep 20 07:56:42 PM: Compilation took 4.993e-03 seconds
(CVXPY) Sep 20 07:56:42 PM: Solver (including time spent in interface) took 8.013e-03 seconds
Iteration: 9, Objective: 0.2808
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:42 PM: Your problem has 359 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:42 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 359
  constraints   = 609
  nnz(P)        = 0
  nnz(A)        = 4506
  cones (total) = 1
    : Nonnegative = 1,  numel = 609

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9832e-01  +2.5210e+02  2.52e+02  9.43e-01  2.44e+01  1.00e+00  1.02e+00   ------   
  1  +5.5103e-01  +5.5254e+01  5.47e+01  4.23e-01  1.47e+01  3.83e-03  5.80e-01  5.85e-01  
  2  +5.0785e-01  +7.2066e+00  6.70e+00  1.21e-01  5.64e+00  2.01e-02  2.44e-01  9.90e-01  
  3  +4.9244e-01  +1.8541e+00  1.36e+00  2.24e-02  1.19e+00  6.74e-03  5.39e-02  7.94e-01  
  4  +4.5663e-01  +1.4887e+00  1.03e+00  8.01e-03  4.34e-01  1.00e-02  1.92e-02  6.70e-01  
  5  +4.1256e-01  +1.1712e+00  7.59e-01  4.17e-03  2.23e-01  7.78e-03  1.07e-02  5.40e-01  
  6  +3.7969e-01  +9.1746e-01  5.38e-01  2.88e-03  1.51e-01  3.31e-03  7.87e-03  4.75e-01  
  7  +3.3071e-01  +5.7287e-01  2.42e-01  1.24e-03  6.40e-02  8.88e-04  3.85e-03  6.43e-01  
  8  +3.0035e-01  +4.1672e-01  1.16e-01  5.65e-04  2.95e-02  3.46e-04  1.95e-03  6.02e-01  
  9  +2.7874e-01  +3.1195e-01  3.32e-02  1.57e-04  8.16e-03  6.10e-05  6.02e-04  8.44e-01  
 10  +2.6972e-01  +2.7178e-01  2.06e-03  9.68e-06  5.01e-04  2.62e-06  3.98e-05  9.47e-01  
 11  +2.6908e-01  +2.6916e-01  8.46e-05  3.99e-07  2.05e-05  8.44e-08  1.71e-06  9.64e-01  
 12  +2.6905e-01  +2.6905e-01  8.60e-07  4.06e-09  2.09e-07  8.55e-10  1.75e-08  9.90e-01  
 13  +2.6905e-01  +2.6905e-01  8.62e-09  4.07e-11  2.09e-09  8.57e-12  1.75e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.7548ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:42 PM: Optimal value: 2.691e-01
(CVXPY) Sep 20 07:56:42 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:56:42 PM: Solver (including time spent in interface) took 7.455e-03 seconds
Iteration: 10, Objective: 0.2691
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:42 PM: Your problem has 369 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:42 PM: Finished problem compilation (took 5.201e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 369
  constraints   = 619
  nnz(P)        = 0
  nnz(A)        = 4579
  cones (total) = 1
    : Nonnegative = 1,  numel = 619

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9829e-01  +2.5212e+02  2.52e+02  9.43e-01  2.43e+01  1.00e+00  1.02e+00   ------   
  1  +5.4933e-01  +5.5289e+01  5.47e+01  4.24e-01  1.46e+01  3.84e-03  5.79e-01  5.85e-01  
  2  +5.0649e-01  +7.2508e+00  6.74e+00  1.21e-01  5.55e+00  2.03e-02  2.43e-01  9.90e-01  
  3  +4.9039e-01  +1.8970e+00  1.41e+00  2.22e-02  1.18e+00  7.09e-03  5.34e-02  7.96e-01  
  4  +4.5134e-01  +1.4625e+00  1.01e+00  7.74e-03  4.17e-01  9.77e-03  1.87e-02  6.78e-01  
  5  +4.1105e-01  +1.1831e+00  7.72e-01  4.32e-03  2.30e-01  8.01e-03  1.10e-02  4.88e-01  
  6  +3.8203e-01  +9.7055e-01  5.89e-01  3.11e-03  1.63e-01  4.38e-03  8.36e-03  4.16e-01  
  7  +3.3238e-01  +6.0240e-01  2.70e-01  1.40e-03  7.21e-02  8.26e-04  4.29e-03  7.13e-01  
  8  +2.9782e-01  +4.1810e-01  1.20e-01  5.91e-04  3.07e-02  2.58e-04  2.00e-03  7.05e-01  
  9  +2.7764e-01  +3.1979e-01  4.22e-02  2.02e-04  1.05e-02  6.83e-05  7.38e-04  7.71e-01  
 10  +2.7084e-01  +2.8910e-01  1.83e-02  8.57e-05  4.46e-03  2.51e-05  3.29e-04  7.16e-01  
 11  +2.6563e-01  +2.6700e-01  1.37e-03  6.41e-06  3.32e-04  1.47e-06  2.60e-05  9.40e-01  
 12  +2.6518e-01  +2.6527e-01  9.10e-05  4.24e-07  2.19e-05  8.17e-08  1.80e-06  9.49e-01  
 13  +2.6515e-01  +2.6515e-01  9.59e-07  4.46e-09  2.31e-07  8.49e-10  1.91e-08  9.90e-01  
 14  +2.6515e-01  +2.6515e-01  9.61e-09  4.47e-11  2.31e-09  8.50e-12  1.91e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.7245ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:42 PM: Optimal value: 2.652e-01
(CVXPY) Sep 20 07:56:42 PM: Compilation took 5.201e-03 seconds
(CVXPY) Sep 20 07:56:42 PM: Solver (including time spent in interface) took 8.535e-03 seconds
Iteration: 11, Objective: 0.2652
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:42 PM: Your problem has 379 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:42 PM: Finished problem compilation (took 4.531e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 379
  constraints   = 629
  nnz(P)        = 0
  nnz(A)        = 4659
  cones (total) = 1
    : Nonnegative = 1,  numel = 629

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9829e-01  +2.5220e+02  2.52e+02  9.44e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.4716e-01  +5.5225e+01  5.47e+01  4.24e-01  1.44e+01  3.85e-03  5.77e-01  5.86e-01  
  2  +5.0417e-01  +7.3241e+00  6.82e+00  1.19e-01  5.41e+00  2.04e-02  2.39e-01  9.90e-01  
  3  +4.8586e-01  +1.7437e+00  1.26e+00  1.83e-02  9.67e-01  7.19e-03  4.42e-02  8.32e-01  
  4  +4.4347e-01  +1.3648e+00  9.21e-01  6.85e-03  3.64e-01  9.15e-03  1.68e-02  6.70e-01  
  5  +4.0582e-01  +1.1469e+00  7.41e-01  4.00e-03  2.10e-01  8.10e-03  1.02e-02  4.64e-01  
  6  +3.5416e-01  +7.3714e-01  3.83e-01  2.18e-03  1.11e-01  5.13e-04  6.33e-03  6.85e-01  
  7  +3.0724e-01  +4.7985e-01  1.73e-01  8.68e-04  4.42e-02  2.08e-04  2.79e-03  6.42e-01  
  8  +2.9152e-01  +4.1207e-01  1.21e-01  5.77e-04  2.99e-02  1.43e-04  1.93e-03  4.01e-01  
  9  +2.6798e-01  +3.0692e-01  3.89e-02  1.79e-04  9.30e-03  4.05e-05  6.52e-04  7.85e-01  
 10  +2.5999e-01  +2.7308e-01  1.31e-02  5.85e-05  3.05e-03  1.31e-05  2.26e-04  8.61e-01  
 11  +2.5583e-01  +2.5684e-01  1.02e-03  4.52e-06  2.35e-04  8.70e-07  1.84e-05  9.27e-01  
 12  +2.5546e-01  +2.5547e-01  1.77e-05  7.92e-08  4.10e-06  1.27e-08  3.30e-07  9.85e-01  
 13  +2.5545e-01  +2.5545e-01  1.77e-07  7.92e-10  4.10e-08  1.27e-10  3.30e-09  9.90e-01  
 14  +2.5545e-01  +2.5545e-01  1.77e-09  7.92e-12  4.10e-10  1.27e-12  3.31e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.6727ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:42 PM: Optimal value: 2.555e-01
(CVXPY) Sep 20 07:56:42 PM: Compilation took 4.531e-03 seconds
(CVXPY) Sep 20 07:56:42 PM: Solver (including time spent in interface) took 8.530e-03 seconds
Iteration: 12, Objective: 0.2555
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:42 PM: Your problem has 389 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:42 PM: Finished problem compilation (took 5.080e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 389
  constraints   = 639
  nnz(P)        = 0
  nnz(A)        = 4713
  cones (total) = 1
    : Nonnegative = 1,  numel = 639

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9816e-01  +2.5230e+02  2.52e+02  9.44e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +5.4273e-01  +5.5298e+01  5.48e+01  4.24e-01  1.42e+01  3.86e-03  5.77e-01  5.86e-01  
  2  +5.0093e-01  +7.4854e+00  6.98e+00  1.17e-01  5.30e+00  2.08e-02  2.36e-01  9.90e-01  
  3  +4.8017e-01  +1.8810e+00  1.40e+00  1.87e-02  9.81e-01  8.21e-03  4.46e-02  8.26e-01  
  4  +4.2825e-01  +1.3890e+00  9.61e-01  6.62e-03  3.50e-01  9.19e-03  1.62e-02  7.10e-01  
  5  +3.9502e-01  +1.1898e+00  7.95e-01  4.33e-03  2.27e-01  7.39e-03  1.10e-02  4.25e-01  
  6  +3.3606e-01  +7.0264e-01  3.67e-01  2.03e-03  1.03e-01  4.71e-04  5.92e-03  7.67e-01  
  7  +2.9927e-01  +4.9451e-01  1.95e-01  1.00e-03  5.11e-02  2.29e-04  3.18e-03  5.54e-01  
  8  +2.7862e-01  +3.9811e-01  1.19e-01  5.78e-04  2.99e-02  1.39e-04  1.92e-03  4.57e-01  
  9  +2.6077e-01  +3.1666e-01  5.59e-02  2.60e-04  1.36e-02  6.23e-05  9.22e-04  5.97e-01  
 10  +2.4935e-01  +2.6616e-01  1.68e-02  7.61e-05  3.98e-03  1.77e-05  2.87e-04  7.93e-01  
 11  +2.4421e-01  +2.4547e-01  1.26e-03  5.68e-06  2.96e-04  1.09e-06  2.26e-05  9.37e-01  
 12  +2.4378e-01  +2.4386e-01  7.70e-05  3.48e-07  1.80e-05  6.28e-08  1.42e-06  9.39e-01  
 13  +2.4375e-01  +2.4375e-01  7.76e-07  3.51e-09  1.82e-07  6.31e-10  1.44e-08  9.90e-01  
 14  +2.4375e-01  +2.4375e-01  7.76e-09  3.51e-11  1.82e-09  6.31e-12  1.44e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.8976ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:42 PM: Optimal value: 2.438e-01
(CVXPY) Sep 20 07:56:42 PM: Compilation took 5.080e-03 seconds
(CVXPY) Sep 20 07:56:42 PM: Solver (including time spent in interface) took 8.332e-03 seconds
Iteration: 13, Objective: 0.2438
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:42 PM: Your problem has 399 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:42 PM: Finished problem compilation (took 5.055e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 399
  constraints   = 649
  nnz(P)        = 0
  nnz(A)        = 4756
  cones (total) = 1
    : Nonnegative = 1,  numel = 649

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9813e-01  +2.5230e+02  2.52e+02  9.45e-01  2.38e+01  1.00e+00  1.02e+00   ------   
  1  +5.4057e-01  +5.5279e+01  5.47e+01  4.25e-01  1.40e+01  3.86e-03  5.75e-01  5.87e-01  
  2  +4.9858e-01  +7.5786e+00  7.08e+00  1.16e-01  5.22e+00  2.11e-02  2.33e-01  9.90e-01  
  3  +4.7573e-01  +1.9433e+00  1.47e+00  1.83e-02  9.59e-01  8.87e-03  4.35e-02  8.28e-01  
  4  +4.1957e-01  +1.3899e+00  9.70e-01  6.36e-03  3.36e-01  9.78e-03  1.56e-02  6.96e-01  
  5  +3.8363e-01  +1.1266e+00  7.43e-01  4.22e-03  2.20e-01  6.34e-03  1.08e-02  4.24e-01  
  6  +3.2277e-01  +6.4308e-01  3.20e-01  1.74e-03  8.84e-02  1.24e-03  5.07e-03  6.85e-01  
  7  +2.8306e-01  +4.4453e-01  1.61e-01  8.14e-04  4.16e-02  3.91e-04  2.62e-03  7.25e-01  
  8  +2.6841e-01  +3.7352e-01  1.05e-01  5.13e-04  2.65e-02  2.29e-04  1.73e-03  4.54e-01  
  9  +2.5039e-01  +2.8809e-01  3.77e-02  1.78e-04  9.27e-03  7.35e-05  6.49e-04  6.64e-01  
 10  +2.4384e-01  +2.5847e-01  1.46e-02  6.72e-05  3.48e-03  2.14e-05  2.58e-04  8.03e-01  
 11  +2.3966e-01  +2.4172e-01  2.06e-03  9.35e-06  4.81e-04  2.57e-06  3.79e-05  8.84e-01  
 12  +2.3901e-01  +2.3930e-01  2.89e-04  1.30e-06  6.64e-05  3.16e-07  5.47e-06  9.04e-01  
 13  +2.3890e-01  +2.3890e-01  3.41e-06  1.53e-08  7.82e-07  3.56e-09  6.49e-08  9.89e-01  
 14  +2.3890e-01  +2.3890e-01  3.41e-08  1.53e-10  7.82e-09  3.56e-11  6.49e-10  9.90e-01  
 15  +2.3890e-01  +2.3890e-01  3.41e-10  1.53e-12  7.82e-11  3.56e-13  6.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.448ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:42 PM: Optimal value: 2.389e-01
(CVXPY) Sep 20 07:56:42 PM: Compilation took 5.055e-03 seconds
(CVXPY) Sep 20 07:56:42 PM: Solver (including time spent in interface) took 9.515e-03 seconds
Iteration: 14, Objective: 0.2389
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:43 PM: Your problem has 409 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:43 PM: Finished problem compilation (took 5.080e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 409
  constraints   = 659
  nnz(P)        = 0
  nnz(A)        = 4800
  cones (total) = 1
    : Nonnegative = 1,  numel = 659

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9805e-01  +2.5223e+02  2.52e+02  9.45e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +5.3804e-01  +5.5296e+01  5.48e+01  4.26e-01  1.39e+01  3.87e-03  5.75e-01  5.87e-01  
  2  +4.9679e-01  +7.6785e+00  7.18e+00  1.15e-01  5.15e+00  2.13e-02  2.31e-01  9.90e-01  
  3  +4.7207e-01  +1.9904e+00  1.52e+00  1.79e-02  9.37e-01  9.42e-03  4.26e-02  8.30e-01  
  4  +4.1665e-01  +1.5028e+00  1.09e+00  7.04e-03  3.70e-01  1.04e-02  1.71e-02  6.63e-01  
  5  +3.6256e-01  +9.9582e-01  6.33e-01  3.59e-03  1.85e-01  4.36e-03  9.37e-03  5.66e-01  
  6  +3.1802e-01  +6.6570e-01  3.48e-01  1.90e-03  9.59e-02  2.03e-03  5.45e-03  4.76e-01  
  7  +2.7680e-01  +4.3371e-01  1.57e-01  8.13e-04  4.14e-02  4.95e-04  2.62e-03  7.69e-01  
  8  +2.6647e-01  +3.8274e-01  1.16e-01  5.85e-04  3.01e-02  3.32e-04  1.95e-03  3.66e-01  
  9  +2.4731e-01  +2.8891e-01  4.16e-02  2.01e-04  1.04e-02  1.02e-04  7.25e-04  6.77e-01  
 10  +2.4035e-01  +2.5637e-01  1.60e-02  7.52e-05  3.88e-03  2.80e-05  2.86e-04  7.96e-01  
 11  +2.3639e-01  +2.4022e-01  3.82e-03  1.76e-05  9.00e-04  5.50e-06  7.07e-05  8.34e-01  
 12  +2.3521e-01  +2.3573e-01  5.28e-04  2.40e-06  1.22e-04  6.27e-07  1.01e-05  9.04e-01  
 13  +2.3501e-01  +2.3502e-01  1.66e-05  7.53e-08  3.82e-06  1.87e-08  3.20e-07  9.70e-01  
 14  +2.3500e-01  +2.3500e-01  1.66e-07  7.53e-10  3.82e-08  1.87e-10  3.20e-09  9.90e-01  
 15  +2.3500e-01  +2.3500e-01  1.66e-09  7.53e-12  3.82e-10  1.87e-12  3.20e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.6903ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:43 PM: Optimal value: 2.350e-01
(CVXPY) Sep 20 07:56:43 PM: Compilation took 5.080e-03 seconds
(CVXPY) Sep 20 07:56:43 PM: Solver (including time spent in interface) took 9.794e-03 seconds
Iteration: 15, Objective: 0.2350
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:43 PM: Your problem has 419 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:43 PM: Finished problem compilation (took 4.512e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 419
  constraints   = 669
  nnz(P)        = 0
  nnz(A)        = 4846
  cones (total) = 1
    : Nonnegative = 1,  numel = 669

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9797e-01  +2.5231e+02  2.52e+02  9.46e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +5.3287e-01  +5.5416e+01  5.49e+01  4.25e-01  1.37e+01  3.88e-03  5.74e-01  5.87e-01  
  2  +4.9208e-01  +7.8001e+00  7.31e+00  1.13e-01  5.07e+00  2.17e-02  2.29e-01  9.90e-01  
  3  +4.6412e-01  +2.0188e+00  1.55e+00  1.73e-02  9.01e-01  9.82e-03  4.11e-02  8.33e-01  
  4  +4.0691e-01  +1.5369e+00  1.13e+00  7.46e-03  3.87e-01  9.27e-03  1.82e-02  6.61e-01  
  5  +3.6380e-01  +1.1116e+00  7.48e-01  4.41e-03  2.26e-01  4.99e-03  1.14e-02  4.68e-01  
  6  +3.1444e-01  +6.9251e-01  3.78e-01  2.15e-03  1.07e-01  1.93e-03  6.11e-03  5.42e-01  
  7  +2.7493e-01  +4.5627e-01  1.81e-01  9.74e-04  4.88e-02  7.16e-04  3.07e-03  6.18e-01  
  8  +2.6143e-01  +3.8964e-01  1.28e-01  6.58e-04  3.35e-02  4.71e-04  2.16e-03  3.76e-01  
  9  +2.4823e-01  +3.2421e-01  7.60e-02  3.78e-04  1.94e-02  2.53e-04  1.31e-03  4.64e-01  
 10  +2.3491e-01  +2.6104e-01  2.61e-02  1.26e-04  6.47e-03  7.82e-05  4.68e-04  6.74e-01  
 11  +2.2946e-01  +2.3634e-01  6.88e-03  3.26e-05  1.66e-03  1.65e-05  1.28e-04  7.93e-01  
 12  +2.2779e-01  +2.2940e-01  1.61e-03  7.54e-06  3.79e-04  2.28e-06  3.13e-05  8.97e-01  
 13  +2.2724e-01  +2.2736e-01  1.18e-04  5.52e-07  2.76e-05  1.54e-07  2.35e-06  9.31e-01  
 14  +2.2720e-01  +2.2720e-01  1.20e-06  5.59e-09  2.80e-07  1.54e-09  2.39e-08  9.90e-01  
 15  +2.2720e-01  +2.2720e-01  1.20e-08  5.59e-11  2.80e-09  1.54e-11  2.39e-10  9.90e-01  
 16  +2.2720e-01  +2.2720e-01  1.20e-10  5.60e-13  2.80e-11  1.55e-13  2.39e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.7472ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:43 PM: Optimal value: 2.272e-01
(CVXPY) Sep 20 07:56:43 PM: Compilation took 4.512e-03 seconds
(CVXPY) Sep 20 07:56:43 PM: Solver (including time spent in interface) took 1.051e-02 seconds
Iteration: 16, Objective: 0.2272
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:43 PM: Your problem has 429 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:43 PM: Finished problem compilation (took 6.507e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 429
  constraints   = 679
  nnz(P)        = 0
  nnz(A)        = 4906
  cones (total) = 1
    : Nonnegative = 1,  numel = 679

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9795e-01  +2.5232e+02  2.52e+02  9.46e-01  2.33e+01  1.00e+00  1.02e+00   ------   
  1  +5.3100e-01  +5.5403e+01  5.49e+01  4.26e-01  1.36e+01  3.89e-03  5.73e-01  5.87e-01  
  2  +4.8996e-01  +7.8576e+00  7.37e+00  1.12e-01  5.00e+00  2.18e-02  2.27e-01  9.90e-01  
  3  +4.6071e-01  +2.1979e+00  1.74e+00  1.88e-02  9.73e-01  1.04e-02  4.45e-02  8.17e-01  
  4  +3.9874e-01  +1.5581e+00  1.16e+00  7.44e-03  3.84e-01  9.23e-03  1.82e-02  6.82e-01  
  5  +3.4157e-01  +9.1198e-01  5.70e-01  3.36e-03  1.69e-01  2.26e-03  8.91e-03  6.67e-01  
  6  +2.9980e-01  +6.2046e-01  3.21e-01  1.80e-03  8.96e-02  1.12e-03  5.20e-03  4.87e-01  
  7  +2.6276e-01  +4.0980e-01  1.47e-01  7.78e-04  3.90e-02  3.64e-04  2.49e-03  7.08e-01  
  8  +2.5530e-01  +3.7341e-01  1.18e-01  6.06e-04  3.08e-02  2.73e-04  1.99e-03  3.08e-01  
  9  +2.3818e-01  +2.8991e-01  5.17e-02  2.52e-04  1.30e-02  1.09e-04  8.89e-04  6.07e-01  
 10  +2.2751e-01  +2.4042e-01  1.29e-02  6.15e-05  3.15e-03  2.22e-05  2.32e-04  8.00e-01  
 11  +2.2464e-01  +2.2843e-01  3.78e-03  1.77e-05  8.94e-04  5.25e-06  7.09e-05  7.96e-01  
 12  +2.2344e-01  +2.2382e-01  3.81e-04  1.77e-06  8.88e-05  4.59e-07  7.47e-06  9.05e-01  
 13  +2.2330e-01  +2.2331e-01  4.88e-06  2.27e-08  1.13e-06  5.23e-09  9.67e-08  9.90e-01  
 14  +2.2330e-01  +2.2330e-01  4.88e-08  2.27e-10  1.14e-08  5.23e-11  9.67e-10  9.90e-01  
 15  +2.2330e-01  +2.2330e-01  4.88e-10  2.27e-12  1.14e-10  5.24e-13  9.69e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.2832ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:43 PM: Optimal value: 2.233e-01
(CVXPY) Sep 20 07:56:43 PM: Compilation took 6.507e-03 seconds
(CVXPY) Sep 20 07:56:43 PM: Solver (including time spent in interface) took 1.107e-02 seconds
Iteration: 17, Objective: 0.2233
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:43 PM: Your problem has 439 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:43 PM: Finished problem compilation (took 6.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 439
  constraints   = 689
  nnz(P)        = 0
  nnz(A)        = 4958
  cones (total) = 1
    : Nonnegative = 1,  numel = 689

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9796e-01  +2.5232e+02  2.52e+02  9.46e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +5.2949e-01  +5.5439e+01  5.49e+01  4.26e-01  1.34e+01  3.90e-03  5.72e-01  5.87e-01  
  2  +4.8794e-01  +7.8876e+00  7.40e+00  1.11e-01  4.91e+00  2.20e-02  2.26e-01  9.90e-01  
  3  +4.5630e-01  +2.0477e+00  1.59e+00  1.67e-02  8.55e-01  1.02e-02  3.97e-02  8.36e-01  
  4  +3.9510e-01  +1.5207e+00  1.13e+00  7.27e-03  3.71e-01  8.65e-03  1.79e-02  6.67e-01  
  5  +3.2947e-01  +8.0719e-01  4.78e-01  2.82e-03  1.40e-01  8.95e-04  7.68e-03  7.84e-01  
  6  +2.9120e-01  +5.7884e-01  2.88e-01  1.61e-03  7.92e-02  5.05e-04  4.74e-03  4.60e-01  
  7  +2.6036e-01  +4.1264e-01  1.52e-01  7.97e-04  3.96e-02  2.51e-04  2.56e-03  5.53e-01  
  8  +2.5060e-01  +3.6659e-01  1.16e-01  5.87e-04  2.96e-02  1.83e-04  1.94e-03  3.37e-01  
  9  +2.3097e-01  +2.7519e-01  4.42e-02  2.11e-04  1.08e-02  6.36e-05  7.63e-04  6.72e-01  
 10  +2.1954e-01  +2.2498e-01  5.44e-03  2.56e-05  1.30e-03  5.40e-06  1.00e-04  9.28e-01  
 11  +2.1816e-01  +2.1965e-01  1.49e-03  7.04e-06  3.53e-04  1.37e-06  2.91e-05  8.14e-01  
 12  +2.1761e-01  +2.1764e-01  3.14e-05  1.49e-07  7.43e-06  2.33e-08  6.33e-07  9.80e-01  
 13  +2.1760e-01  +2.1760e-01  3.14e-07  1.49e-09  7.43e-08  2.32e-10  6.34e-09  9.90e-01  
 14  +2.1760e-01  +2.1760e-01  3.15e-09  1.49e-11  7.44e-10  2.33e-12  6.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.4291ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:43 PM: Optimal value: 2.176e-01
(CVXPY) Sep 20 07:56:43 PM: Compilation took 6.000e-03 seconds
(CVXPY) Sep 20 07:56:43 PM: Solver (including time spent in interface) took 1.151e-02 seconds
Iteration: 18, Objective: 0.2176
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:43 PM: Your problem has 449 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:43 PM: Finished problem compilation (took 4.528e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 449
  constraints   = 699
  nnz(P)        = 0
  nnz(A)        = 5019
  cones (total) = 1
    : Nonnegative = 1,  numel = 699

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9791e-01  +2.5228e+02  2.52e+02  9.47e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +5.2731e-01  +5.5506e+01  5.50e+01  4.27e-01  1.33e+01  3.91e-03  5.71e-01  5.87e-01  
  2  +4.8523e-01  +7.9633e+00  7.48e+00  1.10e-01  4.85e+00  2.22e-02  2.25e-01  9.90e-01  
  3  +4.4997e-01  +2.0049e+00  1.55e+00  1.56e-02  7.94e-01  1.04e-02  3.73e-02  8.47e-01  
  4  +3.9152e-01  +1.6382e+00  1.25e+00  8.06e-03  4.10e-01  9.09e-03  1.99e-02  6.18e-01  
  5  +3.2673e-01  +8.1705e-01  4.90e-01  3.04e-03  1.50e-01  4.32e-04  8.34e-03  8.10e-01  
  6  +2.8130e-01  +5.3413e-01  2.53e-01  1.45e-03  7.12e-02  2.24e-04  4.40e-03  5.73e-01  
  7  +2.5831e-01  +4.1689e-01  1.59e-01  8.46e-04  4.19e-02  1.46e-04  2.72e-03  4.62e-01  
  8  +2.4769e-01  +3.6490e-01  1.17e-01  6.05e-04  3.03e-02  1.09e-04  2.02e-03  3.41e-01  
  9  +2.3037e-01  +2.8073e-01  5.04e-02  2.49e-04  1.26e-02  4.62e-05  8.87e-04  6.32e-01  
 10  +2.2464e-01  +2.5456e-01  2.99e-02  1.45e-04  7.39e-03  2.76e-05  5.31e-04  4.95e-01  
 11  +2.1773e-01  +2.2327e-01  5.54e-03  2.68e-05  1.35e-03  4.78e-06  1.03e-04  9.33e-01  
 12  +2.1624e-01  +2.1768e-01  1.44e-03  6.92e-06  3.47e-04  1.21e-06  2.81e-05  8.31e-01  
 13  +2.1573e-01  +2.1582e-01  8.56e-05  4.13e-07  2.06e-05  6.83e-08  1.72e-06  9.50e-01  
 14  +2.1570e-01  +2.1570e-01  8.77e-07  4.23e-09  2.11e-07  6.98e-10  1.77e-08  9.90e-01  
 15  +2.1570e-01  +2.1570e-01  8.79e-09  4.24e-11  2.12e-09  7.00e-12  1.77e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.6326ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:43 PM: Optimal value: 2.157e-01
(CVXPY) Sep 20 07:56:43 PM: Compilation took 4.528e-03 seconds
(CVXPY) Sep 20 07:56:43 PM: Solver (including time spent in interface) took 1.283e-02 seconds
Iteration: 19, Objective: 0.2157
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:43 PM: Your problem has 455 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:43 PM: Finished problem compilation (took 6.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 455
  constraints   = 705
  nnz(P)        = 0
  nnz(A)        = 5045
  cones (total) = 1
    : Nonnegative = 1,  numel = 705

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9784e-01  +2.5237e+02  2.52e+02  9.47e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +5.2437e-01  +5.5573e+01  5.50e+01  4.27e-01  1.32e+01  3.91e-03  5.71e-01  5.86e-01  
  2  +4.8184e-01  +8.0806e+00  7.60e+00  1.09e-01  4.78e+00  2.25e-02  2.23e-01  9.90e-01  
  3  +4.4169e-01  +1.9363e+00  1.49e+00  1.41e-02  7.17e-01  1.07e-02  3.39e-02  8.62e-01  
  4  +3.7990e-01  +1.4193e+00  1.04e+00  6.56e-03  3.31e-01  8.89e-03  1.64e-02  5.91e-01  
  5  +3.1211e-01  +7.5534e-01  4.43e-01  2.80e-03  1.36e-01  3.37e-04  7.91e-03  8.19e-01  
  6  +2.7181e-01  +4.9306e-01  2.21e-01  1.30e-03  6.33e-02  1.70e-04  4.02e-03  5.69e-01  
  7  +2.5184e-01  +3.9415e-01  1.42e-01  7.73e-04  3.82e-02  1.16e-04  2.52e-03  4.64e-01  
  8  +2.3702e-01  +3.2115e-01  8.41e-02  4.35e-04  2.18e-02  7.06e-05  1.49e-03  5.18e-01  
  9  +2.2185e-01  +2.4836e-01  2.65e-02  1.31e-04  6.68e-03  2.27e-05  4.80e-04  7.57e-01  
 10  +2.1730e-01  +2.2665e-01  9.36e-03  4.66e-05  2.35e-03  8.15e-06  1.78e-04  9.90e-01  
 11  +2.1469e-01  +2.1702e-01  2.32e-03  1.15e-05  5.77e-04  1.92e-06  4.60e-05  7.75e-01  
 12  +2.1398e-01  +2.1445e-01  4.70e-04  2.32e-06  1.16e-04  3.82e-07  9.53e-06  8.58e-01  
 13  +2.1380e-01  +2.1381e-01  6.65e-06  3.29e-08  1.64e-06  5.24e-09  1.36e-07  9.88e-01  
 14  +2.1380e-01  +2.1380e-01  6.66e-08  3.29e-10  1.64e-08  5.24e-11  1.36e-09  9.90e-01  
 15  +2.1380e-01  +2.1380e-01  6.66e-10  3.29e-12  1.64e-10  5.25e-13  1.36e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.5513ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:43 PM: Optimal value: 2.138e-01
(CVXPY) Sep 20 07:56:43 PM: Compilation took 6.001e-03 seconds
(CVXPY) Sep 20 07:56:43 PM: Solver (including time spent in interface) took 1.268e-02 seconds
Iteration: 20, Objective: 0.2138
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:44 PM: Your problem has 465 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:44 PM: Finished problem compilation (took 6.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 465
  constraints   = 715
  nnz(P)        = 0
  nnz(A)        = 5090
  cones (total) = 1
    : Nonnegative = 1,  numel = 715

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9783e-01  +2.5232e+02  2.52e+02  9.47e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.2257e-01  +5.5612e+01  5.51e+01  4.27e-01  1.31e+01  3.92e-03  5.71e-01  5.86e-01  
  2  +4.7982e-01  +8.1388e+00  7.66e+00  1.08e-01  4.69e+00  2.27e-02  2.22e-01  9.90e-01  
  3  +4.3649e-01  +1.9705e+00  1.53e+00  1.39e-02  7.02e-01  1.11e-02  3.36e-02  8.65e-01  
  4  +3.7967e-01  +1.4945e+00  1.11e+00  7.19e-03  3.60e-01  8.88e-03  1.80e-02  5.49e-01  
  5  +3.0962e-01  +7.3563e-01  4.26e-01  2.67e-03  1.29e-01  7.09e-04  7.52e-03  7.96e-01  
  6  +2.7053e-01  +5.0757e-01  2.37e-01  1.38e-03  6.65e-02  3.65e-04  4.25e-03  5.36e-01  
  7  +2.4955e-01  +4.0084e-01  1.51e-01  8.23e-04  4.01e-02  2.24e-04  2.70e-03  4.46e-01  
  8  +2.3746e-01  +3.3828e-01  1.01e-01  5.35e-04  2.62e-02  1.40e-04  1.83e-03  4.26e-01  
  9  +2.2090e-01  +2.5368e-01  3.28e-02  1.68e-04  8.28e-03  4.17e-05  6.20e-04  7.16e-01  
 10  +2.1485e-01  +2.2395e-01  9.10e-03  4.70e-05  2.29e-03  7.99e-06  1.83e-04  9.17e-01  
 11  +2.1263e-01  +2.1499e-01  2.36e-03  1.22e-05  5.90e-04  1.94e-06  4.99e-05  7.78e-01  
 12  +2.1198e-01  +2.1249e-01  5.13e-04  2.64e-06  1.27e-04  4.06e-07  1.12e-05  8.54e-01  
 13  +2.1180e-01  +2.1181e-01  7.74e-06  3.98e-08  1.92e-06  5.84e-09  1.70e-07  9.88e-01  
 14  +2.1180e-01  +2.1180e-01  7.75e-08  3.98e-10  1.92e-08  5.84e-11  1.71e-09  9.90e-01  
 15  +2.1180e-01  +2.1180e-01  7.75e-10  3.99e-12  1.92e-10  5.85e-13  1.71e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.0794ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:44 PM: Optimal value: 2.118e-01
(CVXPY) Sep 20 07:56:44 PM: Compilation took 6.007e-03 seconds
(CVXPY) Sep 20 07:56:44 PM: Solver (including time spent in interface) took 1.309e-02 seconds
Iteration: 21, Objective: 0.2118
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:44 PM: Your problem has 468 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:44 PM: Finished problem compilation (took 5.519e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 468
  constraints   = 718
  nnz(P)        = 0
  nnz(A)        = 5118
  cones (total) = 1
    : Nonnegative = 1,  numel = 718

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9779e-01  +2.5235e+02  2.52e+02  9.47e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.2137e-01  +5.5666e+01  5.51e+01  4.28e-01  1.31e+01  3.92e-03  5.71e-01  5.86e-01  
  2  +4.7841e-01  +8.1601e+00  7.68e+00  1.08e-01  4.67e+00  2.28e-02  2.22e-01  9.90e-01  
  3  +4.3556e-01  +2.0639e+00  1.63e+00  1.49e-02  7.48e-01  1.11e-02  3.61e-02  8.54e-01  
  4  +3.8349e-01  +1.6171e+00  1.23e+00  8.16e-03  4.07e-01  9.30e-03  2.03e-02  5.14e-01  
  5  +3.1291e-01  +7.4447e-01  4.32e-01  2.74e-03  1.32e-01  1.65e-04  7.67e-03  8.43e-01  
  6  +2.7353e-01  +5.2623e-01  2.53e-01  1.49e-03  7.16e-02  1.27e-04  4.54e-03  5.33e-01  
  7  +2.5197e-01  +4.1457e-01  1.63e-01  8.98e-04  4.36e-02  9.30e-05  2.92e-03  4.58e-01  
  8  +2.4059e-01  +3.5565e-01  1.15e-01  6.19e-04  3.02e-02  7.02e-05  2.09e-03  3.65e-01  
  9  +2.2147e-01  +2.5655e-01  3.51e-02  1.82e-04  8.90e-03  2.25e-05  6.63e-04  7.40e-01  
 10  +2.1528e-01  +2.2624e-01  1.10e-02  5.69e-05  2.77e-03  7.79e-06  2.19e-04  8.52e-01  
 11  +2.1270e-01  +2.1533e-01  2.64e-03  1.37e-05  6.60e-04  1.81e-06  5.53e-05  8.00e-01  
 12  +2.1206e-01  +2.1279e-01  7.30e-04  3.77e-06  1.82e-04  5.34e-07  1.59e-05  8.61e-01  
 13  +2.1181e-01  +2.1182e-01  1.43e-05  7.38e-08  3.55e-06  9.94e-09  3.15e-07  9.85e-01  
 14  +2.1180e-01  +2.1180e-01  1.43e-07  7.38e-10  3.55e-08  9.95e-11  3.15e-09  9.90e-01  
 15  +2.1180e-01  +2.1180e-01  1.43e-09  7.39e-12  3.55e-10  9.96e-13  3.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.0072ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:44 PM: Optimal value: 2.118e-01
(CVXPY) Sep 20 07:56:44 PM: Compilation took 5.519e-03 seconds
(CVXPY) Sep 20 07:56:44 PM: Solver (including time spent in interface) took 1.360e-02 seconds
Iteration: 22, Objective: 0.2118
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:44 PM: Your problem has 471 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:44 PM: Finished problem compilation (took 5.959e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 471
  constraints   = 721
  nnz(P)        = 0
  nnz(A)        = 5132
  cones (total) = 1
    : Nonnegative = 1,  numel = 721

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9773e-01  +2.5245e+02  2.52e+02  9.48e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.1833e-01  +5.5781e+01  5.53e+01  4.27e-01  1.31e+01  3.93e-03  5.72e-01  5.85e-01  
  2  +4.7476e-01  +8.2630e+00  7.79e+00  1.07e-01  4.65e+00  2.31e-02  2.22e-01  9.90e-01  
  3  +4.3035e-01  +2.0394e+00  1.61e+00  1.47e-02  7.30e-01  1.09e-02  3.54e-02  8.55e-01  
  4  +3.7410e-01  +1.5787e+00  1.20e+00  7.78e-03  3.86e-01  8.97e-03  1.94e-02  5.41e-01  
  5  +3.0466e-01  +7.0832e-01  4.04e-01  2.60e-03  1.24e-01  7.97e-05  7.37e-03  8.61e-01  
  6  +2.6453e-01  +4.8424e-01  2.20e-01  1.29e-03  6.15e-02  8.35e-05  4.01e-03  5.91e-01  
  7  +2.4587e-01  +3.8989e-01  1.44e-01  7.96e-04  3.84e-02  7.15e-05  2.63e-03  4.84e-01  
  8  +2.2739e-01  +2.9372e-01  6.63e-02  3.52e-04  1.71e-02  3.67e-05  1.25e-03  6.05e-01  
  9  +2.2030e-01  +2.5847e-01  3.82e-02  1.97e-04  9.65e-03  2.27e-05  7.24e-04  4.89e-01  
 10  +2.1309e-01  +2.2215e-01  9.05e-03  4.67e-05  2.26e-03  7.54e-06  1.81e-04  9.90e-01  
 11  +2.1077e-01  +2.1304e-01  2.27e-03  1.16e-05  5.58e-04  1.78e-06  4.80e-05  8.24e-01  
 12  +2.1010e-01  +2.1063e-01  5.32e-04  2.68e-06  1.28e-04  4.07e-07  1.16e-05  8.53e-01  
 13  +2.0990e-01  +2.0991e-01  1.05e-05  5.29e-08  2.52e-06  7.71e-09  2.33e-07  9.87e-01  
 14  +2.0990e-01  +2.0990e-01  1.05e-07  5.30e-10  2.52e-08  7.71e-11  2.33e-09  9.90e-01  
 15  +2.0990e-01  +2.0990e-01  1.06e-09  5.30e-12  2.52e-10  7.74e-13  2.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.4583ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:44 PM: Optimal value: 2.099e-01
(CVXPY) Sep 20 07:56:44 PM: Compilation took 5.959e-03 seconds
(CVXPY) Sep 20 07:56:44 PM: Solver (including time spent in interface) took 1.251e-02 seconds
Iteration: 23, Objective: 0.2099
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:44 PM: Your problem has 479 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:44 PM: Finished problem compilation (took 6.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 479
  constraints   = 729
  nnz(P)        = 0
  nnz(A)        = 5170
  cones (total) = 1
    : Nonnegative = 1,  numel = 729

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9771e-01  +2.5246e+02  2.52e+02  9.48e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.1796e-01  +5.5773e+01  5.53e+01  4.28e-01  1.30e+01  3.93e-03  5.71e-01  5.85e-01  
  2  +4.7438e-01  +8.4013e+00  7.93e+00  1.09e-01  4.65e+00  2.31e-02  2.24e-01  9.82e-01  
  3  +4.2945e-01  +2.0251e+00  1.60e+00  1.45e-02  7.17e-01  1.06e-02  3.51e-02  8.61e-01  
  4  +3.7341e-01  +1.5806e+00  1.21e+00  7.80e-03  3.85e-01  8.83e-03  1.95e-02  5.34e-01  
  5  +3.0363e-01  +7.0793e-01  4.04e-01  2.60e-03  1.23e-01  7.87e-05  7.38e-03  8.66e-01  
  6  +2.6887e-01  +5.0971e-01  2.41e-01  1.44e-03  6.82e-02  7.86e-05  4.42e-03  5.09e-01  
  7  +2.4841e-01  +4.0455e-01  1.56e-01  8.75e-04  4.19e-02  6.79e-05  2.87e-03  4.70e-01  
  8  +2.3539e-01  +3.3651e-01  1.01e-01  5.48e-04  2.64e-02  4.95e-05  1.89e-03  4.22e-01  
  9  +2.2025e-01  +2.5775e-01  3.75e-02  1.96e-04  9.50e-03  2.14e-05  7.18e-04  6.99e-01  
 10  +2.1375e-01  +2.2575e-01  1.20e-02  6.25e-05  3.01e-03  8.30e-06  2.42e-04  8.57e-01  
 11  +2.1131e-01  +2.1540e-01  4.09e-03  2.12e-05  1.02e-03  2.78e-06  8.61e-05  6.85e-01  
 12  +2.1062e-01  +2.1263e-01  2.01e-03  1.03e-05  4.91e-04  1.45e-06  4.35e-05  6.85e-01  
 13  +2.0998e-01  +2.1020e-01  2.21e-04  1.12e-06  5.31e-05  1.53e-07  4.93e-06  9.02e-01  
 14  +2.0990e-01  +2.0990e-01  2.54e-06  1.29e-08  6.09e-07  1.75e-09  5.70e-08  9.90e-01  
 15  +2.0990e-01  +2.0990e-01  2.55e-08  1.29e-10  6.10e-09  1.75e-11  5.71e-10  9.90e-01  
 16  +2.0990e-01  +2.0990e-01  2.55e-10  1.29e-12  6.11e-11  1.76e-13  5.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.8243ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:44 PM: Optimal value: 2.099e-01
(CVXPY) Sep 20 07:56:44 PM: Compilation took 6.001e-03 seconds
(CVXPY) Sep 20 07:56:44 PM: Solver (including time spent in interface) took 1.407e-02 seconds
Iteration: 24, Objective: 0.2099
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:44 PM: Your problem has 489 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:44 PM: Finished problem compilation (took 5.948e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 489
  constraints   = 739
  nnz(P)        = 0
  nnz(A)        = 5204
  cones (total) = 1
    : Nonnegative = 1,  numel = 739

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9770e-01  +2.5249e+02  2.52e+02  9.48e-01  2.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.1639e-01  +5.5849e+01  5.53e+01  4.28e-01  1.29e+01  3.94e-03  5.71e-01  5.85e-01  
  2  +4.7218e-01  +8.5049e+00  8.03e+00  1.09e-01  4.62e+00  2.33e-02  2.25e-01  9.80e-01  
  3  +4.2583e-01  +2.0751e+00  1.65e+00  1.47e-02  7.25e-01  1.08e-02  3.58e-02  8.58e-01  
  4  +3.7254e-01  +1.5857e+00  1.21e+00  7.98e-03  3.90e-01  8.53e-03  2.00e-02  5.21e-01  
  5  +3.0123e-01  +6.7894e-01  3.78e-01  2.44e-03  1.15e-01  7.71e-05  6.94e-03  8.65e-01  
  6  +2.7055e-01  +5.2051e-01  2.50e-01  1.50e-03  7.08e-02  8.49e-05  4.59e-03  4.63e-01  
  7  +2.4850e-01  +4.0382e-01  1.55e-01  8.78e-04  4.17e-02  6.35e-05  2.87e-03  4.49e-01  
  8  +2.3656e-01  +3.4199e-01  1.05e-01  5.78e-04  2.76e-02  4.88e-05  1.97e-03  3.90e-01  
  9  +2.2056e-01  +2.5902e-01  3.85e-02  2.03e-04  9.77e-03  2.11e-05  7.40e-04  7.03e-01  
 10  +2.1392e-01  +2.2657e-01  1.26e-02  6.65e-05  3.18e-03  8.47e-06  2.56e-04  8.45e-01  
 11  +2.1134e-01  +2.1553e-01  4.19e-03  2.20e-05  1.05e-03  2.75e-06  8.91e-05  6.94e-01  
 12  +2.1065e-01  +2.1277e-01  2.12e-03  1.10e-05  5.19e-04  1.48e-06  4.64e-05  6.68e-01  
 13  +2.0998e-01  +2.1021e-01  2.24e-04  1.15e-06  5.40e-05  1.51e-07  5.07e-06  9.07e-01  
 14  +2.0990e-01  +2.0990e-01  2.59e-06  1.32e-08  6.21e-07  1.73e-09  5.88e-08  9.90e-01  
 15  +2.0990e-01  +2.0990e-01  2.59e-08  1.32e-10  6.22e-09  1.74e-11  5.89e-10  9.90e-01  
 16  +2.0990e-01  +2.0990e-01  2.60e-10  1.33e-12  6.24e-11  1.74e-13  5.92e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.424ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:44 PM: Optimal value: 2.099e-01
(CVXPY) Sep 20 07:56:44 PM: Compilation took 5.948e-03 seconds
(CVXPY) Sep 20 07:56:44 PM: Solver (including time spent in interface) took 1.409e-02 seconds
Iteration: 25, Objective: 0.2099
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:44 PM: Your problem has 494 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:44 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 494
  constraints   = 744
  nnz(P)        = 0
  nnz(A)        = 5229
  cones (total) = 1
    : Nonnegative = 1,  numel = 744

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9768e-01  +2.5250e+02  2.52e+02  9.48e-01  2.23e+01  1.00e+00  1.02e+00   ------   
  1  +5.1516e-01  +5.5888e+01  5.54e+01  4.29e-01  1.28e+01  3.94e-03  5.71e-01  5.85e-01  
  2  +4.7133e-01  +8.5502e+00  8.08e+00  1.08e-01  4.59e+00  2.34e-02  2.24e-01  9.80e-01  
  3  +4.2333e-01  +2.0463e+00  1.62e+00  1.43e-02  6.99e-01  1.09e-02  3.47e-02  8.63e-01  
  4  +3.7305e-01  +1.5780e+00  1.20e+00  8.07e-03  3.94e-01  8.42e-03  2.03e-02  4.92e-01  
  5  +3.0158e-01  +7.0884e-01  4.07e-01  2.65e-03  1.24e-01  7.72e-05  7.54e-03  8.73e-01  
  6  +2.6969e-01  +5.2291e-01  2.53e-01  1.55e-03  7.26e-02  7.85e-05  4.74e-03  4.77e-01  
  7  +2.4729e-01  +4.0153e-01  1.54e-01  8.82e-04  4.18e-02  5.96e-05  2.89e-03  4.65e-01  
  8  +2.3655e-01  +3.4453e-01  1.08e-01  6.00e-04  2.86e-02  4.89e-05  2.05e-03  3.86e-01  
  9  +2.2050e-01  +2.5941e-01  3.89e-02  2.08e-04  9.97e-03  2.08e-05  7.59e-04  7.06e-01  
 10  +2.1404e-01  +2.2741e-01  1.34e-02  7.10e-05  3.38e-03  8.70e-06  2.74e-04  8.27e-01  
 11  +2.1134e-01  +2.1560e-01  4.27e-03  2.25e-05  1.07e-03  2.73e-06  9.14e-05  7.04e-01  
 12  +2.1068e-01  +2.1292e-01  2.24e-03  1.17e-05  5.51e-04  1.54e-06  4.93e-05  6.54e-01  
 13  +2.0998e-01  +2.1021e-01  2.30e-04  1.18e-06  5.55e-05  1.52e-07  5.22e-06  9.12e-01  
 14  +2.0990e-01  +2.0990e-01  2.68e-06  1.38e-08  6.46e-07  1.77e-09  6.13e-08  9.90e-01  
 15  +2.0990e-01  +2.0990e-01  2.69e-08  1.38e-10  6.47e-09  1.77e-11  6.14e-10  9.90e-01  
 16  +2.0990e-01  +2.0990e-01  2.70e-10  1.39e-12  6.50e-11  1.79e-13  6.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.7347ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:44 PM: Optimal value: 2.099e-01
(CVXPY) Sep 20 07:56:44 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:56:44 PM: Solver (including time spent in interface) took 1.304e-02 seconds
Iteration: 26, Objective: 0.2099
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:45 PM: Your problem has 500 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:45 PM: Finished problem compilation (took 6.014e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 500
  constraints   = 750
  nnz(P)        = 0
  nnz(A)        = 5251
  cones (total) = 1
    : Nonnegative = 1,  numel = 750

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9765e-01  +2.5252e+02  2.52e+02  9.49e-01  2.23e+01  1.00e+00  1.02e+00   ------   
  1  +5.1281e-01  +5.5972e+01  5.55e+01  4.29e-01  1.27e+01  3.95e-03  5.71e-01  5.84e-01  
  2  +4.6859e-01  +8.6807e+00  8.21e+00  1.09e-01  4.58e+00  2.35e-02  2.25e-01  9.75e-01  
  3  +4.2036e-01  +2.0669e+00  1.65e+00  1.45e-02  7.06e-01  1.06e-02  3.54e-02  8.60e-01  
  4  +3.7062e-01  +1.5918e+00  1.22e+00  8.24e-03  3.99e-01  8.22e-03  2.07e-02  4.88e-01  
  5  +3.0259e-01  +7.5440e-01  4.52e-01  2.98e-03  1.39e-01  7.52e-05  8.45e-03  8.78e-01  
  6  +2.6367e-01  +5.0201e-01  2.38e-01  1.47e-03  6.85e-02  7.58e-05  4.55e-03  5.76e-01  
  7  +2.4409e-01  +3.9552e-01  1.51e-01  8.78e-04  4.14e-02  6.11e-05  2.89e-03  4.58e-01  
  8  +2.3281e-01  +3.3451e-01  1.02e-01  5.72e-04  2.71e-02  4.63e-05  1.96e-03  3.98e-01  
  9  +2.1826e-01  +2.5635e-01  3.81e-02  2.06e-04  9.85e-03  2.07e-05  7.51e-04  7.01e-01  
 10  +2.1205e-01  +2.2507e-01  1.30e-02  7.00e-05  3.33e-03  8.57e-06  2.70e-04  8.37e-01  
 11  +2.0938e-01  +2.1349e-01  4.11e-03  2.20e-05  1.04e-03  2.65e-06  8.91e-05  7.11e-01  
 12  +2.0876e-01  +2.1097e-01  2.21e-03  1.16e-05  5.47e-04  1.52e-06  4.91e-05  6.56e-01  
 13  +2.0809e-01  +2.0832e-01  2.39e-04  1.24e-06  5.81e-05  1.59e-07  5.49e-06  9.07e-01  
 14  +2.0800e-01  +2.0800e-01  2.89e-06  1.50e-08  7.01e-07  1.92e-09  6.69e-08  9.89e-01  
 15  +2.0800e-01  +2.0800e-01  2.90e-08  1.50e-10  7.02e-09  1.92e-11  6.69e-10  9.90e-01  
 16  +2.0800e-01  +2.0800e-01  2.90e-10  1.50e-12  7.03e-11  1.93e-13  6.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.6619ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:45 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:45 PM: Optimal value: 2.080e-01
(CVXPY) Sep 20 07:56:45 PM: Compilation took 6.014e-03 seconds
(CVXPY) Sep 20 07:56:45 PM: Solver (including time spent in interface) took 1.382e-02 seconds
FULL MODEL:
  Accruacy: 0.758
  Our objective: 0.5160000000000001

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 1)                                             <-- (term's our objective: 0.028)
 OR (x0 = 0 AND x1 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0)                                             <-- (term's our objective: 0.036)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x8 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.032)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.036)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x6 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.024)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.02)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.02)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x2 = 0 AND x4 = 0 AND x6 = 0)                                                        <-- (term's our objective: 0.056)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.016)
 OR (x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.024)
 OR (x2 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)                                             <-- (term's our objective: 0.024)
 OR (x2 = 1 AND x3 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.04)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.921558380126953
Best over terms:
  Our final objective: 0.055999999999999946
    Its accruacy: 0.528
    Its hamming distance: 7
  Shortest hamming distance: 3
    Its our objective: 0.02000000000000002
  Highest accruacy: 0.528
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

