Command:
python test_script.py -s constant_subclass -d 3 -n 100 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 3.

Computed total variation: 0.22
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:08 PM: Your problem has 57 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:08 PM: Finished problem compilation (took 5.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 57
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 307
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9592e-01  +5.0693e+01  5.02e+01  8.53e-01  7.20e+00  1.00e+00  1.03e+00   ------   
  1  +6.1468e-01  +9.7078e+00  9.09e+00  2.68e-01  3.56e+00  4.24e-03  4.50e-01  6.94e-01  
  2  +5.3859e-01  +1.7051e+00  1.17e+00  6.87e-02  1.04e+00  7.75e-03  1.67e-01  8.20e-01  
  3  +4.9812e-01  +7.3182e-01  2.34e-01  1.54e-02  2.32e-01  6.44e-03  5.85e-02  9.90e-01  
  4  +4.7228e-01  +7.2195e-01  2.50e-01  5.46e-03  8.53e-02  1.66e-02  1.91e-02  7.23e-01  
  5  +4.4720e-01  +5.3272e-01  8.55e-02  1.90e-03  2.95e-02  1.52e-04  7.63e-03  7.63e-01  
  6  +4.2343e-01  +4.3305e-01  9.62e-03  1.94e-04  3.00e-03  1.17e-05  8.86e-04  8.99e-01  
  7  +4.2014e-01  +4.2024e-01  1.05e-04  2.09e-06  3.24e-05  1.52e-07  9.82e-06  9.90e-01  
  8  +4.2010e-01  +4.2010e-01  1.05e-06  2.09e-08  3.24e-07  1.52e-09  9.82e-08  9.90e-01  
  9  +4.2010e-01  +4.2010e-01  1.05e-08  2.09e-10  3.24e-09  1.52e-11  9.82e-10  9.90e-01  
 10  +4.2010e-01  +4.2010e-01  1.05e-10  2.09e-12  3.24e-11  1.52e-13  9.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 370.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:08 PM: Optimal value: 4.201e-01
(CVXPY) Sep 20 07:27:08 PM: Compilation took 5.008e-03 seconds
(CVXPY) Sep 20 07:27:08 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:08 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:08 PM: Finished problem compilation (took 3.530e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 359
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9340e-01  +5.0999e+01  5.05e+01  8.58e-01  7.47e+00  1.00e+00  1.05e+00   ------   
  1  +6.0212e-01  +9.9499e+00  9.35e+00  2.83e-01  3.75e+00  4.17e-03  4.76e-01  6.82e-01  
  2  +5.3306e-01  +1.5983e+00  1.07e+00  6.24e-02  9.77e-01  8.88e-03  1.55e-01  8.83e-01  
  3  +5.0393e-01  +9.3077e-01  4.27e-01  1.78e-02  2.83e-01  9.55e-03  5.27e-02  7.37e-01  
  4  +4.8814e-01  +8.5063e-01  3.62e-01  1.20e-02  1.92e-01  5.82e-03  3.81e-02  5.45e-01  
  5  +4.6416e-01  +7.0217e-01  2.38e-01  5.64e-03  9.06e-02  4.58e-03  1.88e-02  5.32e-01  
  6  +4.4433e-01  +6.2552e-01  1.81e-01  3.36e-03  5.39e-02  3.88e-03  1.16e-02  4.09e-01  
  7  +4.1841e-01  +4.9503e-01  7.66e-02  1.58e-03  2.51e-02  3.16e-05  6.17e-03  9.27e-01  
  8  +3.9277e-01  +3.9939e-01  6.61e-03  1.22e-04  1.94e-03  5.04e-06  5.22e-04  9.24e-01  
  9  +3.9023e-01  +3.9029e-01  6.82e-05  1.26e-06  2.00e-05  5.26e-08  5.45e-06  9.90e-01  
 10  +3.9020e-01  +3.9020e-01  6.82e-07  1.26e-08  2.00e-07  5.26e-10  5.45e-08  9.90e-01  
 11  +3.9020e-01  +3.9020e-01  6.82e-09  1.26e-10  2.00e-09  5.26e-12  5.45e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 376.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:08 PM: Optimal value: 3.902e-01
(CVXPY) Sep 20 07:27:08 PM: Compilation took 3.530e-03 seconds
(CVXPY) Sep 20 07:27:08 PM: Solver (including time spent in interface) took 9.906e-04 seconds
Iteration: 2, Objective: 0.3902
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:08 PM: Your problem has 62 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:08 PM: Finished problem compilation (took 3.518e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 62
  constraints   = 112
  nnz(P)        = 0
  nnz(A)        = 371
  cones (total) = 1
    : Nonnegative = 1,  numel = 112

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9272e-01  +5.1035e+01  5.05e+01  8.59e-01  7.51e+00  1.00e+00  1.06e+00   ------   
  1  +5.9851e-01  +1.0029e+01  9.43e+00  2.88e-01  3.81e+00  4.14e-03  4.86e-01  6.77e-01  
  2  +5.3082e-01  +1.5519e+00  1.02e+00  6.01e-02  9.43e-01  9.29e-03  1.52e-01  9.06e-01  
  3  +5.2073e-01  +1.3921e+00  8.71e-01  3.88e-02  6.15e-01  1.12e-02  1.04e-01  3.85e-01  
  4  +5.0545e-01  +1.2184e+00  7.13e-01  2.70e-02  4.28e-01  8.88e-03  7.79e-02  3.81e-01  
  5  +4.7517e-01  +8.1739e-01  3.42e-01  9.90e-03  1.58e-01  4.49e-03  3.22e-02  6.62e-01  
  6  +4.5190e-01  +7.2153e-01  2.70e-01  5.26e-03  8.46e-02  4.51e-03  1.77e-02  4.91e-01  
  7  +4.2024e-01  +5.1542e-01  9.52e-02  2.15e-03  3.41e-02  3.40e-05  8.43e-03  8.31e-01  
  8  +3.9343e-01  +4.0301e-01  9.58e-03  1.93e-04  3.06e-03  5.12e-06  8.41e-04  9.07e-01  
  9  +3.9040e-01  +3.9100e-01  5.94e-04  1.20e-05  1.89e-04  3.64e-07  5.31e-05  9.38e-01  
 10  +3.9020e-01  +3.9022e-01  1.44e-05  2.89e-07  4.58e-06  1.61e-08  1.28e-06  9.79e-01  
 11  +3.9020e-01  +3.9020e-01  1.44e-07  2.89e-09  4.58e-08  1.61e-10  1.29e-08  9.90e-01  
 12  +3.9020e-01  +3.9020e-01  1.44e-09  2.89e-11  4.58e-10  1.61e-12  1.29e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 387.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:08 PM: Optimal value: 3.902e-01
(CVXPY) Sep 20 07:27:08 PM: Compilation took 3.518e-03 seconds
(CVXPY) Sep 20 07:27:08 PM: Solver (including time spent in interface) took 1.016e-03 seconds
FULL MODEL:
  Accruacy: 0.61
  Our objective: 0.21999999999999997

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.1)
 OR (x1 = 0 AND x2 = 1)            <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4336614608764648
Best over terms:
  Our final objective: 0.11999999999999994
    Its accruacy: 0.56
    Its hamming distance: 3
  Shortest hamming distance: 0
    Its our objective: 0.1
  Highest accruacy: 0.56
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

