Command:
python test_script.py -s constant_subclass -d 4 -n 10000 --seed 34 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.06720000000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 4.

Computed total variation: 0.08000000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:29:47 PM: Your problem has 5009 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:29:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:29:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:29:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:29:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:29:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:29:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:29:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:29:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:29:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:29:47 PM: Finished problem compilation (took 1.904e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5009
  constraints   = 10009
  nnz(P)        = 0
  nnz(A)        = 35009
  cones (total) = 1
    : Nonnegative = 1,  numel = 10009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0010e+03  5.00e+03  9.84e-01  8.57e+01  1.00e+00  1.00e+00   ------   
  1  +6.0819e-01  +9.6886e+02  9.68e+02  3.38e-01  4.77e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5105e-01  +1.5093e+02  1.50e+02  1.40e-01  2.42e+01  8.22e-03  2.27e-01  7.25e-01  
  3  +5.1090e-01  +3.2818e+01  3.23e+01  1.12e-01  1.89e+01  1.78e-05  2.25e-01  6.41e-02  
  4  +5.0006e-01  +1.0373e+00  5.37e-01  3.60e-03  6.18e-01  3.61e-06  1.45e-01  9.90e-01  
  5  +5.0001e-01  +5.8667e-01  8.67e-02  5.79e-04  9.98e-02  6.19e-07  2.81e-02  8.17e-01  
  6  +4.9997e-01  +5.9096e-01  9.10e-02  5.97e-04  1.03e-01  1.57e-06  9.04e-03  7.37e-01  
  7  +4.9699e-01  +5.8988e-01  9.29e-02  5.72e-05  9.91e-03  6.90e-05  1.83e-04  9.85e-01  
  8  +4.8964e-01  +5.4304e-01  5.34e-02  1.38e-05  2.39e-03  1.11e-04  4.44e-05  7.75e-01  
  9  +4.8012e-01  +4.9278e-01  1.27e-02  2.88e-06  4.99e-04  2.94e-06  1.08e-05  8.61e-01  
 10  +4.7620e-01  +4.7768e-01  1.47e-03  3.01e-07  5.22e-05  5.12e-08  1.24e-06  9.90e-01  
 11  +4.7571e-01  +4.7572e-01  1.72e-05  3.50e-09  6.06e-07  5.90e-10  1.46e-08  9.88e-01  
 12  +4.7570e-01  +4.7570e-01  1.72e-07  3.50e-11  6.06e-09  5.90e-12  1.46e-10  9.90e-01  
 13  +4.7570e-01  +4.7570e-01  1.72e-09  3.50e-13  6.06e-11  5.98e-14  1.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 40.1687ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:47 PM: Problem status: optimal
(CVXPY) Sep 20 07:29:47 PM: Optimal value: 4.757e-01
(CVXPY) Sep 20 07:29:47 PM: Compilation took 1.904e-02 seconds
(CVXPY) Sep 20 07:29:47 PM: Solver (including time spent in interface) took 4.615e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4757
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:29:47 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:29:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:29:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:29:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:29:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:29:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:29:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:29:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:29:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:29:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:29:47 PM: Finished problem compilation (took 1.905e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 45487
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +5.0013e+03  5.00e+03  9.84e-01  9.24e+01  1.00e+00  1.00e+00   ------   
  1  +6.0797e-01  +9.7067e+02  9.70e+02  3.40e-01  5.15e+01  4.09e-03  4.76e-01  6.66e-01  
  2  +5.5076e-01  +1.5044e+02  1.50e+02  1.41e-01  2.60e+01  8.32e-03  2.29e-01  7.27e-01  
  3  +5.1080e-01  +3.2635e+01  3.21e+01  1.12e-01  2.03e+01  1.80e-05  2.26e-01  6.65e-02  
  4  +5.0048e-01  +2.3043e+00  1.80e+00  1.21e-02  2.20e+00  4.37e-06  1.94e-01  3.95e-01  
  5  +5.0007e-01  +8.8523e-01  3.85e-01  2.58e-03  4.76e-01  1.45e-06  9.47e-02  6.14e-01  
  6  +5.0003e-01  +6.9338e-01  1.93e-01  1.29e-03  2.39e-01  8.69e-07  4.55e-02  5.62e-01  
  7  +5.0002e-01  +6.8859e-01  1.89e-01  1.26e-03  2.33e-01  9.38e-07  3.62e-02  2.50e-01  
  8  +5.0004e-01  +7.1445e-01  2.14e-01  1.43e-03  2.64e-01  8.44e-07  3.29e-02  3.97e-01  
  9  +4.9999e-01  +6.7387e-01  1.74e-01  1.11e-03  2.06e-01  1.38e-06  1.16e-02  6.89e-01  
 10  +4.9841e-01  +6.3512e-01  1.37e-01  1.10e-04  2.05e-02  2.95e-05  3.56e-04  9.75e-01  
 11  +4.9738e-01  +6.2357e-01  1.26e-01  7.56e-05  1.41e-02  3.43e-05  2.43e-04  3.61e-01  
 12  +4.9684e-01  +6.1438e-01  1.18e-01  6.08e-05  1.13e-02  3.04e-05  1.93e-04  3.45e-01  
 13  +4.9652e-01  +6.0257e-01  1.06e-01  5.02e-05  9.36e-03  1.74e-05  1.57e-04  5.23e-01  
 14  +4.9621e-01  +5.9329e-01  9.71e-02  4.08e-05  7.60e-03  8.06e-06  1.25e-04  6.78e-01  
 15  +4.9607e-01  +5.9121e-01  9.51e-02  3.77e-05  7.02e-03  5.35e-06  1.14e-04  5.11e-01  
 16  +4.9402e-01  +5.7862e-01  8.46e-02  2.75e-05  5.13e-03  5.47e-06  8.26e-05  3.14e-01  
 17  +4.9310e-01  +5.7451e-01  8.14e-02  2.16e-05  4.02e-03  4.52e-06  6.39e-05  6.54e-01  
 18  +4.9240e-01  +5.7380e-01  8.14e-02  1.70e-05  3.17e-03  4.71e-06  5.01e-05  6.90e-01  
 19  +4.8555e-01  +5.4191e-01  5.64e-02  1.43e-05  2.67e-03  1.79e-06  4.49e-05  7.99e-01  
 20  +4.8062e-01  +5.2328e-01  4.27e-02  8.69e-06  1.62e-03  1.77e-06  2.67e-05  5.92e-01  
 21  +4.8056e-01  +5.2343e-01  4.29e-02  8.43e-06  1.57e-03  2.01e-06  2.58e-05  2.94e-01  
 22  +4.6819e-01  +4.7820e-01  1.00e-02  1.67e-06  3.11e-04  4.41e-07  5.30e-06  8.28e-01  
 23  +4.6476e-01  +4.6533e-01  5.73e-04  9.53e-08  1.77e-05  1.96e-08  3.17e-07  9.45e-01  
 24  +4.6450e-01  +4.6451e-01  5.96e-06  9.91e-10  1.84e-07  2.05e-10  3.35e-09  9.90e-01  
 25  +4.6450e-01  +4.6450e-01  5.96e-08  9.91e-12  1.84e-09  2.05e-12  3.35e-11  9.90e-01  
 26  +4.6450e-01  +4.6450e-01  5.96e-10  9.91e-14  1.84e-11  2.06e-14  3.37e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 104.5419ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:48 PM: Problem status: optimal
(CVXPY) Sep 20 07:29:48 PM: Optimal value: 4.645e-01
(CVXPY) Sep 20 07:29:48 PM: Compilation took 1.905e-02 seconds
(CVXPY) Sep 20 07:29:48 PM: Solver (including time spent in interface) took 1.118e-01 seconds
Iteration: 2, Objective: 0.4645
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:29:48 PM: Your problem has 5024 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:29:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:29:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:29:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:29:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:29:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:29:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:29:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:29:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:29:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:29:48 PM: Finished problem compilation (took 2.308e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5024
  constraints   = 10024
  nnz(P)        = 0
  nnz(A)        = 47742
  cones (total) = 1
    : Nonnegative = 1,  numel = 10024

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +5.0010e+03  5.00e+03  9.85e-01  9.30e+01  1.00e+00  1.02e+00   ------   
  1  +6.0715e-01  +9.7291e+02  9.72e+02  3.46e-01  5.20e+01  4.04e-03  4.92e-01  6.63e-01  
  2  +5.5070e-01  +1.5085e+02  1.50e+02  1.43e-01  2.62e+01  8.54e-03  2.37e-01  7.30e-01  
  3  +5.1067e-01  +3.2356e+01  3.18e+01  1.13e-01  2.04e+01  1.83e-05  2.34e-01  7.00e-02  
  4  +5.0033e-01  +1.8702e+00  1.37e+00  9.39e-03  1.69e+00  4.23e-06  1.90e-01  5.10e-01  
  5  +5.0003e-01  +6.8656e-01  1.87e-01  1.27e-03  2.32e-01  9.02e-07  5.45e-02  7.99e-01  
  6  +5.0003e-01  +6.9405e-01  1.94e-01  1.32e-03  2.42e-01  9.89e-07  4.78e-02  1.92e-01  
  7  +5.0004e-01  +7.1757e-01  2.18e-01  1.48e-03  2.71e-01  1.02e-06  4.52e-02  2.42e-01  
  8  +5.0001e-01  +6.9435e-01  1.94e-01  1.31e-03  2.39e-01  1.36e-06  2.18e-02  5.96e-01  
  9  +4.9940e-01  +6.4220e-01  1.43e-01  3.46e-04  6.37e-02  1.29e-05  1.27e-03  9.67e-01  
 10  +4.9803e-01  +6.1799e-01  1.20e-01  9.91e-05  1.82e-02  3.07e-05  3.26e-04  9.29e-01  
 11  +4.9798e-01  +6.1630e-01  1.18e-01  9.74e-05  1.79e-02  2.78e-05  3.21e-04  9.37e-02  
 12  +4.9820e-01  +6.1752e-01  1.19e-01  9.56e-05  1.76e-02  2.33e-05  3.09e-04  2.28e-01  
 13  +4.9634e-01  +6.0424e-01  1.08e-01  5.36e-05  9.88e-03  3.30e-05  1.69e-04  4.89e-01  
 14  +4.9645e-01  +6.0596e-01  1.10e-01  4.84e-05  8.92e-03  2.80e-05  1.50e-04  3.48e-01  
 15  +4.9610e-01  +6.0514e-01  1.09e-01  4.25e-05  7.83e-03  2.64e-05  1.31e-04  2.71e-01  
 16  +4.9541e-01  +6.0068e-01  1.05e-01  3.86e-05  7.10e-03  2.05e-05  1.19e-04  3.12e-01  
 17  +4.9101e-01  +5.8034e-01  8.93e-02  2.44e-05  4.48e-03  1.37e-05  7.60e-05  6.90e-01  
 18  +4.8792e-01  +5.6803e-01  8.01e-02  1.99e-05  3.66e-03  1.03e-05  6.25e-05  3.63e-01  
 19  +4.8534e-01  +5.5737e-01  7.20e-02  1.75e-05  3.23e-03  5.70e-06  5.64e-05  4.81e-01  
 20  +4.7638e-01  +5.2027e-01  4.39e-02  9.39e-06  1.72e-03  3.26e-06  3.09e-05  5.05e-01  
 21  +4.6819e-01  +4.8923e-01  2.10e-02  4.06e-06  7.45e-04  1.50e-06  1.37e-05  6.08e-01  
 22  +4.6413e-01  +4.7358e-01  9.45e-03  1.71e-06  3.14e-04  6.82e-07  5.87e-06  6.70e-01  
 23  +4.6393e-01  +4.7256e-01  8.63e-03  1.63e-06  3.00e-04  5.62e-07  5.85e-06  5.97e-02  
 24  +4.6393e-01  +4.7270e-01  8.77e-03  1.65e-06  3.03e-04  5.82e-07  5.81e-06  7.59e-02  
 25  +4.6254e-01  +4.6786e-01  5.32e-03  9.52e-07  1.75e-04  3.75e-07  3.33e-06  5.46e-01  
 26  +4.6070e-01  +4.6138e-01  6.83e-04  1.21e-07  2.23e-05  4.45e-08  4.36e-07  9.84e-01  
 27  +4.6040e-01  +4.6041e-01  8.13e-06  1.44e-09  2.65e-07  5.12e-10  5.22e-09  9.88e-01  
 28  +4.6040e-01  +4.6040e-01  8.15e-08  1.45e-11  2.66e-09  5.14e-12  5.23e-11  9.90e-01  
 29  +4.6040e-01  +4.6040e-01  8.15e-10  1.45e-13  2.66e-11  5.16e-14  5.26e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 113.4829ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:48 PM: Problem status: optimal
(CVXPY) Sep 20 07:29:48 PM: Optimal value: 4.604e-01
(CVXPY) Sep 20 07:29:48 PM: Compilation took 2.308e-02 seconds
(CVXPY) Sep 20 07:29:48 PM: Solver (including time spent in interface) took 1.203e-01 seconds
FULL MODEL:
  Accruacy: 0.54
  Our objective: 0.07999999999999996

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.0672)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.0012)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.512101411819458
Best over terms:
  Our final objective: 0.06720000000000001
    Its accruacy: 0.5336
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.06720000000000001
  Highest accruacy: 0.5336
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

