Command:
python test_script.py -s constant_subclass -d 9 -n 10000 --seed 34 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0014
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 9.

Computed total variation: 0.178
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:27 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:27 PM: Finished problem compilation (took 3.357e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 60019
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +5.0012e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +1.0852e+03  1.08e+03  4.32e-01  7.56e+01  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3196e-01  +1.2314e+02  1.23e+02  1.71e-01  3.84e+01  1.63e-02  2.77e-01  9.29e-01  
  3  +5.0884e-01  +3.2064e+01  3.16e+01  1.24e-01  2.77e+01  4.48e-05  2.59e-01  2.72e-01  
  4  +5.0107e-01  +3.1992e+00  2.70e+00  1.83e-02  4.17e+00  5.75e-06  1.71e-01  5.88e-01  
  5  +5.0008e-01  +8.8950e-01  3.89e-01  2.61e-03  6.06e-01  3.70e-05  1.04e-01  9.90e-01  
  6  +5.0001e-01  +5.6032e-01  6.03e-02  4.03e-04  9.39e-02  7.05e-06  2.09e-02  8.12e-01  
  7  +5.0000e-01  +5.4878e-01  4.88e-02  3.24e-04  7.57e-02  8.26e-06  8.78e-03  7.15e-01  
  8  +4.9977e-01  +5.4410e-01  4.43e-02  1.07e-04  2.50e-02  1.24e-04  3.97e-04  9.90e-01  
  9  +4.9740e-01  +5.3720e-01  3.98e-02  1.07e-05  2.51e-03  1.19e-03  3.50e-05  9.12e-01  
 10  +4.9530e-01  +5.2190e-01  2.66e-02  7.63e-06  1.79e-03  4.13e-04  2.64e-05  4.00e-01  
 11  +4.9391e-01  +5.1461e-01  2.07e-02  5.40e-06  1.26e-03  2.31e-04  1.94e-05  4.35e-01  
 12  +4.9239e-01  +5.0697e-01  1.46e-02  3.38e-06  7.92e-04  4.46e-05  1.26e-05  7.59e-01  
 13  +4.9132e-01  +5.0215e-01  1.08e-02  2.37e-06  5.55e-04  4.66e-07  8.95e-06  9.25e-01  
 14  +4.8879e-01  +4.9220e-01  3.41e-03  6.95e-07  1.63e-04  1.43e-07  2.76e-06  8.66e-01  
 15  +4.8770e-01  +4.8799e-01  2.89e-04  5.78e-08  1.35e-05  1.35e-08  2.35e-07  9.90e-01  
 16  +4.8760e-01  +4.8760e-01  3.13e-06  6.27e-10  1.47e-07  1.46e-10  2.56e-09  9.90e-01  
 17  +4.8760e-01  +4.8760e-01  3.13e-08  6.27e-12  1.47e-09  1.46e-12  2.56e-11  9.90e-01  
 18  +4.8760e-01  +4.8760e-01  3.13e-10  6.26e-14  1.47e-11  1.48e-14  2.59e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 94.4469ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:27 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:27 PM: Optimal value: 4.876e-01
(CVXPY) Sep 20 08:02:27 PM: Compilation took 3.357e-02 seconds
(CVXPY) Sep 20 08:02:27 PM: Solver (including time spent in interface) took 1.043e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4876
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:28 PM: Your problem has 5029 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:28 PM: Finished problem compilation (took 3.169e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5029
  constraints   = 10029
  nnz(P)        = 0
  nnz(A)        = 66598
  cones (total) = 1
    : Nonnegative = 1,  numel = 10029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.8088e-01  +1.0854e+03  1.08e+03  4.32e-01  7.71e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3189e-01  +1.2300e+02  1.22e+02  1.71e-01  3.90e+01  1.63e-02  2.77e-01  9.30e-01  
  3  +5.0882e-01  +3.2013e+01  3.15e+01  1.24e-01  2.82e+01  4.49e-05  2.59e-01  2.74e-01  
  4  +5.0107e-01  +3.1912e+00  2.69e+00  1.83e-02  4.24e+00  5.76e-06  1.70e-01  5.91e-01  
  5  +5.0009e-01  +9.0165e-01  4.02e-01  2.69e-03  6.38e-01  3.72e-05  1.02e-01  9.90e-01  
  6  +5.0002e-01  +6.2302e-01  1.23e-01  8.22e-04  1.95e-01  1.33e-05  3.64e-02  6.82e-01  
  7  +5.0004e-01  +6.3269e-01  1.33e-01  8.84e-04  2.10e-01  8.75e-06  2.15e-02  9.37e-01  
  8  +4.9999e-01  +5.5331e-01  5.33e-02  3.31e-04  7.88e-02  1.47e-05  2.90e-03  8.87e-01  
  9  +4.9907e-01  +5.5572e-01  5.67e-02  2.89e-05  6.90e-03  4.68e-04  9.14e-05  9.73e-01  
 10  +4.9764e-01  +5.4774e-01  5.01e-02  1.66e-05  3.96e-03  5.78e-04  5.21e-05  5.10e-01  
 11  +4.9712e-01  +5.4343e-01  4.63e-02  1.55e-05  3.70e-03  3.85e-04  5.11e-05  1.98e-01  
 12  +4.9685e-01  +5.3989e-01  4.30e-02  1.56e-05  3.73e-03  3.28e-04  5.11e-05  6.87e-03  
 13  +4.9596e-01  +5.3576e-01  3.98e-02  1.29e-05  3.08e-03  3.02e-04  4.21e-05  2.44e-01  
 14  +4.9542e-01  +5.3420e-01  3.88e-02  1.24e-05  2.97e-03  1.66e-04  4.01e-05  3.98e-01  
 15  +4.9187e-01  +5.2147e-01  2.96e-02  6.95e-06  1.66e-03  1.06e-04  2.30e-05  6.19e-01  
 16  +4.9064e-01  +5.1662e-01  2.60e-02  5.78e-06  1.38e-03  1.12e-06  1.92e-05  8.57e-01  
 17  +4.8722e-01  +5.0415e-01  1.69e-02  3.37e-06  8.06e-04  7.49e-07  1.15e-05  6.03e-01  
 18  +4.8474e-01  +4.9469e-01  9.95e-03  1.87e-06  4.47e-04  5.49e-07  6.54e-06  9.90e-01  
 19  +4.8151e-01  +4.8327e-01  1.76e-03  3.19e-07  7.62e-05  8.93e-08  1.16e-06  8.69e-01  
 20  +4.8081e-01  +4.8083e-01  2.42e-05  4.35e-09  1.04e-06  1.15e-09  1.60e-08  9.87e-01  
 21  +4.8080e-01  +4.8080e-01  2.42e-07  4.35e-11  1.04e-08  1.15e-11  1.60e-10  9.90e-01  
 22  +4.8080e-01  +4.8080e-01  2.42e-09  4.36e-13  1.04e-10  1.18e-13  1.64e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 126.9257ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:28 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:28 PM: Optimal value: 4.808e-01
(CVXPY) Sep 20 08:02:28 PM: Compilation took 3.169e-02 seconds
(CVXPY) Sep 20 08:02:28 PM: Solver (including time spent in interface) took 1.373e-01 seconds
Iteration: 2, Objective: 0.4808
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:28 PM: Your problem has 5039 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:28 PM: Finished problem compilation (took 3.386e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5039
  constraints   = 10039
  nnz(P)        = 0
  nnz(A)        = 71871
  cones (total) = 1
    : Nonnegative = 1,  numel = 10039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.8082e-01  +1.0855e+03  1.08e+03  4.32e-01  7.80e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3182e-01  +1.2287e+02  1.22e+02  1.71e-01  3.94e+01  1.63e-02  2.77e-01  9.31e-01  
  3  +5.0880e-01  +3.1979e+01  3.15e+01  1.24e-01  2.84e+01  4.50e-05  2.59e-01  2.76e-01  
  4  +5.0106e-01  +3.1880e+00  2.69e+00  1.83e-02  4.28e+00  5.77e-06  1.70e-01  5.93e-01  
  5  +5.0009e-01  +9.1157e-01  4.11e-01  2.76e-03  6.62e-01  3.75e-05  1.01e-01  9.90e-01  
  6  +5.0003e-01  +6.8209e-01  1.82e-01  1.22e-03  2.93e-01  1.91e-05  4.85e-02  5.43e-01  
  7  +5.0002e-01  +6.3176e-01  1.32e-01  8.79e-04  2.11e-01  1.58e-05  2.35e-02  6.88e-01  
  8  +4.9995e-01  +5.9343e-01  9.35e-02  5.46e-04  1.32e-01  4.37e-05  3.86e-03  9.02e-01  
  9  +4.9790e-01  +5.8848e-01  9.06e-02  4.40e-05  1.07e-02  1.04e-03  1.46e-04  9.64e-01  
 10  +4.9645e-01  +5.7588e-01  7.94e-02  3.15e-05  7.62e-03  1.00e-03  1.05e-04  3.37e-01  
 11  +4.9483e-01  +5.6034e-01  6.55e-02  2.31e-05  5.59e-03  6.61e-04  7.76e-05  4.21e-01  
 12  +4.9498e-01  +5.5970e-01  6.47e-02  2.25e-05  5.45e-03  5.33e-04  7.51e-05  1.89e-01  
 13  +4.9497e-01  +5.5674e-01  6.18e-02  2.21e-05  5.34e-03  3.49e-04  7.37e-05  2.43e-01  
 14  +4.9458e-01  +5.5110e-01  5.65e-02  2.00e-05  4.85e-03  1.30e-04  6.61e-05  5.28e-01  
 15  +4.9207e-01  +5.3639e-01  4.43e-02  1.35e-05  3.26e-03  1.02e-04  4.43e-05  3.82e-01  
 16  +4.9028e-01  +5.2543e-01  3.51e-02  8.42e-06  2.04e-03  3.55e-06  2.66e-05  9.90e-01  
 17  +4.8970e-01  +5.2294e-01  3.32e-02  7.36e-06  1.78e-03  3.32e-06  2.31e-05  2.11e-01  
 18  +4.8938e-01  +5.2186e-01  3.25e-02  7.33e-06  1.77e-03  3.14e-06  2.31e-05  1.51e-02  
 19  +4.8681e-01  +5.1151e-01  2.47e-02  5.30e-06  1.28e-03  1.98e-06  1.69e-05  4.39e-01  
 20  +4.8453e-01  +5.0025e-01  1.57e-02  3.14e-06  7.58e-04  7.80e-07  1.01e-05  9.90e-01  
 21  +4.8136e-01  +4.8735e-01  5.99e-03  1.15e-06  2.78e-04  2.93e-07  3.75e-06  7.18e-01  
 22  +4.7976e-01  +4.8134e-01  1.59e-03  2.81e-07  6.82e-05  9.80e-08  9.57e-07  9.47e-01  
 23  +4.7920e-01  +4.7944e-01  2.42e-04  4.18e-08  1.01e-05  1.60e-08  1.45e-07  9.90e-01  
 24  +4.7910e-01  +4.7910e-01  2.74e-06  4.71e-10  1.14e-07  1.81e-10  1.64e-09  9.89e-01  
 25  +4.7910e-01  +4.7910e-01  2.74e-08  4.71e-12  1.14e-09  1.81e-12  1.64e-11  9.90e-01  
 26  +4.7910e-01  +4.7910e-01  2.74e-10  4.72e-14  1.14e-11  1.96e-14  1.77e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 160.4962ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:28 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:28 PM: Optimal value: 4.791e-01
(CVXPY) Sep 20 08:02:28 PM: Compilation took 3.386e-02 seconds
(CVXPY) Sep 20 08:02:28 PM: Solver (including time spent in interface) took 1.718e-01 seconds
Iteration: 3, Objective: 0.4791
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:28 PM: Your problem has 5049 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:28 PM: Finished problem compilation (took 3.495e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5049
  constraints   = 10049
  nnz(P)        = 0
  nnz(A)        = 74943
  cones (total) = 1
    : Nonnegative = 1,  numel = 10049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.8078e-01  +1.0856e+03  1.08e+03  4.32e-01  7.82e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3178e-01  +1.2278e+02  1.22e+02  1.71e-01  3.95e+01  1.63e-02  2.77e-01  9.31e-01  
  3  +5.0879e-01  +3.1945e+01  3.14e+01  1.23e-01  2.85e+01  4.50e-05  2.58e-01  2.77e-01  
  4  +5.0106e-01  +3.1829e+00  2.68e+00  1.82e-02  4.29e+00  5.78e-06  1.69e-01  5.95e-01  
  5  +5.0009e-01  +9.2112e-01  4.21e-01  2.83e-03  6.80e-01  3.77e-05  9.98e-02  9.90e-01  
  6  +5.0003e-01  +6.5370e-01  1.54e-01  1.03e-03  2.48e-01  1.75e-05  3.87e-02  6.40e-01  
  7  +5.0001e-01  +6.2086e-01  1.21e-01  8.03e-04  1.94e-01  2.17e-05  1.59e-02  6.79e-01  
  8  +4.9978e-01  +6.0998e-01  1.10e-01  4.18e-04  1.01e-01  1.33e-04  1.73e-03  9.52e-01  
  9  +4.9650e-01  +5.9531e-01  9.88e-02  3.72e-05  9.05e-03  1.65e-03  1.18e-04  9.32e-01  
 10  +4.9512e-01  +5.7789e-01  8.28e-02  2.92e-05  7.08e-03  1.09e-03  9.21e-05  3.73e-01  
 11  +4.9550e-01  +5.7298e-01  7.75e-02  2.56e-05  6.21e-03  5.33e-04  7.94e-05  5.25e-01  
 12  +4.9490e-01  +5.6938e-01  7.45e-02  2.25e-05  5.47e-03  4.76e-04  7.00e-05  2.21e-01  
 13  +4.9451e-01  +5.6659e-01  7.21e-02  2.18e-05  5.29e-03  4.01e-04  6.79e-05  1.26e-01  
 14  +4.9237e-01  +5.5449e-01  6.21e-02  1.74e-05  4.22e-03  2.27e-04  5.48e-05  4.35e-01  
 15  +4.9031e-01  +5.4500e-01  5.47e-02  1.41e-05  3.42e-03  1.82e-04  4.49e-05  2.62e-01  
 16  +4.8536e-01  +5.2118e-01  3.58e-02  7.97e-06  1.93e-03  2.06e-06  2.60e-05  9.00e-01  
 17  +4.8093e-01  +5.0259e-01  2.17e-02  4.38e-06  1.06e-03  9.85e-07  1.46e-05  9.90e-01  
 18  +4.7780e-01  +4.9036e-01  1.26e-02  2.40e-06  5.82e-04  7.07e-07  8.25e-06  9.90e-01  
 19  +4.7518e-01  +4.8066e-01  5.49e-03  1.02e-06  2.49e-04  3.04e-07  3.63e-06  5.87e-01  
 20  +4.7361e-01  +4.7487e-01  1.26e-03  2.31e-07  5.61e-05  7.57e-08  8.42e-07  9.90e-01  
 21  +4.7311e-01  +4.7314e-01  2.63e-05  4.80e-09  1.17e-06  1.50e-09  1.78e-08  9.83e-01  
 22  +4.7310e-01  +4.7310e-01  2.63e-07  4.80e-11  1.17e-08  1.50e-11  1.78e-10  9.90e-01  
 23  +4.7310e-01  +4.7310e-01  2.63e-09  4.80e-13  1.17e-10  1.50e-13  1.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 148.9597ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:28 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:28 PM: Optimal value: 4.731e-01
(CVXPY) Sep 20 08:02:28 PM: Compilation took 3.495e-02 seconds
(CVXPY) Sep 20 08:02:28 PM: Solver (including time spent in interface) took 1.594e-01 seconds
Iteration: 4, Objective: 0.4731
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:29 PM: Your problem has 5059 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:29 PM: Finished problem compilation (took 4.133e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5059
  constraints   = 10059
  nnz(P)        = 0
  nnz(A)        = 77500
  cones (total) = 1
    : Nonnegative = 1,  numel = 10059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8072e-01  +1.0857e+03  1.09e+03  4.33e-01  7.84e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3172e-01  +1.2267e+02  1.22e+02  1.71e-01  3.95e+01  1.63e-02  2.77e-01  9.32e-01  
  3  +5.0878e-01  +3.1912e+01  3.14e+01  1.23e-01  2.85e+01  4.51e-05  2.58e-01  2.79e-01  
  4  +5.0106e-01  +3.1802e+00  2.68e+00  1.82e-02  4.30e+00  5.79e-06  1.68e-01  5.96e-01  
  5  +5.0010e-01  +9.3085e-01  4.31e-01  2.90e-03  6.97e-01  3.79e-05  9.87e-02  9.90e-01  
  6  +5.0003e-01  +6.9214e-01  1.92e-01  1.29e-03  3.11e-01  2.12e-05  4.46e-02  5.71e-01  
  7  +5.0001e-01  +6.5093e-01  1.51e-01  1.00e-03  2.43e-01  2.44e-05  2.03e-02  6.22e-01  
  8  +4.9990e-01  +6.3705e-01  1.37e-01  7.41e-04  1.79e-01  7.50e-05  4.17e-03  8.80e-01  
  9  +4.9678e-01  +6.2152e-01  1.25e-01  5.31e-05  1.29e-02  1.58e-03  1.66e-04  9.61e-01  
 10  +4.9472e-01  +6.0735e-01  1.13e-01  3.68e-05  8.96e-03  1.71e-03  1.15e-04  3.46e-01  
 11  +4.9430e-01  +5.9971e-01  1.05e-01  3.38e-05  8.23e-03  1.37e-03  1.06e-04  1.95e-01  
 12  +4.9501e-01  +5.9687e-01  1.02e-01  3.33e-05  8.12e-03  9.63e-04  1.04e-04  2.32e-01  
 13  +4.9359e-01  +5.8662e-01  9.30e-02  2.78e-05  6.77e-03  8.01e-04  8.68e-05  2.69e-01  
 14  +4.9067e-01  +5.5923e-01  6.86e-02  1.95e-05  4.75e-03  8.37e-06  6.17e-05  8.38e-01  
 15  +4.8762e-01  +5.4508e-01  5.75e-02  1.53e-05  3.72e-03  4.21e-06  4.90e-05  5.67e-01  
 16  +4.7580e-01  +4.9355e-01  1.77e-02  3.74e-06  9.09e-04  1.08e-06  1.25e-05  8.29e-01  
 17  +4.7573e-01  +4.9340e-01  1.77e-02  3.68e-06  8.96e-04  1.08e-06  1.23e-05  4.84e-02  
 18  +4.7442e-01  +4.8832e-01  1.39e-02  2.78e-06  6.77e-04  7.88e-07  9.43e-06  9.90e-01  
 19  +4.7225e-01  +4.8007e-01  7.82e-03  1.53e-06  3.72e-04  4.49e-07  5.28e-06  5.59e-01  
 20  +4.6989e-01  +4.7111e-01  1.21e-03  2.30e-07  5.61e-05  6.86e-08  8.34e-07  8.67e-01  
 21  +4.6941e-01  +4.6943e-01  2.37e-05  4.38e-09  1.07e-06  1.33e-09  1.64e-08  9.88e-01  
 22  +4.6940e-01  +4.6940e-01  2.37e-07  4.38e-11  1.07e-08  1.33e-11  1.64e-10  9.90e-01  
 23  +4.6940e-01  +4.6940e-01  2.37e-09  4.39e-13  1.07e-10  1.45e-13  1.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 160.9286ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:29 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:29 PM: Optimal value: 4.694e-01
(CVXPY) Sep 20 08:02:29 PM: Compilation took 4.133e-02 seconds
(CVXPY) Sep 20 08:02:29 PM: Solver (including time spent in interface) took 1.724e-01 seconds
Iteration: 5, Objective: 0.4694
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:29 PM: Your problem has 5069 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:29 PM: Finished problem compilation (took 4.195e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5069
  constraints   = 10069
  nnz(P)        = 0
  nnz(A)        = 80085
  cones (total) = 1
    : Nonnegative = 1,  numel = 10069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8068e-01  +1.0857e+03  1.09e+03  4.33e-01  7.85e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3168e-01  +1.2258e+02  1.22e+02  1.71e-01  3.95e+01  1.63e-02  2.77e-01  9.32e-01  
  3  +5.0876e-01  +3.1880e+01  3.14e+01  1.23e-01  2.85e+01  4.51e-05  2.58e-01  2.80e-01  
  4  +5.0106e-01  +3.1742e+00  2.67e+00  1.82e-02  4.30e+00  5.80e-06  1.68e-01  5.99e-01  
  5  +5.0010e-01  +9.4046e-01  4.40e-01  2.96e-03  7.15e-01  3.81e-05  9.75e-02  9.90e-01  
  6  +5.0004e-01  +7.0194e-01  2.02e-01  1.35e-03  3.28e-01  2.23e-05  4.38e-02  5.88e-01  
  7  +5.0000e-01  +6.5316e-01  1.53e-01  1.01e-03  2.46e-01  2.97e-05  1.62e-02  7.02e-01  
  8  +4.9938e-01  +6.2402e-01  1.25e-01  2.62e-04  6.39e-02  3.33e-04  9.02e-04  9.80e-01  
  9  +4.9601e-01  +6.1076e-01  1.15e-01  4.73e-05  1.16e-02  1.77e-03  1.48e-04  8.40e-01  
 10  +4.9515e-01  +6.0476e-01  1.10e-01  3.76e-05  9.19e-03  1.62e-03  1.17e-04  3.66e-01  
 11  +4.9506e-01  +5.9962e-01  1.05e-01  3.64e-05  8.88e-03  1.16e-03  1.13e-04  2.35e-01  
 12  +4.9337e-01  +5.9098e-01  9.76e-02  2.99e-05  7.30e-03  1.11e-03  9.32e-05  2.27e-01  
 13  +4.9233e-01  +5.8342e-01  9.11e-02  2.73e-05  6.65e-03  7.98e-04  8.52e-05  2.61e-01  
 14  +4.9098e-01  +5.7183e-01  8.08e-02  2.43e-05  5.93e-03  1.90e-04  7.66e-05  6.09e-01  
 15  +4.8127e-01  +5.2756e-01  4.63e-02  1.07e-05  2.61e-03  8.96e-05  3.49e-05  6.68e-01  
 16  +4.7794e-01  +5.1311e-01  3.52e-02  7.80e-06  1.90e-03  3.88e-05  2.60e-05  5.34e-01  
 17  +4.7428e-01  +4.9738e-01  2.31e-02  4.82e-06  1.17e-03  4.02e-07  1.65e-05  9.79e-01  
 18  +4.6882e-01  +4.7530e-01  6.49e-03  1.31e-06  3.18e-04  1.34e-07  4.73e-06  7.48e-01  
 19  +4.6664e-01  +4.6698e-01  3.41e-04  6.64e-08  1.62e-05  1.35e-08  2.58e-07  9.82e-01  
 20  +4.6650e-01  +4.6651e-01  4.15e-06  8.05e-10  1.96e-07  1.68e-10  3.17e-09  9.89e-01  
 21  +4.6650e-01  +4.6650e-01  4.15e-08  8.05e-12  1.96e-09  1.68e-12  3.17e-11  9.90e-01  
 22  +4.6650e-01  +4.6650e-01  4.16e-10  8.06e-14  1.97e-11  1.78e-14  3.35e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 166.8636ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:29 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:29 PM: Optimal value: 4.665e-01
(CVXPY) Sep 20 08:02:29 PM: Compilation took 4.195e-02 seconds
(CVXPY) Sep 20 08:02:29 PM: Solver (including time spent in interface) took 1.789e-01 seconds
Iteration: 6, Objective: 0.4665
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:29 PM: Your problem has 5079 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:29 PM: Finished problem compilation (took 4.299e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5079
  constraints   = 10079
  nnz(P)        = 0
  nnz(A)        = 81774
  cones (total) = 1
    : Nonnegative = 1,  numel = 10079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8064e-01  +1.0857e+03  1.09e+03  4.33e-01  7.85e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3164e-01  +1.2251e+02  1.22e+02  1.70e-01  3.95e+01  1.63e-02  2.77e-01  9.33e-01  
  3  +5.0875e-01  +3.1856e+01  3.13e+01  1.23e-01  2.85e+01  4.51e-05  2.57e-01  2.81e-01  
  4  +5.0106e-01  +3.1705e+00  2.67e+00  1.82e-02  4.30e+00  5.81e-06  1.67e-01  6.00e-01  
  5  +5.0010e-01  +9.4753e-01  4.47e-01  3.01e-03  7.27e-01  3.83e-05  9.66e-02  9.90e-01  
  6  +5.0004e-01  +7.1307e-01  2.13e-01  1.43e-03  3.46e-01  2.35e-05  4.39e-02  5.85e-01  
  7  +4.9999e-01  +6.4631e-01  1.46e-01  9.55e-04  2.31e-01  3.61e-05  1.16e-02  8.31e-01  
  8  +4.9907e-01  +6.3664e-01  1.38e-01  2.08e-04  5.08e-02  4.89e-04  6.82e-04  9.57e-01  
  9  +4.9648e-01  +6.1807e-01  1.22e-01  5.62e-05  1.37e-02  1.43e-03  1.74e-04  8.25e-01  
 10  +4.9614e-01  +6.1486e-01  1.19e-01  4.89e-05  1.20e-02  1.33e-03  1.51e-04  2.59e-01  
 11  +4.9585e-01  +6.0756e-01  1.12e-01  4.23e-05  1.03e-02  8.65e-04  1.30e-04  4.36e-01  
 12  +4.9489e-01  +5.9877e-01  1.04e-01  3.51e-05  8.58e-03  5.40e-04  1.08e-04  4.78e-01  
 13  +4.9395e-01  +5.9295e-01  9.90e-02  3.22e-05  7.86e-03  4.09e-04  9.91e-05  2.58e-01  
 14  +4.8800e-01  +5.6243e-01  7.44e-02  1.92e-05  4.68e-03  1.60e-04  6.00e-05  7.28e-01  
 15  +4.8071e-01  +5.2975e-01  4.90e-02  1.13e-05  2.76e-03  8.88e-05  3.63e-05  4.64e-01  
 16  +4.7906e-01  +5.2169e-01  4.26e-02  9.39e-06  2.29e-03  1.06e-05  3.03e-05  8.20e-01  
 17  +4.7371e-01  +4.9935e-01  2.56e-02  5.35e-06  1.30e-03  4.77e-06  1.76e-05  5.69e-01  
 18  +4.7042e-01  +4.8602e-01  1.56e-02  3.13e-06  7.64e-04  2.60e-06  1.05e-05  4.87e-01  
 19  +4.6947e-01  +4.8222e-01  1.27e-02  2.53e-06  6.17e-04  2.06e-06  8.51e-06  2.27e-01  
 20  +4.6753e-01  +4.7424e-01  6.72e-03  1.29e-06  3.15e-04  4.20e-07  4.42e-06  9.90e-01  
 21  +4.6604e-01  +4.6869e-01  2.65e-03  4.98e-07  1.21e-04  1.67e-07  1.74e-06  6.83e-01  
 22  +4.6525e-01  +4.6591e-01  6.51e-04  1.18e-07  2.88e-05  3.94e-08  4.25e-07  9.57e-01  
 23  +4.6500e-01  +4.6501e-01  7.87e-06  1.42e-09  3.47e-07  4.66e-10  5.15e-09  9.89e-01  
 24  +4.6500e-01  +4.6500e-01  7.88e-08  1.42e-11  3.47e-09  4.66e-12  5.16e-11  9.90e-01  
 25  +4.6500e-01  +4.6500e-01  7.88e-10  1.42e-13  3.47e-11  4.89e-14  5.40e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 180.5242ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:30 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:30 PM: Optimal value: 4.650e-01
(CVXPY) Sep 20 08:02:30 PM: Compilation took 4.299e-02 seconds
(CVXPY) Sep 20 08:02:30 PM: Solver (including time spent in interface) took 1.923e-01 seconds
Iteration: 7, Objective: 0.4650
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:30 PM: Your problem has 5089 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:30 PM: Finished problem compilation (took 4.317e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5089
  constraints   = 10089
  nnz(P)        = 0
  nnz(A)        = 83473
  cones (total) = 1
    : Nonnegative = 1,  numel = 10089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8059e-01  +1.0857e+03  1.09e+03  4.33e-01  7.85e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3160e-01  +1.2243e+02  1.22e+02  1.70e-01  3.94e+01  1.63e-02  2.77e-01  9.33e-01  
  3  +5.0875e-01  +3.1834e+01  3.13e+01  1.23e-01  2.84e+01  4.52e-05  2.57e-01  2.82e-01  
  4  +5.0106e-01  +3.1689e+00  2.67e+00  1.82e-02  4.30e+00  5.82e-06  1.67e-01  6.01e-01  
  5  +5.0011e-01  +9.5402e-01  4.54e-01  3.06e-03  7.38e-01  3.84e-05  9.59e-02  9.90e-01  
  6  +5.0004e-01  +7.1456e-01  2.15e-01  1.44e-03  3.49e-01  2.37e-05  4.26e-02  6.02e-01  
  7  +4.9998e-01  +6.5430e-01  1.54e-01  9.98e-04  2.42e-01  3.97e-05  1.07e-02  8.63e-01  
  8  +4.9823e-01  +6.3276e-01  1.35e-01  1.13e-04  2.76e-02  8.97e-04  3.53e-04  9.74e-01  
  9  +4.9611e-01  +6.2053e-01  1.24e-01  5.64e-05  1.38e-02  1.46e-03  1.73e-04  5.60e-01  
 10  +4.9574e-01  +6.1663e-01  1.21e-01  4.63e-05  1.13e-02  1.30e-03  1.42e-04  3.74e-01  
 11  +4.9490e-01  +6.0764e-01  1.13e-01  3.77e-05  9.21e-03  9.18e-04  1.15e-04  4.59e-01  
 12  +4.9341e-01  +5.9732e-01  1.04e-01  3.23e-05  7.89e-03  6.66e-04  9.87e-05  3.37e-01  
 13  +4.8814e-01  +5.6677e-01  7.86e-02  2.11e-05  5.17e-03  9.13e-05  6.56e-05  8.28e-01  
 14  +4.8041e-01  +5.3321e-01  5.28e-02  1.23e-05  2.99e-03  5.19e-05  3.90e-05  4.94e-01  
 15  +4.7237e-01  +4.9988e-01  2.75e-02  5.58e-06  1.36e-03  5.80e-07  1.82e-05  9.51e-01  
 16  +4.6967e-01  +4.8900e-01  1.93e-02  3.78e-06  9.22e-04  5.93e-07  1.24e-05  4.85e-01  
 17  +4.6838e-01  +4.8366e-01  1.53e-02  2.90e-06  7.08e-04  7.23e-07  9.59e-06  6.34e-01  
 18  +4.6670e-01  +4.7700e-01  1.03e-02  1.92e-06  4.68e-04  6.54e-07  6.38e-06  9.90e-01  
 19  +4.6456e-01  +4.6903e-01  4.47e-03  8.17e-07  1.99e-04  2.86e-07  2.75e-06  6.00e-01  
 20  +4.6365e-01  +4.6574e-01  2.09e-03  3.77e-07  9.20e-05  1.34e-07  1.28e-06  5.51e-01  
 21  +4.6355e-01  +4.6537e-01  1.82e-03  3.27e-07  7.99e-05  1.17e-07  1.11e-06  2.12e-01  
 22  +4.6344e-01  +4.6488e-01  1.44e-03  2.62e-07  6.39e-05  9.36e-08  8.91e-07  9.90e-01  
 23  +4.6327e-01  +4.6430e-01  1.03e-03  1.84e-07  4.50e-05  6.72e-08  6.28e-07  7.13e-01  
 24  +4.6286e-01  +4.6290e-01  3.31e-05  5.92e-09  1.44e-06  2.15e-09  2.03e-08  9.79e-01  
 25  +4.6285e-01  +4.6285e-01  3.32e-07  5.94e-11  1.45e-08  2.16e-11  2.04e-10  9.90e-01  
 26  +4.6285e-01  +4.6285e-01  3.34e-09  5.98e-13  1.46e-10  2.20e-13  2.07e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 184.4005ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:30 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:30 PM: Optimal value: 4.629e-01
(CVXPY) Sep 20 08:02:30 PM: Compilation took 4.317e-02 seconds
(CVXPY) Sep 20 08:02:30 PM: Solver (including time spent in interface) took 1.958e-01 seconds
Iteration: 8, Objective: 0.4629
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:30 PM: Your problem has 5099 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:30 PM: Finished problem compilation (took 3.942e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5099
  constraints   = 10099
  nnz(P)        = 0
  nnz(A)        = 84697
  cones (total) = 1
    : Nonnegative = 1,  numel = 10099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8052e-01  +1.0858e+03  1.09e+03  4.33e-01  7.85e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3155e-01  +1.2233e+02  1.22e+02  1.70e-01  3.94e+01  1.64e-02  2.76e-01  9.34e-01  
  3  +5.0873e-01  +3.1806e+01  3.13e+01  1.23e-01  2.84e+01  4.52e-05  2.57e-01  2.83e-01  
  4  +5.0106e-01  +3.1688e+00  2.67e+00  1.82e-02  4.30e+00  5.83e-06  1.66e-01  6.02e-01  
  5  +5.0011e-01  +9.6305e-01  4.63e-01  3.12e-03  7.53e-01  3.88e-05  9.52e-02  9.90e-01  
  6  +5.0004e-01  +7.2534e-01  2.25e-01  1.51e-03  3.66e-01  2.55e-05  4.23e-02  5.91e-01  
  7  +4.9998e-01  +6.7552e-01  1.76e-01  1.13e-03  2.74e-01  4.59e-05  1.14e-02  8.30e-01  
  8  +4.9797e-01  +6.4466e-01  1.47e-01  1.16e-04  2.84e-02  1.03e-03  3.62e-04  9.74e-01  
  9  +4.9459e-01  +6.2081e-01  1.26e-01  4.66e-05  1.14e-02  1.76e-03  1.43e-04  6.93e-01  
 10  +4.9479e-01  +6.2090e-01  1.26e-01  4.51e-05  1.10e-02  1.59e-03  1.38e-04  1.48e-01  
 11  +4.9350e-01  +6.1515e-01  1.22e-01  3.66e-05  8.96e-03  1.59e-03  1.12e-04  2.75e-01  
 12  +4.9275e-01  +6.0753e-01  1.15e-01  3.51e-05  8.59e-03  1.21e-03  1.07e-04  1.80e-01  
 13  +4.8765e-01  +5.7947e-01  9.18e-02  2.39e-05  5.83e-03  7.34e-04  7.39e-05  5.10e-01  
 14  +4.8053e-01  +5.4351e-01  6.30e-02  1.50e-05  3.66e-03  2.11e-04  4.74e-05  6.45e-01  
 15  +4.7545e-01  +5.2080e-01  4.54e-02  9.96e-06  2.43e-03  1.01e-04  3.20e-05  5.22e-01  
 16  +4.6833e-01  +4.9077e-01  2.24e-02  4.44e-06  1.08e-03  2.35e-05  1.46e-05  7.69e-01  
 17  +4.6482e-01  +4.7708e-01  1.23e-02  2.33e-06  5.69e-04  1.22e-05  7.83e-06  4.91e-01  
 18  +4.6433e-01  +4.7515e-01  1.08e-02  2.04e-06  4.97e-04  9.54e-06  6.86e-06  2.32e-01  
 19  +4.6376e-01  +4.7230e-01  8.54e-03  1.59e-06  3.89e-04  5.63e-07  5.41e-06  9.90e-01  
 20  +4.6134e-01  +4.6368e-01  2.34e-03  4.27e-07  1.04e-04  1.53e-07  1.49e-06  7.51e-01  
 21  +4.6045e-01  +4.6055e-01  1.05e-04  1.88e-08  4.59e-06  6.25e-09  6.78e-08  9.79e-01  
 22  +4.6040e-01  +4.6040e-01  1.07e-06  1.91e-10  4.67e-08  6.36e-11  6.92e-10  9.90e-01  
 23  +4.6040e-01  +4.6040e-01  1.07e-08  1.91e-12  4.67e-10  6.36e-13  6.92e-12  9.90e-01  
 24  +4.6040e-01  +4.6040e-01  1.07e-10  1.92e-14  4.68e-12  7.18e-15  7.77e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 168.0323ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:31 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:31 PM: Optimal value: 4.604e-01
(CVXPY) Sep 20 08:02:31 PM: Compilation took 3.942e-02 seconds
(CVXPY) Sep 20 08:02:31 PM: Solver (including time spent in interface) took 1.799e-01 seconds
Iteration: 9, Objective: 0.4604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:31 PM: Your problem has 5109 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:31 PM: Finished problem compilation (took 4.373e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5109
  constraints   = 10109
  nnz(P)        = 0
  nnz(A)        = 85871
  cones (total) = 1
    : Nonnegative = 1,  numel = 10109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8050e-01  +1.0856e+03  1.09e+03  4.33e-01  7.85e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3153e-01  +1.2227e+02  1.22e+02  1.70e-01  3.93e+01  1.64e-02  2.76e-01  9.34e-01  
  3  +5.0873e-01  +3.1788e+01  3.13e+01  1.23e-01  2.84e+01  4.52e-05  2.57e-01  2.84e-01  
  4  +5.0105e-01  +3.1648e+00  2.66e+00  1.82e-02  4.30e+00  5.83e-06  1.66e-01  6.03e-01  
  5  +5.0011e-01  +9.6780e-01  4.68e-01  3.15e-03  7.61e-01  3.89e-05  9.45e-02  9.90e-01  
  6  +5.0003e-01  +7.0069e-01  2.01e-01  1.35e-03  3.26e-01  2.45e-05  3.63e-02  6.49e-01  
  7  +4.9995e-01  +6.7203e-01  1.72e-01  1.08e-03  2.61e-01  5.85e-05  8.88e-03  8.26e-01  
  8  +4.9752e-01  +6.5328e-01  1.56e-01  1.08e-04  2.65e-02  1.24e-03  3.35e-04  9.66e-01  
  9  +4.9517e-01  +6.3254e-01  1.37e-01  5.48e-05  1.34e-02  1.59e-03  1.67e-04  6.54e-01  
 10  +4.9551e-01  +6.2651e-01  1.31e-01  5.16e-05  1.26e-02  9.93e-04  1.57e-04  3.58e-01  
 11  +4.9402e-01  +6.1760e-01  1.24e-01  4.03e-05  9.86e-03  9.06e-04  1.23e-04  3.69e-01  
 12  +4.9077e-01  +5.9645e-01  1.06e-01  3.14e-05  7.68e-03  5.01e-04  9.62e-05  4.85e-01  
 13  +4.8522e-01  +5.6973e-01  8.45e-02  2.18e-05  5.34e-03  3.80e-04  6.80e-05  3.60e-01  
 14  +4.7902e-01  +5.3976e-01  6.07e-02  1.44e-05  3.52e-03  1.01e-04  4.56e-05  6.67e-01  
 15  +4.7309e-01  +5.1417e-01  4.11e-02  9.01e-06  2.20e-03  6.16e-05  2.91e-05  4.15e-01  
 16  +4.7047e-01  +5.0260e-01  3.21e-02  6.55e-06  1.60e-03  9.88e-06  2.12e-05  8.43e-01  
 17  +4.6605e-01  +4.8472e-01  1.87e-02  3.66e-06  8.94e-04  4.21e-06  1.21e-05  6.07e-01  
 18  +4.6215e-01  +4.6899e-01  6.84e-03  1.30e-06  3.18e-04  7.06e-07  4.37e-06  9.07e-01  
 19  +4.6033e-01  +4.6207e-01  1.73e-03  3.27e-07  7.97e-05  1.65e-07  1.11e-06  7.92e-01  
 20  +4.5984e-01  +4.6020e-01  3.63e-04  6.82e-08  1.67e-05  3.18e-08  2.34e-07  8.36e-01  
 21  +4.5970e-01  +4.5971e-01  1.04e-05  1.95e-09  4.77e-07  7.28e-10  6.77e-09  9.90e-01  
 22  +4.5970e-01  +4.5970e-01  1.05e-07  1.96e-11  4.79e-09  7.33e-12  6.81e-11  9.90e-01  
 23  +4.5970e-01  +4.5970e-01  1.08e-09  2.02e-13  4.94e-11  7.86e-14  7.28e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 182.0376ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:31 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:31 PM: Optimal value: 4.597e-01
(CVXPY) Sep 20 08:02:31 PM: Compilation took 4.373e-02 seconds
(CVXPY) Sep 20 08:02:31 PM: Solver (including time spent in interface) took 1.941e-01 seconds
Iteration: 10, Objective: 0.4597
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:31 PM: Your problem has 5119 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:31 PM: Finished problem compilation (took 4.579e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5119
  constraints   = 10119
  nnz(P)        = 0
  nnz(A)        = 87560
  cones (total) = 1
    : Nonnegative = 1,  numel = 10119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8046e-01  +1.0856e+03  1.09e+03  4.33e-01  7.85e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3150e-01  +1.2221e+02  1.22e+02  1.70e-01  3.92e+01  1.64e-02  2.76e-01  9.35e-01  
  3  +5.0872e-01  +3.1773e+01  3.13e+01  1.23e-01  2.83e+01  4.52e-05  2.56e-01  2.85e-01  
  4  +5.0105e-01  +3.1625e+00  2.66e+00  1.82e-02  4.30e+00  5.84e-06  1.65e-01  6.05e-01  
  5  +5.0011e-01  +9.7522e-01  4.75e-01  3.20e-03  7.74e-01  3.91e-05  9.38e-02  9.90e-01  
  6  +5.0003e-01  +7.1160e-01  2.12e-01  1.42e-03  3.44e-01  2.62e-05  3.62e-02  6.44e-01  
  7  +4.9992e-01  +6.8708e-01  1.87e-01  1.10e-03  2.66e-01  7.94e-05  7.01e-03  8.95e-01  
  8  +4.9674e-01  +6.6612e-01  1.69e-01  9.23e-05  2.26e-02  1.61e-03  2.84e-04  9.63e-01  
  9  +4.9532e-01  +6.5440e-01  1.59e-01  7.03e-05  1.72e-02  1.72e-03  2.15e-04  2.90e-01  
 10  +4.9371e-01  +6.4057e-01  1.47e-01  4.98e-05  1.22e-02  1.60e-03  1.52e-04  4.60e-01  
 11  +4.9371e-01  +6.3882e-01  1.45e-01  4.95e-05  1.21e-02  1.50e-03  1.51e-04  4.70e-02  
 12  +4.9469e-01  +6.2961e-01  1.35e-01  4.66e-05  1.14e-02  5.59e-04  1.41e-04  5.44e-01  
 13  +4.9033e-01  +6.0361e-01  1.13e-01  3.14e-05  7.69e-03  3.42e-04  9.59e-05  5.91e-01  
 14  +4.8287e-01  +5.6766e-01  8.48e-02  2.07e-05  5.06e-03  2.19e-04  6.46e-05  4.20e-01  
 15  +4.7504e-01  +5.3184e-01  5.68e-02  1.26e-05  3.09e-03  3.27e-05  4.06e-05  7.65e-01  
 16  +4.7082e-01  +5.1507e-01  4.42e-02  9.20e-06  2.25e-03  1.85e-05  3.01e-05  4.59e-01  
 17  +4.6435e-01  +4.8945e-01  2.51e-02  4.74e-06  1.16e-03  8.50e-07  1.59e-05  9.90e-01  
 18  +4.6282e-01  +4.8358e-01  2.08e-02  3.88e-06  9.48e-04  8.49e-07  1.31e-05  3.78e-01  
 19  +4.5723e-01  +4.6304e-01  5.81e-03  1.05e-06  2.57e-04  2.43e-07  3.69e-06  7.46e-01  
 20  +4.5525e-01  +4.5583e-01  5.85e-04  1.04e-07  2.55e-05  3.52e-08  3.74e-07  9.90e-01  
 21  +4.5500e-01  +4.5501e-01  7.13e-06  1.27e-09  3.11e-07  4.18e-10  4.59e-09  9.88e-01  
 22  +4.5500e-01  +4.5500e-01  7.13e-08  1.27e-11  3.11e-09  4.18e-12  4.59e-11  9.90e-01  
 23  +4.5500e-01  +4.5500e-01  7.13e-10  1.27e-13  3.11e-11  4.21e-14  4.62e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 175.0106ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:31 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:31 PM: Optimal value: 4.550e-01
(CVXPY) Sep 20 08:02:31 PM: Compilation took 4.579e-02 seconds
(CVXPY) Sep 20 08:02:31 PM: Solver (including time spent in interface) took 1.879e-01 seconds
Iteration: 11, Objective: 0.4550
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:31 PM: Your problem has 5129 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:32 PM: Finished problem compilation (took 4.806e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5129
  constraints   = 10129
  nnz(P)        = 0
  nnz(A)        = 88946
  cones (total) = 1
    : Nonnegative = 1,  numel = 10129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8037e-01  +1.0858e+03  1.09e+03  4.34e-01  7.85e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3143e-01  +1.2210e+02  1.22e+02  1.70e-01  3.92e+01  1.64e-02  2.76e-01  9.36e-01  
  3  +5.0871e-01  +3.1746e+01  3.12e+01  1.23e-01  2.83e+01  4.53e-05  2.56e-01  2.86e-01  
  4  +5.0105e-01  +3.1643e+00  2.66e+00  1.82e-02  4.30e+00  5.85e-06  1.65e-01  6.06e-01  
  5  +5.0012e-01  +9.8593e-01  4.86e-01  3.28e-03  7.92e-01  3.95e-05  9.30e-02  9.90e-01  
  6  +5.0004e-01  +7.5737e-01  2.57e-01  1.73e-03  4.19e-01  2.96e-05  4.20e-02  5.75e-01  
  7  +4.9992e-01  +6.8578e-01  1.86e-01  1.11e-03  2.70e-01  7.58e-05  7.54e-03  8.92e-01  
  8  +4.9682e-01  +6.7016e-01  1.73e-01  1.00e-04  2.46e-02  1.57e-03  3.09e-04  9.61e-01  
  9  +4.9536e-01  +6.5959e-01  1.64e-01  7.56e-05  1.85e-02  1.75e-03  2.31e-04  2.91e-01  
 10  +4.9564e-01  +6.4415e-01  1.49e-01  5.69e-05  1.39e-02  5.91e-04  1.72e-04  8.01e-01  
 11  +4.9497e-01  +6.3709e-01  1.42e-01  5.32e-05  1.30e-02  4.32e-04  1.61e-04  2.73e-01  
 12  +4.9336e-01  +6.2445e-01  1.31e-01  4.37e-05  1.07e-02  2.00e-04  1.33e-04  5.97e-01  
 13  +4.9288e-01  +6.2157e-01  1.29e-01  4.31e-05  1.06e-02  1.78e-04  1.31e-04  8.54e-02  
 14  +4.9269e-01  +6.2057e-01  1.28e-01  4.29e-05  1.05e-02  1.62e-04  1.30e-04  7.41e-02  
 15  +4.8369e-01  +5.7755e-01  9.39e-02  2.27e-05  5.56e-03  1.39e-04  7.08e-05  5.10e-01  
 16  +4.7921e-01  +5.5727e-01  7.81e-02  1.82e-05  4.46e-03  1.05e-04  5.77e-05  2.35e-01  
 17  +4.7353e-01  +5.3143e-01  5.79e-02  1.28e-05  3.13e-03  1.05e-05  4.14e-05  8.17e-01  
 18  +4.6811e-01  +5.0905e-01  4.09e-02  8.57e-06  2.09e-03  6.93e-06  2.83e-05  3.61e-01  
 19  +4.6419e-01  +4.9276e-01  2.86e-02  5.53e-06  1.35e-03  1.54e-06  1.85e-05  9.90e-01  
 20  +4.5838e-01  +4.7075e-01  1.24e-02  2.29e-06  5.58e-04  6.79e-07  7.89e-06  6.41e-01  
 21  +4.5508e-01  +4.5848e-01  3.40e-03  6.10e-07  1.49e-04  2.12e-07  2.16e-06  9.90e-01  
 22  +4.5378e-01  +4.5398e-01  2.01e-04  3.56e-08  8.70e-06  1.24e-08  1.28e-07  9.54e-01  
 23  +4.5370e-01  +4.5370e-01  2.05e-06  3.64e-10  8.90e-08  1.27e-10  1.31e-09  9.90e-01  
 24  +4.5370e-01  +4.5370e-01  2.05e-08  3.64e-12  8.90e-10  1.27e-12  1.31e-11  9.90e-01  
 25  +4.5370e-01  +4.5370e-01  2.05e-10  3.64e-14  8.90e-12  1.29e-14  1.33e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 191.2516ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:32 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:32 PM: Optimal value: 4.537e-01
(CVXPY) Sep 20 08:02:32 PM: Compilation took 4.806e-02 seconds
(CVXPY) Sep 20 08:02:32 PM: Solver (including time spent in interface) took 2.056e-01 seconds
Iteration: 12, Objective: 0.4537
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:32 PM: Your problem has 5139 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:32 PM: Finished problem compilation (took 4.520e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5139
  constraints   = 10139
  nnz(P)        = 0
  nnz(A)        = 89903
  cones (total) = 1
    : Nonnegative = 1,  numel = 10139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8030e-01  +1.0859e+03  1.09e+03  4.34e-01  7.85e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3138e-01  +1.2202e+02  1.21e+02  1.70e-01  3.91e+01  1.64e-02  2.76e-01  9.36e-01  
  3  +5.0870e-01  +3.1727e+01  3.12e+01  1.23e-01  2.83e+01  4.54e-05  2.56e-01  2.88e-01  
  4  +5.0106e-01  +3.1662e+00  2.67e+00  1.82e-02  4.30e+00  5.86e-06  1.65e-01  6.06e-01  
  5  +5.0012e-01  +9.9395e-01  4.94e-01  3.33e-03  8.06e-01  3.99e-05  9.25e-02  9.90e-01  
  6  +5.0004e-01  +7.5863e-01  2.59e-01  1.74e-03  4.21e-01  3.06e-05  3.89e-02  6.42e-01  
  7  +4.9987e-01  +7.1259e-01  2.13e-01  1.11e-03  2.70e-01  1.09e-04  5.64e-03  9.56e-01  
  8  +4.9654e-01  +6.9161e-01  1.95e-01  1.02e-04  2.49e-02  1.67e-03  3.12e-04  9.46e-01  
  9  +4.9546e-01  +6.7856e-01  1.83e-01  8.22e-05  2.02e-02  1.61e-03  2.51e-04  2.83e-01  
 10  +4.9450e-01  +6.7029e-01  1.76e-01  6.60e-05  1.62e-02  1.58e-03  2.01e-04  3.08e-01  
 11  +4.9367e-01  +6.5312e-01  1.59e-01  5.11e-05  1.25e-02  9.63e-04  1.55e-04  5.47e-01  
 12  +4.9329e-01  +6.4929e-01  1.56e-01  5.10e-05  1.25e-02  8.91e-04  1.55e-04  3.25e-02  
 13  +4.8845e-01  +6.1762e-01  1.29e-01  3.62e-05  8.86e-03  5.88e-04  1.11e-04  4.70e-01  
 14  +4.7955e-01  +5.7108e-01  9.15e-02  2.25e-05  5.49e-03  3.71e-04  7.11e-05  4.24e-01  
 15  +4.7519e-01  +5.4922e-01  7.40e-02  1.74e-05  4.25e-03  2.14e-04  5.59e-05  3.96e-01  
 16  +4.6661e-01  +5.0977e-01  4.32e-02  9.28e-06  2.27e-03  8.85e-05  3.08e-05  5.76e-01  
 17  +4.6144e-01  +4.8759e-01  2.62e-02  5.24e-06  1.28e-03  2.92e-05  1.78e-05  6.83e-01  
 18  +4.5658e-01  +4.6835e-01  1.18e-02  2.23e-06  5.45e-04  9.68e-06  7.83e-06  6.80e-01  
 19  +4.5448e-01  +4.6029e-01  5.81e-03  1.08e-06  2.63e-04  3.29e-06  3.86e-06  6.72e-01  
 20  +4.5300e-01  +4.5472e-01  1.72e-03  3.14e-07  7.67e-05  1.36e-07  1.14e-06  9.90e-01  
 21  +4.5232e-01  +4.5236e-01  4.42e-05  8.03e-09  1.96e-06  3.36e-09  2.95e-08  9.77e-01  
 22  +4.5230e-01  +4.5230e-01  4.42e-07  8.04e-11  1.96e-08  3.36e-11  2.95e-10  9.90e-01  
 23  +4.5230e-01  +4.5230e-01  4.42e-09  8.04e-13  1.96e-10  3.42e-13  3.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 168.6522ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:32 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:32 PM: Optimal value: 4.523e-01
(CVXPY) Sep 20 08:02:32 PM: Compilation took 4.520e-02 seconds
(CVXPY) Sep 20 08:02:32 PM: Solver (including time spent in interface) took 1.804e-01 seconds
Iteration: 13, Objective: 0.4523
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:32 PM: Your problem has 5149 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:32 PM: Finished problem compilation (took 4.631e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5149
  constraints   = 10149
  nnz(P)        = 0
  nnz(A)        = 90796
  cones (total) = 1
    : Nonnegative = 1,  numel = 10149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8023e-01  +1.0860e+03  1.09e+03  4.34e-01  7.84e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3132e-01  +1.2190e+02  1.21e+02  1.70e-01  3.90e+01  1.64e-02  2.76e-01  9.37e-01  
  3  +5.0868e-01  +3.1689e+01  3.12e+01  1.23e-01  2.82e+01  4.55e-05  2.56e-01  2.89e-01  
  4  +5.0105e-01  +3.1640e+00  2.66e+00  1.82e-02  4.30e+00  5.87e-06  1.64e-01  6.08e-01  
  5  +5.0012e-01  +1.0094e+00  5.09e-01  3.44e-03  8.31e-01  4.05e-05  9.13e-02  9.90e-01  
  6  +5.0003e-01  +7.4605e-01  2.46e-01  1.65e-03  4.00e-01  3.24e-05  3.22e-02  7.34e-01  
  7  +4.9967e-01  +7.6882e-01  2.69e-01  9.46e-04  2.31e-01  2.18e-04  3.58e-03  9.90e-01  
  8  +4.9522e-01  +7.3909e-01  2.44e-01  9.84e-05  2.41e-02  2.21e-03  2.99e-04  9.17e-01  
  9  +4.9195e-01  +6.9095e-01  1.99e-01  6.28e-05  1.54e-02  1.70e-03  1.91e-04  5.25e-01  
 10  +4.9168e-01  +6.7784e-01  1.86e-01  5.84e-05  1.43e-02  1.23e-03  1.78e-04  2.42e-01  
 11  +4.8854e-01  +6.4755e-01  1.59e-01  4.56e-05  1.12e-02  7.54e-04  1.40e-04  4.28e-01  
 12  +4.7825e-01  +5.8212e-01  1.04e-01  2.66e-05  6.51e-03  3.14e-04  8.47e-05  5.54e-01  
 13  +4.7049e-01  +5.4295e-01  7.25e-02  1.71e-05  4.18e-03  1.94e-04  5.60e-05  3.91e-01  
 14  +4.6717e-01  +5.2498e-01  5.78e-02  1.29e-05  3.14e-03  7.09e-05  4.25e-05  6.28e-01  
 15  +4.6175e-01  +5.0032e-01  3.86e-02  8.10e-06  1.98e-03  2.91e-05  2.74e-05  5.97e-01  
 16  +4.5787e-01  +4.8291e-01  2.50e-02  4.99e-06  1.22e-03  4.23e-06  1.72e-05  8.96e-01  
 17  +4.5606e-01  +4.7506e-01  1.90e-02  3.73e-06  9.11e-04  1.15e-06  1.30e-05  9.90e-01  
 18  +4.5122e-01  +4.5661e-01  5.39e-03  1.02e-06  2.50e-04  3.25e-07  3.71e-06  7.57e-01  
 19  +4.4943e-01  +4.4998e-01  5.57e-04  1.04e-07  2.53e-05  3.19e-08  3.87e-07  9.90e-01  
 20  +4.4921e-01  +4.4923e-01  1.92e-05  3.56e-09  8.70e-07  1.10e-09  1.34e-08  9.82e-01  
 21  +4.4920e-01  +4.4920e-01  1.92e-07  3.57e-11  8.72e-09  1.10e-11  1.34e-10  9.90e-01  
 22  +4.4920e-01  +4.4920e-01  1.92e-09  3.57e-13  8.72e-11  1.14e-13  1.39e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 157.4131ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:33 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:33 PM: Optimal value: 4.492e-01
(CVXPY) Sep 20 08:02:33 PM: Compilation took 4.631e-02 seconds
(CVXPY) Sep 20 08:02:33 PM: Solver (including time spent in interface) took 1.694e-01 seconds
Iteration: 14, Objective: 0.4492
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:33 PM: Your problem has 5159 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:33 PM: Finished problem compilation (took 4.827e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5159
  constraints   = 10159
  nnz(P)        = 0
  nnz(A)        = 91275
  cones (total) = 1
    : Nonnegative = 1,  numel = 10159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8018e-01  +1.0860e+03  1.09e+03  4.34e-01  7.84e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3128e-01  +1.2182e+02  1.21e+02  1.70e-01  3.90e+01  1.64e-02  2.75e-01  9.38e-01  
  3  +5.0868e-01  +3.1668e+01  3.12e+01  1.23e-01  2.81e+01  4.55e-05  2.55e-01  2.90e-01  
  4  +5.0105e-01  +3.1647e+00  2.66e+00  1.82e-02  4.30e+00  5.88e-06  1.64e-01  6.09e-01  
  5  +5.0012e-01  +1.0151e+00  5.15e-01  3.48e-03  8.40e-01  4.07e-05  9.08e-02  9.90e-01  
  6  +5.0005e-01  +8.0360e-01  3.04e-01  2.04e-03  4.94e-01  3.49e-05  4.03e-02  6.33e-01  
  7  +4.9986e-01  +7.5322e-01  2.53e-01  1.27e-03  3.09e-01  1.21e-04  6.11e-03  9.54e-01  
  8  +4.9618e-01  +7.3111e-01  2.35e-01  1.13e-04  2.77e-02  1.85e-03  3.43e-04  9.45e-01  
  9  +4.9308e-01  +7.0074e-01  2.08e-01  7.42e-05  1.82e-02  1.98e-03  2.26e-04  4.06e-01  
 10  +4.9133e-01  +6.8618e-01  1.95e-01  6.00e-05  1.47e-02  1.84e-03  1.83e-04  2.83e-01  
 11  +4.8993e-01  +6.6290e-01  1.73e-01  5.21e-05  1.28e-02  1.08e-03  1.59e-04  3.77e-01  
 12  +4.8791e-01  +6.4156e-01  1.54e-01  4.65e-05  1.14e-02  5.47e-04  1.43e-04  3.88e-01  
 13  +4.7974e-01  +5.9722e-01  1.17e-01  3.03e-05  7.42e-03  4.03e-04  9.59e-05  3.82e-01  
 14  +4.6722e-01  +5.3395e-01  6.67e-02  1.51e-05  3.70e-03  1.45e-04  5.02e-05  6.16e-01  
 15  +4.6523e-01  +5.2332e-01  5.81e-02  1.27e-05  3.09e-03  5.33e-05  4.23e-05  6.19e-01  
 16  +4.5706e-01  +4.8874e-01  3.17e-02  6.49e-06  1.59e-03  1.85e-05  2.25e-05  6.44e-01  
 17  +4.5014e-01  +4.6051e-01  1.04e-02  2.02e-06  4.94e-04  4.62e-06  7.30e-06  7.56e-01  
 18  +4.4793e-01  +4.5212e-01  4.19e-03  7.97e-07  1.95e-04  1.43e-06  2.94e-06  7.04e-01  
 19  +4.4664e-01  +4.4723e-01  5.91e-04  1.11e-07  2.71e-05  4.45e-08  4.17e-07  9.90e-01  
 20  +4.4640e-01  +4.4641e-01  7.65e-06  1.43e-09  3.50e-07  5.37e-10  5.42e-09  9.90e-01  
 21  +4.4640e-01  +4.4640e-01  7.65e-08  1.43e-11  3.50e-09  5.37e-12  5.42e-11  9.90e-01  
 22  +4.4640e-01  +4.4640e-01  7.66e-10  1.43e-13  3.50e-11  5.62e-14  5.66e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 170.8194ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:33 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:33 PM: Optimal value: 4.464e-01
(CVXPY) Sep 20 08:02:33 PM: Compilation took 4.827e-02 seconds
(CVXPY) Sep 20 08:02:33 PM: Solver (including time spent in interface) took 1.832e-01 seconds
Iteration: 15, Objective: 0.4464
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:33 PM: Your problem has 5169 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:33 PM: Finished problem compilation (took 4.975e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5169
  constraints   = 10169
  nnz(P)        = 0
  nnz(A)        = 92328
  cones (total) = 1
    : Nonnegative = 1,  numel = 10169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8011e-01  +1.0860e+03  1.09e+03  4.34e-01  7.83e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3124e-01  +1.2173e+02  1.21e+02  1.70e-01  3.89e+01  1.64e-02  2.75e-01  9.38e-01  
  3  +5.0867e-01  +3.1643e+01  3.11e+01  1.22e-01  2.81e+01  4.56e-05  2.55e-01  2.92e-01  
  4  +5.0105e-01  +3.1623e+00  2.66e+00  1.82e-02  4.30e+00  5.89e-06  1.63e-01  6.10e-01  
  5  +5.0014e-01  +1.0440e+00  5.44e-01  3.68e-03  8.88e-01  4.09e-05  9.15e-02  9.69e-01  
  6  +5.0004e-01  +7.6794e-01  2.68e-01  1.80e-03  4.35e-01  3.43e-05  3.15e-02  7.64e-01  
  7  +4.9968e-01  +7.7242e-01  2.73e-01  9.78e-04  2.39e-01  2.14e-04  3.70e-03  9.56e-01  
  8  +4.9510e-01  +7.4360e-01  2.48e-01  9.92e-05  2.43e-02  2.27e-03  2.98e-04  9.21e-01  
  9  +4.9291e-01  +7.2151e-01  2.29e-01  7.66e-05  1.88e-02  2.19e-03  2.31e-04  2.98e-01  
 10  +4.9246e-01  +6.9392e-01  2.01e-01  6.48e-05  1.59e-02  1.17e-03  1.95e-04  4.54e-01  
 11  +4.8928e-01  +6.5918e-01  1.70e-01  5.24e-05  1.28e-02  5.57e-04  1.60e-04  4.83e-01  
 12  +4.7574e-01  +5.8180e-01  1.06e-01  2.57e-05  6.28e-03  2.77e-04  8.17e-05  6.24e-01  
 13  +4.7001e-01  +5.5433e-01  8.43e-02  1.96e-05  4.79e-03  1.56e-04  6.40e-05  3.98e-01  
 14  +4.6443e-01  +5.2657e-01  6.21e-02  1.38e-05  3.36e-03  1.60e-06  4.60e-05  9.20e-01  
 15  +4.5505e-01  +4.8637e-01  3.13e-02  6.52e-06  1.59e-03  1.15e-06  2.28e-05  7.24e-01  
 16  +4.4846e-01  +4.5930e-01  1.08e-02  2.16e-06  5.27e-04  4.57e-07  7.89e-06  7.66e-01  
 17  +4.4632e-01  +4.5111e-01  4.79e-03  9.31e-07  2.28e-04  2.14e-07  3.48e-06  6.53e-01  
 18  +4.4489e-01  +4.4564e-01  7.47e-04  1.43e-07  3.51e-05  4.07e-08  5.47e-07  9.90e-01  
 19  +4.4460e-01  +4.4461e-01  1.05e-05  2.00e-09  4.90e-07  5.63e-10  7.70e-09  9.90e-01  
 20  +4.4460e-01  +4.4460e-01  1.05e-07  2.00e-11  4.90e-09  5.63e-12  7.71e-11  9.90e-01  
 21  +4.4460e-01  +4.4460e-01  1.05e-09  2.00e-13  4.90e-11  5.63e-14  7.71e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 175.052ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:33 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:33 PM: Optimal value: 4.446e-01
(CVXPY) Sep 20 08:02:33 PM: Compilation took 4.975e-02 seconds
(CVXPY) Sep 20 08:02:33 PM: Solver (including time spent in interface) took 1.880e-01 seconds
Iteration: 16, Objective: 0.4446
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:34 PM: Your problem has 5179 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:34 PM: Finished problem compilation (took 8.122e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5179
  constraints   = 10179
  nnz(P)        = 0
  nnz(A)        = 93075
  cones (total) = 1
    : Nonnegative = 1,  numel = 10179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8004e-01  +1.0860e+03  1.09e+03  4.35e-01  7.83e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3118e-01  +1.2162e+02  1.21e+02  1.70e-01  3.88e+01  1.64e-02  2.75e-01  9.39e-01  
  3  +5.0865e-01  +3.1612e+01  3.11e+01  1.22e-01  2.80e+01  4.56e-05  2.55e-01  2.93e-01  
  4  +5.0105e-01  +3.1610e+00  2.66e+00  1.82e-02  4.30e+00  5.90e-06  1.62e-01  6.11e-01  
  5  +5.0013e-01  +1.0399e+00  5.40e-01  3.65e-03  8.81e-01  4.17e-05  8.90e-02  9.90e-01  
  6  +5.0003e-01  +7.6154e-01  2.62e-01  1.75e-03  4.23e-01  3.83e-05  2.65e-02  8.30e-01  
  7  +4.9896e-01  +7.8488e-01  2.86e-01  4.72e-04  1.15e-01  5.70e-04  1.52e-03  9.82e-01  
  8  +4.9374e-01  +7.4825e-01  2.55e-01  9.24e-05  2.27e-02  2.57e-03  2.79e-04  8.20e-01  
  9  +4.9212e-01  +7.3392e-01  2.42e-01  7.59e-05  1.86e-02  2.49e-03  2.29e-04  2.56e-01  
 10  +4.9107e-01  +7.1061e-01  2.20e-01  6.55e-05  1.60e-02  1.73e-03  1.97e-04  3.32e-01  
 11  +4.8962e-01  +6.9139e-01  2.02e-01  6.18e-05  1.51e-02  1.28e-03  1.87e-04  1.70e-01  
 12  +4.8507e-01  +6.5624e-01  1.71e-01  4.91e-05  1.20e-02  8.67e-04  1.52e-04  3.23e-01  
 13  +4.7422e-01  +5.9137e-01  1.17e-01  2.94e-05  7.18e-03  5.04e-04  9.43e-05  4.52e-01  
 14  +4.6603e-01  +5.4531e-01  7.93e-02  1.86e-05  4.53e-03  1.74e-04  6.15e-05  6.02e-01  
 15  +4.6090e-01  +5.1853e-01  5.76e-02  1.28e-05  3.11e-03  4.96e-05  4.32e-05  6.94e-01  
 16  +4.5158e-01  +4.7736e-01  2.58e-02  5.38e-06  1.31e-03  1.70e-05  1.91e-05  6.44e-01  
 17  +4.4646e-01  +4.5602e-01  9.56e-03  1.91e-06  4.66e-04  3.75e-06  7.05e-06  7.93e-01  
 18  +4.4366e-01  +4.4497e-01  1.30e-03  2.55e-07  6.22e-05  4.14e-07  9.69e-07  8.90e-01  
 19  +4.4322e-01  +4.4328e-01  5.89e-05  1.14e-08  2.79e-06  6.38e-09  4.41e-08  9.90e-01  
 20  +4.4320e-01  +4.4320e-01  5.91e-07  1.15e-10  2.80e-08  6.40e-11  4.42e-10  9.90e-01  
 21  +4.4320e-01  +4.4320e-01  5.91e-09  1.15e-12  2.80e-10  6.40e-13  4.42e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 330.0069ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:34 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:34 PM: Optimal value: 4.432e-01
(CVXPY) Sep 20 08:02:34 PM: Compilation took 8.122e-02 seconds
(CVXPY) Sep 20 08:02:34 PM: Solver (including time spent in interface) took 3.550e-01 seconds
Iteration: 17, Objective: 0.4432
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:34 PM: Your problem has 5189 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:35 PM: Finished problem compilation (took 8.102e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5189
  constraints   = 10189
  nnz(P)        = 0
  nnz(A)        = 94047
  cones (total) = 1
    : Nonnegative = 1,  numel = 10189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8000e-01  +1.0861e+03  1.09e+03  4.35e-01  7.82e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3115e-01  +1.2158e+02  1.21e+02  1.70e-01  3.87e+01  1.64e-02  2.75e-01  9.39e-01  
  3  +5.0865e-01  +3.1601e+01  3.11e+01  1.22e-01  2.80e+01  4.56e-05  2.54e-01  2.94e-01  
  4  +5.0105e-01  +3.1618e+00  2.66e+00  1.82e-02  4.30e+00  5.91e-06  1.62e-01  6.12e-01  
  5  +5.0013e-01  +1.0448e+00  5.45e-01  3.69e-03  8.89e-01  4.19e-05  8.86e-02  9.90e-01  
  6  +5.0002e-01  +7.4820e-01  2.48e-01  1.65e-03  4.00e-01  3.91e-05  2.40e-02  8.56e-01  
  7  +4.9934e-01  +8.2337e-01  3.24e-01  7.24e-04  1.77e-01  3.91e-04  2.41e-03  9.90e-01  
  8  +4.9373e-01  +7.8279e-01  2.89e-01  9.68e-05  2.37e-02  2.72e-03  2.90e-04  8.81e-01  
  9  +4.9237e-01  +7.6254e-01  2.70e-01  8.21e-05  2.01e-02  2.41e-03  2.46e-04  2.44e-01  
 10  +4.9170e-01  +7.2744e-01  2.36e-01  7.15e-05  1.75e-02  1.32e-03  2.15e-04  3.77e-01  
 11  +4.8868e-01  +6.8480e-01  1.96e-01  6.08e-05  1.49e-02  6.22e-04  1.85e-04  3.97e-01  
 12  +4.7960e-01  +6.2325e-01  1.44e-01  3.88e-05  9.49e-03  3.37e-04  1.22e-04  4.90e-01  
 13  +4.6822e-01  +5.6080e-01  9.26e-02  2.25e-05  5.50e-03  1.59e-04  7.41e-05  5.07e-01  
 14  +4.6380e-01  +5.3894e-01  7.51e-02  1.75e-05  4.28e-03  1.14e-04  5.88e-05  2.86e-01  
 15  +4.5774e-01  +5.0948e-01  5.17e-02  1.14e-05  2.79e-03  5.96e-05  3.93e-05  4.77e-01  
 16  +4.5456e-01  +4.9476e-01  4.02e-02  8.65e-06  2.11e-03  3.91e-05  3.02e-05  3.53e-01  
 17  +4.4741e-01  +4.6231e-01  1.49e-02  3.02e-06  7.36e-04  1.02e-06  1.10e-05  9.90e-01  
 18  +4.4453e-01  +4.5106e-01  6.53e-03  1.30e-06  3.16e-04  4.31e-07  4.84e-06  6.45e-01  
 19  +4.4277e-01  +4.4431e-01  1.54e-03  3.00e-07  7.32e-05  9.66e-08  1.15e-06  8.26e-01  
 20  +4.4222e-01  +4.4227e-01  5.21e-05  1.00e-08  2.45e-06  3.01e-09  3.91e-08  9.79e-01  
 21  +4.4220e-01  +4.4220e-01  5.21e-07  1.00e-10  2.45e-08  3.02e-11  3.92e-10  9.90e-01  
 22  +4.4220e-01  +4.4220e-01  5.21e-09  1.00e-12  2.45e-10  3.02e-13  3.92e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 313.1396ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:35 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:35 PM: Optimal value: 4.422e-01
(CVXPY) Sep 20 08:02:35 PM: Compilation took 8.102e-02 seconds
(CVXPY) Sep 20 08:02:35 PM: Solver (including time spent in interface) took 3.307e-01 seconds
Iteration: 18, Objective: 0.4422
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:35 PM: Your problem has 5199 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:35 PM: Finished problem compilation (took 7.419e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5199
  constraints   = 10199
  nnz(P)        = 0
  nnz(A)        = 94780
  cones (total) = 1
    : Nonnegative = 1,  numel = 10199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7998e-01  +1.0861e+03  1.09e+03  4.35e-01  7.82e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3114e-01  +1.2156e+02  1.21e+02  1.70e-01  3.87e+01  1.64e-02  2.75e-01  9.39e-01  
  3  +5.0865e-01  +3.1594e+01  3.11e+01  1.22e-01  2.80e+01  4.57e-05  2.54e-01  2.94e-01  
  4  +5.0105e-01  +3.1610e+00  2.66e+00  1.82e-02  4.30e+00  5.91e-06  1.62e-01  6.12e-01  
  5  +5.0014e-01  +1.0493e+00  5.49e-01  3.72e-03  8.97e-01  4.20e-05  8.83e-02  9.90e-01  
  6  +5.0003e-01  +7.7703e-01  2.77e-01  1.85e-03  4.48e-01  4.04e-05  2.72e-02  7.99e-01  
  7  +4.9934e-01  +8.2311e-01  3.24e-01  7.36e-04  1.80e-01  3.90e-04  2.45e-03  9.90e-01  
  8  +4.9342e-01  +7.8354e-01  2.90e-01  9.39e-05  2.30e-02  2.87e-03  2.81e-04  8.87e-01  
  9  +4.9125e-01  +7.5211e-01  2.61e-01  7.34e-05  1.80e-02  2.33e-03  2.20e-04  3.55e-01  
 10  +4.8898e-01  +7.0231e-01  2.13e-01  6.50e-05  1.59e-02  9.63e-04  1.97e-04  3.75e-01  
 11  +4.7847e-01  +6.2705e-01  1.49e-01  3.91e-05  9.55e-03  5.47e-04  1.23e-04  4.79e-01  
 12  +4.6900e-01  +5.7128e-01  1.02e-01  2.51e-05  6.12e-03  2.78e-04  8.21e-05  4.50e-01  
 13  +4.6437e-01  +5.4658e-01  8.22e-02  1.93e-05  4.71e-03  1.92e-04  6.43e-05  3.13e-01  
 14  +4.6082e-01  +5.2753e-01  6.67e-02  1.51e-05  3.68e-03  1.13e-04  5.09e-05  4.10e-01  
 15  +4.5178e-01  +4.8407e-01  3.23e-02  6.90e-06  1.68e-03  3.39e-05  2.42e-05  6.84e-01  
 16  +4.4821e-01  +4.6832e-01  2.01e-02  4.19e-06  1.02e-03  1.90e-05  1.51e-05  4.40e-01  
 17  +4.4625e-01  +4.5909e-01  1.28e-02  2.58e-06  6.28e-04  3.49e-06  9.44e-06  8.63e-01  
 18  +4.4294e-01  +4.4603e-01  3.09e-03  6.07e-07  1.48e-04  2.03e-07  2.31e-06  9.90e-01  
 19  +4.4188e-01  +4.4210e-01  2.14e-04  4.15e-08  1.01e-05  1.30e-08  1.62e-07  9.52e-01  
 20  +4.4180e-01  +4.4180e-01  2.27e-06  4.39e-10  1.07e-07  1.36e-10  1.72e-09  9.90e-01  
 21  +4.4180e-01  +4.4180e-01  2.27e-08  4.39e-12  1.07e-09  1.36e-12  1.72e-11  9.90e-01  
 22  +4.4180e-01  +4.4180e-01  2.28e-10  4.39e-14  1.07e-11  1.46e-14  1.84e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 288.6936ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:36 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:36 PM: Optimal value: 4.418e-01
(CVXPY) Sep 20 08:02:36 PM: Compilation took 7.419e-02 seconds
(CVXPY) Sep 20 08:02:36 PM: Solver (including time spent in interface) took 3.055e-01 seconds
Iteration: 19, Objective: 0.4418
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:36 PM: Your problem has 5209 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:36 PM: Finished problem compilation (took 8.179e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5209
  constraints   = 10209
  nnz(P)        = 0
  nnz(A)        = 95601
  cones (total) = 1
    : Nonnegative = 1,  numel = 10209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7992e-01  +1.0861e+03  1.09e+03  4.35e-01  7.81e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3113e-01  +1.2153e+02  1.21e+02  1.70e-01  3.86e+01  1.65e-02  2.74e-01  9.40e-01  
  3  +5.0864e-01  +3.1594e+01  3.11e+01  1.22e-01  2.79e+01  4.57e-05  2.54e-01  2.95e-01  
  4  +5.0105e-01  +3.1617e+00  2.66e+00  1.82e-02  4.30e+00  5.92e-06  1.62e-01  6.13e-01  
  5  +5.0014e-01  +1.0540e+00  5.54e-01  3.75e-03  9.04e-01  4.23e-05  8.80e-02  9.90e-01  
  6  +5.0003e-01  +7.8292e-01  2.83e-01  1.89e-03  4.56e-01  4.19e-05  2.67e-02  8.09e-01  
  7  +4.9930e-01  +8.3067e-01  3.31e-01  7.23e-04  1.77e-01  4.09e-04  2.40e-03  9.90e-01  
  8  +4.9341e-01  +7.8919e-01  2.96e-01  9.64e-05  2.37e-02  2.85e-03  2.89e-04  8.81e-01  
  9  +4.9192e-01  +7.6933e-01  2.77e-01  8.09e-05  1.98e-02  2.55e-03  2.43e-04  2.55e-01  
 10  +4.8949e-01  +7.3007e-01  2.41e-01  6.96e-05  1.70e-02  1.69e-03  2.11e-04  2.81e-01  
 11  +4.8831e-01  +7.1090e-01  2.23e-01  6.69e-05  1.64e-02  1.28e-03  2.04e-04  1.30e-01  
 12  +4.8074e-01  +6.4604e-01  1.65e-01  4.58e-05  1.12e-02  5.81e-04  1.44e-04  5.00e-01  
 13  +4.7239e-01  +5.9681e-01  1.24e-01  3.17e-05  7.74e-03  3.86e-04  1.03e-04  3.43e-01  
 14  +4.6341e-01  +5.4634e-01  8.29e-02  1.96e-05  4.77e-03  1.68e-04  6.56e-05  5.36e-01  
 15  +4.5886e-01  +5.1844e-01  5.96e-02  1.32e-05  3.22e-03  1.44e-05  4.50e-05  8.92e-01  
 16  +4.5247e-01  +4.8979e-01  3.73e-02  7.94e-06  1.94e-03  5.60e-06  2.78e-05  6.67e-01  
 17  +4.4851e-01  +4.7278e-01  2.43e-02  5.05e-06  1.23e-03  3.32e-06  1.80e-05  4.40e-01  
 18  +4.4423e-01  +4.5496e-01  1.07e-02  2.15e-06  5.25e-04  1.22e-06  7.93e-06  6.92e-01  
 19  +4.4139e-01  +4.4376e-01  2.37e-03  4.62e-07  1.13e-04  2.13e-07  1.75e-06  8.67e-01  
 20  +4.4067e-01  +4.4097e-01  3.06e-04  5.93e-08  1.45e-05  1.75e-08  2.27e-07  9.90e-01  
 21  +4.4055e-01  +4.4055e-01  3.46e-06  6.71e-10  1.64e-07  1.98e-10  2.57e-09  9.89e-01  
 22  +4.4055e-01  +4.4055e-01  3.46e-08  6.71e-12  1.64e-09  1.98e-12  2.57e-11  9.90e-01  
 23  +4.4055e-01  +4.4055e-01  3.46e-10  6.71e-14  1.64e-11  2.01e-14  2.62e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 310.2662ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:36 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:36 PM: Optimal value: 4.406e-01
(CVXPY) Sep 20 08:02:36 PM: Compilation took 8.179e-02 seconds
(CVXPY) Sep 20 08:02:36 PM: Solver (including time spent in interface) took 3.275e-01 seconds
Iteration: 20, Objective: 0.4406
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:37 PM: Your problem has 5219 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:37 PM: Finished problem compilation (took 8.695e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5219
  constraints   = 10219
  nnz(P)        = 0
  nnz(A)        = 96107
  cones (total) = 1
    : Nonnegative = 1,  numel = 10219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7986e-01  +1.0861e+03  1.09e+03  4.35e-01  7.81e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3109e-01  +1.2144e+02  1.21e+02  1.69e-01  3.85e+01  1.65e-02  2.74e-01  9.40e-01  
  3  +5.0864e-01  +3.1576e+01  3.11e+01  1.22e-01  2.79e+01  4.57e-05  2.54e-01  2.96e-01  
  4  +5.0105e-01  +3.1636e+00  2.66e+00  1.83e-02  4.30e+00  5.92e-06  1.61e-01  6.13e-01  
  5  +5.0014e-01  +1.0703e+00  5.70e-01  3.87e-03  9.31e-01  4.22e-05  8.87e-02  9.76e-01  
  6  +5.0003e-01  +7.8492e-01  2.85e-01  1.90e-03  4.60e-01  4.11e-05  2.77e-02  7.70e-01  
  7  +4.9903e-01  +8.2650e-01  3.27e-01  5.75e-04  1.41e-01  5.41e-04  1.85e-03  9.90e-01  
  8  +4.9316e-01  +7.8519e-01  2.92e-01  9.75e-05  2.39e-02  2.86e-03  2.92e-04  8.45e-01  
  9  +4.9109e-01  +7.5428e-01  2.63e-01  7.65e-05  1.87e-02  2.34e-03  2.30e-04  3.56e-01  
 10  +4.8868e-01  +7.1812e-01  2.29e-01  6.65e-05  1.63e-02  1.50e-03  2.02e-04  2.84e-01  
 11  +4.8282e-01  +6.5198e-01  1.69e-01  5.03e-05  1.23e-02  3.38e-04  1.57e-04  5.74e-01  
 12  +4.7373e-01  +5.9819e-01  1.24e-01  3.30e-05  8.04e-03  1.79e-04  1.06e-04  4.77e-01  
 13  +4.6369e-01  +5.4564e-01  8.20e-02  1.97e-05  4.81e-03  7.45e-05  6.60e-05  5.61e-01  
 14  +4.5858e-01  +5.1830e-01  5.97e-02  1.34e-05  3.26e-03  2.97e-06  4.55e-05  9.45e-01  
 15  +4.5333e-01  +4.9498e-01  4.16e-02  9.01e-06  2.19e-03  2.09e-06  3.13e-05  6.04e-01  
 16  +4.4734e-01  +4.6843e-01  2.11e-02  4.40e-06  1.07e-03  1.13e-06  1.57e-05  9.56e-01  
 17  +4.4282e-01  +4.4958e-01  6.76e-03  1.38e-06  3.36e-04  3.76e-07  5.07e-06  9.73e-01  
 18  +4.4128e-01  +4.4374e-01  2.46e-03  4.91e-07  1.20e-04  1.35e-07  1.84e-06  7.75e-01  
 19  +4.4070e-01  +4.4143e-01  7.34e-04  1.47e-07  3.57e-05  3.94e-08  5.50e-07  9.90e-01  
 20  +4.4044e-01  +4.4047e-01  3.24e-05  6.45e-09  1.57e-06  1.74e-09  2.43e-08  9.59e-01  
 21  +4.4043e-01  +4.4043e-01  3.27e-07  6.51e-11  1.59e-08  1.75e-11  2.45e-10  9.90e-01  
 22  +4.4043e-01  +4.4043e-01  3.38e-09  6.74e-13  1.64e-10  1.84e-13  2.57e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 346.6641ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:37 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:37 PM: Optimal value: 4.404e-01
(CVXPY) Sep 20 08:02:37 PM: Compilation took 8.695e-02 seconds
(CVXPY) Sep 20 08:02:37 PM: Solver (including time spent in interface) took 3.664e-01 seconds
Iteration: 21, Objective: 0.4404
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:37 PM: Your problem has 5229 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:37 PM: Finished problem compilation (took 9.319e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5229
  constraints   = 10229
  nnz(P)        = 0
  nnz(A)        = 96824
  cones (total) = 1
    : Nonnegative = 1,  numel = 10229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7982e-01  +1.0862e+03  1.09e+03  4.35e-01  7.80e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3106e-01  +1.2141e+02  1.21e+02  1.69e-01  3.84e+01  1.65e-02  2.74e-01  9.41e-01  
  3  +5.0863e-01  +3.1568e+01  3.11e+01  1.22e-01  2.78e+01  4.58e-05  2.54e-01  2.96e-01  
  4  +5.0105e-01  +3.1645e+00  2.66e+00  1.83e-02  4.30e+00  5.93e-06  1.61e-01  6.13e-01  
  5  +5.0014e-01  +1.0652e+00  5.65e-01  3.83e-03  9.23e-01  4.28e-05  8.74e-02  9.90e-01  
  6  +5.0003e-01  +8.0096e-01  3.01e-01  2.01e-03  4.86e-01  4.36e-05  2.87e-02  7.40e-01  
  7  +4.9921e-01  +8.0358e-01  3.04e-01  6.61e-04  1.62e-01  4.48e-04  2.19e-03  9.59e-01  
  8  +4.9259e-01  +7.6446e-01  2.72e-01  8.62e-05  2.11e-02  3.19e-03  2.59e-04  8.84e-01  
  9  +4.9119e-01  +7.4360e-01  2.52e-01  7.50e-05  1.84e-02  2.54e-03  2.26e-04  2.65e-01  
 10  +4.9029e-01  +7.2742e-01  2.37e-01  7.13e-05  1.75e-02  1.96e-03  2.15e-04  1.69e-01  
 11  +4.8134e-01  +6.4825e-01  1.67e-01  4.38e-05  1.07e-02  5.80e-04  1.37e-04  6.85e-01  
 12  +4.6942e-01  +5.8023e-01  1.11e-01  2.75e-05  6.70e-03  2.41e-04  9.01e-05  4.91e-01  
 13  +4.6200e-01  +5.4054e-01  7.85e-02  1.85e-05  4.51e-03  6.78e-05  6.26e-05  6.60e-01  
 14  +4.5313e-01  +4.9886e-01  4.57e-02  1.02e-05  2.49e-03  3.21e-05  3.60e-05  5.09e-01  
 15  +4.4885e-01  +4.7815e-01  2.93e-02  6.32e-06  1.54e-03  1.03e-05  2.26e-05  7.11e-01  
 16  +4.4337e-01  +4.5380e-01  1.04e-02  2.19e-06  5.34e-04  8.96e-07  8.10e-06  9.66e-01  
 17  +4.4193e-01  +4.4792e-01  5.99e-03  1.25e-06  3.04e-04  4.29e-07  4.66e-06  6.79e-01  
 18  +4.4031e-01  +4.4139e-01  1.09e-03  2.25e-07  5.48e-05  7.60e-08  8.52e-07  8.31e-01  
 19  +4.4006e-01  +4.4039e-01  3.23e-04  6.71e-08  1.63e-05  1.68e-08  2.54e-07  9.90e-01  
 20  +4.3995e-01  +4.3996e-01  4.52e-06  9.38e-10  2.28e-07  2.34e-10  3.56e-09  9.86e-01  
 21  +4.3995e-01  +4.3995e-01  4.56e-08  9.46e-12  2.30e-09  2.36e-12  3.59e-11  9.90e-01  
 22  +4.3995e-01  +4.3995e-01  4.57e-10  9.48e-14  2.31e-11  2.38e-14  3.61e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 330.1511ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:38 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:38 PM: Optimal value: 4.400e-01
(CVXPY) Sep 20 08:02:38 PM: Compilation took 9.319e-02 seconds
(CVXPY) Sep 20 08:02:38 PM: Solver (including time spent in interface) took 3.488e-01 seconds
Iteration: 22, Objective: 0.4400
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:38 PM: Your problem has 5239 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:38 PM: Finished problem compilation (took 8.317e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:38 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5239
  constraints   = 10239
  nnz(P)        = 0
  nnz(A)        = 97653
  cones (total) = 1
    : Nonnegative = 1,  numel = 10239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7979e-01  +1.0863e+03  1.09e+03  4.36e-01  7.80e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3103e-01  +1.2135e+02  1.21e+02  1.69e-01  3.84e+01  1.65e-02  2.74e-01  9.41e-01  
  3  +5.0863e-01  +3.1550e+01  3.10e+01  1.22e-01  2.78e+01  4.58e-05  2.53e-01  2.97e-01  
  4  +5.0105e-01  +3.1652e+00  2.66e+00  1.83e-02  4.30e+00  5.93e-06  1.61e-01  6.14e-01  
  5  +5.0014e-01  +1.0717e+00  5.72e-01  3.88e-03  9.33e-01  4.30e-05  8.69e-02  9.90e-01  
  6  +5.0003e-01  +7.9949e-01  2.99e-01  2.00e-03  4.82e-01  4.51e-05  2.68e-02  7.71e-01  
  7  +4.9901e-01  +8.4528e-01  3.46e-01  6.02e-04  1.47e-01  5.54e-04  1.93e-03  9.90e-01  
  8  +4.9353e-01  +8.0421e-01  3.11e-01  1.11e-04  2.73e-02  2.69e-03  3.34e-04  8.31e-01  
  9  +4.9391e-01  +7.7113e-01  2.77e-01  9.81e-05  2.40e-02  1.54e-03  2.93e-04  3.93e-01  
 10  +4.9134e-01  +7.2813e-01  2.37e-01  7.80e-05  1.91e-02  8.99e-04  2.35e-04  4.40e-01  
 11  +4.8983e-01  +7.0406e-01  2.14e-01  7.32e-05  1.79e-02  5.10e-04  2.23e-04  3.00e-01  
 12  +4.7935e-01  +6.3935e-01  1.60e-01  4.32e-05  1.06e-02  3.89e-04  1.36e-04  4.53e-01  
 13  +4.6896e-01  +5.8122e-01  1.12e-01  2.84e-05  6.93e-03  1.84e-04  9.38e-05  4.57e-01  
 14  +4.6364e-01  +5.5413e-01  9.05e-02  2.20e-05  5.36e-03  1.22e-04  7.44e-05  3.22e-01  
 15  +4.5401e-01  +5.0705e-01  5.30e-02  1.21e-05  2.94e-03  4.97e-05  4.26e-05  5.68e-01  
 16  +4.4705e-01  +4.7441e-01  2.74e-02  5.97e-06  1.45e-03  1.88e-05  2.17e-05  6.24e-01  
 17  +4.4253e-01  +4.5382e-01  1.13e-02  2.40e-06  5.83e-04  4.86e-06  8.91e-06  7.56e-01  
 18  +4.4136e-01  +4.4854e-01  7.17e-03  1.50e-06  3.65e-04  9.08e-07  5.63e-06  8.87e-01  
 19  +4.3947e-01  +4.4087e-01  1.40e-03  2.91e-07  7.08e-05  1.64e-07  1.11e-06  8.27e-01  
 20  +4.3905e-01  +4.3918e-01  1.36e-04  2.82e-08  6.87e-06  1.41e-08  1.09e-07  9.22e-01  
 21  +4.3900e-01  +4.3900e-01  1.44e-06  2.98e-10  7.24e-08  1.45e-10  1.14e-09  9.90e-01  
 22  +4.3900e-01  +4.3900e-01  1.45e-08  3.00e-12  7.31e-10  1.46e-12  1.16e-11  9.90e-01  
 23  +4.3900e-01  +4.3900e-01  1.61e-10  3.33e-14  8.10e-12  1.63e-14  1.29e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 302.3199ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:39 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:39 PM: Optimal value: 4.390e-01
(CVXPY) Sep 20 08:02:39 PM: Compilation took 8.317e-02 seconds
(CVXPY) Sep 20 08:02:39 PM: Solver (including time spent in interface) took 3.184e-01 seconds
Iteration: 23, Objective: 0.4390
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:39 PM: Your problem has 5249 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:39 PM: Finished problem compilation (took 8.021e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5249
  constraints   = 10249
  nnz(P)        = 0
  nnz(A)        = 98460
  cones (total) = 1
    : Nonnegative = 1,  numel = 10249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7976e-01  +1.0863e+03  1.09e+03  4.36e-01  7.79e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3100e-01  +1.2129e+02  1.21e+02  1.69e-01  3.83e+01  1.65e-02  2.74e-01  9.41e-01  
  3  +5.0862e-01  +3.1533e+01  3.10e+01  1.22e-01  2.77e+01  4.58e-05  2.53e-01  2.98e-01  
  4  +5.0105e-01  +3.1649e+00  2.66e+00  1.83e-02  4.30e+00  5.94e-06  1.61e-01  6.15e-01  
  5  +5.0014e-01  +1.0785e+00  5.78e-01  3.93e-03  9.45e-01  4.33e-05  8.65e-02  9.90e-01  
  6  +5.0003e-01  +8.1374e-01  3.14e-01  2.09e-03  5.05e-01  4.67e-05  2.72e-02  7.65e-01  
  7  +4.9881e-01  +8.4449e-01  3.46e-01  5.24e-04  1.28e-01  6.48e-04  1.67e-03  9.90e-01  
  8  +4.9370e-01  +8.0295e-01  3.09e-01  1.17e-04  2.87e-02  2.54e-03  3.53e-04  7.94e-01  
  9  +4.9135e-01  +7.7094e-01  2.80e-01  9.06e-05  2.22e-02  2.20e-03  2.73e-04  3.43e-01  
 10  +4.8965e-01  +7.2899e-01  2.39e-01  7.78e-05  1.90e-02  1.14e-03  2.37e-04  3.89e-01  
 11  +4.8879e-01  +7.0924e-01  2.20e-01  7.49e-05  1.83e-02  7.16e-04  2.29e-04  2.40e-01  
 12  +4.7836e-01  +6.4121e-01  1.63e-01  4.43e-05  1.08e-02  5.13e-04  1.41e-04  4.67e-01  
 13  +4.6744e-01  +5.7832e-01  1.11e-01  2.80e-05  6.81e-03  2.60e-04  9.28e-05  4.45e-01  
 14  +4.6238e-01  +5.5179e-01  8.94e-02  2.17e-05  5.28e-03  1.75e-04  7.34e-05  3.15e-01  
 15  +4.5711e-01  +5.2563e-01  6.85e-02  1.60e-05  3.90e-03  1.20e-04  5.55e-05  3.06e-01  
 16  +4.4891e-01  +4.8577e-01  3.69e-02  8.20e-06  1.99e-03  5.33e-05  2.95e-05  5.45e-01  
 17  +4.4288e-01  +4.5678e-01  1.39e-02  2.97e-06  7.23e-04  1.04e-05  1.10e-05  8.14e-01  
 18  +4.4155e-01  +4.5083e-01  9.27e-03  1.97e-06  4.78e-04  5.24e-06  7.33e-06  5.11e-01  
 19  +4.4042e-01  +4.4585e-01  5.43e-03  1.14e-06  2.78e-04  2.03e-06  4.30e-06  6.36e-01  
 20  +4.4003e-01  +4.4398e-01  3.94e-03  8.29e-07  2.01e-04  2.35e-07  3.12e-06  9.90e-01  
 21  +4.3912e-01  +4.4039e-01  1.27e-03  2.64e-07  6.42e-05  7.17e-08  1.00e-06  8.04e-01  
 22  +4.3873e-01  +4.3889e-01  1.59e-04  3.29e-08  8.00e-06  8.24e-09  1.27e-07  9.73e-01  
 23  +4.3868e-01  +4.3870e-01  1.98e-05  4.08e-09  9.93e-07  1.02e-09  1.58e-08  8.91e-01  
 24  +4.3868e-01  +4.3868e-01  2.33e-07  4.80e-11  1.17e-08  1.20e-11  1.86e-10  9.90e-01  
 25  +4.3868e-01  +4.3868e-01  2.33e-09  4.80e-13  1.17e-10  1.20e-13  1.86e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 377.0348ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:39 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:39 PM: Optimal value: 4.387e-01
(CVXPY) Sep 20 08:02:39 PM: Compilation took 8.021e-02 seconds
(CVXPY) Sep 20 08:02:39 PM: Solver (including time spent in interface) took 3.968e-01 seconds
Iteration: 24, Objective: 0.4387
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:40 PM: Your problem has 5259 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:40 PM: Finished problem compilation (took 8.874e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5259
  constraints   = 10259
  nnz(P)        = 0
  nnz(A)        = 99014
  cones (total) = 1
    : Nonnegative = 1,  numel = 10259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7973e-01  +1.0862e+03  1.09e+03  4.36e-01  7.78e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3097e-01  +1.2121e+02  1.21e+02  1.69e-01  3.82e+01  1.65e-02  2.74e-01  9.42e-01  
  3  +5.0861e-01  +3.1506e+01  3.10e+01  1.22e-01  2.77e+01  4.58e-05  2.53e-01  2.99e-01  
  4  +5.0105e-01  +3.1606e+00  2.66e+00  1.83e-02  4.30e+00  5.95e-06  1.60e-01  6.16e-01  
  5  +5.0015e-01  +1.0912e+00  5.91e-01  4.02e-03  9.65e-01  4.37e-05  8.55e-02  9.90e-01  
  6  +5.0003e-01  +8.3626e-01  3.36e-01  2.23e-03  5.39e-01  5.05e-05  2.66e-02  7.81e-01  
  7  +4.9867e-01  +8.3661e-01  3.38e-01  4.76e-04  1.16e-01  7.18e-04  1.50e-03  9.68e-01  
  8  +4.9329e-01  +7.9759e-01  3.04e-01  1.12e-04  2.74e-02  2.68e-03  3.36e-04  7.82e-01  
  9  +4.9185e-01  +7.6959e-01  2.78e-01  9.52e-05  2.33e-02  2.05e-03  2.87e-04  3.03e-01  
 10  +4.8875e-01  +7.3509e-01  2.46e-01  7.61e-05  1.86e-02  1.55e-03  2.31e-04  3.43e-01  
 11  +4.8652e-01  +6.9971e-01  2.13e-01  7.01e-05  1.71e-02  6.68e-04  2.16e-04  3.73e-01  
 12  +4.7527e-01  +6.3073e-01  1.55e-01  4.20e-05  1.02e-02  4.87e-04  1.35e-04  4.19e-01  
 13  +4.6212e-01  +5.5547e-01  9.33e-02  2.31e-05  5.63e-03  1.52e-04  7.82e-05  6.11e-01  
 14  +4.5999e-01  +5.4381e-01  8.38e-02  2.02e-05  4.92e-03  9.93e-05  6.88e-05  3.53e-01  
 15  +4.5153e-01  +5.0265e-01  5.11e-02  1.16e-05  2.83e-03  4.04e-05  4.10e-05  5.83e-01  
 16  +4.4825e-01  +4.8740e-01  3.91e-02  8.70e-06  2.11e-03  2.78e-05  3.11e-05  3.21e-01  
 17  +4.4479e-01  +4.7029e-01  2.55e-02  5.47e-06  1.33e-03  7.98e-06  1.98e-05  7.59e-01  
 18  +4.4328e-01  +4.6372e-01  2.04e-02  4.34e-06  1.06e-03  6.02e-06  1.59e-05  2.61e-01  
 19  +4.4222e-01  +4.5867e-01  1.65e-02  3.48e-06  8.45e-04  2.84e-06  1.28e-05  6.10e-01  
 20  +4.3851e-01  +4.4319e-01  4.68e-03  9.76e-07  2.37e-04  6.88e-07  3.68e-06  7.72e-01  
 21  +4.3818e-01  +4.4171e-01  3.53e-03  7.37e-07  1.79e-04  3.39e-07  2.78e-06  6.44e-01  
 22  +4.3752e-01  +4.3906e-01  1.54e-03  3.21e-07  7.81e-05  1.43e-07  1.22e-06  5.98e-01  
 23  +4.3709e-01  +4.3736e-01  2.68e-04  5.58e-08  1.35e-05  1.53e-08  2.13e-07  9.74e-01  
 24  +4.3700e-01  +4.3701e-01  3.72e-06  7.73e-10  1.88e-07  2.11e-10  2.95e-09  9.87e-01  
 25  +4.3700e-01  +4.3700e-01  3.87e-08  8.04e-12  1.95e-09  2.20e-12  3.07e-11  9.90e-01  
 26  +4.3700e-01  +4.3700e-01  3.93e-10  8.16e-14  1.98e-11  2.23e-14  3.12e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 393.9671ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:40 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:40 PM: Optimal value: 4.370e-01
(CVXPY) Sep 20 08:02:40 PM: Compilation took 8.874e-02 seconds
(CVXPY) Sep 20 08:02:40 PM: Solver (including time spent in interface) took 4.139e-01 seconds
Iteration: 25, Objective: 0.4370
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:40 PM: Your problem has 5269 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:41 PM: Finished problem compilation (took 1.007e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5269
  constraints   = 10269
  nnz(P)        = 0
  nnz(A)        = 99544
  cones (total) = 1
    : Nonnegative = 1,  numel = 10269

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7974e-01  +1.0859e+03  1.09e+03  4.36e-01  7.77e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3096e-01  +1.2114e+02  1.21e+02  1.69e-01  3.81e+01  1.65e-02  2.73e-01  9.42e-01  
  3  +5.0860e-01  +3.1483e+01  3.10e+01  1.22e-01  2.76e+01  4.58e-05  2.53e-01  2.99e-01  
  4  +5.0105e-01  +3.1540e+00  2.65e+00  1.82e-02  4.28e+00  5.95e-06  1.60e-01  6.17e-01  
  5  +5.0019e-01  +1.1794e+00  6.79e-01  4.62e-03  1.11e+00  4.23e-05  9.18e-02  9.00e-01  
  6  +5.0006e-01  +8.6352e-01  3.63e-01  2.43e-03  5.86e-01  4.33e-05  3.21e-02  7.37e-01  
  7  +4.9920e-01  +8.4636e-01  3.47e-01  6.71e-04  1.64e-01  4.62e-04  2.17e-03  9.69e-01  
  8  +4.9319e-01  +8.0431e-01  3.11e-01  9.96e-05  2.44e-02  2.85e-03  2.97e-04  8.66e-01  
  9  +4.9111e-01  +7.7517e-01  2.84e-01  8.55e-05  2.09e-02  2.17e-03  2.56e-04  2.83e-01  
 10  +4.8772e-01  +7.2771e-01  2.40e-01  7.23e-05  1.77e-02  1.13e-03  2.20e-04  3.73e-01  
 11  +4.8657e-01  +7.1258e-01  2.26e-01  7.07e-05  1.73e-02  8.62e-04  2.17e-04  1.31e-01  
 12  +4.7490e-01  +6.3309e-01  1.58e-01  4.24e-05  1.03e-02  4.63e-04  1.36e-04  5.03e-01  
 13  +4.6618e-01  +5.8128e-01  1.15e-01  2.93e-05  7.13e-03  1.90e-04  9.73e-05  5.16e-01  
 14  +4.6063e-01  +5.5092e-01  9.03e-02  2.19e-05  5.33e-03  9.15e-05  7.43e-05  4.97e-01  
 15  +4.5384e-01  +5.1727e-01  6.34e-02  1.47e-05  3.57e-03  4.45e-05  5.12e-05  5.05e-01  
 16  +4.4784e-01  +4.8899e-01  4.12e-02  9.21e-06  2.24e-03  2.58e-05  3.30e-05  4.16e-01  
 17  +4.4225e-01  +4.6247e-01  2.02e-02  4.37e-06  1.06e-03  6.82e-06  1.61e-05  7.58e-01  
 18  +4.3932e-01  +4.4889e-01  9.57e-03  2.03e-06  4.94e-04  6.18e-07  7.60e-06  9.90e-01  
 19  +4.3805e-01  +4.4367e-01  5.62e-03  1.19e-06  2.89e-04  3.49e-07  4.50e-06  5.25e-01  
 20  +4.3706e-01  +4.3961e-01  2.55e-03  5.38e-07  1.31e-04  1.30e-07  2.05e-06  9.90e-01  
 21  +4.3630e-01  +4.3660e-01  2.96e-04  6.24e-08  1.52e-05  1.49e-08  2.40e-07  9.52e-01  
 22  +4.3620e-01  +4.3621e-01  3.73e-06  7.87e-10  1.91e-07  1.88e-10  3.03e-09  9.87e-01  
 23  +4.3620e-01  +4.3620e-01  3.77e-08  7.96e-12  1.93e-09  1.90e-12  3.06e-11  9.90e-01  
 24  +4.3620e-01  +4.3620e-01  3.86e-10  8.14e-14  1.97e-11  1.94e-14  3.13e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 380.8261ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:41 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:41 PM: Optimal value: 4.362e-01
(CVXPY) Sep 20 08:02:41 PM: Compilation took 1.007e-01 seconds
(CVXPY) Sep 20 08:02:41 PM: Solver (including time spent in interface) took 4.003e-01 seconds
Iteration: 26, Objective: 0.4362
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:41 PM: Your problem has 5279 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:41 PM: Finished problem compilation (took 9.065e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5279
  constraints   = 10279
  nnz(P)        = 0
  nnz(A)        = 100190
  cones (total) = 1
    : Nonnegative = 1,  numel = 10279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7974e-01  +1.0859e+03  1.09e+03  4.36e-01  7.77e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3095e-01  +1.2113e+02  1.21e+02  1.69e-01  3.81e+01  1.65e-02  2.73e-01  9.42e-01  
  3  +5.0860e-01  +3.1480e+01  3.10e+01  1.22e-01  2.76e+01  4.58e-05  2.53e-01  2.99e-01  
  4  +5.0105e-01  +3.1539e+00  2.65e+00  1.82e-02  4.28e+00  5.95e-06  1.60e-01  6.17e-01  
  5  +5.0019e-01  +1.1874e+00  6.87e-01  4.68e-03  1.12e+00  4.24e-05  9.20e-02  8.96e-01  
  6  +5.0007e-01  +8.8234e-01  3.82e-01  2.56e-03  6.16e-01  4.37e-05  3.37e-02  7.24e-01  
  7  +4.9931e-01  +8.4376e-01  3.44e-01  7.37e-04  1.80e-01  4.07e-04  2.42e-03  9.65e-01  
  8  +4.9363e-01  +8.0543e-01  3.12e-01  1.04e-04  2.55e-02  2.71e-03  3.11e-04  8.74e-01  
  9  +4.9120e-01  +7.6568e-01  2.74e-01  8.67e-05  2.12e-02  1.75e-03  2.61e-04  3.67e-01  
 10  +4.8980e-01  +7.4125e-01  2.51e-01  8.12e-05  1.99e-02  1.16e-03  2.46e-04  2.39e-01  
 11  +4.8837e-01  +7.2405e-01  2.36e-01  7.53e-05  1.84e-02  8.56e-04  2.29e-04  2.26e-01  
 12  +4.7895e-01  +6.5536e-01  1.76e-01  5.02e-05  1.23e-02  4.34e-04  1.59e-04  4.90e-01  
 13  +4.6914e-01  +5.9865e-01  1.30e-01  3.41e-05  8.30e-03  2.39e-04  1.12e-04  4.15e-01  
 14  +4.6255e-01  +5.6390e-01  1.01e-01  2.53e-05  6.16e-03  1.58e-04  8.57e-05  3.27e-01  
 15  +4.5852e-01  +5.4327e-01  8.48e-02  2.05e-05  4.98e-03  1.15e-04  7.04e-05  2.73e-01  
 16  +4.4991e-01  +5.0022e-01  5.03e-02  1.15e-05  2.78e-03  4.43e-05  4.07e-05  6.07e-01  
 17  +4.4446e-01  +4.7453e-01  3.01e-02  6.62e-06  1.61e-03  2.20e-05  2.41e-05  5.09e-01  
 18  +4.4120e-01  +4.5901e-01  1.78e-02  3.81e-06  9.26e-04  6.27e-06  1.41e-05  7.49e-01  
 19  +4.3812e-01  +4.4572e-01  7.59e-03  1.60e-06  3.89e-04  1.82e-06  6.09e-06  7.32e-01  
 20  +4.3677e-01  +4.3997e-01  3.19e-03  6.72e-07  1.63e-04  5.24e-07  2.58e-06  7.48e-01  
 21  +4.3593e-01  +4.3652e-01  5.90e-04  1.24e-07  3.00e-05  8.40e-08  4.79e-07  8.50e-01  
 22  +4.3581e-01  +4.3601e-01  2.04e-04  4.28e-08  1.04e-05  2.55e-08  1.66e-07  7.20e-01  
 23  +4.3577e-01  +4.3587e-01  9.70e-05  2.03e-08  4.92e-06  7.67e-09  7.90e-08  8.12e-01  
 24  +4.3574e-01  +4.3574e-01  3.19e-06  6.66e-10  1.62e-07  2.50e-10  2.60e-09  9.68e-01  
 25  +4.3574e-01  +4.3574e-01  3.23e-08  6.74e-12  1.64e-09  2.53e-12  2.63e-11  9.90e-01  
 26  +4.3574e-01  +4.3574e-01  3.23e-10  6.74e-14  1.64e-11  2.65e-14  2.74e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 401.5333ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:42 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:42 PM: Optimal value: 4.357e-01
(CVXPY) Sep 20 08:02:42 PM: Compilation took 9.065e-02 seconds
(CVXPY) Sep 20 08:02:42 PM: Solver (including time spent in interface) took 4.186e-01 seconds
Iteration: 27, Objective: 0.4357
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:42 PM: Your problem has 5289 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:42 PM: Finished problem compilation (took 1.012e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5289
  constraints   = 10289
  nnz(P)        = 0
  nnz(A)        = 100689
  cones (total) = 1
    : Nonnegative = 1,  numel = 10289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7968e-01  +1.0861e+03  1.09e+03  4.36e-01  7.76e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3091e-01  +1.2108e+02  1.21e+02  1.69e-01  3.80e+01  1.65e-02  2.74e-01  9.42e-01  
  3  +5.0860e-01  +3.1472e+01  3.10e+01  1.22e-01  2.75e+01  4.59e-05  2.52e-01  3.00e-01  
  4  +5.0105e-01  +3.1590e+00  2.66e+00  1.83e-02  4.29e+00  5.95e-06  1.60e-01  6.17e-01  
  5  +5.0019e-01  +1.1806e+00  6.80e-01  4.63e-03  1.11e+00  4.28e-05  9.11e-02  9.06e-01  
  6  +5.0005e-01  +8.5757e-01  3.58e-01  2.39e-03  5.75e-01  4.52e-05  2.98e-02  7.67e-01  
  7  +4.9878e-01  +8.5907e-01  3.60e-01  5.04e-04  1.23e-01  6.66e-04  1.58e-03  9.79e-01  
  8  +4.9382e-01  +8.1932e-01  3.26e-01  1.21e-04  2.96e-02  2.44e-03  3.62e-04  7.79e-01  
  9  +4.9184e-01  +7.7399e-01  2.82e-01  9.47e-05  2.32e-02  1.56e-03  2.84e-04  4.46e-01  
 10  +4.9007e-01  +7.4299e-01  2.53e-01  8.40e-05  2.05e-02  9.66e-04  2.54e-04  3.27e-01  
 11  +4.8728e-01  +7.0435e-01  2.17e-01  7.52e-05  1.84e-02  3.36e-04  2.31e-04  4.69e-01  
 12  +4.7371e-01  +6.2314e-01  1.49e-01  3.98e-05  9.70e-03  2.46e-04  1.28e-04  4.90e-01  
 13  +4.6696e-01  +5.8627e-01  1.19e-01  3.06e-05  7.45e-03  1.34e-04  1.01e-04  4.00e-01  
 14  +4.6009e-01  +5.5078e-01  9.07e-02  2.22e-05  5.39e-03  6.91e-05  7.56e-05  4.60e-01  
 15  +4.5407e-01  +5.2125e-01  6.72e-02  1.58e-05  3.83e-03  3.91e-05  5.51e-05  4.30e-01  
 16  +4.4526e-01  +4.7945e-01  3.42e-02  7.66e-06  1.86e-03  1.65e-05  2.79e-05  5.68e-01  
 17  +4.4135e-01  +4.6111e-01  1.98e-02  4.31e-06  1.05e-03  6.74e-06  1.60e-05  6.16e-01  
 18  +4.3793e-01  +4.4562e-01  7.70e-03  1.65e-06  3.99e-04  7.26e-07  6.25e-06  9.47e-01  
 19  +4.3616e-01  +4.3824e-01  2.08e-03  4.42e-07  1.07e-04  1.09e-07  1.71e-06  9.90e-01  
 20  +4.3562e-01  +4.3608e-01  4.58e-04  9.74e-08  2.36e-05  2.31e-08  3.79e-07  9.07e-01  
 21  +4.3547e-01  +4.3548e-01  1.24e-05  2.63e-09  6.38e-07  6.08e-10  1.03e-08  9.90e-01  
 22  +4.3547e-01  +4.3547e-01  1.25e-07  2.66e-11  6.44e-09  6.14e-12  1.04e-10  9.90e-01  
 23  +4.3547e-01  +4.3547e-01  1.32e-09  2.80e-13  6.80e-11  6.50e-14  1.10e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 391.6612ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:43 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:43 PM: Optimal value: 4.355e-01
(CVXPY) Sep 20 08:02:43 PM: Compilation took 1.012e-01 seconds
(CVXPY) Sep 20 08:02:43 PM: Solver (including time spent in interface) took 4.123e-01 seconds
Iteration: 28, Objective: 0.4355
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:43 PM: Your problem has 5299 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:43 PM: Finished problem compilation (took 1.061e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5299
  constraints   = 10299
  nnz(P)        = 0
  nnz(A)        = 101259
  cones (total) = 1
    : Nonnegative = 1,  numel = 10299

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7965e-01  +1.0861e+03  1.09e+03  4.36e-01  7.76e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3089e-01  +1.2103e+02  1.21e+02  1.69e-01  3.79e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0859e-01  +3.1457e+01  3.09e+01  1.22e-01  2.75e+01  4.59e-05  2.52e-01  3.01e-01  
  4  +5.0105e-01  +3.1597e+00  2.66e+00  1.83e-02  4.29e+00  5.96e-06  1.59e-01  6.18e-01  
  5  +5.0019e-01  +1.1871e+00  6.87e-01  4.68e-03  1.12e+00  4.29e-05  9.10e-02  9.04e-01  
  6  +5.0005e-01  +8.5797e-01  3.58e-01  2.39e-03  5.75e-01  4.57e-05  2.93e-02  7.68e-01  
  7  +4.9867e-01  +8.7985e-01  3.81e-01  4.89e-04  1.19e-01  7.23e-04  1.52e-03  9.90e-01  
  8  +4.9393e-01  +8.3549e-01  3.42e-01  1.30e-04  3.18e-02  2.33e-03  3.89e-04  7.55e-01  
  9  +4.9206e-01  +7.9644e-01  3.04e-01  1.02e-04  2.51e-02  1.79e-03  3.07e-04  3.77e-01  
 10  +4.9008e-01  +7.6765e-01  2.78e-01  8.77e-05  2.14e-02  1.38e-03  2.65e-04  2.78e-01  
 11  +4.8819e-01  +7.3913e-01  2.51e-01  8.22e-05  2.01e-02  9.30e-04  2.51e-04  2.02e-01  
 12  +4.7486e-01  +6.3353e-01  1.59e-01  4.35e-05  1.06e-02  2.91e-04  1.40e-04  6.83e-01  
 13  +4.6727e-01  +5.9204e-01  1.25e-01  3.24e-05  7.88e-03  1.96e-04  1.07e-04  3.04e-01  
 14  +4.6023e-01  +5.5538e-01  9.52e-02  2.34e-05  5.70e-03  1.19e-04  7.99e-05  3.78e-01  
 15  +4.5584e-01  +5.3324e-01  7.74e-02  1.84e-05  4.48e-03  7.99e-05  6.38e-05  3.31e-01  
 16  +4.4690e-01  +4.8983e-01  4.29e-02  9.68e-06  2.35e-03  3.33e-05  3.48e-05  5.75e-01  
 17  +4.4235e-01  +4.6852e-01  2.62e-02  5.73e-06  1.39e-03  1.65e-05  2.10e-05  5.16e-01  
 18  +4.4000e-01  +4.5745e-01  1.74e-02  3.73e-06  9.05e-04  7.07e-06  1.38e-05  6.08e-01  
 19  +4.3708e-01  +4.4442e-01  7.35e-03  1.54e-06  3.74e-04  7.33e-07  5.83e-06  9.51e-01  
 20  +4.3526e-01  +4.3707e-01  1.80e-03  3.75e-07  9.10e-05  1.38e-07  1.44e-06  8.69e-01  
 21  +4.3486e-01  +4.3545e-01  5.93e-04  1.24e-07  3.00e-05  4.19e-08  4.78e-07  7.45e-01  
 22  +4.3470e-01  +4.3482e-01  1.20e-04  2.49e-08  6.05e-06  6.11e-09  9.66e-08  9.90e-01  
 23  +4.3466e-01  +4.3466e-01  1.71e-06  3.55e-10  8.61e-08  8.70e-11  1.38e-09  9.86e-01  
 24  +4.3466e-01  +4.3466e-01  1.71e-08  3.55e-12  8.61e-10  8.70e-13  1.38e-11  9.90e-01  
 25  +4.3466e-01  +4.3466e-01  1.72e-10  3.58e-14  8.68e-12  8.80e-15  1.39e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 444.5375ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:44 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:44 PM: Optimal value: 4.347e-01
(CVXPY) Sep 20 08:02:44 PM: Compilation took 1.061e-01 seconds
(CVXPY) Sep 20 08:02:44 PM: Solver (including time spent in interface) took 4.677e-01 seconds
Iteration: 29, Objective: 0.4347
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:44 PM: Your problem has 5309 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:44 PM: Finished problem compilation (took 9.904e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5309
  constraints   = 10309
  nnz(P)        = 0
  nnz(A)        = 101794
  cones (total) = 1
    : Nonnegative = 1,  numel = 10309

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7956e-01  +1.0862e+03  1.09e+03  4.36e-01  7.75e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3085e-01  +1.2097e+02  1.20e+02  1.69e-01  3.79e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0858e-01  +3.1442e+01  3.09e+01  1.22e-01  2.75e+01  4.60e-05  2.52e-01  3.02e-01  
  4  +5.0105e-01  +3.1622e+00  2.66e+00  1.83e-02  4.29e+00  5.97e-06  1.59e-01  6.18e-01  
  5  +5.0019e-01  +1.1884e+00  6.88e-01  4.69e-03  1.12e+00  4.33e-05  9.00e-02  9.11e-01  
  6  +5.0004e-01  +8.4999e-01  3.50e-01  2.33e-03  5.60e-01  4.82e-05  2.68e-02  7.97e-01  
  7  +4.9818e-01  +8.9580e-01  3.98e-01  3.94e-04  9.64e-02  9.65e-04  1.21e-03  9.90e-01  
  8  +4.9327e-01  +8.3873e-01  3.45e-01  1.28e-04  3.12e-02  2.35e-03  3.83e-04  7.05e-01  
  9  +4.9051e-01  +7.8053e-01  2.90e-01  9.21e-05  2.25e-02  1.47e-03  2.77e-04  5.09e-01  
 10  +4.8907e-01  +7.5276e-01  2.64e-01  8.59e-05  2.10e-02  9.72e-04  2.60e-04  2.38e-01  
 11  +4.8580e-01  +7.0874e-01  2.23e-01  7.45e-05  1.82e-02  3.67e-04  2.30e-04  4.58e-01  
 12  +4.7336e-01  +6.3130e-01  1.58e-01  4.30e-05  1.05e-02  2.50e-04  1.39e-04  4.56e-01  
 13  +4.6500e-01  +5.8382e-01  1.19e-01  3.05e-05  7.42e-03  1.31e-04  1.02e-04  4.33e-01  
 14  +4.5884e-01  +5.5147e-01  9.26e-02  2.27e-05  5.51e-03  7.77e-05  7.77e-05  3.96e-01  
 15  +4.5148e-01  +5.1523e-01  6.38e-02  1.49e-05  3.61e-03  4.67e-05  5.26e-05  3.92e-01  
 16  +4.4380e-01  +4.7822e-01  3.44e-02  7.64e-06  1.85e-03  1.78e-05  2.80e-05  6.21e-01  
 17  +4.4067e-01  +4.6380e-01  2.31e-02  4.99e-06  1.21e-03  8.99e-06  1.86e-05  5.24e-01  
 18  +4.3758e-01  +4.4986e-01  1.23e-02  2.58e-06  6.27e-04  2.31e-06  9.88e-06  7.93e-01  
 19  +4.3523e-01  +4.4006e-01  4.83e-03  1.01e-06  2.44e-04  8.06e-07  3.94e-06  6.62e-01  
 20  +4.3471e-01  +4.3785e-01  3.14e-03  6.49e-07  1.58e-04  2.70e-07  2.56e-06  8.05e-01  
 21  +4.3379e-01  +4.3423e-01  4.42e-04  9.08e-08  2.20e-05  3.56e-08  3.63e-07  8.78e-01  
 22  +4.3364e-01  +4.3364e-01  5.46e-06  1.12e-09  2.72e-07  4.33e-10  4.50e-09  9.88e-01  
 23  +4.3363e-01  +4.3363e-01  5.46e-08  1.12e-11  2.72e-09  4.33e-12  4.50e-11  9.90e-01  
 24  +4.3363e-01  +4.3363e-01  5.46e-10  1.12e-13  2.72e-11  4.40e-14  4.57e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 377.0344ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:44 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:44 PM: Optimal value: 4.336e-01
(CVXPY) Sep 20 08:02:44 PM: Compilation took 9.904e-02 seconds
(CVXPY) Sep 20 08:02:44 PM: Solver (including time spent in interface) took 3.971e-01 seconds
Iteration: 30, Objective: 0.4336
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:45 PM: Your problem has 5319 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:45 PM: Finished problem compilation (took 1.058e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5319
  constraints   = 10319
  nnz(P)        = 0
  nnz(A)        = 102359
  cones (total) = 1
    : Nonnegative = 1,  numel = 10319

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7953e-01  +1.0862e+03  1.09e+03  4.37e-01  7.75e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3081e-01  +1.2088e+02  1.20e+02  1.69e-01  3.78e+01  1.65e-02  2.73e-01  9.44e-01  
  3  +5.0858e-01  +3.1422e+01  3.09e+01  1.22e-01  2.74e+01  4.60e-05  2.52e-01  3.03e-01  
  4  +5.0105e-01  +3.1637e+00  2.66e+00  1.83e-02  4.30e+00  5.97e-06  1.59e-01  6.18e-01  
  5  +5.0019e-01  +1.1985e+00  6.98e-01  4.76e-03  1.14e+00  4.35e-05  9.00e-02  9.08e-01  
  6  +5.0007e-01  +9.0530e-01  4.05e-01  2.71e-03  6.51e-01  4.79e-05  3.27e-02  7.17e-01  
  7  +4.9935e-01  +8.7425e-01  3.75e-01  8.58e-04  2.09e-01  3.89e-04  2.84e-03  9.42e-01  
  8  +4.9397e-01  +8.3260e-01  3.39e-01  1.23e-04  3.01e-02  2.56e-03  3.67e-04  8.73e-01  
  9  +4.9214e-01  +8.0404e-01  3.12e-01  1.01e-04  2.47e-02  2.09e-03  3.01e-04  3.26e-01  
 10  +4.8935e-01  +7.6927e-01  2.80e-01  8.47e-05  2.07e-02  1.58e-03  2.56e-04  2.82e-01  
 11  +4.8739e-01  +7.4129e-01  2.54e-01  8.07e-05  1.97e-02  1.09e-03  2.46e-04  1.72e-01  
 12  +4.7709e-01  +6.5525e-01  1.78e-01  5.14e-05  1.25e-02  3.61e-04  1.64e-04  5.96e-01  
 13  +4.6730e-01  +5.9800e-01  1.31e-01  3.46e-05  8.41e-03  1.97e-04  1.15e-04  4.29e-01  
 14  +4.5908e-01  +5.5395e-01  9.49e-02  2.36e-05  5.72e-03  1.09e-04  8.08e-05  4.34e-01  
 15  +4.5340e-01  +5.2520e-01  7.18e-02  1.70e-05  4.14e-03  6.62e-05  5.98e-05  3.93e-01  
 16  +4.4578e-01  +4.8802e-01  4.22e-02  9.54e-06  2.31e-03  2.85e-05  3.46e-05  5.67e-01  
 17  +4.4054e-01  +4.6332e-01  2.28e-02  4.95e-06  1.20e-03  1.04e-05  1.84e-05  6.54e-01  
 18  +4.3768e-01  +4.5089e-01  1.32e-02  2.81e-06  6.81e-04  5.33e-06  1.07e-05  4.99e-01  
 19  +4.3625e-01  +4.4446e-01  8.21e-03  1.73e-06  4.19e-04  2.28e-06  6.68e-06  6.00e-01  
 20  +4.3519e-01  +4.3992e-01  4.72e-03  9.89e-07  2.40e-04  9.54e-07  3.86e-06  6.17e-01  
 21  +4.3454e-01  +4.3721e-01  2.67e-03  5.57e-07  1.35e-04  4.46e-07  2.19e-06  5.64e-01  
 22  +4.3426e-01  +4.3608e-01  1.82e-03  3.77e-07  9.15e-05  2.48e-07  1.50e-06  5.02e-01  
 23  +4.3381e-01  +4.3431e-01  5.01e-04  1.03e-07  2.50e-05  2.69e-08  4.13e-07  9.87e-01  
 24  +4.3364e-01  +4.3368e-01  3.17e-05  6.51e-09  1.58e-06  1.69e-09  2.61e-08  9.41e-01  
 25  +4.3363e-01  +4.3363e-01  3.26e-07  6.69e-11  1.62e-08  1.74e-11  2.69e-10  9.90e-01  
 26  +4.3363e-01  +4.3363e-01  3.26e-09  6.70e-13  1.62e-10  1.79e-13  2.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 398.1141ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:45 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:45 PM: Optimal value: 4.336e-01
(CVXPY) Sep 20 08:02:45 PM: Compilation took 1.058e-01 seconds
(CVXPY) Sep 20 08:02:45 PM: Solver (including time spent in interface) took 4.169e-01 seconds
Iteration: 31, Objective: 0.4336
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:46 PM: Your problem has 5329 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:46 PM: Finished problem compilation (took 1.132e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5329
  constraints   = 10329
  nnz(P)        = 0
  nnz(A)        = 102702
  cones (total) = 1
    : Nonnegative = 1,  numel = 10329

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7953e-01  +1.0862e+03  1.09e+03  4.37e-01  7.74e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3080e-01  +1.2086e+02  1.20e+02  1.69e-01  3.77e+01  1.65e-02  2.73e-01  9.44e-01  
  3  +5.0858e-01  +3.1418e+01  3.09e+01  1.22e-01  2.74e+01  4.60e-05  2.52e-01  3.03e-01  
  4  +5.0105e-01  +3.1633e+00  2.66e+00  1.84e-02  4.30e+00  5.97e-06  1.59e-01  6.18e-01  
  5  +5.0019e-01  +1.1924e+00  6.92e-01  4.72e-03  1.13e+00  4.38e-05  8.93e-02  9.17e-01  
  6  +5.0005e-01  +8.7590e-01  3.76e-01  2.50e-03  6.02e-01  4.95e-05  2.86e-02  7.62e-01  
  7  +4.9885e-01  +8.8380e-01  3.85e-01  5.70e-04  1.39e-01  6.33e-04  1.80e-03  9.72e-01  
  8  +4.9414e-01  +8.4128e-01  3.47e-01  1.38e-04  3.36e-02  2.31e-03  4.13e-04  7.78e-01  
  9  +4.9202e-01  +8.0085e-01  3.09e-01  1.07e-04  2.63e-02  1.78e-03  3.23e-04  3.82e-01  
 10  +4.9001e-01  +7.7198e-01  2.82e-01  9.14e-05  2.23e-02  1.37e-03  2.77e-04  2.89e-01  
 11  +4.8764e-01  +7.3439e-01  2.47e-01  8.29e-05  2.02e-02  7.36e-04  2.54e-04  3.21e-01  
 12  +4.7573e-01  +6.4482e-01  1.69e-01  4.78e-05  1.16e-02  3.00e-04  1.53e-04  6.15e-01  
 13  +4.6778e-01  +5.9866e-01  1.31e-01  3.50e-05  8.49e-03  1.46e-04  1.16e-04  4.57e-01  
 14  +4.5943e-01  +5.5481e-01  9.54e-02  2.39e-05  5.79e-03  7.79e-05  8.18e-05  4.47e-01  
 15  +4.5330e-01  +5.2431e-01  7.10e-02  1.69e-05  4.10e-03  4.61e-05  5.94e-05  4.12e-01  
 16  +4.4663e-01  +4.9210e-01  4.55e-02  1.03e-05  2.51e-03  2.19e-05  3.74e-05  5.30e-01  
 17  +4.4183e-01  +4.6856e-01  2.67e-02  5.80e-06  1.41e-03  3.75e-06  2.14e-05  8.91e-01  
 18  +4.3863e-01  +4.5498e-01  1.64e-02  3.49e-06  8.47e-04  2.15e-06  1.32e-05  4.41e-01  
 19  +4.3571e-01  +4.4230e-01  6.60e-03  1.39e-06  3.38e-04  4.64e-07  5.40e-06  9.03e-01  
 20  +4.3452e-01  +4.3742e-01  2.90e-03  6.10e-07  1.48e-04  1.46e-07  2.40e-06  9.90e-01  
 21  +4.3374e-01  +4.3437e-01  6.30e-04  1.32e-07  3.20e-05  3.15e-08  5.26e-07  8.12e-01  
 22  +4.3352e-01  +4.3354e-01  1.37e-05  2.87e-09  6.96e-07  6.84e-10  1.15e-08  9.79e-01  
 23  +4.3352e-01  +4.3352e-01  1.39e-07  2.92e-11  7.07e-09  6.95e-12  1.17e-10  9.90e-01  
 24  +4.3352e-01  +4.3352e-01  1.70e-09  3.54e-13  8.59e-11  8.50e-14  1.43e-12  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 449.3948ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:46 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:46 PM: Optimal value: 4.335e-01
(CVXPY) Sep 20 08:02:46 PM: Compilation took 1.132e-01 seconds
(CVXPY) Sep 20 08:02:46 PM: Solver (including time spent in interface) took 4.701e-01 seconds
Iteration: 32, Objective: 0.4335
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:47 PM: Your problem has 5337 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:47 PM: Finished problem compilation (took 1.199e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5337
  constraints   = 10337
  nnz(P)        = 0
  nnz(A)        = 103001
  cones (total) = 1
    : Nonnegative = 1,  numel = 10337

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7948e-01  +1.0864e+03  1.09e+03  4.37e-01  7.74e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3078e-01  +1.2084e+02  1.20e+02  1.69e-01  3.77e+01  1.65e-02  2.73e-01  9.44e-01  
  3  +5.0857e-01  +3.1417e+01  3.09e+01  1.22e-01  2.74e+01  4.61e-05  2.52e-01  3.04e-01  
  4  +5.0106e-01  +3.1675e+00  2.67e+00  1.84e-02  4.30e+00  5.97e-06  1.59e-01  6.18e-01  
  5  +5.0020e-01  +1.2169e+00  7.17e-01  4.89e-03  1.17e+00  4.36e-05  9.09e-02  8.97e-01  
  6  +5.0005e-01  +8.7216e-01  3.72e-01  2.48e-03  5.96e-01  4.82e-05  2.88e-02  7.60e-01  
  7  +4.9875e-01  +9.0033e-01  4.02e-01  5.45e-04  1.33e-01  6.83e-04  1.70e-03  9.84e-01  
  8  +4.9429e-01  +8.5450e-01  3.60e-01  1.46e-04  3.58e-02  2.19e-03  4.39e-04  7.53e-01  
  9  +4.9230e-01  +8.2089e-01  3.29e-01  1.18e-04  2.89e-02  1.90e-03  3.55e-04  2.95e-01  
 10  +4.8958e-01  +7.8098e-01  2.91e-01  9.47e-05  2.31e-02  1.45e-03  2.87e-04  3.32e-01  
 11  +4.8772e-01  +7.2378e-01  2.36e-01  8.28e-05  2.02e-02  2.41e-04  2.54e-04  6.04e-01  
 12  +4.8433e-01  +7.0025e-01  2.16e-01  7.10e-05  1.73e-02  1.97e-04  2.21e-04  2.21e-01  
 13  +4.8157e-01  +6.7431e-01  1.93e-01  6.22e-05  1.51e-02  5.34e-05  1.96e-04  6.07e-01  
 14  +4.6807e-01  +5.9799e-01  1.30e-01  3.49e-05  8.47e-03  3.06e-05  1.15e-04  5.11e-01  
 15  +4.6005e-01  +5.5698e-01  9.69e-02  2.44e-05  5.93e-03  1.79e-05  8.36e-05  4.21e-01  
 16  +4.5432e-01  +5.2881e-01  7.45e-02  1.79e-05  4.34e-03  1.12e-05  6.28e-05  4.06e-01  
 17  +4.4432e-01  +4.8116e-01  3.68e-02  8.28e-06  2.01e-03  3.83e-06  3.03e-05  7.02e-01  
 18  +4.4362e-01  +4.7775e-01  3.41e-02  7.61e-06  1.85e-03  3.27e-06  2.80e-05  2.17e-01  
 19  +4.3950e-01  +4.5953e-01  2.00e-02  4.34e-06  1.05e-03  1.79e-06  1.63e-05  5.03e-01  
 20  +4.3877e-01  +4.5586e-01  1.71e-02  3.64e-06  8.83e-04  1.23e-06  1.38e-05  5.44e-01  
 21  +4.3583e-01  +4.4363e-01  7.80e-03  1.64e-06  3.96e-04  5.34e-07  6.37e-06  6.10e-01  
 22  +4.3562e-01  +4.4264e-01  7.02e-03  1.47e-06  3.56e-04  4.55e-07  5.73e-06  2.78e-01  
 23  +4.3399e-01  +4.3598e-01  1.99e-03  4.13e-07  1.00e-04  1.20e-07  1.64e-06  7.98e-01  
 24  +4.3337e-01  +4.3351e-01  1.43e-04  2.96e-08  7.17e-06  7.19e-09  1.19e-07  9.90e-01  
 25  +4.3332e-01  +4.3332e-01  1.52e-06  3.14e-10  7.62e-08  7.63e-11  1.26e-09  9.89e-01  
 26  +4.3332e-01  +4.3332e-01  1.52e-08  3.15e-12  7.64e-10  7.65e-13  1.27e-11  9.90e-01  
 27  +4.3332e-01  +4.3332e-01  2.04e-10  4.21e-14  1.02e-11  1.03e-14  1.70e-13  9.87e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 458.9106ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:47 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:47 PM: Optimal value: 4.333e-01
(CVXPY) Sep 20 08:02:47 PM: Compilation took 1.199e-01 seconds
(CVXPY) Sep 20 08:02:47 PM: Solver (including time spent in interface) took 4.790e-01 seconds
Iteration: 33, Objective: 0.4333
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:47 PM: Your problem has 5340 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:48 PM: Finished problem compilation (took 1.105e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5340
  constraints   = 10340
  nnz(P)        = 0
  nnz(A)        = 103140
  cones (total) = 1
    : Nonnegative = 1,  numel = 10340

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7947e-01  +1.0864e+03  1.09e+03  4.37e-01  7.74e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3078e-01  +1.2083e+02  1.20e+02  1.69e-01  3.77e+01  1.65e-02  2.73e-01  9.44e-01  
  3  +5.0857e-01  +3.1418e+01  3.09e+01  1.22e-01  2.74e+01  4.61e-05  2.52e-01  3.04e-01  
  4  +5.0106e-01  +3.1684e+00  2.67e+00  1.84e-02  4.30e+00  5.97e-06  1.59e-01  6.18e-01  
  5  +5.0019e-01  +1.2057e+00  7.06e-01  4.82e-03  1.15e+00  4.39e-05  9.00e-02  9.08e-01  
  6  +5.0005e-01  +8.7329e-01  3.73e-01  2.49e-03  5.97e-01  4.93e-05  2.83e-02  7.67e-01  
  7  +4.9867e-01  +8.9914e-01  4.00e-01  5.15e-04  1.26e-01  7.25e-04  1.61e-03  9.87e-01  
  8  +4.9419e-01  +8.5248e-01  3.58e-01  1.45e-04  3.54e-02  2.20e-03  4.35e-04  7.41e-01  
  9  +4.9210e-01  +8.1670e-01  3.25e-01  1.16e-04  2.82e-02  1.87e-03  3.48e-04  3.16e-01  
 10  +4.8969e-01  +7.8004e-01  2.90e-01  9.50e-05  2.32e-02  1.41e-03  2.88e-04  3.15e-01  
 11  +4.8712e-01  +7.1098e-01  2.24e-01  7.85e-05  1.91e-02  1.31e-05  2.41e-04  7.49e-01  
 12  +4.8326e-01  +6.8487e-01  2.02e-01  6.62e-05  1.61e-02  1.05e-05  2.07e-04  3.17e-01  
 13  +4.7463e-01  +6.3406e-01  1.59e-01  4.62e-05  1.12e-02  7.38e-06  1.49e-04  4.74e-01  
 14  +4.6534e-01  +5.8439e-01  1.19e-01  3.16e-05  7.67e-03  5.20e-06  1.06e-04  3.78e-01  
 15  +4.6078e-01  +5.6087e-01  1.00e-01  2.54e-05  6.16e-03  4.25e-06  8.67e-05  3.66e-01  
 16  +4.5288e-01  +5.2213e-01  6.93e-02  1.66e-05  4.02e-03  2.87e-06  5.86e-05  4.26e-01  
 17  +4.4478e-01  +4.8334e-01  3.86e-02  8.70e-06  2.11e-03  1.64e-06  3.18e-05  6.62e-01  
 18  +4.4241e-01  +4.7150e-01  2.91e-02  6.32e-06  1.53e-03  1.40e-06  2.33e-05  7.99e-01  
 19  +4.3947e-01  +4.5898e-01  1.95e-02  4.18e-06  1.01e-03  9.40e-07  1.57e-05  3.84e-01  
 20  +4.3795e-01  +4.5232e-01  1.44e-02  3.04e-06  7.38e-04  7.08e-07  1.16e-05  5.30e-01  
 21  +4.3624e-01  +4.4512e-01  8.88e-03  1.86e-06  4.52e-04  4.41e-07  7.22e-06  5.91e-01  
 22  +4.3419e-01  +4.3682e-01  2.62e-03  5.46e-07  1.32e-04  1.30e-07  2.16e-06  7.34e-01  
 23  +4.3345e-01  +4.3382e-01  3.69e-04  7.65e-08  1.85e-05  1.81e-08  3.06e-07  9.90e-01  
 24  +4.3332e-01  +4.3332e-01  4.29e-06  8.88e-10  2.15e-07  2.09e-10  3.57e-09  9.90e-01  
 25  +4.3332e-01  +4.3332e-01  4.30e-08  8.89e-12  2.16e-09  2.10e-12  3.57e-11  9.90e-01  
 26  +4.3332e-01  +4.3332e-01  5.37e-10  1.11e-13  2.69e-11  2.64e-14  4.49e-13  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 410.8914ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:48 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:48 PM: Optimal value: 4.333e-01
(CVXPY) Sep 20 08:02:48 PM: Compilation took 1.105e-01 seconds
(CVXPY) Sep 20 08:02:48 PM: Solver (including time spent in interface) took 4.351e-01 seconds
Iteration: 34, Objective: 0.4333
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:48 PM: Your problem has 5350 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:48 PM: Finished problem compilation (took 1.003e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5350
  constraints   = 10350
  nnz(P)        = 0
  nnz(A)        = 103580
  cones (total) = 1
    : Nonnegative = 1,  numel = 10350

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7944e-01  +1.0864e+03  1.09e+03  4.37e-01  7.73e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3078e-01  +1.2085e+02  1.20e+02  1.69e-01  3.76e+01  1.65e-02  2.73e-01  9.44e-01  
  3  +5.0857e-01  +3.1422e+01  3.09e+01  1.22e-01  2.73e+01  4.61e-05  2.52e-01  3.04e-01  
  4  +5.0106e-01  +3.1688e+00  2.67e+00  1.84e-02  4.30e+00  5.98e-06  1.59e-01  6.18e-01  
  5  +5.0019e-01  +1.1976e+00  6.97e-01  4.76e-03  1.14e+00  4.42e-05  8.90e-02  9.19e-01  
  6  +5.0005e-01  +8.7629e-01  3.76e-01  2.50e-03  6.01e-01  5.10e-05  2.77e-02  7.74e-01  
  7  +4.9868e-01  +9.0648e-01  4.08e-01  5.29e-04  1.29e-01  7.18e-04  1.65e-03  9.90e-01  
  8  +4.9419e-01  +8.5717e-01  3.63e-01  1.47e-04  3.59e-02  2.19e-03  4.42e-04  7.44e-01  
  9  +4.9193e-01  +8.1579e-01  3.24e-01  1.14e-04  2.79e-02  1.78e-03  3.44e-04  3.54e-01  
 10  +4.8999e-01  +7.8212e-01  2.92e-01  9.68e-05  2.36e-02  1.31e-03  2.93e-04  3.04e-01  
 11  +4.8659e-01  +7.0832e-01  2.22e-01  7.54e-05  1.84e-02  1.26e-05  2.32e-04  7.86e-01  
 12  +4.7574e-01  +6.4080e-01  1.65e-01  4.71e-05  1.15e-02  8.56e-06  1.51e-04  5.19e-01  
 13  +4.6684e-01  +5.9195e-01  1.25e-01  3.33e-05  8.08e-03  5.34e-06  1.11e-04  5.45e-01  
 14  +4.6169e-01  +5.6555e-01  1.04e-01  2.64e-05  6.40e-03  4.26e-06  8.96e-05  4.54e-01  
 15  +4.5250e-01  +5.2106e-01  6.86e-02  1.63e-05  3.95e-03  2.74e-06  5.77e-05  4.63e-01  
 16  +4.4348e-01  +4.7866e-01  3.52e-02  7.83e-06  1.90e-03  1.49e-06  2.88e-05  7.39e-01  
 17  +4.4140e-01  +4.6848e-01  2.71e-02  5.84e-06  1.41e-03  1.30e-06  2.17e-05  7.86e-01  
 18  +4.3731e-01  +4.5137e-01  1.41e-02  2.95e-06  7.15e-04  6.96e-07  1.13e-05  6.68e-01  
 19  +4.3492e-01  +4.4158e-01  6.66e-03  1.38e-06  3.35e-04  3.30e-07  5.39e-06  5.99e-01  
 20  +4.3355e-01  +4.3592e-01  2.38e-03  4.90e-07  1.19e-04  1.18e-07  1.94e-06  8.52e-01  
 21  +4.3276e-01  +4.3286e-01  9.65e-05  1.98e-08  4.81e-06  4.78e-09  7.91e-08  9.63e-01  
 22  +4.3273e-01  +4.3273e-01  9.71e-07  2.00e-10  4.84e-08  4.81e-11  7.96e-10  9.90e-01  
 23  +4.3273e-01  +4.3273e-01  1.04e-08  2.14e-12  5.18e-10  5.18e-13  8.57e-12  9.89e-01  
 24  +4.3273e-01  +4.3273e-01  1.17e-10  2.41e-14  5.83e-12  5.86e-15  9.69e-14  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 362.7715ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:49 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:49 PM: Optimal value: 4.327e-01
(CVXPY) Sep 20 08:02:49 PM: Compilation took 1.003e-01 seconds
(CVXPY) Sep 20 08:02:49 PM: Solver (including time spent in interface) took 3.828e-01 seconds
Iteration: 35, Objective: 0.4327
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:49 PM: Your problem has 5360 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:49 PM: Finished problem compilation (took 1.205e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5360
  constraints   = 10360
  nnz(P)        = 0
  nnz(A)        = 104131
  cones (total) = 1
    : Nonnegative = 1,  numel = 10360

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7942e-01  +1.0863e+03  1.09e+03  4.37e-01  7.72e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3076e-01  +1.2078e+02  1.20e+02  1.69e-01  3.76e+01  1.65e-02  2.73e-01  9.45e-01  
  3  +5.0857e-01  +3.1402e+01  3.09e+01  1.22e-01  2.73e+01  4.61e-05  2.52e-01  3.05e-01  
  4  +5.0106e-01  +3.1674e+00  2.67e+00  1.84e-02  4.30e+00  5.98e-06  1.58e-01  6.19e-01  
  5  +5.0018e-01  +1.1796e+00  6.79e-01  4.64e-03  1.11e+00  4.48e-05  8.70e-02  9.42e-01  
  6  +5.0004e-01  +8.7494e-01  3.75e-01  2.48e-03  5.96e-01  5.46e-05  2.59e-02  7.82e-01  
  7  +4.9866e-01  +9.0583e-01  4.07e-01  5.30e-04  1.29e-01  7.26e-04  1.66e-03  9.90e-01  
  8  +4.9422e-01  +8.5795e-01  3.64e-01  1.50e-04  3.67e-02  2.18e-03  4.52e-04  7.39e-01  
  9  +4.9230e-01  +8.2793e-01  3.36e-01  1.22e-04  2.99e-02  1.96e-03  3.69e-04  2.74e-01  
 10  +4.8994e-01  +7.9358e-01  3.04e-01  1.01e-04  2.46e-02  1.59e-03  3.06e-04  2.88e-01  
 11  +4.8811e-01  +7.6512e-01  2.77e-01  8.88e-05  2.17e-02  1.15e-03  2.71e-04  2.68e-01  
 12  +4.8476e-01  +7.0115e-01  2.16e-01  7.57e-05  1.84e-02  6.78e-05  2.36e-04  6.67e-01  
 13  +4.7512e-01  +6.4388e-01  1.69e-01  4.92e-05  1.20e-02  5.14e-05  1.59e-04  3.95e-01  
 14  +4.6577e-01  +5.9180e-01  1.26e-01  3.36e-05  8.16e-03  2.94e-05  1.13e-04  4.30e-01  
 15  +4.6125e-01  +5.6795e-01  1.07e-01  2.73e-05  6.62e-03  1.93e-05  9.32e-05  3.62e-01  
 16  +4.5219e-01  +5.2209e-01  6.99e-02  1.67e-05  4.05e-03  8.05e-06  5.93e-05  6.15e-01  
 17  +4.4304e-01  +4.7868e-01  3.56e-02  8.02e-06  1.94e-03  3.16e-06  2.97e-05  6.69e-01  
 18  +4.4133e-01  +4.7056e-01  2.92e-02  6.44e-06  1.56e-03  2.15e-06  2.40e-05  5.01e-01  
 19  +4.3825e-01  +4.5653e-01  1.83e-02  3.91e-06  9.46e-04  1.06e-06  1.48e-05  8.28e-01  
 20  +4.3598e-01  +4.4701e-01  1.10e-02  2.33e-06  5.64e-04  6.18e-07  9.01e-06  5.58e-01  
 21  +4.3431e-01  +4.4018e-01  5.87e-03  1.23e-06  2.97e-04  3.23e-07  4.83e-06  5.57e-01  
 22  +4.3290e-01  +4.3444e-01  1.54e-03  3.19e-07  7.71e-05  7.65e-08  1.27e-06  9.90e-01  
 23  +4.3246e-01  +4.3279e-01  3.22e-04  6.62e-08  1.60e-05  1.60e-08  2.66e-07  8.15e-01  
 24  +4.3235e-01  +4.3236e-01  9.46e-06  1.95e-09  4.71e-07  4.70e-10  7.82e-09  9.71e-01  
 25  +4.3235e-01  +4.3235e-01  9.50e-08  1.95e-11  4.73e-09  4.72e-12  7.86e-11  9.90e-01  
 26  +4.3235e-01  +4.3235e-01  1.12e-09  2.29e-13  5.55e-11  5.61e-14  9.32e-13  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 434.7471ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:50 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:50 PM: Optimal value: 4.324e-01
(CVXPY) Sep 20 08:02:50 PM: Compilation took 1.205e-01 seconds
(CVXPY) Sep 20 08:02:50 PM: Solver (including time spent in interface) took 4.542e-01 seconds
Iteration: 36, Objective: 0.4324
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:50 PM: Your problem has 5363 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:50 PM: Finished problem compilation (took 1.109e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5363
  constraints   = 10363
  nnz(P)        = 0
  nnz(A)        = 104355
  cones (total) = 1
    : Nonnegative = 1,  numel = 10363

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7941e-01  +1.0861e+03  1.09e+03  4.37e-01  7.72e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3074e-01  +1.2074e+02  1.20e+02  1.69e-01  3.75e+01  1.65e-02  2.73e-01  9.45e-01  
  3  +5.0856e-01  +3.1387e+01  3.09e+01  1.22e-01  2.72e+01  4.61e-05  2.51e-01  3.05e-01  
  4  +5.0105e-01  +3.1625e+00  2.66e+00  1.84e-02  4.29e+00  5.98e-06  1.58e-01  6.19e-01  
  5  +5.0017e-01  +1.1594e+00  6.59e-01  4.50e-03  1.08e+00  4.58e-05  8.40e-02  9.74e-01  
  6  +5.0004e-01  +9.0258e-01  4.03e-01  2.66e-03  6.39e-01  5.94e-05  2.68e-02  7.45e-01  
  7  +4.9824e-01  +8.9509e-01  3.97e-01  4.31e-04  1.05e-01  9.31e-04  1.33e-03  9.81e-01  
  8  +4.9332e-01  +8.4337e-01  3.50e-01  1.37e-04  3.34e-02  2.39e-03  4.12e-04  7.09e-01  
  9  +4.9206e-01  +8.0207e-01  3.10e-01  1.15e-04  2.80e-02  1.47e-03  3.46e-04  3.98e-01  
 10  +4.8891e-01  +7.6159e-01  2.73e-01  8.91e-05  2.17e-02  9.69e-04  2.71e-04  4.44e-01  
 11  +4.8788e-01  +7.4790e-01  2.60e-01  8.79e-05  2.14e-02  8.02e-04  2.69e-04  8.07e-02  
 12  +4.7342e-01  +6.4680e-01  1.73e-01  4.60e-05  1.12e-02  4.73e-04  1.48e-04  5.58e-01  
 13  +4.6688e-01  +6.0754e-01  1.41e-01  3.67e-05  8.90e-03  2.66e-04  1.21e-04  3.61e-01  
 14  +4.5856e-01  +5.6213e-01  1.04e-01  2.58e-05  6.26e-03  1.61e-04  8.88e-05  3.61e-01  
 15  +4.5059e-01  +5.1938e-01  6.88e-02  1.63e-05  3.96e-03  5.17e-05  5.82e-05  6.57e-01  
 16  +4.4209e-01  +4.7729e-01  3.52e-02  7.95e-06  1.93e-03  1.54e-05  2.95e-05  7.13e-01  
 17  +4.4009e-01  +4.6796e-01  2.79e-02  6.17e-06  1.49e-03  9.27e-06  2.32e-05  4.31e-01  
 18  +4.3763e-01  +4.5699e-01  1.94e-02  4.22e-06  1.02e-03  5.62e-06  1.61e-05  4.10e-01  
 19  +4.3441e-01  +4.4276e-01  8.34e-03  1.78e-06  4.31e-04  1.57e-06  7.00e-06  7.55e-01  
 20  +4.3336e-01  +4.3822e-01  4.86e-03  1.03e-06  2.48e-04  6.23e-07  4.08e-06  6.72e-01  
 21  +4.3206e-01  +4.3297e-01  9.06e-04  1.89e-07  4.58e-05  1.05e-07  7.67e-07  8.43e-01  
 22  +4.3177e-01  +4.3181e-01  4.41e-05  9.17e-09  2.22e-06  4.34e-09  3.74e-08  9.63e-01  
 23  +4.3175e-01  +4.3175e-01  4.43e-07  9.21e-11  2.23e-08  4.36e-11  3.75e-10  9.90e-01  
 24  +4.3175e-01  +4.3175e-01  5.47e-09  1.14e-12  2.76e-10  5.47e-13  4.70e-12  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 408.975ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:51 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:51 PM: Optimal value: 4.318e-01
(CVXPY) Sep 20 08:02:51 PM: Compilation took 1.109e-01 seconds
(CVXPY) Sep 20 08:02:51 PM: Solver (including time spent in interface) took 4.281e-01 seconds
Iteration: 37, Objective: 0.4318
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:51 PM: Your problem has 5373 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:51 PM: Finished problem compilation (took 1.056e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5373
  constraints   = 10373
  nnz(P)        = 0
  nnz(A)        = 104924
  cones (total) = 1
    : Nonnegative = 1,  numel = 10373

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7940e-01  +1.0861e+03  1.09e+03  4.37e-01  7.72e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3074e-01  +1.2072e+02  1.20e+02  1.69e-01  3.75e+01  1.65e-02  2.73e-01  9.45e-01  
  3  +5.0856e-01  +3.1381e+01  3.09e+01  1.21e-01  2.72e+01  4.61e-05  2.51e-01  3.05e-01  
  4  +5.0105e-01  +3.1609e+00  2.66e+00  1.84e-02  4.29e+00  5.98e-06  1.58e-01  6.20e-01  
  5  +5.0017e-01  +1.1560e+00  6.56e-01  4.48e-03  1.07e+00  4.62e-05  8.31e-02  9.82e-01  
  6  +5.0003e-01  +8.9792e-01  3.98e-01  2.62e-03  6.29e-01  6.18e-05  2.53e-02  7.57e-01  
  7  +4.9754e-01  +8.9473e-01  3.97e-01  3.24e-04  7.91e-02  1.27e-03  9.90e-04  9.90e-01  
  8  +4.9242e-01  +8.3192e-01  3.39e-01  1.27e-04  3.09e-02  2.38e-03  3.81e-04  6.51e-01  
  9  +4.9251e-01  +7.9448e-01  3.02e-01  1.12e-04  2.73e-02  1.01e-03  3.36e-04  4.98e-01  
 10  +4.9002e-01  +7.5724e-01  2.67e-01  9.30e-05  2.27e-02  5.69e-04  2.81e-04  4.46e-01  
 11  +4.8864e-01  +7.4019e-01  2.52e-01  9.01e-05  2.20e-02  4.08e-04  2.75e-04  1.81e-01  
 12  +4.7427e-01  +6.4642e-01  1.72e-01  4.62e-05  1.12e-02  2.71e-04  1.48e-04  5.62e-01  
 13  +4.6784e-01  +6.0995e-01  1.42e-01  3.76e-05  9.12e-03  1.59e-04  1.24e-04  3.36e-01  
 14  +4.5983e-01  +5.6764e-01  1.08e-01  2.73e-05  6.62e-03  1.03e-04  9.35e-05  3.17e-01  
 15  +4.5173e-01  +5.2608e-01  7.44e-02  1.80e-05  4.35e-03  4.81e-05  6.40e-05  5.12e-01  
 16  +4.4212e-01  +4.7910e-01  3.70e-02  8.51e-06  2.06e-03  1.89e-05  3.18e-05  5.92e-01  
 17  +4.3997e-01  +4.6885e-01  2.89e-02  6.51e-06  1.58e-03  1.28e-05  2.46e-05  3.52e-01  
 18  +4.3679e-01  +4.5415e-01  1.74e-02  3.81e-06  9.22e-04  5.87e-06  1.47e-05  5.69e-01  
 19  +4.3666e-01  +4.5346e-01  1.68e-02  3.68e-06  8.91e-04  5.25e-06  1.42e-05  1.19e-01  
 20  +4.3600e-01  +4.4999e-01  1.40e-02  3.02e-06  7.32e-04  2.11e-06  1.17e-05  6.96e-01  
 21  +4.3356e-01  +4.3952e-01  5.96e-03  1.27e-06  3.08e-04  3.19e-07  5.03e-06  9.90e-01  
 22  +4.3214e-01  +4.3387e-01  1.73e-03  3.66e-07  8.85e-05  8.86e-08  1.48e-06  8.25e-01  
 23  +4.3160e-01  +4.3175e-01  1.46e-04  3.07e-08  7.43e-06  7.27e-09  1.25e-07  9.36e-01  
 24  +4.3155e-01  +4.3155e-01  1.56e-06  3.29e-10  7.95e-08  7.77e-11  1.34e-09  9.89e-01  
 25  +4.3155e-01  +4.3155e-01  1.60e-08  3.36e-12  8.14e-10  7.95e-13  1.37e-11  9.90e-01  
 26  +4.3155e-01  +4.3155e-01  2.57e-10  5.40e-14  1.31e-11  1.29e-14  2.22e-13  9.84e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 424.6015ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:51 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:51 PM: Optimal value: 4.316e-01
(CVXPY) Sep 20 08:02:51 PM: Compilation took 1.056e-01 seconds
(CVXPY) Sep 20 08:02:51 PM: Solver (including time spent in interface) took 4.450e-01 seconds
Iteration: 38, Objective: 0.4316
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:52 PM: Your problem has 5376 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:52 PM: Finished problem compilation (took 1.242e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5376
  constraints   = 10376
  nnz(P)        = 0
  nnz(A)        = 105059
  cones (total) = 1
    : Nonnegative = 1,  numel = 10376

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7941e-01  +1.0861e+03  1.09e+03  4.37e-01  7.71e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3073e-01  +1.2072e+02  1.20e+02  1.69e-01  3.74e+01  1.65e-02  2.73e-01  9.45e-01  
  3  +5.0856e-01  +3.1380e+01  3.09e+01  1.21e-01  2.72e+01  4.61e-05  2.51e-01  3.05e-01  
  4  +5.0105e-01  +3.1613e+00  2.66e+00  1.84e-02  4.29e+00  5.98e-06  1.58e-01  6.20e-01  
  5  +5.0017e-01  +1.1490e+00  6.49e-01  4.43e-03  1.06e+00  4.64e-05  8.25e-02  9.90e-01  
  6  +5.0003e-01  +8.9181e-01  3.92e-01  2.57e-03  6.17e-01  6.38e-05  2.42e-02  7.69e-01  
  7  +4.9736e-01  +8.9669e-01  3.99e-01  3.10e-04  7.56e-02  1.35e-03  9.44e-04  9.89e-01  
  8  +4.9256e-01  +8.3587e-01  3.43e-01  1.32e-04  3.23e-02  2.31e-03  3.99e-04  6.17e-01  
  9  +4.9296e-01  +7.9207e-01  2.99e-01  1.16e-04  2.83e-02  7.85e-04  3.48e-04  5.59e-01  
 10  +4.9050e-01  +7.5605e-01  2.66e-01  9.51e-05  2.32e-02  4.31e-04  2.87e-04  4.81e-01  
 11  +4.8932e-01  +7.4224e-01  2.53e-01  9.28e-05  2.26e-02  3.31e-04  2.82e-04  1.50e-01  
 12  +4.7520e-01  +6.5045e-01  1.75e-01  4.73e-05  1.15e-02  2.27e-04  1.51e-04  5.72e-01  
 13  +4.6807e-01  +6.1040e-01  1.42e-01  3.78e-05  9.17e-03  1.29e-04  1.25e-04  3.46e-01  
 14  +4.6035e-01  +5.6985e-01  1.09e-01  2.79e-05  6.76e-03  8.63e-05  9.53e-05  3.03e-01  
 15  +4.5513e-01  +5.4335e-01  8.82e-02  2.18e-05  5.28e-03  5.92e-05  7.64e-05  3.01e-01  
 16  +4.4427e-01  +4.8955e-01  4.53e-02  1.06e-05  2.56e-03  2.38e-05  3.92e-05  5.74e-01  
 17  +4.4051e-01  +4.7162e-01  3.11e-02  7.08e-06  1.71e-03  1.45e-05  2.67e-05  4.07e-01  
 18  +4.3845e-01  +4.6168e-01  2.32e-02  5.17e-06  1.25e-03  8.06e-06  1.97e-05  4.84e-01  
 19  +4.3681e-01  +4.5427e-01  1.75e-02  3.84e-06  9.29e-04  5.60e-06  1.48e-05  3.19e-01  
 20  +4.3567e-01  +4.4881e-01  1.31e-02  2.85e-06  6.90e-04  2.71e-06  1.11e-05  5.78e-01  
 21  +4.3362e-01  +4.3985e-01  6.23e-03  1.33e-06  3.23e-04  4.88e-07  5.27e-06  9.19e-01  
 22  +4.3258e-01  +4.3564e-01  3.06e-03  6.49e-07  1.57e-04  1.98e-07  2.60e-06  7.28e-01  
 23  +4.3173e-01  +4.3225e-01  5.21e-04  1.10e-07  2.66e-05  3.27e-08  4.46e-07  8.48e-01  
 24  +4.3157e-01  +4.3163e-01  6.03e-05  1.27e-08  3.07e-06  2.91e-09  5.17e-08  9.90e-01  
 25  +4.3155e-01  +4.3155e-01  6.24e-07  1.31e-10  3.17e-08  3.01e-11  5.35e-10  9.90e-01  
 26  +4.3155e-01  +4.3155e-01  6.30e-09  1.32e-12  3.21e-10  3.04e-13  5.40e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 421.7376ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:52 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:52 PM: Optimal value: 4.316e-01
(CVXPY) Sep 20 08:02:52 PM: Compilation took 1.242e-01 seconds
(CVXPY) Sep 20 08:02:52 PM: Solver (including time spent in interface) took 4.415e-01 seconds
Iteration: 39, Objective: 0.4316
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:53 PM: Your problem has 5386 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:53 PM: Finished problem compilation (took 1.084e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5386
  constraints   = 10386
  nnz(P)        = 0
  nnz(A)        = 105545
  cones (total) = 1
    : Nonnegative = 1,  numel = 10386

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7941e-01  +1.0861e+03  1.09e+03  4.37e-01  7.71e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3071e-01  +1.2067e+02  1.20e+02  1.69e-01  3.74e+01  1.65e-02  2.72e-01  9.45e-01  
  3  +5.0856e-01  +3.1365e+01  3.09e+01  1.21e-01  2.72e+01  4.61e-05  2.51e-01  3.06e-01  
  4  +5.0105e-01  +3.1610e+00  2.66e+00  1.84e-02  4.29e+00  5.98e-06  1.58e-01  6.20e-01  
  5  +5.0019e-01  +1.2022e+00  7.02e-01  4.80e-03  1.15e+00  4.57e-05  8.59e-02  9.42e-01  
  6  +5.0005e-01  +9.1843e-01  4.18e-01  2.77e-03  6.63e-01  5.81e-05  2.75e-02  7.50e-01  
  7  +4.9811e-01  +9.1237e-01  4.14e-01  4.05e-04  9.88e-02  9.95e-04  1.25e-03  9.90e-01  
  8  +4.9336e-01  +8.5175e-01  3.58e-01  1.40e-04  3.42e-02  2.22e-03  4.23e-04  6.88e-01  
  9  +4.9182e-01  +8.0756e-01  3.16e-01  1.16e-04  2.83e-02  1.35e-03  3.50e-04  4.15e-01  
 10  +4.8824e-01  +7.6299e-01  2.75e-01  8.84e-05  2.15e-02  8.38e-04  2.69e-04  4.75e-01  
 11  +4.8730e-01  +7.5179e-01  2.64e-01  8.77e-05  2.14e-02  7.37e-04  2.68e-04  4.46e-02  
 12  +4.7920e-01  +6.9349e-01  2.14e-01  6.28e-05  1.53e-02  5.33e-04  1.98e-04  3.45e-01  
 13  +4.7518e-01  +6.6171e-01  1.87e-01  5.43e-05  1.32e-02  2.79e-04  1.75e-04  3.75e-01  
 14  +4.6336e-01  +5.9104e-01  1.28e-01  3.39e-05  8.23e-03  1.37e-04  1.15e-04  4.71e-01  
 15  +4.5708e-01  +5.5711e-01  1.00e-01  2.54e-05  6.15e-03  8.87e-05  8.86e-05  3.39e-01  
 16  +4.5075e-01  +5.2239e-01  7.16e-02  1.72e-05  4.17e-03  2.97e-05  6.17e-05  6.66e-01  
 17  +4.4192e-01  +4.7953e-01  3.76e-02  8.68e-06  2.10e-03  1.30e-05  3.25e-05  5.51e-01  
 18  +4.4059e-01  +4.7258e-01  3.20e-02  7.28e-06  1.76e-03  8.54e-06  2.74e-05  3.86e-01  
 19  +4.3729e-01  +4.5736e-01  2.01e-02  4.48e-06  1.08e-03  4.63e-06  1.72e-05  4.79e-01  
 20  +4.3400e-01  +4.4245e-01  8.45e-03  1.84e-06  4.45e-04  1.22e-06  7.26e-06  7.85e-01  
 21  +4.3377e-01  +4.4129e-01  7.52e-03  1.64e-06  3.96e-04  9.02e-07  6.47e-06  3.39e-01  
 22  +4.3225e-01  +4.3494e-01  2.69e-03  5.81e-07  1.40e-04  2.82e-07  2.33e-06  7.12e-01  
 23  +4.3162e-01  +4.3229e-01  6.67e-04  1.43e-07  3.47e-05  5.90e-08  5.82e-07  8.21e-01  
 24  +4.3143e-01  +4.3152e-01  9.37e-05  2.01e-08  4.86e-06  7.16e-09  8.19e-08  9.00e-01  
 25  +4.3140e-01  +4.3140e-01  1.24e-06  2.66e-10  6.43e-08  8.66e-11  1.08e-09  9.90e-01  
 26  +4.3140e-01  +4.3140e-01  1.28e-08  2.75e-12  6.66e-10  8.97e-13  1.12e-11  9.90e-01  
 27  +4.3140e-01  +4.3140e-01  2.33e-10  5.00e-14  1.21e-11  1.65e-14  2.06e-13  9.82e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 474.8229ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:53 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:53 PM: Optimal value: 4.314e-01
(CVXPY) Sep 20 08:02:53 PM: Compilation took 1.084e-01 seconds
(CVXPY) Sep 20 08:02:53 PM: Solver (including time spent in interface) took 4.955e-01 seconds
Iteration: 40, Objective: 0.4314
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:54 PM: Your problem has 5396 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:54 PM: Finished problem compilation (took 1.338e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5396
  constraints   = 10396
  nnz(P)        = 0
  nnz(A)        = 106029
  cones (total) = 1
    : Nonnegative = 1,  numel = 10396

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7939e-01  +1.0860e+03  1.09e+03  4.37e-01  7.70e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3070e-01  +1.2064e+02  1.20e+02  1.69e-01  3.73e+01  1.65e-02  2.72e-01  9.45e-01  
  3  +5.0855e-01  +3.1357e+01  3.08e+01  1.21e-01  2.71e+01  4.61e-05  2.51e-01  3.06e-01  
  4  +5.0105e-01  +3.1612e+00  2.66e+00  1.84e-02  4.29e+00  5.99e-06  1.58e-01  6.20e-01  
  5  +5.0021e-01  +1.2600e+00  7.60e-01  5.20e-03  1.24e+00  4.48e-05  8.96e-02  8.91e-01  
  6  +5.0006e-01  +9.2108e-01  4.21e-01  2.80e-03  6.71e-01  5.34e-05  2.93e-02  7.34e-01  
  7  +4.9874e-01  +9.4262e-01  4.44e-01  5.81e-04  1.42e-01  6.97e-04  1.81e-03  9.90e-01  
  8  +4.9467e-01  +8.8958e-01  3.95e-01  1.72e-04  4.20e-02  1.98e-03  5.18e-04  7.28e-01  
  9  +4.9283e-01  +8.6050e-01  3.68e-01  1.42e-04  3.46e-02  1.85e-03  4.26e-04  2.47e-01  
 10  +4.9085e-01  +8.1940e-01  3.29e-01  1.15e-04  2.80e-02  1.36e-03  3.46e-04  3.55e-01  
 11  +4.8880e-01  +7.8533e-01  2.97e-01  9.88e-05  2.41e-02  9.59e-04  3.01e-04  3.03e-01  
 12  +4.8554e-01  +7.1832e-01  2.33e-01  8.49e-05  2.07e-02  2.63e-05  2.64e-04  6.97e-01  
 13  +4.7388e-01  +6.4658e-01  1.73e-01  5.02e-05  1.22e-02  1.77e-05  1.62e-04  5.29e-01  
 14  +4.6528e-01  +5.9845e-01  1.33e-01  3.61e-05  8.76e-03  1.02e-05  1.22e-04  4.60e-01  
 15  +4.5808e-01  +5.6116e-01  1.03e-01  2.65e-05  6.41e-03  7.08e-06  9.19e-05  3.48e-01  
 16  +4.5173e-01  +5.2863e-01  7.69e-02  1.88e-05  4.55e-03  4.27e-06  6.69e-05  5.75e-01  
 17  +4.4095e-01  +4.7659e-01  3.56e-02  8.21e-06  1.99e-03  1.82e-06  3.08e-05  6.30e-01  
 18  +4.3998e-01  +4.7189e-01  3.19e-02  7.28e-06  1.76e-03  1.61e-06  2.74e-05  2.56e-01  
 19  +4.3743e-01  +4.5998e-01  2.26e-02  5.03e-06  1.22e-03  1.12e-06  1.92e-05  5.38e-01  
 20  +4.3511e-01  +4.4950e-01  1.44e-02  3.16e-06  7.65e-04  7.11e-07  1.22e-05  5.99e-01  
 21  +4.3318e-01  +4.4094e-01  7.76e-03  1.68e-06  4.07e-04  3.81e-07  6.61e-06  7.75e-01  
 22  +4.3206e-01  +4.3636e-01  4.30e-03  9.15e-07  2.21e-04  2.12e-07  3.64e-06  5.79e-01  
 23  +4.3123e-01  +4.3301e-01  1.79e-03  3.71e-07  8.97e-05  8.57e-08  1.50e-06  9.90e-01  
 24  +4.3067e-01  +4.3086e-01  1.94e-04  3.99e-08  9.65e-06  9.30e-09  1.63e-07  9.04e-01  
 25  +4.3060e-01  +4.3060e-01  2.61e-06  5.36e-10  1.29e-07  1.25e-10  2.19e-09  9.90e-01  
 26  +4.3060e-01  +4.3060e-01  2.62e-08  5.38e-12  1.30e-09  1.25e-12  2.20e-11  9.90e-01  
 27  +4.3060e-01  +4.3060e-01  5.14e-10  1.05e-13  2.55e-11  2.49e-14  4.37e-13  9.80e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 478.5301ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:54 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:54 PM: Optimal value: 4.306e-01
(CVXPY) Sep 20 08:02:54 PM: Compilation took 1.338e-01 seconds
(CVXPY) Sep 20 08:02:54 PM: Solver (including time spent in interface) took 4.981e-01 seconds
Iteration: 41, Objective: 0.4306
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:54 PM: Your problem has 5400 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:55 PM: Finished problem compilation (took 1.303e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5400
  constraints   = 10400
  nnz(P)        = 0
  nnz(A)        = 106158
  cones (total) = 1
    : Nonnegative = 1,  numel = 10400

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7940e-01  +1.0860e+03  1.09e+03  4.37e-01  7.70e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3071e-01  +1.2065e+02  1.20e+02  1.69e-01  3.73e+01  1.65e-02  2.72e-01  9.45e-01  
  3  +5.0856e-01  +3.1356e+01  3.08e+01  1.21e-01  2.71e+01  4.61e-05  2.51e-01  3.06e-01  
  4  +5.0105e-01  +3.1595e+00  2.66e+00  1.84e-02  4.29e+00  5.98e-06  1.58e-01  6.20e-01  
  5  +5.0021e-01  +1.2613e+00  7.61e-01  5.21e-03  1.24e+00  4.47e-05  8.97e-02  8.89e-01  
  6  +5.0006e-01  +9.2268e-01  4.23e-01  2.81e-03  6.74e-01  5.32e-05  2.96e-02  7.31e-01  
  7  +4.9877e-01  +9.4284e-01  4.44e-01  5.92e-04  1.44e-01  6.81e-04  1.85e-03  9.90e-01  
  8  +4.9469e-01  +8.9020e-01  3.96e-01  1.72e-04  4.20e-02  1.98e-03  5.17e-04  7.34e-01  
  9  +4.9284e-01  +8.6076e-01  3.68e-01  1.42e-04  3.45e-02  1.84e-03  4.26e-04  2.48e-01  
 10  +4.9079e-01  +8.1993e-01  3.29e-01  1.14e-04  2.79e-02  1.38e-03  3.45e-04  3.49e-01  
 11  +4.8873e-01  +7.8657e-01  2.98e-01  9.86e-05  2.40e-02  9.91e-04  3.00e-04  2.94e-01  
 12  +4.8532e-01  +7.1665e-01  2.31e-01  8.40e-05  2.04e-02  8.87e-06  2.61e-04  7.11e-01  
 13  +4.7358e-01  +6.4520e-01  1.72e-01  4.97e-05  1.21e-02  6.98e-06  1.61e-04  5.03e-01  
 14  +4.6613e-01  +6.0290e-01  1.37e-01  3.74e-05  9.06e-03  5.05e-06  1.25e-04  5.20e-01  
 15  +4.5762e-01  +5.5871e-01  1.01e-01  2.59e-05  6.28e-03  3.64e-06  9.01e-05  3.86e-01  
 16  +4.5165e-01  +5.2814e-01  7.65e-02  1.87e-05  4.52e-03  2.93e-06  6.65e-05  5.85e-01  
 17  +4.4094e-01  +4.7652e-01  3.56e-02  8.20e-06  1.98e-03  1.35e-06  3.07e-05  6.21e-01  
 18  +4.4000e-01  +4.7197e-01  3.20e-02  7.30e-06  1.76e-03  1.26e-06  2.75e-05  2.56e-01  
 19  +4.3747e-01  +4.6021e-01  2.27e-02  5.08e-06  1.23e-03  9.63e-07  1.94e-05  5.28e-01  
 20  +4.3529e-01  +4.5031e-01  1.50e-02  3.31e-06  8.00e-04  6.70e-07  1.28e-05  5.82e-01  
 21  +4.3349e-01  +4.4221e-01  8.71e-03  1.90e-06  4.58e-04  4.15e-07  7.42e-06  8.73e-01  
 22  +4.3200e-01  +4.3605e-01  4.05e-03  8.69e-07  2.10e-04  1.95e-07  3.45e-06  6.46e-01  
 23  +4.3138e-01  +4.3364e-01  2.26e-03  4.72e-07  1.14e-04  1.09e-07  1.90e-06  7.01e-01  
 24  +4.3079e-01  +4.3132e-01  5.32e-04  1.10e-07  2.65e-05  2.54e-08  4.48e-07  9.24e-01  
 25  +4.3060e-01  +4.3061e-01  1.09e-05  2.25e-09  5.42e-07  5.19e-10  9.18e-09  9.90e-01  
 26  +4.3060e-01  +4.3060e-01  1.10e-07  2.26e-11  5.47e-09  5.23e-12  9.25e-11  9.90e-01  
 27  +4.3060e-01  +4.3060e-01  2.28e-09  4.68e-13  1.13e-10  1.10e-13  1.95e-12  9.79e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 426.1083ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:55 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:55 PM: Optimal value: 4.306e-01
(CVXPY) Sep 20 08:02:55 PM: Compilation took 1.303e-01 seconds
(CVXPY) Sep 20 08:02:55 PM: Solver (including time spent in interface) took 4.461e-01 seconds
Iteration: 42, Objective: 0.4306
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:55 PM: Your problem has 5401 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:55 PM: Finished problem compilation (took 1.219e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5401
  constraints   = 10401
  nnz(P)        = 0
  nnz(A)        = 106202
  cones (total) = 1
    : Nonnegative = 1,  numel = 10401

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.7940e-01  +1.0860e+03  1.09e+03  4.37e-01  7.70e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3070e-01  +1.2065e+02  1.20e+02  1.69e-01  3.73e+01  1.65e-02  2.72e-01  9.45e-01  
  3  +5.0856e-01  +3.1357e+01  3.08e+01  1.21e-01  2.71e+01  4.61e-05  2.51e-01  3.06e-01  
  4  +5.0105e-01  +3.1599e+00  2.66e+00  1.84e-02  4.29e+00  5.99e-06  1.58e-01  6.20e-01  
  5  +5.0021e-01  +1.2614e+00  7.61e-01  5.21e-03  1.24e+00  4.48e-05  8.97e-02  8.89e-01  
  6  +5.0006e-01  +9.2305e-01  4.23e-01  2.81e-03  6.74e-01  5.32e-05  2.96e-02  7.31e-01  
  7  +4.9877e-01  +9.4295e-01  4.44e-01  5.92e-04  1.44e-01  6.82e-04  1.85e-03  9.90e-01  
  8  +4.9468e-01  +8.9026e-01  3.96e-01  1.72e-04  4.20e-02  1.98e-03  5.17e-04  7.33e-01  
  9  +4.9284e-01  +8.6075e-01  3.68e-01  1.42e-04  3.45e-02  1.84e-03  4.26e-04  2.49e-01  
 10  +4.9078e-01  +8.2021e-01  3.29e-01  1.14e-04  2.79e-02  1.39e-03  3.46e-04  3.47e-01  
 11  +4.8871e-01  +7.8679e-01  2.98e-01  9.87e-05  2.40e-02  9.97e-04  3.00e-04  2.93e-01  
 12  +4.8535e-01  +7.1694e-01  2.32e-01  8.42e-05  2.05e-02  8.91e-06  2.62e-04  7.10e-01  
 13  +4.7368e-01  +6.4577e-01  1.72e-01  4.99e-05  1.21e-02  6.99e-06  1.62e-04  5.10e-01  
 14  +4.6699e-01  +6.0720e-01  1.40e-01  3.86e-05  9.36e-03  5.11e-06  1.29e-04  5.73e-01  
 15  +4.5779e-01  +5.5932e-01  1.02e-01  2.61e-05  6.32e-03  3.60e-06  9.07e-05  4.04e-01  
 16  +4.5159e-01  +5.2782e-01  7.62e-02  1.86e-05  4.51e-03  2.88e-06  6.64e-05  5.74e-01  
 17  +4.4119e-01  +4.7773e-01  3.65e-02  8.43e-06  2.04e-03  1.38e-06  3.16e-05  6.18e-01  
 18  +4.4012e-01  +4.7257e-01  3.24e-02  7.41e-06  1.79e-03  1.28e-06  2.79e-05  2.70e-01  
 19  +4.3741e-01  +4.5987e-01  2.25e-02  5.02e-06  1.21e-03  9.61e-07  1.91e-05  5.79e-01  
 20  +4.3513e-01  +4.4963e-01  1.45e-02  3.19e-06  7.72e-04  6.50e-07  1.24e-05  5.85e-01  
 21  +4.3315e-01  +4.4079e-01  7.64e-03  1.66e-06  4.02e-04  3.63e-07  6.53e-06  8.46e-01  
 22  +4.3196e-01  +4.3592e-01  3.96e-03  8.46e-07  2.04e-04  1.91e-07  3.36e-06  6.27e-01  
 23  +4.3133e-01  +4.3344e-01  2.10e-03  4.38e-07  1.06e-04  1.01e-07  1.77e-06  8.59e-01  
 24  +4.3071e-01  +4.3102e-01  3.10e-04  6.39e-08  1.54e-05  1.49e-08  2.61e-07  8.94e-01  
 25  +4.3060e-01  +4.3062e-01  1.13e-05  2.32e-09  5.60e-07  5.38e-10  9.48e-09  9.90e-01  
 26  +4.3060e-01  +4.3060e-01  1.14e-07  2.33e-11  5.64e-09  5.42e-12  9.55e-11  9.90e-01  
 27  +4.3060e-01  +4.3060e-01  2.51e-09  5.16e-13  1.25e-10  1.22e-13  2.15e-12  9.78e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 411.8352ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:56 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:56 PM: Optimal value: 4.306e-01
(CVXPY) Sep 20 08:02:56 PM: Compilation took 1.219e-01 seconds
(CVXPY) Sep 20 08:02:56 PM: Solver (including time spent in interface) took 4.289e-01 seconds
FULL MODEL:
  Accruacy: 0.5272
  Our objective: 0.05439999999999999

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0014)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0018)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0034)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 0)            <-- (term's our objective: 0.0032)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.0014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.0022)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.0034)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.0018)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0018)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 0)            <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.001)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0)                                             <-- (term's our objective: 0.0124)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.003)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.0058)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0026)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 44.74429702758789
Best over terms:
  Our final objective: 0.012400000000000012
    Its accruacy: 0.5062
    Its hamming distance: 6
  Shortest hamming distance: 4
    Its our objective: 0.001400000000000002
  Highest accruacy: 0.5062
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 124 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 125 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 126 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 127 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 128 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 129 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

