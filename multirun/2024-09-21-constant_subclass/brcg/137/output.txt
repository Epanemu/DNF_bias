Command:
python test_script.py -s constant_subclass -d 4 -n 500 --seed 73 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 4.

Computed total variation: 0.148
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:59 PM: Your problem has 259 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:59 PM: Finished problem compilation (took 5.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 259
  constraints   = 509
  nnz(P)        = 0
  nnz(A)        = 1759
  cones (total) = 1
    : Nonnegative = 1,  numel = 509

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +2.5072e+02  2.50e+02  9.32e-01  1.86e+01  1.00e+00  1.01e+00   ------   
  1  +6.0733e-01  +4.8861e+01  4.83e+01  3.19e-01  1.01e+01  4.09e-03  4.76e-01  6.67e-01  
  2  +5.4782e-01  +7.6780e+00  7.13e+00  1.13e-01  4.31e+00  8.47e-03  2.18e-01  7.54e-01  
  3  +5.0103e-01  +1.2521e+00  7.51e-01  2.24e-02  8.24e-01  1.11e-03  1.95e-01  4.53e-01  
  4  +5.0016e-01  +6.6520e-01  1.65e-01  4.96e-03  1.87e-01  2.59e-04  4.84e-02  7.86e-01  
  5  +4.9658e-01  +6.8212e-01  1.86e-01  2.66e-03  1.02e-01  1.03e-03  9.42e-03  9.11e-01  
  6  +4.8416e-01  +6.0197e-01  1.18e-01  6.04e-04  2.34e-02  2.22e-03  2.00e-03  7.89e-01  
  7  +4.7166e-01  +5.0835e-01  3.67e-02  1.85e-04  7.14e-03  1.82e-04  6.86e-04  7.73e-01  
  8  +4.6486e-01  +4.7352e-01  8.66e-03  3.83e-05  1.48e-03  4.35e-06  1.63e-04  9.90e-01  
  9  +4.6215e-01  +4.6229e-01  1.45e-04  6.09e-07  2.35e-05  6.70e-08  2.79e-06  9.85e-01  
 10  +4.6210e-01  +4.6210e-01  1.45e-06  6.09e-09  2.35e-07  6.70e-10  2.79e-08  9.90e-01  
 11  +4.6210e-01  +4.6210e-01  1.45e-08  6.09e-11  2.35e-09  6.71e-12  2.80e-10  9.90e-01  
 12  +4.6210e-01  +4.6210e-01  1.45e-10  6.09e-13  2.35e-11  6.72e-14  2.80e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.784ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:59 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:59 PM: Optimal value: 4.621e-01
(CVXPY) Sep 20 07:28:59 PM: Compilation took 5.999e-03 seconds
(CVXPY) Sep 20 07:28:59 PM: Solver (including time spent in interface) took 2.001e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4621
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:59 PM: Your problem has 268 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:59 PM: Finished problem compilation (took 4.011e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 268
  constraints   = 518
  nnz(P)        = 0
  nnz(A)        = 2322
  cones (total) = 1
    : Nonnegative = 1,  numel = 518

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9906e-01  +2.5136e+02  2.51e+02  9.34e-01  2.02e+01  1.00e+00  1.03e+00   ------   
  1  +6.0467e-01  +4.9483e+01  4.89e+01  3.30e-01  1.10e+01  4.05e-03  4.96e-01  6.60e-01  
  2  +5.4550e-01  +7.4818e+00  6.94e+00  1.13e-01  4.54e+00  9.15e-03  2.22e-01  7.79e-01  
  3  +5.0095e-01  +1.2794e+00  7.78e-01  2.38e-02  9.35e-01  1.19e-03  1.93e-01  5.11e-01  
  4  +5.0004e-01  +7.4713e-01  2.47e-01  7.59e-03  3.06e-01  4.32e-04  6.19e-02  7.47e-01  
  5  +4.9087e-01  +1.0967e+00  6.06e-01  4.95e-03  2.04e-01  2.79e-03  1.71e-02  9.31e-01  
  6  +4.7933e-01  +6.1365e-01  1.34e-01  8.87e-04  3.66e-02  5.01e-04  3.23e-03  8.71e-01  
  7  +4.7841e-01  +6.0789e-01  1.29e-01  7.50e-04  3.10e-02  4.81e-04  2.50e-03  3.63e-01  
  8  +4.7629e-01  +6.0643e-01  1.30e-01  5.73e-04  2.37e-02  5.26e-04  1.82e-03  4.13e-01  
  9  +4.6412e-01  +5.3647e-01  7.23e-02  2.55e-04  1.05e-02  1.18e-04  8.38e-04  8.72e-01  
 10  +4.5815e-01  +5.0680e-01  4.86e-02  1.77e-04  7.32e-03  6.76e-05  6.00e-04  5.11e-01  
 11  +4.5442e-01  +4.8827e-01  3.39e-02  1.20e-04  4.96e-03  4.74e-05  4.16e-04  6.74e-01  
 12  +4.4550e-01  +4.5374e-01  8.23e-03  2.87e-05  1.19e-03  1.02e-05  1.04e-04  9.90e-01  
 13  +4.4223e-01  +4.4251e-01  2.81e-04  9.74e-07  4.02e-05  2.85e-07  3.64e-06  9.66e-01  
 14  +4.4210e-01  +4.4210e-01  2.81e-06  9.76e-09  4.02e-07  2.84e-09  3.66e-08  9.90e-01  
 15  +4.4210e-01  +4.4210e-01  2.81e-08  9.76e-11  4.02e-09  2.84e-11  3.66e-10  9.90e-01  
 16  +4.4210e-01  +4.4210e-01  2.81e-10  9.76e-13  4.02e-11  2.84e-13  3.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4496ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:59 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:59 PM: Optimal value: 4.421e-01
(CVXPY) Sep 20 07:28:59 PM: Compilation took 4.011e-03 seconds
(CVXPY) Sep 20 07:28:59 PM: Solver (including time spent in interface) took 3.000e-03 seconds
Iteration: 2, Objective: 0.4421
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:59 PM: Your problem has 274 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:59 PM: Finished problem compilation (took 4.424e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 274
  constraints   = 524
  nnz(P)        = 0
  nnz(A)        = 2551
  cones (total) = 1
    : Nonnegative = 1,  numel = 524

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9888e-01  +2.5106e+02  2.51e+02  9.34e-01  2.05e+01  1.00e+00  1.02e+00   ------   
  1  +6.0146e-01  +4.9788e+01  4.92e+01  3.36e-01  1.13e+01  4.04e-03  4.99e-01  6.56e-01  
  2  +5.4390e-01  +7.3257e+00  6.78e+00  1.11e-01  4.53e+00  9.52e-03  2.18e-01  7.98e-01  
  3  +5.0112e-01  +1.3244e+00  8.23e-01  2.53e-02  1.01e+00  1.20e-03  1.88e-01  5.29e-01  
  4  +4.9992e-01  +8.2326e-01  3.23e-01  9.90e-03  4.05e-01  5.77e-04  7.18e-02  6.39e-01  
  5  +4.9218e-01  +9.7052e-01  4.78e-01  5.22e-03  2.19e-01  2.26e-03  1.74e-02  9.62e-01  
  6  +4.8011e-01  +8.0742e-01  3.27e-01  2.07e-03  8.73e-02  2.55e-03  6.88e-03  6.14e-01  
  7  +4.7688e-01  +7.8490e-01  3.08e-01  1.72e-03  7.24e-02  2.47e-03  5.71e-03  2.15e-01  
  8  +4.7935e-01  +7.3810e-01  2.59e-01  1.66e-03  6.98e-02  1.29e-03  5.61e-03  1.97e-01  
  9  +4.6856e-01  +6.5511e-01  1.87e-01  9.75e-04  4.10e-02  9.49e-04  3.33e-03  4.71e-01  
 10  +4.5416e-01  +5.5756e-01  1.03e-01  4.62e-04  1.94e-02  4.48e-04  1.63e-03  6.03e-01  
 11  +4.3993e-01  +4.8056e-01  4.06e-02  1.55e-04  6.49e-03  1.79e-04  5.58e-04  7.11e-01  
 12  +4.3884e-01  +4.7538e-01  3.65e-02  1.34e-04  5.64e-03  1.40e-04  4.83e-04  3.12e-01  
 13  +4.3209e-01  +4.4545e-01  1.34e-02  5.00e-05  2.10e-03  1.40e-05  1.87e-04  9.11e-01  
 14  +4.2680e-01  +4.2811e-01  1.31e-03  4.65e-06  1.95e-04  1.38e-06  1.77e-05  9.28e-01  
 15  +4.2631e-01  +4.2632e-01  1.33e-05  4.72e-08  1.98e-06  1.39e-08  1.79e-07  9.90e-01  
 16  +4.2630e-01  +4.2630e-01  1.33e-07  4.72e-10  1.98e-08  1.39e-10  1.79e-09  9.90e-01  
 17  +4.2630e-01  +4.2630e-01  1.33e-09  4.72e-12  1.98e-10  1.39e-12  1.79e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7828ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:59 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:59 PM: Optimal value: 4.263e-01
(CVXPY) Sep 20 07:28:59 PM: Compilation took 4.424e-03 seconds
(CVXPY) Sep 20 07:28:59 PM: Solver (including time spent in interface) took 3.536e-03 seconds
FULL MODEL:
  Accruacy: 0.574
  Our objective: 0.148

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.1)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0) <-- (term's our objective: 0.02)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1)            <-- (term's our objective: 0.028)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.6696581840515137
Best over terms:
  Our final objective: 0.1
    Its accruacy: 0.55
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1
  Highest accruacy: 0.55
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

