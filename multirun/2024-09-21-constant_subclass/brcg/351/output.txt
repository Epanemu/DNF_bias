Command:
python test_script.py -s constant_subclass -d 9 -n 10000 --seed 56 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0024
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 9.

Computed total variation: 0.18519999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:08 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:08 PM: Finished problem compilation (took 3.056e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 60019
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +5.0012e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +1.0852e+03  1.08e+03  4.32e-01  7.56e+01  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3196e-01  +1.2314e+02  1.23e+02  1.71e-01  3.84e+01  1.63e-02  2.77e-01  9.29e-01  
  3  +5.0884e-01  +3.2064e+01  3.16e+01  1.24e-01  2.77e+01  4.48e-05  2.59e-01  2.72e-01  
  4  +5.0107e-01  +3.2006e+00  2.70e+00  1.83e-02  4.17e+00  5.75e-06  1.71e-01  5.87e-01  
  5  +5.0008e-01  +8.8835e-01  3.88e-01  2.60e-03  6.05e-01  3.70e-05  1.04e-01  9.90e-01  
  6  +5.0001e-01  +5.5009e-01  5.01e-02  3.34e-04  7.80e-02  5.94e-06  1.78e-02  8.43e-01  
  7  +5.0000e-01  +5.4258e-01  4.26e-02  2.84e-04  6.62e-02  6.40e-06  9.65e-03  5.48e-01  
  8  +4.9998e-01  +5.3470e-01  3.47e-02  2.17e-04  5.06e-02  1.53e-05  2.00e-03  9.14e-01  
  9  +4.9890e-01  +5.2965e-01  3.08e-02  1.40e-05  3.28e-03  5.49e-04  4.42e-05  9.79e-01  
 10  +4.9738e-01  +5.2127e-01  2.39e-02  6.87e-06  1.61e-03  6.10e-04  2.17e-05  5.76e-01  
 11  +4.9634e-01  +5.1381e-01  1.75e-02  5.15e-06  1.21e-03  2.20e-04  1.67e-05  4.78e-01  
 12  +4.9601e-01  +5.1062e-01  1.46e-02  4.25e-06  9.96e-04  7.69e-06  1.40e-05  8.10e-01  
 13  +4.9437e-01  +5.0304e-01  8.67e-03  2.28e-06  5.35e-04  3.52e-06  7.68e-06  5.54e-01  
 14  +4.9405e-01  +5.0150e-01  7.45e-03  1.89e-06  4.42e-04  1.96e-06  6.37e-06  4.84e-01  
 15  +4.9271e-01  +4.9547e-01  2.76e-03  6.56e-07  1.54e-04  3.86e-07  2.27e-06  8.25e-01  
 16  +4.9222e-01  +4.9328e-01  1.06e-03  2.47e-07  5.80e-05  7.47e-08  8.64e-07  9.07e-01  
 17  +4.9190e-01  +4.9192e-01  1.52e-05  3.52e-09  8.25e-07  9.50e-10  1.24e-08  9.90e-01  
 18  +4.9190e-01  +4.9190e-01  1.52e-07  3.52e-11  8.25e-09  9.50e-12  1.24e-10  9.90e-01  
 19  +4.9190e-01  +4.9190e-01  1.53e-09  3.52e-13  8.26e-11  9.71e-14  1.27e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 96.3105ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:08 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:08 PM: Optimal value: 4.919e-01
(CVXPY) Sep 20 08:01:08 PM: Compilation took 3.056e-02 seconds
(CVXPY) Sep 20 08:01:08 PM: Solver (including time spent in interface) took 1.062e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4919
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:08 PM: Your problem has 5029 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:08 PM: Finished problem compilation (took 3.206e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5029
  constraints   = 10029
  nnz(P)        = 0
  nnz(A)        = 68299
  cones (total) = 1
    : Nonnegative = 1,  numel = 10029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8084e-01  +1.0855e+03  1.08e+03  4.32e-01  7.77e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3184e-01  +1.2290e+02  1.22e+02  1.71e-01  3.93e+01  1.63e-02  2.77e-01  9.30e-01  
  3  +5.0881e-01  +3.1986e+01  3.15e+01  1.24e-01  2.84e+01  4.49e-05  2.59e-01  2.75e-01  
  4  +5.0107e-01  +3.1903e+00  2.69e+00  1.83e-02  4.27e+00  5.76e-06  1.70e-01  5.92e-01  
  5  +5.0009e-01  +9.0886e-01  4.09e-01  2.74e-03  6.55e-01  3.75e-05  1.01e-01  9.90e-01  
  6  +5.0002e-01  +6.0038e-01  1.00e-01  6.71e-04  1.61e-01  1.23e-05  2.83e-02  7.50e-01  
  7  +5.0000e-01  +5.7948e-01  7.95e-02  5.27e-04  1.26e-01  1.78e-05  1.02e-02  7.19e-01  
  8  +4.9978e-01  +5.7247e-01  7.27e-02  2.71e-04  6.52e-02  1.22e-04  1.10e-03  9.06e-01  
  9  +4.9715e-01  +5.6062e-01  6.35e-02  2.67e-05  6.42e-03  1.32e-03  8.35e-05  9.24e-01  
 10  +4.9662e-01  +5.5510e-01  5.85e-02  2.32e-05  5.59e-03  1.02e-03  7.25e-05  2.75e-01  
 11  +4.9570e-01  +5.4598e-01  5.03e-02  1.75e-05  4.22e-03  5.95e-04  5.48e-05  4.97e-01  
 12  +4.9557e-01  +5.4460e-01  4.90e-02  1.65e-05  3.99e-03  4.78e-04  5.17e-05  2.08e-01  
 13  +4.9471e-01  +5.3866e-01  4.39e-02  1.26e-05  3.05e-03  5.62e-06  3.99e-05  9.22e-01  
 14  +4.9271e-01  +5.3037e-01  3.77e-02  9.07e-06  2.18e-03  4.84e-06  2.89e-05  3.68e-01  
 15  +4.9057e-01  +5.2072e-01  3.02e-02  6.84e-06  1.65e-03  1.57e-06  2.20e-05  7.70e-01  
 16  +4.8675e-01  +5.0590e-01  1.91e-02  3.81e-06  9.16e-04  9.71e-07  1.26e-05  5.76e-01  
 17  +4.8434e-01  +4.9591e-01  1.16e-02  2.16e-06  5.19e-04  6.33e-07  7.27e-06  9.90e-01  
 18  +4.8040e-01  +4.8211e-01  1.71e-03  2.98e-07  7.18e-05  8.88e-08  1.04e-06  9.20e-01  
 19  +4.7971e-01  +4.7973e-01  2.29e-05  3.96e-09  9.52e-07  1.22e-09  1.39e-08  9.90e-01  
 20  +4.7970e-01  +4.7970e-01  2.29e-07  3.96e-11  9.52e-09  1.22e-11  1.39e-10  9.90e-01  
 21  +4.7970e-01  +4.7970e-01  2.29e-09  3.96e-13  9.53e-11  1.25e-13  1.42e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 117.3304ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:08 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:08 PM: Optimal value: 4.797e-01
(CVXPY) Sep 20 08:01:08 PM: Compilation took 3.206e-02 seconds
(CVXPY) Sep 20 08:01:08 PM: Solver (including time spent in interface) took 1.273e-01 seconds
Iteration: 2, Objective: 0.4797
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:09 PM: Your problem has 5039 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:09 PM: Finished problem compilation (took 3.356e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5039
  constraints   = 10039
  nnz(P)        = 0
  nnz(A)        = 73291
  cones (total) = 1
    : Nonnegative = 1,  numel = 10039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.8080e-01  +1.0856e+03  1.09e+03  4.32e-01  7.83e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3177e-01  +1.2278e+02  1.22e+02  1.71e-01  3.96e+01  1.63e-02  2.77e-01  9.31e-01  
  3  +5.0879e-01  +3.1938e+01  3.14e+01  1.23e-01  2.86e+01  4.50e-05  2.59e-01  2.77e-01  
  4  +5.0106e-01  +3.1819e+00  2.68e+00  1.82e-02  4.30e+00  5.78e-06  1.69e-01  5.95e-01  
  5  +5.0009e-01  +9.2285e-01  4.23e-01  2.84e-03  6.83e-01  3.78e-05  9.99e-02  9.90e-01  
  6  +5.0002e-01  +6.3221e-01  1.32e-01  8.85e-04  2.14e-01  1.63e-05  3.28e-02  6.99e-01  
  7  +4.9999e-01  +6.1954e-01  1.20e-01  7.91e-04  1.91e-01  2.67e-05  1.33e-02  6.58e-01  
  8  +4.9950e-01  +6.0258e-01  1.03e-01  2.52e-04  6.11e-02  2.70e-04  9.11e-04  9.46e-01  
  9  +4.9549e-01  +5.8401e-01  8.85e-02  3.11e-05  7.55e-03  1.99e-03  9.91e-05  8.92e-01  
 10  +4.9481e-01  +5.7906e-01  8.42e-02  2.68e-05  6.51e-03  1.68e-03  8.45e-05  2.84e-01  
 11  +4.9369e-01  +5.6785e-01  7.42e-02  2.21e-05  5.38e-03  1.02e-03  7.00e-05  4.02e-01  
 12  +4.9335e-01  +5.6507e-01  7.17e-02  2.17e-05  5.28e-03  8.57e-04  6.91e-05  9.89e-02  
 13  +4.9291e-01  +5.6074e-01  6.78e-02  2.02e-05  4.90e-03  5.91e-04  6.42e-05  2.77e-01  
 14  +4.9113e-01  +5.4922e-01  5.81e-02  1.57e-05  3.81e-03  3.24e-04  5.00e-05  4.79e-01  
 15  +4.8919e-01  +5.3548e-01  4.63e-02  1.29e-05  3.12e-03  3.13e-06  4.15e-05  7.82e-01  
 16  +4.8180e-01  +5.0052e-01  1.87e-02  4.30e-06  1.04e-03  1.24e-06  1.42e-05  6.94e-01  
 17  +4.8035e-01  +4.9322e-01  1.29e-02  2.81e-06  6.83e-04  6.80e-07  9.36e-06  9.42e-01  
 18  +4.7718e-01  +4.7951e-01  2.33e-03  5.00e-07  1.21e-04  1.19e-07  1.70e-06  8.37e-01  
 19  +4.7655e-01  +4.7686e-01  3.11e-04  6.65e-08  1.61e-05  1.54e-08  2.30e-07  8.83e-01  
 20  +4.7645e-01  +4.7646e-01  8.83e-06  1.89e-09  4.58e-07  4.43e-10  6.60e-09  9.83e-01  
 21  +4.7645e-01  +4.7645e-01  8.83e-08  1.89e-11  4.58e-09  4.43e-12  6.60e-11  9.90e-01  
 22  +4.7645e-01  +4.7645e-01  8.84e-10  1.89e-13  4.58e-11  4.52e-14  6.72e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 126.2058ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:09 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:09 PM: Optimal value: 4.765e-01
(CVXPY) Sep 20 08:01:09 PM: Compilation took 3.356e-02 seconds
(CVXPY) Sep 20 08:01:09 PM: Solver (including time spent in interface) took 1.362e-01 seconds
Iteration: 3, Objective: 0.4765
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:09 PM: Your problem has 5049 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:09 PM: Finished problem compilation (took 3.613e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5049
  constraints   = 10049
  nnz(P)        = 0
  nnz(A)        = 75773
  cones (total) = 1
    : Nonnegative = 1,  numel = 10049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8075e-01  +1.0857e+03  1.09e+03  4.33e-01  7.85e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3172e-01  +1.2268e+02  1.22e+02  1.71e-01  3.96e+01  1.63e-02  2.77e-01  9.32e-01  
  3  +5.0877e-01  +3.1906e+01  3.14e+01  1.23e-01  2.86e+01  4.50e-05  2.58e-01  2.79e-01  
  4  +5.0106e-01  +3.1762e+00  2.68e+00  1.82e-02  4.30e+00  5.79e-06  1.68e-01  5.97e-01  
  5  +5.0010e-01  +9.3538e-01  4.35e-01  2.93e-03  7.05e-01  3.82e-05  9.85e-02  9.90e-01  
  6  +5.0003e-01  +6.7828e-01  1.78e-01  1.19e-03  2.89e-01  2.08e-05  3.95e-02  6.40e-01  
  7  +4.9998e-01  +6.3995e-01  1.40e-01  9.15e-04  2.21e-01  3.64e-05  1.18e-02  7.68e-01  
  8  +4.9855e-01  +6.2538e-01  1.27e-01  1.34e-04  3.27e-02  7.42e-04  4.44e-04  9.72e-01  
  9  +4.9449e-01  +6.0254e-01  1.08e-01  3.82e-05  9.31e-03  2.01e-03  1.23e-04  7.37e-01  
 10  +4.9364e-01  +5.9315e-01  9.95e-02  3.25e-05  7.91e-03  1.41e-03  1.05e-04  3.52e-01  
 11  +4.9319e-01  +5.8306e-01  8.99e-02  3.00e-05  7.32e-03  6.57e-04  9.71e-05  4.10e-01  
 12  +4.9134e-01  +5.6573e-01  7.44e-02  2.48e-05  6.04e-03  6.55e-06  8.13e-05  7.93e-01  
 13  +4.8405e-01  +5.2639e-01  4.23e-02  1.15e-05  2.79e-03  3.23e-06  3.88e-05  6.40e-01  
 14  +4.8252e-01  +5.1872e-01  3.62e-02  9.44e-06  2.30e-03  2.70e-06  3.21e-05  2.14e-01  
 15  +4.8233e-01  +5.1753e-01  3.52e-02  9.18e-06  2.23e-03  2.34e-06  3.12e-05  2.23e-01  
 16  +4.7807e-01  +4.9636e-01  1.83e-02  4.44e-06  1.08e-03  1.14e-06  1.54e-05  5.82e-01  
 17  +4.7402e-01  +4.7658e-01  2.56e-03  5.90e-07  1.43e-04  1.40e-07  2.07e-06  9.28e-01  
 18  +4.7349e-01  +4.7435e-01  8.65e-04  1.96e-07  4.77e-05  4.65e-08  6.88e-07  6.99e-01  
 19  +4.7323e-01  +4.7325e-01  2.03e-05  4.57e-09  1.11e-06  1.02e-09  1.61e-08  9.90e-01  
 20  +4.7323e-01  +4.7323e-01  2.03e-07  4.58e-11  1.11e-08  1.02e-11  1.61e-10  9.90e-01  
 21  +4.7323e-01  +4.7323e-01  2.03e-09  4.58e-13  1.11e-10  1.04e-13  1.63e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 124.5121ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:09 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:09 PM: Optimal value: 4.732e-01
(CVXPY) Sep 20 08:01:09 PM: Compilation took 3.613e-02 seconds
(CVXPY) Sep 20 08:01:09 PM: Solver (including time spent in interface) took 1.343e-01 seconds
Iteration: 4, Objective: 0.4732
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:09 PM: Your problem has 5059 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:09 PM: Finished problem compilation (took 3.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5059
  constraints   = 10059
  nnz(P)        = 0
  nnz(A)        = 78781
  cones (total) = 1
    : Nonnegative = 1,  numel = 10059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8072e-01  +1.0857e+03  1.09e+03  4.33e-01  7.87e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3170e-01  +1.2263e+02  1.22e+02  1.71e-01  3.97e+01  1.63e-02  2.77e-01  9.32e-01  
  3  +5.0877e-01  +3.1886e+01  3.14e+01  1.23e-01  2.86e+01  4.51e-05  2.58e-01  2.79e-01  
  4  +5.0106e-01  +3.1691e+00  2.67e+00  1.82e-02  4.30e+00  5.80e-06  1.68e-01  5.99e-01  
  5  +5.0010e-01  +9.4405e-01  4.44e-01  2.98e-03  7.22e-01  3.83e-05  9.74e-02  9.90e-01  
  6  +5.0002e-01  +6.5123e-01  1.51e-01  1.01e-03  2.46e-01  2.03e-05  3.05e-02  7.40e-01  
  7  +4.9997e-01  +6.7071e-01  1.71e-01  1.09e-03  2.66e-01  4.83e-05  1.14e-02  7.21e-01  
  8  +4.9857e-01  +6.5411e-01  1.56e-01  1.75e-04  4.28e-02  7.32e-04  5.89e-04  9.57e-01  
  9  +4.9578e-01  +6.2278e-01  1.27e-01  5.67e-05  1.39e-02  1.45e-03  1.84e-04  8.01e-01  
 10  +4.9611e-01  +6.2230e-01  1.26e-01  5.64e-05  1.38e-02  1.22e-03  1.82e-04  1.43e-01  
 11  +4.9466e-01  +6.0719e-01  1.13e-01  4.39e-05  1.07e-02  9.26e-04  1.41e-04  4.01e-01  
 12  +4.9298e-01  +5.9300e-01  1.00e-01  3.42e-05  8.37e-03  6.26e-04  1.10e-04  4.36e-01  
 13  +4.9243e-01  +5.8582e-01  9.34e-02  3.15e-05  7.70e-03  2.71e-04  1.01e-04  4.81e-01  
 14  +4.8670e-01  +5.5324e-01  6.65e-02  1.84e-05  4.49e-03  1.38e-04  5.96e-05  5.99e-01  
 15  +4.7881e-01  +5.0977e-01  3.10e-02  7.63e-06  1.86e-03  3.85e-05  2.55e-05  6.99e-01  
 16  +4.7813e-01  +5.0639e-01  2.83e-02  6.83e-06  1.67e-03  2.34e-05  2.30e-05  3.84e-01  
 17  +4.7370e-01  +4.8514e-01  1.14e-02  2.53e-06  6.17e-04  7.08e-06  8.71e-06  7.30e-01  
 18  +4.7205e-01  +4.7865e-01  6.59e-03  1.33e-06  3.24e-04  2.77e-06  4.74e-06  6.62e-01  
 19  +4.7187e-01  +4.7779e-01  5.92e-03  1.19e-06  2.91e-04  1.67e-06  4.28e-06  4.27e-01  
 20  +4.7064e-01  +4.7296e-01  2.33e-03  4.48e-07  1.09e-04  3.93e-07  1.67e-06  8.01e-01  
 21  +4.7000e-01  +4.7052e-01  5.25e-04  9.91e-08  2.42e-05  5.03e-08  3.76e-07  9.16e-01  
 22  +4.6985e-01  +4.6998e-01  1.26e-04  2.38e-08  5.80e-06  7.30e-09  9.07e-08  9.90e-01  
 23  +4.6980e-01  +4.6980e-01  1.40e-06  2.63e-10  6.42e-08  8.06e-11  1.01e-09  9.89e-01  
 24  +4.6980e-01  +4.6980e-01  1.40e-08  2.63e-12  6.42e-10  8.06e-13  1.01e-11  9.90e-01  
 25  +4.6980e-01  +4.6980e-01  1.40e-10  2.63e-14  6.43e-12  8.65e-15  1.08e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 147.9066ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:09 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:09 PM: Optimal value: 4.698e-01
(CVXPY) Sep 20 08:01:09 PM: Compilation took 3.562e-02 seconds
(CVXPY) Sep 20 08:01:09 PM: Solver (including time spent in interface) took 1.589e-01 seconds
Iteration: 5, Objective: 0.4698
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:10 PM: Your problem has 5069 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:10 PM: Finished problem compilation (took 3.804e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5069
  constraints   = 10069
  nnz(P)        = 0
  nnz(A)        = 80918
  cones (total) = 1
    : Nonnegative = 1,  numel = 10069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8065e-01  +1.0857e+03  1.09e+03  4.33e-01  7.88e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3163e-01  +1.2249e+02  1.22e+02  1.70e-01  3.97e+01  1.63e-02  2.77e-01  9.33e-01  
  3  +5.0875e-01  +3.1844e+01  3.13e+01  1.23e-01  2.86e+01  4.51e-05  2.58e-01  2.81e-01  
  4  +5.0105e-01  +3.1637e+00  2.66e+00  1.81e-02  4.30e+00  5.82e-06  1.67e-01  6.02e-01  
  5  +5.0011e-01  +9.5831e-01  4.58e-01  3.08e-03  7.46e-01  3.87e-05  9.59e-02  9.90e-01  
  6  +5.0003e-01  +6.8768e-01  1.88e-01  1.26e-03  3.05e-01  2.37e-05  3.47e-02  6.90e-01  
  7  +4.9997e-01  +6.8378e-01  1.84e-01  1.18e-03  2.87e-01  5.02e-05  1.22e-02  7.12e-01  
  8  +4.9780e-01  +6.5590e-01  1.58e-01  1.23e-04  3.03e-02  1.11e-03  3.96e-04  9.90e-01  
  9  +4.9368e-01  +6.2671e-01  1.33e-01  4.80e-05  1.18e-02  2.04e-03  1.52e-04  6.46e-01  
 10  +4.9319e-01  +6.2034e-01  1.27e-01  4.25e-05  1.04e-02  1.60e-03  1.33e-04  2.97e-01  
 11  +4.9236e-01  +6.0785e-01  1.15e-01  3.80e-05  9.32e-03  9.23e-04  1.19e-04  3.68e-01  
 12  +4.8988e-01  +5.9011e-01  1.00e-01  2.98e-05  7.30e-03  5.64e-04  9.40e-05  4.36e-01  
 13  +4.8699e-01  +5.7086e-01  8.39e-02  2.40e-05  5.88e-03  3.11e-04  7.65e-05  3.99e-01  
 14  +4.8423e-01  +5.5276e-01  6.85e-02  1.88e-05  4.60e-03  9.49e-05  6.02e-05  6.11e-01  
 15  +4.7938e-01  +5.2812e-01  4.87e-02  1.23e-05  3.01e-03  6.02e-05  4.00e-05  3.96e-01  
 16  +4.7435e-01  +5.0245e-01  2.81e-02  6.34e-06  1.55e-03  6.67e-07  2.08e-05  9.66e-01  
 17  +4.6919e-01  +4.7904e-01  9.85e-03  2.11e-06  5.16e-04  4.04e-07  7.09e-06  8.67e-01  
 18  +4.6810e-01  +4.7397e-01  5.87e-03  1.25e-06  3.06e-04  3.25e-07  4.23e-06  9.90e-01  
 19  +4.6651e-01  +4.6728e-01  7.76e-04  1.64e-07  4.02e-05  4.18e-08  5.65e-07  8.82e-01  
 20  +4.6629e-01  +4.6640e-01  1.14e-04  2.41e-08  5.89e-06  6.16e-09  8.36e-08  8.87e-01  
 21  +4.6625e-01  +4.6625e-01  2.85e-06  5.98e-10  1.46e-07  1.54e-10  2.09e-09  9.80e-01  
 22  +4.6625e-01  +4.6625e-01  2.88e-08  6.03e-12  1.48e-09  1.56e-12  2.11e-11  9.90e-01  
 23  +4.6625e-01  +4.6625e-01  2.96e-10  6.20e-14  1.52e-11  1.73e-14  2.32e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 140.4273ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:10 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:10 PM: Optimal value: 4.663e-01
(CVXPY) Sep 20 08:01:10 PM: Compilation took 3.804e-02 seconds
(CVXPY) Sep 20 08:01:10 PM: Solver (including time spent in interface) took 1.498e-01 seconds
Iteration: 6, Objective: 0.4663
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:10 PM: Your problem has 5079 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:10 PM: Finished problem compilation (took 3.658e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5079
  constraints   = 10079
  nnz(P)        = 0
  nnz(A)        = 82509
  cones (total) = 1
    : Nonnegative = 1,  numel = 10079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8064e-01  +1.0856e+03  1.09e+03  4.33e-01  7.88e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3160e-01  +1.2243e+02  1.22e+02  1.70e-01  3.96e+01  1.63e-02  2.77e-01  9.33e-01  
  3  +5.0874e-01  +3.1815e+01  3.13e+01  1.23e-01  2.85e+01  4.51e-05  2.57e-01  2.82e-01  
  4  +5.0105e-01  +3.1589e+00  2.66e+00  1.81e-02  4.30e+00  5.82e-06  1.66e-01  6.03e-01  
  5  +5.0011e-01  +9.6446e-01  4.64e-01  3.13e-03  7.57e-01  3.88e-05  9.51e-02  9.90e-01  
  6  +5.0003e-01  +6.9845e-01  1.98e-01  1.33e-03  3.23e-01  2.52e-05  3.49e-02  6.82e-01  
  7  +5.0007e-01  +8.3775e-01  3.38e-01  2.16e-03  5.24e-01  3.28e-05  2.00e-02  9.90e-01  
  8  +4.9974e-01  +7.3185e-01  2.32e-01  5.59e-04  1.37e-01  1.73e-04  1.95e-03  9.07e-01  
  9  +4.9737e-01  +7.1256e-01  2.15e-01  8.27e-05  2.03e-02  1.16e-03  2.56e-04  8.70e-01  
 10  +4.9587e-01  +6.8202e-01  1.86e-01  7.09e-05  1.74e-02  8.37e-04  2.20e-04  2.40e-01  
 11  +4.9337e-01  +6.3778e-01  1.44e-01  4.87e-05  1.19e-02  4.27e-04  1.52e-04  5.43e-01  
 12  +4.9260e-01  +6.2398e-01  1.31e-01  4.41e-05  1.08e-02  2.59e-04  1.38e-04  3.29e-01  
 13  +4.9005e-01  +6.0173e-01  1.12e-01  3.46e-05  8.49e-03  1.24e-04  1.09e-04  5.08e-01  
 14  +4.8192e-01  +5.5409e-01  7.22e-02  1.91e-05  4.67e-03  5.83e-05  6.21e-05  5.73e-01  
 15  +4.7526e-01  +5.1945e-01  4.42e-02  1.06e-05  2.60e-03  2.82e-05  3.55e-05  5.26e-01  
 16  +4.7490e-01  +5.1633e-01  4.14e-02  9.89e-06  2.42e-03  1.55e-05  3.31e-05  4.45e-01  
 17  +4.7012e-01  +4.9331e-01  2.32e-02  5.23e-06  1.28e-03  5.18e-06  1.79e-05  6.91e-01  
 18  +4.6613e-01  +4.7466e-01  8.53e-03  1.88e-06  4.60e-04  1.81e-06  6.60e-06  6.42e-01  
 19  +4.6460e-01  +4.6755e-01  2.95e-03  6.42e-07  1.57e-04  5.81e-07  2.28e-06  6.88e-01  
 20  +4.6409e-01  +4.6524e-01  1.15e-03  2.47e-07  6.05e-05  1.80e-07  8.85e-07  7.25e-01  
 21  +4.6395e-01  +4.6466e-01  7.09e-04  1.46e-07  3.56e-05  5.11e-08  5.23e-07  9.15e-01  
 22  +4.6377e-01  +4.6396e-01  1.83e-04  3.55e-08  8.68e-06  1.37e-08  1.30e-07  7.86e-01  
 23  +4.6371e-01  +4.6373e-01  2.40e-05  4.45e-09  1.09e-06  1.35e-09  1.66e-08  9.90e-01  
 24  +4.6370e-01  +4.6370e-01  2.70e-07  4.99e-11  1.22e-08  1.52e-11  1.86e-10  9.89e-01  
 25  +4.6370e-01  +4.6370e-01  2.71e-09  5.00e-13  1.22e-10  1.52e-13  1.86e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 152.0911ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:10 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:10 PM: Optimal value: 4.637e-01
(CVXPY) Sep 20 08:01:10 PM: Compilation took 3.658e-02 seconds
(CVXPY) Sep 20 08:01:10 PM: Solver (including time spent in interface) took 1.624e-01 seconds
Iteration: 7, Objective: 0.4637
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:10 PM: Your problem has 5089 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:10 PM: Finished problem compilation (took 3.808e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5089
  constraints   = 10089
  nnz(P)        = 0
  nnz(A)        = 84022
  cones (total) = 1
    : Nonnegative = 1,  numel = 10089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.8060e-01  +1.0856e+03  1.08e+03  4.33e-01  7.88e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3156e-01  +1.2234e+02  1.22e+02  1.70e-01  3.95e+01  1.63e-02  2.76e-01  9.34e-01  
  3  +5.0873e-01  +3.1779e+01  3.13e+01  1.23e-01  2.85e+01  4.52e-05  2.57e-01  2.84e-01  
  4  +5.0105e-01  +3.1501e+00  2.65e+00  1.81e-02  4.28e+00  5.84e-06  1.66e-01  6.06e-01  
  5  +5.0011e-01  +9.8091e-01  4.81e-01  3.24e-03  7.84e-01  3.93e-05  9.35e-02  9.90e-01  
  6  +5.0003e-01  +7.2540e-01  2.25e-01  1.51e-03  3.67e-01  2.90e-05  3.52e-02  6.70e-01  
  7  +4.9996e-01  +8.1703e-01  3.17e-01  1.76e-03  4.29e-01  8.20e-05  1.00e-02  9.90e-01  
  8  +4.9730e-01  +7.4954e-01  2.52e-01  1.35e-04  3.32e-02  1.34e-03  4.19e-04  9.59e-01  
  9  +4.9417e-01  +6.8893e-01  1.95e-01  7.69e-05  1.89e-02  1.22e-03  2.39e-04  5.18e-01  
 10  +4.9420e-01  +6.7069e-01  1.76e-01  6.40e-05  1.57e-02  7.50e-04  1.97e-04  4.38e-01  
 11  +4.9341e-01  +6.4489e-01  1.51e-01  5.28e-05  1.30e-02  2.95e-04  1.63e-04  5.47e-01  
 12  +4.9166e-01  +6.2794e-01  1.36e-01  4.62e-05  1.13e-02  1.73e-04  1.43e-04  3.76e-01  
 13  +4.8959e-01  +6.1400e-01  1.24e-01  3.99e-05  9.79e-03  1.37e-04  1.25e-04  2.35e-01  
 14  +4.8532e-01  +5.8404e-01  9.87e-02  2.89e-05  7.08e-03  2.40e-05  9.16e-05  7.44e-01  
 15  +4.7913e-01  +5.5226e-01  7.31e-02  1.90e-05  4.66e-03  1.59e-05  6.14e-05  4.10e-01  
 16  +4.7385e-01  +5.2614e-01  5.23e-02  1.22e-05  2.99e-03  7.40e-06  4.00e-05  6.08e-01  
 17  +4.7033e-01  +5.0859e-01  3.83e-02  8.34e-06  2.04e-03  1.57e-06  2.77e-05  9.90e-01  
 18  +4.6256e-01  +4.7532e-01  1.28e-02  2.61e-06  6.37e-04  5.64e-07  8.97e-06  7.99e-01  
 19  +4.5970e-01  +4.6370e-01  4.00e-03  7.84e-07  1.92e-04  2.06e-07  2.78e-06  8.62e-01  
 20  +4.5904e-01  +4.6102e-01  1.98e-03  3.87e-07  9.47e-05  1.14e-07  1.39e-06  9.90e-01  
 21  +4.5833e-01  +4.5840e-01  7.29e-05  1.42e-08  3.46e-06  4.09e-09  5.12e-08  9.65e-01  
 22  +4.5830e-01  +4.5830e-01  7.31e-07  1.42e-10  3.47e-08  4.10e-11  5.14e-10  9.90e-01  
 23  +4.5830e-01  +4.5830e-01  7.31e-09  1.42e-12  3.47e-10  4.14e-13  5.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 149.8765ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:10 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:10 PM: Optimal value: 4.583e-01
(CVXPY) Sep 20 08:01:10 PM: Compilation took 3.808e-02 seconds
(CVXPY) Sep 20 08:01:10 PM: Solver (including time spent in interface) took 1.609e-01 seconds
Iteration: 8, Objective: 0.4583
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:11 PM: Your problem has 5099 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:11 PM: Finished problem compilation (took 4.157e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5099
  constraints   = 10099
  nnz(P)        = 0
  nnz(A)        = 86384
  cones (total) = 1
    : Nonnegative = 1,  numel = 10099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8055e-01  +1.0856e+03  1.08e+03  4.33e-01  7.88e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3150e-01  +1.2222e+02  1.22e+02  1.70e-01  3.95e+01  1.64e-02  2.76e-01  9.34e-01  
  3  +5.0871e-01  +3.1735e+01  3.12e+01  1.23e-01  2.85e+01  4.52e-05  2.57e-01  2.85e-01  
  4  +5.0105e-01  +3.1408e+00  2.64e+00  1.80e-02  4.28e+00  5.85e-06  1.65e-01  6.09e-01  
  5  +5.0013e-01  +1.0232e+00  5.23e-01  3.53e-03  8.55e-01  3.95e-05  9.40e-02  9.58e-01  
  6  +5.0003e-01  +7.3059e-01  2.31e-01  1.54e-03  3.76e-01  3.00e-05  3.26e-02  6.94e-01  
  7  +4.9978e-01  +7.3515e-01  2.35e-01  1.08e-03  2.63e-01  1.54e-04  4.80e-03  9.10e-01  
  8  +4.9626e-01  +7.1501e-01  2.19e-01  1.16e-04  2.85e-02  1.80e-03  3.57e-04  9.26e-01  
  9  +4.9569e-01  +6.8668e-01  1.91e-01  8.73e-05  2.15e-02  1.16e-03  2.67e-04  5.33e-01  
 10  +4.9434e-01  +6.6783e-01  1.73e-01  6.69e-05  1.65e-02  8.79e-04  2.04e-04  4.59e-01  
 11  +4.9342e-01  +6.5751e-01  1.64e-01  6.14e-05  1.51e-02  6.79e-04  1.88e-04  2.35e-01  
 12  +4.8974e-01  +6.3182e-01  1.42e-01  4.60e-05  1.13e-02  5.01e-04  1.42e-04  4.01e-01  
 13  +4.8241e-01  +5.8657e-01  1.04e-01  2.94e-05  7.21e-03  2.05e-04  9.30e-05  5.99e-01  
 14  +4.7747e-01  +5.6174e-01  8.43e-02  2.18e-05  5.35e-03  1.38e-04  7.03e-05  3.56e-01  
 15  +4.7356e-01  +5.4198e-01  6.84e-02  1.67e-05  4.11e-03  5.63e-05  5.47e-05  5.57e-01  
 16  +4.6759e-01  +5.1413e-01  4.65e-02  1.07e-05  2.63e-03  3.25e-05  3.58e-05  4.25e-01  
 17  +4.6057e-01  +4.8159e-01  2.10e-02  4.55e-06  1.12e-03  7.71e-06  1.57e-05  7.61e-01  
 18  +4.5685e-01  +4.6485e-01  8.00e-03  1.68e-06  4.12e-04  7.09e-07  5.92e-06  9.59e-01  
 19  +4.5483e-01  +4.5674e-01  1.91e-03  3.87e-07  9.51e-05  1.52e-07  1.42e-06  8.34e-01  
 20  +4.5442e-01  +4.5527e-01  8.55e-04  1.69e-07  4.15e-05  4.88e-08  6.38e-07  9.36e-01  
 21  +4.5411e-01  +4.5413e-01  2.24e-05  4.35e-09  1.07e-06  1.26e-09  1.67e-08  9.75e-01  
 22  +4.5410e-01  +4.5410e-01  2.24e-07  4.35e-11  1.07e-08  1.26e-11  1.67e-10  9.90e-01  
 23  +4.5410e-01  +4.5410e-01  2.24e-09  4.35e-13  1.07e-10  1.26e-13  1.67e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 164.7657ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:11 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:11 PM: Optimal value: 4.541e-01
(CVXPY) Sep 20 08:01:11 PM: Compilation took 4.157e-02 seconds
(CVXPY) Sep 20 08:01:11 PM: Solver (including time spent in interface) took 1.759e-01 seconds
Iteration: 9, Objective: 0.4541
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:11 PM: Your problem has 5109 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:11 PM: Finished problem compilation (took 4.557e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5109
  constraints   = 10109
  nnz(P)        = 0
  nnz(A)        = 88724
  cones (total) = 1
    : Nonnegative = 1,  numel = 10109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8050e-01  +1.0857e+03  1.09e+03  4.33e-01  7.89e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3145e-01  +1.2212e+02  1.22e+02  1.70e-01  3.95e+01  1.64e-02  2.76e-01  9.35e-01  
  3  +5.0870e-01  +3.1710e+01  3.12e+01  1.23e-01  2.85e+01  4.53e-05  2.57e-01  2.87e-01  
  4  +5.0105e-01  +3.1428e+00  2.64e+00  1.80e-02  4.29e+00  5.86e-06  1.64e-01  6.10e-01  
  5  +5.0013e-01  +1.0123e+00  5.12e-01  3.46e-03  8.39e-01  4.00e-05  9.19e-02  9.81e-01  
  6  +5.0004e-01  +7.7322e-01  2.73e-01  1.83e-03  4.46e-01  3.33e-05  3.71e-02  6.55e-01  
  7  +4.9981e-01  +7.4086e-01  2.41e-01  1.14e-03  2.80e-01  1.45e-04  5.27e-03  9.16e-01  
  8  +4.9547e-01  +7.1944e-01  2.24e-01  9.91e-05  2.44e-02  2.18e-03  3.04e-04  9.43e-01  
  9  +4.9233e-01  +6.9187e-01  2.00e-01  6.85e-05  1.69e-02  2.26e-03  2.12e-04  3.62e-01  
 10  +4.9047e-01  +6.7136e-01  1.81e-01  5.75e-05  1.42e-02  1.76e-03  1.78e-04  2.87e-01  
 11  +4.8840e-01  +6.4855e-01  1.60e-01  5.01e-05  1.23e-02  1.15e-03  1.56e-04  2.97e-01  
 12  +4.8426e-01  +6.1792e-01  1.34e-01  3.90e-05  9.59e-03  7.13e-04  1.24e-04  3.77e-01  
 13  +4.7787e-01  +5.8080e-01  1.03e-01  2.70e-05  6.63e-03  4.67e-04  8.76e-05  3.85e-01  
 14  +4.7368e-01  +5.5444e-01  8.08e-02  2.02e-05  4.96e-03  1.38e-04  6.65e-05  6.28e-01  
 15  +4.6413e-01  +5.0788e-01  4.38e-02  9.87e-06  2.42e-03  4.34e-05  3.38e-05  6.71e-01  
 16  +4.5930e-01  +4.8496e-01  2.57e-02  5.48e-06  1.35e-03  9.82e-06  1.92e-05  7.87e-01  
 17  +4.5473e-01  +4.6525e-01  1.05e-02  2.14e-06  5.26e-04  8.55e-07  7.77e-06  9.70e-01  
 18  +4.5240e-01  +4.5605e-01  3.65e-03  7.32e-07  1.80e-04  2.86e-07  2.74e-06  6.75e-01  
 19  +4.5132e-01  +4.5179e-01  4.68e-04  9.33e-08  2.29e-05  2.57e-08  3.55e-07  9.90e-01  
 20  +4.5115e-01  +4.5116e-01  5.23e-06  1.04e-09  2.56e-07  2.85e-10  3.98e-09  9.89e-01  
 21  +4.5115e-01  +4.5115e-01  5.23e-08  1.04e-11  2.56e-09  2.85e-12  3.98e-11  9.90e-01  
 22  +4.5115e-01  +4.5115e-01  5.23e-10  1.04e-13  2.56e-11  2.88e-14  4.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 166.8701ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:11 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:11 PM: Optimal value: 4.512e-01
(CVXPY) Sep 20 08:01:11 PM: Compilation took 4.557e-02 seconds
(CVXPY) Sep 20 08:01:11 PM: Solver (including time spent in interface) took 1.793e-01 seconds
Iteration: 10, Objective: 0.4512
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:11 PM: Your problem has 5119 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:11 PM: Finished problem compilation (took 4.866e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5119
  constraints   = 10119
  nnz(P)        = 0
  nnz(A)        = 89908
  cones (total) = 1
    : Nonnegative = 1,  numel = 10119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8042e-01  +1.0859e+03  1.09e+03  4.34e-01  7.89e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3139e-01  +1.2202e+02  1.21e+02  1.70e-01  3.94e+01  1.64e-02  2.76e-01  9.36e-01  
  3  +5.0868e-01  +3.1683e+01  3.12e+01  1.23e-01  2.84e+01  4.53e-05  2.56e-01  2.88e-01  
  4  +5.0105e-01  +3.1416e+00  2.64e+00  1.80e-02  4.29e+00  5.87e-06  1.64e-01  6.12e-01  
  5  +5.0013e-01  +1.0189e+00  5.19e-01  3.50e-03  8.50e-01  4.05e-05  9.02e-02  9.90e-01  
  6  +5.0003e-01  +7.6005e-01  2.60e-01  1.74e-03  4.24e-01  3.52e-05  3.19e-02  7.02e-01  
  7  +4.9964e-01  +7.6944e-01  2.70e-01  9.64e-04  2.37e-01  2.32e-04  3.69e-03  9.49e-01  
  8  +4.9478e-01  +7.4017e-01  2.45e-01  9.88e-05  2.44e-02  2.42e-03  3.01e-04  9.19e-01  
  9  +4.9232e-01  +7.1251e-01  2.20e-01  7.57e-05  1.86e-02  2.17e-03  2.33e-04  3.15e-01  
 10  +4.9195e-01  +6.8640e-01  1.94e-01  6.92e-05  1.70e-02  1.16e-03  2.12e-04  3.51e-01  
 11  +4.8786e-01  +6.5532e-01  1.67e-01  5.10e-05  1.26e-02  9.39e-04  1.58e-04  3.53e-01  
 12  +4.8447e-01  +6.2610e-01  1.42e-01  4.19e-05  1.03e-02  4.66e-04  1.32e-04  4.22e-01  
 13  +4.8003e-01  +5.9738e-01  1.17e-01  3.25e-05  8.00e-03  2.41e-04  1.05e-04  4.47e-01  
 14  +4.7335e-01  +5.5731e-01  8.40e-02  2.16e-05  5.29e-03  1.32e-05  7.11e-05  8.28e-01  
 15  +4.6180e-01  +5.0245e-01  4.06e-02  9.29e-06  2.28e-03  4.16e-06  3.21e-05  7.05e-01  
 16  +4.5591e-01  +4.7620e-01  2.03e-02  4.38e-06  1.08e-03  1.93e-06  1.57e-05  5.71e-01  
 17  +4.5556e-01  +4.7476e-01  1.92e-02  4.10e-06  1.01e-03  1.81e-06  1.47e-05  9.96e-02  
 18  +4.5499e-01  +4.7197e-01  1.70e-02  3.55e-06  8.72e-04  1.21e-06  1.27e-05  6.10e-01  
 19  +4.5305e-01  +4.6414e-01  1.11e-02  2.27e-06  5.57e-04  7.66e-07  8.29e-06  4.48e-01  
 20  +4.5026e-01  +4.5292e-01  2.66e-03  5.33e-07  1.31e-04  1.72e-07  2.02e-06  8.08e-01  
 21  +4.4940e-01  +4.4953e-01  1.29e-04  2.56e-08  6.30e-06  6.81e-09  9.86e-08  9.90e-01  
 22  +4.4935e-01  +4.4935e-01  1.31e-06  2.62e-10  6.43e-08  6.94e-11  1.01e-09  9.90e-01  
 23  +4.4935e-01  +4.4935e-01  1.31e-08  2.62e-12  6.43e-10  6.94e-13  1.01e-11  9.90e-01  
 24  +4.4935e-01  +4.4935e-01  1.31e-10  2.62e-14  6.43e-12  7.01e-15  1.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 198.6694ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:12 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:12 PM: Optimal value: 4.494e-01
(CVXPY) Sep 20 08:01:12 PM: Compilation took 4.866e-02 seconds
(CVXPY) Sep 20 08:01:12 PM: Solver (including time spent in interface) took 2.123e-01 seconds
Iteration: 11, Objective: 0.4494
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:12 PM: Your problem has 5129 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:12 PM: Finished problem compilation (took 4.862e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5129
  constraints   = 10129
  nnz(P)        = 0
  nnz(A)        = 91313
  cones (total) = 1
    : Nonnegative = 1,  numel = 10129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8040e-01  +1.0858e+03  1.09e+03  4.34e-01  7.89e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3137e-01  +1.2197e+02  1.21e+02  1.70e-01  3.94e+01  1.64e-02  2.76e-01  9.36e-01  
  3  +5.0868e-01  +3.1665e+01  3.12e+01  1.23e-01  2.84e+01  4.53e-05  2.56e-01  2.89e-01  
  4  +5.0104e-01  +3.1385e+00  2.64e+00  1.80e-02  4.29e+00  5.88e-06  1.63e-01  6.13e-01  
  5  +5.0013e-01  +1.0259e+00  5.26e-01  3.55e-03  8.62e-01  4.08e-05  8.96e-02  9.90e-01  
  6  +5.0003e-01  +7.6937e-01  2.69e-01  1.80e-03  4.39e-01  3.67e-05  3.16e-02  7.05e-01  
  7  +4.9959e-01  +7.7651e-01  2.77e-01  9.06e-04  2.23e-01  2.61e-04  3.35e-03  9.57e-01  
  8  +4.9479e-01  +7.4114e-01  2.46e-01  1.00e-04  2.47e-02  2.38e-03  3.05e-04  9.15e-01  
  9  +4.9354e-01  +7.1905e-01  2.26e-01  8.27e-05  2.04e-02  1.88e-03  2.52e-04  3.25e-01  
 10  +4.9228e-01  +6.7782e-01  1.86e-01  6.50e-05  1.60e-02  5.72e-04  1.98e-04  6.41e-01  
 11  +4.8969e-01  +6.5815e-01  1.68e-01  5.41e-05  1.33e-02  4.32e-04  1.66e-04  3.13e-01  
 12  +4.8529e-01  +6.2682e-01  1.42e-01  4.28e-05  1.05e-02  1.94e-04  1.34e-04  4.95e-01  
 13  +4.8064e-01  +6.0095e-01  1.20e-01  3.36e-05  8.26e-03  1.27e-04  1.07e-04  3.63e-01  
 14  +4.7344e-01  +5.6133e-01  8.79e-02  2.25e-05  5.53e-03  1.35e-06  7.37e-05  8.72e-01  
 15  +4.6599e-01  +5.2673e-01  6.07e-02  1.44e-05  3.53e-03  1.23e-06  4.84e-05  4.56e-01  
 16  +4.5681e-01  +4.8514e-01  2.83e-02  6.14e-06  1.51e-03  7.99e-07  2.15e-05  6.90e-01  
 17  +4.5474e-01  +4.7624e-01  2.15e-02  4.49e-06  1.10e-03  7.18e-07  1.59e-05  4.07e-01  
 18  +4.5399e-01  +4.7242e-01  1.84e-02  3.77e-06  9.27e-04  9.26e-07  1.36e-05  8.58e-01  
 19  +4.5362e-01  +4.7084e-01  1.72e-02  3.51e-06  8.62e-04  8.94e-07  1.26e-05  3.15e-01  
 20  +4.5064e-01  +4.5904e-01  8.40e-03  1.67e-06  4.11e-04  4.45e-07  6.18e-06  6.10e-01  
 21  +4.4869e-01  +4.5170e-01  3.01e-03  5.83e-07  1.43e-04  1.61e-07  2.21e-06  7.74e-01  
 22  +4.4779e-01  +4.4832e-01  5.26e-04  1.01e-07  2.48e-05  2.79e-08  3.89e-07  8.53e-01  
 23  +4.4764e-01  +4.4775e-01  1.10e-04  2.10e-08  5.16e-06  5.94e-09  8.13e-08  9.90e-01  
 24  +4.4760e-01  +4.4760e-01  1.11e-06  2.12e-10  5.21e-08  6.00e-11  8.21e-10  9.90e-01  
 25  +4.4760e-01  +4.4760e-01  1.11e-08  2.12e-12  5.21e-10  6.00e-13  8.21e-12  9.90e-01  
 26  +4.4760e-01  +4.4760e-01  1.11e-10  2.12e-14  5.21e-12  6.16e-15  8.42e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 205.3402ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:12 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:12 PM: Optimal value: 4.476e-01
(CVXPY) Sep 20 08:01:12 PM: Compilation took 4.862e-02 seconds
(CVXPY) Sep 20 08:01:12 PM: Solver (including time spent in interface) took 2.183e-01 seconds
Iteration: 12, Objective: 0.4476
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:12 PM: Your problem has 5139 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:12 PM: Finished problem compilation (took 4.959e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5139
  constraints   = 10139
  nnz(P)        = 0
  nnz(A)        = 93383
  cones (total) = 1
    : Nonnegative = 1,  numel = 10139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8037e-01  +1.0858e+03  1.09e+03  4.34e-01  7.90e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3134e-01  +1.2192e+02  1.21e+02  1.70e-01  3.93e+01  1.64e-02  2.76e-01  9.37e-01  
  3  +5.0867e-01  +3.1649e+01  3.11e+01  1.23e-01  2.84e+01  4.54e-05  2.56e-01  2.90e-01  
  4  +5.0104e-01  +3.1372e+00  2.64e+00  1.80e-02  4.29e+00  5.89e-06  1.63e-01  6.14e-01  
  5  +5.0014e-01  +1.0476e+00  5.47e-01  3.70e-03  8.99e-01  4.05e-05  9.05e-02  9.68e-01  
  6  +5.0005e-01  +8.0645e-01  3.06e-01  2.06e-03  5.01e-01  3.62e-05  3.77e-02  6.19e-01  
  7  +4.9974e-01  +7.7452e-01  2.75e-01  1.10e-03  2.70e-01  1.85e-04  4.38e-03  9.75e-01  
  8  +4.9552e-01  +7.4868e-01  2.53e-01  1.10e-04  2.72e-02  2.11e-03  3.32e-04  9.25e-01  
  9  +4.9257e-01  +7.1588e-01  2.23e-01  7.74e-05  1.91e-02  1.99e-03  2.35e-04  3.81e-01  
 10  +4.9216e-01  +6.9169e-01  2.00e-01  6.93e-05  1.71e-02  1.13e-03  2.10e-04  3.77e-01  
 11  +4.9109e-01  +6.7994e-01  1.89e-01  6.48e-05  1.60e-02  9.20e-04  1.97e-04  1.67e-01  
 12  +4.9077e-01  +6.6820e-01  1.77e-01  6.20e-05  1.53e-02  4.96e-04  1.89e-04  3.54e-01  
 13  +4.8372e-01  +6.2624e-01  1.43e-01  4.06e-05  1.00e-02  4.18e-04  1.27e-04  3.75e-01  
 14  +4.7715e-01  +5.8747e-01  1.10e-01  2.92e-05  7.19e-03  1.82e-04  9.32e-05  5.16e-01  
 15  +4.6825e-01  +5.4176e-01  7.35e-02  1.76e-05  4.33e-03  7.12e-05  5.78e-05  5.91e-01  
 16  +4.6312e-01  +5.1778e-01  5.47e-02  1.24e-05  3.04e-03  4.69e-05  4.11e-05  3.68e-01  
 17  +4.6005e-01  +5.0383e-01  4.38e-02  9.41e-06  2.31e-03  2.76e-05  3.15e-05  4.45e-01  
 18  +4.5594e-01  +4.8614e-01  3.02e-02  6.21e-06  1.53e-03  1.74e-05  2.12e-05  3.92e-01  
 19  +4.5467e-01  +4.8072e-01  2.60e-02  5.27e-06  1.30e-03  1.37e-05  1.80e-05  2.36e-01  
 20  +4.5101e-01  +4.6454e-01  1.35e-02  2.62e-06  6.45e-04  8.70e-07  9.11e-06  9.90e-01  
 21  +4.4702e-01  +4.4923e-01  2.21e-03  4.20e-07  1.03e-04  1.28e-07  1.50e-06  9.88e-01  
 22  +4.4623e-01  +4.4629e-01  6.68e-05  1.27e-08  3.12e-06  3.84e-09  4.56e-08  9.88e-01  
 23  +4.4620e-01  +4.4620e-01  6.71e-07  1.27e-10  3.13e-08  3.86e-11  4.57e-10  9.90e-01  
 24  +4.4620e-01  +4.4620e-01  6.71e-09  1.27e-12  3.13e-10  3.86e-13  4.58e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 193.8912ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:12 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:12 PM: Optimal value: 4.462e-01
(CVXPY) Sep 20 08:01:12 PM: Compilation took 4.959e-02 seconds
(CVXPY) Sep 20 08:01:12 PM: Solver (including time spent in interface) took 2.069e-01 seconds
Iteration: 13, Objective: 0.4462
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:13 PM: Your problem has 5149 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:13 PM: Finished problem compilation (took 4.911e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5149
  constraints   = 10149
  nnz(P)        = 0
  nnz(A)        = 94787
  cones (total) = 1
    : Nonnegative = 1,  numel = 10149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8028e-01  +1.0860e+03  1.09e+03  4.34e-01  7.90e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3128e-01  +1.2183e+02  1.21e+02  1.70e-01  3.93e+01  1.64e-02  2.76e-01  9.37e-01  
  3  +5.0866e-01  +3.1636e+01  3.11e+01  1.23e-01  2.84e+01  4.55e-05  2.56e-01  2.91e-01  
  4  +5.0105e-01  +3.1423e+00  2.64e+00  1.81e-02  4.30e+00  5.90e-06  1.63e-01  6.14e-01  
  5  +5.0020e-01  +1.1945e+00  6.94e-01  4.70e-03  1.14e+00  3.87e-05  1.01e-01  8.17e-01  
  6  +5.0007e-01  +8.3482e-01  3.35e-01  2.25e-03  5.48e-01  3.13e-05  4.29e-02  6.29e-01  
  7  +4.9993e-01  +8.0526e-01  3.05e-01  1.63e-03  4.00e-01  9.72e-05  8.39e-03  8.96e-01  
  8  +4.9706e-01  +7.7796e-01  2.81e-01  1.57e-04  3.87e-02  1.44e-03  4.73e-04  9.47e-01  
  9  +4.9451e-01  +7.4219e-01  2.48e-01  1.03e-04  2.54e-02  1.53e-03  3.11e-04  4.14e-01  
 10  +4.9266e-01  +7.1987e-01  2.27e-01  7.84e-05  1.94e-02  1.37e-03  2.37e-04  3.63e-01  
 11  +4.9204e-01  +7.0210e-01  2.10e-01  7.55e-05  1.87e-02  9.71e-04  2.29e-04  1.85e-01  
 12  +4.9138e-01  +6.9450e-01  2.03e-01  7.21e-05  1.78e-02  8.66e-04  2.19e-04  1.08e-01  
 13  +4.8920e-01  +6.6282e-01  1.74e-01  5.95e-05  1.47e-02  2.77e-04  1.82e-04  5.87e-01  
 14  +4.8352e-01  +6.2205e-01  1.39e-01  4.14e-05  1.02e-02  1.00e-05  1.30e-04  8.83e-01  
 15  +4.7477e-01  +5.7840e-01  1.04e-01  2.70e-05  6.66e-03  6.93e-06  8.75e-05  4.32e-01  
 16  +4.6153e-01  +5.1539e-01  5.39e-02  1.23e-05  3.03e-03  2.46e-06  4.19e-05  7.91e-01  
 17  +4.5636e-01  +4.9327e-01  3.69e-02  7.93e-06  1.95e-03  1.73e-06  2.78e-05  5.70e-01  
 18  +4.5363e-01  +4.8147e-01  2.78e-02  5.82e-06  1.43e-03  1.36e-06  2.07e-05  5.25e-01  
 19  +4.5251e-01  +4.7673e-01  2.42e-02  5.01e-06  1.23e-03  1.21e-06  1.80e-05  2.73e-01  
 20  +4.4701e-01  +4.5398e-01  6.97e-03  1.39e-06  3.43e-04  3.72e-07  5.22e-06  9.90e-01  
 21  +4.4563e-01  +4.4862e-01  2.98e-03  5.85e-07  1.44e-04  1.65e-07  2.22e-06  6.93e-01  
 22  +4.4557e-01  +4.4837e-01  2.80e-03  5.60e-07  1.38e-04  1.45e-07  2.19e-06  7.75e-02  
 23  +4.4554e-01  +4.4825e-01  2.71e-03  5.42e-07  1.33e-04  1.41e-07  2.12e-06  1.31e-01  
 24  +4.4537e-01  +4.4765e-01  2.28e-03  4.48e-07  1.10e-04  1.23e-07  1.72e-06  3.84e-01  
 25  +4.4488e-01  +4.4591e-01  1.03e-03  1.99e-07  4.90e-05  5.56e-08  7.66e-07  6.17e-01  
 26  +4.4451e-01  +4.4452e-01  1.67e-05  3.21e-09  7.91e-07  8.84e-10  1.25e-08  9.85e-01  
 27  +4.4450e-01  +4.4450e-01  1.67e-07  3.21e-11  7.92e-09  8.84e-12  1.25e-10  9.90e-01  
 28  +4.4450e-01  +4.4450e-01  1.67e-09  3.21e-13  7.92e-11  9.00e-14  1.27e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 215.5201ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:13 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:13 PM: Optimal value: 4.445e-01
(CVXPY) Sep 20 08:01:13 PM: Compilation took 4.911e-02 seconds
(CVXPY) Sep 20 08:01:13 PM: Solver (including time spent in interface) took 2.287e-01 seconds
Iteration: 14, Objective: 0.4445
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:13 PM: Your problem has 5159 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:13 PM: Finished problem compilation (took 4.750e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5159
  constraints   = 10159
  nnz(P)        = 0
  nnz(A)        = 95741
  cones (total) = 1
    : Nonnegative = 1,  numel = 10159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8024e-01  +1.0860e+03  1.09e+03  4.34e-01  7.89e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3124e-01  +1.2174e+02  1.21e+02  1.70e-01  3.92e+01  1.64e-02  2.76e-01  9.38e-01  
  3  +5.0865e-01  +3.1608e+01  3.11e+01  1.23e-01  2.83e+01  4.55e-05  2.55e-01  2.92e-01  
  4  +5.0105e-01  +3.1412e+00  2.64e+00  1.81e-02  4.30e+00  5.90e-06  1.62e-01  6.15e-01  
  5  +5.0017e-01  +1.1249e+00  6.25e-01  4.23e-03  1.03e+00  4.04e-05  9.46e-02  9.01e-01  
  6  +5.0006e-01  +8.3165e-01  3.32e-01  2.23e-03  5.42e-01  3.59e-05  3.78e-02  6.68e-01  
  7  +4.9979e-01  +7.9774e-01  2.98e-01  1.27e-03  3.13e-01  1.63e-04  5.27e-03  9.22e-01  
  8  +4.9610e-01  +7.7169e-01  2.76e-01  1.33e-04  3.29e-02  1.84e-03  4.03e-04  9.24e-01  
  9  +4.9373e-01  +7.4047e-01  2.47e-01  9.81e-05  2.42e-02  1.75e-03  2.97e-04  3.42e-01  
 10  +4.9268e-01  +7.2342e-01  2.31e-01  8.09e-05  2.00e-02  1.44e-03  2.45e-04  3.38e-01  
 11  +4.9180e-01  +6.8885e-01  1.97e-01  7.27e-05  1.80e-02  4.53e-04  2.20e-04  5.22e-01  
 12  +4.9058e-01  +6.8020e-01  1.90e-01  6.72e-05  1.66e-02  4.08e-04  2.04e-04  1.39e-01  
 13  +4.8846e-01  +6.5744e-01  1.69e-01  5.75e-05  1.42e-02  8.81e-05  1.77e-04  6.76e-01  
 14  +4.8236e-01  +6.2408e-01  1.42e-01  4.12e-05  1.02e-02  7.05e-05  1.29e-04  3.48e-01  
 15  +4.7749e-01  +5.9637e-01  1.19e-01  3.29e-05  8.11e-03  1.13e-05  1.05e-04  7.41e-01  
 16  +4.6464e-01  +5.3457e-01  6.99e-02  1.65e-05  4.06e-03  5.61e-06  5.54e-05  5.87e-01  
 17  +4.5997e-01  +5.1346e-01  5.35e-02  1.20e-05  2.95e-03  3.93e-06  4.08e-05  4.05e-01  
 18  +4.5600e-01  +4.9505e-01  3.90e-02  8.10e-06  1.99e-03  2.01e-06  2.79e-05  9.90e-01  
 19  +4.5202e-01  +4.7859e-01  2.66e-02  5.37e-06  1.32e-03  1.39e-06  1.88e-05  4.03e-01  
 20  +4.5018e-01  +4.7024e-01  2.01e-02  3.99e-06  9.81e-04  1.14e-06  1.40e-05  9.90e-01  
 21  +4.4868e-01  +4.6443e-01  1.57e-02  3.11e-06  7.63e-04  8.98e-07  1.10e-05  2.60e-01  
 22  +4.4609e-01  +4.5430e-01  8.21e-03  1.60e-06  3.93e-04  4.72e-07  5.76e-06  7.31e-01  
 23  +4.4351e-01  +4.4447e-01  9.62e-04  1.85e-07  4.56e-05  5.46e-08  6.80e-07  9.36e-01  
 24  +4.4319e-01  +4.4329e-01  9.89e-05  1.90e-08  4.68e-06  5.61e-09  7.00e-08  9.02e-01  
 25  +4.4315e-01  +4.4315e-01  9.97e-07  1.92e-10  4.72e-08  5.66e-11  7.06e-10  9.90e-01  
 26  +4.4315e-01  +4.4315e-01  9.97e-09  1.92e-12  4.72e-10  5.69e-13  7.11e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 199.2423ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:13 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:13 PM: Optimal value: 4.432e-01
(CVXPY) Sep 20 08:01:13 PM: Compilation took 4.750e-02 seconds
(CVXPY) Sep 20 08:01:13 PM: Solver (including time spent in interface) took 2.115e-01 seconds
Iteration: 15, Objective: 0.4432
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:14 PM: Your problem has 5169 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:14 PM: Finished problem compilation (took 4.777e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5169
  constraints   = 10169
  nnz(P)        = 0
  nnz(A)        = 96553
  cones (total) = 1
    : Nonnegative = 1,  numel = 10169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8021e-01  +1.0860e+03  1.09e+03  4.35e-01  7.89e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3122e-01  +1.2170e+02  1.21e+02  1.70e-01  3.92e+01  1.64e-02  2.75e-01  9.38e-01  
  3  +5.0865e-01  +3.1597e+01  3.11e+01  1.22e-01  2.83e+01  4.55e-05  2.55e-01  2.93e-01  
  4  +5.0104e-01  +3.1397e+00  2.64e+00  1.81e-02  4.30e+00  5.91e-06  1.62e-01  6.16e-01  
  5  +5.0019e-01  +1.1651e+00  6.65e-01  4.51e-03  1.09e+00  4.02e-05  9.65e-02  8.70e-01  
  6  +5.0005e-01  +8.0851e-01  3.08e-01  2.07e-03  5.04e-01  3.51e-05  3.42e-02  7.03e-01  
  7  +4.9966e-01  +8.1089e-01  3.11e-01  1.04e-03  2.56e-01  2.32e-04  3.82e-03  9.46e-01  
  8  +4.9557e-01  +7.8008e-01  2.85e-01  1.26e-04  3.11e-02  2.01e-03  3.78e-04  9.02e-01  
  9  +4.9284e-01  +7.4053e-01  2.48e-01  9.25e-05  2.28e-02  1.69e-03  2.80e-04  3.72e-01  
 10  +4.9233e-01  +7.2585e-01  2.34e-01  8.02e-05  1.98e-02  1.31e-03  2.42e-04  3.19e-01  
 11  +4.9143e-01  +6.9632e-01  2.05e-01  7.63e-05  1.88e-02  5.65e-04  2.31e-04  3.75e-01  
 12  +4.8392e-01  +6.4669e-01  1.63e-01  4.74e-05  1.17e-02  4.33e-04  1.47e-04  4.79e-01  
 13  +4.8217e-01  +6.3390e-01  1.52e-01  4.42e-05  1.09e-02  2.80e-04  1.38e-04  2.74e-01  
 14  +4.7059e-01  +5.7007e-01  9.95e-02  2.51e-05  6.16e-03  1.04e-04  8.20e-05  6.16e-01  
 15  +4.6444e-01  +5.3849e-01  7.40e-02  1.73e-05  4.25e-03  1.73e-05  5.76e-05  7.94e-01  
 16  +4.6066e-01  +5.2151e-01  6.08e-02  1.37e-05  3.36e-03  1.27e-05  4.63e-05  2.97e-01  
 17  +4.5544e-01  +4.9733e-01  4.19e-02  8.78e-06  2.16e-03  1.95e-06  3.03e-05  9.90e-01  
 18  +4.4810e-01  +4.6686e-01  1.88e-02  3.78e-06  9.29e-04  8.93e-07  1.35e-05  6.42e-01  
 19  +4.4762e-01  +4.6472e-01  1.71e-02  3.44e-06  8.45e-04  8.33e-07  1.23e-05  2.24e-01  
 20  +4.4764e-01  +4.6474e-01  1.71e-02  3.42e-06  8.41e-04  8.48e-07  1.23e-05  8.93e-02  
 21  +4.4516e-01  +4.5479e-01  9.63e-03  1.90e-06  4.68e-04  4.91e-07  6.92e-06  5.61e-01  
 22  +4.4271e-01  +4.4521e-01  2.50e-03  4.88e-07  1.20e-04  1.30e-07  1.81e-06  7.91e-01  
 23  +4.4199e-01  +4.4246e-01  4.71e-04  9.01e-08  2.21e-05  2.59e-08  3.40e-07  9.49e-01  
 24  +4.4180e-01  +4.4181e-01  8.12e-06  1.54e-09  3.79e-07  4.49e-10  5.87e-09  9.86e-01  
 25  +4.4180e-01  +4.4180e-01  8.14e-08  1.54e-11  3.79e-09  4.50e-12  5.88e-11  9.90e-01  
 26  +4.4180e-01  +4.4180e-01  8.15e-10  1.54e-13  3.80e-11  4.77e-14  6.22e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 197.6637ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:14 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:14 PM: Optimal value: 4.418e-01
(CVXPY) Sep 20 08:01:14 PM: Compilation took 4.777e-02 seconds
(CVXPY) Sep 20 08:01:14 PM: Solver (including time spent in interface) took 2.102e-01 seconds
Iteration: 16, Objective: 0.4418
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:14 PM: Your problem has 5179 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:14 PM: Finished problem compilation (took 4.758e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5179
  constraints   = 10179
  nnz(P)        = 0
  nnz(A)        = 97439
  cones (total) = 1
    : Nonnegative = 1,  numel = 10179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8017e-01  +1.0860e+03  1.09e+03  4.35e-01  7.88e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3120e-01  +1.2167e+02  1.21e+02  1.70e-01  3.91e+01  1.64e-02  2.75e-01  9.38e-01  
  3  +5.0864e-01  +3.1590e+01  3.11e+01  1.22e-01  2.82e+01  4.55e-05  2.55e-01  2.93e-01  
  4  +5.0104e-01  +3.1397e+00  2.64e+00  1.81e-02  4.30e+00  5.91e-06  1.62e-01  6.16e-01  
  5  +5.0018e-01  +1.1534e+00  6.53e-01  4.43e-03  1.07e+00  4.08e-05  9.46e-02  8.89e-01  
  6  +5.0007e-01  +8.6259e-01  3.63e-01  2.43e-03  5.93e-01  3.80e-05  3.96e-02  6.24e-01  
  7  +4.9975e-01  +8.2153e-01  3.22e-01  1.24e-03  3.04e-01  1.88e-04  4.81e-03  9.57e-01  
  8  +4.9615e-01  +7.9173e-01  2.96e-01  1.44e-04  3.57e-02  1.78e-03  4.37e-04  9.11e-01  
  9  +4.9297e-01  +7.3597e-01  2.43e-01  9.79e-05  2.42e-02  1.36e-03  2.97e-04  4.63e-01  
 10  +4.9306e-01  +7.2367e-01  2.31e-01  8.38e-05  2.07e-02  8.89e-04  2.53e-04  4.45e-01  
 11  +4.9242e-01  +7.1073e-01  2.18e-01  8.27e-05  2.04e-02  6.75e-04  2.50e-04  1.40e-01  
 12  +4.8858e-01  +6.7808e-01  1.90e-01  6.37e-05  1.57e-02  4.58e-04  1.95e-04  4.11e-01  
 13  +4.8386e-01  +6.4947e-01  1.66e-01  4.95e-05  1.22e-02  3.77e-04  1.54e-04  2.84e-01  
 14  +4.7895e-01  +6.2002e-01  1.41e-01  3.93e-05  9.67e-03  2.21e-04  1.24e-04  3.99e-01  
 15  +4.6914e-01  +5.6418e-01  9.50e-02  2.38e-05  5.85e-03  2.37e-06  7.83e-05  8.71e-01  
 16  +4.5775e-01  +5.1098e-01  5.32e-02  1.20e-05  2.96e-03  1.49e-06  4.14e-05  5.80e-01  
 17  +4.5431e-01  +4.9582e-01  4.15e-02  9.02e-06  2.21e-03  1.36e-06  3.14e-05  4.01e-01  
 18  +4.5009e-01  +4.7647e-01  2.64e-02  5.40e-06  1.33e-03  1.39e-06  1.91e-05  9.90e-01  
 19  +4.4514e-01  +4.5629e-01  1.11e-02  2.22e-06  5.45e-04  6.23e-07  8.07e-06  9.90e-01  
 20  +4.4485e-01  +4.5515e-01  1.03e-02  2.04e-06  5.01e-04  5.78e-07  7.43e-06  1.31e-01  
 21  +4.4379e-01  +4.5083e-01  7.03e-03  1.38e-06  3.40e-04  3.96e-07  5.07e-06  9.37e-01  
 22  +4.4197e-01  +4.4404e-01  2.07e-03  4.02e-07  9.86e-05  1.15e-07  1.50e-06  8.26e-01  
 23  +4.4125e-01  +4.4138e-01  1.29e-04  2.50e-08  6.13e-06  7.17e-09  9.38e-08  9.55e-01  
 24  +4.4120e-01  +4.4120e-01  1.32e-06  2.55e-10  6.27e-08  7.34e-11  9.60e-10  9.90e-01  
 25  +4.4120e-01  +4.4120e-01  1.32e-08  2.55e-12  6.27e-10  7.34e-13  9.60e-12  9.90e-01  
 26  +4.4120e-01  +4.4120e-01  1.38e-10  2.66e-14  6.52e-12  7.71e-15  1.01e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 242.5008ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:14 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:14 PM: Optimal value: 4.412e-01
(CVXPY) Sep 20 08:01:14 PM: Compilation took 4.758e-02 seconds
(CVXPY) Sep 20 08:01:14 PM: Solver (including time spent in interface) took 2.546e-01 seconds
Iteration: 17, Objective: 0.4412
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:14 PM: Your problem has 5189 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:15 PM: Finished problem compilation (took 7.064e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5189
  constraints   = 10189
  nnz(P)        = 0
  nnz(A)        = 98903
  cones (total) = 1
    : Nonnegative = 1,  numel = 10189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8014e-01  +1.0859e+03  1.09e+03  4.35e-01  7.88e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3119e-01  +1.2163e+02  1.21e+02  1.70e-01  3.90e+01  1.64e-02  2.75e-01  9.39e-01  
  3  +5.0864e-01  +3.1576e+01  3.11e+01  1.22e-01  2.82e+01  4.56e-05  2.55e-01  2.94e-01  
  4  +5.0104e-01  +3.1385e+00  2.64e+00  1.81e-02  4.30e+00  5.92e-06  1.61e-01  6.17e-01  
  5  +5.0018e-01  +1.1554e+00  6.55e-01  4.44e-03  1.08e+00  4.11e-05  9.39e-02  8.94e-01  
  6  +5.0006e-01  +8.5497e-01  3.55e-01  2.38e-03  5.79e-01  3.92e-05  3.60e-02  6.95e-01  
  7  +4.9960e-01  +8.2222e-01  3.23e-01  9.77e-04  2.40e-01  2.60e-04  3.47e-03  9.66e-01  
  8  +4.9558e-01  +7.8930e-01  2.94e-01  1.31e-04  3.23e-02  1.97e-03  3.94e-04  8.87e-01  
  9  +4.9315e-01  +7.5111e-01  2.58e-01  1.00e-04  2.47e-02  1.60e-03  3.02e-04  3.53e-01  
 10  +4.9250e-01  +7.3653e-01  2.44e-01  8.38e-05  2.07e-02  1.26e-03  2.52e-04  3.64e-01  
 11  +4.9183e-01  +7.2487e-01  2.33e-01  7.71e-05  1.90e-02  1.01e-03  2.33e-04  2.20e-01  
 12  +4.8791e-01  +6.6674e-01  1.79e-01  6.28e-05  1.55e-02  9.37e-06  1.93e-04  7.54e-01  
 13  +4.8129e-01  +6.3058e-01  1.49e-01  4.40e-05  1.08e-02  7.72e-06  1.38e-04  4.38e-01  
 14  +4.7849e-01  +6.1563e-01  1.37e-01  3.92e-05  9.65e-03  6.34e-06  1.25e-04  3.21e-01  
 15  +4.6744e-01  +5.6061e-01  9.32e-02  2.32e-05  5.70e-03  4.10e-06  7.70e-05  4.95e-01  
 16  +4.5732e-01  +5.1282e-01  5.55e-02  1.26e-05  3.11e-03  2.35e-06  4.37e-05  5.62e-01  
 17  +4.5317e-01  +4.9406e-01  4.09e-02  8.90e-06  2.19e-03  1.81e-06  3.13e-05  4.77e-01  
 18  +4.4849e-01  +4.7366e-01  2.52e-02  5.28e-06  1.30e-03  1.14e-06  1.90e-05  4.76e-01  
 19  +4.4698e-01  +4.6702e-01  2.00e-02  4.12e-06  1.01e-03  9.52e-07  1.49e-05  4.13e-01  
 20  +4.4279e-01  +4.4978e-01  7.00e-03  1.39e-06  3.41e-04  3.50e-07  5.17e-06  7.61e-01  
 21  +4.4275e-01  +4.4954e-01  6.79e-03  1.36e-06  3.34e-04  3.32e-07  5.15e-06  3.91e-02  
 22  +4.4271e-01  +4.4935e-01  6.64e-03  1.33e-06  3.27e-04  3.29e-07  5.01e-06  1.14e-01  
 23  +4.4247e-01  +4.4847e-01  6.00e-03  1.18e-06  2.91e-04  3.06e-07  4.43e-06  2.35e-01  
 24  +4.4094e-01  +4.4250e-01  1.56e-03  3.06e-07  7.50e-05  8.46e-08  1.16e-06  9.90e-01  
 25  +4.4037e-01  +4.4043e-01  5.98e-05  1.17e-08  2.87e-06  3.19e-09  4.48e-08  9.65e-01  
 26  +4.4035e-01  +4.4035e-01  5.99e-07  1.17e-10  2.87e-08  3.19e-11  4.48e-10  9.90e-01  
 27  +4.4035e-01  +4.4035e-01  5.99e-09  1.17e-12  2.87e-10  3.23e-13  4.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 336.4991ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:15 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:15 PM: Optimal value: 4.404e-01
(CVXPY) Sep 20 08:01:15 PM: Compilation took 7.064e-02 seconds
(CVXPY) Sep 20 08:01:15 PM: Solver (including time spent in interface) took 3.542e-01 seconds
Iteration: 18, Objective: 0.4404
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:15 PM: Your problem has 5199 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:15 PM: Finished problem compilation (took 8.088e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5199
  constraints   = 10199
  nnz(P)        = 0
  nnz(A)        = 99678
  cones (total) = 1
    : Nonnegative = 1,  numel = 10199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8009e-01  +1.0860e+03  1.09e+03  4.35e-01  7.88e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3117e-01  +1.2160e+02  1.21e+02  1.70e-01  3.90e+01  1.64e-02  2.75e-01  9.39e-01  
  3  +5.0863e-01  +3.1566e+01  3.11e+01  1.22e-01  2.81e+01  4.56e-05  2.54e-01  2.95e-01  
  4  +5.0104e-01  +3.1373e+00  2.64e+00  1.81e-02  4.29e+00  5.93e-06  1.61e-01  6.18e-01  
  5  +5.0021e-01  +1.2165e+00  7.16e-01  4.86e-03  1.18e+00  4.05e-05  9.71e-02  8.43e-01  
  6  +5.0006e-01  +8.2792e-01  3.28e-01  2.20e-03  5.36e-01  3.66e-05  3.42e-02  6.84e-01  
  7  +4.9949e-01  +8.6016e-01  3.61e-01  9.11e-04  2.24e-01  3.20e-04  3.08e-03  9.86e-01  
  8  +4.9531e-01  +8.1952e-01  3.24e-01  1.37e-04  3.38e-02  2.03e-03  4.10e-04  8.69e-01  
  9  +4.9203e-01  +7.5243e-01  2.60e-01  9.80e-05  2.42e-02  1.26e-03  2.96e-04  4.50e-01  
 10  +4.9199e-01  +7.4931e-01  2.57e-01  9.78e-05  2.42e-02  1.20e-03  2.95e-04  2.48e-02  
 11  +4.9255e-01  +7.2906e-01  2.37e-01  8.65e-05  2.14e-02  5.87e-04  2.60e-04  4.86e-01  
 12  +4.9192e-01  +7.2007e-01  2.28e-01  8.57e-05  2.12e-02  5.06e-04  2.58e-04  7.44e-02  
 13  +4.8259e-01  +6.5115e-01  1.69e-01  4.66e-05  1.15e-02  3.28e-04  1.44e-04  6.21e-01  
 14  +4.7651e-01  +6.1506e-01  1.39e-01  3.66e-05  9.02e-03  1.79e-04  1.16e-04  3.96e-01  
 15  +4.7261e-01  +5.9295e-01  1.20e-01  3.08e-05  7.58e-03  9.41e-05  9.94e-05  4.22e-01  
 16  +4.6580e-01  +5.5944e-01  9.36e-02  2.25e-05  5.54e-03  6.43e-05  7.48e-05  3.17e-01  
 17  +4.5652e-01  +5.1548e-01  5.90e-02  1.32e-05  3.24e-03  3.22e-05  4.55e-05  4.93e-01  
 18  +4.4993e-01  +4.8551e-01  3.56e-02  7.57e-06  1.86e-03  1.55e-05  2.69e-05  5.24e-01  
 19  +4.4308e-01  +4.5545e-01  1.24e-02  2.51e-06  6.17e-04  3.78e-06  9.29e-06  7.65e-01  
 20  +4.4252e-01  +4.5306e-01  1.05e-02  2.11e-06  5.19e-04  2.80e-06  7.83e-06  2.99e-01  
 21  +4.4216e-01  +4.5102e-01  8.86e-03  1.78e-06  4.38e-04  8.28e-07  6.71e-06  8.26e-01  
 22  +4.4079e-01  +4.4576e-01  4.97e-03  9.95e-07  2.44e-04  4.17e-07  3.78e-06  5.80e-01  
 23  +4.4033e-01  +4.4412e-01  3.79e-03  7.48e-07  1.84e-04  3.04e-07  2.84e-06  3.72e-01  
 24  +4.3900e-01  +4.3912e-01  1.26e-04  2.46e-08  6.05e-06  8.77e-09  9.51e-08  9.76e-01  
 25  +4.3895e-01  +4.3895e-01  1.26e-06  2.47e-10  6.07e-08  8.79e-11  9.55e-10  9.90e-01  
 26  +4.3895e-01  +4.3895e-01  1.26e-08  2.47e-12  6.07e-10  8.79e-13  9.55e-12  9.90e-01  
 27  +4.3895e-01  +4.3895e-01  1.26e-10  2.47e-14  6.07e-12  8.84e-15  9.60e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 377.1318ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:16 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:16 PM: Optimal value: 4.390e-01
(CVXPY) Sep 20 08:01:16 PM: Compilation took 8.088e-02 seconds
(CVXPY) Sep 20 08:01:16 PM: Solver (including time spent in interface) took 4.000e-01 seconds
Iteration: 19, Objective: 0.4390
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:16 PM: Your problem has 5209 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:16 PM: Finished problem compilation (took 8.239e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5209
  constraints   = 10209
  nnz(P)        = 0
  nnz(A)        = 100301
  cones (total) = 1
    : Nonnegative = 1,  numel = 10209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8004e-01  +1.0860e+03  1.09e+03  4.35e-01  7.87e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3111e-01  +1.2149e+02  1.21e+02  1.70e-01  3.89e+01  1.65e-02  2.75e-01  9.40e-01  
  3  +5.0862e-01  +3.1529e+01  3.10e+01  1.22e-01  2.81e+01  4.56e-05  2.54e-01  2.96e-01  
  4  +5.0104e-01  +3.1338e+00  2.63e+00  1.81e-02  4.29e+00  5.94e-06  1.60e-01  6.19e-01  
  5  +5.0023e-01  +1.2745e+00  7.74e-01  5.26e-03  1.27e+00  4.02e-05  9.89e-02  8.07e-01  
  6  +5.0008e-01  +8.8021e-01  3.80e-01  2.55e-03  6.21e-01  3.70e-05  3.91e-02  6.36e-01  
  7  +4.9969e-01  +8.5362e-01  3.54e-01  1.17e-03  2.88e-01  2.21e-04  4.23e-03  9.61e-01  
  8  +4.9609e-01  +8.2219e-01  3.26e-01  1.54e-04  3.80e-02  1.77e-03  4.60e-04  8.92e-01  
  9  +4.9329e-01  +7.7443e-01  2.81e-01  1.14e-04  2.82e-02  1.47e-03  3.42e-04  3.60e-01  
 10  +4.9119e-01  +7.4930e-01  2.58e-01  8.74e-05  2.16e-02  1.27e-03  2.63e-04  3.76e-01  
 11  +4.9070e-01  +7.3625e-01  2.46e-01  8.57e-05  2.12e-02  1.02e-03  2.58e-04  1.20e-01  
 12  +4.8955e-01  +7.0253e-01  2.13e-01  7.72e-05  1.91e-02  2.13e-04  2.34e-04  6.09e-01  
 13  +4.8203e-01  +6.5603e-01  1.74e-01  5.15e-05  1.27e-02  1.79e-04  1.60e-04  3.73e-01  
 14  +4.7407e-01  +6.0592e-01  1.32e-01  3.61e-05  8.87e-03  1.57e-05  1.16e-04  7.91e-01  
 15  +4.6932e-01  +5.8248e-01  1.13e-01  2.92e-05  7.17e-03  1.20e-05  9.54e-05  2.87e-01  
 16  +4.5823e-01  +5.2902e-01  7.08e-02  1.63e-05  4.00e-03  4.96e-06  5.56e-05  6.77e-01  
 17  +4.5352e-01  +5.0771e-01  5.42e-02  1.20e-05  2.94e-03  3.54e-06  4.17e-05  3.83e-01  
 18  +4.4448e-01  +4.6775e-01  2.33e-02  4.83e-06  1.19e-03  1.33e-06  1.76e-05  7.50e-01  
 19  +4.4226e-01  +4.5843e-01  1.62e-02  3.31e-06  8.13e-04  9.19e-07  1.22e-05  3.59e-01  
 20  +4.3983e-01  +4.4841e-01  8.58e-03  1.72e-06  4.22e-04  4.88e-07  6.43e-06  5.33e-01  
 21  +4.3959e-01  +4.4677e-01  7.17e-03  1.44e-06  3.54e-04  3.81e-07  5.47e-06  8.99e-01  
 22  +4.3938e-01  +4.4593e-01  6.55e-03  1.32e-06  3.23e-04  3.49e-07  5.00e-06  2.16e-01  
 23  +4.3861e-01  +4.4303e-01  4.43e-03  8.85e-07  2.17e-04  2.39e-07  3.36e-06  4.78e-01  
 24  +4.3796e-01  +4.4072e-01  2.76e-03  5.44e-07  1.34e-04  1.49e-07  2.08e-06  5.08e-01  
 25  +4.3699e-01  +4.3709e-01  1.05e-04  2.07e-08  5.07e-06  5.53e-09  7.97e-08  9.69e-01  
 26  +4.3695e-01  +4.3695e-01  1.06e-06  2.09e-10  5.14e-08  5.61e-11  8.09e-10  9.90e-01  
 27  +4.3695e-01  +4.3695e-01  1.06e-08  2.09e-12  5.14e-10  5.61e-13  8.09e-12  9.90e-01  
 28  +4.3695e-01  +4.3695e-01  1.06e-10  2.09e-14  5.14e-12  5.64e-15  8.13e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 365.0857ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:16 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:16 PM: Optimal value: 4.370e-01
(CVXPY) Sep 20 08:01:16 PM: Compilation took 8.239e-02 seconds
(CVXPY) Sep 20 08:01:16 PM: Solver (including time spent in interface) took 3.847e-01 seconds
Iteration: 20, Objective: 0.4370
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:17 PM: Your problem has 5219 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:17 PM: Finished problem compilation (took 7.498e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5219
  constraints   = 10219
  nnz(P)        = 0
  nnz(A)        = 101087
  cones (total) = 1
    : Nonnegative = 1,  numel = 10219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8004e-01  +1.0857e+03  1.09e+03  4.35e-01  7.86e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3109e-01  +1.2141e+02  1.21e+02  1.70e-01  3.88e+01  1.64e-02  2.74e-01  9.40e-01  
  3  +5.0861e-01  +3.1498e+01  3.10e+01  1.22e-01  2.80e+01  4.56e-05  2.54e-01  2.97e-01  
  4  +5.0104e-01  +3.1267e+00  2.63e+00  1.80e-02  4.28e+00  5.94e-06  1.60e-01  6.21e-01  
  5  +5.0024e-01  +1.3091e+00  8.09e-01  5.50e-03  1.33e+00  3.98e-05  9.98e-02  7.85e-01  
  6  +5.0008e-01  +8.8513e-01  3.85e-01  2.59e-03  6.29e-01  3.70e-05  3.87e-02  6.45e-01  
  7  +4.9964e-01  +8.8318e-01  3.84e-01  1.12e-03  2.76e-01  2.52e-04  3.88e-03  9.83e-01  
  8  +4.9578e-01  +8.4949e-01  3.54e-01  1.52e-04  3.76e-02  1.88e-03  4.52e-04  8.84e-01  
  9  +4.9317e-01  +7.9708e-01  3.04e-01  1.17e-04  2.90e-02  1.43e-03  3.51e-04  3.53e-01  
 10  +4.9205e-01  +7.7953e-01  2.87e-01  1.01e-04  2.51e-02  1.25e-03  3.04e-04  2.41e-01  
 11  +4.9135e-01  +7.5797e-01  2.67e-01  9.07e-05  2.24e-02  8.70e-04  2.72e-04  3.08e-01  
 12  +4.9055e-01  +7.4338e-01  2.53e-01  8.95e-05  2.21e-02  6.91e-04  2.70e-04  1.03e-01  
 13  +4.8577e-01  +7.0635e-01  2.21e-01  6.92e-05  1.71e-02  5.72e-04  2.12e-04  2.89e-01  
 14  +4.8027e-01  +6.5605e-01  1.76e-01  5.30e-05  1.30e-02  1.43e-04  1.66e-04  6.23e-01  
 15  +4.6958e-01  +5.9172e-01  1.22e-01  3.22e-05  7.92e-03  1.17e-05  1.06e-04  8.33e-01  
 16  +4.6210e-01  +5.5561e-01  9.35e-02  2.29e-05  5.63e-03  7.38e-06  7.76e-05  4.34e-01  
 17  +4.5438e-01  +5.1958e-01  6.52e-02  1.50e-05  3.68e-03  4.36e-06  5.25e-05  5.05e-01  
 18  +4.4604e-01  +4.8165e-01  3.56e-02  7.71e-06  1.89e-03  2.03e-06  2.82e-05  6.81e-01  
 19  +4.3843e-01  +4.4875e-01  1.03e-02  2.15e-06  5.27e-04  5.46e-07  8.25e-06  7.82e-01  
 20  +4.3801e-01  +4.4699e-01  8.98e-03  1.85e-06  4.54e-04  4.79e-07  7.11e-06  1.98e-01  
 21  +4.3782e-01  +4.4584e-01  8.02e-03  1.67e-06  4.08e-04  4.09e-07  6.50e-06  5.76e-01  
 22  +4.3766e-01  +4.4517e-01  7.51e-03  1.56e-06  3.82e-04  3.84e-07  6.08e-06  1.78e-01  
 23  +4.3679e-01  +4.4168e-01  4.90e-03  1.01e-06  2.48e-04  2.52e-07  3.97e-06  4.51e-01  
 24  +4.3643e-01  +4.4040e-01  3.96e-03  8.08e-07  1.98e-04  2.05e-07  3.17e-06  3.31e-01  
 25  +4.3509e-01  +4.3521e-01  1.15e-04  2.34e-08  5.73e-06  5.60e-09  9.32e-08  9.82e-01  
 26  +4.3505e-01  +4.3505e-01  1.15e-06  2.34e-10  5.75e-08  5.61e-11  9.35e-10  9.90e-01  
 27  +4.3505e-01  +4.3505e-01  1.15e-08  2.34e-12  5.75e-10  5.61e-13  9.35e-12  9.90e-01  
 28  +4.3505e-01  +4.3505e-01  1.15e-10  2.34e-14  5.75e-12  5.63e-15  9.38e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 385.1658ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:17 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:17 PM: Optimal value: 4.351e-01
(CVXPY) Sep 20 08:01:17 PM: Compilation took 7.498e-02 seconds
(CVXPY) Sep 20 08:01:17 PM: Solver (including time spent in interface) took 4.040e-01 seconds
Iteration: 21, Objective: 0.4351
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:17 PM: Your problem has 5229 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:18 PM: Finished problem compilation (took 7.674e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5229
  constraints   = 10229
  nnz(P)        = 0
  nnz(A)        = 101832
  cones (total) = 1
    : Nonnegative = 1,  numel = 10229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8005e-01  +1.0857e+03  1.09e+03  4.35e-01  7.85e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3104e-01  +1.2128e+02  1.21e+02  1.70e-01  3.87e+01  1.64e-02  2.74e-01  9.40e-01  
  3  +5.0860e-01  +3.1452e+01  3.09e+01  1.22e-01  2.80e+01  4.56e-05  2.54e-01  2.98e-01  
  4  +5.0104e-01  +3.1229e+00  2.62e+00  1.80e-02  4.27e+00  5.94e-06  1.60e-01  6.22e-01  
  5  +5.0026e-01  +1.3474e+00  8.47e-01  5.77e-03  1.39e+00  3.94e-05  1.01e-01  7.60e-01  
  6  +5.0008e-01  +8.9444e-01  3.94e-01  2.65e-03  6.44e-01  3.66e-05  3.95e-02  6.46e-01  
  7  +4.9970e-01  +8.8719e-01  3.87e-01  1.22e-03  3.01e-01  2.25e-04  4.32e-03  9.74e-01  
  8  +4.9606e-01  +8.5557e-01  3.60e-01  1.61e-04  3.98e-02  1.78e-03  4.78e-04  8.90e-01  
  9  +4.9395e-01  +8.1939e-01  3.25e-01  1.31e-04  3.23e-02  1.60e-03  3.89e-04  2.51e-01  
 10  +4.9293e-01  +7.7993e-01  2.87e-01  1.06e-04  2.63e-02  9.52e-04  3.17e-04  4.50e-01  
 11  +4.9290e-01  +7.5434e-01  2.61e-01  1.00e-04  2.48e-02  4.96e-04  2.98e-04  3.67e-01  
 12  +4.9209e-01  +7.3899e-01  2.47e-01  9.75e-05  2.41e-02  3.38e-04  2.91e-04  2.23e-01  
 13  +4.8507e-01  +6.9256e-01  2.07e-01  6.38e-05  1.57e-02  3.23e-04  1.95e-04  3.68e-01  
 14  +4.7787e-01  +6.3851e-01  1.61e-01  4.77e-05  1.17e-02  3.23e-06  1.51e-04  8.05e-01  
 15  +4.6746e-01  +5.8515e-01  1.18e-01  3.06e-05  7.52e-03  2.94e-06  1.01e-04  5.06e-01  
 16  +4.5766e-01  +5.3822e-01  8.06e-02  1.92e-05  4.71e-03  2.39e-06  6.61e-05  5.43e-01  
 17  +4.4859e-01  +4.9655e-01  4.80e-02  1.07e-05  2.63e-03  1.59e-06  3.85e-05  5.71e-01  
 18  +4.4317e-01  +4.7221e-01  2.90e-02  6.27e-06  1.54e-03  1.05e-06  2.32e-05  5.19e-01  
 19  +4.3728e-01  +4.4643e-01  9.14e-03  1.91e-06  4.68e-04  3.86e-07  7.33e-06  8.29e-01  
 20  +4.3534e-01  +4.3840e-01  3.06e-03  6.32e-07  1.55e-04  1.36e-07  2.47e-06  7.63e-01  
 21  +4.3447e-01  +4.3489e-01  4.18e-04  8.60e-08  2.11e-05  1.94e-08  3.41e-07  9.25e-01  
 22  +4.3433e-01  +4.3435e-01  1.62e-05  3.34e-09  8.18e-07  7.59e-10  1.33e-08  9.67e-01  
 23  +4.3433e-01  +4.3433e-01  1.63e-07  3.35e-11  8.21e-09  7.62e-12  1.33e-10  9.90e-01  
 24  +4.3433e-01  +4.3433e-01  1.73e-09  3.57e-13  8.74e-11  8.19e-14  1.43e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 330.3964ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:18 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:18 PM: Optimal value: 4.343e-01
(CVXPY) Sep 20 08:01:18 PM: Compilation took 7.674e-02 seconds
(CVXPY) Sep 20 08:01:18 PM: Solver (including time spent in interface) took 3.463e-01 seconds
Iteration: 22, Objective: 0.4343
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:18 PM: Your problem has 5239 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:18 PM: Finished problem compilation (took 8.874e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:18 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5239
  constraints   = 10239
  nnz(P)        = 0
  nnz(A)        = 102730
  cones (total) = 1
    : Nonnegative = 1,  numel = 10239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0011e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8000e-01  +1.0858e+03  1.09e+03  4.35e-01  7.85e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3104e-01  +1.2132e+02  1.21e+02  1.70e-01  3.86e+01  1.65e-02  2.74e-01  9.40e-01  
  3  +5.0860e-01  +3.1459e+01  3.10e+01  1.22e-01  2.79e+01  4.56e-05  2.54e-01  2.98e-01  
  4  +5.0104e-01  +3.1248e+00  2.62e+00  1.80e-02  4.27e+00  5.94e-06  1.60e-01  6.22e-01  
  5  +5.0026e-01  +1.3498e+00  8.50e-01  5.78e-03  1.40e+00  3.95e-05  1.01e-01  7.61e-01  
  6  +5.0008e-01  +8.9437e-01  3.94e-01  2.65e-03  6.44e-01  3.68e-05  3.92e-02  6.43e-01  
  7  +4.9969e-01  +8.8767e-01  3.88e-01  1.22e-03  3.00e-01  2.27e-04  4.30e-03  9.71e-01  
  8  +4.9603e-01  +8.5591e-01  3.60e-01  1.61e-04  3.98e-02  1.79e-03  4.78e-04  8.89e-01  
  9  +4.9375e-01  +8.1613e-01  3.22e-01  1.29e-04  3.19e-02  1.57e-03  3.85e-04  2.69e-01  
 10  +4.9252e-01  +7.7752e-01  2.85e-01  1.03e-04  2.55e-02  9.71e-04  3.08e-04  4.57e-01  
 11  +4.9239e-01  +7.5616e-01  2.64e-01  9.96e-05  2.46e-02  5.98e-04  2.97e-04  2.72e-01  
 12  +4.9118e-01  +7.2883e-01  2.38e-01  9.24e-05  2.28e-02  2.48e-04  2.77e-04  4.48e-01  
 13  +4.8326e-01  +6.7912e-01  1.96e-01  5.88e-05  1.45e-02  2.34e-04  1.81e-04  3.83e-01  
 14  +4.7692e-01  +6.3789e-01  1.61e-01  4.65e-05  1.14e-02  8.28e-05  1.48e-04  5.37e-01  
 15  +4.6604e-01  +5.8086e-01  1.15e-01  2.94e-05  7.22e-03  4.49e-05  9.77e-05  4.73e-01  
 16  +4.5899e-01  +5.4658e-01  8.76e-02  2.11e-05  5.17e-03  2.53e-05  7.22e-05  4.37e-01  
 17  +4.5038e-01  +5.0658e-01  5.62e-02  1.27e-05  3.11e-03  1.34e-05  4.52e-05  4.72e-01  
 18  +4.4248e-01  +4.7044e-01  2.80e-02  5.92e-06  1.45e-03  3.12e-06  2.19e-05  8.27e-01  
 19  +4.3877e-01  +4.5404e-01  1.53e-02  3.17e-06  7.76e-04  1.09e-06  1.20e-05  8.30e-01  
 20  +4.3516e-01  +4.3942e-01  4.26e-03  8.75e-07  2.15e-04  2.88e-07  3.42e-06  7.62e-01  
 21  +4.3383e-01  +4.3419e-01  3.59e-04  7.31e-08  1.79e-05  1.85e-08  2.91e-07  9.90e-01  
 22  +4.3370e-01  +4.3371e-01  4.17e-06  8.50e-10  2.08e-07  2.15e-10  3.39e-09  9.88e-01  
 23  +4.3370e-01  +4.3370e-01  4.17e-08  8.50e-12  2.08e-09  2.15e-12  3.39e-11  9.90e-01  
 24  +4.3370e-01  +4.3370e-01  4.45e-10  9.07e-14  2.22e-11  2.31e-14  3.64e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 357.545ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:19 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:19 PM: Optimal value: 4.337e-01
(CVXPY) Sep 20 08:01:19 PM: Compilation took 8.874e-02 seconds
(CVXPY) Sep 20 08:01:19 PM: Solver (including time spent in interface) took 3.780e-01 seconds
Iteration: 23, Objective: 0.4337
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:19 PM: Your problem has 5249 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:19 PM: Finished problem compilation (took 8.575e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5249
  constraints   = 10249
  nnz(P)        = 0
  nnz(A)        = 103314
  cones (total) = 1
    : Nonnegative = 1,  numel = 10249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.7996e-01  +1.0858e+03  1.09e+03  4.35e-01  7.85e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3102e-01  +1.2127e+02  1.21e+02  1.70e-01  3.86e+01  1.65e-02  2.74e-01  9.41e-01  
  3  +5.0859e-01  +3.1447e+01  3.09e+01  1.22e-01  2.79e+01  4.57e-05  2.53e-01  2.99e-01  
  4  +5.0104e-01  +3.1254e+00  2.62e+00  1.80e-02  4.27e+00  5.95e-06  1.59e-01  6.22e-01  
  5  +5.0026e-01  +1.3483e+00  8.48e-01  5.78e-03  1.39e+00  4.00e-05  1.00e-01  7.70e-01  
  6  +5.0008e-01  +8.9202e-01  3.92e-01  2.63e-03  6.40e-01  3.79e-05  3.76e-02  6.54e-01  
  7  +4.9966e-01  +8.9243e-01  3.93e-01  1.20e-03  2.94e-01  2.43e-04  4.17e-03  9.59e-01  
  8  +4.9590e-01  +8.5867e-01  3.63e-01  1.63e-04  4.02e-02  1.83e-03  4.83e-04  8.85e-01  
  9  +4.9420e-01  +8.2856e-01  3.34e-01  1.38e-04  3.42e-02  1.65e-03  4.12e-04  2.08e-01  
 10  +4.9008e-01  +7.7832e-01  2.88e-01  9.33e-05  2.30e-02  1.45e-03  2.81e-04  4.36e-01  
 11  +4.8977e-01  +7.6621e-01  2.76e-01  9.19e-05  2.27e-02  1.23e-03  2.76e-04  9.09e-02  
 12  +4.8769e-01  +7.3473e-01  2.47e-01  8.36e-05  2.06e-02  7.76e-04  2.54e-04  2.61e-01  
 13  +4.8108e-01  +6.8404e-01  2.03e-01  6.04e-05  1.49e-02  5.13e-04  1.88e-04  4.07e-01  
 14  +4.7945e-01  +6.6930e-01  1.90e-01  5.62e-05  1.38e-02  3.57e-04  1.77e-04  2.45e-01  
 15  +4.7043e-01  +6.1607e-01  1.46e-01  3.88e-05  9.54e-03  2.37e-04  1.26e-04  3.62e-01  
 16  +4.6357e-01  +5.7813e-01  1.15e-01  2.86e-05  7.03e-03  1.39e-04  9.60e-05  3.97e-01  
 17  +4.5385e-01  +5.2862e-01  7.48e-02  1.74e-05  4.26e-03  6.94e-05  6.07e-05  4.85e-01  
 18  +4.4855e-01  +5.0287e-01  5.43e-02  1.22e-05  2.98e-03  4.28e-05  4.36e-05  3.84e-01  
 19  +4.4357e-01  +4.7820e-01  3.46e-02  7.46e-06  1.83e-03  1.54e-05  2.74e-05  6.59e-01  
 20  +4.3828e-01  +4.5448e-01  1.62e-02  3.41e-06  8.36e-04  4.81e-06  1.30e-05  7.03e-01  
 21  +4.3552e-01  +4.4224e-01  6.73e-03  1.39e-06  3.42e-04  4.35e-07  5.40e-06  9.90e-01  
 22  +4.3363e-01  +4.3480e-01  1.16e-03  2.40e-07  5.89e-05  7.35e-08  9.50e-07  8.37e-01  
 23  +4.3328e-01  +4.3340e-01  1.23e-04  2.54e-08  6.23e-06  7.71e-09  1.01e-07  8.98e-01  
 24  +4.3324e-01  +4.3324e-01  1.65e-06  3.40e-10  8.34e-08  1.02e-10  1.35e-09  9.87e-01  
 25  +4.3324e-01  +4.3324e-01  1.66e-08  3.43e-12  8.40e-10  1.03e-12  1.36e-11  9.90e-01  
 26  +4.3324e-01  +4.3324e-01  1.68e-10  3.48e-14  8.50e-12  1.04e-14  1.38e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 380.2894ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:19 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:19 PM: Optimal value: 4.332e-01
(CVXPY) Sep 20 08:01:19 PM: Compilation took 8.575e-02 seconds
(CVXPY) Sep 20 08:01:19 PM: Solver (including time spent in interface) took 4.003e-01 seconds
Iteration: 24, Objective: 0.4332
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:20 PM: Your problem has 5259 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:20 PM: Finished problem compilation (took 9.337e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5259
  constraints   = 10259
  nnz(P)        = 0
  nnz(A)        = 103978
  cones (total) = 1
    : Nonnegative = 1,  numel = 10259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.7986e-01  +1.0859e+03  1.09e+03  4.36e-01  7.84e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3097e-01  +1.2120e+02  1.21e+02  1.69e-01  3.85e+01  1.65e-02  2.74e-01  9.41e-01  
  3  +5.0859e-01  +3.1435e+01  3.09e+01  1.22e-01  2.79e+01  4.57e-05  2.53e-01  3.00e-01  
  4  +5.0104e-01  +3.1283e+00  2.63e+00  1.81e-02  4.28e+00  5.95e-06  1.59e-01  6.22e-01  
  5  +5.0028e-01  +1.4082e+00  9.08e-01  6.19e-03  1.49e+00  3.96e-05  1.02e-01  7.34e-01  
  6  +5.0008e-01  +9.0253e-01  4.02e-01  2.71e-03  6.57e-01  3.79e-05  3.82e-02  6.74e-01  
  7  +4.9966e-01  +8.9814e-01  3.98e-01  1.20e-03  2.96e-01  2.46e-04  4.18e-03  9.53e-01  
  8  +4.9599e-01  +8.6351e-01  3.68e-01  1.70e-04  4.19e-02  1.77e-03  5.04e-04  8.80e-01  
  9  +4.9370e-01  +8.1629e-01  3.23e-01  1.37e-04  3.38e-02  1.39e-03  4.08e-04  3.02e-01  
 10  +4.9075e-01  +7.8739e-01  2.97e-01  1.01e-04  2.49e-02  1.36e-03  3.03e-04  3.45e-01  
 11  +4.9076e-01  +7.6791e-01  2.77e-01  9.85e-05  2.43e-02  9.32e-04  2.95e-04  2.04e-01  
 12  +4.8918e-01  +7.4356e-01  2.54e-01  9.18e-05  2.26e-02  6.25e-04  2.77e-04  2.42e-01  
 13  +4.8271e-01  +6.9775e-01  2.15e-01  6.60e-05  1.63e-02  5.22e-04  2.04e-04  3.26e-01  
 14  +4.7956e-01  +6.7349e-01  1.94e-01  5.76e-05  1.42e-02  3.49e-04  1.81e-04  2.94e-01  
 15  +4.7903e-01  +6.6755e-01  1.89e-01  5.63e-05  1.39e-02  2.75e-04  1.77e-04  1.63e-01  
 16  +4.6900e-01  +6.1040e-01  1.41e-01  3.74e-05  9.20e-03  1.94e-04  1.23e-04  3.45e-01  
 17  +4.6120e-01  +5.6894e-01  1.08e-01  2.67e-05  6.55e-03  1.28e-04  9.03e-05  3.36e-01  
 18  +4.5241e-01  +5.2438e-01  7.20e-02  1.67e-05  4.09e-03  6.96e-05  5.87e-05  4.47e-01  
 19  +4.4800e-01  +5.0267e-01  5.47e-02  1.23e-05  3.01e-03  4.59e-05  4.41e-05  3.43e-01  
 20  +4.4279e-01  +4.7656e-01  3.38e-02  7.29e-06  1.79e-03  1.59e-05  2.68e-05  6.74e-01  
 21  +4.3796e-01  +4.5479e-01  1.68e-02  3.55e-06  8.69e-04  5.79e-06  1.34e-05  6.51e-01  
 22  +4.3694e-01  +4.5031e-01  1.34e-02  2.79e-06  6.84e-04  4.12e-06  1.06e-05  3.14e-01  
 23  +4.3561e-01  +4.4404e-01  8.42e-03  1.74e-06  4.27e-04  5.09e-07  6.68e-06  9.90e-01  
 24  +4.3366e-01  +4.3638e-01  2.73e-03  5.60e-07  1.37e-04  1.63e-07  2.18e-06  7.00e-01  
 25  +4.3282e-01  +4.3311e-01  2.86e-04  5.86e-08  1.44e-05  1.67e-08  2.30e-07  9.10e-01  
 26  +4.3273e-01  +4.3273e-01  6.71e-06  1.37e-09  3.37e-07  3.89e-10  5.40e-09  9.78e-01  
 27  +4.3273e-01  +4.3273e-01  6.81e-08  1.40e-11  3.42e-09  3.95e-12  5.48e-11  9.90e-01  
 28  +4.3273e-01  +4.3273e-01  6.99e-10  1.43e-13  3.51e-11  4.07e-14  5.65e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 389.7881ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:20 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:20 PM: Optimal value: 4.327e-01
(CVXPY) Sep 20 08:01:20 PM: Compilation took 9.337e-02 seconds
(CVXPY) Sep 20 08:01:20 PM: Solver (including time spent in interface) took 4.080e-01 seconds
Iteration: 25, Objective: 0.4327
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:20 PM: Your problem has 5269 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:21 PM: Finished problem compilation (took 8.526e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5269
  constraints   = 10269
  nnz(P)        = 0
  nnz(A)        = 104583
  cones (total) = 1
    : Nonnegative = 1,  numel = 10269

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.7986e-01  +1.0859e+03  1.09e+03  4.36e-01  7.84e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3095e-01  +1.2113e+02  1.21e+02  1.69e-01  3.84e+01  1.65e-02  2.74e-01  9.42e-01  
  3  +5.0858e-01  +3.1421e+01  3.09e+01  1.22e-01  2.78e+01  4.58e-05  2.53e-01  3.01e-01  
  4  +5.0104e-01  +3.1292e+00  2.63e+00  1.81e-02  4.28e+00  5.95e-06  1.59e-01  6.23e-01  
  5  +5.0028e-01  +1.3997e+00  8.99e-01  6.13e-03  1.48e+00  4.00e-05  1.01e-01  7.46e-01  
  6  +5.0008e-01  +9.0030e-01  4.00e-01  2.69e-03  6.53e-01  3.92e-05  3.66e-02  6.87e-01  
  7  +4.9954e-01  +8.9266e-01  3.93e-01  1.03e-03  2.53e-01  3.03e-04  3.47e-03  9.47e-01  
  8  +4.9556e-01  +8.5394e-01  3.58e-01  1.59e-04  3.93e-02  1.90e-03  4.75e-04  8.65e-01  
  9  +4.9248e-01  +7.9374e-01  3.01e-01  1.20e-04  2.97e-02  1.24e-03  3.61e-04  4.20e-01  
 10  +4.9153e-01  +7.7859e-01  2.87e-01  1.04e-04  2.55e-02  1.05e-03  3.11e-04  2.86e-01  
 11  +4.9132e-01  +7.5566e-01  2.64e-01  9.53e-05  2.35e-02  5.47e-04  2.85e-04  4.13e-01  
 12  +4.8592e-01  +6.9173e-01  2.06e-01  7.13e-05  1.76e-02  5.56e-06  2.19e-04  8.41e-01  
 13  +4.7759e-01  +6.4541e-01  1.68e-01  4.95e-05  1.22e-02  4.96e-06  1.57e-04  3.82e-01  
 14  +4.7325e-01  +6.2298e-01  1.50e-01  4.21e-05  1.04e-02  4.67e-06  1.36e-04  3.69e-01  
 15  +4.6453e-01  +5.7933e-01  1.15e-01  2.96e-05  7.25e-03  3.64e-06  9.89e-05  3.67e-01  
 16  +4.5510e-01  +5.3435e-01  7.93e-02  1.88e-05  4.61e-03  2.62e-06  6.56e-05  4.69e-01  
 17  +4.4865e-01  +5.0449e-01  5.58e-02  1.26e-05  3.10e-03  1.95e-06  4.53e-05  4.29e-01  
 18  +4.4400e-01  +4.8189e-01  3.79e-02  8.13e-06  1.99e-03  1.76e-06  2.96e-05  8.59e-01  
 19  +4.4147e-01  +4.7099e-01  2.95e-02  6.25e-06  1.53e-03  1.40e-06  2.30e-05  3.65e-01  
 20  +4.3823e-01  +4.5693e-01  1.87e-02  3.88e-06  9.51e-04  9.48e-07  1.45e-05  7.31e-01  
 21  +4.3684e-01  +4.5129e-01  1.44e-02  2.98e-06  7.29e-04  7.35e-07  1.12e-05  2.63e-01  
 22  +4.3495e-01  +4.4320e-01  8.25e-03  1.68e-06  4.12e-04  4.34e-07  6.43e-06  9.90e-01  
 23  +4.3307e-01  +4.3598e-01  2.90e-03  5.85e-07  1.43e-04  1.53e-07  2.27e-06  7.05e-01  
 24  +4.3239e-01  +4.3345e-01  1.06e-03  2.09e-07  5.13e-05  5.48e-08  8.24e-07  8.61e-01  
 25  +4.3203e-01  +4.3210e-01  7.51e-05  1.48e-08  3.62e-06  3.89e-09  5.86e-08  9.35e-01  
 26  +4.3200e-01  +4.3200e-01  8.03e-07  1.58e-10  3.87e-08  4.16e-11  6.27e-10  9.89e-01  
 27  +4.3200e-01  +4.3200e-01  8.03e-09  1.58e-12  3.87e-10  4.16e-13  6.27e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 420.9921ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:21 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:21 PM: Optimal value: 4.320e-01
(CVXPY) Sep 20 08:01:21 PM: Compilation took 8.526e-02 seconds
(CVXPY) Sep 20 08:01:21 PM: Solver (including time spent in interface) took 4.398e-01 seconds
Iteration: 26, Objective: 0.4320
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:21 PM: Your problem has 5279 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:21 PM: Finished problem compilation (took 1.050e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5279
  constraints   = 10279
  nnz(P)        = 0
  nnz(A)        = 105181
  cones (total) = 1
    : Nonnegative = 1,  numel = 10279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.7987e-01  +1.0859e+03  1.09e+03  4.36e-01  7.83e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3091e-01  +1.2102e+02  1.20e+02  1.69e-01  3.84e+01  1.65e-02  2.74e-01  9.42e-01  
  3  +5.0857e-01  +3.1393e+01  3.09e+01  1.22e-01  2.78e+01  4.58e-05  2.53e-01  3.02e-01  
  4  +5.0104e-01  +3.1294e+00  2.63e+00  1.81e-02  4.28e+00  5.95e-06  1.59e-01  6.23e-01  
  5  +5.0029e-01  +1.4177e+00  9.17e-01  6.26e-03  1.51e+00  3.98e-05  1.02e-01  7.35e-01  
  6  +5.0008e-01  +9.0279e-01  4.03e-01  2.71e-03  6.57e-01  3.90e-05  3.68e-02  6.82e-01  
  7  +4.9951e-01  +9.1160e-01  4.12e-01  1.02e-03  2.51e-01  3.21e-04  3.39e-03  9.58e-01  
  8  +4.9550e-01  +8.6964e-01  3.74e-01  1.64e-04  4.05e-02  1.90e-03  4.88e-04  8.59e-01  
  9  +4.9256e-01  +8.1527e-01  3.23e-01  1.26e-04  3.12e-02  1.42e-03  3.78e-04  3.60e-01  
 10  +4.9080e-01  +7.8818e-01  2.97e-01  1.00e-04  2.48e-02  1.15e-03  3.01e-04  3.70e-01  
 11  +4.9006e-01  +7.6460e-01  2.75e-01  9.84e-05  2.43e-02  7.87e-04  2.96e-04  1.76e-01  
 12  +4.8249e-01  +7.0359e-01  2.21e-01  6.68e-05  1.64e-02  5.47e-04  2.07e-04  4.35e-01  
 13  +4.7520e-01  +6.5250e-01  1.77e-01  5.01e-05  1.23e-02  2.93e-04  1.60e-04  4.20e-01  
 14  +4.6813e-01  +6.0695e-01  1.39e-01  3.69e-05  9.05e-03  7.56e-05  1.21e-04  6.50e-01  
 15  +4.5712e-01  +5.5092e-01  9.38e-02  2.27e-05  5.56e-03  4.24e-05  7.82e-05  4.37e-01  
 16  +4.4817e-01  +5.0658e-01  5.84e-02  1.32e-05  3.23e-03  1.45e-05  4.72e-05  6.63e-01  
 17  +4.4483e-01  +4.9106e-01  4.62e-02  1.02e-05  2.49e-03  1.00e-05  3.69e-05  3.38e-01  
 18  +4.4122e-01  +4.7460e-01  3.34e-02  7.18e-06  1.76e-03  6.44e-06  2.65e-05  3.84e-01  
 19  +4.3847e-01  +4.6153e-01  2.31e-02  4.87e-06  1.19e-03  2.85e-06  1.82e-05  6.55e-01  
 20  +4.3482e-01  +4.4607e-01  1.13e-02  2.33e-06  5.71e-04  1.28e-06  8.92e-06  5.81e-01  
 21  +4.3468e-01  +4.4537e-01  1.07e-02  2.21e-06  5.42e-04  1.12e-06  8.47e-06  1.86e-01  
 22  +4.3258e-01  +4.3659e-01  4.01e-03  8.25e-07  2.02e-04  2.05e-07  3.21e-06  9.90e-01  
 23  +4.3157e-01  +4.3266e-01  1.09e-03  2.23e-07  5.46e-05  5.61e-08  8.77e-07  7.42e-01  
 24  +4.3126e-01  +4.3144e-01  1.86e-04  3.80e-08  9.30e-06  9.59e-09  1.50e-07  8.51e-01  
 25  +4.3121e-01  +4.3127e-01  5.61e-05  1.14e-08  2.80e-06  2.83e-09  4.51e-08  8.72e-01  
 26  +4.3119e-01  +4.3119e-01  9.86e-07  2.01e-10  4.92e-08  4.97e-11  7.92e-10  9.83e-01  
 27  +4.3119e-01  +4.3119e-01  9.96e-09  2.03e-12  4.97e-10  5.03e-13  8.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 463.9742ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:22 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:22 PM: Optimal value: 4.312e-01
(CVXPY) Sep 20 08:01:22 PM: Compilation took 1.050e-01 seconds
(CVXPY) Sep 20 08:01:22 PM: Solver (including time spent in interface) took 4.845e-01 seconds
Iteration: 27, Objective: 0.4312
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:22 PM: Your problem has 5289 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:22 PM: Finished problem compilation (took 9.791e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5289
  constraints   = 10289
  nnz(P)        = 0
  nnz(A)        = 105780
  cones (total) = 1
    : Nonnegative = 1,  numel = 10289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.7983e-01  +1.0859e+03  1.09e+03  4.36e-01  7.82e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3089e-01  +1.2099e+02  1.20e+02  1.69e-01  3.83e+01  1.65e-02  2.74e-01  9.42e-01  
  3  +5.0857e-01  +3.1382e+01  3.09e+01  1.22e-01  2.77e+01  4.58e-05  2.53e-01  3.02e-01  
  4  +5.0104e-01  +3.1294e+00  2.63e+00  1.81e-02  4.28e+00  5.96e-06  1.59e-01  6.23e-01  
  5  +5.0030e-01  +1.4412e+00  9.41e-01  6.42e-03  1.55e+00  3.98e-05  1.02e-01  7.25e-01  
  6  +5.0009e-01  +9.2979e-01  4.30e-01  2.89e-03  7.01e-01  3.94e-05  3.91e-02  6.57e-01  
  7  +4.9955e-01  +9.1756e-01  4.18e-01  1.07e-03  2.63e-01  3.01e-04  3.58e-03  9.64e-01  
  8  +4.9574e-01  +8.7697e-01  3.81e-01  1.71e-04  4.23e-02  1.81e-03  5.10e-04  8.60e-01  
  9  +4.9315e-01  +8.2726e-01  3.34e-01  1.38e-04  3.40e-02  1.41e-03  4.12e-04  3.00e-01  
 10  +4.8954e-01  +7.8914e-01  3.00e-01  9.53e-05  2.35e-02  1.31e-03  2.87e-04  4.27e-01  
 11  +4.8899e-01  +7.8104e-01  2.92e-01  9.50e-05  2.34e-02  1.22e-03  2.87e-04  1.87e-02  
 12  +4.8733e-01  +7.5205e-01  2.65e-01  8.94e-05  2.20e-02  8.33e-04  2.72e-04  1.94e-01  
 13  +4.7888e-01  +6.9060e-01  2.12e-01  6.09e-05  1.50e-02  6.26e-04  1.91e-04  3.74e-01  
 14  +4.7396e-01  +6.5223e-01  1.78e-01  4.97e-05  1.22e-02  3.20e-04  1.59e-04  4.13e-01  
 15  +4.6262e-01  +5.8291e-01  1.20e-01  3.05e-05  7.47e-03  1.03e-04  1.02e-04  6.18e-01  
 16  +4.5778e-01  +5.5753e-01  9.97e-02  2.43e-05  5.95e-03  6.78e-05  8.33e-05  3.34e-01  
 17  +4.4863e-01  +5.1203e-01  6.34e-02  1.44e-05  3.54e-03  2.94e-05  5.15e-05  5.60e-01  
 18  +4.4467e-01  +4.9305e-01  4.84e-02  1.07e-05  2.61e-03  1.81e-05  3.87e-05  4.09e-01  
 19  +4.4067e-01  +4.7491e-01  3.42e-02  7.36e-06  1.80e-03  1.16e-05  2.73e-05  3.70e-01  
 20  +4.3798e-01  +4.6273e-01  2.47e-02  5.22e-06  1.28e-03  7.08e-06  1.96e-05  4.13e-01  
 21  +4.3322e-01  +4.4215e-01  8.93e-03  1.83e-06  4.48e-04  1.97e-06  7.10e-06  7.41e-01  
 22  +4.3276e-01  +4.3988e-01  7.12e-03  1.47e-06  3.59e-04  1.00e-06  5.76e-06  5.50e-01  
 23  +4.3256e-01  +4.3900e-01  6.44e-03  1.32e-06  3.24e-04  7.94e-07  5.19e-06  2.80e-01  
 24  +4.3185e-01  +4.3624e-01  4.40e-03  8.92e-07  2.18e-04  4.57e-07  3.50e-06  5.29e-01  
 25  +4.3046e-01  +4.3092e-01  4.57e-04  9.23e-08  2.26e-05  4.40e-08  3.67e-07  9.09e-01  
 26  +4.3030e-01  +4.3031e-01  4.86e-06  9.81e-10  2.40e-07  4.65e-10  3.91e-09  9.89e-01  
 27  +4.3030e-01  +4.3030e-01  4.87e-08  9.83e-12  2.40e-09  4.66e-12  3.92e-11  9.90e-01  
 28  +4.3030e-01  +4.3030e-01  4.89e-10  9.87e-14  2.42e-11  4.71e-14  3.96e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 438.2867ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:23 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:23 PM: Optimal value: 4.303e-01
(CVXPY) Sep 20 08:01:23 PM: Compilation took 9.791e-02 seconds
(CVXPY) Sep 20 08:01:23 PM: Solver (including time spent in interface) took 4.562e-01 seconds
Iteration: 28, Objective: 0.4303
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:23 PM: Your problem has 5299 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:23 PM: Finished problem compilation (took 9.368e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5299
  constraints   = 10299
  nnz(P)        = 0
  nnz(A)        = 106369
  cones (total) = 1
    : Nonnegative = 1,  numel = 10299

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.7980e-01  +1.0858e+03  1.09e+03  4.36e-01  7.82e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3086e-01  +1.2092e+02  1.20e+02  1.69e-01  3.82e+01  1.65e-02  2.74e-01  9.42e-01  
  3  +5.0856e-01  +3.1362e+01  3.09e+01  1.22e-01  2.77e+01  4.58e-05  2.52e-01  3.03e-01  
  4  +5.0104e-01  +3.1257e+00  2.62e+00  1.81e-02  4.27e+00  5.96e-06  1.58e-01  6.24e-01  
  5  +5.0029e-01  +1.4179e+00  9.18e-01  6.27e-03  1.51e+00  4.07e-05  9.98e-02  7.53e-01  
  6  +5.0009e-01  +9.2800e-01  4.28e-01  2.87e-03  6.96e-01  4.15e-05  3.65e-02  6.81e-01  
  7  +4.9929e-01  +9.1412e-01  4.15e-01  7.89e-04  1.95e-01  4.27e-04  2.53e-03  9.76e-01  
  8  +4.9518e-01  +8.6649e-01  3.71e-01  1.58e-04  3.91e-02  1.91e-03  4.71e-04  8.21e-01  
  9  +4.9232e-01  +8.1831e-01  3.26e-01  1.23e-04  3.03e-02  1.40e-03  3.67e-04  3.80e-01  
 10  +4.9051e-01  +7.9556e-01  3.05e-01  9.97e-05  2.46e-02  1.19e-03  2.99e-04  3.30e-01  
 11  +4.8971e-01  +7.8418e-01  2.94e-01  9.93e-05  2.45e-02  1.08e-03  2.98e-04  2.20e-02  
 12  +4.8358e-01  +7.2467e-01  2.41e-01  7.38e-05  1.82e-02  6.86e-04  2.27e-04  3.98e-01  
 13  +4.7758e-01  +6.8037e-01  2.03e-01  5.85e-05  1.44e-02  4.67e-04  1.84e-04  3.03e-01  
 14  +4.7522e-01  +6.5947e-01  1.84e-01  5.28e-05  1.30e-02  2.64e-04  1.68e-04  3.53e-01  
 15  +4.6174e-01  +5.8147e-01  1.20e-01  3.02e-05  7.40e-03  1.38e-04  1.01e-04  4.83e-01  
 16  +4.5488e-01  +5.4632e-01  9.14e-02  2.19e-05  5.36e-03  8.81e-05  7.57e-05  3.56e-01  
 17  +4.4623e-01  +5.0390e-01  5.77e-02  1.30e-05  3.18e-03  4.42e-05  4.67e-05  4.93e-01  
 18  +4.4152e-01  +4.8107e-01  3.96e-02  8.58e-06  2.10e-03  2.20e-05  3.15e-05  5.22e-01  
 19  +4.3880e-01  +4.6871e-01  2.99e-02  6.36e-06  1.56e-03  1.46e-05  2.37e-05  3.51e-01  
 20  +4.3500e-01  +4.5056e-01  1.56e-02  3.21e-06  7.85e-04  1.12e-06  1.23e-05  9.90e-01  
 21  +4.3107e-01  +4.3493e-01  3.87e-03  7.88e-07  1.93e-04  2.03e-07  3.11e-06  9.90e-01  
 22  +4.2978e-01  +4.3002e-01  2.33e-04  4.73e-08  1.16e-05  1.18e-08  1.89e-07  9.80e-01  
 23  +4.2970e-01  +4.2970e-01  2.37e-06  4.81e-10  1.18e-07  1.20e-10  1.92e-09  9.90e-01  
 24  +4.2970e-01  +4.2970e-01  2.37e-08  4.81e-12  1.18e-09  1.20e-12  1.93e-11  9.90e-01  
 25  +4.2970e-01  +4.2970e-01  2.38e-10  4.83e-14  1.18e-11  1.21e-14  1.94e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 417.6928ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:24 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:24 PM: Optimal value: 4.297e-01
(CVXPY) Sep 20 08:01:24 PM: Compilation took 9.368e-02 seconds
(CVXPY) Sep 20 08:01:24 PM: Solver (including time spent in interface) took 4.405e-01 seconds
Iteration: 29, Objective: 0.4297
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:24 PM: Your problem has 5301 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:24 PM: Finished problem compilation (took 1.053e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5301
  constraints   = 10301
  nnz(P)        = 0
  nnz(A)        = 106592
  cones (total) = 1
    : Nonnegative = 1,  numel = 10301

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.7980e-01  +1.0858e+03  1.09e+03  4.36e-01  7.82e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3087e-01  +1.2094e+02  1.20e+02  1.69e-01  3.82e+01  1.65e-02  2.74e-01  9.42e-01  
  3  +5.0856e-01  +3.1362e+01  3.09e+01  1.22e-01  2.77e+01  4.58e-05  2.52e-01  3.03e-01  
  4  +5.0104e-01  +3.1243e+00  2.62e+00  1.81e-02  4.27e+00  5.96e-06  1.58e-01  6.24e-01  
  5  +5.0029e-01  +1.4217e+00  9.21e-01  6.29e-03  1.52e+00  4.06e-05  9.99e-02  7.50e-01  
  6  +5.0009e-01  +9.3327e-01  4.33e-01  2.91e-03  7.05e-01  4.15e-05  3.70e-02  6.77e-01  
  7  +4.9931e-01  +9.1233e-01  4.13e-01  8.00e-04  1.97e-01  4.16e-04  2.57e-03  9.78e-01  
  8  +4.9512e-01  +8.6458e-01  3.69e-01  1.54e-04  3.80e-02  1.94e-03  4.58e-04  8.28e-01  
  9  +4.9239e-01  +8.2056e-01  3.28e-01  1.20e-04  2.97e-02  1.42e-03  3.58e-04  3.92e-01  
 10  +4.9071e-01  +7.9732e-01  3.07e-01  9.92e-05  2.45e-02  1.18e-03  2.96e-04  3.22e-01  
 11  +4.8982e-01  +7.8433e-01  2.95e-01  9.87e-05  2.43e-02  1.05e-03  2.96e-04  2.51e-02  
 12  +4.7951e-01  +6.9826e-01  2.19e-01  6.04e-05  1.49e-02  6.81e-04  1.88e-04  4.86e-01  
 13  +4.7761e-01  +6.7898e-01  2.01e-01  5.71e-05  1.40e-02  4.03e-04  1.80e-04  2.86e-01  
 14  +4.6400e-01  +5.9460e-01  1.31e-01  3.35e-05  8.22e-03  1.87e-04  1.12e-04  4.93e-01  
 15  +4.5748e-01  +5.6094e-01  1.03e-01  2.51e-05  6.16e-03  1.28e-04  8.60e-05  3.17e-01  
 16  +4.4924e-01  +5.1990e-01  7.07e-02  1.62e-05  3.97e-03  7.04e-05  5.75e-05  4.43e-01  
 17  +4.4414e-01  +4.9570e-01  5.16e-02  1.14e-05  2.79e-03  4.70e-05  4.15e-05  3.35e-01  
 18  +4.4069e-01  +4.7799e-01  3.73e-02  7.95e-06  1.95e-03  1.96e-05  2.94e-05  6.15e-01  
 19  +4.3550e-01  +4.5494e-01  1.94e-02  4.02e-06  9.84e-04  5.44e-06  1.54e-05  7.49e-01  
 20  +4.3059e-01  +4.3451e-01  3.92e-03  7.95e-07  1.94e-04  2.41e-07  3.16e-06  9.90e-01  
 21  +4.2927e-01  +4.2945e-01  1.81e-04  3.65e-08  8.94e-06  1.01e-08  1.48e-07  9.73e-01  
 22  +4.2920e-01  +4.2920e-01  1.82e-06  3.68e-10  9.00e-08  1.01e-10  1.49e-09  9.90e-01  
 23  +4.2920e-01  +4.2920e-01  1.83e-08  3.68e-12  9.01e-10  1.01e-12  1.49e-11  9.90e-01  
 24  +4.2920e-01  +4.2920e-01  1.90e-10  3.82e-14  9.35e-12  1.06e-14  1.56e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 434.3661ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:25 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:25 PM: Optimal value: 4.292e-01
(CVXPY) Sep 20 08:01:25 PM: Compilation took 1.053e-01 seconds
(CVXPY) Sep 20 08:01:25 PM: Solver (including time spent in interface) took 4.590e-01 seconds
Iteration: 30, Objective: 0.4292
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:25 PM: Your problem has 5311 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:25 PM: Finished problem compilation (took 9.265e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5311
  constraints   = 10311
  nnz(P)        = 0
  nnz(A)        = 107022
  cones (total) = 1
    : Nonnegative = 1,  numel = 10311

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.7976e-01  +1.0858e+03  1.09e+03  4.36e-01  7.81e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3085e-01  +1.2090e+02  1.20e+02  1.69e-01  3.81e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0856e-01  +3.1350e+01  3.08e+01  1.22e-01  2.76e+01  4.58e-05  2.52e-01  3.03e-01  
  4  +5.0104e-01  +3.1248e+00  2.62e+00  1.81e-02  4.27e+00  5.97e-06  1.58e-01  6.25e-01  
  5  +5.0030e-01  +1.4515e+00  9.51e-01  6.50e-03  1.56e+00  4.03e-05  1.01e-01  7.32e-01  
  6  +5.0008e-01  +9.0797e-01  4.08e-01  2.74e-03  6.64e-01  4.10e-05  3.48e-02  6.99e-01  
  7  +4.9929e-01  +9.3272e-01  4.33e-01  8.30e-04  2.04e-01  4.32e-04  2.66e-03  9.67e-01  
  8  +4.9511e-01  +8.8142e-01  3.86e-01  1.64e-04  4.06e-02  1.94e-03  4.89e-04  8.22e-01  
  9  +4.9321e-01  +8.3548e-01  3.42e-01  1.35e-04  3.34e-02  1.32e-03  4.02e-04  3.64e-01  
 10  +4.9109e-01  +8.0955e-01  3.18e-01  1.09e-04  2.68e-02  1.20e-03  3.24e-04  2.95e-01  
 11  +4.8958e-01  +7.7211e-01  2.83e-01  9.26e-05  2.28e-02  6.48e-04  2.77e-04  4.38e-01  
 12  +4.8201e-01  +7.0145e-01  2.19e-01  6.77e-05  1.66e-02  2.72e-04  2.09e-04  5.05e-01  
 13  +4.6967e-01  +6.2155e-01  1.52e-01  4.14e-05  1.01e-02  1.08e-04  1.34e-04  5.72e-01  
 14  +4.6034e-01  +5.7265e-01  1.12e-01  2.81e-05  6.89e-03  6.24e-05  9.49e-05  4.19e-01  
 15  +4.5155e-01  +5.2925e-01  7.77e-02  1.82e-05  4.45e-03  3.08e-05  6.36e-05  5.04e-01  
 16  +4.4347e-01  +4.9138e-01  4.79e-02  1.06e-05  2.59e-03  1.49e-05  3.84e-05  5.25e-01  
 17  +4.4138e-01  +4.8067e-01  3.93e-02  8.44e-06  2.06e-03  7.41e-06  3.09e-05  5.84e-01  
 18  +4.3494e-01  +4.5283e-01  1.79e-02  3.72e-06  9.10e-04  2.07e-06  1.42e-05  7.81e-01  
 19  +4.3058e-01  +4.3480e-01  4.23e-03  8.62e-07  2.11e-04  3.20e-07  3.40e-06  9.08e-01  
 20  +4.2995e-01  +4.3233e-01  2.38e-03  4.82e-07  1.18e-04  1.61e-07  1.92e-06  6.19e-01  
 21  +4.2920e-01  +4.2948e-01  2.79e-04  5.61e-08  1.37e-05  1.45e-08  2.26e-07  9.87e-01  
 22  +4.2910e-01  +4.2910e-01  3.36e-06  6.76e-10  1.65e-07  1.73e-10  2.72e-09  9.90e-01  
 23  +4.2910e-01  +4.2910e-01  3.36e-08  6.77e-12  1.65e-09  1.74e-12  2.72e-11  9.90e-01  
 24  +4.2910e-01  +4.2910e-01  3.54e-10  7.11e-14  1.74e-11  1.84e-14  2.89e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 422.9283ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:25 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:25 PM: Optimal value: 4.291e-01
(CVXPY) Sep 20 08:01:25 PM: Compilation took 9.265e-02 seconds
(CVXPY) Sep 20 08:01:25 PM: Solver (including time spent in interface) took 4.429e-01 seconds
Iteration: 31, Objective: 0.4291
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:26 PM: Your problem has 5318 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:26 PM: Finished problem compilation (took 9.531e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5318
  constraints   = 10318
  nnz(P)        = 0
  nnz(A)        = 107383
  cones (total) = 1
    : Nonnegative = 1,  numel = 10318

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.7977e-01  +1.0857e+03  1.09e+03  4.36e-01  7.80e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3084e-01  +1.2086e+02  1.20e+02  1.69e-01  3.81e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0855e-01  +3.1339e+01  3.08e+01  1.22e-01  2.76e+01  4.58e-05  2.52e-01  3.03e-01  
  4  +5.0104e-01  +3.1231e+00  2.62e+00  1.81e-02  4.27e+00  5.97e-06  1.58e-01  6.25e-01  
  5  +5.0027e-01  +1.3895e+00  8.89e-01  6.07e-03  1.46e+00  4.16e-05  9.68e-02  7.83e-01  
  6  +5.0007e-01  +9.0667e-01  4.07e-01  2.72e-03  6.59e-01  4.40e-05  3.20e-02  7.17e-01  
  7  +4.9889e-01  +9.2673e-01  4.28e-01  5.92e-04  1.46e-01  6.22e-04  1.83e-03  9.79e-01  
  8  +4.9533e-01  +8.7774e-01  3.82e-01  1.81e-04  4.46e-02  1.73e-03  5.38e-04  7.22e-01  
  9  +4.9323e-01  +8.2174e-01  3.29e-01  1.38e-04  3.41e-02  1.14e-03  4.11e-04  4.42e-01  
 10  +4.9155e-01  +8.0243e-01  3.11e-01  1.13e-04  2.78e-02  1.06e-03  3.36e-04  2.92e-01  
 11  +4.9109e-01  +7.8102e-01  2.90e-01  1.10e-04  2.70e-02  6.98e-04  3.28e-04  2.28e-01  
 12  +4.8453e-01  +7.2495e-01  2.40e-01  7.58e-05  1.87e-02  5.08e-04  2.32e-04  4.38e-01  
 13  +4.8027e-01  +6.9408e-01  2.14e-01  6.46e-05  1.59e-02  3.73e-04  2.01e-04  2.50e-01  
 14  +4.7494e-01  +6.4857e-01  1.74e-01  5.19e-05  1.27e-02  3.68e-06  1.66e-04  7.97e-01  
 15  +4.5946e-01  +5.6582e-01  1.06e-01  2.68e-05  6.56e-03  2.42e-06  9.06e-05  5.06e-01  
 16  +4.5485e-01  +5.4412e-01  8.93e-02  2.15e-05  5.27e-03  2.33e-06  7.40e-05  3.09e-01  
 17  +4.4549e-01  +5.0050e-01  5.50e-02  1.23e-05  3.00e-03  1.86e-06  4.40e-05  6.43e-01  
 18  +4.4264e-01  +4.8769e-01  4.51e-02  9.83e-06  2.40e-03  1.64e-06  3.56e-05  3.17e-01  
 19  +4.3931e-01  +4.7281e-01  3.35e-02  7.13e-06  1.74e-03  1.34e-06  2.62e-05  4.42e-01  
 20  +4.3364e-01  +4.4871e-01  1.51e-02  3.09e-06  7.55e-04  6.50e-07  1.17e-05  6.75e-01  
 21  +4.2971e-01  +4.3284e-01  3.13e-03  6.21e-07  1.52e-04  1.51e-07  2.45e-06  9.12e-01  
 22  +4.2867e-01  +4.2885e-01  1.84e-04  3.62e-08  8.84e-06  8.83e-09  1.44e-07  9.45e-01  
 23  +4.2860e-01  +4.2860e-01  1.85e-06  3.65e-10  8.91e-08  8.90e-11  1.46e-09  9.90e-01  
 24  +4.2860e-01  +4.2860e-01  1.86e-08  3.65e-12  8.92e-10  8.91e-13  1.46e-11  9.90e-01  
 25  +4.2860e-01  +4.2860e-01  1.95e-10  3.83e-14  9.36e-12  9.46e-15  1.55e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 366.503ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:26 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:26 PM: Optimal value: 4.286e-01
(CVXPY) Sep 20 08:01:26 PM: Compilation took 9.531e-02 seconds
(CVXPY) Sep 20 08:01:26 PM: Solver (including time spent in interface) took 3.844e-01 seconds
Iteration: 32, Objective: 0.4286
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:26 PM: Your problem has 5328 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:27 PM: Finished problem compilation (took 1.059e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5328
  constraints   = 10328
  nnz(P)        = 0
  nnz(A)        = 107861
  cones (total) = 1
    : Nonnegative = 1,  numel = 10328

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7981e-01  +1.0855e+03  1.08e+03  4.36e-01  7.80e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3084e-01  +1.2083e+02  1.20e+02  1.69e-01  3.80e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0855e-01  +3.1327e+01  3.08e+01  1.22e-01  2.76e+01  4.58e-05  2.52e-01  3.04e-01  
  4  +5.0104e-01  +3.1206e+00  2.62e+00  1.81e-02  4.26e+00  5.97e-06  1.58e-01  6.26e-01  
  5  +5.0027e-01  +1.3861e+00  8.86e-01  6.05e-03  1.46e+00  4.16e-05  9.63e-02  7.87e-01  
  6  +5.0007e-01  +9.1040e-01  4.10e-01  2.74e-03  6.65e-01  4.43e-05  3.20e-02  7.17e-01  
  7  +4.9890e-01  +9.4503e-01  4.46e-01  6.08e-04  1.50e-01  6.21e-04  1.88e-03  9.90e-01  
  8  +4.9542e-01  +8.9251e-01  3.97e-01  1.88e-04  4.65e-02  1.68e-03  5.61e-04  7.18e-01  
  9  +4.9220e-01  +8.3300e-01  3.41e-01  1.36e-04  3.36e-02  1.39e-03  4.07e-04  3.83e-01  
 10  +4.9093e-01  +8.1039e-01  3.19e-01  1.12e-04  2.76e-02  1.16e-03  3.35e-04  3.35e-01  
 11  +4.9037e-01  +7.8863e-01  2.98e-01  1.10e-04  2.70e-02  8.27e-04  3.29e-04  1.64e-01  
 12  +4.8584e-01  +7.5029e-01  2.64e-01  8.59e-05  2.11e-02  7.08e-04  2.62e-04  2.78e-01  
 13  +4.8572e-01  +7.4631e-01  2.61e-01  8.56e-05  2.11e-02  6.40e-04  2.61e-04  6.05e-02  
 14  +4.7815e-01  +6.9146e-01  2.13e-01  6.24e-05  1.53e-02  4.80e-04  1.95e-04  3.19e-01  
 15  +4.7665e-01  +6.7674e-01  2.00e-01  5.86e-05  1.44e-02  3.36e-04  1.85e-04  2.34e-01  
 16  +4.6314e-01  +5.9240e-01  1.29e-01  3.34e-05  8.18e-03  1.43e-04  1.11e-04  5.55e-01  
 17  +4.5472e-01  +5.4888e-01  9.42e-02  2.26e-05  5.53e-03  8.38e-05  7.76e-05  4.18e-01  
 18  +4.4783e-01  +5.1547e-01  6.76e-02  1.54e-05  3.75e-03  5.11e-05  5.42e-05  4.01e-01  
 19  +4.4435e-01  +4.9895e-01  5.46e-02  1.20e-05  2.94e-03  3.59e-05  4.31e-05  3.14e-01  
 20  +4.4040e-01  +4.8035e-01  4.00e-02  8.50e-06  2.08e-03  1.98e-05  3.10e-05  4.73e-01  
 21  +4.3408e-01  +4.5175e-01  1.77e-02  3.56e-06  8.68e-04  1.25e-06  1.34e-05  9.90e-01  
 22  +4.3029e-01  +4.3678e-01  6.49e-03  1.28e-06  3.13e-04  3.51e-07  4.97e-06  9.90e-01  
 23  +4.2807e-01  +4.2852e-01  4.54e-04  8.87e-08  2.16e-05  2.42e-08  3.51e-07  9.37e-01  
 24  +4.2790e-01  +4.2791e-01  4.60e-06  8.97e-10  2.19e-07  2.45e-10  3.55e-09  9.90e-01  
 25  +4.2790e-01  +4.2790e-01  4.60e-08  8.97e-12  2.19e-09  2.45e-12  3.55e-11  9.90e-01  
 26  +4.2790e-01  +4.2790e-01  4.60e-10  8.98e-14  2.19e-11  2.46e-14  3.58e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 449.1907ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:27 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:27 PM: Optimal value: 4.279e-01
(CVXPY) Sep 20 08:01:27 PM: Compilation took 1.059e-01 seconds
(CVXPY) Sep 20 08:01:27 PM: Solver (including time spent in interface) took 4.689e-01 seconds
Iteration: 33, Objective: 0.4279
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:27 PM: Your problem has 5338 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:27 PM: Finished problem compilation (took 1.042e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5338
  constraints   = 10338
  nnz(P)        = 0
  nnz(A)        = 108237
  cones (total) = 1
    : Nonnegative = 1,  numel = 10338

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7985e-01  +1.0855e+03  1.08e+03  4.36e-01  7.79e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3084e-01  +1.2082e+02  1.20e+02  1.69e-01  3.79e+01  1.65e-02  2.73e-01  9.42e-01  
  3  +5.0855e-01  +3.1322e+01  3.08e+01  1.22e-01  2.75e+01  4.57e-05  2.52e-01  3.03e-01  
  4  +5.0104e-01  +3.1170e+00  2.62e+00  1.81e-02  4.26e+00  5.97e-06  1.58e-01  6.26e-01  
  5  +5.0027e-01  +1.3897e+00  8.89e-01  6.08e-03  1.46e+00  4.15e-05  9.63e-02  7.85e-01  
  6  +5.0008e-01  +9.2276e-01  4.23e-01  2.83e-03  6.85e-01  4.44e-05  3.29e-02  7.10e-01  
  7  +4.9895e-01  +9.3812e-01  4.39e-01  6.14e-04  1.51e-01  5.97e-04  1.91e-03  9.90e-01  
  8  +4.9550e-01  +8.8791e-01  3.92e-01  1.87e-04  4.61e-02  1.66e-03  5.57e-04  7.23e-01  
  9  +4.9227e-01  +8.3038e-01  3.38e-01  1.36e-04  3.35e-02  1.39e-03  4.06e-04  3.77e-01  
 10  +4.9113e-01  +8.0820e-01  3.17e-01  1.12e-04  2.76e-02  1.13e-03  3.35e-04  3.50e-01  
 11  +4.9057e-01  +7.9164e-01  3.01e-01  1.10e-04  2.72e-02  8.92e-04  3.31e-04  1.12e-01  
 12  +4.8602e-01  +7.4732e-01  2.61e-01  8.55e-05  2.10e-02  6.58e-04  2.60e-04  3.54e-01  
 13  +4.8581e-01  +7.4184e-01  2.56e-01  8.47e-05  2.08e-02  5.65e-04  2.58e-04  9.64e-02  
 14  +4.7832e-01  +6.8782e-01  2.09e-01  6.17e-05  1.51e-02  3.97e-04  1.93e-04  3.56e-01  
 15  +4.7080e-01  +6.2827e-01  1.57e-01  4.44e-05  1.09e-02  4.02e-06  1.44e-04  8.23e-01  
 16  +4.6091e-01  +5.7657e-01  1.16e-01  2.96e-05  7.23e-03  3.08e-06  9.94e-05  3.80e-01  
 17  +4.5222e-01  +5.3439e-01  8.22e-02  1.94e-05  4.74e-03  2.44e-06  6.74e-05  4.57e-01  
 18  +4.4682e-01  +5.0912e-01  6.23e-02  1.40e-05  3.41e-03  2.15e-06  4.96e-05  4.67e-01  
 19  +4.4310e-01  +4.9260e-01  4.95e-02  1.08e-05  2.64e-03  1.78e-06  3.91e-05  2.90e-01  
 20  +4.3841e-01  +4.7216e-01  3.37e-02  7.14e-06  1.74e-03  1.26e-06  2.64e-05  3.98e-01  
 21  +4.3222e-01  +4.4551e-01  1.33e-02  2.68e-06  6.54e-04  5.91e-07  1.03e-05  8.07e-01  
 22  +4.2938e-01  +4.3388e-01  4.50e-03  8.91e-07  2.17e-04  2.36e-07  3.50e-06  9.90e-01  
 23  +4.2775e-01  +4.2789e-01  1.39e-04  2.74e-08  6.69e-06  7.17e-09  1.09e-07  9.76e-01  
 24  +4.2770e-01  +4.2770e-01  1.40e-06  2.75e-10  6.70e-08  7.18e-11  1.09e-09  9.90e-01  
 25  +4.2770e-01  +4.2770e-01  1.40e-08  2.75e-12  6.70e-10  7.24e-13  1.10e-11  9.90e-01  
 26  +4.2770e-01  +4.2770e-01  1.40e-10  2.75e-14  6.71e-12  7.30e-15  1.11e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 468.429ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:28 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:28 PM: Optimal value: 4.277e-01
(CVXPY) Sep 20 08:01:28 PM: Compilation took 1.042e-01 seconds
(CVXPY) Sep 20 08:01:28 PM: Solver (including time spent in interface) took 4.886e-01 seconds
Iteration: 34, Objective: 0.4277
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:28 PM: Your problem has 5348 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:28 PM: Finished problem compilation (took 1.168e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5348
  constraints   = 10348
  nnz(P)        = 0
  nnz(A)        = 108606
  cones (total) = 1
    : Nonnegative = 1,  numel = 10348

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7983e-01  +1.0854e+03  1.08e+03  4.36e-01  7.78e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3083e-01  +1.2079e+02  1.20e+02  1.69e-01  3.79e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0855e-01  +3.1316e+01  3.08e+01  1.22e-01  2.75e+01  4.57e-05  2.52e-01  3.04e-01  
  4  +5.0104e-01  +3.1178e+00  2.62e+00  1.81e-02  4.26e+00  5.97e-06  1.57e-01  6.26e-01  
  5  +5.0028e-01  +1.3989e+00  8.99e-01  6.15e-03  1.48e+00  4.15e-05  9.66e-02  7.80e-01  
  6  +5.0009e-01  +9.3570e-01  4.36e-01  2.92e-03  7.06e-01  4.44e-05  3.41e-02  6.93e-01  
  7  +4.9900e-01  +9.3382e-01  4.35e-01  6.29e-04  1.55e-01  5.73e-04  1.96e-03  9.90e-01  
  8  +4.9553e-01  +8.8552e-01  3.90e-01  1.85e-04  4.55e-02  1.67e-03  5.50e-04  7.33e-01  
  9  +4.9234e-01  +8.3099e-01  3.39e-01  1.35e-04  3.32e-02  1.41e-03  4.03e-04  3.75e-01  
 10  +4.9115e-01  +8.0556e-01  3.14e-01  1.12e-04  2.77e-02  1.08e-03  3.36e-04  3.55e-01  
 11  +4.9053e-01  +7.9257e-01  3.02e-01  1.12e-04  2.75e-02  9.30e-04  3.35e-04  6.11e-02  
 12  +4.8302e-01  +7.3035e-01  2.47e-01  7.37e-05  1.81e-02  7.31e-04  2.26e-04  4.33e-01  
 13  +4.8111e-01  +7.0670e-01  2.26e-01  6.93e-05  1.70e-02  4.07e-04  2.15e-04  3.09e-01  
 14  +4.6452e-01  +5.9959e-01  1.35e-01  3.51e-05  8.60e-03  1.88e-04  1.16e-04  5.49e-01  
 15  +4.5808e-01  +5.6664e-01  1.09e-01  2.67e-05  6.52e-03  1.28e-04  9.03e-05  3.24e-01  
 16  +4.4958e-01  +5.2471e-01  7.51e-02  1.71e-05  4.18e-03  6.17e-05  6.00e-05  5.26e-01  
 17  +4.4665e-01  +5.1017e-01  6.35e-02  1.41e-05  3.43e-03  3.63e-05  4.98e-05  4.32e-01  
 18  +4.3693e-01  +4.6594e-01  2.90e-02  6.05e-06  1.48e-03  4.89e-06  2.25e-05  8.82e-01  
 19  +4.3262e-01  +4.4694e-01  1.43e-02  2.91e-06  7.10e-04  9.67e-07  1.11e-05  9.49e-01  
 20  +4.2915e-01  +4.3343e-01  4.29e-03  8.59e-07  2.09e-04  2.75e-07  3.36e-06  7.68e-01  
 21  +4.2857e-01  +4.3116e-01  2.59e-03  5.13e-07  1.25e-04  1.46e-07  2.02e-06  7.89e-01  
 22  +4.2786e-01  +4.2854e-01  6.79e-04  1.34e-07  3.26e-05  3.52e-08  5.32e-07  9.90e-01  
 23  +4.2761e-01  +4.2762e-01  1.41e-05  2.77e-09  6.75e-07  7.29e-10  1.10e-08  9.80e-01  
 24  +4.2760e-01  +4.2760e-01  1.42e-07  2.80e-11  6.82e-09  7.36e-12  1.12e-10  9.90e-01  
 25  +4.2760e-01  +4.2760e-01  1.42e-09  2.80e-13  6.82e-11  7.49e-14  1.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 430.4419ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:29 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:29 PM: Optimal value: 4.276e-01
(CVXPY) Sep 20 08:01:29 PM: Compilation took 1.168e-01 seconds
(CVXPY) Sep 20 08:01:29 PM: Solver (including time spent in interface) took 4.491e-01 seconds
Iteration: 35, Objective: 0.4276
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:29 PM: Your problem has 5358 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:29 PM: Finished problem compilation (took 1.189e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5358
  constraints   = 10358
  nnz(P)        = 0
  nnz(A)        = 108950
  cones (total) = 1
    : Nonnegative = 1,  numel = 10358

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7979e-01  +1.0855e+03  1.08e+03  4.36e-01  7.77e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3081e-01  +1.2075e+02  1.20e+02  1.69e-01  3.78e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0854e-01  +3.1308e+01  3.08e+01  1.22e-01  2.74e+01  4.58e-05  2.52e-01  3.04e-01  
  4  +5.0104e-01  +3.1184e+00  2.62e+00  1.81e-02  4.26e+00  5.97e-06  1.57e-01  6.26e-01  
  5  +5.0028e-01  +1.3997e+00  8.99e-01  6.15e-03  1.48e+00  4.19e-05  9.59e-02  7.86e-01  
  6  +5.0008e-01  +9.3461e-01  4.35e-01  2.91e-03  7.03e-01  4.56e-05  3.29e-02  7.05e-01  
  7  +4.9881e-01  +9.4510e-01  4.46e-01  5.67e-04  1.40e-01  6.65e-04  1.75e-03  9.90e-01  
  8  +4.9525e-01  +8.9108e-01  3.96e-01  1.83e-04  4.52e-02  1.70e-03  5.47e-04  7.07e-01  
  9  +4.9221e-01  +8.3644e-01  3.44e-01  1.36e-04  3.34e-02  1.39e-03  4.06e-04  3.78e-01  
 10  +4.9135e-01  +8.1581e-01  3.24e-01  1.18e-04  2.91e-02  1.11e-03  3.54e-04  2.85e-01  
 11  +4.9135e-01  +7.9552e-01  3.04e-01  1.15e-04  2.82e-02  7.14e-04  3.43e-04  2.60e-01  
 12  +4.8750e-01  +7.3374e-01  2.46e-01  8.75e-05  2.15e-02  1.05e-04  2.66e-04  7.54e-01  
 13  +4.8069e-01  +6.8789e-01  2.07e-01  6.53e-05  1.60e-02  6.46e-05  2.03e-04  4.46e-01  
 14  +4.6458e-01  +5.9276e-01  1.28e-01  3.40e-05  8.32e-03  1.02e-05  1.13e-04  8.10e-01  
 15  +4.6004e-01  +5.7192e-01  1.12e-01  2.83e-05  6.91e-03  8.02e-06  9.52e-05  3.04e-01  
 16  +4.5099e-01  +5.2998e-01  7.90e-02  1.85e-05  4.51e-03  5.01e-06  6.46e-05  4.73e-01  
 17  +4.4653e-01  +5.0985e-01  6.33e-02  1.42e-05  3.47e-03  3.72e-06  5.07e-05  4.25e-01  
 18  +4.4067e-01  +4.8404e-01  4.34e-02  9.36e-06  2.28e-03  2.42e-06  3.43e-05  4.97e-01  
 19  +4.3747e-01  +4.7032e-01  3.28e-02  6.96e-06  1.70e-03  1.82e-06  2.59e-05  2.90e-01  
 20  +4.3075e-01  +4.4146e-01  1.07e-02  2.19e-06  5.33e-04  5.64e-07  8.47e-06  8.48e-01  
 21  +4.2902e-01  +4.3437e-01  5.35e-03  1.08e-06  2.63e-04  2.81e-07  4.22e-06  7.53e-01  
 22  +4.2795e-01  +4.3026e-01  2.31e-03  4.59e-07  1.12e-04  1.21e-07  1.82e-06  7.15e-01  
 23  +4.2726e-01  +4.2768e-01  4.19e-04  8.28e-08  2.02e-05  2.16e-08  3.31e-07  9.40e-01  
 24  +4.2714e-01  +4.2723e-01  9.15e-05  1.80e-08  4.40e-06  4.68e-09  7.21e-08  9.10e-01  
 25  +4.2710e-01  +4.2710e-01  9.30e-07  1.83e-10  4.47e-08  4.76e-11  7.33e-10  9.90e-01  
 26  +4.2710e-01  +4.2710e-01  9.30e-09  1.83e-12  4.47e-10  4.76e-13  7.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 520.7331ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:30 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:30 PM: Optimal value: 4.271e-01
(CVXPY) Sep 20 08:01:30 PM: Compilation took 1.189e-01 seconds
(CVXPY) Sep 20 08:01:30 PM: Solver (including time spent in interface) took 5.407e-01 seconds
Iteration: 36, Objective: 0.4271
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:30 PM: Your problem has 5364 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:30 PM: Finished problem compilation (took 1.258e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5364
  constraints   = 10364
  nnz(P)        = 0
  nnz(A)        = 109244
  cones (total) = 1
    : Nonnegative = 1,  numel = 10364

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7978e-01  +1.0855e+03  1.08e+03  4.36e-01  7.77e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3080e-01  +1.2073e+02  1.20e+02  1.69e-01  3.78e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0854e-01  +3.1302e+01  3.08e+01  1.22e-01  2.74e+01  4.58e-05  2.52e-01  3.04e-01  
  4  +5.0104e-01  +3.1188e+00  2.62e+00  1.81e-02  4.26e+00  5.97e-06  1.57e-01  6.26e-01  
  5  +5.0028e-01  +1.3970e+00  8.97e-01  6.14e-03  1.47e+00  4.21e-05  9.55e-02  7.90e-01  
  6  +5.0008e-01  +9.3241e-01  4.32e-01  2.89e-03  6.99e-01  4.61e-05  3.23e-02  7.11e-01  
  7  +4.9874e-01  +9.4348e-01  4.45e-01  5.42e-04  1.33e-01  6.98e-04  1.66e-03  9.90e-01  
  8  +4.9516e-01  +8.8812e-01  3.93e-01  1.81e-04  4.47e-02  1.70e-03  5.41e-04  6.98e-01  
  9  +4.9217e-01  +8.3371e-01  3.42e-01  1.34e-04  3.30e-02  1.36e-03  4.00e-04  3.92e-01  
 10  +4.9156e-01  +8.1532e-01  3.24e-01  1.19e-04  2.93e-02  1.08e-03  3.55e-04  2.73e-01  
 11  +4.9152e-01  +7.9446e-01  3.03e-01  1.13e-04  2.78e-02  6.71e-04  3.37e-04  3.05e-01  
 12  +4.8623e-01  +7.1735e-01  2.31e-01  8.07e-05  1.98e-02  7.03e-06  2.46e-04  8.70e-01  
 13  +4.7885e-01  +6.7364e-01  1.95e-01  5.95e-05  1.46e-02  6.26e-06  1.86e-04  3.18e-01  
 14  +4.6436e-01  +5.9291e-01  1.29e-01  3.40e-05  8.32e-03  4.17e-06  1.13e-04  6.90e-01  
 15  +4.5868e-01  +5.6627e-01  1.08e-01  2.69e-05  6.57e-03  3.67e-06  9.11e-05  3.55e-01  
 16  +4.4955e-01  +5.2392e-01  7.44e-02  1.73e-05  4.22e-03  2.60e-06  6.08e-05  4.28e-01  
 17  +4.4546e-01  +5.0531e-01  5.99e-02  1.34e-05  3.27e-03  2.28e-06  4.80e-05  4.00e-01  
 18  +4.3805e-01  +4.7220e-01  3.42e-02  7.25e-06  1.77e-03  1.52e-06  2.68e-05  7.68e-01  
 19  +4.3307e-01  +4.5054e-01  1.75e-02  3.59e-06  8.76e-04  8.83e-07  1.37e-05  9.10e-01  
 20  +4.3010e-01  +4.3849e-01  8.39e-03  1.70e-06  4.14e-04  4.38e-07  6.60e-06  8.64e-01  
 21  +4.2823e-01  +4.3128e-01  3.05e-03  6.11e-07  1.49e-04  1.60e-07  2.41e-06  7.41e-01  
 22  +4.2777e-01  +4.2957e-01  1.80e-03  3.57e-07  8.69e-05  9.34e-08  1.41e-06  6.13e-01  
 23  +4.2715e-01  +4.2729e-01  1.40e-04  2.75e-08  6.71e-06  7.19e-09  1.10e-07  9.49e-01  
 24  +4.2710e-01  +4.2710e-01  1.43e-06  2.82e-10  6.86e-08  7.36e-11  1.13e-09  9.90e-01  
 25  +4.2710e-01  +4.2710e-01  1.43e-08  2.82e-12  6.86e-10  7.36e-13  1.13e-11  9.90e-01  
 26  +4.2710e-01  +4.2710e-01  1.43e-10  2.82e-14  6.86e-12  7.49e-15  1.15e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 504.0737ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:31 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:31 PM: Optimal value: 4.271e-01
(CVXPY) Sep 20 08:01:31 PM: Compilation took 1.258e-01 seconds
(CVXPY) Sep 20 08:01:31 PM: Solver (including time spent in interface) took 5.242e-01 seconds
Iteration: 37, Objective: 0.4271
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:31 PM: Your problem has 5366 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:31 PM: Finished problem compilation (took 1.188e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5366
  constraints   = 10366
  nnz(P)        = 0
  nnz(A)        = 109505
  cones (total) = 1
    : Nonnegative = 1,  numel = 10366

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7979e-01  +1.0853e+03  1.08e+03  4.36e-01  7.77e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3080e-01  +1.2072e+02  1.20e+02  1.69e-01  3.78e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0854e-01  +3.1298e+01  3.08e+01  1.22e-01  2.74e+01  4.57e-05  2.51e-01  3.04e-01  
  4  +5.0104e-01  +3.1166e+00  2.62e+00  1.81e-02  4.25e+00  5.97e-06  1.57e-01  6.27e-01  
  5  +5.0027e-01  +1.3960e+00  8.96e-01  6.13e-03  1.47e+00  4.20e-05  9.54e-02  7.91e-01  
  6  +5.0008e-01  +9.2941e-01  4.29e-01  2.87e-03  6.94e-01  4.62e-05  3.18e-02  7.18e-01  
  7  +4.9868e-01  +9.4456e-01  4.46e-01  5.22e-04  1.29e-01  7.29e-04  1.60e-03  9.90e-01  
  8  +4.9507e-01  +8.8718e-01  3.92e-01  1.79e-04  4.42e-02  1.70e-03  5.35e-04  6.91e-01  
  9  +4.9215e-01  +8.3410e-01  3.42e-01  1.33e-04  3.28e-02  1.36e-03  3.98e-04  3.90e-01  
 10  +4.9155e-01  +8.1577e-01  3.24e-01  1.18e-04  2.92e-02  1.08e-03  3.54e-04  2.73e-01  
 11  +4.9143e-01  +7.9356e-01  3.02e-01  1.12e-04  2.75e-02  6.59e-04  3.34e-04  3.17e-01  
 12  +4.8485e-01  +7.1084e-01  2.26e-01  7.53e-05  1.85e-02  5.83e-05  2.30e-04  8.35e-01  
 13  +4.7451e-01  +6.4925e-01  1.75e-01  5.03e-05  1.23e-02  3.59e-05  1.60e-04  4.60e-01  
 14  +4.6211e-01  +5.8311e-01  1.21e-01  3.12e-05  7.63e-03  1.87e-05  1.04e-04  4.92e-01  
 15  +4.5391e-01  +5.4450e-01  9.06e-02  2.17e-05  5.29e-03  1.07e-05  7.48e-05  4.82e-01  
 16  +4.4686e-01  +5.1235e-01  6.55e-02  1.48e-05  3.62e-03  6.65e-06  5.28e-05  4.29e-01  
 17  +4.4336e-01  +4.9669e-01  5.33e-02  1.18e-05  2.88e-03  5.13e-06  4.26e-05  2.68e-01  
 18  +4.3786e-01  +4.7204e-01  3.42e-02  7.26e-06  1.77e-03  2.79e-06  2.69e-05  5.67e-01  
 19  +4.3368e-01  +4.5376e-01  2.01e-02  4.14e-06  1.01e-03  1.39e-06  1.57e-05  6.67e-01  
 20  +4.3008e-01  +4.3877e-01  8.69e-03  1.75e-06  4.27e-04  5.09e-07  6.77e-06  8.53e-01  
 21  +4.2874e-01  +4.3349e-01  4.75e-03  9.47e-07  2.31e-04  2.62e-07  3.71e-06  7.47e-01  
 22  +4.2754e-01  +4.2902e-01  1.48e-03  2.93e-07  7.13e-05  8.16e-08  1.16e-06  6.96e-01  
 23  +4.2701e-01  +4.2704e-01  3.24e-05  6.39e-09  1.56e-06  1.77e-09  2.55e-08  9.81e-01  
 24  +4.2700e-01  +4.2700e-01  3.26e-07  6.42e-11  1.57e-08  1.78e-11  2.56e-10  9.90e-01  
 25  +4.2700e-01  +4.2700e-01  3.33e-09  6.57e-13  1.60e-10  1.84e-13  2.64e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 480.5557ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:32 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:32 PM: Optimal value: 4.270e-01
(CVXPY) Sep 20 08:01:32 PM: Compilation took 1.188e-01 seconds
(CVXPY) Sep 20 08:01:32 PM: Solver (including time spent in interface) took 5.042e-01 seconds
Iteration: 38, Objective: 0.4270
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:32 PM: Your problem has 5376 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:32 PM: Finished problem compilation (took 1.136e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5376
  constraints   = 10376
  nnz(P)        = 0
  nnz(A)        = 109988
  cones (total) = 1
    : Nonnegative = 1,  numel = 10376

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7976e-01  +1.0853e+03  1.08e+03  4.36e-01  7.76e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3081e-01  +1.2073e+02  1.20e+02  1.69e-01  3.77e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0854e-01  +3.1301e+01  3.08e+01  1.22e-01  2.74e+01  4.57e-05  2.51e-01  3.04e-01  
  4  +5.0104e-01  +3.1161e+00  2.62e+00  1.81e-02  4.25e+00  5.97e-06  1.57e-01  6.27e-01  
  5  +5.0028e-01  +1.4103e+00  9.10e-01  6.23e-03  1.50e+00  4.18e-05  9.62e-02  7.80e-01  
  6  +5.0008e-01  +9.2990e-01  4.30e-01  2.87e-03  6.95e-01  4.57e-05  3.21e-02  7.20e-01  
  7  +4.9917e-01  +9.3890e-01  4.40e-01  7.50e-04  1.84e-01  4.90e-04  2.37e-03  9.62e-01  
  8  +4.9538e-01  +8.9108e-01  3.96e-01  1.80e-04  4.45e-02  1.80e-03  5.37e-04  7.82e-01  
  9  +4.9261e-01  +8.4105e-01  3.48e-01  1.40e-04  3.44e-02  1.48e-03  4.17e-04  3.33e-01  
 10  +4.9115e-01  +8.1418e-01  3.23e-01  1.15e-04  2.84e-02  1.18e-03  3.45e-04  3.37e-01  
 11  +4.9076e-01  +7.8552e-01  2.95e-01  1.10e-04  2.69e-02  6.28e-04  3.28e-04  3.41e-01  
 12  +4.8405e-01  +7.2572e-01  2.42e-01  7.63e-05  1.87e-02  3.81e-04  2.34e-04  4.99e-01  
 13  +4.8140e-01  +7.0193e-01  2.21e-01  7.02e-05  1.72e-02  2.10e-04  2.18e-04  3.39e-01  
 14  +4.6382e-01  +5.9482e-01  1.31e-01  3.39e-05  8.29e-03  1.08e-04  1.12e-04  5.54e-01  
 15  +4.5825e-01  +5.6790e-01  1.10e-01  2.69e-05  6.58e-03  7.94e-05  9.10e-05  2.83e-01  
 16  +4.5157e-01  +5.3616e-01  8.46e-02  1.97e-05  4.81e-03  4.82e-05  6.85e-05  3.97e-01  
 17  +4.4480e-01  +5.0492e-01  6.01e-02  1.34e-05  3.27e-03  3.03e-05  4.81e-05  3.71e-01  
 18  +4.4113e-01  +4.8830e-01  4.72e-02  1.03e-05  2.50e-03  2.14e-05  3.75e-05  3.02e-01  
 19  +4.3717e-01  +4.7082e-01  3.37e-02  7.15e-06  1.74e-03  1.42e-05  2.66e-05  3.43e-01  
 20  +4.3153e-01  +4.4581e-01  1.43e-02  2.91e-06  7.09e-04  2.98e-06  1.12e-05  8.25e-01  
 21  +4.2834e-01  +4.3314e-01  4.80e-03  9.59e-07  2.34e-04  9.16e-07  3.79e-06  6.98e-01  
 22  +4.2722e-01  +4.2857e-01  1.36e-03  2.69e-07  6.56e-05  7.77e-08  1.08e-06  9.90e-01  
 23  +4.2671e-01  +4.2673e-01  1.88e-05  3.73e-09  9.09e-07  1.06e-09  1.50e-08  9.87e-01  
 24  +4.2670e-01  +4.2670e-01  1.88e-07  3.73e-11  9.09e-09  1.06e-11  1.50e-10  9.90e-01  
 25  +4.2670e-01  +4.2670e-01  1.88e-09  3.73e-13  9.09e-11  1.07e-13  1.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 468.2077ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:33 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:33 PM: Optimal value: 4.267e-01
(CVXPY) Sep 20 08:01:33 PM: Compilation took 1.136e-01 seconds
(CVXPY) Sep 20 08:01:33 PM: Solver (including time spent in interface) took 4.910e-01 seconds
Iteration: 39, Objective: 0.4267
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:33 PM: Your problem has 5381 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:33 PM: Finished problem compilation (took 1.297e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5381
  constraints   = 10381
  nnz(P)        = 0
  nnz(A)        = 110393
  cones (total) = 1
    : Nonnegative = 1,  numel = 10381

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7972e-01  +1.0853e+03  1.08e+03  4.37e-01  7.76e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3079e-01  +1.2071e+02  1.20e+02  1.69e-01  3.77e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0854e-01  +3.1294e+01  3.08e+01  1.21e-01  2.74e+01  4.58e-05  2.51e-01  3.05e-01  
  4  +5.0104e-01  +3.1174e+00  2.62e+00  1.81e-02  4.25e+00  5.98e-06  1.57e-01  6.27e-01  
  5  +5.0027e-01  +1.3905e+00  8.90e-01  6.10e-03  1.46e+00  4.24e-05  9.43e-02  8.00e-01  
  6  +5.0007e-01  +9.1686e-01  4.17e-01  2.78e-03  6.72e-01  4.76e-05  2.96e-02  7.41e-01  
  7  +4.9888e-01  +9.3559e-01  4.37e-01  5.99e-04  1.47e-01  6.29e-04  1.86e-03  9.69e-01  
  8  +4.9519e-01  +8.8545e-01  3.90e-01  1.80e-04  4.44e-02  1.77e-03  5.37e-04  7.26e-01  
  9  +4.9224e-01  +8.3999e-01  3.48e-01  1.35e-04  3.33e-02  1.57e-03  4.04e-04  3.42e-01  
 10  +4.9096e-01  +8.2123e-01  3.30e-01  1.17e-04  2.89e-02  1.39e-03  3.50e-04  2.36e-01  
 11  +4.9069e-01  +7.9828e-01  3.08e-01  1.10e-04  2.70e-02  8.93e-04  3.28e-04  2.97e-01  
 12  +4.8476e-01  +7.1217e-01  2.27e-01  7.85e-05  1.93e-02  9.02e-06  2.41e-04  8.30e-01  
 13  +4.7527e-01  +6.5633e-01  1.81e-01  5.32e-05  1.30e-02  7.22e-06  1.69e-04  4.44e-01  
 14  +4.6494e-01  +6.0019e-01  1.35e-01  3.61e-05  8.82e-03  4.92e-06  1.19e-04  6.29e-01  
 15  +4.5539e-01  +5.5323e-01  9.78e-02  2.40e-05  5.85e-03  3.58e-06  8.23e-05  4.50e-01  
 16  +4.4778e-01  +5.1763e-01  6.99e-02  1.60e-05  3.90e-03  2.79e-06  5.66e-05  6.18e-01  
 17  +4.4260e-01  +4.9464e-01  5.20e-02  1.15e-05  2.81e-03  2.10e-06  4.18e-05  3.30e-01  
 18  +4.3783e-01  +4.7319e-01  3.54e-02  7.53e-06  1.83e-03  1.55e-06  2.80e-05  5.77e-01  
 19  +4.3118e-01  +4.4466e-01  1.35e-02  2.74e-06  6.67e-04  6.85e-07  1.06e-05  9.69e-01  
 20  +4.2787e-01  +4.3172e-01  3.85e-03  7.71e-07  1.88e-04  1.96e-07  3.07e-06  8.45e-01  
 21  +4.2654e-01  +4.2666e-01  1.14e-04  2.28e-08  5.55e-06  5.70e-09  9.19e-08  9.86e-01  
 22  +4.2650e-01  +4.2650e-01  1.14e-06  2.28e-10  5.56e-08  5.71e-11  9.21e-10  9.90e-01  
 23  +4.2650e-01  +4.2650e-01  1.14e-08  2.28e-12  5.56e-10  5.71e-13  9.21e-12  9.90e-01  
 24  +4.2650e-01  +4.2650e-01  1.14e-10  2.29e-14  5.56e-12  5.75e-15  9.27e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 492.8404ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:34 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:34 PM: Optimal value: 4.265e-01
(CVXPY) Sep 20 08:01:34 PM: Compilation took 1.297e-01 seconds
(CVXPY) Sep 20 08:01:34 PM: Solver (including time spent in interface) took 5.144e-01 seconds
Iteration: 40, Objective: 0.4265
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:34 PM: Your problem has 5391 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:34 PM: Finished problem compilation (took 1.355e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5391
  constraints   = 10391
  nnz(P)        = 0
  nnz(A)        = 110914
  cones (total) = 1
    : Nonnegative = 1,  numel = 10391

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7975e-01  +1.0852e+03  1.08e+03  4.37e-01  7.76e+01  3.79e-03  5.73e-01  5.87e-01  
  2  +5.3078e-01  +1.2067e+02  1.20e+02  1.69e-01  3.76e+01  1.65e-02  2.72e-01  9.43e-01  
  3  +5.0854e-01  +3.1277e+01  3.08e+01  1.21e-01  2.73e+01  4.57e-05  2.51e-01  3.05e-01  
  4  +5.0103e-01  +3.1133e+00  2.61e+00  1.81e-02  4.25e+00  5.98e-06  1.57e-01  6.28e-01  
  5  +5.0028e-01  +1.4143e+00  9.14e-01  6.26e-03  1.50e+00  4.20e-05  9.54e-02  7.83e-01  
  6  +5.0008e-01  +9.2409e-01  4.24e-01  2.83e-03  6.85e-01  4.62e-05  3.11e-02  7.12e-01  
  7  +4.9885e-01  +9.4711e-01  4.48e-01  5.94e-04  1.46e-01  6.45e-04  1.83e-03  9.76e-01  
  8  +4.9521e-01  +8.9391e-01  3.99e-01  1.84e-04  4.54e-02  1.74e-03  5.49e-04  7.19e-01  
  9  +4.9199e-01  +8.4270e-01  3.51e-01  1.36e-04  3.34e-02  1.52e-03  4.06e-04  3.56e-01  
 10  +4.9099e-01  +8.2569e-01  3.35e-01  1.20e-04  2.95e-02  1.33e-03  3.59e-04  2.24e-01  
 11  +4.9082e-01  +8.0315e-01  3.12e-01  1.12e-04  2.75e-02  8.64e-04  3.34e-04  3.00e-01  
 12  +4.8714e-01  +7.2987e-01  2.43e-01  9.08e-05  2.23e-02  8.14e-06  2.76e-04  7.73e-01  
 13  +4.7971e-01  +6.8554e-01  2.06e-01  6.44e-05  1.58e-02  7.56e-06  2.01e-04  3.20e-01  
 14  +4.7321e-01  +6.4740e-01  1.74e-01  5.11e-05  1.25e-02  6.02e-06  1.64e-04  4.83e-01  
 15  +4.6066e-01  +5.8057e-01  1.20e-01  3.10e-05  7.57e-03  4.12e-06  1.04e-04  4.48e-01  
 16  +4.5473e-01  +5.5207e-01  9.73e-02  2.38e-05  5.81e-03  3.46e-06  8.19e-05  3.47e-01  
 17  +4.4639e-01  +5.1308e-01  6.67e-02  1.52e-05  3.70e-03  2.55e-06  5.42e-05  5.53e-01  
 18  +4.4145e-01  +4.9067e-01  4.92e-02  1.08e-05  2.63e-03  2.00e-06  3.94e-05  4.59e-01  
 19  +4.3741e-01  +4.7276e-01  3.54e-02  7.53e-06  1.83e-03  1.52e-06  2.80e-05  4.53e-01  
 20  +4.3149e-01  +4.4727e-01  1.58e-02  3.23e-06  7.88e-04  7.47e-07  1.25e-05  8.01e-01  
 21  +4.2780e-01  +4.3234e-01  4.54e-03  9.14e-07  2.23e-04  2.24e-07  3.63e-06  8.72e-01  
 22  +4.2629e-01  +4.2656e-01  2.62e-04  5.23e-08  1.27e-05  1.28e-08  2.11e-07  9.55e-01  
 23  +4.2620e-01  +4.2620e-01  2.74e-06  5.49e-10  1.34e-07  1.35e-10  2.22e-09  9.90e-01  
 24  +4.2620e-01  +4.2620e-01  2.75e-08  5.49e-12  1.34e-09  1.35e-12  2.22e-11  9.90e-01  
 25  +4.2620e-01  +4.2620e-01  2.75e-10  5.49e-14  1.34e-11  1.36e-14  2.23e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 534.9592ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:35 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:35 PM: Optimal value: 4.262e-01
(CVXPY) Sep 20 08:01:35 PM: Compilation took 1.355e-01 seconds
(CVXPY) Sep 20 08:01:35 PM: Solver (including time spent in interface) took 5.572e-01 seconds
Iteration: 41, Objective: 0.4262
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:35 PM: Your problem has 5401 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:35 PM: Finished problem compilation (took 1.250e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5401
  constraints   = 10401
  nnz(P)        = 0
  nnz(A)        = 111457
  cones (total) = 1
    : Nonnegative = 1,  numel = 10401

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0014e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7973e-01  +1.0852e+03  1.08e+03  4.37e-01  7.75e+01  3.79e-03  5.73e-01  5.87e-01  
  2  +5.3076e-01  +1.2063e+02  1.20e+02  1.69e-01  3.75e+01  1.65e-02  2.72e-01  9.44e-01  
  3  +5.0853e-01  +3.1271e+01  3.08e+01  1.21e-01  2.73e+01  4.58e-05  2.51e-01  3.05e-01  
  4  +5.0103e-01  +3.1143e+00  2.61e+00  1.81e-02  4.25e+00  5.98e-06  1.56e-01  6.28e-01  
  5  +5.0032e-01  +1.5116e+00  1.01e+00  6.94e-03  1.66e+00  4.03e-05  1.00e-01  7.15e-01  
  6  +5.0008e-01  +9.0814e-01  4.08e-01  2.74e-03  6.61e-01  4.36e-05  3.15e-02  7.45e-01  
  7  +4.9900e-01  +1.0033e+00  5.04e-01  7.20e-04  1.77e-01  5.83e-04  2.23e-03  9.90e-01  
  8  +4.9550e-01  +9.4255e-01  4.47e-01  2.11e-04  5.20e-02  1.67e-03  6.28e-04  7.33e-01  
  9  +4.9244e-01  +8.6607e-01  3.74e-01  1.56e-04  3.85e-02  1.22e-03  4.68e-04  3.83e-01  
 10  +4.9079e-01  +8.3929e-01  3.48e-01  1.30e-04  3.19e-02  1.07e-03  3.89e-04  2.77e-01  
 11  +4.9028e-01  +8.0756e-01  3.17e-01  1.15e-04  2.82e-02  6.43e-04  3.44e-04  3.72e-01  
 12  +4.8856e-01  +7.6394e-01  2.75e-01  1.08e-04  2.66e-02  2.64e-04  3.30e-04  3.69e-01  
 13  +4.8587e-01  +7.4366e-01  2.58e-01  9.44e-05  2.32e-02  2.36e-04  2.90e-04  1.85e-01  
 14  +4.8158e-01  +7.0206e-01  2.20e-01  7.39e-05  1.81e-02  3.44e-05  2.30e-04  7.70e-01  
 15  +4.6316e-01  +5.9402e-01  1.31e-01  3.39e-05  8.28e-03  2.07e-05  1.12e-04  5.57e-01  
 16  +4.5762e-01  +5.6736e-01  1.10e-01  2.71e-05  6.61e-03  1.55e-05  9.17e-05  2.88e-01  
 17  +4.5059e-01  +5.3427e-01  8.37e-02  1.96e-05  4.78e-03  9.99e-06  6.83e-05  3.96e-01  
 18  +4.4434e-01  +5.0554e-01  6.12e-02  1.37e-05  3.34e-03  6.24e-06  4.93e-05  4.36e-01  
 19  +4.3961e-01  +4.8430e-01  4.47e-02  9.72e-06  2.37e-03  4.20e-06  3.58e-05  3.75e-01  
 20  +4.3619e-01  +4.6930e-01  3.31e-02  7.05e-06  1.72e-03  2.98e-06  2.64e-05  3.24e-01  
 21  +4.3227e-01  +4.5216e-01  1.99e-02  4.13e-06  1.01e-03  1.63e-06  1.59e-05  5.21e-01  
 22  +4.3005e-01  +4.4171e-01  1.17e-02  2.37e-06  5.78e-04  6.17e-07  9.24e-06  9.90e-01  
 23  +4.2719e-01  +4.3081e-01  3.61e-03  7.28e-07  1.77e-04  1.90e-07  2.91e-06  7.19e-01  
 24  +4.2597e-01  +4.2614e-01  1.76e-04  3.53e-08  8.60e-06  8.86e-09  1.43e-07  9.88e-01  
 25  +4.2590e-01  +4.2590e-01  1.79e-06  3.59e-10  8.74e-08  9.01e-11  1.45e-09  9.90e-01  
 26  +4.2590e-01  +4.2590e-01  1.79e-08  3.59e-12  8.74e-10  9.02e-13  1.45e-11  9.90e-01  
 27  +4.2590e-01  +4.2590e-01  1.79e-10  3.59e-14  8.75e-12  9.08e-15  1.46e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 532.0333ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:36 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:36 PM: Optimal value: 4.259e-01
(CVXPY) Sep 20 08:01:36 PM: Compilation took 1.250e-01 seconds
(CVXPY) Sep 20 08:01:36 PM: Solver (including time spent in interface) took 5.533e-01 seconds
Iteration: 42, Objective: 0.4259
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:36 PM: Your problem has 5404 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:36 PM: Finished problem compilation (took 1.301e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5404
  constraints   = 10404
  nnz(P)        = 0
  nnz(A)        = 111692
  cones (total) = 1
    : Nonnegative = 1,  numel = 10404

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0014e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7972e-01  +1.0852e+03  1.08e+03  4.37e-01  7.75e+01  3.79e-03  5.73e-01  5.87e-01  
  2  +5.3076e-01  +1.2061e+02  1.20e+02  1.69e-01  3.75e+01  1.65e-02  2.72e-01  9.44e-01  
  3  +5.0853e-01  +3.1267e+01  3.08e+01  1.21e-01  2.73e+01  4.58e-05  2.51e-01  3.05e-01  
  4  +5.0103e-01  +3.1133e+00  2.61e+00  1.81e-02  4.25e+00  5.98e-06  1.56e-01  6.28e-01  
  5  +5.0032e-01  +1.5058e+00  1.01e+00  6.90e-03  1.65e+00  4.05e-05  1.00e-01  7.21e-01  
  6  +5.0007e-01  +9.1072e-01  4.11e-01  2.75e-03  6.64e-01  4.42e-05  3.12e-02  7.52e-01  
  7  +4.9887e-01  +1.0000e+00  5.01e-01  6.53e-04  1.61e-01  6.45e-04  2.01e-03  9.90e-01  
  8  +4.9539e-01  +9.3704e-01  4.42e-01  2.09e-04  5.14e-02  1.66e-03  6.21e-04  7.10e-01  
  9  +4.9224e-01  +8.6451e-01  3.72e-01  1.53e-04  3.77e-02  1.26e-03  4.59e-04  3.84e-01  
 10  +4.9080e-01  +8.3922e-01  3.48e-01  1.30e-04  3.19e-02  1.09e-03  3.88e-04  2.65e-01  
 11  +4.9015e-01  +8.0957e-01  3.19e-01  1.15e-04  2.82e-02  6.99e-04  3.43e-04  3.49e-01  
 12  +4.8838e-01  +7.6208e-01  2.74e-01  1.07e-04  2.64e-02  2.53e-04  3.28e-04  4.04e-01  
 13  +4.8623e-01  +7.4609e-01  2.60e-01  9.62e-05  2.36e-02  2.29e-04  2.95e-04  1.55e-01  
 14  +4.8610e-01  +7.4200e-01  2.56e-01  9.49e-05  2.33e-02  1.85e-04  2.91e-04  1.59e-01  
 15  +4.7627e-01  +6.7787e-01  2.02e-01  6.07e-05  1.49e-02  1.45e-04  1.92e-04  4.08e-01  
 16  +4.6096e-01  +5.8783e-01  1.27e-01  3.29e-05  8.02e-03  5.95e-05  1.10e-04  5.87e-01  
 17  +4.5631e-01  +5.6470e-01  1.08e-01  2.68e-05  6.54e-03  4.08e-05  9.16e-05  3.30e-01  
 18  +4.4654e-01  +5.1773e-01  7.12e-02  1.64e-05  4.00e-03  2.11e-05  5.86e-05  4.85e-01  
 19  +4.4280e-01  +5.0013e-01  5.73e-02  1.28e-05  3.11e-03  1.36e-05  4.64e-05  3.94e-01  
 20  +4.3429e-01  +4.6199e-01  2.77e-02  5.86e-06  1.43e-03  4.88e-06  2.23e-05  6.64e-01  
 21  +4.3280e-01  +4.5514e-01  2.23e-02  4.66e-06  1.14e-03  3.31e-06  1.79e-05  3.85e-01  
 22  +4.3006e-01  +4.4313e-01  1.31e-02  2.69e-06  6.54e-04  1.23e-06  1.05e-05  7.46e-01  
 23  +4.2731e-01  +4.3225e-01  4.95e-03  1.00e-06  2.45e-04  4.37e-07  4.02e-06  6.64e-01  
 24  +4.2573e-01  +4.2606e-01  3.38e-04  6.81e-08  1.66e-05  1.85e-08  2.77e-07  9.90e-01  
 25  +4.2560e-01  +4.2560e-01  3.59e-06  7.23e-10  1.76e-07  1.96e-10  2.95e-09  9.89e-01  
 26  +4.2560e-01  +4.2560e-01  3.59e-08  7.24e-12  1.76e-09  1.97e-12  2.95e-11  9.90e-01  
 27  +4.2560e-01  +4.2560e-01  3.59e-10  7.23e-14  1.76e-11  1.98e-14  2.97e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 502.9105ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:37 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:37 PM: Optimal value: 4.256e-01
(CVXPY) Sep 20 08:01:37 PM: Compilation took 1.301e-01 seconds
(CVXPY) Sep 20 08:01:37 PM: Solver (including time spent in interface) took 5.219e-01 seconds
Iteration: 43, Objective: 0.4256
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:37 PM: Your problem has 5408 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:37 PM: Finished problem compilation (took 1.350e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5408
  constraints   = 10408
  nnz(P)        = 0
  nnz(A)        = 111916
  cones (total) = 1
    : Nonnegative = 1,  numel = 10408

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7975e-01  +1.0851e+03  1.08e+03  4.37e-01  7.74e+01  3.79e-03  5.73e-01  5.87e-01  
  2  +5.3076e-01  +1.2059e+02  1.20e+02  1.69e-01  3.75e+01  1.64e-02  2.72e-01  9.43e-01  
  3  +5.0853e-01  +3.1256e+01  3.07e+01  1.21e-01  2.72e+01  4.57e-05  2.51e-01  3.05e-01  
  4  +5.0103e-01  +3.1103e+00  2.61e+00  1.81e-02  4.24e+00  5.98e-06  1.56e-01  6.28e-01  
  5  +5.0032e-01  +1.5029e+00  1.00e+00  6.88e-03  1.65e+00  4.05e-05  9.97e-02  7.23e-01  
  6  +5.0008e-01  +9.1418e-01  4.14e-01  2.77e-03  6.70e-01  4.46e-05  3.12e-02  7.55e-01  
  7  +4.9889e-01  +1.0019e+00  5.03e-01  6.62e-04  1.63e-01  6.36e-04  2.04e-03  9.90e-01  
  8  +4.9544e-01  +9.3927e-01  4.44e-01  2.10e-04  5.18e-02  1.64e-03  6.27e-04  7.11e-01  
  9  +4.9231e-01  +8.6459e-01  3.72e-01  1.55e-04  3.80e-02  1.22e-03  4.63e-04  3.88e-01  
 10  +4.9092e-01  +8.3888e-01  3.48e-01  1.31e-04  3.22e-02  1.05e-03  3.92e-04  2.70e-01  
 11  +4.9048e-01  +8.0808e-01  3.18e-01  1.16e-04  2.85e-02  6.23e-04  3.47e-04  3.81e-01  
 12  +4.8884e-01  +7.6681e-01  2.78e-01  1.09e-04  2.69e-02  2.66e-04  3.33e-04  3.67e-01  
 13  +4.8626e-01  +7.4778e-01  2.62e-01  9.57e-05  2.35e-02  2.43e-04  2.93e-04  1.71e-01  
 14  +4.8612e-01  +7.4405e-01  2.58e-01  9.47e-05  2.32e-02  2.03e-04  2.90e-04  1.32e-01  
 15  +4.7635e-01  +6.8040e-01  2.04e-01  6.11e-05  1.50e-02  1.62e-04  1.93e-04  3.91e-01  
 16  +4.6070e-01  +5.8726e-01  1.27e-01  3.27e-05  7.97e-03  6.07e-05  1.10e-04  6.10e-01  
 17  +4.5480e-01  +5.5794e-01  1.03e-01  2.52e-05  6.15e-03  3.76e-05  8.67e-05  3.93e-01  
 18  +4.4523e-01  +5.1174e-01  6.65e-02  1.52e-05  3.70e-03  1.63e-05  5.45e-05  5.75e-01  
 19  +4.4325e-01  +5.0253e-01  5.93e-02  1.33e-05  3.24e-03  1.30e-05  4.81e-05  2.35e-01  
 20  +4.3684e-01  +4.7397e-01  3.71e-02  8.01e-06  1.95e-03  7.34e-06  3.00e-05  4.43e-01  
 21  +4.3172e-01  +4.5133e-01  1.96e-02  4.09e-06  9.96e-04  3.05e-06  1.58e-05  6.25e-01  
 22  +4.2966e-01  +4.4208e-01  1.24e-02  2.56e-06  6.23e-04  1.32e-06  1.00e-05  6.70e-01  
 23  +4.2678e-01  +4.3052e-01  3.74e-03  7.61e-07  1.85e-04  3.50e-07  3.04e-06  7.66e-01  
 24  +4.2559e-01  +4.2586e-01  2.68e-04  5.43e-08  1.32e-05  2.27e-08  2.19e-07  9.42e-01  
 25  +4.2550e-01  +4.2550e-01  2.71e-06  5.49e-10  1.34e-07  2.30e-10  2.22e-09  9.90e-01  
 26  +4.2550e-01  +4.2550e-01  2.73e-08  5.52e-12  1.34e-09  2.31e-12  2.23e-11  9.90e-01  
 27  +4.2550e-01  +4.2550e-01  2.89e-10  5.86e-14  1.43e-11  2.46e-14  2.37e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 541.6084ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:38 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:38 PM: Optimal value: 4.255e-01
(CVXPY) Sep 20 08:01:38 PM: Compilation took 1.350e-01 seconds
(CVXPY) Sep 20 08:01:38 PM: Solver (including time spent in interface) took 5.638e-01 seconds
Iteration: 44, Objective: 0.4255
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:38 PM: Your problem has 5418 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:38 PM: Finished problem compilation (took 1.240e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:38 PM: Invoking solver CLARABEL  to obtain a solution.
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres   -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5418
  constraints   = 10418
  nnz(P)        = 0
  nnz(A)        = 112296
  cones (total) = 1
    : Nonnegative = 1,  numel = 10418

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0014e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7975e-01  +1.0851e+03  1.08e+03  4.37e-01  7.74e+01  3.79e-03  5.73e-01  5.87e-01  
  2  +5.3075e-01  +1.2058e+02  1.20e+02  1.69e-01  3.74e+01  1.65e-02  2.72e-01  9.44e-01  
  3  +5.0853e-01  +3.1254e+01  3.07e+01  1.21e-01  2.72e+01  4.58e-05  2.51e-01  3.06e-01  
  4  +5.0103e-01  +3.1105e+00  2.61e+00  1.81e-02  4.24e+00  5.98e-06  1.56e-01  6.28e-01  
  5  +5.0033e-01  +1.5303e+00  1.03e+00  7.07e-03  1.69e+00  4.01e-05  1.01e-01  7.06e-01  
  6  +5.0008e-01  +9.1899e-01  4.19e-01  2.81e-03  6.78e-01  4.38e-05  3.23e-02  7.43e-01  
  7  +4.9880e-01  +1.0075e+00  5.09e-01  6.30e-04  1.55e-01  6.81e-04  1.94e-03  9.90e-01  
  8  +4.9536e-01  +9.4058e-01  4.45e-01  2.11e-04  5.20e-02  1.63e-03  6.30e-04  6.96e-01  
  9  +4.9240e-01  +8.7004e-01  3.78e-01  1.58e-04  3.89e-02  1.23e-03  4.74e-04  3.71e-01  
 10  +4.9095e-01  +8.4254e-01  3.52e-01  1.33e-04  3.26e-02  1.05e-03  3.97e-04  2.80e-01  
 11  +4.9136e-01  +8.0951e-01  3.18e-01  1.21e-04  2.98e-02  5.05e-04  3.62e-04  4.31e-01  
 12  +4.8990e-01  +7.7215e-01  2.82e-01  1.14e-04  2.80e-02  2.18e-04  3.45e-04  3.90e-01  
 13  +4.8706e-01  +7.5055e-01  2.63e-01  9.78e-05  2.40e-02  1.95e-04  2.98e-04  2.02e-01  
 14  +4.8685e-01  +7.4662e-01  2.60e-01  9.66e-05  2.37e-02  1.63e-04  2.95e-04  1.31e-01  
 15  +4.7657e-01  +6.7959e-01  2.03e-01  6.04e-05  1.48e-02  1.31e-04  1.91e-04  4.13e-01  
 16  +4.6366e-01  +6.0243e-01  1.39e-01  3.69e-05  9.00e-03  4.35e-05  1.23e-04  6.21e-01  
 17  +4.5606e-01  +5.6394e-01  1.08e-01  2.68e-05  6.53e-03  2.56e-05  9.18e-05  4.26e-01  
 18  +4.4634e-01  +5.1692e-01  7.06e-02  1.64e-05  3.98e-03  1.27e-05  5.85e-05  5.18e-01  
 19  +4.4190e-01  +4.9619e-01  5.43e-02  1.21e-05  2.94e-03  7.58e-06  4.40e-05  4.77e-01  
 20  +4.3577e-01  +4.6865e-01  3.29e-02  7.02e-06  1.71e-03  3.61e-06  2.64e-05  5.93e-01  
 21  +4.3253e-01  +4.5432e-01  2.18e-02  4.55e-06  1.11e-03  1.95e-06  1.74e-05  5.77e-01  
 22  +4.2921e-01  +4.3987e-01  1.07e-02  2.18e-06  5.31e-04  5.66e-07  8.55e-06  9.90e-01  
 23  +4.2596e-01  +4.2739e-01  1.43e-03  2.90e-07  7.06e-05  7.41e-08  1.17e-06  8.85e-01  
 24  +4.2546e-01  +4.2549e-01  2.74e-05  5.54e-09  1.35e-06  1.41e-09  2.24e-08  9.82e-01  
 25  +4.2545e-01  +4.2545e-01  2.74e-07  5.55e-11  1.35e-08  1.41e-11  2.25e-10  9.90e-01  
 26  +4.2545e-01  +4.2545e-01  2.96e-09  6.00e-13  1.46e-10  1.53e-13  2.44e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 519.5423ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:39 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:39 PM: Optimal value: 4.255e-01
(CVXPY) Sep 20 08:01:39 PM: Compilation took 1.240e-01 seconds
(CVXPY) Sep 20 08:01:39 PM: Solver (including time spent in interface) took 5.368e-01 seconds
Iteration: 45, Objective: 0.4255
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:39 PM: Your problem has 5428 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:39 PM: Finished problem compilation (took 1.337e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5428
  constraints   = 10428
  nnz(P)        = 0
  nnz(A)        = 112607
  cones (total) = 1
    : Nonnegative = 1,  numel = 10428

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0014e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7973e-01  +1.0851e+03  1.08e+03  4.37e-01  7.73e+01  3.79e-03  5.73e-01  5.87e-01  
  2  +5.3074e-01  +1.2058e+02  1.20e+02  1.69e-01  3.74e+01  1.65e-02  2.72e-01  9.44e-01  
  3  +5.0853e-01  +3.1254e+01  3.07e+01  1.21e-01  2.72e+01  4.58e-05  2.51e-01  3.06e-01  
  4  +5.0103e-01  +3.1115e+00  2.61e+00  1.81e-02  4.24e+00  5.98e-06  1.56e-01  6.28e-01  
  5  +5.0033e-01  +1.5246e+00  1.02e+00  7.03e-03  1.68e+00  4.03e-05  1.00e-01  7.11e-01  
  6  +5.0008e-01  +9.2583e-01  4.26e-01  2.86e-03  6.89e-01  4.42e-05  3.25e-02  7.40e-01  
  7  +4.9866e-01  +1.0016e+00  5.03e-01  5.70e-04  1.40e-01  7.48e-04  1.74e-03  9.90e-01  
  8  +4.9515e-01  +9.3067e-01  4.36e-01  2.03e-04  5.00e-02  1.63e-03  6.06e-04  6.80e-01  
  9  +4.9225e-01  +8.6934e-01  3.77e-01  1.54e-04  3.79e-02  1.30e-03  4.62e-04  3.50e-01  
 10  +4.9077e-01  +8.4276e-01  3.52e-01  1.30e-04  3.20e-02  1.12e-03  3.90e-04  2.68e-01  
 11  +4.9130e-01  +8.1109e-01  3.20e-01  1.21e-04  2.96e-02  5.42e-04  3.60e-04  4.12e-01  
 12  +4.8983e-01  +7.7339e-01  2.84e-01  1.14e-04  2.79e-02  2.33e-04  3.44e-04  3.88e-01  
 13  +4.8665e-01  +7.4898e-01  2.62e-01  9.59e-05  2.35e-02  2.05e-04  2.93e-04  2.25e-01  
 14  +4.8642e-01  +7.4507e-01  2.59e-01  9.48e-05  2.32e-02  1.73e-04  2.90e-04  1.24e-01  
 15  +4.7576e-01  +6.7589e-01  2.00e-01  5.88e-05  1.44e-02  1.35e-04  1.87e-04  4.21e-01  
 16  +4.6016e-01  +5.8543e-01  1.25e-01  3.21e-05  7.84e-03  6.28e-05  1.08e-04  5.28e-01  
 17  +4.5444e-01  +5.5721e-01  1.03e-01  2.51e-05  6.11e-03  4.03e-05  8.64e-05  3.69e-01  
 18  +4.4519e-01  +5.1254e-01  6.73e-02  1.55e-05  3.76e-03  1.94e-05  5.55e-05  5.19e-01  
 19  +4.4364e-01  +5.0512e-01  6.15e-02  1.39e-05  3.38e-03  1.59e-05  5.02e-05  2.09e-01  
 20  +4.3775e-01  +4.7871e-01  4.10e-02  8.94e-06  2.18e-03  9.76e-06  3.34e-05  3.89e-01  
 21  +4.3471e-01  +4.6516e-01  3.04e-02  6.52e-06  1.59e-03  6.71e-06  2.47e-05  3.30e-01  
 22  +4.3164e-01  +4.5176e-01  2.01e-02  4.22e-06  1.03e-03  4.08e-06  1.63e-05  4.09e-01  
 23  +4.2899e-01  +4.3956e-01  1.06e-02  2.18e-06  5.30e-04  1.08e-06  8.54e-06  8.32e-01  
 24  +4.2682e-01  +4.3074e-01  3.93e-03  8.03e-07  1.95e-04  2.28e-07  3.20e-06  9.51e-01  
 25  +4.2552e-01  +4.2584e-01  3.24e-04  6.59e-08  1.60e-05  1.75e-08  2.66e-07  9.52e-01  
 26  +4.2540e-01  +4.2540e-01  3.59e-06  7.31e-10  1.78e-07  1.94e-10  2.95e-09  9.89e-01  
 27  +4.2540e-01  +4.2540e-01  3.67e-08  7.48e-12  1.82e-09  1.99e-12  3.02e-11  9.90e-01  
 28  +4.2540e-01  +4.2540e-01  4.07e-10  8.27e-14  2.01e-11  2.21e-14  3.36e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 573.9049ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:40 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:40 PM: Optimal value: 4.254e-01
(CVXPY) Sep 20 08:01:40 PM: Compilation took 1.337e-01 seconds
(CVXPY) Sep 20 08:01:40 PM: Solver (including time spent in interface) took 5.924e-01 seconds
Iteration: 46, Objective: 0.4254
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:40 PM: Your problem has 5432 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:40 PM: Finished problem compilation (took 1.311e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5432
  constraints   = 10432
  nnz(P)        = 0
  nnz(A)        = 112813
  cones (total) = 1
    : Nonnegative = 1,  numel = 10432

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0014e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7973e-01  +1.0851e+03  1.08e+03  4.37e-01  7.73e+01  3.79e-03  5.73e-01  5.87e-01  
  2  +5.3074e-01  +1.2057e+02  1.20e+02  1.69e-01  3.73e+01  1.65e-02  2.72e-01  9.44e-01  
  3  +5.0853e-01  +3.1247e+01  3.07e+01  1.21e-01  2.72e+01  4.58e-05  2.51e-01  3.06e-01  
  4  +5.0103e-01  +3.1107e+00  2.61e+00  1.81e-02  4.24e+00  5.98e-06  1.56e-01  6.28e-01  
  5  +5.0034e-01  +1.5519e+00  1.05e+00  7.22e-03  1.73e+00  3.98e-05  1.02e-01  6.93e-01  
  6  +5.0008e-01  +9.2616e-01  4.26e-01  2.86e-03  6.91e-01  4.32e-05  3.34e-02  7.29e-01  
  7  +4.9875e-01  +1.0097e+00  5.11e-01  6.12e-04  1.50e-01  7.05e-04  1.88e-03  9.90e-01  
  8  +4.9529e-01  +9.3983e-01  4.45e-01  2.10e-04  5.17e-02  1.62e-03  6.27e-04  6.91e-01  
  9  +4.9241e-01  +8.7238e-01  3.80e-01  1.59e-04  3.90e-02  1.24e-03  4.75e-04  3.62e-01  
 10  +4.9088e-01  +8.4388e-01  3.53e-01  1.33e-04  3.26e-02  1.06e-03  3.98e-04  2.81e-01  
 11  +4.9162e-01  +8.0985e-01  3.18e-01  1.24e-04  3.04e-02  4.59e-04  3.69e-04  4.41e-01  
 12  +4.9045e-01  +7.8189e-01  2.91e-01  1.19e-04  2.92e-02  2.63e-04  3.58e-04  2.83e-01  
 13  +4.8612e-01  +7.4821e-01  2.62e-01  9.32e-05  2.28e-02  2.27e-04  2.85e-04  2.92e-01  
 14  +4.7935e-01  +6.8983e-01  2.10e-01  6.70e-05  1.64e-02  1.72e-05  2.10e-04  8.33e-01  
 15  +4.5931e-01  +5.7554e-01  1.16e-01  2.93e-05  7.14e-03  9.00e-06  9.86e-05  5.88e-01  
 16  +4.5464e-01  +5.5451e-01  9.99e-02  2.42e-05  5.90e-03  7.05e-06  8.32e-05  3.02e-01  
 17  +4.4654e-01  +5.1735e-01  7.08e-02  1.63e-05  3.97e-03  4.48e-06  5.82e-05  4.51e-01  
 18  +4.4303e-01  +5.0154e-01  5.85e-02  1.31e-05  3.19e-03  3.52e-06  4.76e-05  3.44e-01  
 19  +4.3366e-01  +4.6023e-01  2.66e-02  5.63e-06  1.37e-03  1.45e-06  2.16e-05  7.23e-01  
 20  +4.3214e-01  +4.5352e-01  2.14e-02  4.48e-06  1.09e-03  1.15e-06  1.73e-05  3.58e-01  
 21  +4.2868e-01  +4.3850e-01  9.82e-03  2.02e-06  4.91e-04  4.99e-07  8.00e-06  9.90e-01  
 22  +4.2646e-01  +4.3000e-01  3.54e-03  7.21e-07  1.75e-04  1.78e-07  2.92e-06  6.80e-01  
 23  +4.2534e-01  +4.2572e-01  3.79e-04  7.67e-08  1.86e-05  1.85e-08  3.15e-07  9.90e-01  
 24  +4.2520e-01  +4.2521e-01  5.11e-06  1.03e-09  2.52e-07  2.49e-10  4.26e-09  9.90e-01  
 25  +4.2520e-01  +4.2520e-01  5.13e-08  1.04e-11  2.53e-09  2.50e-12  4.28e-11  9.90e-01  
 26  +4.2520e-01  +4.2520e-01  5.13e-10  1.04e-13  2.53e-11  2.52e-14  4.31e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 517.0722ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:41 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:41 PM: Optimal value: 4.252e-01
(CVXPY) Sep 20 08:01:41 PM: Compilation took 1.311e-01 seconds
(CVXPY) Sep 20 08:01:41 PM: Solver (including time spent in interface) took 5.369e-01 seconds
Iteration: 47, Objective: 0.4252
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:41 PM: Your problem has 5433 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:41 PM: Finished problem compilation (took 1.133e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5433
  constraints   = 10433
  nnz(P)        = 0
  nnz(A)        = 112974
  cones (total) = 1
    : Nonnegative = 1,  numel = 10433

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0014e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7971e-01  +1.0851e+03  1.08e+03  4.37e-01  7.73e+01  3.79e-03  5.73e-01  5.87e-01  
  2  +5.3072e-01  +1.2054e+02  1.20e+02  1.69e-01  3.73e+01  1.65e-02  2.72e-01  9.44e-01  
  3  +5.0852e-01  +3.1243e+01  3.07e+01  1.21e-01  2.71e+01  4.58e-05  2.51e-01  3.06e-01  
  4  +5.0103e-01  +3.1117e+00  2.61e+00  1.81e-02  4.24e+00  5.98e-06  1.56e-01  6.29e-01  
  5  +5.0035e-01  +1.5620e+00  1.06e+00  7.29e-03  1.74e+00  3.98e-05  1.02e-01  6.89e-01  
  6  +5.0008e-01  +9.1415e-01  4.14e-01  2.78e-03  6.71e-01  4.34e-05  3.22e-02  7.43e-01  
  7  +4.9867e-01  +1.0228e+00  5.24e-01  6.02e-04  1.48e-01  7.46e-04  1.84e-03  9.90e-01  
  8  +4.9515e-01  +9.4600e-01  4.51e-01  2.12e-04  5.21e-02  1.63e-03  6.32e-04  6.84e-01  
  9  +4.9239e-01  +8.7895e-01  3.87e-01  1.62e-04  3.97e-02  1.24e-03  4.84e-04  3.57e-01  
 10  +4.9089e-01  +8.5170e-01  3.61e-01  1.36e-04  3.34e-02  1.08e-03  4.08e-04  2.61e-01  
 11  +4.9087e-01  +8.1454e-01  3.24e-01  1.20e-04  2.94e-02  5.45e-04  3.58e-04  4.42e-01  
 12  +4.8946e-01  +7.8154e-01  2.92e-01  1.15e-04  2.83e-02  3.09e-04  3.49e-04  2.59e-01  
 13  +4.8675e-01  +7.5924e-01  2.72e-01  9.99e-05  2.45e-02  2.73e-04  3.05e-04  1.94e-01  
 14  +4.8658e-01  +7.5376e-01  2.67e-01  9.84e-05  2.41e-02  2.19e-04  3.01e-04  1.55e-01  
 15  +4.7593e-01  +6.8177e-01  2.06e-01  6.07e-05  1.48e-02  1.71e-04  1.92e-04  4.23e-01  
 16  +4.6040e-01  +5.8822e-01  1.28e-01  3.30e-05  8.05e-03  6.93e-05  1.11e-04  5.70e-01  
 17  +4.5484e-01  +5.6026e-01  1.05e-01  2.59e-05  6.31e-03  4.47e-05  8.91e-05  3.64e-01  
 18  +4.4619e-01  +5.1796e-01  7.18e-02  1.66e-05  4.04e-03  2.17e-05  5.95e-05  5.18e-01  
 19  +4.4062e-01  +4.9184e-01  5.12e-02  1.13e-05  2.76e-03  1.17e-05  4.17e-05  4.96e-01  
 20  +4.3595e-01  +4.7059e-01  3.46e-02  7.43e-06  1.81e-03  6.19e-06  2.81e-05  5.14e-01  
 21  +4.3194e-01  +4.5270e-01  2.08e-02  4.34e-06  1.05e-03  2.61e-06  1.68e-05  6.56e-01  
 22  +4.2788e-01  +4.3542e-01  7.54e-03  1.54e-06  3.76e-04  4.09e-07  6.17e-06  9.90e-01  
 23  +4.2567e-01  +4.2697e-01  1.30e-03  2.64e-07  6.41e-05  6.65e-08  1.08e-06  9.30e-01  
 24  +4.2524e-01  +4.2535e-01  1.09e-04  2.21e-08  5.38e-06  5.55e-09  9.11e-08  9.26e-01  
 25  +4.2520e-01  +4.2520e-01  1.16e-06  2.35e-10  5.70e-08  5.87e-11  9.67e-10  9.90e-01  
 26  +4.2520e-01  +4.2520e-01  1.16e-08  2.35e-12  5.70e-10  5.87e-13  9.67e-12  9.90e-01  
 27  +4.2520e-01  +4.2520e-01  1.16e-10  2.35e-14  5.71e-12  5.91e-15  9.74e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 508.1311ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:42 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:42 PM: Optimal value: 4.252e-01
(CVXPY) Sep 20 08:01:42 PM: Compilation took 1.133e-01 seconds
(CVXPY) Sep 20 08:01:42 PM: Solver (including time spent in interface) took 5.292e-01 seconds
FULL MODEL:
  Accruacy: 0.5239
  Our objective: 0.04780000000000001

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0018)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.003)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.003)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 1)            <-- (term's our objective: 0.0036)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.0018)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.003)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0026)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1)                                                                   <-- (term's our objective: 0.0194)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 49.55969715118408
Best over terms:
  Our final objective: 0.019400000000000056
    Its accruacy: 0.5097
    Its hamming distance: 12
  Shortest hamming distance: 4
    Its our objective: 0.0007999999999999576
  Highest accruacy: 0.5097
   dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 124 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 125 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 126 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 127 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 128 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 129 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 130 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 131 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 132 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 133 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 134 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 135 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 136 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 137 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 138 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 139 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 140 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 141 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 142 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 143 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 144 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

