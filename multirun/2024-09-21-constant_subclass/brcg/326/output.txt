Command:
python test_script.py -s constant_subclass -d 9 -n 50 --seed 56 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 9.

Computed total variation: 0.96
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:49 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:49 PM: Finished problem compilation (took 7.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 319
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9431e-01  +2.6140e+01  2.56e+01  8.37e-01  6.94e+00  1.00e+00  1.07e+00   ------   
  1  +5.6660e-01  +5.8028e+00  5.24e+00  3.68e-01  4.05e+00  3.73e-03  6.10e-01  5.95e-01  
  2  +4.8804e-01  +1.2070e+00  7.19e-01  8.57e-02  1.17e+00  2.08e-02  2.35e-01  9.90e-01  
  3  +4.3443e-01  +7.1850e-01  2.84e-01  1.98e-02  2.87e-01  1.28e-02  6.58e-02  8.04e-01  
  4  +4.1552e-01  +4.9828e-01  8.28e-02  5.71e-03  8.12e-02  2.95e-03  2.16e-02  7.21e-01  
  5  +4.0381e-01  +4.2190e-01  1.81e-02  1.16e-03  1.66e-02  4.85e-04  4.88e-03  8.32e-01  
  6  +4.0029e-01  +4.0100e-01  7.09e-04  4.49e-05  6.44e-04  1.77e-05  1.97e-04  9.61e-01  
  7  +4.0018e-01  +4.0042e-01  2.34e-04  1.32e-05  1.88e-04  4.73e-06  6.19e-05  8.09e-01  
  8  +4.0011e-01  +4.0014e-01  3.39e-05  1.56e-06  2.26e-05  4.84e-07  8.56e-06  9.33e-01  
  9  +4.0010e-01  +4.0010e-01  3.42e-07  1.57e-08  2.27e-07  4.89e-09  8.63e-08  9.90e-01  
 10  +4.0010e-01  +4.0010e-01  3.42e-09  1.57e-10  2.27e-09  4.89e-11  8.63e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 412.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:49 PM: Optimal value: 4.001e-01
(CVXPY) Sep 20 07:55:49 PM: Compilation took 7.003e-03 seconds
(CVXPY) Sep 20 07:55:49 PM: Solver (including time spent in interface) took 1.173e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:49 PM: Your problem has 54 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:49 PM: Finished problem compilation (took 3.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 54
  constraints   = 79
  nnz(P)        = 0
  nnz(A)        = 392
  cones (total) = 1
    : Nonnegative = 1,  numel = 79

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8463e-01  +2.6997e+01  2.65e+01  8.48e-01  7.02e+00  1.00e+00  1.11e+00   ------   
  1  +5.1507e-01  +5.9111e+00  5.40e+00  3.75e-01  3.97e+00  3.78e-03  6.23e-01  6.00e-01  
  2  +4.1345e-01  +1.5562e+00  1.14e+00  1.00e-01  1.35e+00  2.32e-02  2.57e-01  8.75e-01  
  3  +3.4551e-01  +7.4776e-01  4.02e-01  2.81e-02  3.88e-01  1.03e-02  8.56e-02  7.17e-01  
  4  +2.9182e-01  +5.5702e-01  2.65e-01  1.29e-02  1.84e-01  7.21e-03  4.32e-02  6.06e-01  
  5  +2.4306e-01  +3.1797e-01  7.49e-02  3.30e-03  4.77e-02  1.91e-03  1.19e-02  7.41e-01  
  6  +2.2381e-01  +2.3251e-01  8.70e-03  3.90e-04  5.59e-03  5.55e-05  1.46e-03  9.75e-01  
  7  +2.2037e-01  +2.2055e-01  1.80e-04  8.08e-06  1.16e-04  7.95e-07  3.08e-05  9.79e-01  
  8  +2.2030e-01  +2.2031e-01  9.39e-06  4.29e-07  6.04e-06  3.79e-08  1.75e-06  9.44e-01  
  9  +2.2030e-01  +2.2030e-01  9.62e-08  4.39e-09  6.18e-08  3.91e-10  1.80e-08  9.90e-01  
 10  +2.2030e-01  +2.2030e-01  9.63e-10  4.40e-11  6.19e-10  3.92e-12  1.80e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 403.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:49 PM: Optimal value: 2.203e-01
(CVXPY) Sep 20 07:55:49 PM: Compilation took 3.007e-03 seconds
(CVXPY) Sep 20 07:55:49 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Iteration: 2, Objective: 0.2203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:49 PM: Your problem has 64 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:49 PM: Finished problem compilation (took 4.012e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 64
  constraints   = 89
  nnz(P)        = 0
  nnz(A)        = 443
  cones (total) = 1
    : Nonnegative = 1,  numel = 89

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7236e-01  +2.7121e+01  2.66e+01  8.57e-01  6.85e+00  1.00e+00  1.12e+00   ------   
  1  +4.4087e-01  +5.9244e+00  5.48e+00  3.75e-01  3.70e+00  3.95e-03  6.05e-01  6.03e-01  
  2  +3.0758e-01  +1.7626e+00  1.46e+00  1.09e-01  1.33e+00  2.17e-02  2.64e-01  7.84e-01  
  3  +2.1688e-01  +6.4274e-01  4.26e-01  2.65e-02  3.34e-01  9.25e-03  8.23e-02  7.84e-01  
  4  +1.6739e-01  +3.2767e-01  1.60e-01  9.07e-03  1.16e-01  3.24e-03  3.18e-02  6.82e-01  
  5  +1.4824e-01  +2.4929e-01  1.01e-01  5.05e-03  6.77e-02  2.01e-03  1.85e-02  5.22e-01  
  6  +1.2474e-01  +1.3694e-01  1.22e-02  5.93e-04  7.98e-03  9.45e-05  2.35e-03  9.90e-01  
  7  +1.2060e-01  +1.2086e-01  2.61e-04  1.27e-05  1.70e-04  1.22e-06  5.15e-05  9.78e-01  
  8  +1.2050e-01  +1.2051e-01  1.05e-05  5.40e-07  7.01e-06  3.90e-08  2.40e-06  9.59e-01  
  9  +1.2050e-01  +1.2050e-01  1.05e-07  5.44e-09  7.05e-08  3.94e-10  2.43e-08  9.90e-01  
 10  +1.2050e-01  +1.2050e-01  1.05e-09  5.45e-11  7.06e-10  3.94e-12  2.44e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 444.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:49 PM: Optimal value: 1.205e-01
(CVXPY) Sep 20 07:55:49 PM: Compilation took 4.012e-03 seconds
(CVXPY) Sep 20 07:55:49 PM: Solver (including time spent in interface) took 9.997e-04 seconds
Iteration: 3, Objective: 0.1205
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:49 PM: Your problem has 74 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:49 PM: Finished problem compilation (took 3.520e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 74
  constraints   = 99
  nnz(P)        = 0
  nnz(A)        = 495
  cones (total) = 1
    : Nonnegative = 1,  numel = 99

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6227e-01  +2.7558e+01  2.71e+01  8.64e-01  6.74e+00  1.00e+00  1.13e+00   ------   
  1  +3.7038e-01  +6.0473e+00  5.68e+00  3.78e-01  3.57e+00  4.06e-03  6.06e-01  5.98e-01  
  2  +1.6202e-01  +1.4990e+00  1.34e+00  8.59e-02  1.03e+00  2.33e-02  2.14e-01  8.59e-01  
  3  +1.1922e-01  +4.5569e-01  3.36e-01  2.30e-02  2.81e-01  7.85e-03  6.64e-02  8.33e-01  
  4  +7.5858e-02  +1.8443e-01  1.09e-01  6.43e-03  8.33e-02  2.63e-03  2.08e-02  7.58e-01  
  5  +6.3872e-02  +1.4274e-01  7.89e-02  4.08e-03  5.69e-02  1.71e-03  1.36e-02  5.30e-01  
  6  +4.3001e-02  +5.0734e-02  7.73e-03  3.78e-04  5.29e-03  1.37e-04  1.33e-03  9.21e-01  
  7  +4.0840e-02  +4.1106e-02  2.66e-04  1.33e-05  1.85e-04  2.66e-06  4.79e-05  9.64e-01  
  8  +4.0757e-02  +4.0774e-02  1.76e-05  9.47e-07  1.27e-05  1.66e-07  3.61e-06  9.44e-01  
  9  +4.0750e-02  +4.0750e-02  1.76e-07  9.53e-09  1.27e-07  1.65e-09  3.65e-08  9.90e-01  
 10  +4.0750e-02  +4.0750e-02  1.76e-09  9.53e-11  1.27e-09  1.65e-11  3.65e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 465.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:49 PM: Optimal value: 4.075e-02
(CVXPY) Sep 20 07:55:49 PM: Compilation took 3.520e-03 seconds
(CVXPY) Sep 20 07:55:49 PM: Solver (including time spent in interface) took 1.009e-03 seconds
Iteration: 4, Objective: 0.0408
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:49 PM: Your problem has 84 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:49 PM: Finished problem compilation (took 3.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 84
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 528
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4442e-01  +2.7530e+01  2.71e+01  8.69e-01  6.54e+00  1.00e+00  1.12e+00   ------   
  1  +2.4803e-01  +6.4251e+00  6.18e+00  3.84e-01  3.43e+00  4.47e-03  5.95e-01  5.67e-01  
  2  +9.4901e-02  +9.6236e-01  8.67e-01  6.86e-02  7.51e-01  2.45e-02  1.62e-01  9.90e-01  
  3  +6.5089e-02  +2.9036e-01  2.25e-01  1.84e-02  2.00e-01  7.01e-03  5.15e-02  7.41e-01  
  4  +4.2334e-02  +1.7478e-01  1.32e-01  9.04e-03  1.04e-01  2.91e-03  2.92e-02  7.01e-01  
  5  +2.4639e-02  +4.6313e-02  2.17e-02  1.38e-03  1.62e-02  4.31e-04  4.89e-03  8.62e-01  
  6  +2.0963e-02  +2.1946e-02  9.83e-04  6.27e-05  7.34e-04  1.58e-05  2.29e-04  9.54e-01  
  7  +2.0791e-02  +2.0936e-02  1.45e-04  9.90e-06  1.12e-04  1.40e-06  3.91e-05  8.80e-01  
  8  +2.0752e-02  +2.0759e-02  7.29e-06  5.03e-07  5.62e-06  4.44e-08  2.16e-06  9.90e-01  
  9  +2.0750e-02  +2.0750e-02  7.34e-08  5.06e-09  5.65e-08  4.45e-10  2.19e-08  9.90e-01  
 10  +2.0750e-02  +2.0750e-02  7.35e-10  5.06e-11  5.65e-10  4.45e-12  2.19e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 501.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:49 PM: Optimal value: 2.075e-02
(CVXPY) Sep 20 07:55:49 PM: Compilation took 3.508e-03 seconds
(CVXPY) Sep 20 07:55:49 PM: Solver (including time spent in interface) took 1.019e-03 seconds
Iteration: 5, Objective: 0.0208
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:49 PM: Your problem has 94 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:49 PM: Finished problem compilation (took 4.015e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 94
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 564
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4011e-01  +2.7639e+01  2.72e+01  8.75e-01  6.36e+00  1.00e+00  1.13e+00   ------   
  1  +1.9498e-01  +6.6312e+00  6.44e+00  3.93e-01  3.31e+00  4.63e-03  5.99e-01  5.53e-01  
  2  +7.3212e-02  +9.7180e-01  8.99e-01  7.54e-02  7.94e-01  2.50e-02  1.77e-01  9.77e-01  
  3  +5.3718e-02  +1.9287e-01  1.39e-01  1.24e-02  1.30e-01  4.88e-03  3.48e-02  8.50e-01  
  4  +3.2748e-02  +9.2407e-02  5.97e-02  4.56e-03  5.07e-02  1.87e-03  1.41e-02  6.85e-01  
  5  +2.1679e-02  +2.6436e-02  4.76e-03  3.52e-04  3.95e-03  1.20e-04  1.15e-03  9.34e-01  
  6  +2.0882e-02  +2.1477e-02  5.95e-04  4.62e-05  5.05e-04  1.11e-05  1.55e-04  8.69e-01  
  7  +2.0764e-02  +2.0827e-02  6.25e-05  5.17e-06  5.46e-05  7.80e-07  1.90e-05  9.01e-01  
  8  +2.0750e-02  +2.0751e-02  1.00e-06  8.33e-08  8.75e-07  1.16e-08  3.13e-07  9.85e-01  
  9  +2.0750e-02  +2.0750e-02  1.00e-08  8.34e-10  8.76e-09  1.16e-10  3.14e-09  9.90e-01  
 10  +2.0750e-02  +2.0750e-02  1.00e-10  8.35e-12  8.77e-11  1.16e-12  3.14e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 561.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:49 PM: Optimal value: 2.075e-02
(CVXPY) Sep 20 07:55:49 PM: Compilation took 4.015e-03 seconds
(CVXPY) Sep 20 07:55:49 PM: Solver (including time spent in interface) took 9.904e-04 seconds
Iteration: 6, Objective: 0.0208
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:49 PM: Your problem has 95 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:49 PM: Finished problem compilation (took 4.027e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 95
  constraints   = 120
  nnz(P)        = 0
  nnz(A)        = 569
  cones (total) = 1
    : Nonnegative = 1,  numel = 120

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4004e-01  +2.7648e+01  2.72e+01  8.75e-01  6.35e+00  1.00e+00  1.13e+00   ------   
  1  +1.9163e-01  +6.6198e+00  6.43e+00  3.93e-01  3.30e+00  4.63e-03  5.98e-01  5.54e-01  
  2  +6.8265e-02  +9.5204e-01  8.84e-01  7.42e-02  7.77e-01  2.48e-02  1.75e-01  9.80e-01  
  3  +5.0530e-02  +2.8400e-01  2.33e-01  2.08e-02  2.15e-01  7.37e-03  5.74e-02  7.13e-01  
  4  +2.7162e-02  +7.7664e-02  5.05e-02  4.08e-03  4.29e-02  1.21e-03  1.34e-02  8.58e-01  
  5  +2.1165e-02  +2.4068e-02  2.90e-03  2.32e-04  2.45e-03  4.29e-05  7.90e-04  9.67e-01  
  6  +2.0799e-02  +2.1115e-02  3.17e-04  2.67e-05  2.74e-04  3.01e-06  9.55e-05  8.85e-01  
  7  +2.0754e-02  +2.0790e-02  3.57e-05  3.16e-06  3.15e-05  3.05e-07  1.19e-05  9.01e-01  
  8  +2.0750e-02  +2.0751e-02  4.42e-07  3.93e-08  3.92e-07  3.69e-09  1.49e-07  9.88e-01  
  9  +2.0750e-02  +2.0750e-02  4.42e-09  3.93e-10  3.92e-09  3.69e-11  1.49e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 546.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:49 PM: Optimal value: 2.075e-02
(CVXPY) Sep 20 07:55:49 PM: Compilation took 4.027e-03 seconds
(CVXPY) Sep 20 07:55:49 PM: Solver (including time spent in interface) took 9.992e-04 seconds
Iteration: 7, Objective: 0.0208
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:50 PM: Your problem has 96 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:50 PM: Finished problem compilation (took 3.518e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 96
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 572
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.3855e-01  +2.7655e+01  2.72e+01  8.75e-01  6.34e+00  1.00e+00  1.13e+00   ------   
  1  +1.8196e-01  +6.7376e+00  6.56e+00  3.98e-01  3.32e+00  4.69e-03  6.02e-01  5.45e-01  
  2  +6.9829e-02  +1.0600e+00  9.90e-01  8.45e-02  8.74e-01  2.54e-02  1.94e-01  9.49e-01  
  3  +5.1929e-02  +2.7471e-01  2.23e-01  2.03e-02  2.08e-01  6.65e-03  5.54e-02  7.49e-01  
  4  +2.5864e-02  +7.1758e-02  4.59e-02  3.82e-03  3.97e-02  8.32e-04  1.22e-02  9.10e-01  
  5  +2.0929e-02  +2.2328e-02  1.40e-03  1.17e-04  1.21e-03  2.02e-05  3.87e-04  9.69e-01  
  6  +2.0772e-02  +2.1014e-02  2.42e-04  2.17e-05  2.15e-04  2.29e-06  7.87e-05  8.36e-01  
  7  +2.0741e-02  +2.0782e-02  4.09e-05  3.78e-06  3.68e-05  3.58e-07  1.45e-05  8.21e-01  
  8  +2.0734e-02  +2.0735e-02  1.18e-06  1.10e-07  1.06e-06  9.08e-09  4.33e-07  9.76e-01  
  9  +2.0733e-02  +2.0733e-02  1.18e-08  1.10e-09  1.07e-08  9.09e-11  4.34e-09  9.90e-01  
 10  +2.0733e-02  +2.0733e-02  1.18e-10  1.10e-11  1.07e-10  9.09e-13  4.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 580.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:50 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:50 PM: Optimal value: 2.073e-02
(CVXPY) Sep 20 07:55:50 PM: Compilation took 3.518e-03 seconds
(CVXPY) Sep 20 07:55:50 PM: Solver (including time spent in interface) took 1.017e-03 seconds
FULL MODEL:
  Accruacy: 0.96
  Our objective: 0.9199999999999999

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x3 = 1 AND x6 = 1)                       <-- (term's our objective: 0.24)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1)            <-- (term's our objective: 0.12)
 OR (x1 = 1 AND x4 = 0 AND x6 = 0)                       <-- (term's our objective: 0.28)
 OR (x1 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.12)
 OR (x2 = 1 AND x3 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.08)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.0053186416625977
Best over terms:
  Our final objective: 0.27999999999999997
    Its accruacy: 0.64
    Its hamming distance: 8
  Shortest hamming distance: 4
    Its our objective: 0.12
  Highest accruacy: 0.64
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

