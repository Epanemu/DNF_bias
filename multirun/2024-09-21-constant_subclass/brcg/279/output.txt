Command:
python test_script.py -s constant_subclass -d 7 -n 50000 --seed 21 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.00884
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 7.

Computed total variation: 0.0472
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:43:40 PM: Your problem has 25015 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:43:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:43:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:43:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:43:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:43:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:43:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:43:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:43:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:43:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:43:40 PM: Finished problem compilation (took 1.155e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25015
  constraints   = 50015
  nnz(P)        = 0
  nnz(A)        = 250015
  cones (total) = 1
    : Nonnegative = 1,  numel = 50015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.36e+02  1.00e+00  1.00e+00   ------   
  1  +5.8817e-01  +5.2537e+03  5.25e+03  4.08e-01  1.48e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3830e-01  +6.5389e+02  6.53e+02  1.62e-01  7.52e+01  1.31e-02  2.55e-01  8.63e-01  
  3  +5.1023e-01  +1.6881e+02  1.68e+02  1.43e-01  6.66e+01  3.48e-05  2.47e-01  1.52e-01  
  4  +5.0105e-01  +1.3668e+01  1.32e+01  3.74e-02  1.70e+01  4.18e-06  1.95e-01  4.45e-01  
  5  +4.9999e-01  +9.9707e-01  4.97e-01  1.49e-03  7.03e-01  2.45e-05  1.87e-01  3.44e-01  
  6  +5.0000e-01  +5.3561e-01  3.56e-02  1.06e-04  5.03e-02  1.52e-06  1.39e-02  9.26e-01  
  7  +5.0000e-01  +5.2087e-01  2.09e-02  6.22e-05  2.95e-02  1.34e-06  4.97e-03  7.22e-01  
  8  +4.9998e-01  +5.2000e-01  2.00e-02  5.42e-05  2.57e-02  1.00e-05  4.71e-04  9.49e-01  
  9  +4.9905e-01  +5.1808e-01  1.90e-02  2.55e-06  1.21e-03  5.13e-04  8.27e-06  9.83e-01  
 10  +4.9736e-01  +5.1182e-01  1.45e-02  7.74e-07  3.67e-04  9.72e-04  2.52e-06  7.14e-01  
 11  +4.9614e-01  +5.0252e-01  6.38e-03  3.11e-07  1.48e-04  2.39e-04  1.09e-06  6.68e-01  
 12  +4.9519e-01  +4.9772e-01  2.53e-03  1.08e-07  5.10e-05  2.71e-05  4.07e-07  8.66e-01  
 13  +4.9465e-01  +4.9546e-01  8.15e-04  3.32e-08  1.58e-05  2.74e-07  1.31e-07  9.85e-01  
 14  +4.9437e-01  +4.9438e-01  1.41e-05  5.64e-10  2.67e-07  3.30e-09  2.28e-09  9.87e-01  
 15  +4.9436e-01  +4.9436e-01  1.41e-07  5.63e-12  2.67e-09  3.30e-11  2.28e-11  9.90e-01  
 16  +4.9436e-01  +4.9436e-01  1.42e-09  5.70e-14  2.70e-11  5.20e-13  3.51e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 347.8012ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:43:41 PM: Optimal value: 4.944e-01
(CVXPY) Sep 20 07:43:41 PM: Compilation took 1.155e-01 seconds
(CVXPY) Sep 20 07:43:41 PM: Solver (including time spent in interface) took 3.791e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4944
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:43:41 PM: Your problem has 25025 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:43:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:43:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:43:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:43:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:43:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:43:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:43:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:43:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:43:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:43:41 PM: Finished problem compilation (took 1.091e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25025
  constraints   = 50025
  nnz(P)        = 0
  nnz(A)        = 266281
  cones (total) = 1
    : Nonnegative = 1,  numel = 50025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.37e+02  1.00e+00  1.00e+00   ------   
  1  +5.8817e-01  +5.2538e+03  5.25e+03  4.08e-01  1.49e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3829e-01  +6.5381e+02  6.53e+02  1.62e-01  7.56e+01  1.31e-02  2.55e-01  8.63e-01  
  3  +5.1023e-01  +1.6877e+02  1.68e+02  1.43e-01  6.69e+01  3.48e-05  2.47e-01  1.52e-01  
  4  +5.0105e-01  +1.3658e+01  1.32e+01  3.74e-02  1.71e+01  4.19e-06  1.95e-01  4.46e-01  
  5  +5.0000e-01  +1.0775e+00  5.77e-01  1.73e-03  8.21e-01  2.46e-05  1.88e-01  3.03e-01  
  6  +5.0000e-01  +6.5969e-01  1.60e-01  4.77e-04  2.27e-01  5.97e-06  5.69e-02  7.24e-01  
  7  +5.0000e-01  +6.2538e-01  1.25e-01  3.74e-04  1.78e-01  4.23e-06  4.26e-02  3.77e-01  
  8  +5.0000e-01  +6.2443e-01  1.24e-01  3.71e-04  1.77e-01  3.57e-06  4.02e-02  2.41e-01  
  9  +5.0001e-01  +6.2120e-01  1.21e-01  3.62e-04  1.72e-01  2.38e-06  3.59e-02  4.69e-01  
 10  +5.0000e-01  +5.5432e-01  5.43e-02  1.62e-04  7.71e-02  1.17e-06  1.45e-02  6.55e-01  
 11  +5.0000e-01  +5.4283e-01  4.28e-02  1.28e-04  6.07e-02  7.59e-07  5.99e-03  9.33e-01  
 12  +4.9999e-01  +5.2295e-01  2.30e-02  5.99e-05  2.85e-02  3.89e-06  4.46e-04  9.36e-01  
 13  +4.9963e-01  +5.2248e-01  2.28e-02  2.69e-06  1.28e-03  1.97e-04  8.55e-06  9.81e-01  
 14  +4.9886e-01  +5.1974e-01  2.09e-02  1.17e-06  5.60e-04  3.57e-04  3.73e-06  6.18e-01  
 15  +4.9837e-01  +5.1715e-01  1.88e-02  1.10e-06  5.23e-04  2.78e-04  3.52e-06  1.14e-01  
 16  +4.9820e-01  +5.1629e-01  1.81e-02  1.07e-06  5.12e-04  2.38e-04  3.46e-06  8.33e-02  
 17  +4.9770e-01  +5.1379e-01  1.61e-02  9.53e-07  4.55e-04  1.72e-04  3.11e-06  2.14e-01  
 18  +4.9731e-01  +5.1184e-01  1.45e-02  8.82e-07  4.21e-04  8.52e-05  2.93e-06  3.66e-01  
 19  +4.9661e-01  +5.0854e-01  1.19e-02  6.87e-07  3.27e-04  1.99e-05  2.34e-06  6.63e-01  
 20  +4.9452e-01  +4.9882e-01  4.30e-03  2.04e-07  9.72e-05  4.23e-06  7.46e-07  7.85e-01  
 21  +4.9426e-01  +4.9772e-01  3.46e-03  1.57e-07  7.50e-05  2.91e-06  5.86e-07  3.28e-01  
 22  +4.9421e-01  +4.9748e-01  3.27e-03  1.56e-07  7.45e-05  2.46e-06  5.85e-07  5.44e-02  
 23  +4.9420e-01  +4.9743e-01  3.24e-03  1.53e-07  7.30e-05  2.13e-06  5.75e-07  1.45e-01  
 24  +4.9378e-01  +4.9564e-01  1.86e-03  8.36e-08  3.99e-05  8.49e-07  3.28e-07  6.03e-01  
 25  +4.9361e-01  +4.9489e-01  1.28e-03  5.61e-08  2.68e-05  3.97e-08  2.25e-07  9.90e-01  
 26  +4.9323e-01  +4.9334e-01  1.02e-04  4.37e-09  2.09e-06  9.87e-10  1.87e-08  9.77e-01  
 27  +4.9320e-01  +4.9320e-01  1.04e-06  4.45e-11  2.12e-08  9.78e-12  1.93e-10  9.90e-01  
 28  +4.9320e-01  +4.9320e-01  1.04e-08  4.45e-13  2.12e-10  9.78e-14  1.93e-12  9.90e-01  
 29  +4.9320e-01  +4.9320e-01  1.04e-10  4.44e-15  2.14e-12  1.39e-15  2.70e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 627.2644ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:43:42 PM: Optimal value: 4.932e-01
(CVXPY) Sep 20 07:43:42 PM: Compilation took 1.091e-01 seconds
(CVXPY) Sep 20 07:43:42 PM: Solver (including time spent in interface) took 6.600e-01 seconds
Iteration: 2, Objective: 0.4932
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:43:42 PM: Your problem has 25035 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:43:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:43:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:43:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:43:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:43:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:43:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:43:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:43:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:43:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:43:42 PM: Finished problem compilation (took 1.366e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25035
  constraints   = 50035
  nnz(P)        = 0
  nnz(A)        = 304369
  cones (total) = 1
    : Nonnegative = 1,  numel = 50035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.45e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +5.2542e+03  5.25e+03  4.08e-01  1.53e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3827e-01  +6.5361e+02  6.53e+02  1.62e-01  7.78e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1023e-01  +1.6872e+02  1.68e+02  1.43e-01  6.89e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3663e+01  1.32e+01  3.74e-02  1.76e+01  4.19e-06  1.95e-01  4.46e-01  
  5  +5.0001e-01  +1.1303e+00  6.30e-01  1.89e-03  9.23e-01  2.46e-05  1.88e-01  2.79e-01  
  6  +5.0000e-01  +7.1493e-01  2.15e-01  6.42e-04  3.14e-01  7.46e-06  7.27e-02  6.42e-01  
  7  +5.0000e-01  +6.8659e-01  1.87e-01  5.57e-04  2.73e-01  5.82e-06  6.05e-02  3.14e-01  
  8  +5.0001e-01  +6.6920e-01  1.69e-01  5.05e-04  2.47e-01  3.97e-06  4.98e-02  4.90e-01  
  9  +5.0001e-01  +6.7030e-01  1.70e-01  5.08e-04  2.49e-01  3.20e-06  4.72e-02  3.10e-01  
 10  +5.0000e-01  +5.7195e-01  7.19e-02  2.15e-04  1.05e-01  1.66e-06  1.80e-02  6.48e-01  
 11  +5.0000e-01  +5.5538e-01  5.54e-02  1.64e-04  8.05e-02  2.68e-06  5.13e-03  8.32e-01  
 12  +4.9999e-01  +5.5541e-01  5.54e-02  1.43e-04  7.02e-02  8.07e-06  1.13e-03  9.90e-01  
 13  +4.9941e-01  +5.5285e-01  5.34e-02  7.54e-06  3.70e-03  3.18e-04  2.66e-05  9.77e-01  
 14  +4.9862e-01  +5.4371e-01  4.51e-02  4.06e-06  1.99e-03  3.92e-04  1.43e-05  5.33e-01  
 15  +4.9844e-01  +5.4102e-01  4.26e-02  3.74e-06  1.84e-03  3.39e-04  1.30e-05  1.61e-01  
 16  +4.9842e-01  +5.4042e-01  4.20e-02  3.74e-06  1.84e-03  3.17e-04  1.30e-05  3.49e-02  
 17  +4.9833e-01  +5.3595e-01  3.76e-02  3.43e-06  1.69e-03  1.52e-04  1.17e-05  4.16e-01  
 18  +4.9836e-01  +5.3557e-01  3.72e-02  3.41e-06  1.67e-03  1.34e-04  1.16e-05  9.62e-02  
 19  +4.9772e-01  +5.2968e-01  3.20e-02  2.49e-06  1.22e-03  8.62e-05  8.39e-06  5.02e-01  
 20  +4.9788e-01  +5.3043e-01  3.26e-02  2.36e-06  1.16e-03  5.96e-05  7.90e-06  3.55e-01  
 21  +4.9755e-01  +5.2875e-01  3.12e-02  2.23e-06  1.09e-03  3.76e-05  7.50e-06  3.15e-01  
 22  +4.9529e-01  +5.1568e-01  2.04e-02  1.10e-06  5.41e-04  2.59e-05  3.77e-06  5.62e-01  
 23  +4.9461e-01  +5.1158e-01  1.70e-02  8.19e-07  4.03e-04  6.51e-06  2.83e-06  7.27e-01  
 24  +4.9455e-01  +5.1122e-01  1.67e-02  8.11e-07  3.98e-04  5.69e-06  2.79e-06  9.98e-02  
 25  +4.9451e-01  +5.1093e-01  1.64e-02  8.01e-07  3.94e-04  4.65e-06  2.76e-06  1.57e-01  
 26  +4.9397e-01  +5.0827e-01  1.43e-02  6.78e-07  3.33e-04  3.35e-06  2.35e-06  2.79e-01  
 27  +4.9291e-01  +5.0287e-01  9.96e-03  4.47e-07  2.19e-04  3.52e-08  1.56e-06  9.36e-01  
 28  +4.9231e-01  +5.0018e-01  7.87e-03  3.46e-07  1.70e-04  3.11e-08  1.22e-06  2.73e-01  
 29  +4.9224e-01  +4.9971e-01  7.47e-03  3.29e-07  1.62e-04  5.29e-08  1.16e-06  5.33e-01  
 30  +4.9136e-01  +4.9579e-01  4.43e-03  1.90e-07  9.35e-05  4.40e-08  6.83e-07  9.90e-01  
 31  +4.9033e-01  +4.9136e-01  1.03e-03  4.32e-08  2.12e-05  1.02e-08  1.58e-07  7.95e-01  
 32  +4.9009e-01  +4.9036e-01  2.61e-04  1.06e-08  5.22e-06  2.92e-09  3.78e-08  7.74e-01  
 33  +4.9009e-01  +4.9034e-01  2.52e-04  8.98e-09  4.41e-06  3.31e-09  2.87e-08  3.05e-01  
 34  +4.9004e-01  +4.9020e-01  1.57e-04  6.68e-09  3.28e-06  7.68e-10  3.10e-08  1.25e-01  
 35  +4.9004e-01  +4.9017e-01  1.30e-04  5.52e-09  2.71e-06  7.52e-10  2.46e-08  3.21e-01  
 36  +4.9000e-01  +4.9006e-01  6.12e-05  2.19e-09  1.07e-06  6.60e-10  1.06e-08  8.58e-01  
 37  +4.8998e-01  +4.8998e-01  7.68e-07  2.73e-11  1.34e-08  8.19e-12  1.32e-10  9.88e-01  
 38  +4.8998e-01  +4.8998e-01  7.68e-09  2.73e-13  1.34e-10  8.20e-14  1.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1357998s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:43:43 PM: Optimal value: 4.900e-01
(CVXPY) Sep 20 07:43:43 PM: Compilation took 1.366e-01 seconds
(CVXPY) Sep 20 07:43:43 PM: Solver (including time spent in interface) took 1.174e+00 seconds
Iteration: 3, Objective: 0.4900
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:43:43 PM: Your problem has 25045 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:43:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:43:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:43:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:43:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:43:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:43:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:43:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:43:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:43:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:43:43 PM: Finished problem compilation (took 1.911e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25045
  constraints   = 50045
  nnz(P)        = 0
  nnz(A)        = 321798
  cones (total) = 1
    : Nonnegative = 1,  numel = 50045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.46e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +5.2543e+03  5.25e+03  4.08e-01  1.54e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3826e-01  +6.5352e+02  6.53e+02  1.62e-01  7.83e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6870e+02  1.68e+02  1.43e-01  6.93e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3664e+01  1.32e+01  3.74e-02  1.77e+01  4.19e-06  1.95e-01  4.46e-01  
  5  +5.0000e-01  +1.1057e+00  6.06e-01  1.82e-03  8.93e-01  2.46e-05  1.88e-01  2.91e-01  
  6  +5.0000e-01  +7.1180e-01  2.12e-01  6.33e-04  3.12e-01  7.43e-06  7.15e-02  6.85e-01  
  7  +5.0001e-01  +6.8768e-01  1.88e-01  5.60e-04  2.76e-01  5.36e-06  5.83e-02  4.35e-01  
  8  +5.0001e-01  +6.9272e-01  1.93e-01  5.75e-04  2.83e-01  3.97e-06  5.42e-02  4.43e-01  
  9  +5.0000e-01  +5.8113e-01  8.11e-02  2.42e-04  1.19e-01  1.94e-06  2.16e-02  6.36e-01  
 10  +5.0000e-01  +5.6310e-01  6.31e-02  1.88e-04  9.27e-02  2.18e-06  9.99e-03  6.04e-01  
 11  +5.0000e-01  +5.7044e-01  7.04e-02  2.10e-04  1.03e-01  9.90e-07  8.32e-03  7.52e-01  
 12  +5.0000e-01  +5.6824e-01  6.82e-02  2.02e-04  9.95e-02  1.04e-06  5.21e-03  5.59e-01  
 13  +4.9999e-01  +5.5262e-01  5.26e-02  8.01e-05  3.95e-02  9.29e-06  3.49e-04  9.90e-01  
 14  +4.9965e-01  +5.5102e-01  5.14e-02  5.00e-06  2.47e-03  1.83e-04  1.70e-05  9.51e-01  
 15  +4.9921e-01  +5.4513e-01  4.59e-02  4.29e-06  2.12e-03  1.47e-04  1.46e-05  2.50e-01  
 16  +4.9899e-01  +5.4175e-01  4.28e-02  3.99e-06  1.97e-03  1.10e-04  1.35e-05  2.26e-01  
 17  +4.9893e-01  +5.3976e-01  4.08e-02  3.92e-06  1.94e-03  7.23e-05  1.31e-05  2.63e-01  
 18  +4.9862e-01  +5.3720e-01  3.86e-02  3.36e-06  1.66e-03  6.89e-05  1.11e-05  2.09e-01  
 19  +4.9859e-01  +5.3634e-01  3.77e-02  3.28e-06  1.62e-03  5.32e-05  1.07e-05  2.02e-01  
 20  +4.9843e-01  +5.3472e-01  3.63e-02  2.94e-06  1.45e-03  3.95e-05  9.51e-06  3.30e-01  
 21  +4.9799e-01  +5.3207e-01  3.41e-02  2.36e-06  1.17e-03  3.96e-05  7.60e-06  2.43e-01  
 22  +4.9765e-01  +5.3060e-01  3.30e-02  2.34e-06  1.16e-03  3.62e-05  7.60e-06  1.70e-02  
 23  +4.9601e-01  +5.2180e-01  2.58e-02  1.41e-06  6.98e-04  2.53e-05  4.58e-06  5.58e-01  
 24  +4.9563e-01  +5.1995e-01  2.43e-02  1.27e-06  6.29e-04  2.14e-05  4.14e-06  1.85e-01  
 25  +4.9562e-01  +5.1942e-01  2.38e-02  1.22e-06  6.01e-04  1.27e-05  3.94e-06  3.67e-01  
 26  +4.9519e-01  +5.1718e-01  2.20e-02  1.06e-06  5.26e-04  7.37e-06  3.45e-06  4.09e-01  
 27  +4.9517e-01  +5.1695e-01  2.18e-02  1.04e-06  5.14e-04  5.85e-06  3.38e-06  1.88e-01  
 28  +4.9506e-01  +5.1649e-01  2.14e-02  1.03e-06  5.08e-04  5.50e-06  3.34e-06  4.06e-02  
 29  +4.9445e-01  +5.1374e-01  1.93e-02  9.35e-07  4.62e-04  2.73e-06  3.06e-06  4.01e-01  
 30  +4.9127e-01  +5.0050e-01  9.23e-03  3.84e-07  1.90e-04  1.12e-06  1.29e-06  6.30e-01  
 31  +4.9052e-01  +4.9731e-01  6.79e-03  2.76e-07  1.36e-04  7.46e-07  9.38e-07  3.39e-01  
 32  +4.9052e-01  +4.9676e-01  6.24e-03  2.46e-07  1.22e-04  1.62e-07  8.41e-07  8.61e-01  
 33  +4.8877e-01  +4.9004e-01  1.27e-03  4.87e-08  2.41e-05  2.76e-08  1.72e-07  8.38e-01  
 34  +4.8843e-01  +4.8876e-01  3.32e-04  1.25e-08  6.18e-06  4.08e-09  4.50e-08  9.90e-01  
 35  +4.8830e-01  +4.8831e-01  4.23e-06  1.59e-10  7.86e-08  5.19e-11  5.76e-10  9.87e-01  
 36  +4.8830e-01  +4.8830e-01  4.23e-08  1.59e-12  7.86e-10  5.19e-13  5.76e-12  9.90e-01  
 37  +4.8830e-01  +4.8830e-01  4.28e-10  1.60e-14  7.94e-12  8.09e-15  8.60e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3355759s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:45 PM: Problem status: optimal
(CVXPY) Sep 20 07:43:45 PM: Optimal value: 4.883e-01
(CVXPY) Sep 20 07:43:45 PM: Compilation took 1.911e-01 seconds
(CVXPY) Sep 20 07:43:45 PM: Solver (including time spent in interface) took 1.385e+00 seconds
Iteration: 4, Objective: 0.4883
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:43:45 PM: Your problem has 25055 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:43:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:43:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:43:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:43:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:43:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:43:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:43:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:43:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:43:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:43:45 PM: Finished problem compilation (took 1.991e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25055
  constraints   = 50055
  nnz(P)        = 0
  nnz(A)        = 339270
  cones (total) = 1
    : Nonnegative = 1,  numel = 50055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.47e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +5.2546e+03  5.25e+03  4.08e-01  1.55e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5342e+02  6.53e+02  1.62e-01  7.87e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6867e+02  1.68e+02  1.43e-01  6.97e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3667e+01  1.32e+01  3.74e-02  1.78e+01  4.19e-06  1.95e-01  4.46e-01  
  5  +5.0000e-01  +1.0987e+00  5.99e-01  1.80e-03  8.88e-01  2.47e-05  1.88e-01  2.96e-01  
  6  +5.0000e-01  +7.1841e-01  2.18e-01  6.52e-04  3.23e-01  7.50e-06  7.27e-02  7.14e-01  
  7  +5.0000e-01  +6.8266e-01  1.83e-01  5.45e-04  2.70e-01  5.25e-06  5.63e-02  4.47e-01  
  8  +5.0001e-01  +6.9056e-01  1.91e-01  5.69e-04  2.82e-01  3.80e-06  5.21e-02  4.77e-01  
  9  +5.0000e-01  +6.1974e-01  1.20e-01  3.57e-04  1.77e-01  2.53e-06  3.08e-02  4.59e-01  
 10  +5.0000e-01  +6.0181e-01  1.02e-01  3.04e-04  1.51e-01  2.24e-06  2.20e-02  3.62e-01  
 11  +5.0000e-01  +5.9256e-01  9.26e-02  2.76e-04  1.37e-01  1.41e-06  1.26e-02  7.93e-01  
 12  +5.0001e-01  +5.7745e-01  7.74e-02  2.29e-04  1.14e-01  4.73e-07  6.06e-03  9.90e-01  
 13  +5.0000e-01  +5.6734e-01  6.73e-02  1.65e-04  8.20e-02  1.75e-06  1.10e-03  8.76e-01  
 14  +4.9987e-01  +5.6518e-01  6.53e-02  7.47e-06  3.71e-03  7.19e-05  2.50e-05  9.78e-01  
 15  +4.9953e-01  +5.5617e-01  5.66e-02  3.60e-06  1.79e-03  1.04e-04  1.19e-05  6.34e-01  
 16  +4.9943e-01  +5.5420e-01  5.48e-02  3.57e-06  1.77e-03  8.58e-05  1.17e-05  1.25e-01  
 17  +4.9898e-01  +5.4803e-01  4.90e-02  3.44e-06  1.71e-03  5.19e-05  1.12e-05  2.43e-01  
 18  +4.9882e-01  +5.4607e-01  4.73e-02  3.39e-06  1.69e-03  4.25e-05  1.11e-05  1.12e-01  
 19  +4.9859e-01  +5.4171e-01  4.31e-02  3.16e-06  1.57e-03  1.57e-05  1.03e-05  5.07e-01  
 20  +4.9853e-01  +5.4127e-01  4.27e-02  3.13e-06  1.56e-03  1.50e-05  1.02e-05  4.12e-02  
 21  +4.9811e-01  +5.3855e-01  4.04e-02  2.82e-06  1.40e-03  1.29e-05  9.20e-06  1.96e-01  
 22  +4.9781e-01  +5.3589e-01  3.81e-02  2.65e-06  1.32e-03  7.05e-06  8.62e-06  3.83e-01  
 23  +4.9687e-01  +5.3087e-01  3.40e-02  2.17e-06  1.08e-03  3.62e-06  7.08e-06  5.08e-01  
 24  +4.9620e-01  +5.2754e-01  3.13e-02  1.89e-06  9.39e-04  2.82e-06  6.19e-06  2.58e-01  
 25  +4.9471e-01  +5.2029e-01  2.56e-02  1.38e-06  6.87e-04  1.23e-06  4.56e-06  5.87e-01  
 26  +4.9455e-01  +5.1960e-01  2.50e-02  1.35e-06  6.70e-04  9.93e-07  4.46e-06  1.83e-01  
 27  +4.9185e-01  +5.0758e-01  1.57e-02  7.46e-07  3.71e-04  5.12e-07  2.51e-06  5.43e-01  
 28  +4.9163e-01  +5.0602e-01  1.44e-02  6.51e-07  3.24e-04  2.12e-07  2.19e-06  7.43e-01  
 29  +4.8958e-01  +4.9740e-01  7.83e-03  3.39e-07  1.68e-04  1.02e-07  1.16e-06  5.78e-01  
 30  +4.8895e-01  +4.9479e-01  5.84e-03  2.48e-07  1.23e-04  7.46e-08  8.57e-07  3.35e-01  
 31  +4.8790e-01  +4.9046e-01  2.55e-03  1.03e-07  5.13e-05  2.83e-08  3.62e-07  9.90e-01  
 32  +4.8730e-01  +4.8814e-01  8.37e-04  3.26e-08  1.62e-05  9.47e-09  1.17e-07  7.23e-01  
 33  +4.8722e-01  +4.8783e-01  6.08e-04  2.36e-08  1.17e-05  6.90e-09  8.53e-08  5.71e-01  
 34  +4.8701e-01  +4.8704e-01  2.58e-05  9.91e-10  4.93e-07  2.88e-10  3.63e-09  9.90e-01  
 35  +4.8700e-01  +4.8700e-01  2.75e-07  1.05e-11  5.24e-09  3.07e-12  3.86e-11  9.89e-01  
 36  +4.8700e-01  +4.8700e-01  2.75e-09  1.05e-13  5.24e-11  3.07e-14  3.86e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2160843s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:43:46 PM: Optimal value: 4.870e-01
(CVXPY) Sep 20 07:43:46 PM: Compilation took 1.991e-01 seconds
(CVXPY) Sep 20 07:43:46 PM: Solver (including time spent in interface) took 1.265e+00 seconds
Iteration: 5, Objective: 0.4870
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:43:47 PM: Your problem has 25065 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:43:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:43:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:43:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:43:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:43:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:43:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:43:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:43:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:43:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:43:47 PM: Finished problem compilation (took 1.869e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25065
  constraints   = 50065
  nnz(P)        = 0
  nnz(A)        = 355168
  cones (total) = 1
    : Nonnegative = 1,  numel = 50065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.49e+02  1.00e+00  1.00e+00   ------   
  1  +5.8813e-01  +5.2548e+03  5.25e+03  4.08e-01  1.56e+02  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3824e-01  +6.5330e+02  6.53e+02  1.62e-01  7.91e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6862e+02  1.68e+02  1.43e-01  7.00e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3669e+01  1.32e+01  3.74e-02  1.79e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1452e+00  6.45e-01  1.94e-03  9.62e-01  2.47e-05  1.88e-01  2.76e-01  
  6  +5.0001e-01  +7.8928e-01  2.89e-01  8.64e-04  4.30e-01  8.33e-06  8.77e-02  7.59e-01  
  7  +5.0001e-01  +7.1620e-01  2.16e-01  6.46e-04  3.21e-01  5.05e-06  6.24e-02  5.55e-01  
  8  +5.0001e-01  +6.9715e-01  1.97e-01  5.88e-04  2.93e-01  3.07e-06  5.01e-02  6.31e-01  
  9  +5.0000e-01  +5.9566e-01  9.57e-02  2.85e-04  1.42e-01  1.84e-06  2.18e-02  5.93e-01  
 10  +5.0000e-01  +5.8884e-01  8.88e-02  2.65e-04  1.32e-01  1.99e-06  1.51e-02  3.63e-01  
 11  +5.0001e-01  +5.9214e-01  9.21e-02  2.74e-04  1.36e-01  1.21e-06  8.57e-03  8.99e-01  
 12  +5.0001e-01  +5.8892e-01  8.89e-02  2.64e-04  1.31e-01  1.13e-06  7.13e-03  2.74e-01  
 13  +5.0001e-01  +5.7263e-01  7.26e-02  2.15e-04  1.07e-01  1.12e-08  5.87e-03  8.34e-01  
 14  +5.0001e-01  +5.6851e-01  6.85e-02  1.30e-04  6.50e-02  8.38e-08  6.26e-04  9.15e-01  
 15  +5.0000e-01  +5.6849e-01  6.85e-02  6.17e-06  3.08e-03  2.54e-06  2.03e-05  9.68e-01  
 16  +4.9998e-01  +5.6151e-01  6.15e-02  3.89e-06  1.94e-03  2.77e-06  1.28e-05  5.63e-01  
 17  +4.9975e-01  +5.5962e-01  5.99e-02  3.88e-06  1.94e-03  2.61e-06  1.28e-05  3.64e-03  
 18  +4.9952e-01  +5.5731e-01  5.78e-02  3.84e-06  1.92e-03  2.35e-06  1.26e-05  5.41e-02  
 19  +4.9913e-01  +5.5342e-01  5.43e-02  3.78e-06  1.89e-03  1.86e-06  1.24e-05  1.28e-01  
 20  +4.9870e-01  +5.4963e-01  5.09e-02  3.48e-06  1.74e-03  1.56e-06  1.14e-05  1.86e-01  
 21  +4.9855e-01  +5.4819e-01  4.96e-02  3.47e-06  1.74e-03  1.39e-06  1.13e-05  7.08e-02  
 22  +4.9668e-01  +5.3623e-01  3.95e-02  2.27e-06  1.14e-03  1.07e-06  7.37e-06  4.94e-01  
 23  +4.9632e-01  +5.3445e-01  3.81e-02  2.24e-06  1.12e-03  9.69e-07  7.36e-06  2.43e-02  
 24  +4.9627e-01  +5.3416e-01  3.79e-02  2.23e-06  1.12e-03  9.32e-07  7.32e-06  3.61e-02  
 25  +4.9483e-01  +5.2741e-01  3.26e-02  1.75e-06  8.72e-04  7.67e-07  5.71e-06  2.99e-01  
 26  +4.9452e-01  +5.2537e-01  3.09e-02  1.64e-06  8.19e-04  5.10e-07  5.37e-06  3.79e-01  
 27  +4.9310e-01  +5.1788e-01  2.48e-02  1.23e-06  6.17e-04  1.38e-07  4.06e-06  9.90e-01  
 28  +4.9287e-01  +5.1693e-01  2.41e-02  1.18e-06  5.90e-04  1.39e-07  3.88e-06  1.09e-01  
 29  +4.9188e-01  +5.1245e-01  2.06e-02  9.51e-07  4.75e-04  1.70e-07  3.14e-06  8.19e-01  
 30  +4.9030e-01  +5.0579e-01  1.55e-02  6.82e-07  3.41e-04  1.30e-07  2.27e-06  4.00e-01  
 31  +4.8958e-01  +5.0267e-01  1.31e-02  5.57e-07  2.78e-04  1.20e-07  1.86e-06  5.35e-01  
 32  +4.8783e-01  +4.9557e-01  7.73e-03  3.14e-07  1.57e-04  7.45e-08  1.07e-06  6.38e-01  
 33  +4.8778e-01  +4.9528e-01  7.49e-03  2.98e-07  1.49e-04  7.77e-08  1.02e-06  3.79e-01  
 34  +4.8618e-01  +4.8900e-01  2.81e-03  1.08e-07  5.41e-05  3.21e-08  3.81e-07  9.90e-01  
 35  +4.8525e-01  +4.8559e-01  3.34e-04  1.24e-08  6.22e-06  3.78e-09  4.58e-08  9.90e-01  
 36  +4.8512e-01  +4.8513e-01  4.20e-06  1.55e-10  7.76e-08  4.58e-11  5.79e-10  9.88e-01  
 37  +4.8512e-01  +4.8512e-01  4.20e-08  1.55e-12  7.76e-10  4.58e-13  5.79e-12  9.90e-01  
 38  +4.8512e-01  +4.8512e-01  4.25e-10  1.57e-14  7.85e-12  7.32e-15  9.05e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2887552s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:48 PM: Problem status: optimal
(CVXPY) Sep 20 07:43:48 PM: Optimal value: 4.851e-01
(CVXPY) Sep 20 07:43:48 PM: Compilation took 1.869e-01 seconds
(CVXPY) Sep 20 07:43:48 PM: Solver (including time spent in interface) took 1.336e+00 seconds
Iteration: 6, Objective: 0.4851
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:43:48 PM: Your problem has 25075 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:43:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:43:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:43:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:43:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:43:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:43:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:43:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:43:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:43:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:43:49 PM: Finished problem compilation (took 2.159e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25075
  constraints   = 50075
  nnz(P)        = 0
  nnz(A)        = 365229
  cones (total) = 1
    : Nonnegative = 1,  numel = 50075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.49e+02  1.00e+00  1.00e+00   ------   
  1  +5.8812e-01  +5.2552e+03  5.25e+03  4.08e-01  1.56e+02  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3821e-01  +6.5309e+02  6.53e+02  1.63e-01  7.92e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1021e-01  +1.6857e+02  1.68e+02  1.43e-01  7.01e+01  3.49e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3678e+01  1.32e+01  3.74e-02  1.80e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1722e+00  6.72e-01  2.02e-03  1.00e+00  2.47e-05  1.88e-01  2.65e-01  
  6  +5.0001e-01  +7.7879e-01  2.79e-01  8.33e-04  4.15e-01  7.53e-06  8.35e-02  7.88e-01  
  7  +5.0001e-01  +7.3653e-01  2.37e-01  7.06e-04  3.52e-01  5.51e-06  6.72e-02  4.19e-01  
  8  +5.0001e-01  +6.8513e-01  1.85e-01  5.53e-04  2.76e-01  2.29e-06  4.43e-02  8.91e-01  
  9  +5.0000e-01  +5.9567e-01  9.57e-02  2.85e-04  1.42e-01  1.58e-06  1.87e-02  6.09e-01  
 10  +5.0000e-01  +5.9592e-01  9.59e-02  2.86e-04  1.42e-01  1.70e-06  1.08e-02  6.47e-01  
 11  +4.9999e-01  +5.6710e-01  6.71e-02  1.58e-04  7.90e-02  9.65e-06  9.62e-04  9.46e-01  
 12  +4.9953e-01  +5.6540e-01  6.59e-02  1.08e-05  5.38e-03  2.48e-04  3.57e-05  9.63e-01  
 13  +4.9921e-01  +5.6145e-01  6.22e-02  6.88e-06  3.45e-03  3.12e-04  2.28e-05  4.59e-01  
 14  +4.9900e-01  +5.5958e-01  6.06e-02  5.86e-06  2.93e-03  3.22e-04  1.93e-05  2.09e-01  
 15  +4.9897e-01  +5.5784e-01  5.89e-02  5.48e-06  2.74e-03  2.74e-04  1.81e-05  2.04e-01  
 16  +4.9898e-01  +5.5327e-01  5.43e-02  5.17e-06  2.59e-03  1.09e-04  1.70e-05  5.25e-01  
 17  +4.9869e-01  +5.5113e-01  5.24e-02  4.53e-06  2.27e-03  9.60e-05  1.49e-05  2.61e-01  
 18  +4.9782e-01  +5.4510e-01  4.73e-02  3.55e-06  1.78e-03  5.46e-05  1.17e-05  5.55e-01  
 19  +4.9674e-01  +5.3923e-01  4.25e-02  2.85e-06  1.43e-03  3.72e-05  9.40e-06  4.14e-01  
 20  +4.9666e-01  +5.3888e-01  4.22e-02  2.83e-06  1.42e-03  3.40e-05  9.36e-06  6.60e-02  
 21  +4.9594e-01  +5.3533e-01  3.94e-02  2.48e-06  1.24e-03  2.96e-05  8.19e-06  2.00e-01  
 22  +4.9587e-01  +5.3504e-01  3.92e-02  2.47e-06  1.24e-03  2.79e-05  8.16e-06  4.26e-02  
 23  +4.9533e-01  +5.3250e-01  3.72e-02  2.27e-06  1.13e-03  2.42e-05  7.51e-06  1.52e-01  
 24  +4.9406e-01  +5.2670e-01  3.26e-02  1.84e-06  9.20e-04  1.89e-05  6.12e-06  2.82e-01  
 25  +4.9342e-01  +5.2386e-01  3.04e-02  1.61e-06  8.07e-04  9.05e-06  5.38e-06  4.91e-01  
 26  +4.9314e-01  +5.2267e-01  2.95e-02  1.54e-06  7.70e-04  6.55e-06  5.14e-06  2.51e-01  
 27  +4.9307e-01  +5.2237e-01  2.93e-02  1.52e-06  7.59e-04  5.59e-06  5.07e-06  1.33e-01  
 28  +4.9163e-01  +5.1625e-01  2.46e-02  1.20e-06  5.99e-04  4.38e-06  4.04e-06  2.56e-01  
 29  +4.8982e-01  +5.0848e-01  1.87e-02  8.46e-07  4.23e-04  1.36e-06  2.89e-06  6.59e-01  
 30  +4.8767e-01  +4.9966e-01  1.20e-02  5.03e-07  2.52e-04  5.40e-07  1.75e-06  6.34e-01  
 31  +4.8769e-01  +4.9937e-01  1.17e-02  4.85e-07  2.43e-04  3.54e-07  1.69e-06  4.31e-01  
 32  +4.8535e-01  +4.9014e-01  4.79e-03  1.89e-07  9.46e-05  5.54e-08  6.79e-07  9.49e-01  
 33  +4.8474e-01  +4.8777e-01  3.02e-03  1.17e-07  5.86e-05  3.47e-08  4.26e-07  9.16e-01  
 34  +4.8374e-01  +4.8404e-01  2.98e-04  1.14e-08  5.72e-06  3.20e-09  4.27e-08  9.79e-01  
 35  +4.8362e-01  +4.8363e-01  5.81e-06  2.22e-10  1.11e-07  5.40e-11  8.49e-10  9.87e-01  
 36  +4.8362e-01  +4.8362e-01  5.82e-08  2.21e-12  1.11e-09  5.41e-13  8.51e-12  9.90e-01  
 37  +4.8362e-01  +4.8362e-01  5.82e-10  2.21e-14  1.11e-11  5.41e-15  8.52e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2924129s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:50 PM: Problem status: optimal
(CVXPY) Sep 20 07:43:50 PM: Optimal value: 4.836e-01
(CVXPY) Sep 20 07:43:50 PM: Compilation took 2.159e-01 seconds
(CVXPY) Sep 20 07:43:50 PM: Solver (including time spent in interface) took 1.345e+00 seconds
Iteration: 7, Objective: 0.4836
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:43:50 PM: Your problem has 25085 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:43:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:43:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:43:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:43:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:43:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:43:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:43:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:43:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:43:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:43:50 PM: Finished problem compilation (took 2.019e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25085
  constraints   = 50085
  nnz(P)        = 0
  nnz(A)        = 374965
  cones (total) = 1
    : Nonnegative = 1,  numel = 50085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.50e+02  1.00e+00  1.00e+00   ------   
  1  +5.8812e-01  +5.2551e+03  5.25e+03  4.08e-01  1.56e+02  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3822e-01  +6.5310e+02  6.53e+02  1.63e-01  7.93e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1021e-01  +1.6858e+02  1.68e+02  1.43e-01  7.02e+01  3.49e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3674e+01  1.32e+01  3.74e-02  1.80e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.2490e+00  7.49e-01  2.25e-03  1.12e+00  2.46e-05  1.89e-01  2.38e-01  
  6  +5.0001e-01  +8.0360e-01  3.04e-01  9.07e-04  4.53e-01  8.17e-06  8.96e-02  6.80e-01  
  7  +5.0001e-01  +7.3277e-01  2.33e-01  6.95e-04  3.47e-01  6.25e-06  6.93e-02  2.64e-01  
  8  +5.0001e-01  +7.3005e-01  2.30e-01  6.87e-04  3.43e-01  4.79e-06  6.12e-02  4.51e-01  
  9  +5.0001e-01  +6.6704e-01  1.67e-01  4.99e-04  2.49e-01  3.62e-06  4.24e-02  3.52e-01  
 10  +5.0001e-01  +6.3891e-01  1.39e-01  4.15e-04  2.07e-01  2.82e-06  2.93e-02  4.73e-01  
 11  +5.0000e-01  +6.1467e-01  1.15e-01  3.42e-04  1.71e-01  2.49e-06  1.67e-02  5.85e-01  
 12  +5.0000e-01  +5.8245e-01  8.25e-02  2.40e-04  1.20e-01  5.02e-06  3.64e-03  8.68e-01  
 13  +4.9972e-01  +5.7595e-01  7.62e-02  2.91e-05  1.46e-02  1.54e-04  9.96e-05  9.78e-01  
 14  +4.9930e-01  +5.6774e-01  6.84e-02  1.09e-05  5.48e-03  3.20e-04  3.64e-05  7.34e-01  
 15  +4.9937e-01  +5.6139e-01  6.20e-02  8.79e-06  4.41e-03  1.92e-04  2.91e-05  5.59e-01  
 16  +4.9923e-01  +5.5841e-01  5.92e-02  6.89e-06  3.46e-03  1.65e-04  2.27e-05  4.52e-01  
 17  +4.9926e-01  +5.5625e-01  5.70e-02  6.06e-06  3.04e-03  9.42e-05  1.99e-05  5.36e-01  
 18  +4.9920e-01  +5.5563e-01  5.64e-02  5.78e-06  2.90e-03  8.41e-05  1.90e-05  1.66e-01  
 19  +4.9874e-01  +5.5149e-01  5.28e-02  4.21e-06  2.11e-03  2.99e-05  1.38e-05  8.77e-01  
 20  +4.9839e-01  +5.4970e-01  5.13e-02  3.87e-06  1.94e-03  2.54e-05  1.27e-05  2.23e-01  
 21  +4.9773e-01  +5.4634e-01  4.86e-02  3.48e-06  1.74e-03  1.62e-05  1.14e-05  3.84e-01  
 22  +4.9641e-01  +5.4003e-01  4.36e-02  2.80e-06  1.41e-03  1.24e-05  9.27e-06  3.43e-01  
 23  +4.9377e-01  +5.2781e-01  3.40e-02  1.91e-06  9.57e-04  4.99e-06  6.39e-06  6.20e-01  
 24  +4.9389e-01  +5.2824e-01  3.44e-02  1.91e-06  9.59e-04  4.95e-06  6.38e-06  2.46e-02  
 25  +4.9371e-01  +5.2778e-01  3.41e-02  1.87e-06  9.39e-04  4.19e-06  6.24e-06  1.49e-01  
 26  +4.9291e-01  +5.2466e-01  3.18e-02  1.65e-06  8.28e-04  2.04e-06  5.53e-06  4.94e-01  
 27  +4.9229e-01  +5.2232e-01  3.00e-02  1.52e-06  7.63e-04  1.06e-06  5.15e-06  4.57e-01  
 28  +4.9206e-01  +5.2125e-01  2.92e-02  1.45e-06  7.27e-04  7.49e-07  4.90e-06  3.35e-01  
 29  +4.8940e-01  +5.1019e-01  2.08e-02  9.42e-07  4.72e-04  2.70e-07  3.24e-06  7.34e-01  
 30  +4.8796e-01  +5.0418e-01  1.62e-02  6.97e-07  3.49e-04  1.75e-07  2.44e-06  6.33e-01  
 31  +4.8782e-01  +5.0354e-01  1.57e-02  6.68e-07  3.35e-04  1.66e-07  2.34e-06  3.11e-01  
 32  +4.8512e-01  +4.9296e-01  7.85e-03  3.16e-07  1.59e-04  7.94e-08  1.15e-06  5.84e-01  
 33  +4.8402e-01  +4.8863e-01  4.61e-03  1.80e-07  9.02e-05  4.86e-08  6.64e-07  7.24e-01  
 34  +4.8325e-01  +4.8563e-01  2.38e-03  9.16e-08  4.59e-05  2.65e-08  3.43e-07  9.90e-01  
 35  +4.8293e-01  +4.8446e-01  1.53e-03  5.86e-08  2.94e-05  1.72e-08  2.21e-07  6.67e-01  
 36  +4.8236e-01  +4.8241e-01  4.83e-05  1.84e-09  9.22e-07  5.10e-10  7.05e-09  9.90e-01  
 37  +4.8234e-01  +4.8234e-01  4.83e-07  1.84e-11  9.23e-09  5.09e-12  7.07e-11  9.90e-01  
 38  +4.8234e-01  +4.8234e-01  4.83e-09  1.84e-13  9.23e-11  5.09e-14  7.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3559765s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:43:52 PM: Optimal value: 4.823e-01
(CVXPY) Sep 20 07:43:52 PM: Compilation took 2.019e-01 seconds
(CVXPY) Sep 20 07:43:52 PM: Solver (including time spent in interface) took 1.405e+00 seconds
Iteration: 8, Objective: 0.4823
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:43:52 PM: Your problem has 25095 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:43:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:43:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:43:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:43:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:43:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:43:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:43:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:43:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:43:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:43:52 PM: Finished problem compilation (took 2.283e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25095
  constraints   = 50095
  nnz(P)        = 0
  nnz(A)        = 380947
  cones (total) = 1
    : Nonnegative = 1,  numel = 50095

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.50e+02  1.00e+00  1.00e+00   ------   
  1  +5.8811e-01  +5.2552e+03  5.25e+03  4.08e-01  1.56e+02  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3821e-01  +6.5300e+02  6.52e+02  1.63e-01  7.94e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1021e-01  +1.6854e+02  1.68e+02  1.43e-01  7.02e+01  3.49e-05  2.47e-01  1.54e-01  
  4  +5.0105e-01  +1.3677e+01  1.32e+01  3.75e-02  1.80e+01  4.20e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.2338e+00  7.34e-01  2.20e-03  1.10e+00  2.46e-05  1.89e-01  2.44e-01  
  6  +5.0001e-01  +7.0620e-01  2.06e-01  6.16e-04  3.08e-01  4.67e-06  6.30e-02  8.65e-01  
  7  +5.0001e-01  +6.8840e-01  1.88e-01  5.63e-04  2.81e-01  4.20e-06  5.53e-02  1.85e-01  
  8  +5.0001e-01  +6.8232e-01  1.82e-01  5.44e-04  2.72e-01  3.40e-06  4.65e-02  4.24e-01  
  9  +5.0001e-01  +6.3541e-01  1.35e-01  4.04e-04  2.02e-01  1.90e-06  2.56e-02  7.96e-01  
 10  +5.0000e-01  +6.0336e-01  1.03e-01  3.07e-04  1.54e-01  2.08e-06  9.88e-03  7.63e-01  
 11  +4.9998e-01  +5.8268e-01  8.27e-02  1.66e-04  8.34e-02  1.53e-05  8.38e-04  9.38e-01  
 12  +4.9951e-01  +5.8010e-01  8.06e-02  1.41e-05  7.07e-03  2.59e-04  4.71e-05  9.44e-01  
 13  +4.9928e-01  +5.7060e-01  7.13e-02  9.35e-06  4.69e-03  2.36e-04  3.10e-05  5.49e-01  
 14  +4.9926e-01  +5.6649e-01  6.72e-02  7.92e-06  3.97e-03  1.73e-04  2.62e-05  4.18e-01  
 15  +4.9926e-01  +5.6434e-01  6.51e-02  7.01e-06  3.52e-03  1.35e-04  2.31e-05  3.56e-01  
 16  +4.9921e-01  +5.6312e-01  6.39e-02  6.60e-06  3.32e-03  1.17e-04  2.18e-05  1.95e-01  
 17  +4.9879e-01  +5.6005e-01  6.13e-02  5.08e-06  2.55e-03  1.17e-04  1.68e-05  3.67e-01  
 18  +4.9834e-01  +5.5672e-01  5.84e-02  4.42e-06  2.22e-03  9.35e-05  1.46e-05  3.19e-01  
 19  +4.9824e-01  +5.5603e-01  5.78e-02  4.41e-06  2.21e-03  8.75e-05  1.46e-05  4.25e-02  
 20  +4.9636e-01  +5.4568e-01  4.93e-02  3.06e-06  1.54e-03  6.87e-05  1.02e-05  4.60e-01  
 21  +4.9508e-01  +5.3917e-01  4.41e-02  2.63e-06  1.32e-03  5.28e-05  8.80e-06  2.36e-01  
 22  +4.9296e-01  +5.2810e-01  3.51e-02  1.98e-06  9.93e-04  1.05e-05  6.68e-06  6.90e-01  
 23  +4.9298e-01  +5.2820e-01  3.52e-02  1.98e-06  9.94e-04  1.05e-05  6.68e-06  5.50e-03  
 24  +4.9311e-01  +5.2873e-01  3.56e-02  1.98e-06  9.91e-04  9.83e-06  6.63e-06  8.21e-02  
 25  +4.9300e-01  +5.2834e-01  3.53e-02  1.92e-06  9.63e-04  9.09e-06  6.43e-06  9.79e-02  
 26  +4.9285e-01  +5.2764e-01  3.48e-02  1.88e-06  9.44e-04  7.12e-06  6.30e-06  1.85e-01  
 27  +4.9188e-01  +5.2366e-01  3.18e-02  1.64e-06  8.24e-04  5.87e-06  5.53e-06  2.03e-01  
 28  +4.9010e-01  +5.1613e-01  2.60e-02  1.26e-06  6.34e-04  2.74e-06  4.31e-06  5.09e-01  
 29  +4.8818e-01  +5.0808e-01  1.99e-02  9.07e-07  4.55e-04  1.68e-06  3.14e-06  4.07e-01  
 30  +4.8754e-01  +5.0538e-01  1.78e-02  7.95e-07  3.99e-04  1.32e-06  2.76e-06  2.33e-01  
 31  +4.8682e-01  +5.0205e-01  1.52e-02  6.52e-07  3.27e-04  5.11e-07  2.28e-06  6.64e-01  
 32  +4.8464e-01  +4.9333e-01  8.69e-03  3.57e-07  1.79e-04  2.28e-07  1.28e-06  5.93e-01  
 33  +4.8424e-01  +4.9149e-01  7.25e-03  2.88e-07  1.45e-04  8.79e-08  1.03e-06  9.47e-01  
 34  +4.8248e-01  +4.8482e-01  2.34e-03  9.07e-08  4.55e-05  2.77e-08  3.35e-07  7.67e-01  
 35  +4.8169e-01  +4.8194e-01  2.47e-04  9.34e-09  4.69e-06  2.87e-09  3.55e-08  9.17e-01  
 36  +4.8160e-01  +4.8160e-01  2.71e-06  1.02e-10  5.14e-08  3.14e-11  3.90e-10  9.90e-01  
 37  +4.8160e-01  +4.8160e-01  2.71e-08  1.02e-12  5.14e-10  3.14e-13  3.90e-12  9.90e-01  
 38  +4.8160e-01  +4.8160e-01  2.72e-10  1.02e-14  5.16e-12  3.84e-15  4.72e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3545966s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:54 PM: Problem status: optimal
(CVXPY) Sep 20 07:43:54 PM: Optimal value: 4.816e-01
(CVXPY) Sep 20 07:43:54 PM: Compilation took 2.283e-01 seconds
(CVXPY) Sep 20 07:43:54 PM: Solver (including time spent in interface) took 1.410e+00 seconds
Iteration: 9, Objective: 0.4816
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:43:54 PM: Your problem has 25097 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:43:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:43:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:43:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:43:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:43:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:43:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:43:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:43:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:43:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:43:54 PM: Finished problem compilation (took 2.245e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25097
  constraints   = 50097
  nnz(P)        = 0
  nnz(A)        = 382972
  cones (total) = 1
    : Nonnegative = 1,  numel = 50097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.50e+02  1.00e+00  1.00e+00   ------   
  1  +5.8812e-01  +5.2552e+03  5.25e+03  4.08e-01  1.57e+02  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3821e-01  +6.5301e+02  6.52e+02  1.63e-01  7.94e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1021e-01  +1.6854e+02  1.68e+02  1.43e-01  7.03e+01  3.49e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3676e+01  1.32e+01  3.75e-02  1.80e+01  4.20e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.2358e+00  7.36e-01  2.21e-03  1.10e+00  2.46e-05  1.89e-01  2.43e-01  
  6  +5.0001e-01  +7.0245e-01  2.02e-01  6.05e-04  3.02e-01  4.53e-06  6.20e-02  8.71e-01  
  7  +5.0001e-01  +6.8635e-01  1.86e-01  5.56e-04  2.78e-01  4.03e-06  5.40e-02  2.23e-01  
  8  +5.0001e-01  +6.6793e-01  1.68e-01  5.01e-04  2.51e-01  3.30e-06  4.30e-02  3.83e-01  
  9  +5.0001e-01  +6.4087e-01  1.41e-01  4.20e-04  2.10e-01  2.05e-06  2.61e-02  7.52e-01  
 10  +5.0001e-01  +6.1740e-01  1.17e-01  3.50e-04  1.75e-01  2.12e-06  1.36e-02  5.90e-01  
 11  +4.9999e-01  +5.8345e-01  8.35e-02  2.22e-04  1.11e-01  7.89e-06  1.81e-03  9.10e-01  
 12  +4.9957e-01  +5.8073e-01  8.12e-02  1.70e-05  8.55e-03  2.33e-04  5.71e-05  9.70e-01  
 13  +4.9926e-01  +5.7084e-01  7.16e-02  9.58e-06  4.81e-03  2.68e-04  3.18e-05  6.18e-01  
 14  +4.9939e-01  +5.6718e-01  6.78e-02  8.88e-06  4.46e-03  1.69e-04  2.93e-05  3.84e-01  
 15  +4.9937e-01  +5.6530e-01  6.59e-02  7.80e-06  3.92e-03  1.45e-04  2.57e-05  3.07e-01  
 16  +4.9934e-01  +5.6387e-01  6.45e-02  7.20e-06  3.62e-03  1.24e-04  2.37e-05  2.41e-01  
 17  +4.9926e-01  +5.6017e-01  6.09e-02  6.12e-06  3.07e-03  5.52e-05  2.01e-05  6.65e-01  
 18  +4.9878e-01  +5.5734e-01  5.86e-02  4.73e-06  2.38e-03  5.63e-05  1.56e-05  3.44e-01  
 19  +4.9859e-01  +5.5615e-01  5.76e-02  4.51e-06  2.27e-03  4.61e-05  1.48e-05  2.10e-01  
 20  +4.9765e-01  +5.5088e-01  5.32e-02  3.82e-06  1.92e-03  2.48e-05  1.26e-05  5.17e-01  
 21  +4.9673e-01  +5.4619e-01  4.95e-02  3.34e-06  1.68e-03  1.78e-05  1.10e-05  3.19e-01  
 22  +4.9496e-01  +5.3783e-01  4.29e-02  2.58e-06  1.30e-03  1.33e-05  8.61e-06  3.52e-01  
 23  +4.9383e-01  +5.3269e-01  3.89e-02  2.24e-06  1.12e-03  4.30e-06  7.51e-06  5.91e-01  
 24  +4.9344e-01  +5.3082e-01  3.74e-02  2.08e-06  1.04e-03  3.27e-06  6.95e-06  2.56e-01  
 25  +4.9321e-01  +5.2985e-01  3.66e-02  1.99e-06  1.00e-03  2.89e-06  6.67e-06  1.32e-01  
 26  +4.9271e-01  +5.2755e-01  3.48e-02  1.86e-06  9.34e-04  1.66e-06  6.25e-06  3.92e-01  
 27  +4.9134e-01  +5.2199e-01  3.06e-02  1.56e-06  7.81e-04  1.22e-06  5.27e-06  2.93e-01  
 28  +4.8966e-01  +5.1490e-01  2.52e-02  1.20e-06  6.05e-04  7.48e-07  4.13e-06  4.25e-01  
 29  +4.8929e-01  +5.1303e-01  2.37e-02  1.10e-06  5.50e-04  4.04e-07  3.77e-06  5.74e-01  
 30  +4.8776e-01  +5.0679e-01  1.90e-02  8.37e-07  4.20e-04  2.19e-07  2.92e-06  6.94e-01  
 31  +4.8686e-01  +5.0301e-01  1.61e-02  6.84e-07  3.43e-04  1.62e-07  2.40e-06  8.44e-01  
 32  +4.8377e-01  +4.9060e-01  6.83e-03  2.77e-07  1.39e-04  6.62e-08  1.01e-06  6.50e-01  
 33  +4.8209e-01  +4.8407e-01  1.98e-03  7.75e-08  3.89e-05  2.00e-08  2.92e-07  8.31e-01  
 34  +4.8144e-01  +4.8163e-01  1.96e-04  7.51e-09  3.77e-06  2.11e-09  2.89e-08  9.90e-01  
 35  +4.8136e-01  +4.8136e-01  2.20e-06  8.41e-11  4.22e-08  2.36e-11  3.25e-10  9.89e-01  
 36  +4.8136e-01  +4.8136e-01  2.20e-08  8.41e-13  4.22e-10  2.36e-13  3.25e-12  9.90e-01  
 37  +4.8136e-01  +4.8136e-01  2.20e-10  8.44e-15  4.24e-12  2.85e-15  3.89e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2834523s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:55 PM: Problem status: optimal
(CVXPY) Sep 20 07:43:55 PM: Optimal value: 4.814e-01
(CVXPY) Sep 20 07:43:55 PM: Compilation took 2.245e-01 seconds
(CVXPY) Sep 20 07:43:55 PM: Solver (including time spent in interface) took 1.336e+00 seconds
Iteration: 10, Objective: 0.4814
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:43:55 PM: Your problem has 25107 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:43:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:43:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:43:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:43:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:43:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:43:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:43:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:43:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:43:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:43:56 PM: Finished problem compilation (took 2.082e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25107
  constraints   = 50107
  nnz(P)        = 0
  nnz(A)        = 390001
  cones (total) = 1
    : Nonnegative = 1,  numel = 50107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.50e+02  1.00e+00  1.00e+00   ------   
  1  +5.8811e-01  +5.2553e+03  5.25e+03  4.09e-01  1.57e+02  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3819e-01  +6.5281e+02  6.52e+02  1.63e-01  7.94e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1021e-01  +1.6849e+02  1.68e+02  1.43e-01  7.03e+01  3.49e-05  2.47e-01  1.54e-01  
  4  +5.0105e-01  +1.3680e+01  1.32e+01  3.75e-02  1.80e+01  4.20e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1743e+00  6.74e-01  2.02e-03  1.01e+00  2.48e-05  1.88e-01  2.67e-01  
  6  +5.0001e-01  +7.4996e-01  2.50e-01  7.47e-04  3.74e-01  6.22e-06  7.43e-02  8.63e-01  
  7  +5.0001e-01  +7.0879e-01  2.09e-01  6.24e-04  3.12e-01  5.09e-06  5.97e-02  2.79e-01  
  8  +5.0001e-01  +6.8101e-01  1.81e-01  5.41e-04  2.71e-01  4.19e-06  4.69e-02  3.46e-01  
  9  +5.0001e-01  +6.6896e-01  1.69e-01  5.05e-04  2.53e-01  3.32e-06  3.64e-02  4.65e-01  
 10  +5.0001e-01  +6.3557e-01  1.36e-01  4.04e-04  2.02e-01  1.40e-06  1.73e-02  9.90e-01  
 11  +5.0000e-01  +5.9680e-01  9.68e-02  2.77e-04  1.39e-01  3.29e-06  3.44e-03  8.53e-01  
 12  +4.9982e-01  +5.8012e-01  8.03e-02  2.52e-05  1.26e-02  9.93e-05  8.58e-05  9.90e-01  
 13  +4.9950e-01  +5.7752e-01  7.80e-02  1.09e-05  5.48e-03  2.20e-04  3.64e-05  5.86e-01  
 14  +4.9919e-01  +5.7163e-01  7.24e-02  8.25e-06  4.15e-03  2.08e-04  2.75e-05  3.93e-01  
 15  +4.9918e-01  +5.7027e-01  7.11e-02  7.85e-06  3.94e-03  1.82e-04  2.61e-05  1.74e-01  
 16  +4.9905e-01  +5.6892e-01  6.99e-02  6.97e-06  3.50e-03  1.81e-04  2.31e-05  1.80e-01  
 17  +4.9902e-01  +5.6695e-01  6.79e-02  6.88e-06  3.46e-03  1.42e-04  2.28e-05  1.76e-01  
 18  +4.9881e-01  +5.6440e-01  6.56e-02  6.03e-06  3.03e-03  1.18e-04  1.99e-05  3.12e-01  
 19  +4.9820e-01  +5.5921e-01  6.10e-02  4.73e-06  2.38e-03  8.65e-05  1.57e-05  4.74e-01  
 20  +4.9817e-01  +5.5903e-01  6.09e-02  4.73e-06  2.38e-03  8.57e-05  1.57e-05  3.42e-03  
 21  +4.9802e-01  +5.5776e-01  5.97e-02  4.64e-06  2.33e-03  6.88e-05  1.54e-05  1.75e-01  
 22  +4.9732e-01  +5.5364e-01  5.63e-02  4.01e-06  2.02e-03  5.06e-05  1.33e-05  3.47e-01  
 23  +4.9587e-01  +5.4545e-01  4.96e-02  3.27e-06  1.64e-03  1.75e-05  1.10e-05  6.19e-01  
 24  +4.9516e-01  +5.4192e-01  4.68e-02  2.95e-06  1.48e-03  1.15e-05  9.91e-06  3.37e-01  
 25  +4.9506e-01  +5.4150e-01  4.64e-02  2.93e-06  1.47e-03  1.08e-05  9.88e-06  4.28e-02  
 26  +4.9245e-01  +5.2949e-01  3.70e-02  2.05e-06  1.03e-03  8.05e-06  6.99e-06  3.63e-01  
 27  +4.9201e-01  +5.2719e-01  3.52e-02  1.89e-06  9.50e-04  4.24e-06  6.47e-06  4.29e-01  
 28  +4.9072e-01  +5.2150e-01  3.08e-02  1.58e-06  7.95e-04  3.43e-06  5.46e-06  2.12e-01  
 29  +4.9061e-01  +5.2093e-01  3.03e-02  1.54e-06  7.75e-04  2.61e-06  5.33e-06  2.26e-01  
 30  +4.8859e-01  +5.1214e-01  2.35e-02  1.12e-06  5.63e-04  1.59e-06  3.92e-06  4.14e-01  
 31  +4.8851e-01  +5.1184e-01  2.33e-02  1.11e-06  5.60e-04  1.52e-06  3.92e-06  2.66e-02  
 32  +4.8738e-01  +5.0692e-01  1.95e-02  8.96e-07  4.50e-04  9.39e-07  3.17e-06  4.13e-01  
 33  +4.8727e-01  +5.0635e-01  1.91e-02  8.51e-07  4.28e-04  6.04e-07  3.01e-06  4.37e-01  
 34  +4.8451e-01  +4.9477e-01  1.03e-02  4.36e-07  2.19e-04  2.24e-07  1.59e-06  6.74e-01  
 35  +4.8228e-01  +4.8574e-01  3.46e-03  1.40e-07  7.05e-05  6.74e-08  5.28e-07  7.26e-01  
 36  +4.8226e-01  +4.8565e-01  3.39e-03  1.37e-07  6.89e-05  6.13e-08  5.16e-07  1.73e-01  
 37  +4.8161e-01  +4.8321e-01  1.59e-03  6.32e-08  3.17e-05  2.78e-08  2.43e-07  5.66e-01  
 38  +4.8152e-01  +4.8280e-01  1.28e-03  5.06e-08  2.54e-05  1.76e-08  1.95e-07  6.41e-01  
 39  +4.8105e-01  +4.8109e-01  3.95e-05  1.54e-09  7.71e-07  4.84e-10  6.02e-09  9.79e-01  
 40  +4.8104e-01  +4.8104e-01  3.99e-07  1.55e-11  7.80e-09  4.89e-12  6.09e-11  9.90e-01  
 41  +4.8104e-01  +4.8104e-01  3.99e-09  1.55e-13  7.80e-11  4.89e-14  6.09e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4013939s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:43:57 PM: Optimal value: 4.810e-01
(CVXPY) Sep 20 07:43:57 PM: Compilation took 2.082e-01 seconds
(CVXPY) Sep 20 07:43:57 PM: Solver (including time spent in interface) took 1.450e+00 seconds
Iteration: 11, Objective: 0.4810
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:43:57 PM: Your problem has 25113 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:43:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:43:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:43:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:43:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:43:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:43:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:43:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:43:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:43:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:43:58 PM: Finished problem compilation (took 2.332e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25113
  constraints   = 50113
  nnz(P)        = 0
  nnz(A)        = 392499
  cones (total) = 1
    : Nonnegative = 1,  numel = 50113

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.50e+02  1.00e+00  1.00e+00   ------   
  1  +5.8810e-01  +5.2558e+03  5.26e+03  4.09e-01  1.57e+02  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3818e-01  +6.5274e+02  6.52e+02  1.63e-01  7.94e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1020e-01  +1.6850e+02  1.68e+02  1.44e-01  7.03e+01  3.49e-05  2.47e-01  1.54e-01  
  4  +5.0105e-01  +1.3692e+01  1.32e+01  3.75e-02  1.81e+01  4.20e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1781e+00  6.78e-01  2.04e-03  1.02e+00  2.48e-05  1.88e-01  2.65e-01  
  6  +5.0001e-01  +8.0540e-01  3.05e-01  9.13e-04  4.57e-01  8.60e-06  8.99e-02  7.44e-01  
  7  +5.0001e-01  +7.3071e-01  2.31e-01  6.89e-04  3.45e-01  6.51e-06  6.77e-02  2.89e-01  
  8  +5.0001e-01  +7.0422e-01  2.04e-01  6.10e-04  3.06e-01  5.00e-06  5.37e-02  4.26e-01  
  9  +5.0001e-01  +6.8609e-01  1.86e-01  5.56e-04  2.78e-01  3.50e-06  4.06e-02  5.59e-01  
 10  +5.0001e-01  +6.3585e-01  1.36e-01  4.05e-04  2.03e-01  1.33e-06  1.90e-02  9.86e-01  
 11  +5.0001e-01  +6.1314e-01  1.13e-01  3.34e-04  1.67e-01  2.16e-06  6.87e-03  6.88e-01  
 12  +4.9997e-01  +5.8062e-01  8.06e-02  9.80e-05  4.92e-02  2.16e-05  3.88e-04  9.90e-01  
 13  +4.9942e-01  +5.7760e-01  7.82e-02  8.10e-06  4.07e-03  2.96e-04  2.70e-05  9.31e-01  
 14  +4.9910e-01  +5.7210e-01  7.30e-02  7.27e-06  3.66e-03  2.41e-04  2.42e-05  2.36e-01  
 15  +4.9904e-01  +5.7069e-01  7.17e-02  6.80e-06  3.42e-03  2.20e-04  2.26e-05  1.67e-01  
 16  +4.9907e-01  +5.6858e-01  6.95e-02  6.18e-06  3.10e-03  1.63e-04  2.05e-05  3.37e-01  
 17  +4.9890e-01  +5.6604e-01  6.71e-02  6.03e-06  3.03e-03  1.25e-04  2.00e-05  1.93e-01  
 18  +4.9864e-01  +5.6420e-01  6.56e-02  5.42e-06  2.72e-03  1.21e-04  1.80e-05  1.68e-01  
 19  +4.9865e-01  +5.6355e-01  6.49e-02  5.38e-06  2.70e-03  1.03e-04  1.78e-05  1.31e-01  
 20  +4.9839e-01  +5.6203e-01  6.36e-02  4.86e-06  2.44e-03  1.01e-04  1.62e-05  1.55e-01  
 21  +4.9831e-01  +5.6139e-01  6.31e-02  4.82e-06  2.43e-03  9.50e-05  1.60e-05  4.83e-02  
 22  +4.9811e-01  +5.5918e-01  6.11e-02  4.67e-06  2.35e-03  5.95e-05  1.55e-05  3.25e-01  
 23  +4.9633e-01  +5.4966e-01  5.33e-02  3.31e-06  1.66e-03  4.45e-05  1.11e-05  4.84e-01  
 24  +4.9608e-01  +5.4825e-01  5.22e-02  3.29e-06  1.65e-03  3.85e-05  1.11e-05  8.45e-02  
 25  +4.9469e-01  +5.4128e-01  4.66e-02  2.78e-06  1.40e-03  3.04e-05  9.44e-06  2.36e-01  
 26  +4.9377e-01  +5.3587e-01  4.21e-02  2.52e-06  1.27e-03  5.00e-06  8.64e-06  6.63e-01  
 27  +4.9221e-01  +5.2854e-01  3.63e-02  2.04e-06  1.03e-03  3.75e-06  7.04e-06  2.84e-01  
 28  +4.9196e-01  +5.2733e-01  3.54e-02  1.94e-06  9.73e-04  2.28e-06  6.68e-06  3.73e-01  
 29  +4.9084e-01  +5.2229e-01  3.14e-02  1.65e-06  8.28e-04  1.85e-06  5.72e-06  2.17e-01  
 30  +4.9061e-01  +5.2117e-01  3.06e-02  1.56e-06  7.86e-04  1.27e-06  5.43e-06  3.29e-01  
 31  +4.8909e-01  +5.1450e-01  2.54e-02  1.23e-06  6.19e-04  9.39e-07  4.31e-06  3.06e-01  
 32  +4.8899e-01  +5.1416e-01  2.52e-02  1.22e-06  6.14e-04  8.75e-07  4.29e-06  5.96e-02  
 33  +4.8801e-01  +5.0987e-01  2.19e-02  1.02e-06  5.14e-04  6.37e-07  3.61e-06  3.24e-01  
 34  +4.8754e-01  +5.0780e-01  2.03e-02  9.32e-07  4.68e-04  5.29e-07  3.30e-06  2.12e-01  
 35  +4.8695e-01  +5.0514e-01  1.82e-02  8.04e-07  4.04e-04  2.70e-07  2.86e-06  6.76e-01  
 36  +4.8435e-01  +4.9436e-01  1.00e-02  4.24e-07  2.13e-04  1.38e-07  1.55e-06  5.25e-01  
 37  +4.8272e-01  +4.8763e-01  4.91e-03  2.01e-07  1.01e-04  6.28e-08  7.51e-07  6.42e-01  
 38  +4.8207e-01  +4.8508e-01  3.01e-03  1.21e-07  6.07e-05  3.81e-08  4.59e-07  4.13e-01  
 39  +4.8172e-01  +4.8364e-01  1.92e-03  7.60e-08  3.82e-05  2.13e-08  2.91e-07  8.52e-01  
 40  +4.8105e-01  +4.8114e-01  8.39e-05  3.27e-09  1.64e-06  8.81e-10  1.28e-08  9.81e-01  
 41  +4.8102e-01  +4.8102e-01  8.78e-07  3.42e-11  1.72e-08  9.21e-12  1.34e-10  9.90e-01  
 42  +4.8102e-01  +4.8102e-01  8.78e-09  3.42e-13  1.72e-10  9.21e-14  1.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5291615s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:59 PM: Problem status: optimal
(CVXPY) Sep 20 07:43:59 PM: Optimal value: 4.810e-01
(CVXPY) Sep 20 07:43:59 PM: Compilation took 2.332e-01 seconds
(CVXPY) Sep 20 07:43:59 PM: Solver (including time spent in interface) took 1.586e+00 seconds
Iteration: 12, Objective: 0.4810
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:43:59 PM: Your problem has 25116 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:43:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:43:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:43:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:43:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:43:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:43:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:43:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:43:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:43:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:43:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:00 PM: Finished problem compilation (took 2.432e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25116
  constraints   = 50116
  nnz(P)        = 0
  nnz(A)        = 393939
  cones (total) = 1
    : Nonnegative = 1,  numel = 50116

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.50e+02  1.00e+00  1.00e+00   ------   
  1  +5.8810e-01  +5.2556e+03  5.25e+03  4.09e-01  1.57e+02  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3818e-01  +6.5271e+02  6.52e+02  1.63e-01  7.94e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1020e-01  +1.6849e+02  1.68e+02  1.44e-01  7.03e+01  3.49e-05  2.47e-01  1.54e-01  
  4  +5.0105e-01  +1.3689e+01  1.32e+01  3.75e-02  1.81e+01  4.20e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1676e+00  6.68e-01  2.00e-03  1.00e+00  2.48e-05  1.88e-01  2.70e-01  
  6  +5.0001e-01  +7.9275e-01  2.93e-01  8.75e-04  4.38e-01  8.08e-06  8.64e-02  7.82e-01  
  7  +5.0001e-01  +7.2759e-01  2.28e-01  6.80e-04  3.41e-01  6.25e-06  6.63e-02  2.85e-01  
  8  +5.0001e-01  +7.0081e-01  2.01e-01  6.00e-04  3.00e-01  4.96e-06  5.30e-02  3.83e-01  
  9  +5.0001e-01  +6.8313e-01  1.83e-01  5.47e-04  2.74e-01  3.43e-06  3.95e-02  5.81e-01  
 10  +5.0001e-01  +6.4080e-01  1.41e-01  4.20e-04  2.10e-01  1.26e-06  1.93e-02  9.90e-01  
 11  +5.0000e-01  +6.0999e-01  1.10e-01  3.23e-04  1.62e-01  2.15e-06  5.98e-03  7.44e-01  
 12  +4.9998e-01  +5.8135e-01  8.14e-02  1.11e-04  5.57e-02  1.64e-05  4.54e-04  9.90e-01  
 13  +4.9951e-01  +5.7874e-01  7.92e-02  8.48e-06  4.26e-03  2.53e-04  2.82e-05  9.38e-01  
 14  +4.9933e-01  +5.7539e-01  7.61e-02  7.90e-06  3.97e-03  2.26e-04  2.62e-05  1.54e-01  
 15  +4.9901e-01  +5.7092e-01  7.19e-02  6.77e-06  3.40e-03  2.01e-04  2.25e-05  2.61e-01  
 16  +4.9913e-01  +5.6944e-01  7.03e-02  6.36e-06  3.20e-03  1.50e-04  2.10e-05  2.99e-01  
 17  +4.9902e-01  +5.6808e-01  6.91e-02  6.24e-06  3.14e-03  1.34e-04  2.06e-05  9.64e-02  
 18  +4.9898e-01  +5.6653e-01  6.75e-02  6.12e-06  3.08e-03  1.05e-04  2.02e-05  1.92e-01  
 19  +4.9820e-01  +5.6158e-01  6.34e-02  4.46e-06  2.24e-03  1.11e-04  1.48e-05  3.55e-01  
 20  +4.9818e-01  +5.6144e-01  6.33e-02  4.46e-06  2.24e-03  1.10e-04  1.48e-05  2.69e-03  
 21  +4.9793e-01  +5.5954e-01  6.16e-02  4.42e-06  2.22e-03  9.13e-05  1.47e-05  1.21e-01  
 22  +4.9723e-01  +5.5539e-01  5.82e-02  3.89e-06  1.96e-03  7.45e-05  1.30e-05  2.54e-01  
 23  +4.9662e-01  +5.5177e-01  5.51e-02  3.62e-06  1.82e-03  5.55e-05  1.21e-05  2.31e-01  
 24  +4.9558e-01  +5.4578e-01  5.02e-02  3.23e-06  1.62e-03  3.17e-05  1.09e-05  3.66e-01  
 25  +4.9475e-01  +5.4165e-01  4.69e-02  2.90e-06  1.46e-03  2.66e-05  9.86e-06  1.79e-01  
 26  +4.9315e-01  +5.3322e-01  4.01e-02  2.35e-06  1.18e-03  6.68e-06  8.04e-06  6.50e-01  
 27  +4.9225e-01  +5.2894e-01  3.67e-02  2.05e-06  1.03e-03  3.78e-06  7.03e-06  4.18e-01  
 28  +4.9130e-01  +5.2459e-01  3.33e-02  1.77e-06  8.91e-04  2.69e-06  6.12e-06  3.01e-01  
 29  +4.9118e-01  +5.2415e-01  3.30e-02  1.75e-06  8.80e-04  2.51e-06  6.06e-06  5.93e-02  
 30  +4.8887e-01  +5.1398e-01  2.51e-02  1.23e-06  6.20e-04  1.64e-06  4.33e-06  3.80e-01  
 31  +4.8881e-01  +5.1373e-01  2.49e-02  1.21e-06  6.08e-04  1.51e-06  4.25e-06  9.93e-02  
 32  +4.8867e-01  +5.1299e-01  2.43e-02  1.16e-06  5.85e-04  1.06e-06  4.10e-06  3.14e-01  
 33  +4.8794e-01  +5.0977e-01  2.18e-02  1.02e-06  5.12e-04  7.70e-07  3.60e-06  3.09e-01  
 34  +4.8723e-01  +5.0671e-01  1.95e-02  8.65e-07  4.35e-04  2.72e-07  3.07e-06  7.94e-01  
 35  +4.8415e-01  +4.9374e-01  9.59e-03  4.08e-07  2.05e-04  1.12e-07  1.49e-06  6.93e-01  
 36  +4.8203e-01  +4.8508e-01  3.05e-03  1.24e-07  6.25e-05  3.47e-08  4.72e-07  7.24e-01  
 37  +4.8146e-01  +4.8287e-01  1.42e-03  5.62e-08  2.83e-05  1.48e-08  2.18e-07  9.63e-01  
 38  +4.8111e-01  +4.8157e-01  4.60e-04  1.81e-08  9.10e-06  4.82e-09  7.11e-08  9.90e-01  
 39  +4.8095e-01  +4.8097e-01  2.19e-05  8.57e-10  4.31e-07  2.28e-10  3.39e-09  9.66e-01  
 40  +4.8094e-01  +4.8094e-01  2.27e-07  8.90e-12  4.47e-09  2.36e-12  3.52e-11  9.90e-01  
 41  +4.8094e-01  +4.8094e-01  2.28e-09  8.95e-14  4.49e-11  2.98e-14  4.39e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4866913s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:01 PM: Optimal value: 4.809e-01
(CVXPY) Sep 20 07:44:01 PM: Compilation took 2.432e-01 seconds
(CVXPY) Sep 20 07:44:01 PM: Solver (including time spent in interface) took 1.543e+00 seconds
Iteration: 13, Objective: 0.4809
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:01 PM: Your problem has 25117 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:02 PM: Finished problem compilation (took 2.225e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25117
  constraints   = 50117
  nnz(P)        = 0
  nnz(A)        = 394753
  cones (total) = 1
    : Nonnegative = 1,  numel = 50117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.50e+02  1.00e+00  1.00e+00   ------   
  1  +5.8810e-01  +5.2556e+03  5.26e+03  4.09e-01  1.57e+02  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3818e-01  +6.5271e+02  6.52e+02  1.63e-01  7.94e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1020e-01  +1.6849e+02  1.68e+02  1.44e-01  7.03e+01  3.49e-05  2.47e-01  1.54e-01  
  4  +5.0105e-01  +1.3689e+01  1.32e+01  3.75e-02  1.81e+01  4.20e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1674e+00  6.67e-01  2.00e-03  1.00e+00  2.48e-05  1.88e-01  2.70e-01  
  6  +5.0001e-01  +8.1520e-01  3.15e-01  9.42e-04  4.72e-01  9.07e-06  9.27e-02  7.35e-01  
  7  +5.0001e-01  +7.3406e-01  2.34e-01  7.00e-04  3.50e-01  6.73e-06  6.88e-02  3.03e-01  
  8  +5.0001e-01  +7.0737e-01  2.07e-01  6.20e-04  3.10e-01  5.27e-06  5.51e-02  3.95e-01  
  9  +5.0001e-01  +6.8779e-01  1.88e-01  5.61e-04  2.81e-01  3.51e-06  4.08e-02  6.09e-01  
 10  +5.0001e-01  +6.4501e-01  1.45e-01  4.33e-04  2.17e-01  1.48e-06  2.12e-02  9.25e-01  
 11  +5.0001e-01  +6.1412e-01  1.14e-01  3.37e-04  1.69e-01  2.21e-06  7.56e-03  6.95e-01  
 12  +4.9999e-01  +5.8432e-01  8.43e-02  1.73e-04  8.66e-02  9.79e-06  8.84e-04  9.90e-01  
 13  +4.9954e-01  +5.8184e-01  8.23e-02  1.01e-05  5.10e-03  2.45e-04  3.38e-05  9.62e-01  
 14  +4.9930e-01  +5.7740e-01  7.81e-02  8.65e-06  4.35e-03  2.32e-04  2.88e-05  2.35e-01  
 15  +4.9896e-01  +5.7200e-01  7.30e-02  7.15e-06  3.59e-03  2.07e-04  2.38e-05  2.99e-01  
 16  +4.9913e-01  +5.7038e-01  7.12e-02  6.81e-06  3.42e-03  1.51e-04  2.25e-05  2.90e-01  
 17  +4.9905e-01  +5.6865e-01  6.96e-02  6.61e-06  3.32e-03  1.30e-04  2.18e-05  1.46e-01  
 18  +4.9903e-01  +5.6678e-01  6.77e-02  6.46e-06  3.25e-03  9.49e-05  2.13e-05  2.39e-01  
 19  +4.9822e-01  +5.6167e-01  6.34e-02  4.53e-06  2.28e-03  1.05e-04  1.51e-05  3.74e-01  
 20  +4.9820e-01  +5.6151e-01  6.33e-02  4.54e-06  2.28e-03  1.04e-04  1.51e-05  2.30e-03  
 21  +4.9787e-01  +5.5921e-01  6.13e-02  4.38e-06  2.20e-03  8.79e-05  1.45e-05  1.39e-01  
 22  +4.9735e-01  +5.5601e-01  5.87e-02  3.99e-06  2.00e-03  7.19e-05  1.33e-05  2.24e-01  
 23  +4.9680e-01  +5.5286e-01  5.61e-02  3.70e-06  1.86e-03  6.07e-05  1.24e-05  1.69e-01  
 24  +4.9623e-01  +5.4935e-01  5.31e-02  3.48e-06  1.75e-03  4.36e-05  1.17e-05  2.32e-01  
 25  +4.9486e-01  +5.4244e-01  4.76e-02  2.92e-06  1.47e-03  3.40e-05  9.89e-06  2.61e-01  
 26  +4.9402e-01  +5.3729e-01  4.33e-02  2.63e-06  1.32e-03  9.22e-06  8.97e-06  5.90e-01  
 27  +4.9213e-01  +5.2848e-01  3.64e-02  2.03e-06  1.02e-03  6.41e-06  6.99e-06  3.47e-01  
 28  +4.9167e-01  +5.2628e-01  3.46e-02  1.87e-06  9.38e-04  3.96e-06  6.43e-06  3.66e-01  
 29  +4.9078e-01  +5.2239e-01  3.16e-02  1.64e-06  8.23e-04  2.60e-06  5.67e-06  3.42e-01  
 30  +4.8837e-01  +5.1174e-01  2.34e-02  1.12e-06  5.61e-04  1.11e-06  3.93e-06  5.79e-01  
 31  +4.8830e-01  +5.1146e-01  2.32e-02  1.11e-06  5.56e-04  1.05e-06  3.91e-06  4.99e-02  
 32  +4.8835e-01  +5.1165e-01  2.33e-02  1.10e-06  5.55e-04  1.01e-06  3.90e-06  5.42e-02  
 33  +4.8754e-01  +5.0784e-01  2.03e-02  9.17e-07  4.61e-04  2.80e-07  3.25e-06  8.19e-01  
 34  +4.8451e-01  +4.9525e-01  1.07e-02  4.61e-07  2.31e-04  1.22e-07  1.68e-06  6.96e-01  
 35  +4.8406e-01  +4.9327e-01  9.21e-03  3.87e-07  1.94e-04  1.01e-07  1.42e-06  5.26e-01  
 36  +4.8239e-01  +4.8654e-01  4.15e-03  1.69e-07  8.51e-05  4.49e-08  6.39e-07  5.76e-01  
 37  +4.8166e-01  +4.8364e-01  1.99e-03  7.90e-08  3.97e-05  2.09e-08  3.04e-07  9.80e-01  
 38  +4.8123e-01  +4.8201e-01  7.77e-04  3.07e-08  1.54e-05  8.18e-09  1.20e-07  9.90e-01  
 39  +4.8096e-01  +4.8101e-01  5.38e-05  2.11e-09  1.06e-06  5.61e-10  8.33e-09  9.42e-01  
 40  +4.8094e-01  +4.8094e-01  6.12e-07  2.40e-11  1.21e-08  6.38e-12  9.49e-11  9.89e-01  
 41  +4.8094e-01  +4.8094e-01  6.12e-09  2.40e-13  1.21e-10  6.38e-14  9.49e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4285314s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:03 PM: Optimal value: 4.809e-01
(CVXPY) Sep 20 07:44:03 PM: Compilation took 2.225e-01 seconds
(CVXPY) Sep 20 07:44:03 PM: Solver (including time spent in interface) took 1.480e+00 seconds
Iteration: 14, Objective: 0.4809
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:03 PM: Your problem has 25118 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:03 PM: Finished problem compilation (took 2.422e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25118
  constraints   = 50118
  nnz(P)        = 0
  nnz(A)        = 395576
  cones (total) = 1
    : Nonnegative = 1,  numel = 50118

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.50e+02  1.00e+00  1.00e+00   ------   
  1  +5.8811e-01  +5.2556e+03  5.25e+03  4.09e-01  1.57e+02  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3818e-01  +6.5272e+02  6.52e+02  1.63e-01  7.94e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1020e-01  +1.6849e+02  1.68e+02  1.44e-01  7.03e+01  3.49e-05  2.47e-01  1.54e-01  
  4  +5.0105e-01  +1.3688e+01  1.32e+01  3.75e-02  1.81e+01  4.20e-06  1.95e-01  4.47e-01  
  5  +5.0001e-01  +1.1696e+00  6.70e-01  2.01e-03  1.00e+00  2.48e-05  1.88e-01  2.69e-01  
  6  +5.0001e-01  +8.0094e-01  3.01e-01  9.00e-04  4.50e-01  8.31e-06  8.83e-02  7.76e-01  
  7  +5.0001e-01  +7.2963e-01  2.30e-01  6.86e-04  3.44e-01  6.33e-06  6.69e-02  2.92e-01  
  8  +5.0001e-01  +7.0154e-01  2.02e-01  6.02e-04  3.02e-01  5.02e-06  5.34e-02  3.78e-01  
  9  +5.0001e-01  +6.8399e-01  1.84e-01  5.50e-04  2.75e-01  3.46e-06  3.99e-02  5.83e-01  
 10  +5.0001e-01  +6.4499e-01  1.45e-01  4.33e-04  2.17e-01  1.41e-06  2.06e-02  9.44e-01  
 11  +5.0000e-01  +6.1230e-01  1.12e-01  3.31e-04  1.66e-01  2.21e-06  6.87e-03  7.18e-01  
 12  +4.9999e-01  +5.8309e-01  8.31e-02  1.53e-04  7.66e-02  1.14e-05  7.17e-04  9.90e-01  
 13  +4.9953e-01  +5.8058e-01  8.10e-02  9.49e-06  4.77e-03  2.48e-04  3.16e-05  9.56e-01  
 14  +4.9932e-01  +5.7654e-01  7.72e-02  8.39e-06  4.22e-03  2.28e-04  2.79e-05  2.06e-01  
 15  +4.9899e-01  +5.7154e-01  7.25e-02  7.05e-06  3.55e-03  2.03e-04  2.34e-05  2.84e-01  
 16  +4.9913e-01  +5.6987e-01  7.07e-02  6.63e-06  3.33e-03  1.50e-04  2.19e-05  3.00e-01  
 17  +4.9904e-01  +5.6855e-01  6.95e-02  6.51e-06  3.27e-03  1.35e-04  2.15e-05  9.61e-02  
 18  +4.9902e-01  +5.6688e-01  6.79e-02  6.38e-06  3.21e-03  1.02e-04  2.11e-05  2.12e-01  
 19  +4.9817e-01  +5.6147e-01  6.33e-02  4.45e-06  2.24e-03  1.12e-04  1.48e-05  3.87e-01  
 20  +4.9816e-01  +5.6135e-01  6.32e-02  4.45e-06  2.24e-03  1.11e-04  1.48e-05  1.55e-03  
 21  +4.9802e-01  +5.6032e-01  6.23e-02  4.42e-06  2.22e-03  1.02e-04  1.47e-05  5.54e-02  
 22  +4.9743e-01  +5.5659e-01  5.92e-02  3.98e-06  2.00e-03  8.16e-05  1.33e-05  2.48e-01  
 23  +4.9711e-01  +5.5461e-01  5.75e-02  3.86e-06  1.94e-03  6.92e-05  1.29e-05  1.24e-01  
 24  +4.9680e-01  +5.5222e-01  5.54e-02  3.78e-06  1.90e-03  4.64e-05  1.26e-05  2.52e-01  
 25  +4.9539e-01  +5.4527e-01  4.99e-02  3.09e-06  1.55e-03  4.16e-05  1.04e-05  2.15e-01  
 26  +4.9469e-01  +5.4141e-01  4.67e-02  2.85e-06  1.43e-03  2.80e-05  9.65e-06  2.78e-01  
 27  +4.9310e-01  +5.3331e-01  4.02e-02  2.32e-06  1.17e-03  1.31e-05  7.92e-06  4.82e-01  
 28  +4.9163e-01  +5.2638e-01  3.48e-02  1.88e-06  9.47e-04  7.85e-06  6.49e-06  3.96e-01  
 29  +4.9059e-01  +5.2177e-01  3.12e-02  1.62e-06  8.16e-04  6.54e-06  5.63e-06  1.88e-01  
 30  +4.9049e-01  +5.2115e-01  3.07e-02  1.58e-06  7.92e-04  4.74e-06  5.47e-06  2.56e-01  
 31  +4.8834e-01  +5.1167e-01  2.33e-02  1.11e-06  5.60e-04  2.73e-06  3.93e-06  4.41e-01  
 32  +4.8827e-01  +5.1142e-01  2.32e-02  1.11e-06  5.58e-04  2.62e-06  3.92e-06  2.58e-02  
 33  +4.8759e-01  +5.0834e-01  2.08e-02  9.65e-07  4.85e-04  1.70e-06  3.42e-06  3.69e-01  
 34  +4.8669e-01  +5.0445e-01  1.78e-02  7.87e-07  3.95e-04  5.11e-07  2.81e-06  7.38e-01  
 35  +4.8388e-01  +4.9263e-01  8.75e-03  3.71e-07  1.86e-04  1.90e-07  1.36e-06  6.66e-01  
 36  +4.8204e-01  +4.8518e-01  3.14e-03  1.28e-07  6.41e-05  6.46e-08  4.84e-07  6.74e-01  
 37  +4.8161e-01  +4.8348e-01  1.86e-03  7.43e-08  3.73e-05  2.43e-08  2.86e-07  8.50e-01  
 38  +4.8147e-01  +4.8291e-01  1.44e-03  5.72e-08  2.87e-05  1.74e-08  2.21e-07  5.27e-01  
 39  +4.8106e-01  +4.8138e-01  3.18e-04  1.25e-08  6.28e-06  3.36e-09  4.92e-08  9.85e-01  
 40  +4.8095e-01  +4.8098e-01  2.88e-05  1.13e-09  5.67e-07  2.99e-10  4.46e-09  9.90e-01  
 41  +4.8094e-01  +4.8094e-01  2.90e-07  1.14e-11  5.72e-09  3.02e-12  4.50e-11  9.90e-01  
 42  +4.8094e-01  +4.8094e-01  2.90e-09  1.14e-13  5.72e-11  3.02e-14  4.50e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5785676s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:05 PM: Optimal value: 4.809e-01
(CVXPY) Sep 20 07:44:05 PM: Compilation took 2.422e-01 seconds
(CVXPY) Sep 20 07:44:05 PM: Solver (including time spent in interface) took 1.635e+00 seconds
FULL MODEL:
  Accruacy: 0.5115
  Our objective: 0.022999999999999993

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.00144)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.00128)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.00072)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.00132)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.00084)
 OR (x3 = 0 AND x4 = 0 AND x6 = 0)                                             <-- (term's our objective: 0.0126)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 37.34153699874878
Best over terms:
  Our final objective: 0.012600000000000028
    Its accruacy: 0.5063
    Its hamming distance: 4
  Shortest hamming distance: 4
    Its our objective: 0.012600000000000028
  Highest accruacy: 0.5063
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

