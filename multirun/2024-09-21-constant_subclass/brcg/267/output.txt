Command:
python test_script.py -s constant_subclass -d 7 -n 5000 --seed 73 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.011999999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 7.

Computed total variation: 0.1348
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:11 PM: Your problem has 2515 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:11 PM: Finished problem compilation (took 1.703e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2515
  constraints   = 5015
  nnz(P)        = 0
  nnz(A)        = 25015
  cones (total) = 1
    : Nonnegative = 1,  numel = 5015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5008e+03  2.50e+03  9.79e-01  7.39e+01  1.00e+00  1.00e+00   ------   
  1  +5.8812e-01  +5.2570e+02  5.25e+02  4.01e-01  4.61e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3802e-01  +6.5558e+01  6.50e+01  1.52e-01  2.23e+01  1.31e-02  2.54e-01  8.66e-01  
  3  +5.0954e-01  +1.6655e+01  1.61e+01  1.05e-01  1.50e+01  3.38e-05  2.45e-01  1.74e-01  
  4  +5.0036e-01  +1.0462e+00  5.46e-01  5.27e-03  7.78e-01  6.37e-06  1.12e-01  9.90e-01  
  5  +5.0002e-01  +5.6828e-01  6.83e-02  6.45e-04  9.60e-02  2.36e-06  2.32e-02  8.69e-01  
  6  +5.0000e-01  +5.6578e-01  6.58e-02  6.14e-04  9.14e-02  3.74e-06  9.59e-03  7.18e-01  
  7  +4.9998e-01  +5.7098e-01  7.10e-02  6.14e-04  9.14e-02  5.71e-06  4.77e-03  7.05e-01  
  8  +4.9811e-01  +5.5214e-01  5.40e-02  4.02e-05  6.03e-03  1.40e-04  1.28e-04  9.75e-01  
  9  +4.9382e-01  +5.2762e-01  3.38e-02  1.75e-05  2.62e-03  1.02e-04  5.77e-05  6.35e-01  
 10  +4.8932e-01  +5.0645e-01  1.71e-02  8.12e-06  1.22e-03  1.07e-05  2.97e-05  7.62e-01  
 11  +4.8750e-01  +4.9866e-01  1.12e-02  4.82e-06  7.22e-04  5.97e-07  1.83e-05  9.90e-01  
 12  +4.8440e-01  +4.8642e-01  2.02e-03  8.15e-07  1.22e-04  1.06e-07  3.29e-06  8.32e-01  
 13  +4.8386e-01  +4.8430e-01  4.40e-04  1.76e-07  2.63e-05  4.26e-08  7.15e-07  9.90e-01  
 14  +4.8370e-01  +4.8371e-01  4.81e-06  1.92e-09  2.87e-07  4.63e-10  7.84e-09  9.89e-01  
 15  +4.8370e-01  +4.8370e-01  4.81e-08  1.92e-11  2.87e-09  4.63e-12  7.84e-11  9.90e-01  
 16  +4.8370e-01  +4.8370e-01  4.81e-10  1.92e-13  2.87e-11  4.69e-14  7.93e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 42.8761ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:12 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:12 PM: Optimal value: 4.837e-01
(CVXPY) Sep 20 07:40:12 PM: Compilation took 1.703e-02 seconds
(CVXPY) Sep 20 07:40:12 PM: Solver (including time spent in interface) took 4.709e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4837
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:12 PM: Your problem has 2525 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:12 PM: Finished problem compilation (took 1.352e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2525
  constraints   = 5025
  nnz(P)        = 0
  nnz(A)        = 28780
  cones (total) = 1
    : Nonnegative = 1,  numel = 5025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5008e+03  2.50e+03  9.79e-01  7.60e+01  1.00e+00  1.00e+00   ------   
  1  +5.8797e-01  +5.2592e+02  5.25e+02  4.01e-01  4.73e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3781e-01  +6.5348e+01  6.48e+01  1.52e-01  2.28e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0947e-01  +1.6584e+01  1.61e+01  1.05e-01  1.53e+01  3.39e-05  2.45e-01  1.78e-01  
  4  +5.0039e-01  +1.0970e+00  5.97e-01  5.77e-03  8.75e-01  6.54e-06  1.16e-01  9.53e-01  
  5  +5.0012e-01  +7.1627e-01  2.16e-01  2.06e-03  3.14e-01  3.72e-06  5.71e-02  5.53e-01  
  6  +5.0009e-01  +6.7887e-01  1.79e-01  1.70e-03  2.59e-01  3.39e-06  3.48e-02  5.66e-01  
  7  +5.0002e-01  +6.3200e-01  1.32e-01  1.17e-03  1.78e-01  5.82e-06  9.64e-03  7.98e-01  
  8  +4.9846e-01  +6.3045e-01  1.32e-01  1.34e-04  2.06e-02  1.07e-04  4.57e-04  9.63e-01  
  9  +4.9639e-01  +6.0602e-01  1.10e-01  8.72e-05  1.34e-02  1.01e-04  3.00e-04  3.97e-01  
 10  +4.9350e-01  +5.6863e-01  7.51e-02  5.35e-05  8.24e-03  3.40e-05  1.85e-04  6.61e-01  
 11  +4.9197e-01  +5.5693e-01  6.50e-02  4.20e-05  6.46e-03  2.78e-05  1.42e-04  3.17e-01  
 12  +4.9239e-01  +5.5134e-01  5.90e-02  3.49e-05  5.37e-03  1.33e-06  1.11e-04  9.90e-01  
 13  +4.8882e-01  +5.3096e-01  4.21e-02  1.88e-05  2.90e-03  1.33e-06  5.89e-05  4.96e-01  
 14  +4.8770e-01  +5.2708e-01  3.94e-02  1.86e-05  2.86e-03  1.21e-06  5.89e-05  1.88e-02  
 15  +4.8709e-01  +5.2528e-01  3.82e-02  1.68e-05  2.59e-03  1.57e-06  5.32e-05  2.12e-01  
 16  +4.8271e-01  +5.0945e-01  2.67e-02  1.00e-05  1.54e-03  2.89e-06  3.19e-05  9.90e-01  
 17  +4.7569e-01  +4.8187e-01  6.18e-03  2.11e-06  3.25e-04  6.04e-07  6.90e-06  8.80e-01  
 18  +4.7372e-01  +4.7400e-01  2.83e-04  9.51e-08  1.46e-05  3.64e-08  3.13e-07  9.90e-01  
 19  +4.7360e-01  +4.7360e-01  2.83e-06  9.51e-10  1.46e-07  3.64e-10  3.13e-09  9.90e-01  
 20  +4.7360e-01  +4.7360e-01  2.83e-08  9.51e-12  1.46e-09  3.65e-12  3.14e-11  9.90e-01  
 21  +4.7360e-01  +4.7360e-01  2.83e-10  9.51e-14  1.46e-11  3.66e-14  3.15e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 57.8267ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:12 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:12 PM: Optimal value: 4.736e-01
(CVXPY) Sep 20 07:40:12 PM: Compilation took 1.352e-02 seconds
(CVXPY) Sep 20 07:40:12 PM: Solver (including time spent in interface) took 6.219e-02 seconds
Iteration: 2, Objective: 0.4736
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:12 PM: Your problem has 2535 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:12 PM: Finished problem compilation (took 1.553e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2535
  constraints   = 5035
  nnz(P)        = 0
  nnz(A)        = 30531
  cones (total) = 1
    : Nonnegative = 1,  numel = 5035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5008e+03  2.50e+03  9.79e-01  7.64e+01  1.00e+00  1.00e+00   ------   
  1  +5.8784e-01  +5.2611e+02  5.26e+02  4.02e-01  4.75e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3768e-01  +6.5216e+01  6.47e+01  1.52e-01  2.28e+01  1.32e-02  2.54e-01  8.70e-01  
  3  +5.0944e-01  +1.6554e+01  1.60e+01  1.05e-01  1.54e+01  3.41e-05  2.44e-01  1.80e-01  
  4  +5.0054e-01  +1.3516e+00  8.51e-01  8.24e-03  1.25e+00  7.02e-06  1.38e-01  7.89e-01  
  5  +5.0012e-01  +7.6132e-01  2.61e-01  2.49e-03  3.81e-01  3.94e-06  6.75e-02  5.82e-01  
  6  +5.0007e-01  +6.7712e-01  1.77e-01  1.68e-03  2.58e-01  3.31e-06  3.56e-02  5.61e-01  
  7  +4.9999e-01  +6.4843e-01  1.48e-01  1.32e-03  2.03e-01  5.81e-06  1.10e-02  7.90e-01  
  8  +4.9776e-01  +6.1596e-01  1.18e-01  1.27e-04  1.97e-02  1.02e-04  4.15e-04  9.84e-01  
  9  +4.9607e-01  +6.0029e-01  1.04e-01  8.96e-05  1.39e-02  1.02e-04  2.89e-04  3.52e-01  
 10  +4.9583e-01  +5.9960e-01  1.04e-01  7.16e-05  1.11e-02  1.04e-04  2.25e-04  3.59e-01  
 11  +4.9579e-01  +5.9764e-01  1.02e-01  7.08e-05  1.10e-02  9.38e-05  2.22e-04  8.14e-02  
 12  +4.9383e-01  +5.8254e-01  8.87e-02  5.05e-05  7.83e-03  7.29e-05  1.57e-04  4.83e-01  
 13  +4.9171e-01  +5.7042e-01  7.87e-02  3.94e-05  6.10e-03  2.73e-05  1.23e-04  6.86e-01  
 14  +4.8559e-01  +5.4154e-01  5.59e-02  2.53e-05  3.91e-03  1.53e-05  8.08e-05  4.84e-01  
 15  +4.8443e-01  +5.3592e-01  5.15e-02  2.22e-05  3.43e-03  1.17e-05  7.11e-05  3.30e-01  
 16  +4.8292e-01  +5.2834e-01  4.54e-02  1.91e-05  2.96e-03  7.05e-06  6.17e-05  5.23e-01  
 17  +4.7826e-01  +5.0950e-01  3.12e-02  1.23e-05  1.91e-03  3.51e-06  4.05e-05  7.58e-01  
 18  +4.7099e-01  +4.8211e-01  1.11e-02  4.09e-06  6.33e-04  1.15e-06  1.39e-05  6.89e-01  
 19  +4.6708e-01  +4.6754e-01  4.58e-04  1.63e-07  2.52e-05  3.99e-08  5.66e-07  9.63e-01  
 20  +4.6690e-01  +4.6691e-01  4.62e-06  1.64e-09  2.54e-07  4.00e-10  5.71e-09  9.90e-01  
 21  +4.6690e-01  +4.6690e-01  4.62e-08  1.64e-11  2.54e-09  4.00e-12  5.71e-11  9.90e-01  
 22  +4.6690e-01  +4.6690e-01  4.62e-10  1.64e-13  2.54e-11  4.03e-14  5.75e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 62.7053ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:12 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:12 PM: Optimal value: 4.669e-01
(CVXPY) Sep 20 07:40:12 PM: Compilation took 1.553e-02 seconds
(CVXPY) Sep 20 07:40:12 PM: Solver (including time spent in interface) took 6.761e-02 seconds
Iteration: 3, Objective: 0.4669
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:12 PM: Your problem has 2545 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:12 PM: Finished problem compilation (took 1.603e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2545
  constraints   = 5045
  nnz(P)        = 0
  nnz(A)        = 32007
  cones (total) = 1
    : Nonnegative = 1,  numel = 5045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5010e+03  2.50e+03  9.79e-01  7.67e+01  1.00e+00  1.00e+00   ------   
  1  +5.8772e-01  +5.2620e+02  5.26e+02  4.02e-01  4.77e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3756e-01  +6.5112e+01  6.46e+01  1.52e-01  2.28e+01  1.32e-02  2.54e-01  8.71e-01  
  3  +5.0940e-01  +1.6510e+01  1.60e+01  1.04e-01  1.54e+01  3.41e-05  2.44e-01  1.82e-01  
  4  +5.0059e-01  +1.4415e+00  9.41e-01  9.12e-03  1.39e+00  7.25e-06  1.42e-01  7.47e-01  
  5  +5.0010e-01  +7.4626e-01  2.46e-01  2.34e-03  3.61e-01  4.02e-06  6.19e-02  6.48e-01  
  6  +5.0004e-01  +7.1704e-01  2.17e-01  2.03e-03  3.12e-01  5.51e-06  2.47e-02  7.93e-01  
  7  +4.9903e-01  +6.5848e-01  1.59e-01  4.77e-04  7.40e-02  4.49e-05  1.66e-03  9.56e-01  
  8  +4.9464e-01  +6.2794e-01  1.33e-01  1.04e-04  1.63e-02  1.66e-04  3.35e-04  8.15e-01  
  9  +4.9422e-01  +6.2570e-01  1.31e-01  9.60e-05  1.49e-02  1.47e-04  3.08e-04  2.14e-01  
 10  +4.9284e-01  +6.1163e-01  1.19e-01  8.16e-05  1.27e-02  6.85e-05  2.64e-04  5.26e-01  
 11  +4.9098e-01  +6.0090e-01  1.10e-01  7.17e-05  1.12e-02  4.36e-05  2.33e-04  3.87e-01  
 12  +4.8220e-01  +5.5744e-01  7.52e-02  3.86e-05  6.00e-03  2.81e-05  1.30e-04  5.47e-01  
 13  +4.7005e-01  +5.0106e-01  3.10e-02  1.36e-05  2.10e-03  1.34e-06  4.74e-05  9.64e-01  
 14  +4.6959e-01  +4.9914e-01  2.96e-02  1.30e-05  2.02e-03  1.34e-06  4.66e-05  8.47e-02  
 15  +4.6907e-01  +4.9912e-01  3.01e-02  1.25e-05  1.94e-03  1.85e-06  4.40e-05  3.01e-01  
 16  +4.6511e-01  +4.8396e-01  1.89e-02  7.31e-06  1.13e-03  1.45e-06  2.61e-05  5.85e-01  
 17  +4.6481e-01  +4.8276e-01  1.80e-02  6.95e-06  1.08e-03  1.45e-06  2.48e-05  1.52e-01  
 18  +4.6067e-01  +4.6709e-01  6.42e-03  2.42e-06  3.75e-04  5.82e-07  8.88e-06  7.72e-01  
 19  +4.5843e-01  +4.5876e-01  3.31e-04  1.23e-07  1.90e-05  2.83e-08  4.64e-07  9.57e-01  
 20  +4.5830e-01  +4.5830e-01  3.34e-06  1.24e-09  1.92e-07  2.85e-10  4.70e-09  9.90e-01  
 21  +4.5830e-01  +4.5830e-01  3.34e-08  1.24e-11  1.92e-09  2.85e-12  4.70e-11  9.90e-01  
 22  +4.5830e-01  +4.5830e-01  3.34e-10  1.24e-13  1.92e-11  2.89e-14  4.76e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 64.2975ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:12 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:12 PM: Optimal value: 4.583e-01
(CVXPY) Sep 20 07:40:12 PM: Compilation took 1.603e-02 seconds
(CVXPY) Sep 20 07:40:12 PM: Solver (including time spent in interface) took 6.809e-02 seconds
Iteration: 4, Objective: 0.4583
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:12 PM: Your problem has 2555 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:12 PM: Finished problem compilation (took 1.602e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2555
  constraints   = 5055
  nnz(P)        = 0
  nnz(A)        = 32928
  cones (total) = 1
    : Nonnegative = 1,  numel = 5055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.79e-01  7.68e+01  1.00e+00  1.00e+00   ------   
  1  +5.8763e-01  +5.2620e+02  5.26e+02  4.02e-01  4.77e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3749e-01  +6.5031e+01  6.45e+01  1.52e-01  2.27e+01  1.32e-02  2.53e-01  8.72e-01  
  3  +5.0938e-01  +1.6484e+01  1.60e+01  1.04e-01  1.53e+01  3.41e-05  2.43e-01  1.83e-01  
  4  +5.0063e-01  +1.5245e+00  1.02e+00  9.93e-03  1.51e+00  7.44e-06  1.47e-01  7.10e-01  
  5  +5.0012e-01  +7.8040e-01  2.80e-01  2.67e-03  4.11e-01  4.22e-06  6.77e-02  6.23e-01  
  6  +5.0003e-01  +7.1026e-01  2.10e-01  1.97e-03  3.04e-01  5.51e-06  2.52e-02  7.39e-01  
  7  +4.9882e-01  +6.9676e-01  1.98e-01  5.85e-04  9.10e-02  5.00e-05  2.03e-03  9.48e-01  
  8  +4.9656e-01  +6.7288e-01  1.76e-01  2.42e-04  3.76e-02  1.02e-04  7.87e-04  6.28e-01  
  9  +4.9477e-01  +6.5826e-01  1.63e-01  1.62e-04  2.52e-02  1.18e-04  5.19e-04  4.13e-01  
 10  +4.9463e-01  +6.5146e-01  1.57e-01  1.56e-04  2.44e-02  9.46e-05  5.15e-04  1.22e-01  
 11  +4.9385e-01  +6.4349e-01  1.50e-01  1.32e-04  2.05e-02  8.64e-05  4.28e-04  2.93e-01  
 12  +4.9367e-01  +6.2056e-01  1.27e-01  1.00e-04  1.56e-02  5.57e-06  3.19e-04  9.50e-01  
 13  +4.8899e-01  +6.0057e-01  1.12e-01  6.43e-05  1.00e-02  7.24e-06  2.06e-04  7.60e-01  
 14  +4.8210e-01  +5.6991e-01  8.78e-02  4.38e-05  6.82e-03  6.11e-06  1.44e-04  4.49e-01  
 15  +4.7890e-01  +5.5625e-01  7.74e-02  3.71e-05  5.76e-03  5.58e-06  1.24e-04  3.52e-01  
 16  +4.7419e-01  +5.3588e-01  6.17e-02  2.81e-05  4.36e-03  5.19e-06  9.59e-05  9.90e-01  
 17  +4.6971e-01  +5.1815e-01  4.84e-02  2.10e-05  3.26e-03  4.06e-06  7.31e-05  3.03e-01  
 18  +4.6640e-01  +5.0524e-01  3.88e-02  1.61e-05  2.50e-03  3.30e-06  5.69e-05  2.76e-01  
 19  +4.6415e-01  +4.9550e-01  3.14e-02  1.24e-05  1.93e-03  3.31e-06  4.40e-05  9.90e-01  
 20  +4.5835e-01  +4.7371e-01  1.54e-02  5.87e-06  9.12e-04  1.63e-06  2.15e-05  5.78e-01  
 21  +4.5309e-01  +4.5408e-01  9.87e-04  3.71e-07  5.76e-05  9.98e-08  1.41e-06  9.90e-01  
 22  +4.5271e-01  +4.5272e-01  1.39e-05  5.24e-09  8.13e-07  1.36e-09  2.00e-08  9.87e-01  
 23  +4.5270e-01  +4.5270e-01  1.40e-07  5.25e-11  8.14e-09  1.37e-11  2.01e-10  9.90e-01  
 24  +4.5270e-01  +4.5270e-01  1.40e-09  5.25e-13  8.14e-11  1.37e-13  2.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 69.1826ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:12 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:12 PM: Optimal value: 4.527e-01
(CVXPY) Sep 20 07:40:12 PM: Compilation took 1.602e-02 seconds
(CVXPY) Sep 20 07:40:12 PM: Solver (including time spent in interface) took 7.416e-02 seconds
Iteration: 5, Objective: 0.4527
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:13 PM: Your problem has 2558 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:13 PM: Finished problem compilation (took 1.640e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2558
  constraints   = 5058
  nnz(P)        = 0
  nnz(A)        = 33242
  cones (total) = 1
    : Nonnegative = 1,  numel = 5058

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.79e-01  7.68e+01  1.00e+00  1.00e+00   ------   
  1  +5.8753e-01  +5.2622e+02  5.26e+02  4.03e-01  4.77e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3742e-01  +6.4957e+01  6.44e+01  1.52e-01  2.27e+01  1.32e-02  2.53e-01  8.73e-01  
  3  +5.0936e-01  +1.6466e+01  1.60e+01  1.04e-01  1.53e+01  3.42e-05  2.43e-01  1.84e-01  
  4  +5.0062e-01  +1.4957e+00  9.95e-01  9.65e-03  1.47e+00  7.42e-06  1.44e-01  7.25e-01  
  5  +5.0015e-01  +8.2524e-01  3.25e-01  3.11e-03  4.78e-01  4.53e-06  7.28e-02  5.66e-01  
  6  +5.0004e-01  +7.5031e-01  2.50e-01  2.33e-03  3.59e-01  6.30e-06  2.63e-02  7.76e-01  
  7  +4.9832e-01  +7.4558e-01  2.47e-01  5.24e-04  8.16e-02  7.20e-05  1.77e-03  9.63e-01  
  8  +4.9675e-01  +7.1109e-01  2.14e-01  2.92e-04  4.55e-02  8.74e-05  9.64e-04  5.58e-01  
  9  +4.9479e-01  +6.8847e-01  1.94e-01  2.03e-04  3.16e-02  9.40e-05  6.65e-04  3.64e-01  
 10  +4.9315e-01  +6.5743e-01  1.64e-01  1.38e-04  2.15e-02  5.76e-05  4.50e-04  6.21e-01  
 11  +4.9257e-01  +6.4696e-01  1.54e-01  1.32e-04  2.05e-02  4.09e-05  4.29e-04  2.45e-01  
 12  +4.8908e-01  +6.2056e-01  1.31e-01  9.30e-05  1.45e-02  3.27e-05  3.01e-04  4.46e-01  
 13  +4.8714e-01  +6.1156e-01  1.24e-01  7.69e-05  1.20e-02  3.22e-05  2.49e-04  2.26e-01  
 14  +4.8701e-01  +6.1072e-01  1.24e-01  7.67e-05  1.19e-02  3.14e-05  2.49e-04  1.68e-02  
 15  +4.8238e-01  +5.8662e-01  1.04e-01  5.90e-05  9.17e-03  1.72e-05  1.96e-04  5.22e-01  
 16  +4.7987e-01  +5.7611e-01  9.62e-02  4.90e-05  7.62e-03  1.42e-05  1.62e-04  3.80e-01  
 17  +4.7675e-01  +5.5855e-01  8.18e-02  3.86e-05  6.00e-03  5.45e-06  1.31e-04  9.90e-01  
 18  +4.6539e-01  +5.0849e-01  4.31e-02  1.84e-05  2.86e-03  3.14e-06  6.48e-05  7.29e-01  
 19  +4.6158e-01  +4.9340e-01  3.18e-02  1.31e-05  2.03e-03  2.38e-06  4.69e-05  3.67e-01  
 20  +4.5445e-01  +4.6495e-01  1.05e-02  4.01e-06  6.23e-04  1.09e-06  1.48e-05  9.90e-01  
 21  +4.5268e-01  +4.5832e-01  5.64e-03  2.09e-06  3.24e-04  6.19e-07  7.74e-06  5.34e-01  
 22  +4.5225e-01  +4.5648e-01  4.23e-03  1.61e-06  2.49e-04  4.67e-07  6.09e-06  9.89e-01  
 23  +4.5141e-01  +4.5363e-01  2.22e-03  8.16e-07  1.27e-04  2.64e-07  3.05e-06  6.68e-01  
 24  +4.5053e-01  +4.5061e-01  7.58e-05  2.78e-08  4.32e-06  8.83e-09  1.05e-07  9.90e-01  
 25  +4.5050e-01  +4.5050e-01  7.59e-07  2.79e-10  4.33e-08  8.84e-11  1.05e-09  9.90e-01  
 26  +4.5050e-01  +4.5050e-01  7.59e-09  2.79e-12  4.33e-10  8.87e-13  1.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 72.9732ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:13 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:13 PM: Optimal value: 4.505e-01
(CVXPY) Sep 20 07:40:13 PM: Compilation took 1.640e-02 seconds
(CVXPY) Sep 20 07:40:13 PM: Solver (including time spent in interface) took 7.771e-02 seconds
Iteration: 6, Objective: 0.4505
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:13 PM: Your problem has 2568 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:13 PM: Finished problem compilation (took 1.602e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2568
  constraints   = 5068
  nnz(P)        = 0
  nnz(A)        = 34080
  cones (total) = 1
    : Nonnegative = 1,  numel = 5068

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5012e+03  2.50e+03  9.79e-01  7.69e+01  1.00e+00  1.00e+00   ------   
  1  +5.8753e-01  +5.2614e+02  5.26e+02  4.03e-01  4.77e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3741e-01  +6.4940e+01  6.44e+01  1.52e-01  2.26e+01  1.32e-02  2.53e-01  8.73e-01  
  3  +5.0936e-01  +1.6456e+01  1.59e+01  1.04e-01  1.53e+01  3.41e-05  2.43e-01  1.85e-01  
  4  +5.0056e-01  +1.4079e+00  9.07e-01  8.81e-03  1.34e+00  7.26e-06  1.38e-01  7.68e-01  
  5  +5.0014e-01  +8.0895e-01  3.09e-01  2.95e-03  4.55e-01  4.52e-06  6.85e-02  5.67e-01  
  6  +5.0004e-01  +7.6601e-01  2.66e-01  2.45e-03  3.78e-01  7.33e-06  2.39e-02  8.07e-01  
  7  +4.9844e-01  +7.3595e-01  2.38e-01  5.06e-04  7.88e-02  7.24e-05  1.71e-03  9.45e-01  
  8  +4.9661e-01  +7.0160e-01  2.05e-01  2.62e-04  4.09e-02  9.52e-05  8.63e-04  5.94e-01  
  9  +4.9476e-01  +6.8191e-01  1.87e-01  1.89e-04  2.94e-02  1.00e-04  6.18e-04  3.38e-01  
 10  +4.9292e-01  +6.5555e-01  1.63e-01  1.33e-04  2.07e-02  6.98e-05  4.31e-04  5.55e-01  
 11  +4.9257e-01  +6.4472e-01  1.52e-01  1.28e-04  1.99e-02  4.34e-05  4.14e-04  3.05e-01  
 12  +4.8799e-01  +6.1391e-01  1.26e-01  8.16e-05  1.27e-02  3.74e-05  2.63e-04  4.83e-01  
 13  +4.8702e-01  +6.1038e-01  1.23e-01  7.33e-05  1.14e-02  3.56e-05  2.36e-04  1.89e-01  
 14  +4.8679e-01  +6.0868e-01  1.22e-01  7.27e-05  1.13e-02  3.30e-05  2.34e-04  6.62e-02  
 15  +4.7926e-01  +5.7106e-01  9.18e-02  4.72e-05  7.35e-03  1.41e-05  1.57e-04  6.67e-01  
 16  +4.7833e-01  +5.6861e-01  9.03e-02  4.38e-05  6.82e-03  1.18e-05  1.46e-04  3.65e-01  
 17  +4.6790e-01  +5.2136e-01  5.35e-02  2.22e-05  3.44e-03  4.91e-06  7.65e-05  9.07e-01  
 18  +4.6209e-01  +4.9686e-01  3.48e-02  1.40e-05  2.17e-03  3.15e-06  4.97e-05  4.49e-01  
 19  +4.5462e-01  +4.6544e-01  1.08e-02  4.14e-06  6.43e-04  1.16e-06  1.53e-05  9.88e-01  
 20  +4.5241e-01  +4.5725e-01  4.84e-03  1.79e-06  2.78e-04  5.50e-07  6.65e-06  6.27e-01  
 21  +4.5202e-01  +4.5564e-01  3.61e-03  1.37e-06  2.14e-04  3.97e-07  5.22e-06  9.80e-01  
 22  +4.5156e-01  +4.5420e-01  2.64e-03  9.73e-07  1.51e-04  3.07e-07  3.63e-06  4.60e-01  
 23  +4.5052e-01  +4.5057e-01  5.19e-05  1.91e-08  2.97e-06  5.95e-09  7.19e-08  9.87e-01  
 24  +4.5050e-01  +4.5050e-01  5.19e-07  1.91e-10  2.97e-08  5.95e-11  7.19e-10  9.90e-01  
 25  +4.5050e-01  +4.5050e-01  5.20e-09  1.91e-12  2.97e-10  5.96e-13  7.20e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 74.2294ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:13 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:13 PM: Optimal value: 4.505e-01
(CVXPY) Sep 20 07:40:13 PM: Compilation took 1.602e-02 seconds
(CVXPY) Sep 20 07:40:13 PM: Solver (including time spent in interface) took 7.821e-02 seconds
Iteration: 7, Objective: 0.4505
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:13 PM: Your problem has 2578 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:13 PM: Finished problem compilation (took 1.552e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2578
  constraints   = 5078
  nnz(P)        = 0
  nnz(A)        = 34897
  cones (total) = 1
    : Nonnegative = 1,  numel = 5078

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5010e+03  2.50e+03  9.79e-01  7.69e+01  1.00e+00  1.00e+00   ------   
  1  +5.8740e-01  +5.2630e+02  5.26e+02  4.03e-01  4.76e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3729e-01  +6.4825e+01  6.43e+01  1.52e-01  2.26e+01  1.33e-02  2.53e-01  8.74e-01  
  3  +5.0933e-01  +1.6431e+01  1.59e+01  1.04e-01  1.53e+01  3.43e-05  2.43e-01  1.87e-01  
  4  +5.0044e-01  +1.1909e+00  6.90e-01  6.72e-03  1.03e+00  6.89e-06  1.20e-01  8.98e-01  
  5  +5.0017e-01  +8.1766e-01  3.17e-01  3.05e-03  4.69e-01  5.11e-06  6.37e-02  5.33e-01  
  6  +5.0008e-01  +8.0936e-01  3.09e-01  2.73e-03  4.21e-01  9.95e-06  1.95e-02  9.14e-01  
  7  +4.9830e-01  +7.4255e-01  2.44e-01  3.64e-04  5.69e-02  1.04e-04  1.18e-03  9.49e-01  
  8  +4.9697e-01  +7.0304e-01  2.06e-01  2.32e-04  3.63e-02  8.75e-05  7.45e-04  5.67e-01  
  9  +4.9485e-01  +6.7302e-01  1.78e-01  1.49e-04  2.33e-02  7.55e-05  4.74e-04  5.68e-01  
 10  +4.9450e-01  +6.6105e-01  1.67e-01  1.39e-04  2.17e-02  4.29e-05  4.40e-04  4.11e-01  
 11  +4.8900e-01  +6.2167e-01  1.33e-01  8.13e-05  1.27e-02  3.64e-05  2.57e-04  5.62e-01  
 12  +4.8713e-01  +6.1362e-01  1.26e-01  7.12e-05  1.11e-02  3.09e-05  2.25e-04  2.80e-01  
 13  +4.8296e-01  +5.8871e-01  1.06e-01  5.78e-05  9.00e-03  1.34e-05  1.86e-04  5.91e-01  
 14  +4.7889e-01  +5.7023e-01  9.13e-02  4.60e-05  7.17e-03  1.14e-05  1.50e-04  2.40e-01  
 15  +4.7328e-01  +5.4264e-01  6.94e-02  3.22e-05  5.00e-03  4.96e-06  1.07e-04  9.90e-01  
 16  +4.6692e-01  +5.1648e-01  4.96e-02  2.12e-05  3.30e-03  3.67e-06  7.25e-05  4.17e-01  
 17  +4.6531e-01  +5.0818e-01  4.29e-02  1.79e-05  2.78e-03  4.17e-06  6.13e-05  8.28e-01  
 18  +4.6273e-01  +4.9784e-01  3.51e-02  1.44e-05  2.23e-03  3.48e-06  4.99e-05  3.33e-01  
 19  +4.6237e-01  +4.9643e-01  3.41e-02  1.34e-05  2.09e-03  3.66e-06  4.62e-05  4.79e-01  
 20  +4.5398e-01  +4.6376e-01  9.77e-03  3.71e-06  5.77e-04  1.02e-06  1.33e-05  7.54e-01  
 21  +4.5293e-01  +4.5996e-01  7.03e-03  2.56e-06  3.98e-04  7.65e-07  9.14e-06  3.56e-01  
 22  +4.5271e-01  +4.5892e-01  6.21e-03  2.33e-06  3.61e-04  6.66e-07  8.58e-06  4.73e-01  
 23  +4.5260e-01  +4.5850e-01  5.91e-03  2.21e-06  3.43e-04  6.37e-07  8.14e-06  1.01e-01  
 24  +4.5173e-01  +4.5532e-01  3.59e-03  1.33e-06  2.07e-04  4.01e-07  4.88e-06  5.55e-01  
 25  +4.5158e-01  +4.5501e-01  3.43e-03  1.23e-06  1.91e-04  4.01e-07  4.43e-06  2.12e-01  
 26  +4.5027e-01  +4.5045e-01  1.79e-04  6.39e-08  9.92e-06  2.10e-08  2.32e-07  9.69e-01  
 27  +4.5020e-01  +4.5020e-01  1.81e-06  6.46e-10  1.00e-07  2.12e-10  2.35e-09  9.90e-01  
 28  +4.5020e-01  +4.5020e-01  1.81e-08  6.46e-12  1.00e-09  2.12e-12  2.35e-11  9.90e-01  
 29  +4.5020e-01  +4.5020e-01  1.81e-10  6.45e-14  1.00e-11  2.13e-14  2.36e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 87.5171ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:13 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:13 PM: Optimal value: 4.502e-01
(CVXPY) Sep 20 07:40:13 PM: Compilation took 1.552e-02 seconds
(CVXPY) Sep 20 07:40:13 PM: Solver (including time spent in interface) took 9.265e-02 seconds
Iteration: 8, Objective: 0.4502
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:13 PM: Your problem has 2588 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:13 PM: Finished problem compilation (took 1.705e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2588
  constraints   = 5088
  nnz(P)        = 0
  nnz(A)        = 35804
  cones (total) = 1
    : Nonnegative = 1,  numel = 5088

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.79e-01  7.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.8716e-01  +5.2641e+02  5.26e+02  4.04e-01  4.76e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3718e-01  +6.4722e+01  6.42e+01  1.51e-01  2.25e+01  1.33e-02  2.52e-01  8.76e-01  
  3  +5.0931e-01  +1.6416e+01  1.59e+01  1.04e-01  1.52e+01  3.44e-05  2.42e-01  1.88e-01  
  4  +5.0050e-01  +1.2988e+00  7.98e-01  7.77e-03  1.19e+00  7.12e-06  1.28e-01  8.33e-01  
  5  +5.0018e-01  +8.5954e-01  3.59e-01  3.45e-03  5.31e-01  5.28e-06  7.04e-02  5.34e-01  
  6  +5.0013e-01  +8.8489e-01  3.85e-01  3.48e-03  5.36e-01  8.97e-06  2.77e-02  8.88e-01  
  7  +4.9896e-01  +7.5114e-01  2.52e-01  5.91e-04  9.23e-02  5.98e-05  1.99e-03  9.43e-01  
  8  +4.9601e-01  +7.1063e-01  2.15e-01  2.17e-04  3.39e-02  1.24e-04  7.00e-04  6.73e-01  
  9  +4.9457e-01  +6.6757e-01  1.73e-01  1.58e-04  2.46e-02  2.60e-05  4.98e-04  8.10e-01  
 10  +4.9412e-01  +6.6520e-01  1.71e-01  1.36e-04  2.12e-02  2.39e-05  4.23e-04  3.67e-01  
 11  +4.9308e-01  +6.5529e-01  1.62e-01  1.23e-04  1.92e-02  1.82e-05  3.84e-04  3.77e-01  
 12  +4.8830e-01  +6.2849e-01  1.40e-01  8.50e-05  1.33e-02  1.71e-05  2.69e-04  4.09e-01  
 13  +4.8419e-01  +6.0419e-01  1.20e-01  6.89e-05  1.07e-02  1.02e-05  2.21e-04  6.16e-01  
 14  +4.7685e-01  +5.6861e-01  9.18e-02  4.62e-05  7.20e-03  7.47e-06  1.52e-04  5.54e-01  
 15  +4.7367e-01  +5.5400e-01  8.03e-02  3.84e-05  5.98e-03  6.58e-06  1.27e-04  3.87e-01  
 16  +4.6217e-01  +5.0400e-01  4.18e-02  1.74e-05  2.71e-03  3.45e-06  6.06e-05  7.06e-01  
 17  +4.6086e-01  +4.9857e-01  3.77e-02  1.57e-05  2.44e-03  3.22e-06  5.55e-05  3.31e-01  
 18  +4.5376e-01  +4.6965e-01  1.59e-02  6.20e-06  9.64e-04  1.50e-06  2.26e-05  7.59e-01  
 19  +4.5050e-01  +4.5730e-01  6.80e-03  2.54e-06  3.95e-04  7.52e-07  9.31e-06  9.29e-01  
 20  +4.5043e-01  +4.5710e-01  6.67e-03  2.46e-06  3.82e-04  7.47e-07  8.99e-06  8.45e-02  
 21  +4.4971e-01  +4.5435e-01  4.64e-03  1.71e-06  2.66e-04  5.51e-07  6.30e-06  9.90e-01  
 22  +4.4801e-01  +4.4857e-01  5.56e-04  2.03e-07  3.15e-05  5.98e-08  7.55e-07  9.75e-01  
 23  +4.4780e-01  +4.4781e-01  7.00e-06  2.55e-09  3.97e-07  7.61e-10  9.51e-09  9.88e-01  
 24  +4.4780e-01  +4.4780e-01  7.00e-08  2.55e-11  3.97e-09  7.61e-12  9.51e-11  9.90e-01  
 25  +4.4780e-01  +4.4780e-01  7.00e-10  2.55e-13  3.97e-11  7.68e-14  9.59e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 82.3811ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:13 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:13 PM: Optimal value: 4.478e-01
(CVXPY) Sep 20 07:40:13 PM: Compilation took 1.705e-02 seconds
(CVXPY) Sep 20 07:40:13 PM: Solver (including time spent in interface) took 8.817e-02 seconds
Iteration: 9, Objective: 0.4478
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:13 PM: Your problem has 2598 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:13 PM: Finished problem compilation (took 1.864e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2598
  constraints   = 5098
  nnz(P)        = 0
  nnz(A)        = 37003
  cones (total) = 1
    : Nonnegative = 1,  numel = 5098

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.79e-01  7.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.8709e-01  +5.2633e+02  5.26e+02  4.04e-01  4.77e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3708e-01  +6.4591e+01  6.41e+01  1.51e-01  2.24e+01  1.33e-02  2.52e-01  8.76e-01  
  3  +5.0928e-01  +1.6371e+01  1.59e+01  1.04e-01  1.52e+01  3.43e-05  2.41e-01  1.90e-01  
  4  +5.0056e-01  +1.3958e+00  8.95e-01  8.72e-03  1.33e+00  7.32e-06  1.35e-01  7.82e-01  
  5  +5.0019e-01  +8.8871e-01  3.89e-01  3.73e-03  5.75e-01  5.53e-06  7.39e-02  5.54e-01  
  6  +5.0010e-01  +8.4675e-01  3.47e-01  3.25e-03  5.01e-01  7.80e-06  3.40e-02  6.58e-01  
  7  +4.9912e-01  +8.1175e-01  3.13e-01  9.64e-04  1.51e-01  4.86e-05  3.34e-03  9.90e-01  
  8  +4.9523e-01  +7.5004e-01  2.55e-01  2.49e-04  3.90e-02  1.44e-04  8.04e-04  7.66e-01  
  9  +4.9396e-01  +7.3306e-01  2.39e-01  2.07e-04  3.25e-02  1.34e-04  6.61e-04  2.60e-01  
 10  +4.9250e-01  +7.0942e-01  2.17e-01  1.66e-04  2.60e-02  1.06e-04  5.23e-04  3.70e-01  
 11  +4.9198e-01  +6.9154e-01  2.00e-01  1.37e-04  2.14e-02  6.79e-05  4.25e-04  4.83e-01  
 12  +4.9128e-01  +6.7814e-01  1.87e-01  1.31e-04  2.05e-02  4.50e-05  4.10e-04  2.83e-01  
 13  +4.8775e-01  +6.5297e-01  1.65e-01  1.01e-04  1.59e-02  3.37e-05  3.19e-04  4.21e-01  
 14  +4.8179e-01  +6.1206e-01  1.30e-01  7.21e-05  1.13e-02  1.15e-05  2.33e-04  7.73e-01  
 15  +4.6872e-01  +5.4788e-01  7.92e-02  3.66e-05  5.70e-03  6.94e-06  1.24e-04  5.49e-01  
 16  +4.6671e-01  +5.3936e-01  7.26e-02  3.25e-05  5.06e-03  6.44e-06  1.10e-04  1.57e-01  
 17  +4.6483e-01  +5.2985e-01  6.50e-02  2.84e-05  4.43e-03  5.93e-06  9.75e-05  4.15e-01  
 18  +4.5868e-01  +5.0279e-01  4.41e-02  1.80e-05  2.81e-03  4.31e-06  6.37e-05  9.85e-01  
 19  +4.5372e-01  +4.8241e-01  2.87e-02  1.14e-05  1.78e-03  2.86e-06  4.15e-05  5.32e-01  
 20  +4.4617e-01  +4.5214e-01  5.97e-03  2.30e-06  3.58e-04  6.18e-07  8.70e-06  9.10e-01  
 21  +4.4614e-01  +4.5213e-01  5.98e-03  2.25e-06  3.49e-04  6.39e-07  8.42e-06  6.32e-02  
 22  +4.4599e-01  +4.5136e-01  5.36e-03  2.08e-06  3.24e-04  5.43e-07  8.08e-06  3.45e-01  
 23  +4.4597e-01  +4.5126e-01  5.29e-03  2.05e-06  3.19e-04  5.39e-07  7.95e-06  6.00e-02  
 24  +4.4551e-01  +4.4951e-01  4.01e-03  1.55e-06  2.41e-04  4.21e-07  5.92e-06  3.87e-01  
 25  +4.4522e-01  +4.4866e-01  3.44e-03  1.28e-06  2.00e-04  3.77e-07  4.85e-06  3.04e-01  
 26  +4.4397e-01  +4.4413e-01  1.67e-04  6.23e-08  9.69e-06  1.87e-08  2.37e-07  9.82e-01  
 27  +4.4390e-01  +4.4390e-01  1.68e-06  6.26e-10  9.75e-08  1.88e-10  2.39e-09  9.90e-01  
 28  +4.4390e-01  +4.4390e-01  1.68e-08  6.26e-12  9.75e-10  1.88e-12  2.40e-11  9.90e-01  
 29  +4.4390e-01  +4.4390e-01  1.68e-10  6.27e-14  9.75e-12  1.89e-14  2.40e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 95.2502ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:14 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:14 PM: Optimal value: 4.439e-01
(CVXPY) Sep 20 07:40:14 PM: Compilation took 1.864e-02 seconds
(CVXPY) Sep 20 07:40:14 PM: Solver (including time spent in interface) took 1.014e-01 seconds
Iteration: 10, Objective: 0.4439
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:14 PM: Your problem has 2608 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:14 PM: Finished problem compilation (took 2.054e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2608
  constraints   = 5108
  nnz(P)        = 0
  nnz(A)        = 37693
  cones (total) = 1
    : Nonnegative = 1,  numel = 5108

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  7.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.8690e-01  +5.2656e+02  5.26e+02  4.04e-01  4.76e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3694e-01  +6.4471e+01  6.39e+01  1.51e-01  2.24e+01  1.33e-02  2.52e-01  8.78e-01  
  3  +5.0925e-01  +1.6349e+01  1.58e+01  1.04e-01  1.51e+01  3.45e-05  2.41e-01  1.92e-01  
  4  +5.0056e-01  +1.4038e+00  9.03e-01  8.81e-03  1.34e+00  7.35e-06  1.34e-01  7.80e-01  
  5  +5.0017e-01  +8.6877e-01  3.69e-01  3.54e-03  5.46e-01  5.59e-06  6.92e-02  5.99e-01  
  6  +5.0006e-01  +8.4249e-01  3.42e-01  3.13e-03  4.84e-01  9.57e-06  2.66e-02  7.37e-01  
  7  +4.9779e-01  +7.8479e-01  2.87e-01  4.83e-04  7.55e-02  1.04e-04  1.56e-03  9.80e-01  
  8  +4.9330e-01  +7.3041e-01  2.37e-01  1.98e-04  3.10e-02  1.72e-04  6.26e-04  6.43e-01  
  9  +4.9230e-01  +7.1350e-01  2.21e-01  1.67e-04  2.61e-02  1.33e-04  5.20e-04  3.63e-01  
 10  +4.9140e-01  +6.8602e-01  1.95e-01  1.44e-04  2.25e-02  4.85e-05  4.50e-04  5.89e-01  
 11  +4.8282e-01  +6.2808e-01  1.45e-01  8.32e-05  1.30e-02  2.22e-05  2.68e-04  7.72e-01  
 12  +4.7527e-01  +5.9068e-01  1.15e-01  6.00e-05  9.36e-03  1.41e-05  1.99e-04  4.84e-01  
 13  +4.6743e-01  +5.5363e-01  8.62e-02  4.10e-05  6.39e-03  8.93e-06  1.40e-04  5.29e-01  
 14  +4.6417e-01  +5.3958e-01  7.54e-02  3.43e-05  5.35e-03  7.59e-06  1.19e-04  3.09e-01  
 15  +4.5371e-01  +4.9369e-01  4.00e-02  1.67e-05  2.61e-03  3.74e-06  6.10e-05  6.73e-01  
 16  +4.5130e-01  +4.8271e-01  3.14e-02  1.27e-05  1.98e-03  3.12e-06  4.68e-05  5.58e-01  
 17  +4.4877e-01  +4.7146e-01  2.27e-02  9.05e-06  1.41e-03  2.46e-06  3.37e-05  9.90e-01  
 18  +4.4331e-01  +4.5054e-01  7.23e-03  2.83e-06  4.40e-04  7.85e-07  1.09e-05  7.06e-01  
 19  +4.4103e-01  +4.4194e-01  9.13e-04  3.55e-07  5.53e-05  9.81e-08  1.40e-06  8.84e-01  
 20  +4.4070e-01  +4.4071e-01  1.08e-05  4.21e-09  6.55e-07  1.16e-09  1.66e-08  9.90e-01  
 21  +4.4070e-01  +4.4070e-01  1.08e-07  4.21e-11  6.55e-09  1.16e-11  1.66e-10  9.90e-01  
 22  +4.4070e-01  +4.4070e-01  1.08e-09  4.21e-13  6.55e-11  1.16e-13  1.67e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 82.5681ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:14 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:14 PM: Optimal value: 4.407e-01
(CVXPY) Sep 20 07:40:14 PM: Compilation took 2.054e-02 seconds
(CVXPY) Sep 20 07:40:14 PM: Solver (including time spent in interface) took 8.778e-02 seconds
Iteration: 11, Objective: 0.4407
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:14 PM: Your problem has 2618 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:14 PM: Finished problem compilation (took 2.304e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2618
  constraints   = 5118
  nnz(P)        = 0
  nnz(A)        = 38162
  cones (total) = 1
    : Nonnegative = 1,  numel = 5118

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  7.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.8697e-01  +5.2634e+02  5.26e+02  4.04e-01  4.75e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3689e-01  +6.4383e+01  6.38e+01  1.51e-01  2.23e+01  1.33e-02  2.51e-01  8.78e-01  
  3  +5.0923e-01  +1.6319e+01  1.58e+01  1.04e-01  1.51e+01  3.44e-05  2.41e-01  1.93e-01  
  4  +5.0057e-01  +1.4152e+00  9.15e-01  8.93e-03  1.36e+00  7.38e-06  1.35e-01  7.75e-01  
  5  +5.0017e-01  +8.7719e-01  3.77e-01  3.63e-03  5.58e-01  5.63e-06  6.97e-02  5.92e-01  
  6  +5.0005e-01  +8.5211e-01  3.52e-01  3.18e-03  4.90e-01  1.04e-05  2.46e-02  7.74e-01  
  7  +4.9626e-01  +7.6558e-01  2.69e-01  2.95e-04  4.62e-02  1.64e-04  9.28e-04  9.90e-01  
  8  +4.9222e-01  +7.2922e-01  2.37e-01  1.77e-04  2.77e-02  1.91e-04  5.54e-04  4.68e-01  
  9  +4.8890e-01  +6.9774e-01  2.09e-01  1.37e-04  2.14e-02  1.45e-04  4.32e-04  3.80e-01  
 10  +4.8735e-01  +6.7692e-01  1.90e-01  1.26e-04  1.97e-02  8.20e-05  4.03e-04  3.39e-01  
 11  +4.8228e-01  +6.4648e-01  1.64e-01  9.78e-05  1.53e-02  6.61e-05  3.18e-04  2.98e-01  
 12  +4.8138e-01  +6.3814e-01  1.57e-01  9.28e-05  1.45e-02  4.65e-05  3.03e-04  2.80e-01  
 13  +4.7079e-01  +5.8263e-01  1.12e-01  5.73e-05  8.93e-03  3.20e-05  1.95e-04  3.90e-01  
 14  +4.6079e-01  +5.3269e-01  7.19e-02  3.34e-05  5.20e-03  1.50e-05  1.19e-04  5.69e-01  
 15  +4.6008e-01  +5.2944e-01  6.94e-02  3.23e-05  5.02e-03  1.35e-05  1.15e-04  1.16e-01  
 16  +4.5743e-01  +5.1765e-01  6.02e-02  2.69e-05  4.18e-03  1.06e-05  9.67e-05  3.17e-01  
 17  +4.4770e-01  +4.7452e-01  2.68e-02  1.12e-05  1.74e-03  3.52e-06  4.22e-05  7.63e-01  
 18  +4.4685e-01  +4.7099e-01  2.41e-02  9.91e-06  1.54e-03  3.17e-06  3.76e-05  1.51e-01  
 19  +4.4613e-01  +4.6753e-01  2.14e-02  8.69e-06  1.35e-03  2.67e-06  3.30e-05  3.72e-01  
 20  +4.4225e-01  +4.5144e-01  9.20e-03  3.68e-06  5.73e-04  9.58e-07  1.44e-05  9.90e-01  
 21  +4.3953e-01  +4.4101e-01  1.48e-03  5.88e-07  9.14e-05  1.54e-07  2.35e-06  8.92e-01  
 22  +4.3901e-01  +4.3903e-01  2.20e-05  8.71e-09  1.35e-06  2.24e-09  3.51e-08  9.89e-01  
 23  +4.3900e-01  +4.3900e-01  2.20e-07  8.71e-11  1.35e-08  2.24e-11  3.51e-10  9.90e-01  
 24  +4.3900e-01  +4.3900e-01  2.20e-09  8.71e-13  1.35e-10  2.25e-13  3.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 91.9309ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:14 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:14 PM: Optimal value: 4.390e-01
(CVXPY) Sep 20 07:40:14 PM: Compilation took 2.304e-02 seconds
(CVXPY) Sep 20 07:40:14 PM: Solver (including time spent in interface) took 9.872e-02 seconds
Iteration: 12, Objective: 0.4390
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:14 PM: Your problem has 2623 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:14 PM: Finished problem compilation (took 2.304e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2623
  constraints   = 5123
  nnz(P)        = 0
  nnz(A)        = 38344
  cones (total) = 1
    : Nonnegative = 1,  numel = 5123

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  7.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.8692e-01  +5.2633e+02  5.26e+02  4.04e-01  4.75e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3688e-01  +6.4368e+01  6.38e+01  1.51e-01  2.22e+01  1.33e-02  2.51e-01  8.78e-01  
  3  +5.0923e-01  +1.6317e+01  1.58e+01  1.04e-01  1.51e+01  3.44e-05  2.40e-01  1.93e-01  
  4  +5.0057e-01  +1.4120e+00  9.11e-01  8.90e-03  1.36e+00  7.39e-06  1.34e-01  7.77e-01  
  5  +5.0018e-01  +8.9217e-01  3.92e-01  3.77e-03  5.81e-01  5.73e-06  7.13e-02  5.76e-01  
  6  +5.0006e-01  +8.7959e-01  3.80e-01  3.40e-03  5.24e-01  1.07e-05  2.50e-02  8.14e-01  
  7  +4.9612e-01  +7.5132e-01  2.55e-01  2.61e-04  4.08e-02  1.71e-04  8.13e-04  9.89e-01  
  8  +4.9134e-01  +7.1564e-01  2.24e-01  1.51e-04  2.37e-02  2.04e-04  4.72e-04  4.84e-01  
  9  +4.8652e-01  +6.7955e-01  1.93e-01  1.16e-04  1.81e-02  1.46e-04  3.66e-04  3.83e-01  
 10  +4.7683e-01  +6.1351e-01  1.37e-01  7.65e-05  1.19e-02  3.82e-05  2.54e-04  6.42e-01  
 11  +4.6948e-01  +5.7623e-01  1.07e-01  5.53e-05  8.61e-03  2.44e-05  1.90e-04  3.89e-01  
 12  +4.6049e-01  +5.3232e-01  7.18e-02  3.37e-05  5.25e-03  1.23e-05  1.20e-04  5.66e-01  
 13  +4.5984e-01  +5.2900e-01  6.92e-02  3.21e-05  5.00e-03  1.05e-05  1.15e-04  2.58e-01  
 14  +4.5459e-01  +5.0622e-01  5.16e-02  2.28e-05  3.55e-03  7.09e-06  8.35e-05  4.29e-01  
 15  +4.4579e-01  +4.6759e-01  2.18e-02  9.08e-06  1.41e-03  2.68e-06  3.49e-05  6.89e-01  
 16  +4.4503e-01  +4.6445e-01  1.94e-02  8.00e-06  1.24e-03  2.29e-06  3.09e-05  3.03e-01  
 17  +4.4276e-01  +4.5437e-01  1.16e-02  4.68e-06  7.27e-04  1.23e-06  1.83e-05  9.52e-01  
 18  +4.3915e-01  +4.4041e-01  1.26e-03  5.05e-07  7.85e-05  1.28e-07  2.04e-06  9.50e-01  
 19  +4.3871e-01  +4.3873e-01  2.26e-05  9.06e-09  1.41e-06  2.26e-09  3.69e-08  9.88e-01  
 20  +4.3870e-01  +4.3870e-01  2.27e-07  9.07e-11  1.41e-08  2.26e-11  3.69e-10  9.90e-01  
 21  +4.3870e-01  +4.3870e-01  2.27e-09  9.07e-13  1.41e-10  2.27e-13  3.69e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 90.2591ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:14 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:14 PM: Optimal value: 4.387e-01
(CVXPY) Sep 20 07:40:14 PM: Compilation took 2.304e-02 seconds
(CVXPY) Sep 20 07:40:14 PM: Solver (including time spent in interface) took 9.731e-02 seconds
Iteration: 13, Objective: 0.4387
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:14 PM: Your problem has 2631 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:15 PM: Finished problem compilation (took 2.407e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2631
  constraints   = 5131
  nnz(P)        = 0
  nnz(A)        = 38849
  cones (total) = 1
    : Nonnegative = 1,  numel = 5131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  7.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.8691e-01  +5.2634e+02  5.26e+02  4.04e-01  4.75e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3685e-01  +6.4341e+01  6.38e+01  1.51e-01  2.22e+01  1.33e-02  2.51e-01  8.79e-01  
  3  +5.0922e-01  +1.6307e+01  1.58e+01  1.04e-01  1.51e+01  3.44e-05  2.40e-01  1.93e-01  
  4  +5.0056e-01  +1.3961e+00  8.96e-01  8.76e-03  1.33e+00  7.36e-06  1.33e-01  7.85e-01  
  5  +5.0019e-01  +9.0194e-01  4.02e-01  3.87e-03  5.96e-01  5.87e-06  7.16e-02  5.70e-01  
  6  +5.0007e-01  +8.7574e-01  3.76e-01  3.41e-03  5.25e-01  1.04e-05  2.65e-02  7.63e-01  
  7  +4.9713e-01  +7.9820e-01  3.01e-01  4.02e-04  6.29e-02  1.32e-04  1.27e-03  9.90e-01  
  8  +4.9201e-01  +7.4577e-01  2.54e-01  1.86e-04  2.92e-02  1.97e-04  5.84e-04  5.78e-01  
  9  +4.8999e-01  +7.1670e-01  2.27e-01  1.57e-04  2.45e-02  1.30e-04  4.96e-04  3.70e-01  
 10  +4.7919e-01  +6.3430e-01  1.55e-01  8.58e-05  1.34e-02  5.12e-05  2.82e-04  7.11e-01  
 11  +4.7191e-01  +5.9560e-01  1.24e-01  6.42e-05  1.00e-02  3.73e-05  2.18e-04  2.79e-01  
 12  +4.6720e-01  +5.7146e-01  1.04e-01  5.17e-05  8.05e-03  2.62e-05  1.79e-04  3.26e-01  
 13  +4.6114e-01  +5.4214e-01  8.10e-02  3.83e-05  5.96e-03  1.55e-05  1.37e-04  4.54e-01  
 14  +4.5624e-01  +5.1920e-01  6.30e-02  2.86e-05  4.45e-03  1.09e-05  1.05e-04  3.41e-01  
 15  +4.4605e-01  +4.7127e-01  2.52e-02  1.07e-05  1.66e-03  2.24e-06  4.10e-05  9.90e-01  
 16  +4.4529e-01  +4.6818e-01  2.29e-02  9.54e-06  1.48e-03  2.07e-06  3.68e-05  1.41e-01  
 17  +4.4472e-01  +4.6567e-01  2.09e-02  8.68e-06  1.35e-03  1.95e-06  3.36e-05  2.96e-01  
 18  +4.4130e-01  +4.5158e-01  1.03e-02  4.24e-06  6.59e-04  1.02e-06  1.69e-05  9.90e-01  
 19  +4.3850e-01  +4.4053e-01  2.03e-03  8.27e-07  1.29e-04  2.03e-07  3.37e-06  8.72e-01  
 20  +4.3781e-01  +4.3785e-01  3.58e-05  1.46e-08  2.26e-06  3.50e-09  5.99e-08  9.83e-01  
 21  +4.3780e-01  +4.3780e-01  3.58e-07  1.46e-10  2.26e-08  3.50e-11  5.99e-10  9.90e-01  
 22  +4.3780e-01  +4.3780e-01  3.58e-09  1.46e-12  2.26e-10  3.50e-13  6.00e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 92.3591ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:15 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:15 PM: Optimal value: 4.378e-01
(CVXPY) Sep 20 07:40:15 PM: Compilation took 2.407e-02 seconds
(CVXPY) Sep 20 07:40:15 PM: Solver (including time spent in interface) took 9.872e-02 seconds
Iteration: 14, Objective: 0.4378
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:15 PM: Your problem has 2632 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:15 PM: Finished problem compilation (took 2.704e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2632
  constraints   = 5132
  nnz(P)        = 0
  nnz(A)        = 38930
  cones (total) = 1
    : Nonnegative = 1,  numel = 5132

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  7.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.8689e-01  +5.2634e+02  5.26e+02  4.05e-01  4.75e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3686e-01  +6.4345e+01  6.38e+01  1.51e-01  2.22e+01  1.33e-02  2.51e-01  8.79e-01  
  3  +5.0922e-01  +1.6307e+01  1.58e+01  1.04e-01  1.51e+01  3.44e-05  2.40e-01  1.93e-01  
  4  +5.0056e-01  +1.3998e+00  8.99e-01  8.79e-03  1.34e+00  7.37e-06  1.33e-01  7.83e-01  
  5  +5.0019e-01  +9.0262e-01  4.02e-01  3.88e-03  5.97e-01  5.88e-06  7.17e-02  5.70e-01  
  6  +5.0006e-01  +8.7539e-01  3.75e-01  3.39e-03  5.23e-01  1.06e-05  2.58e-02  7.76e-01  
  7  +4.9689e-01  +7.9531e-01  2.98e-01  3.73e-04  5.83e-02  1.42e-04  1.17e-03  9.90e-01  
  8  +4.9167e-01  +7.4383e-01  2.52e-01  1.80e-04  2.81e-02  2.00e-04  5.63e-04  5.64e-01  
  9  +4.9003e-01  +7.1705e-01  2.27e-01  1.61e-04  2.51e-02  1.32e-04  5.10e-04  2.89e-01  
 10  +4.7860e-01  +6.3633e-01  1.58e-01  8.52e-05  1.33e-02  7.71e-05  2.80e-04  6.25e-01  
 11  +4.7126e-01  +5.9605e-01  1.25e-01  6.39e-05  9.96e-03  5.49e-05  2.17e-04  2.74e-01  
 12  +4.6700e-01  +5.7345e-01  1.06e-01  5.23e-05  8.14e-03  3.82e-05  1.81e-04  3.25e-01  
 13  +4.6130e-01  +5.4542e-01  8.41e-02  3.94e-05  6.14e-03  2.22e-05  1.41e-04  4.38e-01  
 14  +4.5504e-01  +5.1544e-01  6.04e-02  2.71e-05  4.22e-03  1.28e-05  1.00e-04  4.67e-01  
 15  +4.4526e-01  +4.6995e-01  2.47e-02  1.05e-05  1.64e-03  3.08e-06  4.13e-05  8.50e-01  
 16  +4.4291e-01  +4.5976e-01  1.68e-02  7.08e-06  1.10e-03  2.05e-06  2.83e-05  4.23e-01  
 17  +4.4145e-01  +4.5271e-01  1.13e-02  4.70e-06  7.30e-04  1.14e-06  1.90e-05  9.90e-01  
 18  +4.3935e-01  +4.4450e-01  5.15e-03  2.14e-06  3.32e-04  5.16e-07  8.83e-06  6.05e-01  
 19  +4.3765e-01  +4.3779e-01  1.44e-04  5.97e-08  9.27e-06  1.34e-08  2.52e-07  9.74e-01  
 20  +4.3760e-01  +4.3760e-01  1.45e-06  6.01e-10  9.34e-08  1.35e-10  2.55e-09  9.90e-01  
 21  +4.3760e-01  +4.3760e-01  1.45e-08  6.02e-12  9.35e-10  1.35e-12  2.55e-11  9.90e-01  
 22  +4.3760e-01  +4.3760e-01  1.45e-10  6.01e-14  9.35e-12  1.35e-14  2.55e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 91.9637ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:15 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:15 PM: Optimal value: 4.376e-01
(CVXPY) Sep 20 07:40:15 PM: Compilation took 2.704e-02 seconds
(CVXPY) Sep 20 07:40:15 PM: Solver (including time spent in interface) took 9.872e-02 seconds
Iteration: 15, Objective: 0.4376
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:15 PM: Your problem has 2633 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:15 PM: Finished problem compilation (took 2.456e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2633
  constraints   = 5133
  nnz(P)        = 0
  nnz(A)        = 38954
  cones (total) = 1
    : Nonnegative = 1,  numel = 5133

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  7.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.8686e-01  +5.2634e+02  5.26e+02  4.05e-01  4.75e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3685e-01  +6.4337e+01  6.38e+01  1.51e-01  2.22e+01  1.33e-02  2.51e-01  8.79e-01  
  3  +5.0922e-01  +1.6303e+01  1.58e+01  1.04e-01  1.51e+01  3.44e-05  2.40e-01  1.94e-01  
  4  +5.0056e-01  +1.4005e+00  9.00e-01  8.80e-03  1.34e+00  7.38e-06  1.33e-01  7.83e-01  
  5  +5.0019e-01  +9.0264e-01  4.02e-01  3.88e-03  5.97e-01  5.90e-06  7.13e-02  5.73e-01  
  6  +5.0006e-01  +8.8329e-01  3.83e-01  3.44e-03  5.31e-01  1.10e-05  2.56e-02  7.79e-01  
  7  +4.9666e-01  +7.9786e-01  3.01e-01  3.56e-04  5.57e-02  1.51e-04  1.12e-03  9.90e-01  
  8  +4.9147e-01  +7.5208e-01  2.61e-01  1.83e-04  2.86e-02  2.13e-04  5.73e-04  5.13e-01  
  9  +4.8739e-01  +7.0586e-01  2.18e-01  1.41e-04  2.21e-02  1.28e-04  4.50e-04  4.22e-01  
 10  +4.7770e-01  +6.3968e-01  1.62e-01  9.06e-05  1.41e-02  8.27e-05  3.01e-04  4.25e-01  
 11  +4.6830e-01  +5.8535e-01  1.17e-01  6.03e-05  9.39e-03  5.17e-05  2.09e-04  3.70e-01  
 12  +4.6400e-01  +5.6237e-01  9.84e-02  4.79e-05  7.46e-03  3.63e-05  1.69e-04  3.38e-01  
 13  +4.5907e-01  +5.3584e-01  7.68e-02  3.59e-05  5.58e-03  1.75e-05  1.30e-04  5.60e-01  
 14  +4.5386e-01  +5.1129e-01  5.74e-02  2.59e-05  4.03e-03  1.14e-05  9.69e-05  3.81e-01  
 15  +4.4591e-01  +4.7407e-01  2.82e-02  1.22e-05  1.90e-03  4.23e-06  4.80e-05  6.98e-01  
 16  +4.4214e-01  +4.5722e-01  1.51e-02  6.40e-06  9.94e-04  2.10e-06  2.59e-05  5.77e-01  
 17  +4.4108e-01  +4.5165e-01  1.06e-02  4.45e-06  6.92e-04  1.05e-06  1.82e-05  9.90e-01  
 18  +4.3938e-01  +4.4497e-01  5.59e-03  2.34e-06  3.64e-04  5.52e-07  9.74e-06  5.57e-01  
 19  +4.3756e-01  +4.3772e-01  1.63e-04  6.84e-08  1.06e-05  1.49e-08  2.92e-07  9.74e-01  
 20  +4.3750e-01  +4.3750e-01  1.64e-06  6.89e-10  1.07e-07  1.49e-10  2.95e-09  9.90e-01  
 21  +4.3750e-01  +4.3750e-01  1.65e-08  6.90e-12  1.07e-09  1.50e-12  2.95e-11  9.90e-01  
 22  +4.3750e-01  +4.3750e-01  1.65e-10  6.89e-14  1.07e-11  1.50e-14  2.96e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 88.9842ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:15 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:15 PM: Optimal value: 4.375e-01
(CVXPY) Sep 20 07:40:15 PM: Compilation took 2.456e-02 seconds
(CVXPY) Sep 20 07:40:15 PM: Solver (including time spent in interface) took 9.518e-02 seconds
Iteration: 16, Objective: 0.4375
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:15 PM: Your problem has 2634 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:15 PM: Finished problem compilation (took 2.403e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2634
  constraints   = 5134
  nnz(P)        = 0
  nnz(A)        = 38981
  cones (total) = 1
    : Nonnegative = 1,  numel = 5134

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  7.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.8691e-01  +5.2626e+02  5.26e+02  4.04e-01  4.74e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3685e-01  +6.4333e+01  6.38e+01  1.51e-01  2.22e+01  1.33e-02  2.51e-01  8.78e-01  
  3  +5.0922e-01  +1.6297e+01  1.58e+01  1.04e-01  1.50e+01  3.44e-05  2.40e-01  1.93e-01  
  4  +5.0056e-01  +1.3974e+00  8.97e-01  8.77e-03  1.34e+00  7.37e-06  1.33e-01  7.85e-01  
  5  +5.0019e-01  +9.0222e-01  4.02e-01  3.88e-03  5.96e-01  5.90e-06  7.12e-02  5.73e-01  
  6  +5.0006e-01  +8.8340e-01  3.83e-01  3.43e-03  5.29e-01  1.11e-05  2.51e-02  7.86e-01  
  7  +4.9648e-01  +7.9520e-01  2.99e-01  3.37e-04  5.27e-02  1.59e-04  1.05e-03  9.90e-01  
  8  +4.9143e-01  +7.5108e-01  2.60e-01  1.82e-04  2.84e-02  2.13e-04  5.69e-04  4.90e-01  
  9  +4.8716e-01  +7.0469e-01  2.18e-01  1.40e-04  2.18e-02  1.31e-04  4.46e-04  4.12e-01  
 10  +4.7737e-01  +6.3815e-01  1.61e-01  8.96e-05  1.40e-02  8.49e-05  2.98e-04  4.19e-01  
 11  +4.6849e-01  +5.8685e-01  1.18e-01  6.11e-05  9.51e-03  5.43e-05  2.12e-04  3.55e-01  
 12  +4.6396e-01  +5.6240e-01  9.84e-02  4.79e-05  7.46e-03  3.73e-05  1.69e-04  3.52e-01  
 13  +4.5887e-01  +5.3490e-01  7.60e-02  3.55e-05  5.52e-03  1.73e-05  1.29e-04  5.77e-01  
 14  +4.5348e-01  +5.0955e-01  5.61e-02  2.53e-05  3.93e-03  1.12e-05  9.47e-05  3.81e-01  
 15  +4.4576e-01  +4.7365e-01  2.79e-02  1.21e-05  1.88e-03  4.52e-06  4.76e-05  6.41e-01  
 16  +4.4240e-01  +4.5857e-01  1.62e-02  6.87e-06  1.07e-03  2.44e-06  2.78e-05  5.17e-01  
 17  +4.4112e-01  +4.5186e-01  1.07e-02  4.52e-06  7.03e-04  1.08e-06  1.84e-05  9.90e-01  
 18  +4.3892e-01  +4.4315e-01  4.23e-03  1.77e-06  2.75e-04  4.18e-07  7.42e-06  6.84e-01  
 19  +4.3754e-01  +4.3764e-01  1.03e-04  4.32e-08  6.70e-06  9.48e-09  1.84e-07  9.77e-01  
 20  +4.3750e-01  +4.3750e-01  1.03e-06  4.33e-10  6.72e-08  9.49e-11  1.85e-09  9.90e-01  
 21  +4.3750e-01  +4.3750e-01  1.03e-08  4.33e-12  6.73e-10  9.50e-13  1.85e-11  9.90e-01  
 22  +4.3750e-01  +4.3750e-01  1.03e-10  4.34e-14  6.73e-12  9.51e-15  1.85e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 87.0527ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:15 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:15 PM: Optimal value: 4.375e-01
(CVXPY) Sep 20 07:40:15 PM: Compilation took 2.403e-02 seconds
(CVXPY) Sep 20 07:40:15 PM: Solver (including time spent in interface) took 9.372e-02 seconds
FULL MODEL:
  Accruacy: 0.5288
  Our objective: 0.057599999999999985

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0076)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0048)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0044)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1)                                  <-- (term's our objective: 0.0136)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.011710166931152
Best over terms:
  Our final objective: 0.013600000000000001
    Its accruacy: 0.5068
    Its hamming distance: 9
  Shortest hamming distance: 0
    Its our objective: 0.011999999999999945
  Highest accruacy: 0.5068
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

