Command:
python test_script.py -s constant_subclass -d 2 -n 1000 --seed 34 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.30000000000000004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 2.

Computed total variation: 0.30000000000000004
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:07 PM: Your problem has 505 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:07 PM: Finished problem compilation (took 4.517e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 505
  constraints   = 1005
  nnz(P)        = 0
  nnz(A)        = 2505
  cones (total) = 1
    : Nonnegative = 1,  numel = 1005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0082e+02  5.00e+02  9.47e-01  2.17e+01  1.00e+00  1.00e+00   ------   
  1  +6.3684e-01  +8.7827e+01  8.72e+01  2.58e-01  1.02e+01  4.49e-03  3.90e-01  7.25e-01  
  2  +5.5710e-01  +1.6335e+01  1.58e+01  1.17e-01  5.26e+00  5.40e-03  2.10e-01  6.07e-01  
  3  +5.0034e-01  +1.4303e+00  9.30e-01  1.95e-02  8.40e-01  1.68e-03  1.96e-01  3.31e-01  
  4  +4.9927e-01  +7.5104e-01  2.52e-01  5.14e-03  2.27e-01  8.56e-04  4.13e-02  8.30e-01  
  5  +4.6782e-01  +9.0417e-01  4.36e-01  1.13e-03  5.14e-02  1.60e-02  3.46e-03  9.70e-01  
  6  +4.4618e-01  +6.0845e-01  1.62e-01  4.11e-04  1.84e-02  1.51e-04  1.42e-03  7.47e-01  
  7  +4.1095e-01  +4.3420e-01  2.32e-02  5.02e-05  2.24e-03  1.43e-06  2.14e-04  8.87e-01  
  8  +4.0337e-01  +4.0420e-01  8.27e-04  1.76e-06  7.86e-05  2.03e-07  7.98e-06  9.82e-01  
  9  +4.0310e-01  +4.0311e-01  8.30e-06  1.77e-08  7.89e-07  2.05e-09  8.03e-08  9.90e-01  
 10  +4.0310e-01  +4.0310e-01  8.30e-08  1.77e-10  7.89e-09  2.05e-11  8.03e-10  9.90e-01  
 11  +4.0310e-01  +4.0310e-01  8.30e-10  1.77e-12  7.89e-11  2.05e-13  8.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9741ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:07 PM: Optimal value: 4.031e-01
(CVXPY) Sep 20 07:26:07 PM: Compilation took 4.517e-03 seconds
(CVXPY) Sep 20 07:26:07 PM: Solver (including time spent in interface) took 2.991e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4031
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:08 PM: Your problem has 506 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:08 PM: Finished problem compilation (took 2.520e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 506
  constraints   = 1006
  nnz(P)        = 0
  nnz(A)        = 2706
  cones (total) = 1
    : Nonnegative = 1,  numel = 1006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9894e-01  +5.0235e+02  5.02e+02  9.48e-01  2.26e+01  1.00e+00  1.01e+00   ------   
  1  +6.3465e-01  +8.8174e+01  8.75e+01  2.59e-01  1.06e+01  4.48e-03  3.93e-01  7.24e-01  
  2  +5.5616e-01  +1.6158e+01  1.56e+01  1.14e-01  5.36e+00  5.52e-03  2.06e-01  6.23e-01  
  3  +5.0483e-01  +2.8348e+00  2.33e+00  4.61e-02  2.04e+00  2.56e-03  1.98e-01  1.68e-01  
  4  +5.0014e-01  +9.3700e-01  4.37e-01  8.87e-03  4.07e-01  9.13e-04  5.21e-02  8.09e-01  
  5  +4.8283e-01  +1.1881e+00  7.05e-01  2.45e-03  1.17e-01  1.06e-02  6.68e-03  9.48e-01  
  6  +4.5765e-01  +7.7756e-01  3.20e-01  9.11e-04  4.31e-02  1.81e-03  2.66e-03  8.01e-01  
  7  +4.5758e-01  +8.3761e-01  3.80e-01  7.59e-04  3.61e-02  1.84e-03  2.05e-03  5.77e-01  
  8  +4.3566e-01  +7.1575e-01  2.80e-01  6.73e-04  3.17e-02  6.22e-04  1.99e-03  2.17e-01  
  9  +3.9410e-01  +5.2282e-01  1.29e-01  2.26e-04  1.06e-02  2.88e-04  7.05e-04  7.51e-01  
 10  +3.5527e-01  +3.6807e-01  1.28e-02  2.28e-05  1.06e-03  2.42e-06  8.36e-05  9.48e-01  
 11  +3.5016e-01  +3.5031e-01  1.46e-04  2.60e-07  1.21e-05  2.63e-08  9.83e-07  9.89e-01  
 12  +3.5010e-01  +3.5010e-01  1.46e-06  2.60e-09  1.21e-07  2.63e-10  9.83e-09  9.90e-01  
 13  +3.5010e-01  +3.5010e-01  1.46e-08  2.60e-11  1.21e-09  2.63e-12  9.83e-11  9.90e-01  
 14  +3.5010e-01  +3.5010e-01  1.46e-10  2.60e-13  1.21e-11  2.63e-14  9.83e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.2905ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:08 PM: Optimal value: 3.501e-01
(CVXPY) Sep 20 07:26:08 PM: Compilation took 2.520e-03 seconds
(CVXPY) Sep 20 07:26:08 PM: Solver (including time spent in interface) took 2.987e-03 seconds
FULL MODEL:
  Accruacy: 0.65
  Our objective: 0.30000000000000004

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.3)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8251805305480957
Best over terms:
  Our final objective: 0.30000000000000004
    Its accruacy: 0.65
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30000000000000004
  Highest accruacy: 0.65
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

