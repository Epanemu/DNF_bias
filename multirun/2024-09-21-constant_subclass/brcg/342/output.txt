Command:
python test_script.py -s constant_subclass -d 9 -n 1000 --seed 73 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 9.

Computed total variation: 0.486
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:27 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:27 PM: Finished problem compilation (took 9.515e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 6019
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9997e-01  +5.0082e+02  5.00e+02  9.56e-01  3.59e+01  1.00e+00  1.00e+00   ------   
  1  +5.8062e-01  +1.0888e+02  1.08e+02  4.15e-01  2.30e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3047e-01  +1.2476e+01  1.19e+01  1.44e-01  1.01e+01  1.65e-02  2.71e-01  9.48e-01  
  3  +5.0604e-01  +3.1210e+00  2.61e+00  5.47e-02  3.75e+00  4.17e-05  2.36e-01  4.62e-01  
  4  +5.0064e-01  +7.6740e-01  2.67e-01  5.96e-03  4.30e-01  1.05e-05  7.08e-02  8.32e-01  
  5  +5.0015e-01  +6.7049e-01  1.70e-01  3.61e-03  2.62e-01  1.31e-05  2.38e-02  7.31e-01  
  6  +4.9609e-01  +6.2708e-01  1.31e-01  6.20e-04  4.58e-02  9.55e-05  1.95e-03  9.29e-01  
  7  +4.8820e-01  +5.7189e-01  8.37e-02  2.73e-04  2.01e-02  7.70e-05  8.75e-04  6.22e-01  
  8  +4.8011e-01  +5.2894e-01  4.88e-02  1.34e-04  9.83e-03  3.47e-05  4.67e-04  6.12e-01  
  9  +4.7246e-01  +4.9407e-01  2.16e-02  4.90e-05  3.60e-03  1.32e-05  1.91e-04  6.98e-01  
 10  +4.6799e-01  +4.7383e-01  5.83e-03  1.24e-05  9.08e-04  2.50e-06  5.20e-05  9.90e-01  
 11  +4.6613e-01  +4.6624e-01  1.06e-04  2.16e-07  1.59e-05  4.07e-08  9.43e-07  9.84e-01  
 12  +4.6610e-01  +4.6610e-01  1.06e-06  2.16e-09  1.59e-07  4.07e-10  9.44e-09  9.90e-01  
 13  +4.6610e-01  +4.6610e-01  1.06e-08  2.16e-11  1.59e-09  4.08e-12  9.46e-11  9.90e-01  
 14  +4.6610e-01  +4.6610e-01  1.06e-10  2.16e-13  1.59e-11  4.10e-14  9.49e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.5373ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:27 PM: Optimal value: 4.661e-01
(CVXPY) Sep 20 07:57:27 PM: Compilation took 9.515e-03 seconds
(CVXPY) Sep 20 07:57:27 PM: Solver (including time spent in interface) took 9.515e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4661
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:27 PM: Your problem has 529 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:27 PM: Finished problem compilation (took 6.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 529
  constraints   = 1029
  nnz(P)        = 0
  nnz(A)        = 6837
  cones (total) = 1
    : Nonnegative = 1,  numel = 1029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9983e-01  +5.0121e+02  5.01e+02  9.56e-01  3.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.7959e-01  +1.0908e+02  1.08e+02  4.18e-01  2.35e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.2932e-01  +1.2254e+01  1.17e+01  1.42e-01  1.01e+01  1.68e-02  2.69e-01  9.62e-01  
  3  +5.0571e-01  +3.0472e+00  2.54e+00  5.35e-02  3.76e+00  4.30e-05  2.27e-01  5.13e-01  
  4  +5.0134e-01  +1.1083e+00  6.07e-01  1.36e-02  9.93e-01  1.58e-05  1.13e-01  5.80e-01  
  5  +5.0012e-01  +7.7299e-01  2.73e-01  5.82e-03  4.30e-01  1.51e-05  3.51e-02  7.82e-01  
  6  +4.9416e-01  +7.5619e-01  2.62e-01  1.40e-03  1.06e-01  9.23e-05  4.34e-03  9.16e-01  
  7  +4.8609e-01  +6.6607e-01  1.80e-01  7.02e-04  5.32e-02  7.76e-05  2.20e-03  5.46e-01  
  8  +4.8145e-01  +6.2711e-01  1.46e-01  5.05e-04  3.82e-02  6.19e-05  1.58e-03  3.94e-01  
  9  +4.7625e-01  +5.8395e-01  1.08e-01  3.36e-04  2.53e-02  4.45e-05  1.05e-03  4.82e-01  
 10  +4.7143e-01  +5.5319e-01  8.18e-02  2.14e-04  1.61e-02  3.79e-05  6.66e-04  4.28e-01  
 11  +4.6895e-01  +5.4174e-01  7.28e-02  1.55e-04  1.17e-02  3.79e-05  4.78e-04  5.19e-01  
 12  +4.6760e-01  +5.3225e-01  6.46e-02  1.37e-04  1.04e-02  3.32e-05  4.25e-04  4.22e-01  
 13  +4.6083e-01  +5.0327e-01  4.24e-02  7.97e-05  6.02e-03  2.26e-05  2.51e-04  4.76e-01  
 14  +4.5171e-01  +4.6610e-01  1.44e-02  2.40e-05  1.81e-03  8.25e-06  7.79e-05  8.23e-01  
 15  +4.4831e-01  +4.5272e-01  4.41e-03  7.16e-06  5.42e-04  3.18e-06  2.35e-05  9.90e-01  
 16  +4.4633e-01  +4.4641e-01  7.35e-05  1.18e-07  8.92e-06  4.92e-08  3.91e-07  9.86e-01  
 17  +4.4630e-01  +4.4630e-01  7.35e-07  1.18e-09  8.92e-08  4.92e-10  3.91e-09  9.90e-01  
 18  +4.4630e-01  +4.4630e-01  7.35e-09  1.18e-11  8.92e-10  4.92e-12  3.91e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.9583ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:27 PM: Optimal value: 4.463e-01
(CVXPY) Sep 20 07:57:27 PM: Compilation took 6.007e-03 seconds
(CVXPY) Sep 20 07:57:27 PM: Solver (including time spent in interface) took 1.204e-02 seconds
Iteration: 2, Objective: 0.4463
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:27 PM: Your problem has 539 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:27 PM: Finished problem compilation (took 6.104e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 539
  constraints   = 1039
  nnz(P)        = 0
  nnz(A)        = 7213
  cones (total) = 1
    : Nonnegative = 1,  numel = 1039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9982e-01  +5.0121e+02  5.01e+02  9.56e-01  3.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.7866e-01  +1.0907e+02  1.08e+02  4.19e-01  2.34e+01  3.78e-03  5.77e-01  5.86e-01  
  2  +5.2852e-01  +1.2089e+01  1.16e+01  1.40e-01  9.94e+00  1.69e-02  2.64e-01  9.72e-01  
  3  +5.0545e-01  +2.9871e+00  2.48e+00  5.24e-02  3.69e+00  4.40e-05  2.18e-01  5.56e-01  
  4  +5.0107e-01  +1.0351e+00  5.34e-01  1.20e-02  8.80e-01  1.55e-05  9.26e-02  6.46e-01  
  5  +4.9919e-01  +8.2033e-01  3.21e-01  5.21e-03  3.91e-01  3.08e-05  1.94e-02  8.66e-01  
  6  +4.8932e-01  +7.4502e-01  2.56e-01  1.04e-03  7.92e-02  1.32e-04  3.03e-03  8.48e-01  
  7  +4.8100e-01  +7.0253e-01  2.22e-01  6.70e-04  5.09e-02  1.34e-04  1.97e-03  4.46e-01  
  8  +4.6610e-01  +6.3258e-01  1.66e-01  3.80e-04  2.87e-02  9.92e-05  1.17e-03  6.48e-01  
  9  +4.4233e-01  +5.2526e-01  8.29e-02  1.65e-04  1.24e-02  3.75e-05  5.50e-04  7.88e-01  
 10  +4.2630e-01  +4.6209e-01  3.58e-02  6.66e-05  4.98e-03  1.56e-05  2.37e-04  6.23e-01  
 11  +4.1754e-01  +4.2757e-01  1.00e-02  1.81e-05  1.35e-03  6.04e-06  6.68e-05  9.90e-01  
 12  +4.1355e-01  +4.1369e-01  1.34e-04  2.39e-07  1.79e-05  7.36e-08  9.04e-07  9.89e-01  
 13  +4.1350e-01  +4.1350e-01  1.34e-06  2.39e-09  1.79e-07  7.36e-10  9.04e-09  9.90e-01  
 14  +4.1350e-01  +4.1350e-01  1.34e-08  2.39e-11  1.79e-09  7.36e-12  9.05e-11  9.90e-01  
 15  +4.1350e-01  +4.1350e-01  1.34e-10  2.39e-13  1.79e-11  7.37e-14  9.05e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.7027ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:27 PM: Optimal value: 4.135e-01
(CVXPY) Sep 20 07:57:27 PM: Compilation took 6.104e-03 seconds
(CVXPY) Sep 20 07:57:27 PM: Solver (including time spent in interface) took 1.101e-02 seconds
Iteration: 3, Objective: 0.4135
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:27 PM: Your problem has 549 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:27 PM: Finished problem compilation (took 6.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 549
  constraints   = 1049
  nnz(P)        = 0
  nnz(A)        = 7540
  cones (total) = 1
    : Nonnegative = 1,  numel = 1049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9978e-01  +5.0119e+02  5.01e+02  9.56e-01  3.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.7763e-01  +1.0908e+02  1.09e+02  4.20e-01  2.33e+01  3.79e-03  5.77e-01  5.86e-01  
  2  +5.2773e-01  +1.1932e+01  1.14e+01  1.38e-01  9.72e+00  1.71e-02  2.60e-01  9.83e-01  
  3  +5.0520e-01  +2.9274e+00  2.42e+00  5.13e-02  3.62e+00  4.52e-05  2.09e-01  6.01e-01  
  4  +5.0111e-01  +1.1165e+00  6.15e-01  1.38e-02  1.01e+00  1.80e-05  9.07e-02  6.19e-01  
  5  +4.9783e-01  +9.8332e-01  4.85e-01  5.59e-03  4.23e-01  5.52e-05  1.74e-02  8.93e-01  
  6  +4.8406e-01  +8.5684e-01  3.73e-01  1.30e-03  9.95e-02  1.62e-04  3.69e-03  7.92e-01  
  7  +4.7489e-01  +8.0096e-01  3.26e-01  9.28e-04  7.07e-02  1.56e-04  2.69e-03  3.60e-01  
  8  +4.5571e-01  +6.7454e-01  2.19e-01  5.32e-04  4.02e-02  9.73e-05  1.64e-03  5.77e-01  
  9  +4.3343e-01  +5.5266e-01  1.19e-01  2.66e-04  2.00e-02  4.81e-05  8.88e-04  6.95e-01  
 10  +4.1724e-01  +4.7985e-01  6.26e-02  1.30e-04  9.69e-03  2.45e-05  4.66e-04  5.15e-01  
 11  +4.0535e-01  +4.2707e-01  2.17e-02  4.28e-05  3.19e-03  1.16e-05  1.64e-04  9.90e-01  
 12  +3.9847e-01  +4.0061e-01  2.15e-03  4.15e-06  3.10e-04  1.10e-06  1.67e-05  9.08e-01  
 13  +3.9771e-01  +3.9773e-01  2.58e-05  4.97e-08  3.71e-06  1.31e-08  2.01e-07  9.88e-01  
 14  +3.9770e-01  +3.9770e-01  2.58e-07  4.97e-10  3.71e-08  1.31e-10  2.01e-09  9.90e-01  
 15  +3.9770e-01  +3.9770e-01  2.58e-09  4.97e-12  3.71e-10  1.31e-12  2.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.0236ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:27 PM: Optimal value: 3.977e-01
(CVXPY) Sep 20 07:57:27 PM: Compilation took 6.002e-03 seconds
(CVXPY) Sep 20 07:57:27 PM: Solver (including time spent in interface) took 1.151e-02 seconds
Iteration: 4, Objective: 0.3977
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:27 PM: Your problem has 559 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:27 PM: Finished problem compilation (took 5.514e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 559
  constraints   = 1059
  nnz(P)        = 0
  nnz(A)        = 7933
  cones (total) = 1
    : Nonnegative = 1,  numel = 1059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9970e-01  +5.0140e+02  5.01e+02  9.57e-01  3.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.7620e-01  +1.0922e+02  1.09e+02  4.22e-01  2.33e+01  3.78e-03  5.79e-01  5.85e-01  
  2  +5.2682e-01  +1.1902e+01  1.14e+01  1.37e-01  9.63e+00  1.73e-02  2.59e-01  9.90e-01  
  3  +5.0545e-01  +2.8938e+00  2.39e+00  5.17e-02  3.67e+00  4.95e-05  1.91e-01  6.68e-01  
  4  +5.0100e-01  +1.1382e+00  6.37e-01  1.45e-02  1.06e+00  2.29e-05  7.96e-02  6.33e-01  
  5  +4.9367e-01  +1.0179e+00  5.24e-01  3.44e-03  2.65e-01  1.15e-04  9.57e-03  9.46e-01  
  6  +4.7222e-01  +8.1709e-01  3.45e-01  9.74e-04  7.49e-02  1.92e-04  2.70e-03  7.42e-01  
  7  +4.5229e-01  +7.1221e-01  2.60e-01  5.97e-04  4.56e-02  1.51e-04  1.73e-03  4.54e-01  
  8  +4.2465e-01  +5.5554e-01  1.31e-01  2.97e-04  2.25e-02  5.88e-05  9.58e-04  5.90e-01  
  9  +4.0391e-01  +4.5188e-01  4.80e-02  1.05e-04  7.89e-03  1.96e-05  3.67e-04  6.66e-01  
 10  +3.9423e-01  +4.0735e-01  1.31e-02  2.75e-05  2.07e-03  7.03e-06  1.02e-04  9.90e-01  
 11  +3.9039e-01  +3.9176e-01  1.37e-03  2.84e-06  2.13e-04  7.19e-07  1.09e-05  8.96e-01  
 12  +3.8993e-01  +3.9001e-01  8.25e-05  1.66e-07  1.25e-05  4.06e-08  6.65e-07  9.73e-01  
 13  +3.8990e-01  +3.8990e-01  8.39e-07  1.68e-09  1.26e-07  4.12e-10  6.77e-09  9.90e-01  
 14  +3.8990e-01  +3.8990e-01  8.39e-09  1.68e-11  1.26e-09  4.12e-12  6.77e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.223ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:27 PM: Optimal value: 3.899e-01
(CVXPY) Sep 20 07:57:27 PM: Compilation took 5.514e-03 seconds
(CVXPY) Sep 20 07:57:27 PM: Solver (including time spent in interface) took 1.331e-02 seconds
Iteration: 5, Objective: 0.3899
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:27 PM: Your problem has 569 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:27 PM: Finished problem compilation (took 5.348e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 569
  constraints   = 1069
  nnz(P)        = 0
  nnz(A)        = 8227
  cones (total) = 1
    : Nonnegative = 1,  numel = 1069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9965e-01  +5.0155e+02  5.01e+02  9.57e-01  3.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.7492e-01  +1.0925e+02  1.09e+02  4.23e-01  2.31e+01  3.79e-03  5.79e-01  5.85e-01  
  2  +5.2602e-01  +1.2009e+01  1.15e+01  1.37e-01  9.54e+00  1.75e-02  2.58e-01  9.90e-01  
  3  +5.0565e-01  +2.6181e+00  2.11e+00  4.71e-02  3.40e+00  5.37e-05  1.55e-01  7.93e-01  
  4  +5.0083e-01  +1.2199e+00  7.19e-01  1.58e-02  1.17e+00  3.87e-05  6.21e-02  6.41e-01  
  5  +4.9146e-01  +1.1873e+00  6.96e-01  3.91e-03  3.03e-01  1.75e-04  1.04e-02  8.77e-01  
  6  +4.6984e-01  +9.2970e-01  4.60e-01  1.42e-03  1.10e-01  2.08e-04  3.88e-03  6.71e-01  
  7  +4.4602e-01  +7.6234e-01  3.16e-01  7.87e-04  6.03e-02  1.52e-04  2.27e-03  5.13e-01  
  8  +4.2998e-01  +6.5774e-01  2.28e-01  5.71e-04  4.34e-02  9.67e-05  1.75e-03  4.41e-01  
  9  +3.9813e-01  +4.7901e-01  8.09e-02  1.83e-04  1.38e-02  3.19e-05  6.28e-04  7.92e-01  
 10  +3.8561e-01  +4.1832e-01  3.27e-02  7.16e-05  5.38e-03  1.47e-05  2.62e-04  7.51e-01  
 11  +3.7800e-01  +3.8358e-01  5.58e-03  1.21e-05  9.06e-04  2.85e-06  4.64e-05  9.90e-01  
 12  +3.7618e-01  +3.7626e-01  8.31e-05  1.79e-07  1.35e-05  4.11e-08  7.00e-07  9.86e-01  
 13  +3.7615e-01  +3.7615e-01  8.31e-07  1.79e-09  1.35e-07  4.11e-10  7.00e-09  9.90e-01  
 14  +3.7615e-01  +3.7615e-01  8.31e-09  1.79e-11  1.35e-09  4.11e-12  7.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.0386ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:27 PM: Optimal value: 3.762e-01
(CVXPY) Sep 20 07:57:27 PM: Compilation took 5.348e-03 seconds
(CVXPY) Sep 20 07:57:27 PM: Solver (including time spent in interface) took 1.151e-02 seconds
Iteration: 6, Objective: 0.3762
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:27 PM: Your problem has 579 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:27 PM: Finished problem compilation (took 6.499e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 579
  constraints   = 1079
  nnz(P)        = 0
  nnz(A)        = 8398
  cones (total) = 1
    : Nonnegative = 1,  numel = 1079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0166e+02  5.01e+02  9.57e-01  3.66e+01  1.00e+00  1.01e+00   ------   
  1  +5.7318e-01  +1.0938e+02  1.09e+02  4.25e-01  2.30e+01  3.79e-03  5.80e-01  5.84e-01  
  2  +5.2509e-01  +1.2156e+01  1.16e+01  1.37e-01  9.51e+00  1.77e-02  2.58e-01  9.90e-01  
  3  +5.0602e-01  +2.3242e+00  1.82e+00  4.03e-02  2.97e+00  5.91e-05  1.21e-01  8.73e-01  
  4  +5.0032e-01  +1.2320e+00  7.32e-01  1.16e-02  8.82e-01  9.21e-05  3.36e-02  7.86e-01  
  5  +4.8682e-01  +1.1328e+00  6.46e-01  2.49e-03  1.94e-01  3.53e-04  6.35e-03  8.28e-01  
  6  +4.6426e-01  +9.3001e-01  4.66e-01  1.34e-03  1.03e-01  2.80e-04  3.60e-03  5.44e-01  
  7  +4.3623e-01  +7.4084e-01  3.05e-01  8.05e-04  6.14e-02  1.46e-04  2.35e-03  5.00e-01  
  8  +3.9599e-01  +5.0803e-01  1.12e-01  2.71e-04  2.04e-02  3.79e-05  9.12e-04  6.85e-01  
  9  +3.8132e-01  +4.3809e-01  5.68e-02  1.33e-04  9.98e-03  2.18e-05  4.76e-04  6.45e-01  
 10  +3.7441e-01  +4.0602e-01  3.16e-02  7.10e-05  5.35e-03  1.43e-05  2.64e-04  7.35e-01  
 11  +3.6712e-01  +3.7459e-01  7.48e-03  1.60e-05  1.21e-03  3.63e-06  6.30e-05  8.64e-01  
 12  +3.6463e-01  +3.6499e-01  3.65e-04  7.61e-07  5.78e-05  1.76e-07  3.08e-06  9.64e-01  
 13  +3.6450e-01  +3.6450e-01  3.67e-06  7.65e-09  5.82e-07  1.77e-09  3.11e-08  9.90e-01  
 14  +3.6450e-01  +3.6450e-01  3.67e-08  7.65e-11  5.82e-09  1.77e-11  3.11e-10  9.90e-01  
 15  +3.6450e-01  +3.6450e-01  3.69e-10  7.70e-13  5.86e-11  1.78e-13  3.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.0544ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:27 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:27 PM: Optimal value: 3.645e-01
(CVXPY) Sep 20 07:57:27 PM: Compilation took 6.499e-03 seconds
(CVXPY) Sep 20 07:57:27 PM: Solver (including time spent in interface) took 1.262e-02 seconds
Iteration: 7, Objective: 0.3645
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:28 PM: Your problem has 589 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:28 PM: Finished problem compilation (took 6.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 589
  constraints   = 1089
  nnz(P)        = 0
  nnz(A)        = 8523
  cones (total) = 1
    : Nonnegative = 1,  numel = 1089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9956e-01  +5.0174e+02  5.01e+02  9.57e-01  3.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.7178e-01  +1.0945e+02  1.09e+02  4.26e-01  2.29e+01  3.79e-03  5.80e-01  5.84e-01  
  2  +5.2443e-01  +1.2263e+01  1.17e+01  1.37e-01  9.43e+00  1.79e-02  2.58e-01  9.90e-01  
  3  +5.0623e-01  +2.1445e+00  1.64e+00  3.53e-02  2.63e+00  6.34e-05  1.01e-01  9.03e-01  
  4  +5.0536e-01  +2.0903e+00  1.58e+00  2.15e-02  1.65e+00  1.30e-04  5.46e-02  5.17e-01  
  5  +4.9340e-01  +1.4179e+00  9.24e-01  3.69e-03  2.89e-01  3.31e-04  9.10e-03  9.06e-01  
  6  +4.7293e-01  +1.1141e+00  6.41e-01  2.00e-03  1.55e-01  2.53e-04  5.21e-03  6.03e-01  
  7  +4.5403e-01  +9.4772e-01  4.94e-01  1.37e-03  1.05e-01  1.96e-04  3.72e-03  4.12e-01  
  8  +4.1090e-01  +6.2349e-01  2.13e-01  5.52e-04  4.15e-02  6.47e-05  1.73e-03  8.65e-01  
  9  +3.8519e-01  +4.8825e-01  1.03e-01  2.51e-04  1.88e-02  3.08e-05  8.68e-04  5.61e-01  
 10  +3.6849e-01  +4.0716e-01  3.87e-02  9.04e-05  6.77e-03  1.31e-05  3.38e-04  7.20e-01  
 11  +3.6020e-01  +3.6875e-01  8.56e-03  1.96e-05  1.47e-03  3.14e-06  7.71e-05  8.34e-01  
 12  +3.5784e-01  +3.5846e-01  6.19e-04  1.41e-06  1.06e-04  2.31e-07  5.70e-06  9.47e-01  
 13  +3.5765e-01  +3.5767e-01  1.30e-05  2.96e-08  2.22e-06  4.63e-09  1.21e-07  9.80e-01  
 14  +3.5765e-01  +3.5765e-01  1.30e-07  2.97e-10  2.23e-08  4.64e-11  1.21e-09  9.90e-01  
 15  +3.5765e-01  +3.5765e-01  1.30e-09  2.98e-12  2.23e-10  4.64e-13  1.21e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.537ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:28 PM: Optimal value: 3.577e-01
(CVXPY) Sep 20 07:57:28 PM: Compilation took 6.001e-03 seconds
(CVXPY) Sep 20 07:57:28 PM: Solver (including time spent in interface) took 1.402e-02 seconds
Iteration: 8, Objective: 0.3577
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:28 PM: Your problem has 599 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:28 PM: Finished problem compilation (took 5.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 599
  constraints   = 1099
  nnz(P)        = 0
  nnz(A)        = 8709
  cones (total) = 1
    : Nonnegative = 1,  numel = 1099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9953e-01  +5.0184e+02  5.01e+02  9.57e-01  3.64e+01  1.00e+00  1.01e+00   ------   
  1  +5.7051e-01  +1.0955e+02  1.09e+02  4.27e-01  2.27e+01  3.79e-03  5.81e-01  5.84e-01  
  2  +5.2389e-01  +1.2344e+01  1.18e+01  1.37e-01  9.37e+00  1.80e-02  2.58e-01  9.90e-01  
  3  +5.0750e-01  +2.6991e+00  2.19e+00  4.39e-02  3.25e+00  1.24e-03  1.16e-01  7.70e-01  
  4  +5.0465e-01  +2.2633e+00  1.76e+00  2.42e-02  1.84e+00  2.22e-03  6.14e-02  5.59e-01  
  5  +5.0177e-01  +2.1100e+00  1.61e+00  1.79e-02  1.36e+00  1.10e-03  4.73e-02  6.52e-01  
  6  +4.8902e-01  +1.6472e+00  1.16e+00  4.04e-03  3.15e-01  2.68e-03  9.96e-03  7.94e-01  
  7  +4.7147e-01  +1.3601e+00  8.89e-01  2.58e-03  1.99e-01  1.80e-03  6.62e-03  4.68e-01  
  8  +4.5723e-01  +1.1278e+00  6.71e-01  1.89e-03  1.45e-01  9.19e-04  5.05e-03  4.19e-01  
  9  +4.2267e-01  +7.7010e-01  3.47e-01  9.16e-04  6.90e-02  2.42e-04  2.70e-03  6.50e-01  
 10  +3.8186e-01  +4.9879e-01  1.17e-01  2.87e-04  2.14e-02  5.52e-05  9.77e-04  7.11e-01  
 11  +3.6867e-01  +4.3706e-01  6.84e-02  1.59e-04  1.19e-02  3.30e-05  5.77e-04  5.80e-01  
 12  +3.5877e-01  +3.8748e-01  2.87e-02  6.52e-05  4.86e-03  1.43e-05  2.51e-04  8.57e-01  
 13  +3.5265e-01  +3.5987e-01  7.22e-03  1.62e-05  1.21e-03  3.49e-06  6.51e-05  8.33e-01  
 14  +3.5067e-01  +3.5165e-01  9.83e-04  2.18e-06  1.62e-04  4.59e-07  9.04e-06  8.96e-01  
 15  +3.5035e-01  +3.5037e-01  1.42e-05  3.14e-08  2.34e-06  6.54e-09  1.31e-07  9.87e-01  
 16  +3.5035e-01  +3.5035e-01  1.42e-07  3.14e-10  2.34e-08  6.54e-11  1.31e-09  9.90e-01  
 17  +3.5035e-01  +3.5035e-01  1.42e-09  3.14e-12  2.34e-10  6.54e-13  1.31e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.4361ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:28 PM: Optimal value: 3.504e-01
(CVXPY) Sep 20 07:57:28 PM: Compilation took 5.510e-03 seconds
(CVXPY) Sep 20 07:57:28 PM: Solver (including time spent in interface) took 1.453e-02 seconds
Iteration: 9, Objective: 0.3504
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:28 PM: Your problem has 609 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:28 PM: Finished problem compilation (took 6.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 609
  constraints   = 1109
  nnz(P)        = 0
  nnz(A)        = 8844
  cones (total) = 1
    : Nonnegative = 1,  numel = 1109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9952e-01  +5.0178e+02  5.01e+02  9.58e-01  3.62e+01  1.00e+00  1.01e+00   ------   
  1  +5.6964e-01  +1.0952e+02  1.09e+02  4.28e-01  2.26e+01  3.79e-03  5.80e-01  5.84e-01  
  2  +5.2346e-01  +1.2389e+01  1.19e+01  1.36e-01  9.27e+00  1.80e-02  2.57e-01  9.90e-01  
  3  +5.0843e-01  +3.1760e+00  2.67e+00  5.02e-02  3.69e+00  2.22e-03  1.26e-01  6.82e-01  
  4  +5.0115e-01  +1.8844e+00  1.38e+00  1.77e-02  1.34e+00  3.98e-03  4.64e-02  8.39e-01  
  5  +4.9865e-01  +2.0257e+00  1.53e+00  1.11e-02  8.55e-01  2.73e-03  2.80e-02  8.81e-01  
  6  +4.8333e-01  +1.6661e+00  1.18e+00  3.78e-03  2.93e-01  4.71e-03  9.39e-03  6.70e-01  
  7  +4.6702e-01  +1.4456e+00  9.79e-01  2.60e-03  2.00e-01  3.58e-03  6.63e-03  4.17e-01  
  8  +4.5311e-01  +1.1930e+00  7.40e-01  2.00e-03  1.53e-01  1.82e-03  5.35e-03  3.51e-01  
  9  +4.1693e-01  +7.4196e-01  3.25e-01  8.89e-04  6.64e-02  1.59e-05  2.69e-03  8.17e-01  
 10  +3.7998e-01  +5.0292e-01  1.23e-01  3.11e-04  2.30e-02  1.51e-05  1.07e-03  6.76e-01  
 11  +3.6608e-01  +4.3455e-01  6.85e-02  1.63e-04  1.20e-02  1.73e-05  5.99e-04  6.48e-01  
 12  +3.5534e-01  +3.7978e-01  2.44e-02  5.64e-05  4.17e-03  1.09e-05  2.21e-04  9.47e-01  
 13  +3.5244e-01  +3.6622e-01  1.38e-02  3.13e-05  2.32e-03  6.27e-06  1.26e-04  6.23e-01  
 14  +3.4910e-01  +3.5221e-01  3.11e-03  6.75e-06  5.02e-04  1.46e-06  2.84e-05  9.03e-01  
 15  +3.4806e-01  +3.4825e-01  1.84e-04  3.93e-07  2.93e-05  8.57e-08  1.69e-06  9.45e-01  
 16  +3.4800e-01  +3.4800e-01  1.86e-06  3.96e-09  2.95e-07  8.64e-10  1.70e-08  9.90e-01  
 17  +3.4800e-01  +3.4800e-01  1.86e-08  3.96e-11  2.95e-09  8.64e-12  1.70e-10  9.90e-01  
 18  +3.4800e-01  +3.4800e-01  1.86e-10  3.96e-13  2.95e-11  8.66e-14  1.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.6551ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:28 PM: Optimal value: 3.480e-01
(CVXPY) Sep 20 07:57:28 PM: Compilation took 6.003e-03 seconds
(CVXPY) Sep 20 07:57:28 PM: Solver (including time spent in interface) took 1.625e-02 seconds
Iteration: 10, Objective: 0.3480
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:28 PM: Your problem has 619 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:28 PM: Finished problem compilation (took 6.519e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 619
  constraints   = 1119
  nnz(P)        = 0
  nnz(A)        = 8950
  cones (total) = 1
    : Nonnegative = 1,  numel = 1119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9950e-01  +5.0180e+02  5.01e+02  9.58e-01  3.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.6819e-01  +1.0951e+02  1.09e+02  4.28e-01  2.24e+01  3.79e-03  5.80e-01  5.84e-01  
  2  +5.2276e-01  +1.2496e+01  1.20e+01  1.36e-01  9.16e+00  1.82e-02  2.55e-01  9.90e-01  
  3  +5.0918e-01  +3.6046e+00  3.10e+00  5.41e-02  3.96e+00  3.16e-03  1.30e-01  6.19e-01  
  4  +4.9901e-01  +1.6480e+00  1.15e+00  1.40e-02  1.07e+00  4.88e-03  3.70e-02  9.90e-01  
  5  +4.9158e-01  +1.8995e+00  1.41e+00  7.16e-03  5.52e-01  6.74e-03  1.77e-02  9.00e-01  
  6  +4.7086e-01  +1.4968e+00  1.03e+00  3.03e-03  2.34e-01  7.36e-03  7.62e-03  6.36e-01  
  7  +4.5502e-01  +1.2716e+00  8.17e-01  2.22e-03  1.70e-01  4.61e-03  5.80e-03  3.66e-01  
  8  +4.2240e-01  +8.4118e-01  4.19e-01  1.23e-03  9.17e-02  3.82e-05  3.61e-03  7.09e-01  
  9  +3.8049e-01  +5.4678e-01  1.66e-01  4.39e-04  3.23e-02  1.91e-05  1.48e-03  6.38e-01  
 10  +3.6255e-01  +4.5110e-01  8.86e-02  2.22e-04  1.63e-02  2.06e-05  8.08e-04  6.38e-01  
 11  +3.5066e-01  +3.9113e-01  4.05e-02  9.76e-05  7.19e-03  1.08e-05  3.79e-04  6.08e-01  
 12  +3.4367e-01  +3.5603e-01  1.24e-02  2.93e-05  2.16e-03  3.80e-06  1.19e-04  7.60e-01  
 13  +3.4225e-01  +3.4888e-01  6.63e-03  1.56e-05  1.15e-03  2.25e-06  6.43e-05  6.00e-01  
 14  +3.4103e-01  +3.4358e-01  2.55e-03  5.68e-06  4.21e-04  1.02e-06  2.44e-05  8.35e-01  
 15  +3.4027e-01  +3.4048e-01  2.13e-04  4.67e-07  3.46e-05  8.59e-08  2.04e-06  9.19e-01  
 16  +3.4020e-01  +3.4020e-01  2.22e-06  4.85e-09  3.59e-07  8.93e-10  2.12e-08  9.90e-01  
 17  +3.4020e-01  +3.4020e-01  2.22e-08  4.85e-11  3.59e-09  8.93e-12  2.12e-10  9.90e-01  
 18  +3.4020e-01  +3.4020e-01  2.22e-10  4.85e-13  3.59e-11  8.96e-14  2.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.7096ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:28 PM: Optimal value: 3.402e-01
(CVXPY) Sep 20 07:57:28 PM: Compilation took 6.519e-03 seconds
(CVXPY) Sep 20 07:57:28 PM: Solver (including time spent in interface) took 1.660e-02 seconds
Iteration: 11, Objective: 0.3402
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:28 PM: Your problem has 629 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:28 PM: Finished problem compilation (took 6.040e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 629
  constraints   = 1129
  nnz(P)        = 0
  nnz(A)        = 9086
  cones (total) = 1
    : Nonnegative = 1,  numel = 1129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +5.0188e+02  5.01e+02  9.58e-01  3.60e+01  1.00e+00  1.01e+00   ------   
  1  +5.6703e-01  +1.0960e+02  1.09e+02  4.29e-01  2.23e+01  3.80e-03  5.80e-01  5.84e-01  
  2  +5.2206e-01  +1.2579e+01  1.21e+01  1.36e-01  9.11e+00  1.83e-02  2.55e-01  9.90e-01  
  3  +5.0940e-01  +3.7757e+00  3.27e+00  5.45e-02  3.98e+00  3.61e-03  1.29e-01  5.98e-01  
  4  +5.0066e-01  +2.0574e+00  1.56e+00  1.90e-02  1.44e+00  4.85e-03  4.87e-02  8.54e-01  
  5  +4.9398e-01  +2.2647e+00  1.77e+00  9.53e-03  7.32e-01  5.56e-03  2.32e-02  8.96e-01  
  6  +4.7171e-01  +1.6554e+00  1.18e+00  3.52e-03  2.71e-01  6.08e-03  8.74e-03  6.67e-01  
  7  +4.5536e-01  +1.4062e+00  9.51e-01  2.54e-03  1.94e-01  4.03e-03  6.54e-03  3.78e-01  
  8  +4.3033e-01  +9.6736e-01  5.37e-01  1.63e-03  1.22e-01  3.20e-05  4.67e-03  7.01e-01  
  9  +3.8068e-01  +5.6819e-01  1.88e-01  4.91e-04  3.61e-02  2.47e-05  1.62e-03  7.27e-01  
 10  +3.5945e-01  +4.5559e-01  9.61e-02  2.45e-04  1.79e-02  2.77e-05  8.94e-04  7.00e-01  
 11  +3.4618e-01  +3.8312e-01  3.69e-02  9.22e-05  6.73e-03  1.16e-05  3.65e-04  6.67e-01  
 12  +3.4100e-01  +3.5564e-01  1.46e-02  3.61e-05  2.64e-03  4.96e-06  1.49e-04  6.86e-01  
 13  +3.3909e-01  +3.4584e-01  6.76e-03  1.65e-05  1.21e-03  2.38e-06  6.93e-05  6.16e-01  
 14  +3.3800e-01  +3.4045e-01  2.46e-03  5.96e-06  4.35e-04  9.80e-07  2.54e-05  9.90e-01  
 15  +3.3732e-01  +3.3752e-01  2.07e-04  5.00e-07  3.65e-05  7.92e-08  2.16e-06  9.24e-01  
 16  +3.3725e-01  +3.3726e-01  1.03e-05  2.49e-08  1.82e-06  3.91e-09  1.09e-07  9.90e-01  
 17  +3.3725e-01  +3.3725e-01  1.03e-07  2.49e-10  1.82e-08  3.92e-11  1.09e-09  9.90e-01  
 18  +3.3725e-01  +3.3725e-01  1.03e-09  2.50e-12  1.82e-10  3.92e-13  1.09e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.7847ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:28 PM: Optimal value: 3.373e-01
(CVXPY) Sep 20 07:57:28 PM: Compilation took 6.040e-03 seconds
(CVXPY) Sep 20 07:57:28 PM: Solver (including time spent in interface) took 1.719e-02 seconds
Iteration: 12, Objective: 0.3373
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:28 PM: Your problem has 639 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:28 PM: Finished problem compilation (took 7.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 639
  constraints   = 1139
  nnz(P)        = 0
  nnz(A)        = 9192
  cones (total) = 1
    : Nonnegative = 1,  numel = 1139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9945e-01  +5.0193e+02  5.01e+02  9.58e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.6518e-01  +1.0965e+02  1.09e+02  4.30e-01  2.21e+01  3.80e-03  5.80e-01  5.84e-01  
  2  +5.2091e-01  +1.2711e+01  1.22e+01  1.35e-01  9.04e+00  1.85e-02  2.54e-01  9.90e-01  
  3  +5.0921e-01  +3.8066e+00  3.30e+00  5.18e-02  3.80e+00  3.92e-03  1.21e-01  5.98e-01  
  4  +5.0507e-01  +2.9973e+00  2.49e+00  3.13e-02  2.35e+00  4.53e-03  7.50e-02  4.61e-01  
  5  +4.9952e-01  +2.7487e+00  2.25e+00  1.85e-02  1.41e+00  3.23e-03  4.50e-02  7.63e-01  
  6  +4.8179e-01  +2.0887e+00  1.61e+00  5.53e-03  4.28e-01  5.45e-03  1.33e-02  7.07e-01  
  7  +4.5920e-01  +1.6842e+00  1.23e+00  3.44e-03  2.63e-01  3.96e-03  8.64e-03  4.44e-01  
  8  +4.2999e-01  +1.0371e+00  6.07e-01  1.84e-03  1.38e-01  3.33e-05  5.11e-03  7.18e-01  
  9  +3.7825e-01  +5.9078e-01  2.13e-01  5.77e-04  4.22e-02  3.20e-05  1.88e-03  7.30e-01  
 10  +3.5429e-01  +4.5601e-01  1.02e-01  2.67e-04  1.94e-02  2.48e-05  9.81e-04  6.39e-01  
 11  +3.4082e-01  +3.7944e-01  3.86e-02  9.93e-05  7.20e-03  1.12e-05  3.94e-04  7.01e-01  
 12  +3.3543e-01  +3.4974e-01  1.43e-02  3.64e-05  2.64e-03  4.26e-06  1.50e-04  6.46e-01  
 13  +3.3313e-01  +3.3716e-01  4.03e-03  1.02e-05  7.38e-04  1.39e-06  4.30e-05  8.55e-01  
 14  +3.3243e-01  +3.3406e-01  1.63e-03  4.00e-06  2.93e-04  5.94e-07  1.74e-05  7.88e-01  
 15  +3.3204e-01  +3.3234e-01  2.99e-04  7.24e-07  5.32e-05  1.09e-07  3.21e-06  8.23e-01  
 16  +3.3195e-01  +3.3196e-01  4.27e-06  1.03e-08  7.59e-07  1.57e-09  4.60e-08  9.90e-01  
 17  +3.3195e-01  +3.3195e-01  4.28e-08  1.03e-10  7.61e-09  1.58e-11  4.61e-10  9.90e-01  
 18  +3.3195e-01  +3.3195e-01  4.28e-10  1.03e-12  7.61e-11  1.58e-13  4.63e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.7595ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:28 PM: Optimal value: 3.320e-01
(CVXPY) Sep 20 07:57:28 PM: Compilation took 7.004e-03 seconds
(CVXPY) Sep 20 07:57:28 PM: Solver (including time spent in interface) took 1.765e-02 seconds
Iteration: 13, Objective: 0.3320
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:28 PM: Your problem has 649 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:28 PM: Finished problem compilation (took 7.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 649
  constraints   = 1149
  nnz(P)        = 0
  nnz(A)        = 9382
  cones (total) = 1
    : Nonnegative = 1,  numel = 1149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9944e-01  +5.0190e+02  5.01e+02  9.58e-01  3.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.6418e-01  +1.0965e+02  1.09e+02  4.31e-01  2.20e+01  3.80e-03  5.79e-01  5.84e-01  
  2  +5.2022e-01  +1.2771e+01  1.23e+01  1.34e-01  8.94e+00  1.86e-02  2.53e-01  9.90e-01  
  3  +5.0876e-01  +3.6988e+00  3.19e+00  4.85e-02  3.55e+00  3.93e-03  1.13e-01  6.13e-01  
  4  +5.0619e-01  +3.1947e+00  2.69e+00  3.36e-02  2.52e+00  4.38e-03  7.93e-02  3.10e-01  
  5  +5.0203e-01  +2.9244e+00  2.42e+00  2.72e-02  2.02e+00  2.61e-03  6.78e-02  4.53e-01  
  6  +4.8471e-01  +1.9760e+00  1.49e+00  5.59e-03  4.34e-01  5.45e-03  1.34e-02  8.08e-01  
  7  +4.5949e-01  +1.6248e+00  1.17e+00  3.33e-03  2.55e-01  4.21e-03  8.29e-03  4.89e-01  
  8  +4.3538e-01  +1.0825e+00  6.47e-01  2.20e-03  1.65e-01  3.21e-05  6.06e-03  6.07e-01  
  9  +3.8702e-01  +6.8977e-01  3.03e-01  8.57e-04  6.28e-02  6.44e-05  2.68e-03  7.55e-01  
 10  +3.5127e-01  +4.5832e-01  1.07e-01  2.91e-04  2.11e-02  2.52e-05  1.06e-03  6.95e-01  
 11  +3.3811e-01  +3.8533e-01  4.72e-02  1.24e-04  8.97e-03  1.62e-05  4.83e-04  7.88e-01  
 12  +3.3102e-01  +3.4888e-01  1.79e-02  4.59e-05  3.34e-03  6.47e-06  1.87e-04  7.16e-01  
 13  +3.2753e-01  +3.3148e-01  3.95e-03  1.01e-05  7.33e-04  1.42e-06  4.25e-05  8.03e-01  
 14  +3.2666e-01  +3.2727e-01  6.13e-04  1.56e-06  1.14e-04  2.18e-07  6.69e-06  8.56e-01  
 15  +3.2650e-01  +3.2652e-01  1.53e-05  3.90e-08  2.83e-06  5.43e-09  1.67e-07  9.76e-01  
 16  +3.2650e-01  +3.2650e-01  1.53e-07  3.90e-10  2.83e-08  5.43e-11  1.68e-09  9.90e-01  
 17  +3.2650e-01  +3.2650e-01  1.53e-09  3.90e-12  2.83e-10  5.43e-13  1.68e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.9749ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:28 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:28 PM: Optimal value: 3.265e-01
(CVXPY) Sep 20 07:57:28 PM: Compilation took 7.000e-03 seconds
(CVXPY) Sep 20 07:57:28 PM: Solver (including time spent in interface) took 1.780e-02 seconds
Iteration: 14, Objective: 0.3265
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:29 PM: Your problem has 659 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:29 PM: Finished problem compilation (took 6.132e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 659
  constraints   = 1159
  nnz(P)        = 0
  nnz(A)        = 9523
  cones (total) = 1
    : Nonnegative = 1,  numel = 1159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0179e+02  5.01e+02  9.59e-01  3.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.6284e-01  +1.0964e+02  1.09e+02  4.31e-01  2.19e+01  3.81e-03  5.79e-01  5.84e-01  
  2  +5.1918e-01  +1.2876e+01  1.24e+01  1.34e-01  8.86e+00  1.87e-02  2.52e-01  9.90e-01  
  3  +5.0803e-01  +3.4968e+00  2.99e+00  4.35e-02  3.20e+00  3.85e-03  1.01e-01  6.40e-01  
  4  +5.0674e-01  +3.3074e+00  2.80e+00  3.44e-02  2.57e+00  4.29e-03  7.99e-02  2.16e-01  
  5  +5.0234e-01  +3.0403e+00  2.54e+00  2.88e-02  2.14e+00  2.64e-03  7.12e-02  3.86e-01  
  6  +4.8412e-01  +2.0419e+00  1.56e+00  5.76e-03  4.48e-01  5.69e-03  1.36e-02  8.16e-01  
  7  +4.6294e-01  +1.7424e+00  1.28e+00  3.82e-03  2.94e-01  4.58e-03  9.33e-03  4.05e-01  
  8  +4.4671e-01  +1.4649e+00  1.02e+00  3.00e-03  2.28e-01  2.76e-03  7.64e-03  3.05e-01  
  9  +4.0305e-01  +8.5183e-01  4.49e-01  1.34e-03  9.88e-02  2.40e-05  3.89e-03  7.96e-01  
 10  +3.6317e-01  +5.5177e-01  1.89e-01  5.35e-04  3.88e-02  2.13e-05  1.80e-03  6.17e-01  
 11  +3.4213e-01  +4.2342e-01  8.13e-02  2.22e-04  1.60e-02  1.41e-05  8.20e-04  6.33e-01  
 12  +3.3463e-01  +3.8379e-01  4.92e-02  1.28e-04  9.26e-03  1.15e-05  4.92e-04  5.40e-01  
 13  +3.2914e-01  +3.5552e-01  2.64e-02  6.63e-05  4.80e-03  7.29e-06  2.64e-04  5.79e-01  
 14  +3.2722e-01  +3.4645e-01  1.92e-02  4.66e-05  3.38e-03  6.10e-06  1.89e-04  4.76e-01  
 15  +3.2278e-01  +3.2661e-01  3.82e-03  8.75e-06  6.38e-04  1.32e-06  3.75e-05  8.45e-01  
 16  +3.2165e-01  +3.2179e-01  1.42e-04  3.21e-07  2.34e-05  4.76e-08  1.40e-06  9.66e-01  
 17  +3.2160e-01  +3.2160e-01  1.42e-06  3.21e-09  2.34e-07  4.77e-10  1.40e-08  9.90e-01  
 18  +3.2160e-01  +3.2160e-01  1.42e-08  3.21e-11  2.34e-09  4.77e-12  1.41e-10  9.90e-01  
 19  +3.2160e-01  +3.2160e-01  1.42e-10  3.21e-13  2.34e-11  4.78e-14  1.41e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.1634ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:29 PM: Optimal value: 3.216e-01
(CVXPY) Sep 20 07:57:29 PM: Compilation took 6.132e-03 seconds
(CVXPY) Sep 20 07:57:29 PM: Solver (including time spent in interface) took 2.075e-02 seconds
Iteration: 15, Objective: 0.3216
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:29 PM: Your problem has 669 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:29 PM: Finished problem compilation (took 7.066e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 669
  constraints   = 1169
  nnz(P)        = 0
  nnz(A)        = 9656
  cones (total) = 1
    : Nonnegative = 1,  numel = 1169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0180e+02  5.01e+02  9.59e-01  3.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.6205e-01  +1.0970e+02  1.09e+02  4.32e-01  2.17e+01  3.81e-03  5.78e-01  5.84e-01  
  2  +5.1867e-01  +1.2919e+01  1.24e+01  1.34e-01  8.78e+00  1.88e-02  2.51e-01  9.90e-01  
  3  +5.0759e-01  +3.3695e+00  2.86e+00  4.08e-02  3.01e+00  3.77e-03  9.51e-02  6.57e-01  
  4  +5.0662e-01  +3.2587e+00  2.75e+00  3.34e-02  2.49e+00  4.21e-03  7.75e-02  1.91e-01  
  5  +5.0236e-01  +3.0886e+00  2.59e+00  2.85e-02  2.11e+00  2.76e-03  6.96e-02  3.84e-01  
  6  +4.8505e-01  +2.1804e+00  1.70e+00  6.51e-03  5.04e-01  5.60e-03  1.54e-02  7.86e-01  
  7  +4.6154e-01  +1.7866e+00  1.33e+00  4.12e-03  3.15e-01  4.12e-03  1.01e-02  4.45e-01  
  8  +4.4777e-01  +1.5103e+00  1.06e+00  3.30e-03  2.50e-01  2.38e-03  8.42e-03  3.17e-01  
  9  +4.1066e-01  +9.6367e-01  5.53e-01  1.71e-03  1.26e-01  2.14e-05  4.88e-03  8.31e-01  
 10  +3.6847e-01  +6.0521e-01  2.37e-01  6.81e-04  4.93e-02  1.79e-05  2.24e-03  5.91e-01  
 11  +3.4573e-01  +4.6180e-01  1.16e-01  3.24e-04  2.33e-02  1.48e-05  1.18e-03  5.55e-01  
 12  +3.3123e-01  +3.7560e-01  4.44e-02  1.19e-04  8.54e-03  9.88e-06  4.66e-04  7.36e-01  
 13  +3.2718e-01  +3.5307e-01  2.59e-02  6.83e-05  4.89e-03  7.41e-06  2.74e-04  6.20e-01  
 14  +3.2447e-01  +3.3920e-01  1.47e-02  3.81e-05  2.74e-03  4.48e-06  1.56e-04  5.14e-01  
 15  +3.2200e-01  +3.2696e-01  4.96e-03  1.25e-05  9.02e-04  1.66e-06  5.29e-05  7.80e-01  
 16  +3.2081e-01  +3.2153e-01  7.21e-04  1.79e-06  1.29e-04  2.50e-07  7.74e-06  8.90e-01  
 17  +3.2060e-01  +3.2062e-01  1.50e-05  3.73e-08  2.68e-06  5.25e-09  1.62e-07  9.82e-01  
 18  +3.2060e-01  +3.2060e-01  1.50e-07  3.73e-10  2.68e-08  5.25e-11  1.62e-09  9.90e-01  
 19  +3.2060e-01  +3.2060e-01  1.51e-09  3.74e-12  2.69e-10  5.27e-13  1.62e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.7896ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:29 PM: Optimal value: 3.206e-01
(CVXPY) Sep 20 07:57:29 PM: Compilation took 7.066e-03 seconds
(CVXPY) Sep 20 07:57:29 PM: Solver (including time spent in interface) took 2.453e-02 seconds
Iteration: 16, Objective: 0.3206
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:29 PM: Your problem has 679 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:29 PM: Finished problem compilation (took 6.082e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 679
  constraints   = 1179
  nnz(P)        = 0
  nnz(A)        = 9766
  cones (total) = 1
    : Nonnegative = 1,  numel = 1179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9940e-01  +5.0178e+02  5.01e+02  9.59e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.6160e-01  +1.0971e+02  1.09e+02  4.33e-01  2.16e+01  3.81e-03  5.78e-01  5.84e-01  
  2  +5.1822e-01  +1.2964e+01  1.24e+01  1.34e-01  8.69e+00  1.88e-02  2.51e-01  9.90e-01  
  3  +5.0710e-01  +3.2122e+00  2.71e+00  3.79e-02  2.78e+00  3.64e-03  8.86e-02  6.80e-01  
  4  +5.0641e-01  +3.1857e+00  2.68e+00  3.20e-02  2.38e+00  4.07e-03  7.43e-02  1.79e-01  
  5  +5.0209e-01  +3.1871e+00  2.69e+00  2.68e-02  1.98e+00  2.99e-03  6.41e-02  4.52e-01  
  6  +4.8489e-01  +2.3435e+00  1.86e+00  7.01e-03  5.41e-01  5.58e-03  1.65e-02  7.48e-01  
  7  +4.6113e-01  +1.8715e+00  1.41e+00  4.40e-03  3.36e-01  3.91e-03  1.08e-02  4.45e-01  
  8  +4.4499e-01  +1.5380e+00  1.09e+00  3.36e-03  2.53e-01  2.13e-03  8.61e-03  3.64e-01  
  9  +4.1369e-01  +1.0409e+00  6.27e-01  1.99e-03  1.46e-01  1.86e-05  5.65e-03  8.57e-01  
 10  +3.6432e-01  +5.8744e-01  2.23e-01  6.33e-04  4.56e-02  1.45e-05  2.09e-03  6.68e-01  
 11  +3.4073e-01  +4.4844e-01  1.08e-01  2.98e-04  2.13e-02  1.79e-05  1.10e-03  6.19e-01  
 12  +3.2783e-01  +3.7325e-01  4.54e-02  1.22e-04  8.72e-03  1.05e-05  4.88e-04  6.78e-01  
 13  +3.2296e-01  +3.4660e-01  2.36e-02  6.27e-05  4.47e-03  6.04e-06  2.59e-04  5.45e-01  
 14  +3.1934e-01  +3.2791e-01  8.57e-03  2.17e-05  1.56e-03  2.92e-06  9.37e-05  8.70e-01  
 15  +3.1739e-01  +3.1936e-01  1.98e-03  4.81e-06  3.48e-04  6.83e-07  2.17e-05  8.03e-01  
 16  +3.1682e-01  +3.1687e-01  5.61e-05  1.35e-07  9.80e-06  1.85e-08  6.21e-07  9.77e-01  
 17  +3.1680e-01  +3.1680e-01  5.61e-07  1.35e-09  9.80e-08  1.85e-10  6.22e-09  9.90e-01  
 18  +3.1680e-01  +3.1680e-01  5.61e-09  1.36e-11  9.80e-10  1.85e-12  6.22e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.8343ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:29 PM: Optimal value: 3.168e-01
(CVXPY) Sep 20 07:57:29 PM: Compilation took 6.082e-03 seconds
(CVXPY) Sep 20 07:57:29 PM: Solver (including time spent in interface) took 2.323e-02 seconds
Iteration: 17, Objective: 0.3168
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:29 PM: Your problem has 689 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:29 PM: Finished problem compilation (took 7.265e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 689
  constraints   = 1189
  nnz(P)        = 0
  nnz(A)        = 9874
  cones (total) = 1
    : Nonnegative = 1,  numel = 1189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9940e-01  +5.0180e+02  5.01e+02  9.59e-01  3.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.6115e-01  +1.0970e+02  1.09e+02  4.34e-01  2.15e+01  3.81e-03  5.78e-01  5.84e-01  
  2  +5.1801e-01  +1.2990e+01  1.25e+01  1.34e-01  8.60e+00  1.89e-02  2.50e-01  9.90e-01  
  3  +5.0686e-01  +3.1319e+00  2.63e+00  3.64e-02  2.66e+00  3.56e-03  8.52e-02  6.92e-01  
  4  +5.0630e-01  +3.1490e+00  2.64e+00  3.13e-02  2.31e+00  3.98e-03  7.25e-02  1.78e-01  
  5  +5.0173e-01  +3.2516e+00  2.75e+00  2.54e-02  1.88e+00  3.15e-03  6.02e-02  5.06e-01  
  6  +4.8434e-01  +2.4164e+00  1.93e+00  7.17e-03  5.51e-01  5.48e-03  1.69e-02  7.24e-01  
  7  +4.6003e-01  +1.9205e+00  1.46e+00  4.47e-03  3.40e-01  3.85e-03  1.10e-02  4.50e-01  
  8  +4.4389e-01  +1.5697e+00  1.13e+00  3.41e-03  2.56e-01  2.12e-03  8.74e-03  3.56e-01  
  9  +4.1192e-01  +1.0375e+00  6.26e-01  1.96e-03  1.44e-01  1.84e-05  5.60e-03  8.63e-01  
 10  +3.6300e-01  +5.8405e-01  2.21e-01  6.29e-04  4.52e-02  1.51e-05  2.08e-03  6.69e-01  
 11  +3.4084e-01  +4.5332e-01  1.12e-01  3.13e-04  2.23e-02  1.49e-05  1.15e-03  5.48e-01  
 12  +3.2483e-01  +3.5997e-01  3.51e-02  9.48e-05  6.74e-03  7.78e-06  3.82e-04  7.76e-01  
 13  +3.1947e-01  +3.3099e-01  1.15e-02  3.06e-05  2.17e-03  2.99e-06  1.29e-04  7.47e-01  
 14  +3.1732e-01  +3.1971e-01  2.39e-03  6.31e-06  4.46e-04  6.90e-07  2.75e-05  8.56e-01  
 15  +3.1683e-01  +3.1728e-01  4.56e-04  1.20e-06  8.50e-05  1.40e-07  5.29e-06  8.64e-01  
 16  +3.1672e-01  +3.1678e-01  6.30e-05  1.66e-07  1.18e-05  1.99e-08  7.35e-07  8.98e-01  
 17  +3.1670e-01  +3.1670e-01  9.38e-07  2.47e-09  1.75e-07  2.99e-10  1.09e-08  9.86e-01  
 18  +3.1670e-01  +3.1670e-01  9.47e-09  2.50e-11  1.77e-09  3.02e-12  1.11e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.7041ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:29 PM: Optimal value: 3.167e-01
(CVXPY) Sep 20 07:57:29 PM: Compilation took 7.265e-03 seconds
(CVXPY) Sep 20 07:57:29 PM: Solver (including time spent in interface) took 2.552e-02 seconds
Iteration: 18, Objective: 0.3167
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:29 PM: Your problem has 699 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:29 PM: Finished problem compilation (took 8.191e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 699
  constraints   = 1199
  nnz(P)        = 0
  nnz(A)        = 10030
  cones (total) = 1
    : Nonnegative = 1,  numel = 1199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9940e-01  +5.0178e+02  5.01e+02  9.59e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.6082e-01  +1.0966e+02  1.09e+02  4.34e-01  2.13e+01  3.81e-03  5.77e-01  5.85e-01  
  2  +5.1779e-01  +1.2988e+01  1.25e+01  1.34e-01  8.50e+00  1.88e-02  2.49e-01  9.90e-01  
  3  +5.0655e-01  +3.0309e+00  2.52e+00  3.47e-02  2.52e+00  3.46e-03  8.14e-02  7.06e-01  
  4  +5.0610e-01  +3.0883e+00  2.58e+00  3.02e-02  2.22e+00  3.87e-03  7.01e-02  1.80e-01  
  5  +5.0122e-01  +3.2995e+00  2.80e+00  2.37e-02  1.75e+00  3.33e-03  5.56e-02  5.58e-01  
  6  +4.8370e-01  +2.4738e+00  1.99e+00  7.34e-03  5.63e-01  5.30e-03  1.73e-02  6.94e-01  
  7  +4.5932e-01  +1.9763e+00  1.52e+00  4.63e-03  3.51e-01  3.88e-03  1.13e-02  4.32e-01  
  8  +4.4117e-01  +1.5976e+00  1.16e+00  3.39e-03  2.55e-01  2.20e-03  8.69e-03  3.78e-01  
  9  +4.1189e-01  +1.0546e+00  6.43e-01  2.05e-03  1.50e-01  1.82e-05  5.83e-03  8.48e-01  
 10  +3.6178e-01  +5.8264e-01  2.21e-01  6.29e-04  4.52e-02  1.32e-05  2.07e-03  6.78e-01  
 11  +3.3963e-01  +4.5476e-01  1.15e-01  3.20e-04  2.28e-02  1.99e-05  1.17e-03  6.07e-01  
 12  +3.2437e-01  +3.6617e-01  4.18e-02  1.12e-04  8.01e-03  1.16e-05  4.43e-04  7.79e-01  
 13  +3.2106e-01  +3.4936e-01  2.83e-02  7.39e-05  5.29e-03  8.56e-06  2.97e-04  4.53e-01  
 14  +3.1696e-01  +3.2963e-01  1.27e-02  3.14e-05  2.26e-03  4.35e-06  1.32e-04  7.26e-01  
 15  +3.1419e-01  +3.1765e-01  3.47e-03  8.17e-06  5.92e-04  1.24e-06  3.62e-05  8.17e-01  
 16  +3.1314e-01  +3.1327e-01  1.29e-04  3.00e-07  2.18e-05  4.44e-08  1.37e-06  9.73e-01  
 17  +3.1310e-01  +3.1310e-01  1.31e-06  3.02e-09  2.19e-07  4.47e-10  1.38e-08  9.90e-01  
 18  +3.1310e-01  +3.1310e-01  1.31e-08  3.03e-11  2.19e-09  4.47e-12  1.38e-10  9.90e-01  
 19  +3.1310e-01  +3.1310e-01  1.31e-10  3.03e-13  2.19e-11  4.49e-14  1.39e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.0594ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:29 PM: Optimal value: 3.131e-01
(CVXPY) Sep 20 07:57:29 PM: Compilation took 8.191e-03 seconds
(CVXPY) Sep 20 07:57:29 PM: Solver (including time spent in interface) took 2.850e-02 seconds
Iteration: 19, Objective: 0.3131
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:29 PM: Your problem has 709 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:29 PM: Finished problem compilation (took 7.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 709
  constraints   = 1209
  nnz(P)        = 0
  nnz(A)        = 10098
  cones (total) = 1
    : Nonnegative = 1,  numel = 1209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9939e-01  +5.0178e+02  5.01e+02  9.59e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.6001e-01  +1.0968e+02  1.09e+02  4.35e-01  2.12e+01  3.82e-03  5.77e-01  5.85e-01  
  2  +5.1720e-01  +1.3040e+01  1.25e+01  1.33e-01  8.45e+00  1.89e-02  2.49e-01  9.90e-01  
  3  +5.0590e-01  +2.8191e+00  2.31e+00  3.11e-02  2.27e+00  3.26e-03  7.33e-02  7.36e-01  
  4  +5.0552e-01  +2.9355e+00  2.43e+00  2.75e-02  2.03e+00  3.65e-03  6.40e-02  1.97e-01  
  5  +4.9971e-01  +3.3237e+00  2.82e+00  1.97e-02  1.47e+00  3.78e-03  4.57e-02  6.38e-01  
  6  +4.8120e-01  +2.4792e+00  2.00e+00  7.20e-03  5.50e-01  4.91e-03  1.70e-02  6.33e-01  
  7  +4.5719e-01  +2.0434e+00  1.59e+00  4.68e-03  3.54e-01  3.85e-03  1.14e-02  4.24e-01  
  8  +4.3822e-01  +1.6209e+00  1.18e+00  3.40e-03  2.54e-01  2.10e-03  8.69e-03  3.86e-01  
  9  +4.0939e-01  +1.0532e+00  6.44e-01  2.05e-03  1.50e-01  1.71e-05  5.84e-03  8.74e-01  
 10  +3.5967e-01  +5.8046e-01  2.21e-01  6.29e-04  4.50e-02  1.29e-05  2.07e-03  6.79e-01  
 11  +3.4713e-01  +5.1284e-01  1.66e-01  4.62e-04  3.30e-02  1.94e-05  1.59e-03  3.48e-01  
 12  +3.2660e-01  +3.9628e-01  6.97e-02  1.87e-04  1.33e-02  1.43e-05  7.11e-04  6.80e-01  
 13  +3.2000e-01  +3.6178e-01  4.18e-02  1.09e-04  7.80e-03  1.01e-05  4.29e-04  4.94e-01  
 14  +3.1454e-01  +3.3362e-01  1.91e-02  4.85e-05  3.47e-03  5.45e-06  1.97e-04  6.57e-01  
 15  +3.1142e-01  +3.1887e-01  7.45e-03  1.84e-05  1.32e-03  2.31e-06  7.76e-05  6.94e-01  
 16  +3.0957e-01  +3.1066e-01  1.09e-03  2.60e-06  1.87e-04  3.97e-07  1.15e-05  9.47e-01  
 17  +3.0921e-01  +3.0923e-01  2.33e-05  5.50e-08  3.94e-06  8.28e-09  2.47e-07  9.88e-01  
 18  +3.0920e-01  +3.0920e-01  2.33e-07  5.51e-10  3.95e-08  8.29e-11  2.48e-09  9.90e-01  
 19  +3.0920e-01  +3.0920e-01  2.33e-09  5.51e-12  3.95e-10  8.29e-13  2.48e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.0059ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:29 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:29 PM: Optimal value: 3.092e-01
(CVXPY) Sep 20 07:57:29 PM: Compilation took 7.007e-03 seconds
(CVXPY) Sep 20 07:57:29 PM: Solver (including time spent in interface) took 3.017e-02 seconds
Iteration: 20, Objective: 0.3092
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:30 PM: Your problem has 719 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:30 PM: Finished problem compilation (took 7.522e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 719
  constraints   = 1219
  nnz(P)        = 0
  nnz(A)        = 10177
  cones (total) = 1
    : Nonnegative = 1,  numel = 1219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9939e-01  +5.0179e+02  5.01e+02  9.60e-01  3.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.5969e-01  +1.0967e+02  1.09e+02  4.36e-01  2.11e+01  3.82e-03  5.76e-01  5.85e-01  
  2  +5.1695e-01  +1.3055e+01  1.25e+01  1.33e-01  8.36e+00  1.89e-02  2.48e-01  9.90e-01  
  3  +5.0555e-01  +2.7065e+00  2.20e+00  2.92e-02  2.13e+00  3.16e-03  6.91e-02  7.52e-01  
  4  +5.0515e-01  +2.8471e+00  2.34e+00  2.59e-02  1.90e+00  3.55e-03  6.03e-02  2.14e-01  
  5  +4.9855e-01  +3.2763e+00  2.78e+00  1.74e-02  1.30e+00  4.02e-03  4.03e-02  6.69e-01  
  6  +4.7857e-01  +2.3943e+00  1.92e+00  6.69e-03  5.10e-01  4.66e-03  1.59e-02  6.15e-01  
  7  +4.5475e-01  +2.0302e+00  1.58e+00  4.45e-03  3.37e-01  3.92e-03  1.09e-02  4.02e-01  
  8  +4.3751e-01  +1.6169e+00  1.18e+00  3.39e-03  2.53e-01  2.08e-03  8.69e-03  3.58e-01  
  9  +4.0751e-01  +1.0431e+00  6.36e-01  2.00e-03  1.46e-01  1.71e-05  5.71e-03  8.95e-01  
 10  +3.5887e-01  +5.7923e-01  2.20e-01  6.28e-04  4.48e-02  1.30e-05  2.06e-03  6.72e-01  
 11  +3.4487e-01  +5.0447e-01  1.60e-01  4.41e-04  3.14e-02  1.98e-05  1.53e-03  3.87e-01  
 12  +3.2461e-01  +3.9111e-01  6.65e-02  1.75e-04  1.25e-02  1.43e-05  6.65e-04  6.91e-01  
 13  +3.1694e-01  +3.5191e-01  3.50e-02  8.91e-05  6.38e-03  8.79e-06  3.51e-04  5.56e-01  
 14  +3.1289e-01  +3.3315e-01  2.03e-02  4.86e-05  3.54e-03  6.47e-06  1.96e-04  6.41e-01  
 15  +3.0822e-01  +3.1330e-01  5.08e-03  1.16e-05  8.49e-04  1.75e-06  4.92e-05  8.10e-01  
 16  +3.0668e-01  +3.0693e-01  2.48e-04  5.61e-07  4.11e-05  8.37e-08  2.43e-06  9.55e-01  
 17  +3.0660e-01  +3.0660e-01  2.54e-06  5.74e-09  4.20e-07  8.55e-10  2.49e-08  9.90e-01  
 18  +3.0660e-01  +3.0660e-01  2.54e-08  5.74e-11  4.21e-09  8.56e-12  2.49e-10  9.90e-01  
 19  +3.0660e-01  +3.0660e-01  2.54e-10  5.74e-13  4.21e-11  8.56e-14  2.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 29.8527ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:30 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:30 PM: Optimal value: 3.066e-01
(CVXPY) Sep 20 07:57:30 PM: Compilation took 7.522e-03 seconds
(CVXPY) Sep 20 07:57:30 PM: Solver (including time spent in interface) took 3.058e-02 seconds
Iteration: 21, Objective: 0.3066
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:30 PM: Your problem has 729 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:30 PM: Finished problem compilation (took 7.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 729
  constraints   = 1229
  nnz(P)        = 0
  nnz(A)        = 10264
  cones (total) = 1
    : Nonnegative = 1,  numel = 1229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9938e-01  +5.0177e+02  5.01e+02  9.60e-01  3.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.5864e-01  +1.0970e+02  1.09e+02  4.36e-01  2.09e+01  3.82e-03  5.76e-01  5.85e-01  
  2  +5.1622e-01  +1.3128e+01  1.26e+01  1.33e-01  8.30e+00  1.90e-02  2.48e-01  9.90e-01  
  3  +5.0464e-01  +2.4109e+00  1.91e+00  2.45e-02  1.79e+00  2.88e-03  5.85e-02  7.93e-01  
  4  +5.0373e-01  +2.6626e+00  2.16e+00  2.09e-02  1.55e+00  3.39e-03  4.88e-02  3.35e-01  
  5  +4.9244e-01  +2.8488e+00  2.36e+00  1.08e-02  8.18e-01  4.79e-03  2.51e-02  7.10e-01  
  6  +4.6354e-01  +1.8658e+00  1.40e+00  4.68e-03  3.53e-01  2.93e-03  1.14e-02  6.28e-01  
  7  +4.4737e-01  +1.6215e+00  1.17e+00  3.61e-03  2.70e-01  2.03e-03  9.12e-03  3.38e-01  
  8  +4.0306e-01  +9.6831e-01  5.65e-01  1.67e-03  1.22e-01  1.89e-05  4.73e-03  8.63e-01  
  9  +3.6258e-01  +6.2817e-01  2.66e-01  7.60e-04  5.41e-02  2.38e-05  2.44e-03  5.54e-01  
 10  +3.3831e-01  +4.8326e-01  1.45e-01  3.95e-04  2.81e-02  2.40e-05  1.39e-03  5.52e-01  
 11  +3.2243e-01  +3.9479e-01  7.24e-02  1.88e-04  1.33e-02  1.78e-05  7.10e-04  6.41e-01  
 12  +3.1347e-01  +3.4886e-01  3.54e-02  8.84e-05  6.34e-03  1.10e-05  3.48e-04  6.69e-01  
 13  +3.0760e-01  +3.2138e-01  1.38e-02  3.36e-05  2.42e-03  4.71e-06  1.37e-04  7.34e-01  
 14  +3.0395e-01  +3.0506e-01  1.11e-03  2.68e-06  1.93e-04  3.97e-07  1.13e-05  9.59e-01  
 15  +3.0361e-01  +3.0362e-01  1.74e-05  4.21e-08  3.03e-06  6.25e-09  1.79e-07  9.86e-01  
 16  +3.0360e-01  +3.0360e-01  1.74e-07  4.21e-10  3.03e-08  6.25e-11  1.79e-09  9.90e-01  
 17  +3.0360e-01  +3.0360e-01  1.74e-09  4.21e-12  3.03e-10  6.25e-13  1.79e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 29.7057ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:30 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:30 PM: Optimal value: 3.036e-01
(CVXPY) Sep 20 07:57:30 PM: Compilation took 7.509e-03 seconds
(CVXPY) Sep 20 07:57:30 PM: Solver (including time spent in interface) took 3.152e-02 seconds
Iteration: 22, Objective: 0.3036
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:30 PM: Your problem has 739 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:30 PM: Finished problem compilation (took 9.511e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:30 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 739
  constraints   = 1239
  nnz(P)        = 0
  nnz(A)        = 10398
  cones (total) = 1
    : Nonnegative = 1,  numel = 1239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +5.0174e+02  5.01e+02  9.60e-01  3.46e+01  1.00e+00  1.01e+00   ------   
  1  +5.5821e-01  +1.0967e+02  1.09e+02  4.37e-01  2.08e+01  3.82e-03  5.76e-01  5.85e-01  
  2  +5.1567e-01  +1.3174e+01  1.27e+01  1.32e-01  8.22e+00  1.91e-02  2.47e-01  9.90e-01  
  3  +5.0388e-01  +2.2244e+00  1.72e+00  2.15e-02  1.58e+00  2.76e-03  5.16e-02  8.18e-01  
  4  +4.9837e-01  +2.7606e+00  2.26e+00  1.45e-02  1.08e+00  3.96e-03  3.37e-02  6.78e-01  
  5  +4.7823e-01  +2.1838e+00  1.71e+00  5.85e-03  4.44e-01  5.07e-03  1.38e-02  6.18e-01  
  6  +4.5507e-01  +1.9169e+00  1.46e+00  4.10e-03  3.09e-01  4.43e-03  9.98e-03  3.54e-01  
  7  +4.3815e-01  +1.5820e+00  1.14e+00  3.29e-03  2.45e-01  2.50e-03  8.39e-03  2.97e-01  
  8  +3.9317e-01  +9.0104e-01  5.08e-01  1.53e-03  1.10e-01  2.08e-05  4.48e-03  8.42e-01  
  9  +3.4811e-01  +5.2539e-01  1.77e-01  5.09e-04  3.59e-02  1.88e-05  1.73e-03  6.82e-01  
 10  +3.3982e-01  +4.8547e-01  1.46e-01  4.05e-04  2.87e-02  2.25e-05  1.41e-03  3.05e-01  
 11  +3.2218e-01  +3.9298e-01  7.08e-02  1.86e-04  1.32e-02  1.44e-05  6.97e-04  5.90e-01  
 12  +3.1179e-01  +3.4207e-01  3.03e-02  7.59e-05  5.44e-03  7.70e-06  3.00e-04  6.61e-01  
 13  +3.0689e-01  +3.1899e-01  1.21e-02  2.97e-05  2.14e-03  4.09e-06  1.22e-04  8.16e-01  
 14  +3.0378e-01  +3.0568e-01  1.91e-03  4.63e-06  3.33e-04  6.76e-07  1.96e-05  9.02e-01  
 15  +3.0318e-01  +3.0325e-01  7.86e-05  1.91e-07  1.37e-05  2.81e-08  8.15e-07  9.69e-01  
 16  +3.0315e-01  +3.0315e-01  7.90e-07  1.91e-09  1.38e-07  2.82e-10  8.20e-09  9.90e-01  
 17  +3.0315e-01  +3.0315e-01  7.90e-09  1.92e-11  1.38e-09  2.83e-12  8.20e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 33.3289ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:30 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:30 PM: Optimal value: 3.032e-01
(CVXPY) Sep 20 07:57:30 PM: Compilation took 9.511e-03 seconds
(CVXPY) Sep 20 07:57:30 PM: Solver (including time spent in interface) took 3.455e-02 seconds
Iteration: 23, Objective: 0.3032
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:30 PM: Your problem has 749 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:30 PM: Finished problem compilation (took 8.517e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 749
  constraints   = 1249
  nnz(P)        = 0
  nnz(A)        = 10505
  cones (total) = 1
    : Nonnegative = 1,  numel = 1249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0179e+02  5.01e+02  9.60e-01  3.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.5610e-01  +1.0976e+02  1.09e+02  4.38e-01  2.07e+01  3.83e-03  5.76e-01  5.85e-01  
  2  +5.1434e-01  +1.3327e+01  1.28e+01  1.32e-01  8.15e+00  1.93e-02  2.46e-01  9.90e-01  
  3  +5.0290e-01  +2.3181e+00  1.82e+00  2.14e-02  1.57e+00  3.17e-03  5.10e-02  8.16e-01  
  4  +4.9368e-01  +2.5282e+00  2.03e+00  1.13e-02  8.49e-01  5.29e-03  2.62e-02  6.45e-01  
  5  +4.6582e-01  +1.8801e+00  1.41e+00  4.83e-03  3.65e-01  4.75e-03  1.16e-02  6.48e-01  
  6  +4.4439e-01  +1.6555e+00  1.21e+00  3.53e-03  2.64e-01  3.50e-03  8.78e-03  3.93e-01  
  7  +4.0758e-01  +1.0533e+00  6.46e-01  2.14e-03  1.55e-01  2.71e-05  6.06e-03  7.02e-01  
  8  +3.5641e-01  +5.9727e-01  2.41e-01  7.07e-04  4.99e-02  2.16e-05  2.29e-03  6.77e-01  
  9  +3.3980e-01  +5.1141e-01  1.72e-01  4.81e-04  3.40e-02  2.66e-05  1.64e-03  4.16e-01  
 10  +3.2154e-01  +4.1263e-01  9.11e-02  2.43e-04  1.71e-02  2.02e-05  8.91e-04  5.85e-01  
 11  +3.0828e-01  +3.4470e-01  3.64e-02  9.29e-05  6.60e-03  9.64e-06  3.63e-04  6.73e-01  
 12  +3.0330e-01  +3.2125e-01  1.79e-02  4.48e-05  3.19e-03  5.14e-06  1.81e-04  5.84e-01  
 13  +2.9977e-01  +3.0436e-01  4.59e-03  1.13e-05  8.03e-04  1.73e-06  4.74e-05  9.46e-01  
 14  +2.9858e-01  +2.9956e-01  9.84e-04  2.42e-06  1.71e-04  3.71e-07  1.03e-05  8.28e-01  
 15  +2.9825e-01  +2.9827e-01  1.31e-05  3.22e-08  2.29e-06  4.85e-09  1.38e-07  9.87e-01  
 16  +2.9825e-01  +2.9825e-01  1.31e-07  3.22e-10  2.29e-08  4.85e-11  1.38e-09  9.90e-01  
 17  +2.9825e-01  +2.9825e-01  1.31e-09  3.22e-12  2.29e-10  4.85e-13  1.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 38.6031ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:30 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:30 PM: Optimal value: 2.983e-01
(CVXPY) Sep 20 07:57:30 PM: Compilation took 8.517e-03 seconds
(CVXPY) Sep 20 07:57:30 PM: Solver (including time spent in interface) took 4.029e-02 seconds
Iteration: 24, Objective: 0.2983
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:30 PM: Your problem has 759 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:30 PM: Finished problem compilation (took 1.002e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 759
  constraints   = 1259
  nnz(P)        = 0
  nnz(A)        = 10573
  cones (total) = 1
    : Nonnegative = 1,  numel = 1259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0181e+02  5.01e+02  9.60e-01  3.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.5361e-01  +1.0997e+02  1.09e+02  4.38e-01  2.06e+01  3.83e-03  5.76e-01  5.84e-01  
  2  +5.1294e-01  +1.3521e+01  1.30e+01  1.31e-01  8.10e+00  1.96e-02  2.45e-01  9.90e-01  
  3  +5.0171e-01  +2.5039e+00  2.00e+00  2.22e-02  1.62e+00  3.75e-03  5.23e-02  8.10e-01  
  4  +4.8835e-01  +2.4635e+00  1.98e+00  9.75e-03  7.36e-01  6.61e-03  2.27e-02  6.43e-01  
  5  +4.6295e-01  +1.9587e+00  1.50e+00  5.46e-03  4.09e-01  5.06e-03  1.32e-02  5.27e-01  
  6  +4.3708e-01  +1.6151e+00  1.18e+00  3.58e-03  2.66e-01  3.46e-03  9.02e-03  4.42e-01  
  7  +3.9769e-01  +1.0262e+00  6.29e-01  2.05e-03  1.47e-01  2.86e-05  5.84e-03  7.85e-01  
  8  +3.5088e-01  +5.8578e-01  2.35e-01  7.00e-04  4.91e-02  1.78e-05  2.29e-03  6.48e-01  
  9  +3.3449e-01  +4.9923e-01  1.65e-01  4.67e-04  3.28e-02  2.34e-05  1.61e-03  4.28e-01  
 10  +3.1718e-01  +4.0343e-01  8.63e-02  2.34e-04  1.64e-02  1.76e-05  8.60e-04  5.83e-01  
 11  +3.0551e-01  +3.4358e-01  3.81e-02  9.87e-05  6.98e-03  9.37e-06  3.84e-04  6.35e-01  
 12  +2.9820e-01  +3.0899e-01  1.08e-02  2.68e-05  1.90e-03  3.24e-06  1.11e-04  8.14e-01  
 13  +2.9565e-01  +2.9764e-01  1.99e-03  4.89e-06  3.46e-04  6.04e-07  2.08e-05  8.35e-01  
 14  +2.9509e-01  +2.9523e-01  1.39e-04  3.41e-07  2.41e-05  4.20e-08  1.47e-06  9.34e-01  
 15  +2.9505e-01  +2.9505e-01  1.65e-06  4.05e-09  2.86e-07  4.99e-10  1.75e-08  9.88e-01  
 16  +2.9505e-01  +2.9505e-01  1.66e-08  4.08e-11  2.88e-09  5.02e-12  1.76e-10  9.90e-01  
 17  +2.9505e-01  +2.9505e-01  1.66e-10  4.08e-13  2.88e-11  5.03e-14  1.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 37.5847ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:30 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:30 PM: Optimal value: 2.951e-01
(CVXPY) Sep 20 07:57:30 PM: Compilation took 1.002e-02 seconds
(CVXPY) Sep 20 07:57:30 PM: Solver (including time spent in interface) took 3.970e-02 seconds
Iteration: 25, Objective: 0.2951
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:31 PM: Your problem has 769 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:31 PM: Finished problem compilation (took 9.505e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 769
  constraints   = 1269
  nnz(P)        = 0
  nnz(A)        = 10655
  cones (total) = 1
    : Nonnegative = 1,  numel = 1269

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0190e+02  5.01e+02  9.60e-01  3.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.5233e-01  +1.1003e+02  1.09e+02  4.39e-01  2.05e+01  3.83e-03  5.76e-01  5.84e-01  
  2  +5.1197e-01  +1.3593e+01  1.31e+01  1.31e-01  8.04e+00  1.97e-02  2.45e-01  9.90e-01  
  3  +5.0089e-01  +2.7137e+00  2.21e+00  2.36e-02  1.71e+00  4.25e-03  5.53e-02  7.97e-01  
  4  +4.8440e-01  +2.4775e+00  1.99e+00  9.36e-03  7.05e-01  7.34e-03  2.18e-02  6.50e-01  
  5  +4.5493e-01  +1.9634e+00  1.51e+00  5.23e-03  3.90e-01  5.49e-03  1.27e-02  5.33e-01  
  6  +4.3421e-01  +1.6303e+00  1.20e+00  3.82e-03  2.82e-01  3.21e-03  9.71e-03  4.00e-01  
  7  +3.8864e-01  +9.5797e-01  5.69e-01  1.80e-03  1.29e-01  2.88e-05  5.18e-03  8.29e-01  
  8  +3.4106e-01  +5.4348e-01  2.02e-01  6.02e-04  4.20e-02  1.86e-05  2.01e-03  6.63e-01  
  9  +3.2909e-01  +4.8660e-01  1.58e-01  4.47e-04  3.13e-02  2.34e-05  1.55e-03  3.61e-01  
 10  +3.1115e-01  +3.9259e-01  8.14e-02  2.19e-04  1.53e-02  1.59e-05  8.17e-04  5.63e-01  
 11  +3.0004e-01  +3.3880e-01  3.88e-02  9.89e-05  6.99e-03  9.50e-06  3.91e-04  6.23e-01  
 12  +2.9222e-01  +3.0183e-01  9.61e-03  2.38e-05  1.68e-03  3.19e-06  1.00e-04  8.93e-01  
 13  +2.8994e-01  +2.9191e-01  1.97e-03  4.85e-06  3.41e-04  6.80e-07  2.11e-05  8.63e-01  
 14  +2.8932e-01  +2.8939e-01  6.69e-05  1.64e-07  1.15e-05  2.34e-08  7.24e-07  9.82e-01  
 15  +2.8930e-01  +2.8930e-01  6.71e-07  1.65e-09  1.16e-07  2.35e-10  7.27e-09  9.90e-01  
 16  +2.8930e-01  +2.8930e-01  6.71e-09  1.65e-11  1.16e-09  2.35e-12  7.28e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 35.2026ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:31 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:31 PM: Optimal value: 2.893e-01
(CVXPY) Sep 20 07:57:31 PM: Compilation took 9.505e-03 seconds
(CVXPY) Sep 20 07:57:31 PM: Solver (including time spent in interface) took 3.660e-02 seconds
Iteration: 26, Objective: 0.2893
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:31 PM: Your problem has 779 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:31 PM: Finished problem compilation (took 9.468e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 779
  constraints   = 1279
  nnz(P)        = 0
  nnz(A)        = 10706
  cones (total) = 1
    : Nonnegative = 1,  numel = 1279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0190e+02  5.01e+02  9.60e-01  3.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.5180e-01  +1.1007e+02  1.10e+02  4.40e-01  2.04e+01  3.84e-03  5.76e-01  5.84e-01  
  2  +5.1145e-01  +1.3633e+01  1.31e+01  1.31e-01  7.99e+00  1.98e-02  2.45e-01  9.90e-01  
  3  +5.0020e-01  +2.6025e+00  2.10e+00  2.20e-02  1.60e+00  4.19e-03  5.17e-02  8.14e-01  
  4  +4.8315e-01  +2.3885e+00  1.91e+00  8.86e-03  6.66e-01  7.24e-03  2.07e-02  6.45e-01  
  5  +4.5354e-01  +1.9439e+00  1.49e+00  5.08e-03  3.78e-01  5.78e-03  1.24e-02  5.10e-01  
  6  +4.3321e-01  +1.6241e+00  1.19e+00  3.79e-03  2.78e-01  3.38e-03  9.64e-03  3.87e-01  
  7  +3.8624e-01  +9.2386e-01  5.38e-01  1.69e-03  1.20e-01  3.01e-05  4.89e-03  8.20e-01  
  8  +3.3996e-01  +5.4441e-01  2.04e-01  6.07e-04  4.22e-02  2.15e-05  2.03e-03  6.49e-01  
  9  +3.2808e-01  +4.8754e-01  1.59e-01  4.52e-04  3.16e-02  2.49e-05  1.56e-03  3.50e-01  
 10  +3.0927e-01  +3.8898e-01  7.97e-02  2.14e-04  1.50e-02  1.63e-05  8.00e-04  5.82e-01  
 11  +2.9951e-01  +3.4254e-01  4.30e-02  1.10e-04  7.72e-03  1.06e-05  4.30e-04  5.57e-01  
 12  +2.9094e-01  +3.0265e-01  1.17e-02  2.88e-05  2.03e-03  3.17e-06  1.20e-04  7.74e-01  
 13  +2.8862e-01  +2.9180e-01  3.18e-03  7.78e-06  5.47e-04  1.16e-06  3.34e-05  9.29e-01  
 14  +2.8758e-01  +2.8767e-01  8.77e-05  2.14e-07  1.50e-05  3.11e-08  9.32e-07  9.82e-01  
 15  +2.8755e-01  +2.8755e-01  8.81e-07  2.15e-09  1.51e-07  3.12e-10  9.37e-09  9.90e-01  
 16  +2.8755e-01  +2.8755e-01  8.81e-09  2.15e-11  1.51e-09  3.12e-12  9.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 33.5024ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:31 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:31 PM: Optimal value: 2.876e-01
(CVXPY) Sep 20 07:57:31 PM: Compilation took 9.468e-03 seconds
(CVXPY) Sep 20 07:57:31 PM: Solver (including time spent in interface) took 3.510e-02 seconds
Iteration: 27, Objective: 0.2876
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:31 PM: Your problem has 789 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:31 PM: Finished problem compilation (took 8.536e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 789
  constraints   = 1289
  nnz(P)        = 0
  nnz(A)        = 10774
  cones (total) = 1
    : Nonnegative = 1,  numel = 1289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0194e+02  5.01e+02  9.61e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.5136e-01  +1.1005e+02  1.09e+02  4.40e-01  2.03e+01  3.84e-03  5.75e-01  5.84e-01  
  2  +5.1094e-01  +1.3656e+01  1.31e+01  1.30e-01  7.92e+00  1.98e-02  2.44e-01  9.90e-01  
  3  +4.9954e-01  +2.5282e+00  2.03e+00  2.08e-02  1.51e+00  4.18e-03  4.90e-02  8.25e-01  
  4  +4.8162e-01  +2.3169e+00  1.84e+00  8.38e-03  6.28e-01  7.24e-03  1.96e-02  6.44e-01  
  5  +4.5371e-01  +1.9508e+00  1.50e+00  5.08e-03  3.77e-01  6.13e-03  1.24e-02  4.68e-01  
  6  +4.3276e-01  +1.6123e+00  1.18e+00  3.73e-03  2.74e-01  3.68e-03  9.49e-03  3.71e-01  
  7  +3.8482e-01  +9.1957e-01  5.35e-01  1.68e-03  1.19e-01  3.28e-05  4.84e-03  8.17e-01  
  8  +3.3891e-01  +5.4447e-01  2.06e-01  6.10e-04  4.23e-02  2.48e-05  2.03e-03  6.56e-01  
  9  +3.2711e-01  +4.8671e-01  1.60e-01  4.53e-04  3.15e-02  2.69e-05  1.56e-03  3.50e-01  
 10  +3.0866e-01  +3.8845e-01  7.98e-02  2.16e-04  1.50e-02  1.73e-05  8.01e-04  5.85e-01  
 11  +2.9907e-01  +3.4108e-01  4.20e-02  1.08e-04  7.60e-03  1.09e-05  4.21e-04  5.74e-01  
 12  +2.9074e-01  +3.0154e-01  1.08e-02  2.69e-05  1.89e-03  3.25e-06  1.11e-04  8.20e-01  
 13  +2.8821e-01  +2.9036e-01  2.15e-03  5.32e-06  3.73e-04  6.64e-07  2.27e-05  8.30e-01  
 14  +2.8758e-01  +2.8769e-01  1.04e-04  2.57e-07  1.80e-05  3.28e-08  1.11e-06  9.58e-01  
 15  +2.8755e-01  +2.8755e-01  1.05e-06  2.58e-09  1.81e-07  3.29e-10  1.12e-08  9.90e-01  
 16  +2.8755e-01  +2.8755e-01  1.05e-08  2.58e-11  1.81e-09  3.30e-12  1.12e-10  9.90e-01  
 17  +2.8755e-01  +2.8755e-01  1.05e-10  2.58e-13  1.81e-11  3.30e-14  1.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 38.3348ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:31 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:31 PM: Optimal value: 2.876e-01
(CVXPY) Sep 20 07:57:31 PM: Compilation took 8.536e-03 seconds
(CVXPY) Sep 20 07:57:31 PM: Solver (including time spent in interface) took 4.001e-02 seconds
Iteration: 28, Objective: 0.2876
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:31 PM: Your problem has 798 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:31 PM: Finished problem compilation (took 9.340e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 798
  constraints   = 1298
  nnz(P)        = 0
  nnz(A)        = 10840
  cones (total) = 1
    : Nonnegative = 1,  numel = 1298

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0194e+02  5.01e+02  9.61e-01  3.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.5072e-01  +1.1004e+02  1.09e+02  4.40e-01  2.02e+01  3.84e-03  5.75e-01  5.84e-01  
  2  +5.1031e-01  +1.3672e+01  1.32e+01  1.30e-01  7.85e+00  1.98e-02  2.44e-01  9.90e-01  
  3  +4.9877e-01  +2.5470e+00  2.05e+00  2.05e-02  1.48e+00  4.34e-03  4.84e-02  8.27e-01  
  4  +4.7924e-01  +2.2803e+00  1.80e+00  8.11e-03  6.05e-01  7.31e-03  1.91e-02  6.45e-01  
  5  +4.5200e-01  +1.9657e+00  1.51e+00  5.11e-03  3.78e-01  6.46e-03  1.25e-02  4.39e-01  
  6  +4.3139e-01  +1.6180e+00  1.19e+00  3.77e-03  2.75e-01  3.86e-03  9.62e-03  3.60e-01  
  7  +3.8418e-01  +9.4067e-01  5.56e-01  1.75e-03  1.23e-01  3.45e-05  5.07e-03  8.21e-01  
  8  +3.4338e-01  +5.9616e-01  2.53e-01  7.59e-04  5.25e-02  3.06e-05  2.49e-03  5.95e-01  
  9  +3.2132e-01  +4.6895e-01  1.48e-01  4.16e-04  2.88e-02  2.77e-05  1.47e-03  5.37e-01  
 10  +3.0314e-01  +3.6816e-01  6.50e-02  1.75e-04  1.21e-02  1.76e-05  6.68e-04  7.13e-01  
 11  +2.9662e-01  +3.3674e-01  4.01e-02  1.03e-04  7.20e-03  1.22e-05  4.06e-04  5.18e-01  
 12  +2.8859e-01  +2.9856e-01  9.97e-03  2.48e-05  1.73e-03  3.21e-06  1.04e-04  8.16e-01  
 13  +2.8625e-01  +2.8807e-01  1.82e-03  4.51e-06  3.14e-04  5.84e-07  1.95e-05  8.34e-01  
 14  +2.8571e-01  +2.8576e-01  4.36e-05  1.08e-07  7.50e-06  1.39e-08  4.72e-07  9.80e-01  
 15  +2.8570e-01  +2.8570e-01  4.36e-07  1.08e-09  7.50e-08  1.39e-10  4.73e-09  9.90e-01  
 16  +2.8570e-01  +2.8570e-01  4.36e-09  1.08e-11  7.50e-10  1.39e-12  4.73e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 36.9149ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:31 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:31 PM: Optimal value: 2.857e-01
(CVXPY) Sep 20 07:57:31 PM: Compilation took 9.340e-03 seconds
(CVXPY) Sep 20 07:57:31 PM: Solver (including time spent in interface) took 3.915e-02 seconds
Iteration: 29, Objective: 0.2857
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:31 PM: Your problem has 808 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:31 PM: Finished problem compilation (took 8.512e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 808
  constraints   = 1308
  nnz(P)        = 0
  nnz(A)        = 10905
  cones (total) = 1
    : Nonnegative = 1,  numel = 1308

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9924e-01  +5.0196e+02  5.01e+02  9.61e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.5003e-01  +1.1014e+02  1.10e+02  4.41e-01  2.01e+01  3.84e-03  5.75e-01  5.84e-01  
  2  +5.0982e-01  +1.3705e+01  1.32e+01  1.30e-01  7.80e+00  1.99e-02  2.44e-01  9.90e-01  
  3  +4.9809e-01  +2.4880e+00  1.99e+00  1.95e-02  1.41e+00  4.34e-03  4.63e-02  8.37e-01  
  4  +4.7771e-01  +2.2155e+00  1.74e+00  7.81e-03  5.81e-01  7.19e-03  1.85e-02  6.41e-01  
  5  +4.5038e-01  +1.9536e+00  1.50e+00  5.00e-03  3.69e-01  6.78e-03  1.22e-02  4.19e-01  
  6  +4.2839e-01  +1.5939e+00  1.17e+00  3.67e-03  2.66e-01  3.86e-03  9.39e-03  3.76e-01  
  7  +3.7515e-01  +8.3475e-01  4.60e-01  1.42e-03  9.94e-02  3.42e-05  4.20e-03  8.15e-01  
  8  +3.3306e-01  +5.3361e-01  2.01e-01  5.92e-04  4.06e-02  3.05e-05  2.00e-03  6.32e-01  
  9  +3.2153e-01  +4.7459e-01  1.53e-01  4.33e-04  2.98e-02  2.90e-05  1.52e-03  3.42e-01  
 10  +3.0506e-01  +3.8655e-01  8.15e-02  2.20e-04  1.52e-02  1.80e-05  8.30e-04  5.32e-01  
 11  +2.9488e-01  +3.3551e-01  4.06e-02  1.05e-04  7.29e-03  1.03e-05  4.16e-04  5.75e-01  
 12  +2.8825e-01  +3.0379e-01  1.55e-02  3.92e-05  2.73e-03  4.43e-06  1.62e-04  7.02e-01  
 13  +2.8495e-01  +2.8869e-01  3.74e-03  9.37e-06  6.52e-04  1.09e-06  4.00e-05  7.80e-01  
 14  +2.8432e-01  +2.8595e-01  1.63e-03  4.03e-06  2.81e-04  5.17e-07  1.74e-05  6.74e-01  
 15  +2.8384e-01  +2.8395e-01  1.12e-04  2.76e-07  1.93e-05  3.97e-08  1.20e-06  9.73e-01  
 16  +2.8380e-01  +2.8380e-01  1.15e-06  2.83e-09  1.97e-07  4.06e-10  1.23e-08  9.90e-01  
 17  +2.8380e-01  +2.8380e-01  1.15e-08  2.83e-11  1.98e-09  4.06e-12  1.23e-10  9.90e-01  
 18  +2.8380e-01  +2.8380e-01  1.15e-10  2.84e-13  1.98e-11  4.08e-14  1.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 39.728ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:31 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:31 PM: Optimal value: 2.838e-01
(CVXPY) Sep 20 07:57:31 PM: Compilation took 8.512e-03 seconds
(CVXPY) Sep 20 07:57:31 PM: Solver (including time spent in interface) took 4.204e-02 seconds
Iteration: 30, Objective: 0.2838
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:32 PM: Your problem has 818 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:32 PM: Finished problem compilation (took 9.501e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 818
  constraints   = 1318
  nnz(P)        = 0
  nnz(A)        = 10978
  cones (total) = 1
    : Nonnegative = 1,  numel = 1318

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9922e-01  +5.0201e+02  5.02e+02  9.61e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.4934e-01  +1.1019e+02  1.10e+02  4.42e-01  2.00e+01  3.84e-03  5.76e-01  5.84e-01  
  2  +5.0917e-01  +1.3790e+01  1.33e+01  1.29e-01  7.77e+00  2.00e-02  2.43e-01  9.90e-01  
  3  +4.9723e-01  +2.5372e+00  2.04e+00  1.95e-02  1.40e+00  4.57e-03  4.61e-02  8.38e-01  
  4  +4.7475e-01  +2.2178e+00  1.74e+00  7.55e-03  5.61e-01  7.57e-03  1.79e-02  6.46e-01  
  5  +4.4592e-01  +1.9568e+00  1.51e+00  4.82e-03  3.55e-01  7.29e-03  1.18e-02  4.11e-01  
  6  +4.0244e-01  +1.1302e+00  7.28e-01  2.34e-03  1.67e-01  6.47e-05  6.44e-03  7.43e-01  
  7  +3.5645e-01  +7.1257e-01  3.56e-01  1.09e-03  7.54e-02  5.42e-05  3.40e-03  5.83e-01  
  8  +3.1986e-01  +4.7066e-01  1.51e-01  4.35e-04  2.97e-02  3.09e-05  1.54e-03  6.43e-01  
  9  +3.0612e-01  +3.9813e-01  9.20e-02  2.54e-04  1.74e-02  2.24e-05  9.50e-04  4.96e-01  
 10  +2.9372e-01  +3.3531e-01  4.16e-02  1.09e-04  7.52e-03  1.24e-05  4.32e-04  7.00e-01  
 11  +2.8730e-01  +3.0533e-01  1.80e-02  4.59e-05  3.19e-03  5.58e-06  1.89e-04  6.11e-01  
 12  +2.8382e-01  +2.8949e-01  5.68e-03  1.42e-05  9.87e-04  1.90e-06  6.01e-05  7.89e-01  
 13  +2.8292e-01  +2.8568e-01  2.76e-03  6.79e-06  4.75e-04  9.68e-07  2.91e-05  6.23e-01  
 14  +2.8220e-01  +2.8277e-01  5.70e-04  1.38e-06  9.70e-05  2.04e-07  6.02e-06  8.58e-01  
 15  +2.8200e-01  +2.8201e-01  7.59e-06  1.84e-08  1.29e-06  2.71e-09  8.03e-08  9.88e-01  
 16  +2.8200e-01  +2.8200e-01  7.60e-08  1.84e-10  1.29e-08  2.72e-11  8.04e-10  9.90e-01  
 17  +2.8200e-01  +2.8200e-01  7.61e-10  1.85e-12  1.29e-10  2.73e-13  8.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 37.7112ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:32 PM: Optimal value: 2.820e-01
(CVXPY) Sep 20 07:57:32 PM: Compilation took 9.501e-03 seconds
(CVXPY) Sep 20 07:57:32 PM: Solver (including time spent in interface) took 4.013e-02 seconds
Iteration: 31, Objective: 0.2820
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:32 PM: Your problem has 823 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:32 PM: Finished problem compilation (took 8.196e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 823
  constraints   = 1323
  nnz(P)        = 0
  nnz(A)        = 10999
  cones (total) = 1
    : Nonnegative = 1,  numel = 1323

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9922e-01  +5.0201e+02  5.02e+02  9.61e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.4874e-01  +1.1020e+02  1.10e+02  4.42e-01  1.99e+01  3.85e-03  5.75e-01  5.84e-01  
  2  +5.0871e-01  +1.3819e+01  1.33e+01  1.29e-01  7.74e+00  2.01e-02  2.43e-01  9.90e-01  
  3  +4.9647e-01  +2.4375e+00  1.94e+00  1.82e-02  1.31e+00  4.53e-03  4.32e-02  8.51e-01  
  4  +4.7270e-01  +2.1335e+00  1.66e+00  7.07e-03  5.24e-01  7.53e-03  1.68e-02  6.47e-01  
  5  +4.4445e-01  +1.9127e+00  1.47e+00  4.62e-03  3.40e-01  7.43e-03  1.13e-02  3.94e-01  
  6  +4.0123e-01  +1.1235e+00  7.22e-01  2.36e-03  1.67e-01  6.39e-05  6.52e-03  7.20e-01  
  7  +3.5520e-01  +7.0996e-01  3.55e-01  1.09e-03  7.53e-02  5.52e-05  3.41e-03  5.94e-01  
  8  +3.1877e-01  +4.7046e-01  1.52e-01  4.38e-04  2.99e-02  3.12e-05  1.55e-03  6.40e-01  
  9  +3.0559e-01  +4.0038e-01  9.48e-02  2.63e-04  1.80e-02  2.30e-05  9.81e-04  4.81e-01  
 10  +2.9255e-01  +3.3352e-01  4.10e-02  1.08e-04  7.43e-03  1.28e-05  4.28e-04  7.50e-01  
 11  +2.8646e-01  +3.0506e-01  1.86e-02  4.77e-05  3.31e-03  5.96e-06  1.96e-04  5.94e-01  
 12  +2.8281e-01  +2.8854e-01  5.73e-03  1.44e-05  1.00e-03  1.89e-06  6.13e-05  7.46e-01  
 13  +2.8194e-01  +2.8481e-01  2.87e-03  7.11e-06  4.96e-04  9.84e-07  3.06e-05  5.98e-01  
 14  +2.8125e-01  +2.8198e-01  7.30e-04  1.78e-06  1.25e-04  2.56e-07  7.83e-06  8.05e-01  
 15  +2.8100e-01  +2.8102e-01  1.35e-05  3.27e-08  2.29e-06  4.74e-09  1.45e-07  9.86e-01  
 16  +2.8100e-01  +2.8100e-01  1.35e-07  3.28e-10  2.29e-08  4.74e-11  1.45e-09  9.90e-01  
 17  +2.8100e-01  +2.8100e-01  1.35e-09  3.29e-12  2.30e-10  4.77e-13  1.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 36.8868ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:32 PM: Optimal value: 2.810e-01
(CVXPY) Sep 20 07:57:32 PM: Compilation took 8.196e-03 seconds
(CVXPY) Sep 20 07:57:32 PM: Solver (including time spent in interface) took 3.806e-02 seconds
Iteration: 32, Objective: 0.2810
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:32 PM: Your problem has 833 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:32 PM: Finished problem compilation (took 8.528e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 833
  constraints   = 1333
  nnz(P)        = 0
  nnz(A)        = 11073
  cones (total) = 1
    : Nonnegative = 1,  numel = 1333

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9919e-01  +5.0196e+02  5.01e+02  9.61e-01  3.35e+01  1.00e+00  1.01e+00   ------   
  1  +5.4744e-01  +1.1037e+02  1.10e+02  4.44e-01  1.98e+01  3.85e-03  5.76e-01  5.83e-01  
  2  +5.0758e-01  +1.3924e+01  1.34e+01  1.29e-01  7.72e+00  2.03e-02  2.44e-01  9.90e-01  
  3  +4.9532e-01  +2.4710e+00  1.98e+00  1.80e-02  1.30e+00  4.73e-03  4.28e-02  8.52e-01  
  4  +4.6936e-01  +2.0884e+00  1.62e+00  6.82e-03  5.04e-01  7.52e-03  1.63e-02  6.52e-01  
  5  +4.4117e-01  +1.9061e+00  1.46e+00  4.60e-03  3.37e-01  7.36e-03  1.13e-02  3.90e-01  
  6  +3.9982e-01  +1.1482e+00  7.48e-01  2.47e-03  1.74e-01  6.26e-05  6.84e-03  7.18e-01  
  7  +3.5323e-01  +7.0445e-01  3.51e-01  1.08e-03  7.44e-02  4.60e-05  3.39e-03  5.88e-01  
  8  +3.1618e-01  +4.6529e-01  1.49e-01  4.31e-04  2.93e-02  2.89e-05  1.53e-03  6.52e-01  
  9  +3.0363e-01  +3.9876e-01  9.51e-02  2.65e-04  1.81e-02  2.19e-05  9.85e-04  4.62e-01  
 10  +2.9056e-01  +3.3127e-01  4.07e-02  1.08e-04  7.44e-03  1.26e-05  4.28e-04  7.71e-01  
 11  +2.8478e-01  +3.0425e-01  1.95e-02  5.05e-05  3.49e-03  6.23e-06  2.07e-04  5.78e-01  
 12  +2.8095e-01  +2.8679e-01  5.85e-03  1.49e-05  1.03e-03  1.92e-06  6.32e-05  7.57e-01  
 13  +2.8008e-01  +2.8307e-01  2.98e-03  7.48e-06  5.20e-04  1.02e-06  3.22e-05  5.93e-01  
 14  +2.7938e-01  +2.8020e-01  8.19e-04  2.02e-06  1.41e-04  2.85e-07  8.89e-06  7.90e-01  
 15  +2.7911e-01  +2.7912e-01  1.60e-05  3.92e-08  2.73e-06  5.61e-09  1.74e-07  9.87e-01  
 16  +2.7910e-01  +2.7910e-01  1.60e-07  3.93e-10  2.73e-08  5.61e-11  1.74e-09  9.90e-01  
 17  +2.7910e-01  +2.7910e-01  1.60e-09  3.94e-12  2.74e-10  5.64e-13  1.75e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 40.9394ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:32 PM: Optimal value: 2.791e-01
(CVXPY) Sep 20 07:57:32 PM: Compilation took 8.528e-03 seconds
(CVXPY) Sep 20 07:57:32 PM: Solver (including time spent in interface) took 4.323e-02 seconds
Iteration: 33, Objective: 0.2791
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:32 PM: Your problem has 836 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:32 PM: Finished problem compilation (took 1.099e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 836
  constraints   = 1336
  nnz(P)        = 0
  nnz(A)        = 11109
  cones (total) = 1
    : Nonnegative = 1,  numel = 1336

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9919e-01  +5.0196e+02  5.01e+02  9.61e-01  3.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.4743e-01  +1.1036e+02  1.10e+02  4.44e-01  1.98e+01  3.85e-03  5.76e-01  5.83e-01  
  2  +5.0750e-01  +1.3930e+01  1.34e+01  1.29e-01  7.71e+00  2.03e-02  2.44e-01  9.90e-01  
  3  +4.9514e-01  +2.4929e+00  2.00e+00  1.81e-02  1.30e+00  4.80e-03  4.31e-02  8.52e-01  
  4  +4.6917e-01  +2.1023e+00  1.63e+00  6.90e-03  5.09e-01  7.56e-03  1.65e-02  6.48e-01  
  5  +4.4022e-01  +1.9131e+00  1.47e+00  4.60e-03  3.37e-01  7.44e-03  1.13e-02  3.95e-01  
  6  +4.0123e-01  +1.1762e+00  7.75e-01  2.60e-03  1.83e-01  6.20e-05  7.20e-03  7.06e-01  
  7  +3.4900e-01  +6.5865e-01  3.10e-01  9.50e-04  6.51e-02  4.02e-05  3.01e-03  6.60e-01  
  8  +3.1670e-01  +4.7153e-01  1.55e-01  4.45e-04  3.02e-02  3.13e-05  1.57e-03  6.06e-01  
  9  +3.0288e-01  +3.9619e-01  9.33e-02  2.59e-04  1.76e-02  2.23e-05  9.64e-04  4.90e-01  
 10  +2.8968e-01  +3.2683e-01  3.71e-02  9.87e-05  6.76e-03  1.23e-05  3.92e-04  8.23e-01  
 11  +2.8450e-01  +3.0280e-01  1.83e-02  4.75e-05  3.28e-03  6.20e-06  1.95e-04  5.74e-01  
 12  +2.8081e-01  +2.8619e-01  5.38e-03  1.37e-05  9.48e-04  1.83e-06  5.83e-05  7.48e-01  
 13  +2.8007e-01  +2.8302e-01  2.94e-03  7.38e-06  5.13e-04  1.04e-06  3.18e-05  5.76e-01  
 14  +2.7933e-01  +2.8001e-01  6.80e-04  1.68e-06  1.17e-04  2.40e-07  7.40e-06  8.09e-01  
 15  +2.7910e-01  +2.7911e-01  1.11e-05  2.73e-08  1.90e-06  3.91e-09  1.21e-07  9.86e-01  
 16  +2.7910e-01  +2.7910e-01  1.11e-07  2.74e-10  1.91e-08  3.92e-11  1.22e-09  9.90e-01  
 17  +2.7910e-01  +2.7910e-01  1.12e-09  2.75e-12  1.92e-10  3.94e-13  1.23e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 41.0497ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:32 PM: Optimal value: 2.791e-01
(CVXPY) Sep 20 07:57:32 PM: Compilation took 1.099e-02 seconds
(CVXPY) Sep 20 07:57:32 PM: Solver (including time spent in interface) took 4.263e-02 seconds
Iteration: 34, Objective: 0.2791
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:32 PM: Your problem has 846 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:32 PM: Finished problem compilation (took 8.337e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 846
  constraints   = 1346
  nnz(P)        = 0
  nnz(A)        = 11164
  cones (total) = 1
    : Nonnegative = 1,  numel = 1346

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9919e-01  +5.0196e+02  5.01e+02  9.61e-01  3.33e+01  1.00e+00  1.01e+00   ------   
  1  +5.4759e-01  +1.1025e+02  1.10e+02  4.43e-01  1.97e+01  3.85e-03  5.75e-01  5.84e-01  
  2  +5.0752e-01  +1.3858e+01  1.34e+01  1.29e-01  7.60e+00  2.02e-02  2.43e-01  9.90e-01  
  3  +4.9506e-01  +2.5932e+00  2.10e+00  1.90e-02  1.36e+00  4.95e-03  4.52e-02  8.42e-01  
  4  +4.6924e-01  +2.1496e+00  1.68e+00  7.22e-03  5.29e-01  7.50e-03  1.74e-02  6.45e-01  
  5  +4.3837e-01  +1.9416e+00  1.50e+00  4.66e-03  3.39e-01  7.60e-03  1.15e-02  4.07e-01  
  6  +4.0452e-01  +1.2298e+00  8.25e-01  2.85e-03  2.00e-01  6.15e-05  7.87e-03  6.81e-01  
  7  +3.4816e-01  +6.4784e-01  3.00e-01  9.16e-04  6.25e-02  3.61e-05  2.90e-03  6.97e-01  
  8  +3.1940e-01  +4.9264e-01  1.73e-01  4.97e-04  3.37e-02  3.33e-05  1.72e-03  5.41e-01  
  9  +3.0446e-01  +4.1100e-01  1.07e-01  2.95e-04  2.01e-02  2.37e-05  1.09e-03  4.56e-01  
 10  +2.9201e-01  +3.4538e-01  5.34e-02  1.43e-04  9.77e-03  1.31e-05  5.57e-04  5.53e-01  
 11  +2.8450e-01  +3.0796e-01  2.35e-02  6.13e-05  4.20e-03  6.31e-06  2.49e-04  6.23e-01  
 12  +2.7994e-01  +2.8586e-01  5.92e-03  1.53e-05  1.05e-03  1.70e-06  6.47e-05  7.97e-01  
 13  +2.7896e-01  +2.8141e-01  2.46e-03  6.31e-06  4.32e-04  7.47e-07  2.70e-05  6.53e-01  
 14  +2.7837e-01  +2.7889e-01  5.19e-04  1.32e-06  9.04e-05  1.69e-07  5.73e-06  8.62e-01  
 15  +2.7821e-01  +2.7823e-01  2.06e-05  5.21e-08  3.57e-06  6.90e-09  2.28e-07  9.73e-01  
 16  +2.7820e-01  +2.7820e-01  2.07e-07  5.23e-10  3.58e-08  6.92e-11  2.29e-09  9.90e-01  
 17  +2.7820e-01  +2.7820e-01  2.07e-09  5.23e-12  3.58e-10  6.94e-13  2.29e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 42.7351ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:32 PM: Optimal value: 2.782e-01
(CVXPY) Sep 20 07:57:32 PM: Compilation took 8.337e-03 seconds
(CVXPY) Sep 20 07:57:32 PM: Solver (including time spent in interface) took 4.461e-02 seconds
Iteration: 35, Objective: 0.2782
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:32 PM: Your problem has 850 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:33 PM: Finished problem compilation (took 9.168e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 850
  constraints   = 1350
  nnz(P)        = 0
  nnz(A)        = 11202
  cones (total) = 1
    : Nonnegative = 1,  numel = 1350

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9919e-01  +5.0198e+02  5.01e+02  9.62e-01  3.33e+01  1.00e+00  1.01e+00   ------   
  1  +5.4737e-01  +1.1027e+02  1.10e+02  4.43e-01  1.96e+01  3.85e-03  5.75e-01  5.84e-01  
  2  +5.0714e-01  +1.3859e+01  1.34e+01  1.28e-01  7.58e+00  2.02e-02  2.43e-01  9.90e-01  
  3  +4.9452e-01  +2.5272e+00  2.03e+00  1.82e-02  1.30e+00  4.92e-03  4.35e-02  8.49e-01  
  4  +4.6738e-01  +2.0806e+00  1.61e+00  6.87e-03  5.02e-01  7.40e-03  1.66e-02  6.51e-01  
  5  +4.3945e-01  +1.9231e+00  1.48e+00  4.67e-03  3.39e-01  7.55e-03  1.16e-02  3.78e-01  
  6  +4.0058e-01  +1.1712e+00  7.71e-01  2.59e-03  1.81e-01  6.34e-05  7.18e-03  7.04e-01  
  7  +3.5303e-01  +7.1296e-01  3.60e-01  1.11e-03  7.61e-02  4.68e-05  3.49e-03  5.97e-01  
  8  +3.1293e-01  +4.5027e-01  1.37e-01  3.97e-04  2.68e-02  2.77e-05  1.42e-03  7.00e-01  
  9  +3.0454e-01  +4.0797e-01  1.03e-01  2.92e-04  1.97e-02  2.44e-05  1.08e-03  3.72e-01  
 10  +2.9053e-01  +3.3650e-01  4.60e-02  1.24e-04  8.43e-03  1.25e-05  4.86e-04  6.47e-01  
 11  +2.8417e-01  +3.0569e-01  2.15e-02  5.65e-05  3.86e-03  6.24e-06  2.30e-04  5.99e-01  
 12  +2.7964e-01  +2.8436e-01  4.72e-03  1.22e-05  8.37e-04  1.44e-06  5.20e-05  8.35e-01  
 13  +2.7885e-01  +2.8091e-01  2.06e-03  5.28e-06  3.61e-04  6.65e-07  2.26e-05  6.55e-01  
 14  +2.7830e-01  +2.7858e-01  2.86e-04  7.27e-07  4.98e-05  9.56e-08  3.17e-06  9.10e-01  
 15  +2.7820e-01  +2.7821e-01  5.90e-06  1.50e-08  1.02e-06  2.00e-09  6.56e-08  9.85e-01  
 16  +2.7820e-01  +2.7820e-01  5.92e-08  1.50e-10  1.03e-08  2.01e-11  6.58e-10  9.90e-01  
 17  +2.7820e-01  +2.7820e-01  6.03e-10  1.53e-12  1.05e-10  2.05e-13  6.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 41.6653ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:33 PM: Optimal value: 2.782e-01
(CVXPY) Sep 20 07:57:33 PM: Compilation took 9.168e-03 seconds
(CVXPY) Sep 20 07:57:33 PM: Solver (including time spent in interface) took 4.257e-02 seconds
Iteration: 36, Objective: 0.2782
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:33 PM: Your problem has 852 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:33 PM: Finished problem compilation (took 9.380e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 852
  constraints   = 1352
  nnz(P)        = 0
  nnz(A)        = 11227
  cones (total) = 1
    : Nonnegative = 1,  numel = 1352

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9919e-01  +5.0199e+02  5.01e+02  9.62e-01  3.33e+01  1.00e+00  1.01e+00   ------   
  1  +5.4731e-01  +1.1028e+02  1.10e+02  4.44e-01  1.96e+01  3.85e-03  5.75e-01  5.83e-01  
  2  +5.0705e-01  +1.3867e+01  1.34e+01  1.28e-01  7.57e+00  2.02e-02  2.43e-01  9.90e-01  
  3  +4.9441e-01  +2.5755e+00  2.08e+00  1.86e-02  1.33e+00  5.00e-03  4.44e-02  8.46e-01  
  4  +4.6756e-01  +2.1067e+00  1.64e+00  7.05e-03  5.15e-01  7.38e-03  1.70e-02  6.47e-01  
  5  +4.3891e-01  +1.9421e+00  1.50e+00  4.72e-03  3.42e-01  7.61e-03  1.17e-02  3.85e-01  
  6  +4.0188e-01  +1.2017e+00  8.00e-01  2.71e-03  1.90e-01  6.35e-05  7.51e-03  7.01e-01  
  7  +3.5126e-01  +6.9281e-01  3.42e-01  1.05e-03  7.19e-02  4.29e-05  3.32e-03  6.34e-01  
  8  +3.1423e-01  +4.6198e-01  1.48e-01  4.26e-04  2.88e-02  3.02e-05  1.52e-03  6.67e-01  
  9  +3.0442e-01  +4.1046e-01  1.06e-01  2.98e-04  2.02e-02  2.50e-05  1.10e-03  3.89e-01  
 10  +2.9051e-01  +3.3734e-01  4.68e-02  1.26e-04  8.59e-03  1.21e-05  4.97e-04  6.08e-01  
 11  +2.8417e-01  +3.0606e-01  2.19e-02  5.75e-05  3.93e-03  6.13e-06  2.34e-04  6.07e-01  
 12  +2.7970e-01  +2.8472e-01  5.02e-03  1.30e-05  8.90e-04  1.49e-06  5.52e-05  8.25e-01  
 13  +2.7891e-01  +2.8121e-01  2.30e-03  5.90e-06  4.03e-04  7.24e-07  2.53e-05  6.33e-01  
 14  +2.7833e-01  +2.7875e-01  4.14e-04  1.06e-06  7.21e-05  1.36e-07  4.60e-06  8.75e-01  
 15  +2.7821e-01  +2.7823e-01  1.98e-05  5.02e-08  3.43e-06  7.09e-09  2.20e-07  9.90e-01  
 16  +2.7820e-01  +2.7820e-01  1.98e-07  5.04e-10  3.45e-08  7.12e-11  2.21e-09  9.90e-01  
 17  +2.7820e-01  +2.7820e-01  1.99e-09  5.05e-12  3.45e-10  7.14e-13  2.21e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 42.55ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:33 PM: Optimal value: 2.782e-01
(CVXPY) Sep 20 07:57:33 PM: Compilation took 9.380e-03 seconds
(CVXPY) Sep 20 07:57:33 PM: Solver (including time spent in interface) took 4.387e-02 seconds
Iteration: 37, Objective: 0.2782
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:33 PM: Your problem has 854 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:33 PM: Finished problem compilation (took 1.157e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 854
  constraints   = 1354
  nnz(P)        = 0
  nnz(A)        = 11248
  cones (total) = 1
    : Nonnegative = 1,  numel = 1354

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9919e-01  +5.0200e+02  5.01e+02  9.62e-01  3.32e+01  1.00e+00  1.01e+00   ------   
  1  +5.4725e-01  +1.1029e+02  1.10e+02  4.44e-01  1.96e+01  3.85e-03  5.75e-01  5.83e-01  
  2  +5.0698e-01  +1.3868e+01  1.34e+01  1.28e-01  7.56e+00  2.02e-02  2.43e-01  9.90e-01  
  3  +4.9427e-01  +2.5590e+00  2.06e+00  1.84e-02  1.31e+00  4.99e-03  4.40e-02  8.48e-01  
  4  +4.6709e-01  +2.0892e+00  1.62e+00  6.96e-03  5.08e-01  7.35e-03  1.68e-02  6.48e-01  
  5  +4.3869e-01  +1.9334e+00  1.49e+00  4.69e-03  3.40e-01  7.61e-03  1.16e-02  3.81e-01  
  6  +4.0183e-01  +1.2010e+00  7.99e-01  2.72e-03  1.90e-01  6.31e-05  7.54e-03  6.96e-01  
  7  +3.5132e-01  +6.9514e-01  3.44e-01  1.06e-03  7.24e-02  4.39e-05  3.35e-03  6.35e-01  
  8  +3.1446e-01  +4.6379e-01  1.49e-01  4.32e-04  2.92e-02  3.05e-05  1.54e-03  6.65e-01  
  9  +3.0445e-01  +4.1097e-01  1.07e-01  3.00e-04  2.03e-02  2.51e-05  1.11e-03  3.91e-01  
 10  +2.9038e-01  +3.3675e-01  4.64e-02  1.25e-04  8.51e-03  1.20e-05  4.93e-04  6.16e-01  
 11  +2.8431e-01  +3.0666e-01  2.23e-02  5.88e-05  4.01e-03  6.35e-06  2.40e-04  6.10e-01  
 12  +2.7972e-01  +2.8479e-01  5.07e-03  1.32e-05  9.00e-04  1.52e-06  5.59e-05  8.24e-01  
 13  +2.7892e-01  +2.8125e-01  2.33e-03  5.99e-06  4.09e-04  7.37e-07  2.57e-05  6.30e-01  
 14  +2.7834e-01  +2.7877e-01  4.29e-04  1.09e-06  7.48e-05  1.41e-07  4.77e-06  8.69e-01  
 15  +2.7821e-01  +2.7824e-01  2.65e-05  6.73e-08  4.60e-06  9.54e-09  2.95e-07  9.90e-01  
 16  +2.7820e-01  +2.7820e-01  2.67e-07  6.78e-10  4.63e-08  9.62e-11  2.97e-09  9.90e-01  
 17  +2.7820e-01  +2.7820e-01  2.67e-09  6.79e-12  4.64e-10  9.64e-13  2.98e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 44.308ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:33 PM: Optimal value: 2.782e-01
(CVXPY) Sep 20 07:57:33 PM: Compilation took 1.157e-02 seconds
(CVXPY) Sep 20 07:57:33 PM: Solver (including time spent in interface) took 4.621e-02 seconds
FULL MODEL:
  Accruacy: 0.677
  Our objective: 0.354

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x7 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.018)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x7 = 1)                                             <-- (term's our objective: 0.014)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.006)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.01)
 OR (x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.012)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.01)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 11.492555379867554
Best over terms:
  Our final objective: 0.02400000000000002
    Its accruacy: 0.512
    Its hamming distance: 3
  Shortest hamming distance: 3
    Its our objective: 0.02400000000000002
  Highest accruacy: 0.512
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

