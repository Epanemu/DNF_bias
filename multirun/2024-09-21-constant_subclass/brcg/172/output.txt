Command:
python test_script.py -s constant_subclass -d 5 -n 100 --seed 73 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.06
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 5.

Computed total variation: 0.33999999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:45 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:45 PM: Finished problem compilation (took 4.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 411
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9642e-01  +5.1125e+01  5.06e+01  8.62e-01  8.49e+00  1.00e+00  1.04e+00   ------   
  1  +5.9373e-01  +1.0468e+01  9.87e+00  3.18e-01  4.68e+00  3.96e-03  5.23e-01  6.47e-01  
  2  +5.2531e-01  +1.4701e+00  9.45e-01  6.28e-02  1.11e+00  1.16e-02  1.61e-01  9.80e-01  
  3  +5.1576e-01  +1.2717e+00  7.56e-01  4.07e-02  7.30e-01  1.20e-02  1.09e-01  3.71e-01  
  4  +4.9201e-01  +1.0157e+00  5.24e-01  1.77e-02  3.24e-01  9.76e-03  5.26e-02  7.07e-01  
  5  +4.6337e-01  +6.9131e-01  2.28e-01  6.51e-03  1.19e-01  3.39e-03  2.18e-02  6.30e-01  
  6  +4.3641e-01  +4.9334e-01  5.69e-02  1.43e-03  2.58e-02  6.12e-04  6.10e-03  8.54e-01  
  7  +4.2303e-01  +4.3380e-01  1.08e-02  2.39e-04  4.30e-03  9.41e-05  1.21e-03  8.30e-01  
  8  +4.2014e-01  +4.2030e-01  1.52e-04  3.33e-06  6.00e-05  1.01e-06  1.74e-05  9.90e-01  
  9  +4.2010e-01  +4.2010e-01  1.52e-06  3.33e-08  6.00e-07  1.01e-08  1.74e-07  9.90e-01  
 10  +4.2010e-01  +4.2010e-01  1.52e-08  3.33e-10  6.00e-09  1.01e-10  1.75e-09  9.90e-01  
 11  +4.2010e-01  +4.2010e-01  1.52e-10  3.33e-12  6.00e-11  1.01e-12  1.75e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 344.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:45 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:45 PM: Optimal value: 4.201e-01
(CVXPY) Sep 20 07:30:45 PM: Compilation took 4.999e-03 seconds
(CVXPY) Sep 20 07:30:45 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:45 PM: Your problem has 71 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:45 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 527
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9289e-01  +5.1298e+01  5.08e+01  8.69e-01  8.81e+00  1.00e+00  1.06e+00   ------   
  1  +5.7543e-01  +1.0653e+01  1.01e+01  3.37e-01  4.82e+00  3.93e-03  5.43e-01  6.36e-01  
  2  +5.1328e-01  +1.6140e+00  1.10e+00  6.84e-02  1.25e+00  1.34e-02  1.74e-01  9.68e-01  
  3  +4.8260e-01  +1.4067e+00  9.24e-01  3.47e-02  6.49e-01  1.53e-02  9.55e-02  5.58e-01  
  4  +4.3902e-01  +8.3758e-01  3.99e-01  1.20e-02  2.25e-01  6.76e-03  3.82e-02  6.24e-01  
  5  +4.1486e-01  +6.3414e-01  2.19e-01  5.91e-03  1.09e-01  3.72e-03  2.09e-02  5.11e-01  
  6  +3.9491e-01  +4.8914e-01  9.42e-02  2.32e-03  4.25e-02  1.44e-03  8.95e-03  6.93e-01  
  7  +3.8648e-01  +4.4647e-01  6.00e-02  1.27e-03  2.34e-02  1.03e-03  4.87e-03  4.93e-01  
  8  +3.7931e-01  +4.0461e-01  2.53e-02  5.65e-04  1.04e-02  9.02e-05  2.28e-03  9.90e-01  
  9  +3.7076e-01  +3.7225e-01  1.49e-03  3.14e-05  5.78e-04  4.32e-06  1.31e-04  9.49e-01  
 10  +3.7030e-01  +3.7032e-01  1.50e-05  3.15e-07  5.79e-06  4.32e-08  1.31e-06  9.90e-01  
 11  +3.7030e-01  +3.7030e-01  1.50e-07  3.15e-09  5.79e-08  4.32e-10  1.31e-08  9.90e-01  
 12  +3.7030e-01  +3.7030e-01  1.50e-09  3.15e-11  5.79e-10  4.32e-12  1.31e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 416.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:45 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:45 PM: Optimal value: 3.703e-01
(CVXPY) Sep 20 07:30:45 PM: Compilation took 3.000e-03 seconds
(CVXPY) Sep 20 07:30:45 PM: Solver (including time spent in interface) took 9.997e-04 seconds
Iteration: 2, Objective: 0.3703
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:45 PM: Your problem has 76 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:45 PM: Finished problem compilation (took 3.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 76
  constraints   = 126
  nnz(P)        = 0
  nnz(A)        = 571
  cones (total) = 1
    : Nonnegative = 1,  numel = 126

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9129e-01  +5.1360e+01  5.09e+01  8.72e-01  8.84e+00  1.00e+00  1.06e+00   ------   
  1  +5.6428e-01  +1.0793e+01  1.02e+01  3.49e-01  4.92e+00  3.89e-03  5.57e-01  6.26e-01  
  2  +5.0786e-01  +1.6990e+00  1.19e+00  7.36e-02  1.34e+00  1.45e-02  1.85e-01  9.64e-01  
  3  +4.6626e-01  +1.3232e+00  8.57e-01  3.13e-02  5.88e-01  1.50e-02  8.60e-02  6.38e-01  
  4  +4.1496e-01  +7.9865e-01  3.84e-01  1.03e-02  1.94e-01  7.28e-03  3.26e-02  6.66e-01  
  5  +3.8293e-01  +5.5801e-01  1.75e-01  4.59e-03  8.46e-02  2.55e-03  1.65e-02  5.81e-01  
  6  +3.5504e-01  +3.7331e-01  1.83e-02  4.80e-04  8.72e-03  1.34e-04  2.03e-03  9.08e-01  
  7  +3.5068e-01  +3.5169e-01  1.01e-03  2.67e-05  4.84e-04  6.41e-06  1.17e-04  9.51e-01  
  8  +3.5042e-01  +3.5050e-01  7.99e-05  2.10e-06  3.81e-05  4.31e-07  9.36e-06  9.49e-01  
  9  +3.5040e-01  +3.5040e-01  8.66e-07  2.28e-08  4.13e-07  4.64e-09  1.01e-07  9.89e-01  
 10  +3.5040e-01  +3.5040e-01  8.67e-09  2.28e-10  4.13e-09  4.64e-11  1.01e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 412.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:45 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:45 PM: Optimal value: 3.504e-01
(CVXPY) Sep 20 07:30:45 PM: Compilation took 3.001e-03 seconds
(CVXPY) Sep 20 07:30:45 PM: Solver (including time spent in interface) took 9.999e-04 seconds
Iteration: 3, Objective: 0.3504
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:45 PM: Your problem has 79 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:45 PM: Finished problem compilation (took 2.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 79
  constraints   = 129
  nnz(P)        = 0
  nnz(A)        = 600
  cones (total) = 1
    : Nonnegative = 1,  numel = 129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9127e-01  +5.1373e+01  5.09e+01  8.73e-01  8.85e+00  1.00e+00  1.06e+00   ------   
  1  +5.6335e-01  +1.0837e+01  1.03e+01  3.54e-01  4.92e+00  3.89e-03  5.60e-01  6.23e-01  
  2  +5.0637e-01  +1.6247e+00  1.12e+00  7.04e-02  1.29e+00  1.47e-02  1.79e-01  9.90e-01  
  3  +4.6606e-01  +1.3558e+00  8.90e-01  3.27e-02  6.17e-01  1.59e-02  9.00e-02  6.31e-01  
  4  +4.1356e-01  +8.0439e-01  3.91e-01  1.04e-02  1.95e-01  7.96e-03  3.28e-02  6.75e-01  
  5  +3.8112e-01  +5.4998e-01  1.69e-01  4.43e-03  8.19e-02  2.51e-03  1.60e-02  5.94e-01  
  6  +3.5648e-01  +3.8453e-01  2.80e-02  7.37e-04  1.35e-02  2.81e-04  3.07e-03  8.56e-01  
  7  +3.5083e-01  +3.5261e-01  1.78e-03  4.68e-05  8.54e-04  1.61e-05  2.04e-04  9.36e-01  
  8  +3.5045e-01  +3.5063e-01  1.77e-04  4.68e-06  8.51e-05  1.25e-06  2.08e-05  9.21e-01  
  9  +3.5040e-01  +3.5041e-01  4.20e-06  1.11e-07  2.02e-06  2.73e-08  5.00e-07  9.80e-01  
 10  +3.5040e-01  +3.5040e-01  4.20e-08  1.11e-09  2.02e-08  2.73e-10  5.00e-09  9.90e-01  
 11  +3.5040e-01  +3.5040e-01  4.20e-10  1.12e-11  2.02e-10  2.73e-12  5.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 469.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:45 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:45 PM: Optimal value: 3.504e-01
(CVXPY) Sep 20 07:30:45 PM: Compilation took 2.999e-03 seconds
(CVXPY) Sep 20 07:30:45 PM: Solver (including time spent in interface) took 9.999e-04 seconds
Iteration: 4, Objective: 0.3504
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:45 PM: Your problem has 81 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:45 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 131
  nnz(P)        = 0
  nnz(A)        = 611
  cones (total) = 1
    : Nonnegative = 1,  numel = 131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9107e-01  +5.1382e+01  5.09e+01  8.74e-01  8.81e+00  1.00e+00  1.06e+00   ------   
  1  +5.6088e-01  +1.0876e+01  1.03e+01  3.57e-01  4.90e+00  3.88e-03  5.62e-01  6.21e-01  
  2  +5.0386e-01  +1.6337e+00  1.13e+00  7.11e-02  1.29e+00  1.49e-02  1.81e-01  9.90e-01  
  3  +4.6049e-01  +1.2354e+00  7.75e-01  2.91e-02  5.44e-01  1.45e-02  8.16e-02  6.40e-01  
  4  +4.1220e-01  +8.1483e-01  4.03e-01  1.08e-02  2.01e-01  8.47e-03  3.43e-02  6.26e-01  
  5  +3.7484e-01  +5.3537e-01  1.61e-01  4.13e-03  7.54e-02  2.31e-03  1.56e-02  6.32e-01  
  6  +3.5670e-01  +4.3079e-01  7.41e-02  1.85e-03  3.35e-02  9.65e-04  7.85e-03  5.35e-01  
  7  +3.4174e-01  +3.4630e-01  4.56e-03  1.14e-04  2.05e-03  2.59e-05  5.47e-04  9.63e-01  
  8  +3.4051e-01  +3.4056e-01  4.80e-05  1.20e-06  2.15e-05  2.68e-07  5.84e-06  9.89e-01  
  9  +3.4050e-01  +3.4050e-01  4.80e-07  1.20e-08  2.15e-07  2.68e-09  5.84e-08  9.90e-01  
 10  +3.4050e-01  +3.4050e-01  4.80e-09  1.20e-10  2.15e-09  2.68e-11  5.84e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 433.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:45 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:45 PM: Optimal value: 3.405e-01
(CVXPY) Sep 20 07:30:45 PM: Compilation took 3.000e-03 seconds
(CVXPY) Sep 20 07:30:45 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.66
  Our objective: 0.32000000000000006

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.14)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 0) <-- (term's our objective: 0.04)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.06)
 OR (x2 = 0 AND x3 = 1 AND x4 = 1)            <-- (term's our objective: 0.06)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.476166009902954
Best over terms:
  Our final objective: 0.13999999999999996
    Its accruacy: 0.57
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.13999999999999996
  Highest accruacy: 0.57
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

