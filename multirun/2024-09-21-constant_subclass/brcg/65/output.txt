Command:
python test_script.py -s constant_subclass -d 2 -n 5000 --seed 43 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.27199999999999996
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 2.

Computed total variation: 0.272
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:10 PM: Your problem has 2505 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:10 PM: Finished problem compilation (took 7.561e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2505
  constraints   = 5005
  nnz(P)        = 0
  nnz(A)        = 12505
  cones (total) = 1
    : Nonnegative = 1,  numel = 5005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9998e-01  +2.5009e+03  2.50e+03  9.76e-01  4.95e+01  1.00e+00  1.00e+00   ------   
  1  +6.3744e-01  +4.3723e+02  4.37e+02  2.65e-01  2.34e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5886e-01  +8.1604e+01  8.10e+01  1.30e-01  1.32e+01  5.30e-03  2.15e-01  5.90e-01  
  3  +5.0268e-01  +5.0248e+00  4.52e+00  4.02e-02  3.84e+00  3.01e-06  2.11e-01  1.37e-01  
  4  +4.9996e-01  +8.5923e-01  3.59e-01  3.39e-03  3.37e-01  1.89e-06  8.26e-02  8.76e-01  
  5  +4.9704e-01  +1.1607e+00  6.64e-01  3.22e-03  3.25e-01  2.02e-05  1.15e-02  9.27e-01  
  6  +4.6067e-01  +7.6630e-01  3.06e-01  1.58e-04  1.61e-02  1.97e-04  4.62e-04  9.60e-01  
  7  +4.2712e-01  +4.9982e-01  7.27e-02  3.65e-05  3.66e-03  1.68e-06  1.29e-04  8.15e-01  
  8  +4.0633e-01  +4.1014e-01  3.81e-03  1.64e-06  1.65e-04  1.80e-07  7.18e-06  9.74e-01  
  9  +4.0511e-01  +4.0516e-01  4.19e-05  1.80e-08  1.80e-06  1.96e-09  7.96e-08  9.89e-01  
 10  +4.0510e-01  +4.0510e-01  4.19e-07  1.80e-10  1.80e-08  1.96e-11  7.96e-10  9.90e-01  
 11  +4.0510e-01  +4.0510e-01  4.19e-09  1.80e-12  1.80e-10  1.96e-13  7.97e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.4553ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:10 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:10 PM: Optimal value: 4.051e-01
(CVXPY) Sep 20 07:26:10 PM: Compilation took 7.561e-03 seconds
(CVXPY) Sep 20 07:26:10 PM: Solver (including time spent in interface) took 1.253e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4051
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:10 PM: Your problem has 2506 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:10 PM: Finished problem compilation (took 6.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2506
  constraints   = 5006
  nnz(P)        = 0
  nnz(A)        = 13449
  cones (total) = 1
    : Nonnegative = 1,  numel = 5006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9991e-01  +2.5017e+03  2.50e+03  9.76e-01  5.12e+01  1.00e+00  1.00e+00   ------   
  1  +6.3711e-01  +4.3757e+02  4.37e+02  2.66e-01  2.42e+01  4.49e-03  3.89e-01  7.24e-01  
  2  +5.5864e-01  +8.1389e+01  8.08e+01  1.29e-01  1.36e+01  5.33e-03  2.14e-01  5.93e-01  
  3  +5.0218e-01  +4.4356e+00  3.93e+00  3.54e-02  3.51e+00  3.99e-06  2.09e-01  1.65e-01  
  4  +4.9994e-01  +7.6621e-01  2.66e-01  2.51e-03  2.59e-01  1.79e-06  5.29e-02  9.61e-01  
  5  +4.9955e-01  +8.3647e-01  3.37e-01  3.01e-03  3.10e-01  4.82e-06  2.41e-02  6.49e-01  
  6  +4.7589e-01  +8.0597e-01  3.30e-01  2.37e-04  2.51e-02  1.57e-04  6.73e-04  9.76e-01  
  7  +4.6310e-01  +7.7831e-01  3.15e-01  1.59e-04  1.68e-02  1.91e-04  4.29e-04  4.37e-01  
  8  +4.6053e-01  +7.4234e-01  2.82e-01  1.54e-04  1.62e-02  1.46e-04  4.29e-04  2.55e-02  
  9  +4.2689e-01  +6.1562e-01  1.89e-01  7.19e-05  7.53e-03  1.23e-04  2.07e-04  5.44e-01  
 10  +3.8159e-01  +4.2539e-01  4.38e-02  1.57e-05  1.64e-03  2.70e-06  5.28e-05  8.52e-01  
 11  +3.6451e-01  +3.6539e-01  8.79e-04  3.11e-07  3.23e-05  2.81e-08  1.13e-06  9.84e-01  
 12  +3.6410e-01  +3.6411e-01  8.78e-06  3.11e-09  3.22e-07  2.81e-10  1.13e-08  9.90e-01  
 13  +3.6410e-01  +3.6410e-01  8.78e-08  3.11e-11  3.22e-09  2.81e-12  1.13e-10  9.90e-01  
 14  +3.6410e-01  +3.6410e-01  8.78e-10  3.11e-13  3.22e-11  2.81e-14  1.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.6559ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:10 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:10 PM: Optimal value: 3.641e-01
(CVXPY) Sep 20 07:26:10 PM: Compilation took 6.007e-03 seconds
(CVXPY) Sep 20 07:26:10 PM: Solver (including time spent in interface) took 1.406e-02 seconds
FULL MODEL:
  Accruacy: 0.636
  Our objective: 0.27199999999999996

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.272)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8435478210449219
Best over terms:
  Our final objective: 0.27199999999999996
    Its accruacy: 0.636
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.27199999999999996
  Highest accruacy: 0.636
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

