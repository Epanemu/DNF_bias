Command:
python test_script.py -s constant_subclass -d 8 -n 100 --seed 56 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 8.

Computed total variation: 0.78
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:51 PM: Your problem has 67 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:51 PM: Finished problem compilation (took 7.751e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 67
  constraints   = 117
  nnz(P)        = 0
  nnz(A)        = 567
  cones (total) = 1
    : Nonnegative = 1,  numel = 117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9796e-01  +5.0899e+01  5.04e+01  8.71e-01  9.93e+00  1.00e+00  1.04e+00   ------   
  1  +5.7943e-01  +1.1088e+01  1.05e+01  3.69e-01  5.91e+00  3.80e-03  5.79e-01  5.99e-01  
  2  +5.1793e-01  +1.6919e+00  1.17e+00  8.99e-02  1.77e+00  1.69e-02  2.31e-01  9.90e-01  
  3  +4.9885e-01  +7.9058e-01  2.92e-01  2.05e-02  4.20e-01  6.50e-03  6.52e-02  7.51e-01  
  4  +4.6544e-01  +7.5468e-01  2.89e-01  7.25e-03  1.53e-01  1.30e-02  2.46e-02  6.99e-01  
  5  +4.2672e-01  +5.4470e-01  1.18e-01  2.55e-03  5.31e-02  2.56e-03  1.02e-02  6.85e-01  
  6  +3.9699e-01  +4.1644e-01  1.94e-02  4.12e-04  8.51e-03  2.32e-05  1.91e-03  9.19e-01  
  7  +3.9021e-01  +3.9050e-01  2.96e-04  6.16e-06  1.27e-04  2.98e-07  2.94e-05  9.85e-01  
  8  +3.9010e-01  +3.9010e-01  2.96e-06  6.15e-08  1.27e-06  2.98e-09  2.94e-07  9.90e-01  
  9  +3.9010e-01  +3.9010e-01  2.96e-08  6.15e-10  1.27e-08  2.98e-11  2.94e-09  9.90e-01  
 10  +3.9010e-01  +3.9010e-01  2.96e-10  6.15e-12  1.27e-10  2.98e-13  2.94e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 635µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:51 PM: Optimal value: 3.901e-01
(CVXPY) Sep 20 07:44:51 PM: Compilation took 7.751e-03 seconds
(CVXPY) Sep 20 07:44:51 PM: Solver (including time spent in interface) took 9.661e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:51 PM: Your problem has 77 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:51 PM: Finished problem compilation (took 5.240e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 77
  constraints   = 127
  nnz(P)        = 0
  nnz(A)        = 653
  cones (total) = 1
    : Nonnegative = 1,  numel = 127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9432e-01  +5.1353e+01  5.09e+01  8.76e-01  9.86e+00  1.00e+00  1.05e+00   ------   
  1  +5.5848e-01  +1.1115e+01  1.06e+01  3.76e-01  5.71e+00  3.81e-03  5.81e-01  6.03e-01  
  2  +4.9407e-01  +1.8132e+00  1.32e+00  8.69e-02  1.73e+00  1.87e-02  2.17e-01  9.90e-01  
  3  +4.4486e-01  +1.0848e+00  6.40e-01  2.58e-02  5.36e-01  1.42e-02  7.40e-02  7.09e-01  
  4  +3.8970e-01  +7.1608e-01  3.26e-01  8.88e-03  1.82e-01  6.85e-03  3.10e-02  6.91e-01  
  5  +3.5453e-01  +4.7847e-01  1.24e-01  3.08e-03  6.41e-02  1.99e-03  1.21e-02  7.21e-01  
  6  +3.3022e-01  +3.6370e-01  3.35e-02  8.07e-04  1.65e-02  3.17e-05  3.62e-03  9.43e-01  
  7  +3.2093e-01  +3.2322e-01  2.29e-03  5.35e-05  1.10e-03  2.34e-06  2.52e-04  9.36e-01  
  8  +3.2031e-01  +3.2035e-01  3.75e-05  8.81e-07  1.81e-05  2.39e-08  4.21e-06  9.83e-01  
  9  +3.2030e-01  +3.2030e-01  3.98e-07  9.40e-09  1.92e-07  2.56e-10  4.51e-08  9.89e-01  
 10  +3.2030e-01  +3.2030e-01  3.98e-09  9.40e-11  1.92e-09  2.56e-12  4.51e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 721.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:51 PM: Optimal value: 3.203e-01
(CVXPY) Sep 20 07:44:51 PM: Compilation took 5.240e-03 seconds
(CVXPY) Sep 20 07:44:51 PM: Solver (including time spent in interface) took 1.074e-03 seconds
Iteration: 2, Objective: 0.3203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:52 PM: Your problem has 87 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:52 PM: Finished problem compilation (took 4.991e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 87
  constraints   = 137
  nnz(P)        = 0
  nnz(A)        = 762
  cones (total) = 1
    : Nonnegative = 1,  numel = 137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9220e-01  +5.1606e+01  5.11e+01  8.82e-01  9.95e+00  1.00e+00  1.06e+00   ------   
  1  +5.4610e-01  +1.1157e+01  1.06e+01  3.85e-01  5.66e+00  3.81e-03  5.87e-01  6.03e-01  
  2  +4.7976e-01  +2.0780e+00  1.60e+00  9.40e-02  1.86e+00  2.01e-02  2.28e-01  9.46e-01  
  3  +4.0606e-01  +9.4860e-01  5.43e-01  1.84e-02  3.90e-01  1.31e-02  5.26e-02  8.13e-01  
  4  +3.5693e-01  +6.8993e-01  3.33e-01  8.54e-03  1.83e-01  7.89e-03  2.61e-02  6.21e-01  
  5  +3.1191e-01  +4.3592e-01  1.24e-01  2.86e-03  6.29e-02  2.36e-03  9.75e-03  7.15e-01  
  6  +2.8727e-01  +3.3821e-01  5.09e-02  1.08e-03  2.44e-02  8.21e-04  4.02e-03  6.49e-01  
  7  +2.7267e-01  +2.7820e-01  5.54e-03  1.17e-04  2.61e-03  5.04e-05  4.77e-04  9.33e-01  
  8  +2.7058e-01  +2.7079e-01  2.03e-04  4.32e-06  9.53e-05  1.30e-06  1.81e-05  9.64e-01  
  9  +2.7050e-01  +2.7050e-01  2.80e-06  6.12e-08  1.33e-06  1.31e-08  2.65e-07  9.86e-01  
 10  +2.7050e-01  +2.7050e-01  2.80e-08  6.12e-10  1.33e-08  1.30e-10  2.65e-09  9.90e-01  
 11  +2.7050e-01  +2.7050e-01  2.80e-10  6.12e-12  1.33e-10  1.30e-12  2.65e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 959.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:52 PM: Optimal value: 2.705e-01
(CVXPY) Sep 20 07:44:52 PM: Compilation took 4.991e-03 seconds
(CVXPY) Sep 20 07:44:52 PM: Solver (including time spent in interface) took 5.944e-04 seconds
Iteration: 3, Objective: 0.2705
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:52 PM: Your problem has 97 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:52 PM: Finished problem compilation (took 4.022e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 97
  constraints   = 147
  nnz(P)        = 0
  nnz(A)        = 826
  cones (total) = 1
    : Nonnegative = 1,  numel = 147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9152e-01  +5.1670e+01  5.12e+01  8.86e-01  9.77e+00  1.00e+00  1.06e+00   ------   
  1  +5.3526e-01  +1.1163e+01  1.06e+01  3.90e-01  5.46e+00  3.84e-03  5.83e-01  6.04e-01  
  2  +4.6561e-01  +2.0105e+00  1.54e+00  8.41e-02  1.65e+00  2.12e-02  2.06e-01  9.81e-01  
  3  +3.7773e-01  +9.8937e-01  6.12e-01  1.84e-02  3.87e-01  1.56e-02  5.16e-02  7.78e-01  
  4  +3.0140e-01  +5.3249e-01  2.31e-01  5.55e-03  1.18e-01  3.96e-03  1.68e-02  8.18e-01  
  5  +2.6501e-01  +3.8292e-01  1.18e-01  2.59e-03  5.67e-02  1.76e-03  8.22e-03  6.43e-01  
  6  +2.3432e-01  +2.6885e-01  3.45e-02  7.09e-04  1.57e-02  2.98e-04  2.41e-03  8.49e-01  
  7  +2.2143e-01  +2.2301e-01  1.58e-03  3.16e-05  6.96e-04  1.11e-05  1.12e-04  9.56e-01  
  8  +2.2083e-01  +2.2089e-01  5.91e-05  1.23e-06  2.64e-05  1.67e-07  4.50e-06  9.60e-01  
  9  +2.2080e-01  +2.2080e-01  6.73e-07  1.42e-08  3.02e-07  1.99e-09  5.29e-08  9.88e-01  
 10  +2.2080e-01  +2.2080e-01  6.74e-09  1.42e-10  3.02e-09  2.00e-11  5.29e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 973.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:52 PM: Optimal value: 2.208e-01
(CVXPY) Sep 20 07:44:52 PM: Compilation took 4.022e-03 seconds
(CVXPY) Sep 20 07:44:52 PM: Solver (including time spent in interface) took 2.662e-03 seconds
Iteration: 4, Objective: 0.2208
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:52 PM: Your problem has 107 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:52 PM: Finished problem compilation (took 3.991e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 107
  constraints   = 157
  nnz(P)        = 0
  nnz(A)        = 875
  cones (total) = 1
    : Nonnegative = 1,  numel = 157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9045e-01  +5.1791e+01  5.13e+01  8.89e-01  9.55e+00  1.00e+00  1.06e+00   ------   
  1  +5.2580e-01  +1.1323e+01  1.08e+01  4.01e-01  5.35e+00  3.85e-03  5.92e-01  5.96e-01  
  2  +4.5874e-01  +2.0192e+00  1.56e+00  8.60e-02  1.64e+00  2.22e-02  2.12e-01  9.90e-01  
  3  +3.6243e-01  +1.0561e+00  6.94e-01  2.06e-02  4.23e-01  1.78e-02  5.74e-02  7.82e-01  
  4  +2.9107e-01  +5.4741e-01  2.56e-01  6.48e-03  1.35e-01  4.94e-03  1.94e-02  7.52e-01  
  5  +2.5322e-01  +4.0816e-01  1.55e-01  3.54e-03  7.64e-02  2.21e-03  1.13e-02  6.41e-01  
  6  +2.2040e-01  +2.7791e-01  5.75e-02  1.21e-03  2.66e-02  7.77e-04  4.13e-03  6.56e-01  
  7  +2.0287e-01  +2.0841e-01  5.53e-03  1.14e-04  2.49e-03  6.51e-05  4.10e-04  9.05e-01  
  8  +2.0110e-01  +2.0161e-01  5.10e-04  1.08e-05  2.31e-04  4.58e-06  4.00e-05  9.04e-01  
  9  +2.0091e-01  +2.0094e-01  2.72e-05  5.97e-07  1.25e-05  1.77e-07  2.34e-06  9.49e-01  
 10  +2.0090e-01  +2.0090e-01  2.74e-07  6.05e-09  1.26e-07  1.77e-09  2.38e-08  9.90e-01  
 11  +2.0090e-01  +2.0090e-01  2.75e-09  6.05e-11  1.26e-09  1.77e-11  2.39e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0937ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:52 PM: Optimal value: 2.009e-01
(CVXPY) Sep 20 07:44:52 PM: Compilation took 3.991e-03 seconds
(CVXPY) Sep 20 07:44:52 PM: Solver (including time spent in interface) took 1.581e-03 seconds
Iteration: 5, Objective: 0.2009
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:52 PM: Your problem has 117 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:52 PM: Finished problem compilation (took 5.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 117
  constraints   = 167
  nnz(P)        = 0
  nnz(A)        = 917
  cones (total) = 1
    : Nonnegative = 1,  numel = 167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8874e-01  +5.1890e+01  5.14e+01  8.93e-01  9.35e+00  1.00e+00  1.07e+00   ------   
  1  +4.9910e-01  +1.1503e+01  1.10e+01  4.02e-01  5.21e+00  3.92e-03  5.94e-01  5.89e-01  
  2  +4.2097e-01  +2.2866e+00  1.87e+00  9.11e-02  1.66e+00  2.41e-02  2.25e-01  9.50e-01  
  3  +3.0677e-01  +1.0773e+00  7.70e-01  2.29e-02  4.40e-01  1.63e-02  6.42e-02  7.53e-01  
  4  +2.3840e-01  +4.7041e-01  2.32e-01  6.68e-03  1.29e-01  3.29e-03  2.05e-02  7.77e-01  
  5  +2.0461e-01  +3.4011e-01  1.35e-01  3.55e-03  7.15e-02  1.62e-03  1.16e-02  5.88e-01  
  6  +1.7283e-01  +2.0790e-01  3.51e-02  8.55e-04  1.74e-02  3.77e-04  3.07e-03  7.55e-01  
  7  +1.6298e-01  +1.6853e-01  5.54e-03  1.32e-04  2.68e-03  5.62e-05  4.97e-04  8.46e-01  
  8  +1.6128e-01  +1.6172e-01  4.40e-04  1.07e-05  2.14e-04  3.07e-06  4.20e-05  9.18e-01  
  9  +1.6111e-01  +1.6112e-01  1.56e-05  3.91e-07  7.59e-06  5.81e-08  1.67e-06  9.77e-01  
 10  +1.6110e-01  +1.6110e-01  1.56e-07  3.91e-09  7.57e-08  5.79e-10  1.68e-08  9.90e-01  
 11  +1.6110e-01  +1.6110e-01  1.56e-09  3.91e-11  7.57e-10  5.79e-12  1.68e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1722ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:52 PM: Optimal value: 1.611e-01
(CVXPY) Sep 20 07:44:52 PM: Compilation took 5.006e-03 seconds
(CVXPY) Sep 20 07:44:52 PM: Solver (including time spent in interface) took 1.670e-03 seconds
Iteration: 6, Objective: 0.1611
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:52 PM: Your problem has 126 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:52 PM: Finished problem compilation (took 4.651e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 126
  constraints   = 176
  nnz(P)        = 0
  nnz(A)        = 946
  cones (total) = 1
    : Nonnegative = 1,  numel = 176

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8796e-01  +5.2088e+01  5.16e+01  8.95e-01  9.15e+00  1.00e+00  1.07e+00   ------   
  1  +4.7929e-01  +1.1515e+01  1.10e+01  3.99e-01  5.01e+00  3.96e-03  5.89e-01  5.92e-01  
  2  +3.6926e-01  +2.2167e+00  1.85e+00  7.59e-02  1.36e+00  2.60e-02  1.97e-01  9.84e-01  
  3  +2.6192e-01  +1.0455e+00  7.84e-01  2.33e-02  4.28e-01  1.34e-02  6.70e-02  7.25e-01  
  4  +1.9979e-01  +4.3068e-01  2.31e-01  6.61e-03  1.21e-01  2.95e-03  2.12e-02  8.04e-01  
  5  +1.6806e-01  +2.9470e-01  1.27e-01  3.22e-03  6.08e-02  1.51e-03  1.10e-02  5.93e-01  
  6  +1.4345e-01  +1.8397e-01  4.05e-02  9.61e-04  1.81e-02  4.48e-04  3.55e-03  7.07e-01  
  7  +1.3287e-01  +1.3744e-01  4.57e-03  1.07e-04  2.01e-03  3.85e-05  4.12e-04  9.14e-01  
  8  +1.3150e-01  +1.3198e-01  4.87e-04  1.18e-05  2.16e-04  2.81e-06  4.79e-05  8.89e-01  
  9  +1.3131e-01  +1.3133e-01  2.10e-05  5.23e-07  9.44e-06  8.75e-08  2.31e-06  9.60e-01  
 10  +1.3130e-01  +1.3130e-01  2.10e-07  5.25e-09  9.47e-08  8.76e-10  2.33e-08  9.90e-01  
 11  +1.3130e-01  +1.3130e-01  2.10e-09  5.26e-11  9.47e-10  8.76e-12  2.33e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.162ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:52 PM: Optimal value: 1.313e-01
(CVXPY) Sep 20 07:44:52 PM: Compilation took 4.651e-03 seconds
(CVXPY) Sep 20 07:44:52 PM: Solver (including time spent in interface) took 1.008e-03 seconds
Iteration: 7, Objective: 0.1313
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:52 PM: Your problem has 136 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:52 PM: Finished problem compilation (took 3.993e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 136
  constraints   = 186
  nnz(P)        = 0
  nnz(A)        = 975
  cones (total) = 1
    : Nonnegative = 1,  numel = 186

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8766e-01  +5.2162e+01  5.17e+01  8.98e-01  8.94e+00  1.00e+00  1.07e+00   ------   
  1  +4.7143e-01  +1.1673e+01  1.12e+01  4.06e-01  4.91e+00  3.99e-03  5.94e-01  5.85e-01  
  2  +3.6305e-01  +2.2059e+00  1.84e+00  7.79e-02  1.36e+00  2.67e-02  2.03e-01  9.90e-01  
  3  +2.5472e-01  +1.1164e+00  8.62e-01  2.65e-02  4.72e-01  1.47e-02  7.67e-02  6.82e-01  
  4  +1.9162e-01  +4.1224e-01  2.21e-01  6.51e-03  1.15e-01  2.81e-03  2.12e-02  8.30e-01  
  5  +1.6568e-01  +3.0231e-01  1.37e-01  3.71e-03  6.73e-02  1.55e-03  1.27e-02  5.32e-01  
  6  +1.3818e-01  +1.6492e-01  2.67e-02  6.89e-04  1.25e-02  2.70e-04  2.55e-03  8.18e-01  
  7  +1.3180e-01  +1.3359e-01  1.79e-03  4.66e-05  8.38e-04  1.36e-05  1.79e-04  9.32e-01  
  8  +1.3129e-01  +1.3153e-01  2.34e-04  6.31e-06  1.10e-04  7.91e-07  2.85e-05  9.26e-01  
  9  +1.3120e-01  +1.3121e-01  8.39e-06  2.28e-07  3.94e-06  2.42e-08  1.10e-06  9.74e-01  
 10  +1.3120e-01  +1.3120e-01  8.38e-08  2.27e-09  3.93e-08  2.42e-10  1.11e-08  9.90e-01  
 11  +1.3120e-01  +1.3120e-01  8.39e-10  2.28e-11  3.94e-10  2.42e-12  1.11e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2115ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:52 PM: Optimal value: 1.312e-01
(CVXPY) Sep 20 07:44:52 PM: Compilation took 3.993e-03 seconds
(CVXPY) Sep 20 07:44:52 PM: Solver (including time spent in interface) took 2.016e-03 seconds
Iteration: 8, Objective: 0.1312
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:52 PM: Your problem has 146 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:52 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 146
  constraints   = 196
  nnz(P)        = 0
  nnz(A)        = 1008
  cones (total) = 1
    : Nonnegative = 1,  numel = 196

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8732e-01  +5.2228e+01  5.17e+01  9.01e-01  8.76e+00  1.00e+00  1.07e+00   ------   
  1  +4.6574e-01  +1.1757e+01  1.13e+01  4.10e-01  4.80e+00  4.00e-03  5.96e-01  5.82e-01  
  2  +3.5690e-01  +2.3790e+00  2.02e+00  8.68e-02  1.48e+00  2.66e-02  2.23e-01  9.51e-01  
  3  +2.4829e-01  +1.1795e+00  9.31e-01  2.90e-02  5.10e-01  1.47e-02  8.36e-02  6.99e-01  
  4  +1.8726e-01  +4.1238e-01  2.25e-01  6.90e-03  1.20e-01  2.77e-03  2.23e-02  8.21e-01  
  5  +1.6534e-01  +3.1075e-01  1.45e-01  4.24e-03  7.44e-02  1.65e-03  1.42e-02  4.56e-01  
  6  +1.3605e-01  +1.5606e-01  2.00e-02  5.57e-04  9.79e-03  1.94e-04  2.02e-03  8.73e-01  
  7  +1.3188e-01  +1.3410e-01  2.21e-03  6.27e-05  1.09e-03  1.71e-05  2.37e-04  8.87e-01  
  8  +1.3137e-01  +1.3185e-01  4.88e-04  1.42e-05  2.37e-04  2.17e-06  6.25e-05  8.71e-01  
  9  +1.3121e-01  +1.3125e-01  3.81e-05  1.12e-06  1.85e-05  1.42e-07  5.30e-06  9.22e-01  
 10  +1.3120e-01  +1.3120e-01  4.14e-07  1.21e-08  2.02e-07  1.51e-09  5.83e-08  9.90e-01  
 11  +1.3120e-01  +1.3120e-01  4.14e-09  1.22e-10  2.02e-09  1.51e-11  5.83e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2607ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:52 PM: Optimal value: 1.312e-01
(CVXPY) Sep 20 07:44:52 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:44:52 PM: Solver (including time spent in interface) took 1.007e-03 seconds
Iteration: 9, Objective: 0.1312
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:44:52 PM: Your problem has 147 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:44:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:44:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:44:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:44:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:44:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:44:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:44:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:44:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:44:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:44:52 PM: Finished problem compilation (took 4.042e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 147
  constraints   = 197
  nnz(P)        = 0
  nnz(A)        = 1013
  cones (total) = 1
    : Nonnegative = 1,  numel = 197

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8672e-01  +5.2305e+01  5.18e+01  9.01e-01  8.75e+00  1.00e+00  1.07e+00   ------   
  1  +4.5821e-01  +1.1886e+01  1.14e+01  4.13e-01  4.84e+00  4.01e-03  6.02e-01  5.76e-01  
  2  +3.5038e-01  +2.4481e+00  2.10e+00  9.33e-02  1.56e+00  2.69e-02  2.39e-01  9.36e-01  
  3  +2.4273e-01  +1.1818e+00  9.39e-01  3.01e-02  5.19e-01  1.57e-02  8.75e-02  6.88e-01  
  4  +1.8586e-01  +4.4321e-01  2.57e-01  8.08e-03  1.38e-01  3.33e-03  2.65e-02  7.78e-01  
  5  +1.5304e-01  +2.6552e-01  1.12e-01  3.30e-03  5.69e-02  1.24e-03  1.18e-02  6.48e-01  
  6  +1.3346e-01  +1.4375e-01  1.03e-02  2.97e-04  5.09e-03  9.62e-05  1.13e-03  9.14e-01  
  7  +1.3165e-01  +1.3323e-01  1.58e-03  4.68e-05  7.88e-04  1.17e-05  1.89e-04  8.40e-01  
  8  +1.3140e-01  +1.3210e-01  7.07e-04  2.11e-05  3.51e-04  4.24e-06  9.42e-05  6.44e-01  
  9  +1.3124e-01  +1.3141e-01  1.64e-04  4.92e-06  8.13e-05  9.13e-07  2.34e-05  7.67e-01  
 10  +1.3120e-01  +1.3121e-01  3.82e-06  1.16e-07  1.90e-06  1.46e-08  5.60e-07  9.89e-01  
 11  +1.3120e-01  +1.3120e-01  3.83e-08  1.16e-09  1.91e-08  1.46e-10  5.61e-09  9.90e-01  
 12  +1.3120e-01  +1.3120e-01  3.84e-10  1.16e-11  1.91e-10  1.46e-12  5.61e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2884ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:44:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:44:52 PM: Optimal value: 1.312e-01
(CVXPY) Sep 20 07:44:52 PM: Compilation took 4.042e-03 seconds
(CVXPY) Sep 20 07:44:52 PM: Solver (including time spent in interface) took 1.573e-03 seconds
FULL MODEL:
  Accruacy: 0.87
  Our objective: 0.74

IF 
    (x0 = 0 AND x1 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 0)            <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x5 = 0 AND x7 = 1)            <-- (term's our objective: 0.1)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x3 = 1 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1)                       <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x7 = 0)                       <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x5 = 0)                       <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.06)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x7 = 0)            <-- (term's our objective: 0.1)
 OR (x1 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.1)
 OR (x1 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0)            <-- (term's our objective: 0.04)
 OR (x1 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 0)                       <-- (term's our objective: 0.04)
 OR (x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.08)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.746751070022583
Best over terms:
  Our final objective: 0.12
    Its accruacy: 0.56
    Its hamming distance: 6
  Shortest hamming distance: 5
    Its our objective: 0.09999999999999998
  Highest accruacy: 0.56
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

