Command:
python test_script.py -s constant_subclass -d 7 -n 5000 --seed 21 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.009600000000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 7.

Computed total variation: 0.13479999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:30 PM: Your problem has 2515 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:30 PM: Finished problem compilation (took 1.751e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2515
  constraints   = 5015
  nnz(P)        = 0
  nnz(A)        = 25015
  cones (total) = 1
    : Nonnegative = 1,  numel = 5015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5008e+03  2.50e+03  9.79e-01  7.39e+01  1.00e+00  1.00e+00   ------   
  1  +5.8812e-01  +5.2570e+02  5.25e+02  4.01e-01  4.61e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3802e-01  +6.5558e+01  6.50e+01  1.52e-01  2.23e+01  1.31e-02  2.54e-01  8.66e-01  
  3  +5.0954e-01  +1.6655e+01  1.61e+01  1.05e-01  1.50e+01  3.38e-05  2.45e-01  1.74e-01  
  4  +5.0036e-01  +1.0461e+00  5.46e-01  5.27e-03  7.78e-01  6.37e-06  1.12e-01  9.90e-01  
  5  +5.0002e-01  +5.6653e-01  6.65e-02  6.28e-04  9.35e-02  2.35e-06  2.27e-02  8.74e-01  
  6  +5.0001e-01  +5.6111e-01  6.11e-02  5.74e-04  8.55e-02  3.13e-06  1.14e-02  5.82e-01  
  7  +4.9986e-01  +5.5410e-01  5.42e-02  3.54e-04  5.28e-02  1.41e-05  1.64e-03  9.12e-01  
  8  +4.9715e-01  +5.3900e-01  4.18e-02  2.66e-05  3.99e-03  1.97e-04  8.37e-05  9.49e-01  
  9  +4.9374e-01  +5.2022e-01  2.65e-02  1.51e-05  2.27e-03  9.10e-05  5.00e-05  5.01e-01  
 10  +4.9057e-01  +5.0544e-01  1.49e-02  7.36e-06  1.10e-03  3.85e-05  2.58e-05  5.79e-01  
 11  +4.8937e-01  +4.9993e-01  1.06e-02  4.75e-06  7.12e-04  8.17e-07  1.76e-05  9.49e-01  
 12  +4.8713e-01  +4.9082e-01  3.68e-03  1.54e-06  2.30e-04  2.85e-07  6.03e-06  7.07e-01  
 13  +4.8674e-01  +4.8919e-01  2.45e-03  9.98e-07  1.49e-04  2.09e-07  3.96e-06  5.79e-01  
 14  +4.8608e-01  +4.8659e-01  5.05e-04  2.02e-07  3.02e-05  4.97e-08  8.18e-07  9.90e-01  
 15  +4.8590e-01  +4.8591e-01  6.17e-06  2.45e-09  3.67e-07  6.03e-10  1.00e-08  9.88e-01  
 16  +4.8590e-01  +4.8590e-01  6.17e-08  2.45e-11  3.67e-09  6.03e-12  1.00e-10  9.90e-01  
 17  +4.8590e-01  +4.8590e-01  6.17e-10  2.45e-13  3.67e-11  6.19e-14  1.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.1389ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:30 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:30 PM: Optimal value: 4.859e-01
(CVXPY) Sep 20 07:40:30 PM: Compilation took 1.751e-02 seconds
(CVXPY) Sep 20 07:40:30 PM: Solver (including time spent in interface) took 5.110e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4859
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:30 PM: Your problem has 2525 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:30 PM: Finished problem compilation (took 1.353e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2525
  constraints   = 5025
  nnz(P)        = 0
  nnz(A)        = 28964
  cones (total) = 1
    : Nonnegative = 1,  numel = 5025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5009e+03  2.50e+03  9.79e-01  7.62e+01  1.00e+00  1.00e+00   ------   
  1  +5.8794e-01  +5.2600e+02  5.25e+02  4.01e-01  4.74e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3777e-01  +6.5311e+01  6.48e+01  1.52e-01  2.28e+01  1.32e-02  2.54e-01  8.69e-01  
  3  +5.0947e-01  +1.6577e+01  1.61e+01  1.05e-01  1.54e+01  3.40e-05  2.45e-01  1.78e-01  
  4  +5.0039e-01  +1.1098e+00  6.09e-01  5.90e-03  8.95e-01  6.56e-06  1.17e-01  9.44e-01  
  5  +5.0008e-01  +6.6185e-01  1.62e-01  1.54e-03  2.35e-01  3.44e-06  4.43e-02  7.14e-01  
  6  +5.0002e-01  +6.0120e-01  1.01e-01  9.53e-04  1.46e-01  3.83e-06  1.53e-02  7.12e-01  
  7  +4.9913e-01  +6.1000e-01  1.11e-01  2.42e-04  3.74e-02  6.29e-05  8.11e-04  9.73e-01  
  8  +4.9652e-01  +5.8251e-01  8.60e-02  7.61e-05  1.18e-02  1.34e-04  2.46e-04  7.08e-01  
  9  +4.9556e-01  +5.7453e-01  7.90e-02  6.17e-05  9.53e-03  1.25e-04  1.99e-04  2.39e-01  
 10  +4.9574e-01  +5.7237e-01  7.66e-02  5.65e-05  8.72e-03  8.97e-05  1.80e-04  3.28e-01  
 11  +4.9450e-01  +5.5404e-01  5.95e-02  4.10e-05  6.33e-03  6.07e-06  1.30e-04  8.30e-01  
 12  +4.9414e-01  +5.5192e-01  5.78e-02  4.02e-05  6.21e-03  5.49e-06  1.27e-04  1.27e-01  
 13  +4.9142e-01  +5.3629e-01  4.49e-02  2.61e-05  4.03e-03  4.51e-06  8.20e-05  4.43e-01  
 14  +4.8972e-01  +5.2691e-01  3.72e-02  1.90e-05  2.93e-03  3.30e-06  5.88e-05  7.04e-01  
 15  +4.8434e-01  +5.0200e-01  1.77e-02  6.77e-06  1.04e-03  1.97e-06  2.11e-05  7.74e-01  
 16  +4.8043e-01  +4.8915e-01  8.72e-03  2.91e-06  4.48e-04  9.84e-07  9.18e-06  7.64e-01  
 17  +4.7832e-01  +4.8146e-01  3.13e-03  9.96e-07  1.54e-04  4.01e-07  3.18e-06  8.54e-01  
 18  +4.7739e-01  +4.7823e-01  8.37e-04  2.64e-07  4.07e-05  1.31e-07  8.49e-07  9.90e-01  
 19  +4.7700e-01  +4.7701e-01  1.01e-05  3.19e-09  4.92e-07  1.57e-09  1.03e-08  9.90e-01  
 20  +4.7700e-01  +4.7700e-01  1.01e-07  3.19e-11  4.92e-09  1.57e-11  1.03e-10  9.90e-01  
 21  +4.7700e-01  +4.7700e-01  1.01e-09  3.19e-13  4.92e-11  1.58e-13  1.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 62.5756ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:31 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:31 PM: Optimal value: 4.770e-01
(CVXPY) Sep 20 07:40:31 PM: Compilation took 1.353e-02 seconds
(CVXPY) Sep 20 07:40:31 PM: Solver (including time spent in interface) took 6.762e-02 seconds
Iteration: 2, Objective: 0.4770
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:31 PM: Your problem has 2535 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:31 PM: Finished problem compilation (took 1.502e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2535
  constraints   = 5035
  nnz(P)        = 0
  nnz(A)        = 31342
  cones (total) = 1
    : Nonnegative = 1,  numel = 5035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5008e+03  2.50e+03  9.79e-01  7.69e+01  1.00e+00  1.00e+00   ------   
  1  +5.8780e-01  +5.2614e+02  5.26e+02  4.02e-01  4.78e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3761e-01  +6.5144e+01  6.46e+01  1.52e-01  2.30e+01  1.32e-02  2.54e-01  8.70e-01  
  3  +5.0942e-01  +1.6529e+01  1.60e+01  1.04e-01  1.54e+01  3.41e-05  2.44e-01  1.81e-01  
  4  +5.0038e-01  +1.0931e+00  5.93e-01  5.74e-03  8.80e-01  6.58e-06  1.14e-01  9.60e-01  
  5  +5.0012e-01  +7.2218e-01  2.22e-01  2.12e-03  3.27e-01  4.15e-06  5.27e-02  5.98e-01  
  6  +5.0006e-01  +6.6882e-01  1.69e-01  1.59e-03  2.46e-01  5.07e-06  2.26e-02  6.34e-01  
  7  +4.9942e-01  +6.5288e-01  1.53e-01  4.58e-04  7.12e-02  4.74e-05  1.59e-03  9.85e-01  
  8  +4.9764e-01  +6.3189e-01  1.34e-01  1.57e-04  2.45e-02  1.15e-04  5.13e-04  6.94e-01  
  9  +4.9582e-01  +6.0417e-01  1.08e-01  1.05e-04  1.64e-02  7.34e-05  3.39e-04  5.63e-01  
 10  +4.9416e-01  +5.9176e-01  9.76e-02  7.79e-05  1.21e-02  7.31e-05  2.48e-04  3.13e-01  
 11  +4.9404e-01  +5.9037e-01  9.63e-02  7.79e-05  1.21e-02  6.91e-05  2.47e-04  2.85e-02  
 12  +4.9384e-01  +5.8808e-01  9.42e-02  6.72e-05  1.05e-02  4.33e-05  2.10e-04  5.01e-01  
 13  +4.9202e-01  +5.7772e-01  8.57e-02  5.28e-05  8.22e-03  4.07e-05  1.65e-04  2.67e-01  
 14  +4.9081e-01  +5.7033e-01  7.95e-02  4.56e-05  7.10e-03  2.87e-05  1.43e-04  3.58e-01  
 15  +4.8629e-01  +5.4751e-01  6.12e-02  2.87e-05  4.47e-03  1.54e-05  9.17e-05  6.32e-01  
 16  +4.8442e-01  +5.3838e-01  5.40e-02  2.64e-05  4.11e-03  1.01e-05  8.54e-05  2.75e-01  
 17  +4.7572e-01  +4.9986e-01  2.41e-02  9.83e-06  1.53e-03  3.34e-06  3.31e-05  7.85e-01  
 18  +4.6934e-01  +4.7336e-01  4.02e-03  1.51e-06  2.35e-04  3.72e-07  5.45e-06  9.90e-01  
 19  +4.6774e-01  +4.6783e-01  8.95e-05  3.28e-08  5.10e-06  8.29e-09  1.23e-07  9.86e-01  
 20  +4.6770e-01  +4.6770e-01  8.95e-07  3.28e-10  5.09e-08  8.29e-11  1.23e-09  9.90e-01  
 21  +4.6770e-01  +4.6770e-01  8.95e-09  3.28e-12  5.09e-10  8.29e-13  1.23e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 65.0241ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:31 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:31 PM: Optimal value: 4.677e-01
(CVXPY) Sep 20 07:40:31 PM: Compilation took 1.502e-02 seconds
(CVXPY) Sep 20 07:40:31 PM: Solver (including time spent in interface) took 6.960e-02 seconds
Iteration: 3, Objective: 0.4677
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:31 PM: Your problem has 2545 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:31 PM: Finished problem compilation (took 1.752e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2545
  constraints   = 5045
  nnz(P)        = 0
  nnz(A)        = 33648
  cones (total) = 1
    : Nonnegative = 1,  numel = 5045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5008e+03  2.50e+03  9.79e-01  7.76e+01  1.00e+00  1.00e+00   ------   
  1  +5.8762e-01  +5.2638e+02  5.26e+02  4.03e-01  4.82e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3742e-01  +6.4951e+01  6.44e+01  1.52e-01  2.31e+01  1.32e-02  2.54e-01  8.72e-01  
  3  +5.0938e-01  +1.6489e+01  1.60e+01  1.04e-01  1.55e+01  3.42e-05  2.44e-01  1.83e-01  
  4  +5.0047e-01  +1.2324e+00  7.32e-01  7.10e-03  1.09e+00  6.86e-06  1.26e-01  8.65e-01  
  5  +5.0015e-01  +7.9874e-01  2.99e-01  2.86e-03  4.43e-01  4.71e-06  6.59e-02  5.46e-01  
  6  +5.0006e-01  +7.0650e-01  2.06e-01  1.94e-03  3.02e-01  5.97e-06  2.35e-02  7.31e-01  
  7  +4.9904e-01  +6.9970e-01  2.01e-01  5.20e-04  8.17e-02  5.91e-05  1.80e-03  9.54e-01  
  8  +4.9710e-01  +6.6858e-01  1.71e-01  2.33e-04  3.67e-02  9.88e-05  7.76e-04  5.92e-01  
  9  +4.9757e-01  +6.6979e-01  1.72e-01  2.32e-04  3.65e-02  8.51e-05  7.59e-04  1.64e-01  
 10  +4.9533e-01  +6.3984e-01  1.45e-01  1.42e-04  2.24e-02  8.31e-05  4.59e-04  4.96e-01  
 11  +4.9414e-01  +6.2943e-01  1.35e-01  1.12e-04  1.77e-02  7.72e-05  3.58e-04  3.30e-01  
 12  +4.9266e-01  +6.1681e-01  1.24e-01  8.66e-05  1.36e-02  6.48e-05  2.75e-04  3.91e-01  
 13  +4.9264e-01  +6.1132e-01  1.19e-01  8.19e-05  1.29e-02  3.93e-05  2.60e-04  3.68e-01  
 14  +4.9088e-01  +6.0164e-01  1.11e-01  6.56e-05  1.03e-02  3.66e-05  2.09e-04  2.91e-01  
 15  +4.9012e-01  +5.9574e-01  1.06e-01  6.40e-05  1.01e-02  2.90e-05  2.05e-04  1.56e-01  
 16  +4.8126e-01  +5.4986e-01  6.86e-02  3.34e-05  5.24e-03  1.43e-05  1.10e-04  6.57e-01  
 17  +4.7179e-01  +5.0348e-01  3.17e-02  1.41e-05  2.22e-03  5.27e-06  4.92e-05  6.16e-01  
 18  +4.6647e-01  +4.7781e-01  1.13e-02  4.81e-06  7.54e-04  1.60e-06  1.72e-05  7.52e-01  
 19  +4.6358e-01  +4.6529e-01  1.71e-03  7.04e-07  1.10e-04  1.83e-07  2.59e-06  9.87e-01  
 20  +4.6302e-01  +4.6308e-01  5.87e-05  2.41e-08  3.78e-06  6.25e-09  8.93e-08  9.67e-01  
 21  +4.6300e-01  +4.6300e-01  5.87e-07  2.41e-10  3.78e-08  6.25e-11  8.94e-10  9.90e-01  
 22  +4.6300e-01  +4.6300e-01  5.87e-09  2.41e-12  3.78e-10  6.27e-13  8.97e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 68.5409ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:31 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:31 PM: Optimal value: 4.630e-01
(CVXPY) Sep 20 07:40:31 PM: Compilation took 1.752e-02 seconds
(CVXPY) Sep 20 07:40:31 PM: Solver (including time spent in interface) took 7.313e-02 seconds
Iteration: 4, Objective: 0.4630
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:31 PM: Your problem has 2555 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:31 PM: Finished problem compilation (took 1.652e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2555
  constraints   = 5055
  nnz(P)        = 0
  nnz(A)        = 35153
  cones (total) = 1
    : Nonnegative = 1,  numel = 5055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5009e+03  2.50e+03  9.79e-01  7.78e+01  1.00e+00  1.00e+00   ------   
  1  +5.8744e-01  +5.2659e+02  5.26e+02  4.03e-01  4.84e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3724e-01  +6.4775e+01  6.42e+01  1.52e-01  2.31e+01  1.33e-02  2.53e-01  8.74e-01  
  3  +5.0934e-01  +1.6447e+01  1.59e+01  1.04e-01  1.55e+01  3.43e-05  2.43e-01  1.86e-01  
  4  +5.0051e-01  +1.3020e+00  8.01e-01  7.78e-03  1.20e+00  7.01e-06  1.31e-01  8.26e-01  
  5  +5.0016e-01  +8.1749e-01  3.17e-01  3.04e-03  4.73e-01  5.01e-06  6.67e-02  5.72e-01  
  6  +5.0008e-01  +7.8194e-01  2.82e-01  2.64e-03  4.12e-01  7.33e-06  2.92e-02  6.66e-01  
  7  +4.9879e-01  +7.2180e-01  2.23e-01  5.35e-04  8.44e-02  6.67e-05  1.84e-03  9.82e-01  
  8  +4.9607e-01  +6.8010e-01  1.84e-01  2.27e-04  3.59e-02  1.11e-04  7.56e-04  6.09e-01  
  9  +4.9595e-01  +6.7495e-01  1.79e-01  1.98e-04  3.13e-02  8.46e-05  6.46e-04  3.85e-01  
 10  +4.9359e-01  +6.5315e-01  1.60e-01  1.31e-04  2.07e-02  8.45e-05  4.26e-04  4.40e-01  
 11  +4.9270e-01  +6.4481e-01  1.52e-01  1.04e-04  1.64e-02  6.55e-05  3.38e-04  4.63e-01  
 12  +4.9106e-01  +6.2915e-01  1.38e-01  9.86e-05  1.56e-02  3.76e-05  3.23e-04  3.21e-01  
 13  +4.8580e-01  +5.9996e-01  1.14e-01  6.68e-05  1.05e-02  3.17e-05  2.24e-04  3.78e-01  
 14  +4.7301e-01  +5.2658e-01  5.36e-02  2.71e-05  4.26e-03  4.94e-06  9.82e-05  8.08e-01  
 15  +4.6654e-01  +4.9428e-01  2.77e-02  1.31e-05  2.06e-03  2.30e-06  5.05e-05  6.97e-01  
 16  +4.6271e-01  +4.7555e-01  1.28e-02  5.77e-06  9.08e-04  1.14e-06  2.34e-05  9.90e-01  
 17  +4.6102e-01  +4.6826e-01  7.23e-03  3.14e-06  4.93e-04  6.67e-07  1.30e-05  5.22e-01  
 18  +4.6084e-01  +4.6743e-01  6.59e-03  2.94e-06  4.63e-04  5.62e-07  1.26e-05  2.57e-01  
 19  +4.6066e-01  +4.6662e-01  5.96e-03  2.66e-06  4.18e-04  5.13e-07  1.14e-05  2.36e-01  
 20  +4.6040e-01  +4.6563e-01  5.23e-03  2.29e-06  3.60e-04  4.68e-07  9.62e-06  3.05e-01  
 21  +4.5944e-01  +4.6179e-01  2.35e-03  1.00e-06  1.57e-04  2.09e-07  4.29e-06  6.19e-01  
 22  +4.5872e-01  +4.5880e-01  7.65e-05  3.24e-08  5.09e-06  6.69e-09  1.41e-07  9.68e-01  
 23  +4.5870e-01  +4.5870e-01  7.67e-07  3.25e-10  5.10e-08  6.70e-11  1.42e-09  9.90e-01  
 24  +4.5870e-01  +4.5870e-01  7.67e-09  3.25e-12  5.10e-10  6.76e-13  1.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 76.5693ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:31 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:31 PM: Optimal value: 4.587e-01
(CVXPY) Sep 20 07:40:31 PM: Compilation took 1.652e-02 seconds
(CVXPY) Sep 20 07:40:31 PM: Solver (including time spent in interface) took 8.228e-02 seconds
Iteration: 5, Objective: 0.4587
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:31 PM: Your problem has 2565 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:31 PM: Finished problem compilation (took 1.603e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2565
  constraints   = 5065
  nnz(P)        = 0
  nnz(A)        = 36061
  cones (total) = 1
    : Nonnegative = 1,  numel = 5065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5010e+03  2.50e+03  9.79e-01  7.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.8733e-01  +5.2660e+02  5.26e+02  4.03e-01  4.84e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3717e-01  +6.4711e+01  6.42e+01  1.52e-01  2.30e+01  1.33e-02  2.53e-01  8.75e-01  
  3  +5.0932e-01  +1.6428e+01  1.59e+01  1.04e-01  1.55e+01  3.44e-05  2.43e-01  1.87e-01  
  4  +5.0055e-01  +1.3769e+00  8.76e-01  8.51e-03  1.31e+00  7.18e-06  1.35e-01  7.87e-01  
  5  +5.0017e-01  +8.5972e-01  3.60e-01  3.44e-03  5.36e-01  5.22e-06  7.28e-02  5.43e-01  
  6  +5.0008e-01  +7.9376e-01  2.94e-01  2.76e-03  4.30e-01  7.08e-06  3.13e-02  6.61e-01  
  7  +4.9886e-01  +7.5370e-01  2.55e-01  6.73e-04  1.06e-01  5.87e-05  2.32e-03  9.90e-01  
  8  +4.9608e-01  +7.0759e-01  2.12e-01  2.63e-04  4.16e-02  1.09e-04  8.70e-04  6.43e-01  
  9  +4.9504e-01  +6.7912e-01  1.84e-01  2.00e-04  3.16e-02  6.09e-05  6.47e-04  5.67e-01  
 10  +4.9328e-01  +6.6064e-01  1.67e-01  1.42e-04  2.24e-02  5.29e-05  4.56e-04  4.80e-01  
 11  +4.9312e-01  +6.5755e-01  1.64e-01  1.36e-04  2.15e-02  4.70e-05  4.37e-04  1.47e-01  
 12  +4.9136e-01  +6.4701e-01  1.56e-01  1.07e-04  1.68e-02  4.65e-05  3.43e-04  3.05e-01  
 13  +4.9041e-01  +6.3791e-01  1.48e-01  1.04e-04  1.65e-02  3.65e-05  3.37e-04  1.46e-01  
 14  +4.8135e-01  +5.8409e-01  1.03e-01  5.45e-05  8.59e-03  2.39e-05  1.82e-04  6.15e-01  
 15  +4.7289e-01  +5.3692e-01  6.40e-02  3.21e-05  5.06e-03  1.22e-05  1.12e-04  4.56e-01  
 16  +4.6856e-01  +5.1374e-01  4.52e-02  2.16e-05  3.41e-03  7.61e-06  7.71e-05  4.41e-01  
 17  +4.6632e-01  +4.9991e-01  3.36e-02  1.52e-05  2.39e-03  3.10e-06  5.53e-05  9.90e-01  
 18  +4.6051e-01  +4.7436e-01  1.39e-02  5.95e-06  9.36e-04  1.28e-06  2.29e-05  6.62e-01  
 19  +4.6022e-01  +4.7299e-01  1.28e-02  5.50e-06  8.66e-04  1.20e-06  2.13e-05  3.57e-01  
 20  +4.5718e-01  +4.6048e-01  3.30e-03  1.36e-06  2.14e-04  3.08e-07  5.57e-06  7.80e-01  
 21  +4.5623e-01  +4.5664e-01  4.05e-04  1.65e-07  2.60e-05  3.77e-08  6.89e-07  8.86e-01  
 22  +4.5611e-01  +4.5613e-01  2.38e-05  9.68e-09  1.52e-06  2.23e-09  4.05e-08  9.75e-01  
 23  +4.5610e-01  +4.5610e-01  2.39e-07  9.74e-11  1.53e-08  2.25e-11  4.08e-10  9.90e-01  
 24  +4.5610e-01  +4.5610e-01  2.40e-09  9.74e-13  1.53e-10  2.28e-13  4.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 74.5957ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:31 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:31 PM: Optimal value: 4.561e-01
(CVXPY) Sep 20 07:40:31 PM: Compilation took 1.603e-02 seconds
(CVXPY) Sep 20 07:40:31 PM: Solver (including time spent in interface) took 7.963e-02 seconds
Iteration: 6, Objective: 0.4561
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:32 PM: Your problem has 2574 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:32 PM: Finished problem compilation (took 1.751e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2574
  constraints   = 5074
  nnz(P)        = 0
  nnz(A)        = 36957
  cones (total) = 1
    : Nonnegative = 1,  numel = 5074

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5010e+03  2.50e+03  9.79e-01  7.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.8724e-01  +5.2657e+02  5.26e+02  4.03e-01  4.84e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3707e-01  +6.4585e+01  6.40e+01  1.52e-01  2.29e+01  1.33e-02  2.53e-01  8.76e-01  
  3  +5.0930e-01  +1.6393e+01  1.59e+01  1.04e-01  1.55e+01  3.44e-05  2.42e-01  1.89e-01  
  4  +5.0050e-01  +1.2931e+00  7.93e-01  7.71e-03  1.19e+00  7.05e-06  1.28e-01  8.35e-01  
  5  +5.0019e-01  +8.7591e-01  3.76e-01  3.61e-03  5.62e-01  5.75e-06  7.04e-02  5.48e-01  
  6  +5.0005e-01  +7.8728e-01  2.87e-01  2.63e-03  4.11e-01  9.23e-06  2.26e-02  7.77e-01  
  7  +4.9747e-01  +7.4611e-01  2.49e-01  3.41e-04  5.40e-02  1.29e-04  1.11e-03  9.73e-01  
  8  +4.9411e-01  +6.9264e-01  1.99e-01  2.11e-04  3.34e-02  1.16e-04  6.91e-04  4.45e-01  
  9  +4.9527e-01  +6.9632e-01  2.01e-01  2.07e-04  3.28e-02  8.50e-05  6.63e-04  3.06e-01  
 10  +4.9160e-01  +6.6202e-01  1.70e-01  1.27e-04  2.01e-02  8.55e-05  4.08e-04  4.55e-01  
 11  +4.9122e-01  +6.5498e-01  1.64e-01  1.25e-04  1.98e-02  6.93e-05  4.01e-04  1.35e-01  
 12  +4.8902e-01  +6.4027e-01  1.51e-01  9.81e-05  1.55e-02  5.50e-05  3.15e-04  4.13e-01  
 13  +4.8767e-01  +6.2815e-01  1.40e-01  9.36e-05  1.48e-02  3.54e-05  3.03e-04  2.77e-01  
 14  +4.8105e-01  +5.9084e-01  1.10e-01  6.10e-05  9.64e-03  2.75e-05  2.02e-04  4.01e-01  
 15  +4.7824e-01  +5.7497e-01  9.67e-02  5.19e-05  8.20e-03  2.23e-05  1.74e-04  2.13e-01  
 16  +4.7767e-01  +5.6807e-01  9.04e-02  4.79e-05  7.57e-03  1.30e-05  1.61e-04  5.08e-01  
 17  +4.6796e-01  +5.1851e-01  5.05e-02  2.45e-05  3.86e-03  5.20e-06  8.67e-05  6.63e-01  
 18  +4.5973e-01  +4.7859e-01  1.89e-02  8.51e-06  1.34e-03  1.71e-06  3.17e-05  7.87e-01  
 19  +4.5707e-01  +4.6690e-01  9.83e-03  4.28e-06  6.75e-04  8.92e-07  1.65e-05  5.11e-01  
 20  +4.5630e-01  +4.6321e-01  6.91e-03  2.92e-06  4.61e-04  6.68e-07  1.15e-05  8.96e-01  
 21  +4.5424e-01  +4.5492e-01  6.83e-04  2.80e-07  4.41e-05  6.56e-08  1.15e-06  9.10e-01  
 22  +4.5403e-01  +4.5411e-01  8.06e-05  3.29e-08  5.18e-06  7.74e-09  1.35e-07  8.89e-01  
 23  +4.5400e-01  +4.5400e-01  9.58e-07  3.90e-10  6.15e-08  9.20e-11  1.61e-09  9.90e-01  
 24  +4.5400e-01  +4.5400e-01  9.58e-09  3.90e-12  6.15e-10  9.20e-13  1.61e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 80.3911ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:32 PM: Optimal value: 4.540e-01
(CVXPY) Sep 20 07:40:32 PM: Compilation took 1.751e-02 seconds
(CVXPY) Sep 20 07:40:32 PM: Solver (including time spent in interface) took 8.516e-02 seconds
Iteration: 7, Objective: 0.4540
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:32 PM: Your problem has 2584 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:32 PM: Finished problem compilation (took 2.002e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2584
  constraints   = 5084
  nnz(P)        = 0
  nnz(A)        = 37828
  cones (total) = 1
    : Nonnegative = 1,  numel = 5084

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.79e-01  7.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.8708e-01  +5.2682e+02  5.26e+02  4.04e-01  4.84e+01  3.86e-03  5.48e-01  6.10e-01  
  2  +5.3704e-01  +6.4610e+01  6.41e+01  1.52e-01  2.29e+01  1.34e-02  2.53e-01  8.77e-01  
  3  +5.0928e-01  +1.6385e+01  1.59e+01  1.04e-01  1.55e+01  3.45e-05  2.43e-01  1.90e-01  
  4  +5.0056e-01  +1.3871e+00  8.87e-01  8.64e-03  1.34e+00  7.23e-06  1.35e-01  7.84e-01  
  5  +5.0017e-01  +8.5991e-01  3.60e-01  3.46e-03  5.39e-01  5.53e-06  6.96e-02  5.78e-01  
  6  +5.0002e-01  +8.2211e-01  3.22e-01  2.88e-03  4.49e-01  1.09e-05  2.18e-02  8.03e-01  
  7  +4.9772e-01  +7.6779e-01  2.70e-01  4.62e-04  7.32e-02  1.05e-04  1.54e-03  9.37e-01  
  8  +4.9507e-01  +7.2311e-01  2.28e-01  2.77e-04  4.38e-02  1.15e-04  9.14e-04  4.57e-01  
  9  +4.9226e-01  +6.8611e-01  1.94e-01  1.79e-04  2.83e-02  9.66e-05  5.84e-04  5.19e-01  
 10  +4.9038e-01  +6.7252e-01  1.82e-01  1.33e-04  2.11e-02  9.36e-05  4.32e-04  3.81e-01  
 11  +4.8977e-01  +6.6563e-01  1.76e-01  1.32e-04  2.09e-02  8.35e-05  4.31e-04  4.07e-02  
 12  +4.8868e-01  +6.5748e-01  1.69e-01  1.17e-04  1.85e-02  7.49e-05  3.82e-04  2.13e-01  
 13  +4.8617e-01  +6.3194e-01  1.46e-01  9.80e-05  1.55e-02  3.13e-05  3.23e-04  5.43e-01  
 14  +4.7786e-01  +5.8289e-01  1.05e-01  5.83e-05  9.20e-03  1.99e-05  1.97e-04  5.27e-01  
 15  +4.7619e-01  +5.7255e-01  9.64e-02  5.18e-05  8.17e-03  1.48e-05  1.76e-04  3.42e-01  
 16  +4.6771e-01  +5.2720e-01  5.95e-02  2.92e-05  4.61e-03  5.31e-06  1.04e-04  7.81e-01  
 17  +4.5913e-01  +4.8615e-01  2.70e-02  1.25e-05  1.96e-03  2.24e-06  4.64e-05  6.44e-01  
 18  +4.5417e-01  +4.6281e-01  8.63e-03  3.80e-06  5.98e-04  7.98e-07  1.47e-05  9.65e-01  
 19  +4.5184e-01  +4.5339e-01  1.55e-03  6.51e-07  1.03e-04  1.45e-07  2.68e-06  8.97e-01  
 20  +4.5134e-01  +4.5147e-01  1.29e-04  5.30e-08  8.34e-06  1.20e-08  2.23e-07  9.19e-01  
 21  +4.5130e-01  +4.5131e-01  5.92e-06  2.43e-09  3.82e-07  5.51e-10  1.02e-08  9.78e-01  
 22  +4.5130e-01  +4.5130e-01  5.94e-08  2.43e-11  3.83e-09  5.53e-12  1.03e-10  9.90e-01  
 23  +4.5130e-01  +4.5130e-01  5.94e-10  2.44e-13  3.84e-11  5.74e-14  1.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 80.5472ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:32 PM: Optimal value: 4.513e-01
(CVXPY) Sep 20 07:40:32 PM: Compilation took 2.002e-02 seconds
(CVXPY) Sep 20 07:40:32 PM: Solver (including time spent in interface) took 8.632e-02 seconds
Iteration: 8, Objective: 0.4513
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:32 PM: Your problem has 2594 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:32 PM: Finished problem compilation (took 2.025e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2594
  constraints   = 5094
  nnz(P)        = 0
  nnz(A)        = 38862
  cones (total) = 1
    : Nonnegative = 1,  numel = 5094

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5011e+03  2.50e+03  9.80e-01  7.82e+01  1.00e+00  1.00e+00   ------   
  1  +5.8687e-01  +5.2713e+02  5.27e+02  4.05e-01  4.84e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3684e-01  +6.4420e+01  6.39e+01  1.52e-01  2.28e+01  1.34e-02  2.53e-01  8.79e-01  
  3  +5.0924e-01  +1.6342e+01  1.58e+01  1.04e-01  1.54e+01  3.47e-05  2.42e-01  1.93e-01  
  4  +5.0050e-01  +1.2973e+00  7.97e-01  7.78e-03  1.20e+00  7.10e-06  1.27e-01  8.38e-01  
  5  +5.0025e-01  +9.7071e-01  4.70e-01  4.54e-03  7.08e-01  6.47e-06  7.93e-02  4.56e-01  
  6  +5.0014e-01  +8.7828e-01  3.78e-01  3.57e-03  5.56e-01  8.53e-06  3.61e-02  6.24e-01  
  7  +4.9888e-01  +8.1140e-01  3.13e-01  7.83e-04  1.24e-01  6.78e-05  2.61e-03  9.90e-01  
  8  +4.9661e-01  +7.6483e-01  2.68e-01  3.64e-04  5.76e-02  1.06e-04  1.17e-03  6.03e-01  
  9  +4.9595e-01  +7.4458e-01  2.49e-01  2.96e-04  4.70e-02  8.03e-05  9.48e-04  4.15e-01  
 10  +4.9378e-01  +7.2115e-01  2.27e-01  2.13e-04  3.37e-02  8.25e-05  6.80e-04  3.57e-01  
 11  +4.9250e-01  +7.0901e-01  2.17e-01  1.77e-04  2.80e-02  7.79e-05  5.65e-04  2.68e-01  
 12  +4.9040e-01  +6.7552e-01  1.85e-01  1.31e-04  2.08e-02  2.40e-05  4.21e-04  7.86e-01  
 13  +4.8921e-01  +6.6722e-01  1.78e-01  1.27e-04  2.01e-02  2.15e-05  4.08e-04  1.04e-01  
 14  +4.7495e-01  +5.8047e-01  1.06e-01  5.49e-05  8.67e-03  1.30e-05  1.86e-04  6.76e-01  
 15  +4.7330e-01  +5.7264e-01  9.93e-02  5.05e-05  7.97e-03  1.19e-05  1.72e-04  1.72e-01  
 16  +4.6995e-01  +5.5594e-01  8.60e-02  4.25e-05  6.71e-03  9.26e-06  1.48e-04  3.70e-01  
 17  +4.6248e-01  +5.1894e-01  5.65e-02  2.69e-05  4.24e-03  5.41e-06  9.82e-05  5.24e-01  
 18  +4.5428e-01  +4.7995e-01  2.57e-02  1.16e-05  1.83e-03  2.30e-06  4.50e-05  6.58e-01  
 19  +4.4944e-01  +4.5757e-01  8.13e-03  3.50e-06  5.52e-04  7.54e-07  1.44e-05  9.90e-01  
 20  +4.4789e-01  +4.5122e-01  3.33e-03  1.41e-06  2.23e-04  3.08e-07  5.97e-06  6.09e-01  
 21  +4.4708e-01  +4.4790e-01  8.16e-04  3.44e-07  5.42e-05  7.42e-08  1.48e-06  9.90e-01  
 22  +4.4680e-01  +4.4682e-01  1.41e-05  5.91e-09  9.32e-07  1.27e-09  2.56e-08  9.83e-01  
 23  +4.4680e-01  +4.4680e-01  1.41e-07  5.91e-11  9.32e-09  1.27e-11  2.56e-10  9.90e-01  
 24  +4.4680e-01  +4.4680e-01  1.41e-09  5.91e-13  9.32e-11  1.28e-13  2.58e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 81.1456ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:32 PM: Optimal value: 4.468e-01
(CVXPY) Sep 20 07:40:32 PM: Compilation took 2.025e-02 seconds
(CVXPY) Sep 20 07:40:32 PM: Solver (including time spent in interface) took 8.713e-02 seconds
Iteration: 9, Objective: 0.4468
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:32 PM: Your problem has 2604 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:32 PM: Finished problem compilation (took 2.103e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2604
  constraints   = 5104
  nnz(P)        = 0
  nnz(A)        = 39603
  cones (total) = 1
    : Nonnegative = 1,  numel = 5104

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5011e+03  2.50e+03  9.80e-01  7.82e+01  1.00e+00  1.00e+00   ------   
  1  +5.8675e-01  +5.2706e+02  5.26e+02  4.05e-01  4.84e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3678e-01  +6.4345e+01  6.38e+01  1.51e-01  2.27e+01  1.34e-02  2.52e-01  8.80e-01  
  3  +5.0922e-01  +1.6319e+01  1.58e+01  1.04e-01  1.54e+01  3.47e-05  2.42e-01  1.95e-01  
  4  +5.0054e-01  +1.3580e+00  8.57e-01  8.38e-03  1.30e+00  7.24e-06  1.31e-01  8.05e-01  
  5  +5.0025e-01  +9.7664e-01  4.76e-01  4.60e-03  7.17e-01  6.46e-06  7.99e-02  4.73e-01  
  6  +5.0008e-01  +8.6923e-01  3.69e-01  3.39e-03  5.29e-01  1.02e-05  2.76e-02  7.59e-01  
  7  +4.9785e-01  +8.1914e-01  3.21e-01  5.50e-04  8.71e-02  1.07e-04  1.80e-03  9.57e-01  
  8  +4.9475e-01  +7.3627e-01  2.42e-01  2.90e-04  4.60e-02  8.43e-05  9.44e-04  6.55e-01  
  9  +4.9485e-01  +7.3130e-01  2.36e-01  2.39e-04  3.78e-02  5.72e-05  7.60e-04  5.50e-01  
 10  +4.9425e-01  +7.1294e-01  2.19e-01  1.92e-04  3.05e-02  3.29e-05  6.06e-04  6.15e-01  
 11  +4.9117e-01  +6.7883e-01  1.88e-01  1.35e-04  2.14e-02  1.14e-05  4.29e-04  9.71e-01  
 12  +4.8448e-01  +6.4103e-01  1.57e-01  9.37e-05  1.48e-02  1.04e-05  3.04e-04  6.27e-01  
 13  +4.7450e-01  +5.8353e-01  1.09e-01  5.94e-05  9.38e-03  6.87e-06  2.03e-04  4.11e-01  
 14  +4.6869e-01  +5.5188e-01  8.32e-02  4.25e-05  6.70e-03  5.78e-06  1.49e-04  6.20e-01  
 15  +4.6445e-01  +5.3072e-01  6.63e-02  3.24e-05  5.12e-03  4.92e-06  1.17e-04  5.72e-01  
 16  +4.5938e-01  +5.0661e-01  4.72e-02  2.22e-05  3.49e-03  3.53e-06  8.25e-05  4.00e-01  
 17  +4.5516e-01  +4.8623e-01  3.11e-02  1.40e-05  2.21e-03  2.54e-06  5.40e-05  6.37e-01  
 18  +4.4824e-01  +4.5535e-01  7.12e-03  3.05e-06  4.80e-04  5.80e-07  1.27e-05  8.67e-01  
 19  +4.4712e-01  +4.5041e-01  3.29e-03  1.39e-06  2.19e-04  3.01e-07  5.89e-06  9.60e-01  
 20  +4.4604e-01  +4.4615e-01  1.11e-04  4.68e-08  7.37e-06  1.00e-08  2.02e-07  9.66e-01  
 21  +4.4600e-01  +4.4600e-01  1.11e-06  4.68e-10  7.37e-08  1.00e-10  2.02e-09  9.90e-01  
 22  +4.4600e-01  +4.4600e-01  1.11e-08  4.68e-12  7.37e-10  1.01e-12  2.03e-11  9.90e-01  
 23  +4.4600e-01  +4.4600e-01  1.11e-10  4.68e-14  7.37e-12  1.01e-14  2.04e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 80.3387ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:32 PM: Optimal value: 4.460e-01
(CVXPY) Sep 20 07:40:32 PM: Compilation took 2.103e-02 seconds
(CVXPY) Sep 20 07:40:32 PM: Solver (including time spent in interface) took 8.649e-02 seconds
Iteration: 10, Objective: 0.4460
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:33 PM: Your problem has 2614 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:33 PM: Finished problem compilation (took 2.254e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2614
  constraints   = 5114
  nnz(P)        = 0
  nnz(A)        = 40067
  cones (total) = 1
    : Nonnegative = 1,  numel = 5114

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5011e+03  2.50e+03  9.80e-01  7.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.8664e-01  +5.2716e+02  5.27e+02  4.05e-01  4.83e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3669e-01  +6.4259e+01  6.37e+01  1.51e-01  2.27e+01  1.34e-02  2.52e-01  8.81e-01  
  3  +5.0920e-01  +1.6305e+01  1.58e+01  1.04e-01  1.53e+01  3.48e-05  2.41e-01  1.96e-01  
  4  +5.0055e-01  +1.3725e+00  8.72e-01  8.53e-03  1.32e+00  7.28e-06  1.31e-01  7.99e-01  
  5  +5.0026e-01  +1.0050e+00  5.05e-01  4.88e-03  7.59e-01  6.79e-06  8.14e-02  4.71e-01  
  6  +5.0005e-01  +9.1148e-01  4.11e-01  3.60e-03  5.62e-01  1.31e-05  2.37e-02  8.50e-01  
  7  +4.9705e-01  +8.4151e-01  3.44e-01  4.68e-04  7.43e-02  1.37e-04  1.53e-03  9.49e-01  
  8  +4.9362e-01  +7.4770e-01  2.54e-01  3.01e-04  4.76e-02  7.32e-05  9.91e-04  5.46e-01  
  9  +4.9324e-01  +7.4630e-01  2.53e-01  2.26e-04  3.58e-02  6.74e-05  7.26e-04  5.13e-01  
 10  +4.9300e-01  +7.3876e-01  2.46e-01  2.24e-04  3.54e-02  5.87e-05  7.16e-04  9.79e-02  
 11  +4.8967e-01  +7.0400e-01  2.14e-01  1.49e-04  2.36e-02  4.66e-05  4.79e-04  5.63e-01  
 12  +4.8720e-01  +6.8117e-01  1.94e-01  1.24e-04  1.96e-02  3.11e-05  4.01e-04  4.49e-01  
 13  +4.7639e-01  +6.0602e-01  1.30e-01  7.54e-05  1.19e-02  1.21e-05  2.58e-04  6.40e-01  
 14  +4.7232e-01  +5.8385e-01  1.12e-01  6.17e-05  9.74e-03  1.01e-05  2.16e-04  2.37e-01  
 15  +4.6641e-01  +5.5075e-01  8.43e-02  4.40e-05  6.93e-03  6.67e-06  1.59e-04  5.96e-01  
 16  +4.5900e-01  +5.1285e-01  5.39e-02  2.66e-05  4.19e-03  4.07e-06  1.00e-04  4.63e-01  
 17  +4.5246e-01  +4.7892e-01  2.65e-02  1.24e-05  1.95e-03  2.16e-06  4.85e-05  8.73e-01  
 18  +4.4823e-01  +4.5879e-01  1.06e-02  4.86e-06  7.65e-04  9.40e-07  1.97e-05  9.90e-01  
 19  +4.4577e-01  +4.4795e-01  2.18e-03  9.95e-07  1.57e-04  1.90e-07  4.18e-06  8.09e-01  
 20  +4.4521e-01  +4.4554e-01  3.38e-04  1.53e-07  2.41e-05  2.84e-08  6.55e-07  9.90e-01  
 21  +4.4510e-01  +4.4511e-01  4.23e-06  1.92e-09  3.02e-07  3.54e-10  8.21e-09  9.88e-01  
 22  +4.4510e-01  +4.4510e-01  4.23e-08  1.92e-11  3.02e-09  3.55e-12  8.22e-11  9.90e-01  
 23  +4.4510e-01  +4.4510e-01  4.23e-10  1.92e-13  3.02e-11  3.57e-14  8.26e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 83.8402ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:33 PM: Optimal value: 4.451e-01
(CVXPY) Sep 20 07:40:33 PM: Compilation took 2.254e-02 seconds
(CVXPY) Sep 20 07:40:33 PM: Solver (including time spent in interface) took 8.997e-02 seconds
Iteration: 11, Objective: 0.4451
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:33 PM: Your problem has 2624 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:33 PM: Finished problem compilation (took 2.202e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2624
  constraints   = 5124
  nnz(P)        = 0
  nnz(A)        = 40533
  cones (total) = 1
    : Nonnegative = 1,  numel = 5124

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5011e+03  2.50e+03  9.80e-01  7.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.8665e-01  +5.2713e+02  5.27e+02  4.06e-01  4.82e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3670e-01  +6.4280e+01  6.37e+01  1.51e-01  2.26e+01  1.34e-02  2.52e-01  8.81e-01  
  3  +5.0920e-01  +1.6301e+01  1.58e+01  1.04e-01  1.53e+01  3.48e-05  2.41e-01  1.96e-01  
  4  +5.0054e-01  +1.3544e+00  8.54e-01  8.36e-03  1.29e+00  7.25e-06  1.30e-01  8.09e-01  
  5  +5.0027e-01  +1.0086e+00  5.08e-01  4.92e-03  7.65e-01  6.89e-06  8.11e-02  4.68e-01  
  6  +5.0009e-01  +9.3018e-01  4.30e-01  3.87e-03  6.03e-01  1.21e-05  2.78e-02  7.87e-01  
  7  +4.9772e-01  +8.5773e-01  3.60e-01  5.85e-04  9.27e-02  1.13e-04  1.92e-03  9.58e-01  
  8  +4.9305e-01  +7.2982e-01  2.37e-01  2.57e-04  4.07e-02  8.06e-05  8.49e-04  7.36e-01  
  9  +4.9248e-01  +7.3369e-01  2.41e-01  2.06e-04  3.26e-02  8.26e-05  6.64e-04  3.90e-01  
 10  +4.9195e-01  +7.2498e-01  2.33e-01  1.97e-04  3.11e-02  7.05e-05  6.33e-04  1.58e-01  
 11  +4.9001e-01  +7.1035e-01  2.20e-01  1.60e-04  2.53e-02  6.60e-05  5.15e-04  2.92e-01  
 12  +4.8883e-01  +6.9010e-01  2.01e-01  1.40e-04  2.21e-02  2.02e-05  4.54e-04  7.16e-01  
 13  +4.7715e-01  +6.1131e-01  1.34e-01  7.82e-05  1.23e-02  1.07e-05  2.68e-04  6.62e-01  
 14  +4.7319e-01  +5.9008e-01  1.17e-01  6.53e-05  1.03e-02  9.07e-06  2.28e-04  2.20e-01  
 15  +4.6843e-01  +5.6449e-01  9.61e-02  5.15e-05  8.12e-03  7.07e-06  1.85e-04  4.20e-01  
 16  +4.6071e-01  +5.2454e-01  6.38e-02  3.21e-05  5.06e-03  4.53e-06  1.21e-04  5.54e-01  
 17  +4.5482e-01  +4.9551e-01  4.07e-02  1.96e-05  3.09e-03  2.86e-06  7.72e-05  4.39e-01  
 18  +4.5185e-01  +4.7933e-01  2.75e-02  1.28e-05  2.02e-03  2.29e-06  5.15e-05  8.67e-01  
 19  +4.4614e-01  +4.5333e-01  7.19e-03  3.30e-06  5.19e-04  5.80e-07  1.40e-05  7.78e-01  
 20  +4.4506e-01  +4.4851e-01  3.45e-03  1.57e-06  2.47e-04  2.80e-07  6.74e-06  5.32e-01  
 21  +4.4474e-01  +4.4697e-01  2.23e-03  1.01e-06  1.60e-04  1.84e-07  4.38e-06  8.92e-01  
 22  +4.4415e-01  +4.4449e-01  3.37e-04  1.53e-07  2.41e-05  2.78e-08  6.65e-07  8.51e-01  
 23  +4.4405e-01  +4.4406e-01  5.57e-06  2.53e-09  3.98e-07  4.59e-10  1.10e-08  9.83e-01  
 24  +4.4405e-01  +4.4405e-01  5.57e-08  2.53e-11  3.98e-09  4.59e-12  1.10e-10  9.90e-01  
 25  +4.4405e-01  +4.4405e-01  5.57e-10  2.53e-13  3.98e-11  4.59e-14  1.10e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 96.054ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:33 PM: Optimal value: 4.441e-01
(CVXPY) Sep 20 07:40:33 PM: Compilation took 2.202e-02 seconds
(CVXPY) Sep 20 07:40:33 PM: Solver (including time spent in interface) took 1.018e-01 seconds
Iteration: 12, Objective: 0.4441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:33 PM: Your problem has 2625 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:33 PM: Finished problem compilation (took 2.507e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2625
  constraints   = 5125
  nnz(P)        = 0
  nnz(A)        = 40633
  cones (total) = 1
    : Nonnegative = 1,  numel = 5125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5011e+03  2.50e+03  9.80e-01  7.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.8665e-01  +5.2712e+02  5.27e+02  4.06e-01  4.82e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3670e-01  +6.4280e+01  6.37e+01  1.51e-01  2.26e+01  1.34e-02  2.52e-01  8.81e-01  
  3  +5.0920e-01  +1.6301e+01  1.58e+01  1.04e-01  1.53e+01  3.48e-05  2.41e-01  1.96e-01  
  4  +5.0054e-01  +1.3555e+00  8.55e-01  8.37e-03  1.29e+00  7.25e-06  1.30e-01  8.08e-01  
  5  +5.0027e-01  +1.0102e+00  5.10e-01  4.94e-03  7.68e-01  6.88e-06  8.14e-02  4.65e-01  
  6  +5.0010e-01  +9.3056e-01  4.30e-01  3.89e-03  6.06e-01  1.19e-05  2.85e-02  7.76e-01  
  7  +4.9776e-01  +8.5755e-01  3.60e-01  5.90e-04  9.35e-02  1.12e-04  1.94e-03  9.61e-01  
  8  +4.9282e-01  +7.2357e-01  2.31e-01  2.45e-04  3.88e-02  8.11e-05  8.10e-04  7.61e-01  
  9  +4.9262e-01  +7.3264e-01  2.40e-01  1.99e-04  3.15e-02  8.30e-05  6.39e-04  4.10e-01  
 10  +4.9211e-01  +7.2268e-01  2.31e-01  1.92e-04  3.04e-02  6.60e-05  6.15e-04  1.87e-01  
 11  +4.9035e-01  +7.1038e-01  2.20e-01  1.60e-04  2.54e-02  6.39e-05  5.15e-04  2.40e-01  
 12  +4.8816e-01  +6.8416e-01  1.96e-01  1.30e-04  2.05e-02  1.67e-05  4.20e-04  8.12e-01  
 13  +4.7717e-01  +6.1350e-01  1.36e-01  7.78e-05  1.23e-02  1.00e-05  2.65e-04  6.08e-01  
 14  +4.7227e-01  +5.8655e-01  1.14e-01  6.24e-05  9.85e-03  8.20e-06  2.19e-04  2.20e-01  
 15  +4.6690e-01  +5.5690e-01  9.00e-02  4.71e-05  7.42e-03  6.36e-06  1.70e-04  5.15e-01  
 16  +4.5923e-01  +5.1765e-01  5.84e-02  2.89e-05  4.56e-03  4.03e-06  1.10e-04  4.57e-01  
 17  +4.5468e-01  +4.9331e-01  3.86e-02  1.82e-05  2.87e-03  3.12e-06  7.16e-05  8.40e-01  
 18  +4.5061e-01  +4.7332e-01  2.27e-02  1.05e-05  1.65e-03  2.04e-06  4.25e-05  9.90e-01  
 19  +4.4602e-01  +4.5271e-01  6.69e-03  3.07e-06  4.82e-04  5.89e-07  1.30e-05  7.17e-01  
 20  +4.4518e-01  +4.4902e-01  3.84e-03  1.75e-06  2.75e-04  3.39e-07  7.49e-06  4.46e-01  
 21  +4.4470e-01  +4.4679e-01  2.09e-03  9.54e-07  1.50e-04  1.77e-07  4.11e-06  8.79e-01  
 22  +4.4411e-01  +4.4431e-01  1.98e-04  9.02e-08  1.42e-05  1.67e-08  3.92e-07  9.07e-01  
 23  +4.4405e-01  +4.4405e-01  2.09e-06  9.51e-10  1.50e-07  1.75e-10  4.14e-09  9.90e-01  
 24  +4.4405e-01  +4.4405e-01  2.09e-08  9.51e-12  1.50e-09  1.75e-12  4.14e-11  9.90e-01  
 25  +4.4405e-01  +4.4405e-01  2.09e-10  9.51e-14  1.50e-11  1.75e-14  4.14e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 99.8586ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:33 PM: Optimal value: 4.441e-01
(CVXPY) Sep 20 07:40:33 PM: Compilation took 2.507e-02 seconds
(CVXPY) Sep 20 07:40:33 PM: Solver (including time spent in interface) took 1.062e-01 seconds
Iteration: 13, Objective: 0.4441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:33 PM: Your problem has 2629 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:33 PM: Finished problem compilation (took 2.388e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2629
  constraints   = 5129
  nnz(P)        = 0
  nnz(A)        = 40865
  cones (total) = 1
    : Nonnegative = 1,  numel = 5129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5011e+03  2.50e+03  9.80e-01  7.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.8665e-01  +5.2707e+02  5.26e+02  4.06e-01  4.82e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3670e-01  +6.4268e+01  6.37e+01  1.51e-01  2.25e+01  1.34e-02  2.52e-01  8.81e-01  
  3  +5.0920e-01  +1.6295e+01  1.58e+01  1.04e-01  1.53e+01  3.47e-05  2.41e-01  1.96e-01  
  4  +5.0050e-01  +1.2829e+00  7.82e-01  7.66e-03  1.19e+00  7.12e-06  1.24e-01  8.49e-01  
  5  +5.0029e-01  +1.0352e+00  5.35e-01  5.19e-03  8.06e-01  7.27e-06  8.23e-02  4.34e-01  
  6  +5.0014e-01  +9.5295e-01  4.53e-01  4.10e-03  6.39e-01  1.21e-05  3.00e-02  7.88e-01  
  7  +4.9768e-01  +8.4013e-01  3.42e-01  4.94e-04  7.84e-02  1.27e-04  1.61e-03  9.79e-01  
  8  +4.9364e-01  +7.3731e-01  2.44e-01  2.75e-04  4.34e-02  7.33e-05  9.04e-04  6.47e-01  
  9  +4.9240e-01  +7.3154e-01  2.39e-01  2.10e-04  3.32e-02  7.44e-05  6.79e-04  4.00e-01  
 10  +4.9170e-01  +7.2067e-01  2.29e-01  1.94e-04  3.07e-02  6.09e-05  6.25e-04  2.33e-01  
 11  +4.8921e-01  +7.0299e-01  2.14e-01  1.51e-04  2.39e-02  5.83e-05  4.88e-04  3.17e-01  
 12  +4.8764e-01  +6.8746e-01  2.00e-01  1.35e-04  2.14e-02  4.00e-05  4.40e-04  3.58e-01  
 13  +4.8133e-01  +6.3843e-01  1.57e-01  1.02e-04  1.61e-02  1.11e-05  3.43e-04  7.40e-01  
 14  +4.7183e-01  +5.8493e-01  1.13e-01  6.31e-05  9.95e-03  8.06e-06  2.22e-04  4.04e-01  
 15  +4.6697e-01  +5.5792e-01  9.09e-02  4.82e-05  7.59e-03  6.38e-06  1.74e-04  5.24e-01  
 16  +4.6088e-01  +5.2668e-01  6.58e-02  3.31e-05  5.21e-03  4.55e-06  1.24e-04  3.71e-01  
 17  +4.5498e-01  +4.9535e-01  4.04e-02  1.92e-05  3.03e-03  3.16e-06  7.47e-05  8.50e-01  
 18  +4.5200e-01  +4.8062e-01  2.86e-02  1.34e-05  2.11e-03  2.37e-06  5.31e-05  5.93e-01  
 19  +4.4998e-01  +4.7123e-01  2.13e-02  9.84e-06  1.55e-03  1.77e-06  3.97e-05  3.37e-01  
 20  +4.4758e-01  +4.6018e-01  1.26e-02  5.77e-06  9.07e-04  1.06e-06  2.38e-05  5.48e-01  
 21  +4.4475e-01  +4.4741e-01  2.66e-03  1.21e-06  1.90e-04  2.25e-07  5.14e-06  8.68e-01  
 22  +4.4405e-01  +4.4439e-01  3.34e-04  1.51e-07  2.37e-05  2.83e-08  6.50e-07  9.29e-01  
 23  +4.4395e-01  +4.4396e-01  4.22e-06  1.91e-09  3.00e-07  3.55e-10  8.24e-09  9.90e-01  
 24  +4.4395e-01  +4.4395e-01  4.23e-08  1.91e-11  3.00e-09  3.55e-12  8.24e-11  9.90e-01  
 25  +4.4395e-01  +4.4395e-01  4.23e-10  1.91e-13  3.00e-11  3.56e-14  8.26e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 95.5044ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:33 PM: Optimal value: 4.440e-01
(CVXPY) Sep 20 07:40:33 PM: Compilation took 2.388e-02 seconds
(CVXPY) Sep 20 07:40:33 PM: Solver (including time spent in interface) took 1.020e-01 seconds
Iteration: 14, Objective: 0.4440
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:34 PM: Your problem has 2631 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:34 PM: Finished problem compilation (took 2.353e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2631
  constraints   = 5131
  nnz(P)        = 0
  nnz(A)        = 41000
  cones (total) = 1
    : Nonnegative = 1,  numel = 5131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5011e+03  2.50e+03  9.80e-01  7.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.8665e-01  +5.2708e+02  5.26e+02  4.06e-01  4.82e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3670e-01  +6.4268e+01  6.37e+01  1.51e-01  2.25e+01  1.34e-02  2.52e-01  8.81e-01  
  3  +5.0920e-01  +1.6292e+01  1.58e+01  1.04e-01  1.53e+01  3.47e-05  2.41e-01  1.96e-01  
  4  +5.0050e-01  +1.2925e+00  7.92e-01  7.76e-03  1.20e+00  7.14e-06  1.25e-01  8.44e-01  
  5  +5.0029e-01  +1.0357e+00  5.35e-01  5.20e-03  8.07e-01  7.23e-06  8.26e-02  4.32e-01  
  6  +5.0013e-01  +9.5937e-01  4.59e-01  4.12e-03  6.41e-01  1.26e-05  2.87e-02  8.14e-01  
  7  +4.9760e-01  +8.5111e-01  3.54e-01  5.07e-04  8.03e-02  1.28e-04  1.65e-03  9.68e-01  
  8  +4.9303e-01  +7.3844e-01  2.45e-01  2.71e-04  4.29e-02  8.08e-05  8.99e-04  6.14e-01  
  9  +4.9247e-01  +7.4038e-01  2.48e-01  2.16e-04  3.43e-02  8.15e-05  7.00e-04  3.94e-01  
 10  +4.9171e-01  +7.2662e-01  2.35e-01  1.96e-04  3.10e-02  6.38e-05  6.31e-04  2.80e-01  
 11  +4.8822e-01  +7.0071e-01  2.12e-01  1.42e-04  2.25e-02  5.99e-05  4.62e-04  3.73e-01  
 12  +4.8623e-01  +6.8255e-01  1.96e-01  1.35e-04  2.14e-02  4.49e-05  4.44e-04  1.74e-01  
 13  +4.8496e-01  +6.7149e-01  1.87e-01  1.27e-04  2.01e-02  3.45e-05  4.20e-04  2.37e-01  
 14  +4.7094e-01  +5.8299e-01  1.12e-01  5.98e-05  9.42e-03  1.83e-05  2.10e-04  6.20e-01  
 15  +4.6856e-01  +5.6993e-01  1.01e-01  5.28e-05  8.32e-03  1.45e-05  1.88e-04  2.79e-01  
 16  +4.6076e-01  +5.2828e-01  6.75e-02  3.34e-05  5.26e-03  8.61e-06  1.25e-04  4.23e-01  
 17  +4.5813e-01  +5.1348e-01  5.53e-02  2.70e-05  4.25e-03  6.13e-06  1.03e-04  4.50e-01  
 18  +4.5295e-01  +4.8701e-01  3.41e-02  1.61e-05  2.53e-03  3.46e-06  6.32e-05  5.93e-01  
 19  +4.4828e-01  +4.6438e-01  1.61e-02  7.41e-06  1.17e-03  1.57e-06  3.03e-05  6.36e-01  
 20  +4.4778e-01  +4.6191e-01  1.41e-02  6.48e-06  1.02e-03  1.36e-06  2.66e-05  2.35e-01  
 21  +4.4617e-01  +4.5441e-01  8.23e-03  3.72e-06  5.84e-04  7.75e-07  1.55e-05  6.00e-01  
 22  +4.4512e-01  +4.4973e-01  4.61e-03  2.04e-06  3.21e-04  4.28e-07  8.71e-06  5.79e-01  
 23  +4.4412e-01  +4.4547e-01  1.34e-03  5.84e-07  9.19e-05  1.21e-07  2.56e-06  8.08e-01  
 24  +4.4371e-01  +4.4374e-01  3.37e-05  1.46e-08  2.29e-06  2.91e-09  6.47e-08  9.88e-01  
 25  +4.4370e-01  +4.4370e-01  3.38e-07  1.46e-10  2.29e-08  2.91e-11  6.47e-10  9.90e-01  
 26  +4.4370e-01  +4.4370e-01  3.38e-09  1.46e-12  2.29e-10  2.97e-13  6.60e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 98.6454ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:34 PM: Optimal value: 4.437e-01
(CVXPY) Sep 20 07:40:34 PM: Compilation took 2.353e-02 seconds
(CVXPY) Sep 20 07:40:34 PM: Solver (including time spent in interface) took 1.056e-01 seconds
Iteration: 15, Objective: 0.4437
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:34 PM: Your problem has 2636 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:34 PM: Finished problem compilation (took 2.339e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2636
  constraints   = 5136
  nnz(P)        = 0
  nnz(A)        = 41305
  cones (total) = 1
    : Nonnegative = 1,  numel = 5136

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5011e+03  2.50e+03  9.80e-01  7.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.8662e-01  +5.2706e+02  5.26e+02  4.06e-01  4.82e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3670e-01  +6.4274e+01  6.37e+01  1.51e-01  2.25e+01  1.34e-02  2.52e-01  8.81e-01  
  3  +5.0920e-01  +1.6293e+01  1.58e+01  1.04e-01  1.53e+01  3.47e-05  2.41e-01  1.96e-01  
  4  +5.0050e-01  +1.2954e+00  7.95e-01  7.79e-03  1.20e+00  7.15e-06  1.25e-01  8.42e-01  
  5  +5.0029e-01  +1.0372e+00  5.37e-01  5.21e-03  8.10e-01  7.22e-06  8.28e-02  4.29e-01  
  6  +5.0010e-01  +9.4411e-01  4.44e-01  3.91e-03  6.10e-01  1.33e-05  2.59e-02  8.50e-01  
  7  +4.9756e-01  +8.4537e-01  3.48e-01  4.85e-04  7.69e-02  1.28e-04  1.59e-03  9.88e-01  
  8  +4.9300e-01  +7.3780e-01  2.45e-01  2.75e-04  4.35e-02  7.98e-05  9.14e-04  5.63e-01  
  9  +4.9372e-01  +7.5146e-01  2.58e-01  2.33e-04  3.69e-02  7.57e-05  7.47e-04  4.32e-01  
 10  +4.9340e-01  +7.4040e-01  2.47e-01  2.24e-04  3.54e-02  5.91e-05  7.14e-04  2.14e-01  
 11  +4.8825e-01  +7.0089e-01  2.13e-01  1.34e-04  2.12e-02  6.24e-05  4.32e-04  4.78e-01  
 12  +4.8734e-01  +6.9333e-01  2.06e-01  1.33e-04  2.10e-02  5.73e-05  4.32e-04  2.31e-02  
 13  +4.7992e-01  +6.3613e-01  1.56e-01  9.53e-05  1.50e-02  2.17e-05  3.22e-04  5.89e-01  
 14  +4.7065e-01  +5.8190e-01  1.11e-01  6.08e-05  9.58e-03  1.43e-05  2.15e-04  3.92e-01  
 15  +4.6526e-01  +5.4972e-01  8.45e-02  4.37e-05  6.88e-03  7.62e-06  1.60e-04  6.76e-01  
 16  +4.6102e-01  +5.2812e-01  6.71e-02  3.35e-05  5.27e-03  5.89e-06  1.25e-04  2.91e-01  
 17  +4.5604e-01  +5.0189e-01  4.58e-02  2.20e-05  3.46e-03  3.86e-06  8.46e-05  6.54e-01  
 18  +4.5030e-01  +4.7434e-01  2.40e-02  1.11e-05  1.75e-03  1.99e-06  4.47e-05  5.63e-01  
 19  +4.4868e-01  +4.6674e-01  1.81e-02  8.24e-06  1.30e-03  1.51e-06  3.35e-05  3.54e-01  
 20  +4.4572e-01  +4.5326e-01  7.54e-03  3.32e-06  5.22e-04  6.54e-07  1.39e-05  7.28e-01  
 21  +4.4455e-01  +4.4810e-01  3.54e-03  1.54e-06  2.42e-04  3.10e-07  6.61e-06  8.62e-01  
 22  +4.4347e-01  +4.4370e-01  2.24e-04  9.59e-08  1.51e-05  1.90e-08  4.22e-07  9.52e-01  
 23  +4.4340e-01  +4.4340e-01  2.33e-06  9.97e-10  1.57e-07  1.97e-10  4.40e-09  9.90e-01  
 24  +4.4340e-01  +4.4340e-01  2.33e-08  9.97e-12  1.57e-09  1.97e-12  4.40e-11  9.90e-01  
 25  +4.4340e-01  +4.4340e-01  2.33e-10  9.97e-14  1.57e-11  2.01e-14  4.47e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 95.162ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:34 PM: Optimal value: 4.434e-01
(CVXPY) Sep 20 07:40:34 PM: Compilation took 2.339e-02 seconds
(CVXPY) Sep 20 07:40:34 PM: Solver (including time spent in interface) took 1.032e-01 seconds
Iteration: 16, Objective: 0.4434
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:34 PM: Your problem has 2639 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:34 PM: Finished problem compilation (took 2.253e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2639
  constraints   = 5139
  nnz(P)        = 0
  nnz(A)        = 41561
  cones (total) = 1
    : Nonnegative = 1,  numel = 5139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5011e+03  2.50e+03  9.80e-01  7.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.8659e-01  +5.2712e+02  5.27e+02  4.06e-01  4.82e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3667e-01  +6.4241e+01  6.37e+01  1.51e-01  2.25e+01  1.34e-02  2.52e-01  8.81e-01  
  3  +5.0919e-01  +1.6288e+01  1.58e+01  1.04e-01  1.53e+01  3.48e-05  2.41e-01  1.97e-01  
  4  +5.0050e-01  +1.2923e+00  7.92e-01  7.76e-03  1.20e+00  7.14e-06  1.25e-01  8.44e-01  
  5  +5.0030e-01  +1.0442e+00  5.44e-01  5.28e-03  8.20e-01  7.25e-06  8.34e-02  4.21e-01  
  6  +5.0011e-01  +9.4421e-01  4.44e-01  3.95e-03  6.16e-01  1.29e-05  2.69e-02  8.40e-01  
  7  +4.9777e-01  +8.5166e-01  3.54e-01  5.24e-04  8.31e-02  1.20e-04  1.71e-03  9.90e-01  
  8  +4.9275e-01  +7.2727e-01  2.35e-01  2.55e-04  4.03e-02  7.65e-05  8.45e-04  6.66e-01  
  9  +4.9342e-01  +7.4421e-01  2.51e-01  2.17e-04  3.44e-02  7.86e-05  6.95e-04  3.96e-01  
 10  +4.9280e-01  +7.3021e-01  2.37e-01  2.04e-04  3.23e-02  5.61e-05  6.51e-04  2.90e-01  
 11  +4.8864e-01  +7.0162e-01  2.13e-01  1.39e-04  2.20e-02  5.77e-05  4.48e-04  3.80e-01  
 12  +4.8761e-01  +6.9244e-01  2.05e-01  1.37e-04  2.17e-02  5.04e-05  4.45e-04  6.64e-02  
 13  +4.8390e-01  +6.6538e-01  1.81e-01  1.15e-04  1.82e-02  3.67e-05  3.81e-04  3.02e-01  
 14  +4.6771e-01  +5.6159e-01  9.39e-02  4.93e-05  7.77e-03  9.27e-06  1.76e-04  7.85e-01  
 15  +4.6588e-01  +5.5225e-01  8.64e-02  4.47e-05  7.04e-03  8.03e-06  1.62e-04  2.56e-01  
 16  +4.6208e-01  +5.3405e-01  7.20e-02  3.57e-05  5.62e-03  6.61e-06  1.32e-04  2.59e-01  
 17  +4.5797e-01  +5.1375e-01  5.58e-02  2.66e-05  4.19e-03  4.88e-06  1.01e-04  5.41e-01  
 18  +4.5376e-01  +4.9374e-01  4.00e-02  1.85e-05  2.92e-03  3.45e-06  7.23e-05  4.41e-01  
 19  +4.4720e-01  +4.6277e-01  1.56e-02  6.93e-06  1.09e-03  1.34e-06  2.84e-05  8.47e-01  
 20  +4.4533e-01  +4.5393e-01  8.60e-03  3.78e-06  5.95e-04  7.66e-07  1.58e-05  9.90e-01  
 21  +4.4466e-01  +4.5109e-01  6.43e-03  2.81e-06  4.42e-04  5.76e-07  1.19e-05  5.55e-01  
 22  +4.4281e-01  +4.4346e-01  6.51e-04  2.82e-07  4.44e-05  5.74e-08  1.23e-06  9.13e-01  
 23  +4.4260e-01  +4.4261e-01  7.05e-06  3.05e-09  4.79e-07  6.17e-10  1.34e-08  9.89e-01  
 24  +4.4260e-01  +4.4260e-01  7.05e-08  3.05e-11  4.80e-09  6.18e-12  1.34e-10  9.90e-01  
 25  +4.4260e-01  +4.4260e-01  7.23e-10  3.13e-13  4.92e-11  6.42e-14  1.39e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 93.3569ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:34 PM: Optimal value: 4.426e-01
(CVXPY) Sep 20 07:40:34 PM: Compilation took 2.253e-02 seconds
(CVXPY) Sep 20 07:40:34 PM: Solver (including time spent in interface) took 9.960e-02 seconds
Iteration: 17, Objective: 0.4426
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:34 PM: Your problem has 2641 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:34 PM: Finished problem compilation (took 2.203e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2641
  constraints   = 5141
  nnz(P)        = 0
  nnz(A)        = 41627
  cones (total) = 1
    : Nonnegative = 1,  numel = 5141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5011e+03  2.50e+03  9.80e-01  7.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.8661e-01  +5.2708e+02  5.26e+02  4.06e-01  4.82e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3667e-01  +6.4240e+01  6.37e+01  1.51e-01  2.25e+01  1.34e-02  2.52e-01  8.81e-01  
  3  +5.0919e-01  +1.6283e+01  1.58e+01  1.04e-01  1.52e+01  3.47e-05  2.41e-01  1.97e-01  
  4  +5.0051e-01  +1.2990e+00  7.98e-01  7.83e-03  1.21e+00  7.15e-06  1.25e-01  8.40e-01  
  5  +5.0030e-01  +1.0528e+00  5.53e-01  5.37e-03  8.33e-01  7.34e-06  8.43e-02  4.26e-01  
  6  +5.0008e-01  +9.1835e-01  4.18e-01  3.66e-03  5.71e-01  1.34e-05  2.38e-02  8.87e-01  
  7  +4.9742e-01  +8.5122e-01  3.54e-01  4.86e-04  7.70e-02  1.34e-04  1.59e-03  9.71e-01  
  8  +4.9430e-01  +7.6830e-01  2.74e-01  3.26e-04  5.16e-02  8.49e-05  1.07e-03  4.82e-01  
  9  +4.9366e-01  +7.5848e-01  2.65e-01  2.48e-04  3.92e-02  7.36e-05  7.98e-04  4.94e-01  
 10  +4.9295e-01  +7.3491e-01  2.42e-01  1.98e-04  3.13e-02  4.42e-05  6.30e-04  5.79e-01  
 11  +4.8960e-01  +7.0897e-01  2.19e-01  1.47e-04  2.33e-02  4.23e-05  4.75e-04  3.35e-01  
 12  +4.8839e-01  +6.9776e-01  2.09e-01  1.45e-04  2.29e-02  3.58e-05  4.71e-04  9.22e-02  
 13  +4.8536e-01  +6.7697e-01  1.92e-01  1.25e-04  1.97e-02  3.15e-05  4.11e-04  1.87e-01  
 14  +4.7615e-01  +6.0756e-01  1.31e-01  7.91e-05  1.25e-02  5.29e-06  2.74e-04  8.99e-01  
 15  +4.7153e-01  +5.8331e-01  1.12e-01  6.30e-05  9.92e-03  4.78e-06  2.23e-04  2.52e-01  
 16  +4.6368e-01  +5.4283e-01  7.92e-02  4.06e-05  6.39e-03  3.96e-06  1.50e-04  4.98e-01  
 17  +4.6160e-01  +5.3181e-01  7.02e-02  3.50e-05  5.51e-03  4.22e-06  1.30e-04  4.13e-01  
 18  +4.5465e-01  +4.9822e-01  4.36e-02  2.05e-05  3.23e-03  2.84e-06  7.99e-05  5.66e-01  
 19  +4.4970e-01  +4.7499e-01  2.53e-02  1.16e-05  1.82e-03  1.66e-06  4.68e-05  4.67e-01  
 20  +4.4578e-01  +4.5671e-01  1.09e-02  4.89e-06  7.69e-04  7.69e-07  2.04e-05  6.64e-01  
 21  +4.4529e-01  +4.5416e-01  8.87e-03  3.94e-06  6.20e-04  6.88e-07  1.66e-05  5.24e-01  
 22  +4.4328e-01  +4.4545e-01  2.17e-03  9.53e-07  1.50e-04  1.76e-07  4.13e-06  8.51e-01  
 23  +4.4285e-01  +4.4362e-01  7.69e-04  3.36e-07  5.28e-05  6.37e-08  1.47e-06  7.94e-01  
 24  +4.4264e-01  +4.4274e-01  1.09e-04  4.74e-08  7.46e-06  9.11e-09  2.09e-07  9.40e-01  
 25  +4.4260e-01  +4.4260e-01  1.19e-06  5.19e-10  8.17e-08  9.98e-11  2.29e-09  9.89e-01  
 26  +4.4260e-01  +4.4260e-01  1.19e-08  5.21e-12  8.19e-10  1.00e-12  2.29e-11  9.90e-01  
 27  +4.4260e-01  +4.4260e-01  1.23e-10  5.36e-14  8.42e-12  1.04e-14  2.38e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 97.8883ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:34 PM: Optimal value: 4.426e-01
(CVXPY) Sep 20 07:40:34 PM: Compilation took 2.203e-02 seconds
(CVXPY) Sep 20 07:40:34 PM: Solver (including time spent in interface) took 1.039e-01 seconds
FULL MODEL:
  Accruacy: 0.5288
  Our objective: 0.05760000000000004

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0096)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0036)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.0036)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.002)
 OR (x1 = 1 AND x3 = 0)                                                        <-- (term's our objective: 0.0336)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.901347398757935
Best over terms:
  Our final objective: 0.033599999999999935
    Its accruacy: 0.5168
    Its hamming distance: 7
  Shortest hamming distance: 0
    Its our objective: 0.009600000000000034
  Highest accruacy: 0.5168
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

