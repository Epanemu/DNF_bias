Command:
python test_script.py -s constant_subclass -d 9 -n 1000 --seed 56 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 9.

Computed total variation: 0.524
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:15 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:15 PM: Finished problem compilation (took 7.538e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 6019
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9998e-01  +5.0072e+02  5.00e+02  9.56e-01  3.59e+01  1.00e+00  1.00e+00   ------   
  1  +5.8065e-01  +1.0887e+02  1.08e+02  4.15e-01  2.30e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3054e-01  +1.2490e+01  1.20e+01  1.44e-01  1.01e+01  1.65e-02  2.72e-01  9.47e-01  
  3  +5.0620e-01  +3.1504e+00  2.64e+00  5.53e-02  3.79e+00  4.18e-05  2.37e-01  4.49e-01  
  4  +5.0051e-01  +6.9750e-01  1.97e-01  4.41e-03  3.19e-01  9.48e-06  5.87e-02  9.08e-01  
  5  +5.0023e-01  +6.2886e-01  1.29e-01  2.82e-03  2.04e-01  9.75e-06  2.44e-02  6.45e-01  
  6  +4.9929e-01  +5.9659e-01  9.73e-02  1.07e-03  7.86e-02  3.41e-05  3.82e-03  8.67e-01  
  7  +4.9556e-01  +5.7256e-01  7.70e-02  2.86e-04  2.11e-02  9.62e-05  9.11e-04  7.64e-01  
  8  +4.9103e-01  +5.4276e-01  5.17e-02  1.73e-04  1.27e-02  5.45e-05  5.62e-04  4.70e-01  
  9  +4.8724e-01  +5.2437e-01  3.71e-02  1.03e-04  7.56e-03  3.54e-05  3.41e-04  5.32e-01  
 10  +4.8014e-01  +4.8730e-01  7.16e-03  1.77e-05  1.30e-03  7.40e-07  6.14e-05  9.90e-01  
 11  +4.7828e-01  +4.7884e-01  5.55e-04  1.29e-06  9.49e-05  6.88e-08  4.70e-06  9.29e-01  
 12  +4.7810e-01  +4.7811e-01  6.86e-06  1.57e-08  1.16e-06  8.76e-10  5.81e-08  9.88e-01  
 13  +4.7810e-01  +4.7810e-01  6.86e-08  1.57e-10  1.16e-08  8.76e-12  5.81e-10  9.90e-01  
 14  +4.7810e-01  +4.7810e-01  6.86e-10  1.58e-12  1.16e-10  8.84e-14  5.86e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.969ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:15 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:15 PM: Optimal value: 4.781e-01
(CVXPY) Sep 20 07:57:15 PM: Compilation took 7.538e-03 seconds
(CVXPY) Sep 20 07:57:15 PM: Solver (including time spent in interface) took 8.527e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4781
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:15 PM: Your problem has 529 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:15 PM: Finished problem compilation (took 7.014e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 529
  constraints   = 1029
  nnz(P)        = 0
  nnz(A)        = 6651
  cones (total) = 1
    : Nonnegative = 1,  numel = 1029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9992e-01  +5.0086e+02  5.00e+02  9.56e-01  3.63e+01  1.00e+00  1.00e+00   ------   
  1  +5.7998e-01  +1.0893e+02  1.08e+02  4.17e-01  2.32e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.2977e-01  +1.2333e+01  1.18e+01  1.43e-01  1.01e+01  1.66e-02  2.69e-01  9.57e-01  
  3  +5.0594e-01  +3.0896e+00  2.58e+00  5.43e-02  3.77e+00  4.25e-05  2.30e-01  4.87e-01  
  4  +5.0097e-01  +9.2016e-01  4.19e-01  9.42e-03  6.84e-01  1.28e-05  9.37e-02  6.97e-01  
  5  +5.0022e-01  +7.8589e-01  2.86e-01  5.78e-03  4.24e-01  1.92e-05  3.06e-02  9.06e-01  
  6  +4.9446e-01  +7.3823e-01  2.44e-01  1.06e-03  7.89e-02  1.14e-04  3.40e-03  9.19e-01  
  7  +4.8787e-01  +6.7297e-01  1.85e-01  6.67e-04  4.97e-02  8.62e-05  2.26e-03  4.08e-01  
  8  +4.8205e-01  +6.1896e-01  1.37e-01  4.47e-04  3.32e-02  4.62e-05  1.62e-03  5.88e-01  
  9  +4.7326e-01  +5.6303e-01  8.98e-02  2.49e-04  1.85e-02  2.94e-05  9.74e-04  4.71e-01  
 10  +4.6670e-01  +5.1875e-01  5.21e-02  1.33e-04  9.88e-03  1.66e-05  5.58e-04  9.58e-01  
 11  +4.6172e-01  +4.9137e-01  2.97e-02  7.44e-05  5.51e-03  1.06e-05  3.32e-04  9.90e-01  
 12  +4.5513e-01  +4.5866e-01  3.53e-03  8.52e-06  6.31e-04  9.20e-07  4.25e-05  8.91e-01  
 13  +4.5421e-01  +4.5426e-01  4.48e-05  1.08e-07  8.00e-06  1.07e-08  5.58e-07  9.88e-01  
 14  +4.5420e-01  +4.5420e-01  4.48e-07  1.08e-09  8.00e-08  1.07e-10  5.58e-09  9.90e-01  
 15  +4.5420e-01  +4.5420e-01  4.48e-09  1.08e-11  8.00e-10  1.07e-12  5.58e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.2805ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:15 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:15 PM: Optimal value: 4.542e-01
(CVXPY) Sep 20 07:57:15 PM: Compilation took 7.014e-03 seconds
(CVXPY) Sep 20 07:57:15 PM: Solver (including time spent in interface) took 1.050e-02 seconds
Iteration: 2, Objective: 0.4542
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:15 PM: Your problem has 539 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:15 PM: Finished problem compilation (took 6.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 539
  constraints   = 1039
  nnz(P)        = 0
  nnz(A)        = 7248
  cones (total) = 1
    : Nonnegative = 1,  numel = 1039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9986e-01  +5.0119e+02  5.01e+02  9.56e-01  3.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.7903e-01  +1.0905e+02  1.08e+02  4.19e-01  2.34e+01  3.78e-03  5.77e-01  5.86e-01  
  2  +5.2896e-01  +1.2182e+01  1.17e+01  1.41e-01  9.99e+00  1.68e-02  2.66e-01  9.67e-01  
  3  +5.0571e-01  +3.0388e+00  2.53e+00  5.35e-02  3.76e+00  4.36e-05  2.24e-01  5.25e-01  
  4  +5.0116e-01  +1.0321e+00  5.31e-01  1.20e-02  8.77e-01  1.49e-05  1.01e-01  6.30e-01  
  5  +5.0019e-01  +8.1051e-01  3.10e-01  6.53e-03  4.84e-01  1.67e-05  3.66e-02  6.99e-01  
  6  +4.9293e-01  +7.8859e-01  2.96e-01  1.27e-03  9.67e-02  1.16e-04  3.82e-03  9.60e-01  
  7  +4.7991e-01  +6.5573e-01  1.76e-01  5.34e-04  4.06e-02  8.49e-05  1.67e-03  6.37e-01  
  8  +4.7356e-01  +6.1773e-01  1.44e-01  3.88e-04  2.94e-02  6.96e-05  1.23e-03  3.77e-01  
  9  +4.6248e-01  +5.5028e-01  8.78e-02  2.13e-04  1.62e-02  3.90e-05  7.16e-04  5.43e-01  
 10  +4.5623e-01  +5.1691e-01  6.07e-02  1.38e-04  1.04e-02  2.70e-05  4.78e-04  3.96e-01  
 11  +4.4853e-01  +4.7659e-01  2.81e-02  5.97e-05  4.51e-03  1.25e-05  2.16e-04  6.85e-01  
 12  +4.4394e-01  +4.5374e-01  9.80e-03  1.99e-05  1.51e-03  5.26e-06  7.31e-05  8.89e-01  
 13  +4.4169e-01  +4.4596e-01  4.28e-03  8.57e-06  6.50e-04  1.67e-06  3.27e-05  8.91e-01  
 14  +4.4055e-01  +4.4095e-01  3.97e-04  7.74e-07  5.87e-05  1.69e-07  2.99e-06  9.15e-01  
 15  +4.4041e-01  +4.4042e-01  1.59e-05  3.07e-08  2.33e-06  6.76e-09  1.22e-07  9.78e-01  
 16  +4.4040e-01  +4.4040e-01  1.59e-07  3.07e-10  2.33e-08  6.77e-11  1.23e-09  9.90e-01  
 17  +4.4040e-01  +4.4040e-01  1.59e-09  3.07e-12  2.33e-10  6.77e-13  1.23e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.9437ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:15 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:15 PM: Optimal value: 4.404e-01
(CVXPY) Sep 20 07:57:15 PM: Compilation took 6.509e-03 seconds
(CVXPY) Sep 20 07:57:15 PM: Solver (including time spent in interface) took 1.307e-02 seconds
Iteration: 3, Objective: 0.4404
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:15 PM: Your problem has 549 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:15 PM: Finished problem compilation (took 5.448e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 549
  constraints   = 1049
  nnz(P)        = 0
  nnz(A)        = 7635
  cones (total) = 1
    : Nonnegative = 1,  numel = 1049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9977e-01  +5.0116e+02  5.01e+02  9.56e-01  3.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.7756e-01  +1.0914e+02  1.09e+02  4.21e-01  2.33e+01  3.78e-03  5.78e-01  5.85e-01  
  2  +5.2787e-01  +1.1976e+01  1.14e+01  1.38e-01  9.77e+00  1.71e-02  2.62e-01  9.82e-01  
  3  +5.0540e-01  +2.9665e+00  2.46e+00  5.23e-02  3.68e+00  4.54e-05  2.12e-01  5.83e-01  
  4  +5.0105e-01  +1.0474e+00  5.46e-01  1.24e-02  9.06e-01  1.65e-05  8.86e-02  6.47e-01  
  5  +4.9904e-01  +9.2423e-01  4.25e-01  6.30e-03  4.75e-01  3.88e-05  2.17e-02  8.35e-01  
  6  +4.8731e-01  +8.1818e-01  3.31e-01  1.22e-03  9.38e-02  1.51e-04  3.53e-03  8.50e-01  
  7  +4.7235e-01  +7.1752e-01  2.45e-01  6.47e-04  4.94e-02  1.34e-04  1.93e-03  5.54e-01  
  8  +4.5312e-01  +5.9278e-01  1.40e-01  3.56e-04  2.71e-02  4.99e-05  1.15e-03  6.92e-01  
  9  +4.3101e-01  +4.7659e-01  4.56e-02  1.04e-04  7.92e-03  1.56e-05  3.64e-04  7.99e-01  
 10  +4.2477e-01  +4.4836e-01  2.36e-02  5.19e-05  3.94e-03  8.99e-06  1.85e-04  6.02e-01  
 11  +4.2036e-01  +4.2890e-01  8.54e-03  1.84e-05  1.40e-03  3.67e-06  6.78e-05  7.68e-01  
 12  +4.1803e-01  +4.1908e-01  1.05e-03  2.24e-06  1.71e-04  4.52e-07  8.43e-06  8.87e-01  
 13  +4.1770e-01  +4.1772e-01  1.22e-05  2.60e-08  1.98e-06  5.33e-09  9.80e-08  9.90e-01  
 14  +4.1770e-01  +4.1770e-01  1.22e-07  2.60e-10  1.98e-08  5.33e-11  9.80e-10  9.90e-01  
 15  +4.1770e-01  +4.1770e-01  1.22e-09  2.60e-12  1.98e-10  5.34e-13  9.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.6343ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:15 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:15 PM: Optimal value: 4.177e-01
(CVXPY) Sep 20 07:57:15 PM: Compilation took 5.448e-03 seconds
(CVXPY) Sep 20 07:57:15 PM: Solver (including time spent in interface) took 1.253e-02 seconds
Iteration: 4, Objective: 0.4177
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:15 PM: Your problem has 559 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:15 PM: Finished problem compilation (took 7.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 559
  constraints   = 1059
  nnz(P)        = 0
  nnz(A)        = 8036
  cones (total) = 1
    : Nonnegative = 1,  numel = 1059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9975e-01  +5.0129e+02  5.01e+02  9.56e-01  3.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.7656e-01  +1.0918e+02  1.09e+02  4.22e-01  2.33e+01  3.78e-03  5.78e-01  5.85e-01  
  2  +5.2705e-01  +1.1862e+01  1.13e+01  1.37e-01  9.62e+00  1.72e-02  2.58e-01  9.90e-01  
  3  +5.0540e-01  +2.9373e+00  2.43e+00  5.21e-02  3.69e+00  4.80e-05  1.99e-01  6.31e-01  
  4  +5.0099e-01  +1.0946e+00  5.94e-01  1.35e-02  9.90e-01  2.00e-05  8.18e-02  6.45e-01  
  5  +4.9434e-01  +1.1812e+00  6.87e-01  4.36e-03  3.34e-01  1.17e-04  1.25e-02  9.48e-01  
  6  +4.7902e-01  +9.2342e-01  4.44e-01  1.53e-03  1.17e-01  1.40e-04  4.44e-03  6.66e-01  
  7  +4.7032e-01  +8.4577e-01  3.75e-01  9.98e-04  7.62e-02  1.45e-04  2.92e-03  6.13e-01  
  8  +4.5625e-01  +7.2800e-01  2.72e-01  6.60e-04  5.01e-02  1.05e-04  2.01e-03  4.15e-01  
  9  +4.3791e-01  +5.7249e-01  1.35e-01  3.22e-04  2.43e-02  5.64e-05  1.05e-03  9.90e-01  
 10  +4.1448e-01  +4.5334e-01  3.89e-02  8.44e-05  6.34e-03  1.44e-05  2.95e-04  7.58e-01  
 11  +4.0980e-01  +4.3273e-01  2.29e-02  4.84e-05  3.63e-03  9.39e-06  1.72e-04  5.58e-01  
 12  +4.0522e-01  +4.1280e-01  7.58e-03  1.56e-05  1.17e-03  3.35e-06  5.69e-05  7.42e-01  
 13  +4.0341e-01  +4.0518e-01  1.76e-03  3.59e-06  2.70e-04  8.83e-07  1.32e-05  8.96e-01  
 14  +4.0288e-01  +4.0303e-01  1.53e-04  3.10e-07  2.33e-05  7.61e-08  1.15e-06  9.14e-01  
 15  +4.0283e-01  +4.0285e-01  1.53e-05  3.11e-08  2.33e-06  7.87e-09  1.15e-07  9.37e-01  
 16  +4.0283e-01  +4.0283e-01  1.55e-07  3.15e-10  2.37e-08  7.98e-11  1.17e-09  9.90e-01  
 17  +4.0283e-01  +4.0283e-01  1.57e-09  3.19e-12  2.40e-10  8.10e-13  1.19e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.3303ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:15 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:15 PM: Optimal value: 4.028e-01
(CVXPY) Sep 20 07:57:15 PM: Compilation took 7.004e-03 seconds
(CVXPY) Sep 20 07:57:15 PM: Solver (including time spent in interface) took 1.362e-02 seconds
Iteration: 5, Objective: 0.4028
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:16 PM: Your problem has 569 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:16 PM: Finished problem compilation (took 6.044e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 569
  constraints   = 1069
  nnz(P)        = 0
  nnz(A)        = 8241
  cones (total) = 1
    : Nonnegative = 1,  numel = 1069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9971e-01  +5.0160e+02  5.01e+02  9.57e-01  3.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.7520e-01  +1.0925e+02  1.09e+02  4.23e-01  2.31e+01  3.79e-03  5.78e-01  5.85e-01  
  2  +5.2630e-01  +1.1971e+01  1.14e+01  1.36e-01  9.54e+00  1.74e-02  2.58e-01  9.90e-01  
  3  +5.0576e-01  +2.7400e+00  2.23e+00  4.95e-02  3.55e+00  5.23e-05  1.67e-01  7.44e-01  
  4  +5.0062e-01  +1.0736e+00  5.73e-01  1.31e-02  9.65e-01  3.00e-05  6.21e-02  6.90e-01  
  5  +4.9232e-01  +1.2630e+00  7.71e-01  4.42e-03  3.40e-01  1.68e-04  1.23e-02  9.00e-01  
  6  +4.7292e-01  +9.4496e-01  4.72e-01  1.52e-03  1.17e-01  1.82e-04  4.31e-03  6.86e-01  
  7  +4.5994e-01  +8.6809e-01  4.08e-01  1.01e-03  7.74e-02  1.88e-04  2.90e-03  4.06e-01  
  8  +4.4399e-01  +7.2525e-01  2.81e-01  7.09e-04  5.38e-02  1.11e-04  2.17e-03  4.79e-01  
  9  +4.0916e-01  +5.0597e-01  9.68e-02  2.16e-04  1.62e-02  3.29e-05  7.34e-04  7.64e-01  
 10  +3.9574e-01  +4.3932e-01  4.36e-02  9.42e-05  7.05e-03  1.59e-05  3.39e-04  6.07e-01  
 11  +3.8960e-01  +4.0962e-01  2.00e-02  4.27e-05  3.20e-03  8.53e-06  1.58e-04  7.07e-01  
 12  +3.8492e-01  +3.8892e-01  4.00e-03  8.46e-06  6.33e-04  1.84e-06  3.23e-05  8.76e-01  
 13  +3.8379e-01  +3.8433e-01  5.45e-04  1.14e-06  8.56e-05  2.64e-07  4.43e-06  9.36e-01  
 14  +3.8361e-01  +3.8363e-01  1.87e-05  3.92e-08  2.94e-06  9.21e-09  1.52e-07  9.81e-01  
 15  +3.8360e-01  +3.8360e-01  1.88e-07  3.92e-10  2.94e-08  9.22e-11  1.52e-09  9.90e-01  
 16  +3.8360e-01  +3.8360e-01  1.89e-09  3.95e-12  2.96e-10  9.28e-13  1.53e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.0242ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:16 PM: Optimal value: 3.836e-01
(CVXPY) Sep 20 07:57:16 PM: Compilation took 6.044e-03 seconds
(CVXPY) Sep 20 07:57:16 PM: Solver (including time spent in interface) took 1.502e-02 seconds
Iteration: 6, Objective: 0.3836
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:16 PM: Your problem has 579 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:16 PM: Finished problem compilation (took 5.992e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 579
  constraints   = 1079
  nnz(P)        = 0
  nnz(A)        = 8369
  cones (total) = 1
    : Nonnegative = 1,  numel = 1079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9967e-01  +5.0173e+02  5.01e+02  9.57e-01  3.66e+01  1.00e+00  1.01e+00   ------   
  1  +5.7407e-01  +1.0928e+02  1.09e+02  4.24e-01  2.30e+01  3.79e-03  5.78e-01  5.85e-01  
  2  +5.2564e-01  +1.2069e+01  1.15e+01  1.36e-01  9.45e+00  1.75e-02  2.57e-01  9.90e-01  
  3  +5.0601e-01  +2.5154e+00  2.01e+00  4.48e-02  3.26e+00  5.58e-05  1.40e-01  8.22e-01  
  4  +5.0065e-01  +1.1544e+00  6.54e-01  1.39e-02  1.04e+00  4.88e-05  5.21e-02  6.94e-01  
  5  +4.9165e-01  +1.1637e+00  6.72e-01  3.65e-03  2.82e-01  2.12e-04  9.82e-03  8.66e-01  
  6  +4.7106e-01  +9.1249e-01  4.41e-01  1.37e-03  1.05e-01  2.34e-04  3.77e-03  6.73e-01  
  7  +4.5304e-01  +8.0624e-01  3.53e-01  8.74e-04  6.66e-02  2.02e-04  2.51e-03  4.32e-01  
  8  +4.3202e-01  +6.6828e-01  2.36e-01  5.75e-04  4.35e-02  1.12e-04  1.77e-03  4.65e-01  
  9  +4.0141e-01  +4.9967e-01  9.83e-02  2.19e-04  1.64e-02  4.05e-05  7.42e-04  6.34e-01  
 10  +3.8858e-01  +4.3784e-01  4.93e-02  1.05e-04  7.86e-03  2.20e-05  3.73e-04  6.48e-01  
 11  +3.8023e-01  +3.9929e-01  1.91e-02  3.97e-05  2.97e-03  8.99e-06  1.46e-04  7.32e-01  
 12  +3.7526e-01  +3.7787e-01  2.60e-03  5.34e-06  4.00e-04  1.36e-06  2.03e-05  9.80e-01  
 13  +3.7449e-01  +3.7488e-01  3.87e-04  7.92e-07  5.93e-05  2.03e-07  3.03e-06  8.70e-01  
 14  +3.7437e-01  +3.7441e-01  4.23e-05  8.60e-08  6.44e-06  2.22e-08  3.30e-07  9.78e-01  
 15  +3.7435e-01  +3.7435e-01  4.25e-07  8.63e-10  6.46e-08  2.23e-10  3.31e-09  9.90e-01  
 16  +3.7435e-01  +3.7435e-01  4.26e-09  8.64e-12  6.47e-10  2.23e-12  3.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.6627ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:16 PM: Optimal value: 3.744e-01
(CVXPY) Sep 20 07:57:16 PM: Compilation took 5.992e-03 seconds
(CVXPY) Sep 20 07:57:16 PM: Solver (including time spent in interface) took 1.295e-02 seconds
Iteration: 7, Objective: 0.3744
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:16 PM: Your problem has 589 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:16 PM: Finished problem compilation (took 6.281e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 589
  constraints   = 1089
  nnz(P)        = 0
  nnz(A)        = 8562
  cones (total) = 1
    : Nonnegative = 1,  numel = 1089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9965e-01  +5.0166e+02  5.01e+02  9.57e-01  3.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.7257e-01  +1.0927e+02  1.09e+02  4.25e-01  2.28e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2491e-01  +1.2157e+01  1.16e+01  1.36e-01  9.36e+00  1.76e-02  2.55e-01  9.90e-01  
  3  +5.0617e-01  +2.2841e+00  1.78e+00  3.90e-02  2.88e+00  5.98e-05  1.15e-01  8.77e-01  
  4  +5.0053e-01  +1.2936e+00  7.93e-01  1.12e-02  8.55e-01  1.17e-04  3.18e-02  8.14e-01  
  5  +4.8993e-01  +1.1830e+00  6.93e-01  3.01e-03  2.33e-01  3.38e-04  7.84e-03  7.64e-01  
  6  +4.6778e-01  +9.4224e-01  4.74e-01  1.44e-03  1.10e-01  2.73e-04  3.95e-03  6.09e-01  
  7  +4.5291e-01  +8.4429e-01  3.91e-01  1.06e-03  8.06e-02  2.15e-04  3.02e-03  3.59e-01  
  8  +4.2770e-01  +6.8227e-01  2.55e-01  6.39e-04  4.81e-02  1.20e-04  1.96e-03  4.83e-01  
  9  +3.9776e-01  +5.1896e-01  1.21e-01  2.78e-04  2.08e-02  5.23e-05  9.35e-04  7.46e-01  
 10  +3.7762e-01  +4.1956e-01  4.19e-02  9.24e-05  6.89e-03  1.93e-05  3.36e-04  8.87e-01  
 11  +3.6977e-01  +3.8475e-01  1.50e-02  3.24e-05  2.42e-03  6.87e-06  1.22e-04  6.59e-01  
 12  +3.6598e-01  +3.6854e-01  2.56e-03  5.45e-06  4.07e-04  1.22e-06  2.11e-05  8.76e-01  
 13  +3.6518e-01  +3.6528e-01  9.86e-05  2.09e-07  1.56e-05  4.67e-08  8.12e-07  9.63e-01  
 14  +3.6515e-01  +3.6515e-01  9.88e-07  2.10e-09  1.56e-07  4.68e-10  8.14e-09  9.90e-01  
 15  +3.6515e-01  +3.6515e-01  9.89e-09  2.10e-11  1.56e-09  4.68e-12  8.15e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.7028ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:16 PM: Optimal value: 3.652e-01
(CVXPY) Sep 20 07:57:16 PM: Compilation took 6.281e-03 seconds
(CVXPY) Sep 20 07:57:16 PM: Solver (including time spent in interface) took 1.386e-02 seconds
Iteration: 8, Objective: 0.3652
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:16 PM: Your problem has 599 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:16 PM: Finished problem compilation (took 6.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 599
  constraints   = 1099
  nnz(P)        = 0
  nnz(A)        = 8726
  cones (total) = 1
    : Nonnegative = 1,  numel = 1099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9963e-01  +5.0155e+02  5.01e+02  9.57e-01  3.64e+01  1.00e+00  1.01e+00   ------   
  1  +5.7118e-01  +1.0924e+02  1.09e+02  4.25e-01  2.26e+01  3.80e-03  5.77e-01  5.86e-01  
  2  +5.2409e-01  +1.2265e+01  1.17e+01  1.35e-01  9.26e+00  1.78e-02  2.54e-01  9.90e-01  
  3  +5.0693e-01  +2.4105e+00  1.90e+00  3.91e-02  2.91e+00  6.68e-04  1.07e-01  8.29e-01  
  4  +5.0568e-01  +2.2497e+00  1.74e+00  2.44e-02  1.85e+00  1.20e-03  6.19e-02  4.65e-01  
  5  +5.0230e-01  +2.0374e+00  1.54e+00  1.89e-02  1.42e+00  6.33e-04  5.20e-02  5.14e-01  
  6  +4.8887e-01  +1.5246e+00  1.04e+00  3.24e-03  2.52e-01  1.95e-03  8.07e-03  8.51e-01  
  7  +4.7151e-01  +1.2462e+00  7.75e-01  2.18e-03  1.68e-01  1.20e-03  5.67e-03  4.10e-01  
  8  +4.4778e-01  +8.8825e-01  4.40e-01  1.39e-03  1.05e-01  9.75e-06  3.98e-03  7.46e-01  
  9  +4.2175e-01  +7.1411e-01  2.92e-01  7.96e-04  5.96e-02  5.46e-05  2.44e-03  6.27e-01  
 10  +3.8702e-01  +5.1690e-01  1.30e-01  3.12e-04  2.32e-02  3.48e-05  1.05e-03  7.23e-01  
 11  +3.7162e-01  +4.4335e-01  7.17e-02  1.66e-04  1.23e-02  2.14e-05  5.93e-04  5.32e-01  
 12  +3.5718e-01  +3.7549e-01  1.83e-02  4.10e-05  3.05e-03  5.67e-06  1.57e-04  7.70e-01  
 13  +3.5224e-01  +3.5348e-01  1.24e-03  2.76e-06  2.05e-04  4.82e-07  1.09e-05  9.67e-01  
 14  +3.5186e-01  +3.5188e-01  1.98e-05  4.39e-08  3.26e-06  7.69e-09  1.74e-07  9.85e-01  
 15  +3.5185e-01  +3.5185e-01  1.98e-07  4.39e-10  3.26e-08  7.69e-11  1.74e-09  9.90e-01  
 16  +3.5185e-01  +3.5185e-01  1.98e-09  4.40e-12  3.26e-10  7.69e-13  1.74e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.7327ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:16 PM: Optimal value: 3.519e-01
(CVXPY) Sep 20 07:57:16 PM: Compilation took 6.001e-03 seconds
(CVXPY) Sep 20 07:57:16 PM: Solver (including time spent in interface) took 1.507e-02 seconds
Iteration: 9, Objective: 0.3519
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:16 PM: Your problem has 609 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:16 PM: Finished problem compilation (took 6.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 609
  constraints   = 1109
  nnz(P)        = 0
  nnz(A)        = 8835
  cones (total) = 1
    : Nonnegative = 1,  numel = 1109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9958e-01  +5.0155e+02  5.01e+02  9.58e-01  3.62e+01  1.00e+00  1.01e+00   ------   
  1  +5.6943e-01  +1.0938e+02  1.09e+02  4.27e-01  2.25e+01  3.80e-03  5.77e-01  5.85e-01  
  2  +5.2327e-01  +1.2408e+01  1.19e+01  1.35e-01  9.21e+00  1.80e-02  2.54e-01  9.90e-01  
  3  +5.0887e-01  +3.3812e+00  2.87e+00  5.25e-02  3.86e+00  2.59e-03  1.29e-01  6.48e-01  
  4  +4.9939e-01  +1.6077e+00  1.11e+00  1.46e-02  1.11e+00  4.45e-03  3.97e-02  9.90e-01  
  5  +4.9304e-01  +1.6295e+00  1.14e+00  7.12e-03  5.47e-01  6.27e-03  1.83e-02  7.63e-01  
  6  +4.7436e-01  +1.3782e+00  9.04e-01  2.73e-03  2.11e-01  9.81e-03  6.98e-03  6.56e-01  
  7  +4.5892e-01  +1.1984e+00  7.39e-01  1.97e-03  1.51e-01  7.22e-03  5.19e-03  3.43e-01  
  8  +4.2902e-01  +8.0020e-01  3.71e-01  1.08e-03  8.11e-02  5.96e-05  3.19e-03  6.84e-01  
  9  +4.0525e-01  +6.5340e-01  2.48e-01  6.52e-04  4.86e-02  4.43e-05  2.05e-03  4.04e-01  
 10  +3.7760e-01  +5.0175e-01  1.24e-01  2.96e-04  2.20e-02  3.34e-05  1.01e-03  6.64e-01  
 11  +3.6107e-01  +4.1678e-01  5.57e-02  1.29e-04  9.54e-03  2.14e-05  4.71e-04  7.91e-01  
 12  +3.5201e-01  +3.7448e-01  2.25e-02  5.06e-05  3.75e-03  9.16e-06  1.94e-04  6.82e-01  
 13  +3.4777e-01  +3.5557e-01  7.80e-03  1.67e-05  1.24e-03  3.74e-06  6.66e-05  9.16e-01  
 14  +3.4538e-01  +3.4644e-01  1.06e-03  2.20e-06  1.64e-04  5.08e-07  9.07e-06  8.86e-01  
 15  +3.4501e-01  +3.4503e-01  1.95e-05  4.05e-08  3.01e-06  9.32e-09  1.68e-07  9.83e-01  
 16  +3.4500e-01  +3.4500e-01  1.95e-07  4.05e-10  3.01e-08  9.32e-11  1.68e-09  9.90e-01  
 17  +3.4500e-01  +3.4500e-01  1.95e-09  4.05e-12  3.01e-10  9.34e-13  1.68e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.2307ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:16 PM: Optimal value: 3.450e-01
(CVXPY) Sep 20 07:57:16 PM: Compilation took 6.509e-03 seconds
(CVXPY) Sep 20 07:57:16 PM: Solver (including time spent in interface) took 1.554e-02 seconds
Iteration: 10, Objective: 0.3450
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:16 PM: Your problem has 619 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:16 PM: Finished problem compilation (took 6.011e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 619
  constraints   = 1119
  nnz(P)        = 0
  nnz(A)        = 8965
  cones (total) = 1
    : Nonnegative = 1,  numel = 1119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9958e-01  +5.0165e+02  5.01e+02  9.58e-01  3.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.6857e-01  +1.0935e+02  1.09e+02  4.27e-01  2.24e+01  3.80e-03  5.77e-01  5.85e-01  
  2  +5.2273e-01  +1.2465e+01  1.19e+01  1.35e-01  9.10e+00  1.80e-02  2.53e-01  9.90e-01  
  3  +5.0928e-01  +3.6325e+00  3.12e+00  5.43e-02  3.97e+00  3.17e-03  1.30e-01  6.13e-01  
  4  +4.9929e-01  +1.6777e+00  1.18e+00  1.54e-02  1.16e+00  4.70e-03  4.12e-02  9.90e-01  
  5  +4.9176e-01  +1.6955e+00  1.20e+00  7.14e-03  5.48e-01  7.21e-03  1.82e-02  7.51e-01  
  6  +4.7435e-01  +1.4402e+00  9.66e-01  3.12e-03  2.41e-01  9.82e-03  7.94e-03  6.03e-01  
  7  +4.5910e-01  +1.2337e+00  7.75e-01  2.21e-03  1.69e-01  6.99e-03  5.80e-03  3.58e-01  
  8  +4.4158e-01  +1.0087e+00  5.67e-01  1.59e-03  1.20e-01  2.68e-03  4.39e-03  4.84e-01  
  9  +4.0644e-01  +7.0660e-01  3.00e-01  7.72e-04  5.75e-02  9.78e-04  2.35e-03  5.48e-01  
 10  +3.7031e-01  +4.8628e-01  1.16e-01  2.78e-04  2.05e-02  2.58e-04  9.55e-04  6.76e-01  
 11  +3.5703e-01  +4.1935e-01  6.23e-02  1.47e-04  1.09e-02  9.26e-05  5.36e-04  6.48e-01  
 12  +3.4371e-01  +3.5428e-01  1.06e-02  2.44e-05  1.80e-03  1.12e-05  9.54e-05  8.86e-01  
 13  +3.4102e-01  +3.4222e-01  1.20e-03  2.78e-06  2.05e-04  8.04e-07  1.12e-05  9.52e-01  
 14  +3.4066e-01  +3.4071e-01  4.72e-05  1.09e-07  8.05e-06  2.98e-08  4.43e-07  9.64e-01  
 15  +3.4065e-01  +3.4065e-01  4.80e-07  1.11e-09  8.19e-08  3.03e-10  4.51e-09  9.90e-01  
 16  +3.4065e-01  +3.4065e-01  4.81e-09  1.11e-11  8.20e-10  3.03e-12  4.52e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.5514ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:16 PM: Optimal value: 3.407e-01
(CVXPY) Sep 20 07:57:16 PM: Compilation took 6.011e-03 seconds
(CVXPY) Sep 20 07:57:16 PM: Solver (including time spent in interface) took 1.555e-02 seconds
Iteration: 11, Objective: 0.3407
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:16 PM: Your problem has 629 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:16 PM: Finished problem compilation (took 6.525e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 629
  constraints   = 1129
  nnz(P)        = 0
  nnz(A)        = 9097
  cones (total) = 1
    : Nonnegative = 1,  numel = 1129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9956e-01  +5.0169e+02  5.01e+02  9.58e-01  3.60e+01  1.00e+00  1.01e+00   ------   
  1  +5.6743e-01  +1.0942e+02  1.09e+02  4.28e-01  2.22e+01  3.80e-03  5.77e-01  5.85e-01  
  2  +5.2209e-01  +1.2547e+01  1.20e+01  1.35e-01  9.03e+00  1.82e-02  2.52e-01  9.90e-01  
  3  +5.0952e-01  +3.7997e+00  3.29e+00  5.48e-02  3.99e+00  3.59e-03  1.29e-01  5.92e-01  
  4  +4.9927e-01  +1.7411e+00  1.24e+00  1.57e-02  1.19e+00  4.81e-03  4.14e-02  9.90e-01  
  5  +4.9051e-01  +1.7578e+00  1.27e+00  6.94e-03  5.33e-01  7.69e-03  1.74e-02  7.67e-01  
  6  +4.7179e-01  +1.4656e+00  9.94e-01  3.12e-03  2.40e-01  9.49e-03  7.86e-03  5.99e-01  
  7  +4.5586e-01  +1.2646e+00  8.09e-01  2.22e-03  1.69e-01  7.11e-03  5.75e-03  3.47e-01  
  8  +4.2417e-01  +8.4104e-01  4.17e-01  1.19e-03  8.90e-02  6.21e-05  3.42e-03  7.34e-01  
  9  +3.8178e-01  +5.6311e-01  1.81e-01  4.57e-04  3.38e-02  3.82e-05  1.47e-03  6.80e-01  
 10  +3.6683e-01  +4.8928e-01  1.22e-01  2.97e-04  2.20e-02  2.96e-05  1.00e-03  3.94e-01  
 11  +3.4824e-01  +3.9744e-01  4.92e-02  1.15e-04  8.49e-03  1.42e-05  4.21e-04  6.71e-01  
 12  +3.4097e-01  +3.6217e-01  2.12e-02  4.85e-05  3.59e-03  8.39e-06  1.85e-04  7.97e-01  
 13  +3.3697e-01  +3.4429e-01  7.32e-03  1.63e-05  1.21e-03  3.37e-06  6.41e-05  8.96e-01  
 14  +3.3558e-01  +3.3918e-01  3.60e-03  7.63e-06  5.64e-04  1.69e-06  3.10e-05  7.02e-01  
 15  +3.3443e-01  +3.3478e-01  3.51e-04  7.35e-07  5.42e-05  1.64e-07  3.04e-06  9.06e-01  
 16  +3.3430e-01  +3.3430e-01  3.66e-06  7.64e-09  5.64e-07  1.70e-09  3.16e-08  9.90e-01  
 17  +3.3430e-01  +3.3430e-01  3.66e-08  7.64e-11  5.64e-09  1.70e-11  3.16e-10  9.90e-01  
 18  +3.3430e-01  +3.3430e-01  3.66e-10  7.64e-13  5.64e-11  1.70e-13  3.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.7864ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:17 PM: Optimal value: 3.343e-01
(CVXPY) Sep 20 07:57:17 PM: Compilation took 6.525e-03 seconds
(CVXPY) Sep 20 07:57:17 PM: Solver (including time spent in interface) took 1.753e-02 seconds
Iteration: 12, Objective: 0.3343
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:17 PM: Your problem has 639 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:17 PM: Finished problem compilation (took 6.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 639
  constraints   = 1139
  nnz(P)        = 0
  nnz(A)        = 9222
  cones (total) = 1
    : Nonnegative = 1,  numel = 1139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0180e+02  5.01e+02  9.58e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.6632e-01  +1.0945e+02  1.09e+02  4.29e-01  2.21e+01  3.80e-03  5.77e-01  5.85e-01  
  2  +5.2162e-01  +1.2630e+01  1.21e+01  1.35e-01  8.92e+00  1.83e-02  2.51e-01  9.90e-01  
  3  +5.0952e-01  +3.8483e+00  3.34e+00  5.39e-02  3.91e+00  3.78e-03  1.26e-01  5.88e-01  
  4  +4.9995e-01  +1.9447e+00  1.44e+00  1.71e-02  1.29e+00  4.92e-03  4.40e-02  9.18e-01  
  5  +4.9032e-01  +2.1280e+00  1.64e+00  7.40e-03  5.67e-01  7.28e-03  1.81e-02  8.97e-01  
  6  +4.6839e-01  +1.5885e+00  1.12e+00  3.21e-03  2.46e-01  6.70e-03  8.05e-03  6.12e-01  
  7  +4.5303e-01  +1.3381e+00  8.85e-01  2.40e-03  1.83e-01  4.30e-03  6.22e-03  3.27e-01  
  8  +4.1997e-01  +8.6148e-01  4.42e-01  1.24e-03  9.20e-02  3.77e-05  3.56e-03  7.84e-01  
  9  +3.7983e-01  +5.8427e-01  2.04e-01  5.14e-04  3.78e-02  2.75e-05  1.65e-03  6.05e-01  
 10  +3.6150e-01  +4.9053e-01  1.29e-01  3.10e-04  2.28e-02  2.30e-05  1.06e-03  4.38e-01  
 11  +3.4419e-01  +4.0294e-01  5.88e-02  1.37e-04  1.01e-02  1.18e-05  5.03e-04  5.67e-01  
 12  +3.3515e-01  +3.5817e-01  2.30e-02  5.29e-05  3.87e-03  5.26e-06  2.03e-04  6.39e-01  
 13  +3.3127e-01  +3.3964e-01  8.37e-03  1.85e-05  1.35e-03  3.17e-06  7.40e-05  8.59e-01  
 14  +3.2913e-01  +3.3121e-01  2.08e-03  4.41e-06  3.22e-04  8.74e-07  1.84e-05  8.63e-01  
 15  +3.2841e-01  +3.2844e-01  3.26e-05  6.86e-08  5.00e-06  1.34e-08  2.90e-07  9.88e-01  
 16  +3.2840e-01  +3.2840e-01  3.26e-07  6.86e-10  5.00e-08  1.34e-10  2.90e-09  9.90e-01  
 17  +3.2840e-01  +3.2840e-01  3.26e-09  6.86e-12  5.00e-10  1.34e-12  2.91e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.8507ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:17 PM: Optimal value: 3.284e-01
(CVXPY) Sep 20 07:57:17 PM: Compilation took 6.005e-03 seconds
(CVXPY) Sep 20 07:57:17 PM: Solver (including time spent in interface) took 1.755e-02 seconds
Iteration: 13, Objective: 0.3284
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:17 PM: Your problem has 649 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:17 PM: Finished problem compilation (took 6.011e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 649
  constraints   = 1149
  nnz(P)        = 0
  nnz(A)        = 9330
  cones (total) = 1
    : Nonnegative = 1,  numel = 1149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9950e-01  +5.0178e+02  5.01e+02  9.58e-01  3.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.6503e-01  +1.0957e+02  1.09e+02  4.31e-01  2.20e+01  3.80e-03  5.78e-01  5.84e-01  
  2  +5.2101e-01  +1.2739e+01  1.22e+01  1.35e-01  8.87e+00  1.85e-02  2.52e-01  9.90e-01  
  3  +5.0940e-01  +3.8555e+00  3.35e+00  5.25e-02  3.80e+00  3.92e-03  1.21e-01  5.91e-01  
  4  +5.0353e-01  +2.6966e+00  2.19e+00  2.68e-02  2.00e+00  4.63e-03  6.54e-02  6.11e-01  
  5  +4.9558e-01  +2.4766e+00  1.98e+00  1.15e-02  8.79e-01  4.26e-03  2.79e-02  9.18e-01  
  6  +4.7544e-01  +1.8406e+00  1.37e+00  4.19e-03  3.22e-01  5.22e-03  1.03e-02  6.53e-01  
  7  +4.5528e-01  +1.5576e+00  1.10e+00  2.81e-03  2.14e-01  4.06e-03  7.10e-03  4.04e-01  
  8  +4.2772e-01  +9.6652e-01  5.39e-01  1.62e-03  1.20e-01  3.11e-05  4.55e-03  7.15e-01  
  9  +3.9740e-01  +7.2999e-01  3.33e-01  8.93e-04  6.58e-02  2.95e-05  2.71e-03  4.53e-01  
 10  +3.6991e-01  +5.5614e-01  1.86e-01  4.69e-04  3.42e-02  2.73e-05  1.54e-03  5.18e-01  
 11  +3.5074e-01  +4.5195e-01  1.01e-01  2.44e-04  1.78e-02  1.85e-05  8.62e-04  5.07e-01  
 12  +3.3789e-01  +3.8312e-01  4.52e-02  1.06e-04  7.72e-03  1.15e-05  3.98e-04  6.49e-01  
 13  +3.3102e-01  +3.4923e-01  1.82e-02  4.15e-05  3.03e-03  5.79e-06  1.63e-04  7.09e-01  
 14  +3.2694e-01  +3.3120e-01  4.26e-03  9.39e-06  6.83e-04  1.62e-06  3.83e-05  8.61e-01  
 15  +3.2609e-01  +3.2779e-01  1.69e-03  3.63e-06  2.64e-04  7.02e-07  1.52e-05  7.85e-01  
 16  +3.2553e-01  +3.2560e-01  7.30e-05  1.55e-07  1.13e-05  3.01e-08  6.57e-07  9.58e-01  
 17  +3.2550e-01  +3.2550e-01  7.32e-07  1.56e-09  1.13e-07  3.02e-10  6.59e-09  9.90e-01  
 18  +3.2550e-01  +3.2550e-01  7.33e-09  1.56e-11  1.13e-09  3.02e-12  6.61e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.0505ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:17 PM: Optimal value: 3.255e-01
(CVXPY) Sep 20 07:57:17 PM: Compilation took 6.011e-03 seconds
(CVXPY) Sep 20 07:57:17 PM: Solver (including time spent in interface) took 2.004e-02 seconds
Iteration: 14, Objective: 0.3255
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:17 PM: Your problem has 659 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:17 PM: Finished problem compilation (took 7.120e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 659
  constraints   = 1159
  nnz(P)        = 0
  nnz(A)        = 9424
  cones (total) = 1
    : Nonnegative = 1,  numel = 1159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9948e-01  +5.0189e+02  5.01e+02  9.58e-01  3.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.6317e-01  +1.0958e+02  1.09e+02  4.31e-01  2.18e+01  3.81e-03  5.77e-01  5.85e-01  
  2  +5.2014e-01  +1.2856e+01  1.23e+01  1.34e-01  8.77e+00  1.86e-02  2.50e-01  9.90e-01  
  3  +5.0892e-01  +3.7438e+00  3.23e+00  4.86e-02  3.52e+00  3.95e-03  1.12e-01  6.08e-01  
  4  +5.0597e-01  +3.1574e+00  2.65e+00  3.27e-02  2.42e+00  4.38e-03  7.68e-02  3.48e-01  
  5  +5.0062e-01  +2.8369e+00  2.34e+00  2.23e-02  1.66e+00  2.60e-03  5.47e-02  6.56e-01  
  6  +4.8099e-01  +1.9673e+00  1.49e+00  4.80e-03  3.71e-01  5.33e-03  1.15e-02  7.94e-01  
  7  +4.5980e-01  +1.6412e+00  1.18e+00  3.17e-03  2.43e-01  4.15e-03  7.82e-03  3.94e-01  
  8  +4.3161e-01  +1.0428e+00  6.11e-01  1.91e-03  1.43e-01  3.22e-05  5.23e-03  6.65e-01  
  9  +3.9723e-01  +7.7035e-01  3.73e-01  1.03e-03  7.54e-02  5.56e-05  3.05e-03  5.56e-01  
 10  +3.7369e-01  +6.2212e-01  2.48e-01  6.47e-04  4.72e-02  5.09e-05  2.07e-03  4.46e-01  
 11  +3.4180e-01  +4.3689e-01  9.51e-02  2.32e-04  1.69e-02  2.34e-05  8.38e-04  6.84e-01  
 12  +3.2365e-01  +3.4768e-01  2.40e-02  5.63e-05  4.08e-03  6.86e-06  2.26e-04  7.97e-01  
 13  +3.1842e-01  +3.2365e-01  5.23e-03  1.21e-05  8.74e-04  1.65e-06  5.06e-05  8.24e-01  
 14  +3.1760e-01  +3.2007e-01  2.47e-03  5.56e-06  4.02e-04  8.94e-07  2.38e-05  7.26e-01  
 15  +3.1686e-01  +3.1705e-01  1.88e-04  4.21e-07  3.04e-05  6.88e-08  1.83e-06  9.30e-01  
 16  +3.1680e-01  +3.1680e-01  1.98e-06  4.41e-09  3.19e-07  7.22e-10  1.93e-08  9.90e-01  
 17  +3.1680e-01  +3.1680e-01  1.98e-08  4.42e-11  3.20e-09  7.22e-12  1.93e-10  9.90e-01  
 18  +3.1680e-01  +3.1680e-01  1.99e-10  4.44e-13  3.21e-11  7.26e-14  1.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.6269ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:17 PM: Optimal value: 3.168e-01
(CVXPY) Sep 20 07:57:17 PM: Compilation took 7.120e-03 seconds
(CVXPY) Sep 20 07:57:17 PM: Solver (including time spent in interface) took 1.903e-02 seconds
Iteration: 15, Objective: 0.3168
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:17 PM: Your problem has 669 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:17 PM: Finished problem compilation (took 6.521e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 669
  constraints   = 1169
  nnz(P)        = 0
  nnz(A)        = 9526
  cones (total) = 1
    : Nonnegative = 1,  numel = 1169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9946e-01  +5.0189e+02  5.01e+02  9.59e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.6188e-01  +1.0963e+02  1.09e+02  4.32e-01  2.17e+01  3.81e-03  5.77e-01  5.85e-01  
  2  +5.1931e-01  +1.2946e+01  1.24e+01  1.34e-01  8.71e+00  1.87e-02  2.49e-01  9.90e-01  
  3  +5.0839e-01  +3.5978e+00  3.09e+00  4.48e-02  3.26e+00  3.89e-03  1.03e-01  6.28e-01  
  4  +5.0664e-01  +3.2867e+00  2.78e+00  3.39e-02  2.51e+00  4.30e-03  7.86e-02  2.48e-01  
  5  +5.0176e-01  +2.9448e+00  2.44e+00  2.68e-02  1.97e+00  2.44e-03  6.65e-02  4.65e-01  
  6  +4.8162e-01  +1.8676e+00  1.39e+00  4.61e-03  3.56e-01  5.53e-03  1.10e-02  8.42e-01  
  7  +4.6112e-01  +1.5944e+00  1.13e+00  3.19e-03  2.44e-01  4.17e-03  7.84e-03  3.84e-01  
  8  +4.2998e-01  +1.0449e+00  6.15e-01  1.97e-03  1.46e-01  3.32e-05  5.37e-03  6.77e-01  
  9  +3.9043e-01  +7.2680e-01  3.36e-01  9.23e-04  6.74e-02  3.11e-05  2.77e-03  5.38e-01  
 10  +3.6991e-01  +6.1288e-01  2.43e-01  6.35e-04  4.60e-02  5.03e-05  2.04e-03  4.80e-01  
 11  +3.3969e-01  +4.4040e-01  1.01e-01  2.49e-04  1.79e-02  2.37e-05  9.00e-04  6.35e-01  
 12  +3.2214e-01  +3.5138e-01  2.92e-02  6.94e-05  4.99e-03  9.19e-06  2.78e-04  8.12e-01  
 13  +3.1578e-01  +3.2186e-01  6.08e-03  1.42e-05  1.02e-03  2.10e-06  6.00e-05  8.49e-01  
 14  +3.1487e-01  +3.1785e-01  2.98e-03  6.78e-06  4.87e-04  1.13e-06  2.94e-05  7.23e-01  
 15  +3.1401e-01  +3.1435e-01  3.41e-04  7.69e-07  5.52e-05  1.30e-07  3.40e-06  8.99e-01  
 16  +3.1390e-01  +3.1391e-01  3.93e-06  8.84e-09  6.35e-07  1.49e-09  3.92e-08  9.89e-01  
 17  +3.1390e-01  +3.1390e-01  3.93e-08  8.85e-11  6.35e-09  1.49e-11  3.93e-10  9.90e-01  
 18  +3.1390e-01  +3.1390e-01  3.95e-10  8.88e-13  6.38e-11  1.50e-13  3.95e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.5419ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:17 PM: Optimal value: 3.139e-01
(CVXPY) Sep 20 07:57:17 PM: Compilation took 6.521e-03 seconds
(CVXPY) Sep 20 07:57:17 PM: Solver (including time spent in interface) took 1.856e-02 seconds
Iteration: 16, Objective: 0.3139
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:17 PM: Your problem has 679 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:17 PM: Finished problem compilation (took 8.108e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 679
  constraints   = 1179
  nnz(P)        = 0
  nnz(A)        = 9598
  cones (total) = 1
    : Nonnegative = 1,  numel = 1179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9946e-01  +5.0189e+02  5.01e+02  9.59e-01  3.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.6102e-01  +1.0966e+02  1.09e+02  4.32e-01  2.15e+01  3.82e-03  5.76e-01  5.85e-01  
  2  +5.1875e-01  +1.2986e+01  1.25e+01  1.33e-01  8.64e+00  1.88e-02  2.48e-01  9.90e-01  
  3  +5.0794e-01  +3.4659e+00  2.96e+00  4.20e-02  3.06e+00  3.81e-03  9.69e-02  6.46e-01  
  4  +5.0673e-01  +3.2880e+00  2.78e+00  3.35e-02  2.47e+00  4.22e-03  7.74e-02  2.09e-01  
  5  +5.0205e-01  +3.0169e+00  2.51e+00  2.74e-02  2.01e+00  2.56e-03  6.73e-02  4.26e-01  
  6  +4.8337e-01  +1.9856e+00  1.50e+00  5.31e-03  4.09e-01  5.44e-03  1.26e-02  8.20e-01  
  7  +4.5930e-01  +1.6130e+00  1.15e+00  3.38e-03  2.57e-01  3.64e-03  8.35e-03  4.63e-01  
  8  +4.3824e-01  +1.2274e+00  7.89e-01  2.45e-03  1.83e-01  9.78e-04  6.47e-03  5.12e-01  
  9  +3.9503e-01  +8.0057e-01  4.06e-01  1.11e-03  8.14e-02  3.64e-04  3.25e-03  5.98e-01  
 10  +3.6670e-01  +6.1766e-01  2.51e-01  6.56e-04  4.73e-02  2.01e-04  2.10e-03  4.31e-01  
 11  +3.3822e-01  +4.5049e-01  1.12e-01  2.81e-04  2.01e-02  7.71e-05  1.01e-03  6.11e-01  
 12  +3.1923e-01  +3.4848e-01  2.92e-02  7.11e-05  5.07e-03  1.58e-05  2.86e-04  8.61e-01  
 13  +3.1333e-01  +3.2075e-01  7.42e-03  1.75e-05  1.25e-03  3.60e-06  7.55e-05  8.58e-01  
 14  +3.1171e-01  +3.1393e-01  2.22e-03  5.09e-06  3.63e-04  1.04e-06  2.29e-05  7.64e-01  
 15  +3.1102e-01  +3.1108e-01  5.86e-05  1.33e-07  9.50e-06  2.52e-08  6.11e-07  9.78e-01  
 16  +3.1100e-01  +3.1100e-01  5.87e-07  1.34e-09  9.52e-08  2.53e-10  6.13e-09  9.90e-01  
 17  +3.1100e-01  +3.1100e-01  5.87e-09  1.34e-11  9.52e-10  2.53e-12  6.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.9345ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:17 PM: Optimal value: 3.110e-01
(CVXPY) Sep 20 07:57:17 PM: Compilation took 8.108e-03 seconds
(CVXPY) Sep 20 07:57:17 PM: Solver (including time spent in interface) took 1.881e-02 seconds
Iteration: 17, Objective: 0.3110
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:17 PM: Your problem has 689 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:17 PM: Finished problem compilation (took 7.534e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 689
  constraints   = 1189
  nnz(P)        = 0
  nnz(A)        = 9688
  cones (total) = 1
    : Nonnegative = 1,  numel = 1189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9945e-01  +5.0191e+02  5.01e+02  9.59e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.6008e-01  +1.0969e+02  1.09e+02  4.32e-01  2.14e+01  3.82e-03  5.76e-01  5.85e-01  
  2  +5.1811e-01  +1.3047e+01  1.25e+01  1.33e-01  8.58e+00  1.89e-02  2.48e-01  9.90e-01  
  3  +5.0734e-01  +3.2775e+00  2.77e+00  3.83e-02  2.80e+00  3.65e-03  8.89e-02  6.74e-01  
  4  +5.0646e-01  +3.1868e+00  2.68e+00  3.17e-02  2.34e+00  4.05e-03  7.32e-02  1.83e-01  
  5  +5.0198e-01  +3.0685e+00  2.57e+00  2.65e-02  1.95e+00  2.70e-03  6.40e-02  4.36e-01  
  6  +4.8380e-01  +2.1359e+00  1.65e+00  5.85e-03  4.50e-01  5.47e-03  1.38e-02  7.91e-01  
  7  +4.6161e-01  +1.7282e+00  1.27e+00  3.85e-03  2.92e-01  3.64e-03  9.42e-03  4.32e-01  
  8  +4.4454e-01  +1.4105e+00  9.66e-01  2.89e-03  2.17e-01  1.88e-03  7.38e-03  3.86e-01  
  9  +4.0559e-01  +9.2103e-01  5.15e-01  1.46e-03  1.07e-01  4.26e-04  4.12e-03  6.80e-01  
 10  +3.5815e-01  +5.5709e-01  1.99e-01  5.20e-04  3.72e-02  1.18e-04  1.70e-03  6.78e-01  
 11  +3.3854e-01  +4.5634e-01  1.18e-01  2.97e-04  2.12e-02  6.61e-05  1.05e-03  4.83e-01  
 12  +3.1920e-01  +3.5628e-01  3.71e-02  9.07e-05  6.46e-03  1.87e-05  3.58e-04  7.40e-01  
 13  +3.1321e-01  +3.2656e-01  1.33e-02  3.19e-05  2.27e-03  6.10e-06  1.33e-04  8.91e-01  
 14  +3.0960e-01  +3.1082e-01  1.22e-03  2.88e-06  2.05e-04  5.05e-07  1.27e-05  9.17e-01  
 15  +3.0923e-01  +3.0933e-01  9.38e-05  2.19e-07  1.55e-05  3.64e-08  9.95e-07  9.86e-01  
 16  +3.0920e-01  +3.0920e-01  9.64e-07  2.25e-09  1.60e-07  3.73e-10  1.02e-08  9.90e-01  
 17  +3.0920e-01  +3.0920e-01  9.66e-09  2.25e-11  1.60e-09  3.74e-12  1.03e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.1978ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:17 PM: Optimal value: 3.092e-01
(CVXPY) Sep 20 07:57:17 PM: Compilation took 7.534e-03 seconds
(CVXPY) Sep 20 07:57:17 PM: Solver (including time spent in interface) took 1.957e-02 seconds
Iteration: 18, Objective: 0.3092
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:18 PM: Your problem has 699 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:18 PM: Finished problem compilation (took 7.523e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 699
  constraints   = 1199
  nnz(P)        = 0
  nnz(A)        = 9795
  cones (total) = 1
    : Nonnegative = 1,  numel = 1199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9944e-01  +5.0195e+02  5.01e+02  9.59e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.5925e-01  +1.0967e+02  1.09e+02  4.32e-01  2.12e+01  3.82e-03  5.75e-01  5.85e-01  
  2  +5.1761e-01  +1.3059e+01  1.25e+01  1.32e-01  8.45e+00  1.89e-02  2.47e-01  9.90e-01  
  3  +5.0674e-01  +3.0869e+00  2.58e+00  3.51e-02  2.56e+00  3.49e-03  8.18e-02  7.00e-01  
  4  +5.0619e-01  +3.1037e+00  2.60e+00  3.01e-02  2.22e+00  3.88e-03  6.97e-02  1.77e-01  
  5  +5.0124e-01  +3.2174e+00  2.72e+00  2.37e-02  1.75e+00  3.11e-03  5.59e-02  5.50e-01  
  6  +4.8342e-01  +2.3362e+00  1.85e+00  6.59e-03  5.04e-01  5.21e-03  1.55e-02  7.27e-01  
  7  +4.5845e-01  +1.7890e+00  1.33e+00  4.06e-03  3.07e-01  3.13e-03  1.00e-02  4.86e-01  
  8  +4.4233e-01  +1.5141e+00  1.07e+00  3.10e-03  2.31e-01  1.88e-03  7.88e-03  3.89e-01  
  9  +4.0261e-01  +9.1729e-01  5.15e-01  1.47e-03  1.07e-01  3.05e-04  4.17e-03  7.13e-01  
 10  +3.5758e-01  +5.7211e-01  2.15e-01  5.67e-04  4.05e-02  1.02e-04  1.84e-03  6.51e-01  
 11  +3.3514e-01  +4.5535e-01  1.20e-01  3.03e-04  2.15e-02  5.60e-05  1.08e-03  5.28e-01  
 12  +3.1888e-01  +3.7211e-01  5.32e-02  1.30e-04  9.21e-03  2.40e-05  5.03e-04  5.95e-01  
 13  +3.0912e-01  +3.2436e-01  1.52e-02  3.57e-05  2.53e-03  6.79e-06  1.50e-04  9.03e-01  
 14  +3.0489e-01  +3.0610e-01  1.21e-03  2.80e-06  1.98e-04  4.98e-07  1.23e-05  9.25e-01  
 15  +3.0451e-01  +3.0454e-01  3.32e-05  7.65e-08  5.41e-06  1.32e-08  3.42e-07  9.80e-01  
 16  +3.0450e-01  +3.0450e-01  3.32e-07  7.66e-10  5.42e-08  1.32e-10  3.42e-09  9.90e-01  
 17  +3.0450e-01  +3.0450e-01  3.32e-09  7.66e-12  5.42e-10  1.32e-12  3.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.9873ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:18 PM: Optimal value: 3.045e-01
(CVXPY) Sep 20 07:57:18 PM: Compilation took 7.523e-03 seconds
(CVXPY) Sep 20 07:57:18 PM: Solver (including time spent in interface) took 1.906e-02 seconds
Iteration: 19, Objective: 0.3045
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:18 PM: Your problem has 709 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:18 PM: Finished problem compilation (took 7.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 709
  constraints   = 1209
  nnz(P)        = 0
  nnz(A)        = 9860
  cones (total) = 1
    : Nonnegative = 1,  numel = 1209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0200e+02  5.02e+02  9.59e-01  3.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.5822e-01  +1.0976e+02  1.09e+02  4.33e-01  2.11e+01  3.83e-03  5.75e-01  5.85e-01  
  2  +5.1713e-01  +1.3105e+01  1.26e+01  1.32e-01  8.38e+00  1.90e-02  2.46e-01  9.90e-01  
  3  +5.0624e-01  +2.9270e+00  2.42e+00  3.23e-02  2.35e+00  3.34e-03  7.57e-02  7.24e-01  
  4  +5.0583e-01  +3.0056e+00  2.50e+00  2.83e-02  2.09e+00  3.72e-03  6.57e-02  1.84e-01  
  5  +5.0021e-01  +3.2910e+00  2.79e+00  2.07e-02  1.54e+00  3.51e-03  4.83e-02  6.22e-01  
  6  +4.8217e-01  +2.4205e+00  1.94e+00  6.84e-03  5.20e-01  4.97e-03  1.61e-02  6.70e-01  
  7  +4.5852e-01  +1.9109e+00  1.45e+00  4.34e-03  3.27e-01  3.54e-03  1.06e-02  4.31e-01  
  8  +4.4131e-01  +1.6382e+00  1.20e+00  3.28e-03  2.45e-01  2.54e-03  8.27e-03  3.36e-01  
  9  +4.1010e-01  +1.0174e+00  6.07e-01  1.86e-03  1.35e-01  2.05e-05  5.23e-03  8.38e-01  
 10  +3.5971e-01  +5.8313e-01  2.23e-01  5.99e-04  4.27e-02  2.00e-05  1.93e-03  6.84e-01  
 11  +3.3519e-01  +4.6372e-01  1.29e-01  3.27e-04  2.32e-02  2.14e-05  1.15e-03  5.27e-01  
 12  +3.1348e-01  +3.5327e-01  3.98e-02  9.75e-05  6.90e-03  8.05e-06  3.84e-04  7.20e-01  
 13  +3.0702e-01  +3.2104e-01  1.40e-02  3.37e-05  2.38e-03  4.65e-06  1.39e-04  8.43e-01  
 14  +3.0384e-01  +3.0723e-01  3.39e-03  7.99e-06  5.65e-04  1.20e-06  3.41e-05  8.15e-01  
 15  +3.0287e-01  +3.0338e-01  5.14e-04  1.18e-06  8.36e-05  1.85e-07  5.19e-06  8.76e-01  
 16  +3.0270e-01  +3.0271e-01  5.64e-06  1.29e-08  9.16e-07  2.03e-09  5.71e-08  9.90e-01  
 17  +3.0270e-01  +3.0270e-01  5.64e-08  1.29e-10  9.17e-09  2.03e-11  5.72e-10  9.90e-01  
 18  +3.0270e-01  +3.0270e-01  5.66e-10  1.30e-12  9.19e-11  2.04e-13  5.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.4173ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:18 PM: Optimal value: 3.027e-01
(CVXPY) Sep 20 07:57:18 PM: Compilation took 7.001e-03 seconds
(CVXPY) Sep 20 07:57:18 PM: Solver (including time spent in interface) took 2.201e-02 seconds
Iteration: 20, Objective: 0.3027
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:18 PM: Your problem has 719 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:18 PM: Finished problem compilation (took 6.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 719
  constraints   = 1219
  nnz(P)        = 0
  nnz(A)        = 9930
  cones (total) = 1
    : Nonnegative = 1,  numel = 1219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0197e+02  5.01e+02  9.59e-01  3.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.5740e-01  +1.0975e+02  1.09e+02  4.33e-01  2.10e+01  3.83e-03  5.75e-01  5.85e-01  
  2  +5.1635e-01  +1.3171e+01  1.27e+01  1.31e-01  8.32e+00  1.91e-02  2.46e-01  9.90e-01  
  3  +5.0539e-01  +2.6479e+00  2.14e+00  2.77e-02  2.03e+00  3.08e-03  6.54e-02  7.63e-01  
  4  +5.0491e-01  +2.7994e+00  2.29e+00  2.44e-02  1.80e+00  3.46e-03  5.67e-02  2.30e-01  
  5  +4.9704e-01  +3.2026e+00  2.71e+00  1.51e-02  1.13e+00  4.24e-03  3.47e-02  7.06e-01  
  6  +4.7538e-01  +2.2636e+00  1.79e+00  5.83e-03  4.42e-01  4.42e-03  1.38e-02  6.17e-01  
  7  +4.4673e-01  +1.7004e+00  1.25e+00  3.52e-03  2.63e-01  2.61e-03  8.77e-03  5.09e-01  
  8  +4.1835e-01  +1.0734e+00  6.55e-01  2.07e-03  1.50e-01  2.10e-05  5.69e-03  7.25e-01  
  9  +3.6768e-01  +6.5344e-01  2.86e-01  7.80e-04  5.56e-02  6.52e-05  2.43e-03  7.69e-01  
 10  +3.4494e-01  +5.2847e-01  1.84e-01  4.77e-04  3.38e-02  4.73e-05  1.60e-03  4.30e-01  
 11  +3.2129e-01  +4.0093e-01  7.96e-02  1.98e-04  1.40e-02  2.20e-05  7.35e-04  6.05e-01  
 12  +3.0857e-01  +3.3546e-01  2.69e-02  6.50e-05  4.59e-03  9.14e-06  2.59e-04  7.81e-01  
 13  +3.0469e-01  +3.1677e-01  1.21e-02  2.90e-05  2.05e-03  4.34e-06  1.19e-04  6.42e-01  
 14  +3.0169e-01  +3.0324e-01  1.55e-03  3.69e-06  2.61e-04  5.69e-07  1.58e-05  9.21e-01  
 15  +3.0121e-01  +3.0125e-01  3.66e-05  8.71e-08  6.16e-06  1.31e-08  3.77e-07  9.79e-01  
 16  +3.0120e-01  +3.0120e-01  3.67e-07  8.72e-10  6.17e-08  1.31e-10  3.77e-09  9.90e-01  
 17  +3.0120e-01  +3.0120e-01  3.67e-09  8.73e-12  6.18e-10  1.31e-12  3.78e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.9958ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:18 PM: Optimal value: 3.012e-01
(CVXPY) Sep 20 07:57:18 PM: Compilation took 6.008e-03 seconds
(CVXPY) Sep 20 07:57:18 PM: Solver (including time spent in interface) took 2.247e-02 seconds
Iteration: 21, Objective: 0.3012
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:18 PM: Your problem has 729 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:18 PM: Finished problem compilation (took 8.033e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 729
  constraints   = 1229
  nnz(P)        = 0
  nnz(A)        = 10058
  cones (total) = 1
    : Nonnegative = 1,  numel = 1229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9944e-01  +5.0213e+02  5.02e+02  9.60e-01  3.46e+01  1.00e+00  1.01e+00   ------   
  1  +5.5687e-01  +1.0971e+02  1.09e+02  4.34e-01  2.08e+01  3.83e-03  5.74e-01  5.86e-01  
  2  +5.1590e-01  +1.3215e+01  1.27e+01  1.31e-01  8.21e+00  1.91e-02  2.44e-01  9.90e-01  
  3  +5.0475e-01  +2.4402e+00  1.94e+00  2.44e-02  1.79e+00  2.88e-03  5.79e-02  7.91e-01  
  4  +5.0387e-01  +2.6765e+00  2.17e+00  2.09e-02  1.55e+00  3.36e-03  4.84e-02  3.23e-01  
  5  +4.9187e-01  +2.8888e+00  2.40e+00  1.02e-02  7.74e-01  5.00e-03  2.36e-02  7.42e-01  
  6  +4.6264e-01  +1.8085e+00  1.35e+00  4.25e-03  3.19e-01  2.70e-03  1.03e-02  6.59e-01  
  7  +4.4482e-01  +1.5905e+00  1.15e+00  3.25e-03  2.42e-01  1.97e-03  8.11e-03  3.56e-01  
  8  +4.1183e-01  +1.0283e+00  6.16e-01  1.98e-03  1.43e-01  1.55e-05  5.57e-03  7.81e-01  
  9  +3.5501e-01  +5.7505e-01  2.20e-01  5.89e-04  4.18e-02  3.76e-05  1.87e-03  7.81e-01  
 10  +3.3434e-01  +4.7991e-01  1.46e-01  3.71e-04  2.64e-02  3.18e-05  1.26e-03  4.31e-01  
 11  +3.1266e-01  +3.7415e-01  6.15e-02  1.51e-04  1.07e-02  1.43e-05  5.65e-04  5.94e-01  
 12  +3.0184e-01  +3.2361e-01  2.18e-02  5.18e-05  3.67e-03  6.52e-06  2.07e-04  7.49e-01  
 13  +2.9820e-01  +3.0744e-01  9.23e-03  2.17e-05  1.54e-03  2.96e-06  8.98e-05  6.40e-01  
 14  +2.9574e-01  +2.9683e-01  1.09e-03  2.55e-06  1.81e-04  3.51e-07  1.09e-05  8.94e-01  
 15  +2.9540e-01  +2.9542e-01  1.41e-05  3.30e-08  2.33e-06  4.39e-09  1.41e-07  9.87e-01  
 16  +2.9540e-01  +2.9540e-01  1.41e-07  3.30e-10  2.33e-08  4.39e-11  1.41e-09  9.90e-01  
 17  +2.9540e-01  +2.9540e-01  1.41e-09  3.30e-12  2.33e-10  4.39e-13  1.41e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.2156ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:18 PM: Optimal value: 2.954e-01
(CVXPY) Sep 20 07:57:18 PM: Compilation took 8.033e-03 seconds
(CVXPY) Sep 20 07:57:18 PM: Solver (including time spent in interface) took 2.420e-02 seconds
Iteration: 22, Objective: 0.2954
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:18 PM: Your problem has 739 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:18 PM: Finished problem compilation (took 7.523e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 739
  constraints   = 1239
  nnz(P)        = 0
  nnz(A)        = 10142
  cones (total) = 1
    : Nonnegative = 1,  numel = 1239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0218e+02  5.02e+02  9.60e-01  3.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.5527e-01  +1.0994e+02  1.09e+02  4.35e-01  2.08e+01  3.83e-03  5.75e-01  5.85e-01  
  2  +5.1494e-01  +1.3336e+01  1.28e+01  1.31e-01  8.19e+00  1.93e-02  2.45e-01  9.90e-01  
  3  +5.0405e-01  +2.3410e+00  1.84e+00  2.24e-02  1.65e+00  2.89e-03  5.33e-02  8.09e-01  
  4  +4.9732e-01  +2.7852e+00  2.29e+00  1.36e-02  1.02e+00  4.32e-03  3.13e-02  6.86e-01  
  5  +4.7868e-01  +2.1798e+00  1.70e+00  6.08e-03  4.60e-01  4.73e-03  1.43e-02  5.77e-01  
  6  +4.5385e-01  +1.8381e+00  1.38e+00  4.00e-03  3.00e-01  3.69e-03  9.76e-03  4.32e-01  
  7  +4.1877e-01  +1.1282e+00  7.09e-01  2.18e-03  1.58e-01  3.16e-05  5.85e-03  7.46e-01  
  8  +3.6285e-01  +6.2767e-01  2.65e-01  7.27e-04  5.16e-02  3.01e-05  2.23e-03  6.86e-01  
  9  +3.3926e-01  +5.2007e-01  1.81e-01  4.71e-04  3.33e-02  3.66e-05  1.56e-03  4.70e-01  
 10  +3.1243e-01  +3.8287e-01  7.04e-02  1.75e-04  1.24e-02  1.58e-05  6.50e-04  6.33e-01  
 11  +3.0162e-01  +3.3047e-01  2.89e-02  7.01e-05  4.94e-03  8.62e-06  2.77e-04  7.16e-01  
 12  +2.9589e-01  +3.0403e-01  8.15e-03  1.96e-05  1.38e-03  2.59e-06  8.11e-05  7.63e-01  
 13  +2.9394e-01  +2.9542e-01  1.48e-03  3.55e-06  2.50e-04  4.71e-07  1.51e-05  8.27e-01  
 14  +2.9353e-01  +2.9360e-01  7.47e-05  1.79e-07  1.26e-05  2.84e-08  7.69e-07  9.90e-01  
 15  +2.9350e-01  +2.9350e-01  7.50e-07  1.80e-09  1.27e-07  2.85e-10  7.72e-09  9.90e-01  
 16  +2.9350e-01  +2.9350e-01  7.51e-09  1.80e-11  1.27e-09  2.85e-12  7.73e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.5038ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:18 PM: Optimal value: 2.935e-01
(CVXPY) Sep 20 07:57:18 PM: Compilation took 7.523e-03 seconds
(CVXPY) Sep 20 07:57:18 PM: Solver (including time spent in interface) took 2.666e-02 seconds
Iteration: 23, Objective: 0.2935
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:18 PM: Your problem has 749 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:18 PM: Finished problem compilation (took 8.433e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 749
  constraints   = 1249
  nnz(P)        = 0
  nnz(A)        = 10239
  cones (total) = 1
    : Nonnegative = 1,  numel = 1249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0215e+02  5.02e+02  9.60e-01  3.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.5474e-01  +1.0992e+02  1.09e+02  4.35e-01  2.06e+01  3.84e-03  5.75e-01  5.85e-01  
  2  +5.1458e-01  +1.3367e+01  1.29e+01  1.31e-01  8.09e+00  1.93e-02  2.44e-01  9.90e-01  
  3  +5.0374e-01  +2.4049e+00  1.90e+00  2.27e-02  1.66e+00  3.08e-03  5.38e-02  8.04e-01  
  4  +4.9511e-01  +2.6943e+00  2.20e+00  1.19e-02  8.93e-01  5.04e-03  2.76e-02  6.86e-01  
  5  +4.7481e-01  +2.0781e+00  1.60e+00  5.78e-03  4.34e-01  4.56e-03  1.37e-02  5.70e-01  
  6  +4.4848e-01  +1.7741e+00  1.33e+00  3.70e-03  2.76e-01  3.86e-03  9.08e-03  4.34e-01  
  7  +4.2138e-01  +1.1367e+00  7.15e-01  2.44e-03  1.76e-01  2.84e-05  6.67e-03  6.16e-01  
  8  +3.6206e-01  +6.4627e-01  2.84e-01  7.84e-04  5.54e-02  5.73e-05  2.41e-03  7.89e-01  
  9  +3.4359e-01  +5.5446e-01  2.11e-01  5.60e-04  3.95e-02  4.99e-05  1.81e-03  3.41e-01  
 10  +3.1736e-01  +4.1931e-01  1.02e-01  2.57e-04  1.81e-02  2.76e-05  9.17e-04  5.75e-01  
 11  +3.0091e-01  +3.4027e-01  3.94e-02  9.52e-05  6.73e-03  1.22e-05  3.69e-04  6.90e-01  
 12  +2.9229e-01  +3.0078e-01  8.49e-03  2.01e-05  1.42e-03  2.72e-06  8.34e-05  8.10e-01  
 13  +2.9013e-01  +2.9133e-01  1.20e-03  2.82e-06  1.99e-04  4.05e-07  1.21e-05  8.98e-01  
 14  +2.8976e-01  +2.8977e-01  1.60e-05  3.78e-08  2.67e-06  5.17e-09  1.63e-07  9.87e-01  
 15  +2.8975e-01  +2.8975e-01  1.60e-07  3.78e-10  2.67e-08  5.17e-11  1.63e-09  9.90e-01  
 16  +2.8975e-01  +2.8975e-01  1.60e-09  3.78e-12  2.67e-10  5.18e-13  1.63e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.9859ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:18 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:18 PM: Optimal value: 2.898e-01
(CVXPY) Sep 20 07:57:18 PM: Compilation took 8.433e-03 seconds
(CVXPY) Sep 20 07:57:18 PM: Solver (including time spent in interface) took 2.755e-02 seconds
Iteration: 24, Objective: 0.2898
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:19 PM: Your problem has 759 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:19 PM: Finished problem compilation (took 7.519e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 759
  constraints   = 1259
  nnz(P)        = 0
  nnz(A)        = 10328
  cones (total) = 1
    : Nonnegative = 1,  numel = 1259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0174e+02  5.01e+02  9.60e-01  3.43e+01  1.00e+00  1.01e+00   ------   
  1  +5.5334e-01  +1.0984e+02  1.09e+02  4.35e-01  2.05e+01  3.85e-03  5.73e-01  5.85e-01  
  2  +5.1378e-01  +1.3436e+01  1.29e+01  1.30e-01  7.98e+00  1.94e-02  2.42e-01  9.90e-01  
  3  +5.0300e-01  +2.6439e+00  2.14e+00  2.44e-02  1.77e+00  3.67e-03  5.72e-02  7.85e-01  
  4  +4.8886e-01  +2.5682e+00  2.08e+00  9.37e-03  7.05e-01  6.86e-03  2.17e-02  7.10e-01  
  5  +4.5008e-01  +1.5139e+00  1.06e+00  3.54e-03  2.62e-01  1.77e-03  8.81e-03  8.25e-01  
  6  +4.3446e-01  +1.3438e+00  9.09e-01  2.87e-03  2.10e-01  1.20e-03  7.34e-03  3.30e-01  
  7  +3.8414e-01  +8.3316e-01  4.49e-01  1.32e-03  9.38e-02  1.72e-04  3.81e-03  7.77e-01  
  8  +3.4879e-01  +6.1051e-01  2.62e-01  7.20e-04  5.06e-02  9.86e-05  2.28e-03  5.08e-01  
  9  +3.1856e-01  +4.4734e-01  1.29e-01  3.34e-04  2.35e-02  5.08e-05  1.17e-03  6.49e-01  
 10  +2.9962e-01  +3.5395e-01  5.43e-02  1.35e-04  9.46e-03  2.17e-05  5.13e-04  6.36e-01  
 11  +2.8779e-01  +2.9929e-01  1.15e-02  2.76e-05  1.94e-03  4.51e-06  1.14e-04  8.39e-01  
 12  +2.8531e-01  +2.8841e-01  3.09e-03  7.38e-06  5.18e-04  1.21e-06  3.14e-05  7.52e-01  
 13  +2.8492e-01  +2.8682e-01  1.90e-03  4.43e-06  3.13e-04  7.56e-07  1.89e-05  5.11e-01  
 14  +2.8433e-01  +2.8441e-01  8.25e-05  1.92e-07  1.35e-05  3.27e-08  8.31e-07  9.90e-01  
 15  +2.8430e-01  +2.8430e-01  8.26e-07  1.92e-09  1.35e-07  3.27e-10  8.33e-09  9.90e-01  
 16  +2.8430e-01  +2.8430e-01  8.26e-09  1.92e-11  1.35e-09  3.27e-12  8.33e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.2173ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:19 PM: Optimal value: 2.843e-01
(CVXPY) Sep 20 07:57:19 PM: Compilation took 7.519e-03 seconds
(CVXPY) Sep 20 07:57:19 PM: Solver (including time spent in interface) took 2.754e-02 seconds
Iteration: 25, Objective: 0.2843
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:19 PM: Your problem has 765 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:19 PM: Finished problem compilation (took 9.484e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 765
  constraints   = 1265
  nnz(P)        = 0
  nnz(A)        = 10368
  cones (total) = 1
    : Nonnegative = 1,  numel = 1265

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9939e-01  +5.0176e+02  5.01e+02  9.60e-01  3.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.5259e-01  +1.0987e+02  1.09e+02  4.36e-01  2.04e+01  3.85e-03  5.73e-01  5.85e-01  
  2  +5.1325e-01  +1.3500e+01  1.30e+01  1.29e-01  7.96e+00  1.95e-02  2.42e-01  9.90e-01  
  3  +5.0251e-01  +2.6572e+00  2.15e+00  2.40e-02  1.74e+00  3.81e-03  5.62e-02  7.87e-01  
  4  +4.8627e-01  +2.5137e+00  2.03e+00  8.62e-03  6.48e-01  7.36e-03  2.00e-02  7.19e-01  
  5  +4.4881e-01  +1.5919e+00  1.14e+00  3.86e-03  2.84e-01  2.03e-03  9.63e-03  7.54e-01  
  6  +4.3308e-01  +1.3878e+00  9.55e-01  3.08e-03  2.25e-01  1.27e-03  7.95e-03  3.57e-01  
  7  +3.8195e-01  +8.5663e-01  4.75e-01  1.39e-03  9.87e-02  1.74e-04  4.03e-03  8.24e-01  
  8  +3.3967e-01  +5.6812e-01  2.28e-01  6.25e-04  4.37e-02  8.12e-05  2.03e-03  6.02e-01  
  9  +3.1854e-01  +4.5859e-01  1.40e-01  3.67e-04  2.57e-02  5.31e-05  1.28e-03  5.11e-01  
 10  +2.9800e-01  +3.5442e-01  5.64e-02  1.41e-04  9.87e-03  2.14e-05  5.39e-04  6.34e-01  
 11  +2.8581e-01  +2.9712e-01  1.13e-02  2.73e-05  1.91e-03  4.29e-06  1.14e-04  8.55e-01  
 12  +2.8339e-01  +2.8643e-01  3.04e-03  7.30e-06  5.11e-04  1.16e-06  3.13e-05  7.55e-01  
 13  +2.8301e-01  +2.8488e-01  1.87e-03  4.40e-06  3.09e-04  7.26e-07  1.89e-05  5.13e-01  
 14  +2.8243e-01  +2.8251e-01  7.91e-05  1.85e-07  1.30e-05  3.08e-08  8.08e-07  9.90e-01  
 15  +2.8240e-01  +2.8240e-01  7.92e-07  1.85e-09  1.30e-07  3.08e-10  8.09e-09  9.90e-01  
 16  +2.8240e-01  +2.8240e-01  7.92e-09  1.85e-11  1.30e-09  3.09e-12  8.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.4921ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:19 PM: Optimal value: 2.824e-01
(CVXPY) Sep 20 07:57:19 PM: Compilation took 9.484e-03 seconds
(CVXPY) Sep 20 07:57:19 PM: Solver (including time spent in interface) took 2.756e-02 seconds
Iteration: 26, Objective: 0.2824
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:19 PM: Your problem has 775 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:19 PM: Finished problem compilation (took 7.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 775
  constraints   = 1275
  nnz(P)        = 0
  nnz(A)        = 10436
  cones (total) = 1
    : Nonnegative = 1,  numel = 1275

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9938e-01  +5.0175e+02  5.01e+02  9.60e-01  3.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.5198e-01  +1.0993e+02  1.09e+02  4.37e-01  2.03e+01  3.85e-03  5.74e-01  5.85e-01  
  2  +5.1251e-01  +1.3568e+01  1.31e+01  1.29e-01  7.93e+00  1.96e-02  2.42e-01  9.90e-01  
  3  +5.0179e-01  +2.6790e+00  2.18e+00  2.36e-02  1.70e+00  3.99e-03  5.52e-02  7.91e-01  
  4  +4.8441e-01  +2.4432e+00  1.96e+00  8.32e-03  6.23e-01  7.50e-03  1.94e-02  7.05e-01  
  5  +4.5081e-01  +1.6743e+00  1.22e+00  4.26e-03  3.13e-01  2.75e-03  1.06e-02  6.67e-01  
  6  +4.3475e-01  +1.4795e+00  1.04e+00  3.36e-03  2.45e-01  1.88e-03  8.59e-03  3.51e-01  
  7  +3.8302e-01  +8.6715e-01  4.84e-01  1.44e-03  1.01e-01  1.80e-05  4.15e-03  8.99e-01  
  8  +3.3765e-01  +5.5837e-01  2.21e-01  6.06e-04  4.22e-02  3.02e-05  1.98e-03  6.36e-01  
  9  +3.1668e-01  +4.5169e-01  1.35e-01  3.55e-04  2.47e-02  2.98e-05  1.24e-03  5.36e-01  
 10  +2.9586e-01  +3.4750e-01  5.16e-02  1.29e-04  9.00e-03  1.26e-05  4.96e-04  6.53e-01  
 11  +2.8427e-01  +2.9352e-01  9.25e-03  2.24e-05  1.56e-03  2.43e-06  9.38e-05  8.45e-01  
 12  +2.8269e-01  +2.8643e-01  3.75e-03  9.03e-06  6.30e-04  1.07e-06  3.85e-05  6.56e-01  
 13  +2.8194e-01  +2.8329e-01  1.36e-03  3.22e-06  2.25e-04  4.11e-07  1.39e-05  6.83e-01  
 14  +2.8151e-01  +2.8155e-01  3.40e-05  8.04e-08  5.62e-06  1.20e-08  3.51e-07  9.90e-01  
 15  +2.8150e-01  +2.8150e-01  3.40e-07  8.04e-10  5.62e-08  1.20e-10  3.51e-09  9.90e-01  
 16  +2.8150e-01  +2.8150e-01  3.40e-09  8.05e-12  5.63e-10  1.20e-12  3.52e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.3739ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:19 PM: Optimal value: 2.815e-01
(CVXPY) Sep 20 07:57:19 PM: Compilation took 7.509e-03 seconds
(CVXPY) Sep 20 07:57:19 PM: Solver (including time spent in interface) took 2.953e-02 seconds
Iteration: 27, Objective: 0.2815
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:19 PM: Your problem has 785 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:19 PM: Finished problem compilation (took 9.112e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 785
  constraints   = 1285
  nnz(P)        = 0
  nnz(A)        = 10504
  cones (total) = 1
    : Nonnegative = 1,  numel = 1285

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +5.0180e+02  5.01e+02  9.61e-01  3.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.5087e-01  +1.0988e+02  1.09e+02  4.37e-01  2.02e+01  3.85e-03  5.73e-01  5.85e-01  
  2  +5.1142e-01  +1.3666e+01  1.32e+01  1.28e-01  7.85e+00  1.97e-02  2.41e-01  9.90e-01  
  3  +5.0051e-01  +2.7242e+00  2.22e+00  2.29e-02  1.65e+00  4.32e-03  5.34e-02  7.96e-01  
  4  +4.7965e-01  +2.3921e+00  1.91e+00  7.62e-03  5.71e-01  8.24e-03  1.78e-02  7.07e-01  
  5  +4.5149e-01  +1.8816e+00  1.43e+00  4.68e-03  3.46e-01  5.20e-03  1.14e-02  4.93e-01  
  6  +4.2319e-01  +1.4267e+00  1.00e+00  3.07e-03  2.23e-01  2.33e-03  7.89e-03  4.86e-01  
  7  +3.6744e-01  +7.6846e-01  4.01e-01  1.15e-03  8.09e-02  4.38e-04  3.37e-03  6.99e-01  
  8  +3.4570e-01  +6.4414e-01  2.98e-01  8.33e-04  5.81e-02  3.01e-04  2.59e-03  3.31e-01  
  9  +3.1194e-01  +4.5007e-01  1.38e-01  3.67e-04  2.55e-02  1.09e-04  1.28e-03  6.99e-01  
 10  +2.9590e-01  +3.6818e-01  7.23e-02  1.84e-04  1.28e-02  5.19e-05  6.93e-04  5.71e-01  
 11  +2.8164e-01  +2.9868e-01  1.70e-02  4.18e-05  2.92e-03  1.07e-05  1.73e-04  7.94e-01  
 12  +2.7804e-01  +2.8237e-01  4.34e-03  1.05e-05  7.33e-04  2.60e-06  4.56e-05  7.59e-01  
 13  +2.7731e-01  +2.7918e-01  1.87e-03  4.45e-06  3.11e-04  1.01e-06  1.95e-05  7.07e-01  
 14  +2.7673e-01  +2.7682e-01  8.87e-05  2.10e-07  1.47e-05  4.01e-08  9.36e-07  9.76e-01  
 15  +2.7670e-01  +2.7670e-01  8.92e-07  2.12e-09  1.48e-07  4.03e-10  9.42e-09  9.90e-01  
 16  +2.7670e-01  +2.7670e-01  8.92e-09  2.12e-11  1.48e-09  4.03e-12  9.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.4132ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:19 PM: Optimal value: 2.767e-01
(CVXPY) Sep 20 07:57:19 PM: Compilation took 9.112e-03 seconds
(CVXPY) Sep 20 07:57:19 PM: Solver (including time spent in interface) took 3.024e-02 seconds
Iteration: 28, Objective: 0.2767
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:19 PM: Your problem has 795 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:19 PM: Finished problem compilation (took 8.035e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 795
  constraints   = 1295
  nnz(P)        = 0
  nnz(A)        = 10571
  cones (total) = 1
    : Nonnegative = 1,  numel = 1295

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9935e-01  +5.0185e+02  5.01e+02  9.61e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.4947e-01  +1.1003e+02  1.09e+02  4.38e-01  2.01e+01  3.85e-03  5.74e-01  5.85e-01  
  2  +5.1017e-01  +1.3754e+01  1.32e+01  1.28e-01  7.83e+00  1.99e-02  2.41e-01  9.90e-01  
  3  +4.9903e-01  +2.6241e+00  2.13e+00  2.10e-02  1.52e+00  4.41e-03  4.93e-02  8.15e-01  
  4  +4.7793e-01  +2.3070e+00  1.83e+00  7.66e-03  5.71e-01  7.80e-03  1.80e-02  6.73e-01  
  5  +4.4588e-01  +1.8227e+00  1.38e+00  4.42e-03  3.25e-01  5.62e-03  1.08e-02  5.10e-01  
  6  +4.2530e-01  +1.5271e+00  1.10e+00  3.42e-03  2.48e-01  3.22e-03  8.72e-03  3.59e-01  
  7  +3.7163e-01  +8.3404e-01  4.62e-01  1.37e-03  9.63e-02  2.35e-04  3.98e-03  7.87e-01  
  8  +3.3615e-01  +5.9986e-01  2.64e-01  7.51e-04  5.19e-02  1.25e-04  2.40e-03  5.01e-01  
  9  +3.0977e-01  +4.4952e-01  1.40e-01  3.80e-04  2.63e-02  6.54e-05  1.33e-03  6.02e-01  
 10  +2.9202e-01  +3.5729e-01  6.53e-02  1.69e-04  1.18e-02  2.99e-05  6.42e-04  6.22e-01  
 11  +2.7859e-01  +2.9142e-01  1.28e-02  3.20e-05  2.23e-03  5.41e-06  1.34e-04  8.47e-01  
 12  +2.7601e-01  +2.7958e-01  3.57e-03  8.84e-06  6.14e-04  1.45e-06  3.83e-05  8.63e-01  
 13  +2.7539e-01  +2.7712e-01  1.73e-03  4.20e-06  2.93e-04  7.05e-07  1.84e-05  6.10e-01  
 14  +2.7483e-01  +2.7491e-01  8.13e-05  1.96e-07  1.37e-05  3.09e-08  8.71e-07  9.88e-01  
 15  +2.7480e-01  +2.7480e-01  8.19e-07  1.98e-09  1.38e-07  3.12e-10  8.79e-09  9.90e-01  
 16  +2.7480e-01  +2.7480e-01  8.20e-09  1.98e-11  1.38e-09  3.12e-12  8.79e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 32.0347ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:19 PM: Optimal value: 2.748e-01
(CVXPY) Sep 20 07:57:19 PM: Compilation took 8.035e-03 seconds
(CVXPY) Sep 20 07:57:19 PM: Solver (including time spent in interface) took 3.397e-02 seconds
Iteration: 29, Objective: 0.2748
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:19 PM: Your problem has 805 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:19 PM: Finished problem compilation (took 9.506e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 805
  constraints   = 1305
  nnz(P)        = 0
  nnz(A)        = 10630
  cones (total) = 1
    : Nonnegative = 1,  numel = 1305

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9926e-01  +5.0185e+02  5.01e+02  9.61e-01  3.37e+01  1.00e+00  1.01e+00   ------   
  1  +5.4713e-01  +1.1021e+02  1.10e+02  4.40e-01  2.01e+01  3.85e-03  5.76e-01  5.83e-01  
  2  +5.0869e-01  +1.3960e+01  1.35e+01  1.28e-01  7.81e+00  2.02e-02  2.42e-01  9.90e-01  
  3  +4.9722e-01  +2.5875e+00  2.09e+00  1.97e-02  1.42e+00  4.65e-03  4.61e-02  8.30e-01  
  4  +4.7173e-01  +2.2087e+00  1.74e+00  6.88e-03  5.11e-01  8.19e-03  1.61e-02  6.83e-01  
  5  +4.4187e-01  +1.8867e+00  1.44e+00  4.40e-03  3.24e-01  7.29e-03  1.07e-02  4.04e-01  
  6  +4.0464e-01  +1.1718e+00  7.67e-01  2.61e-03  1.85e-01  5.85e-05  7.09e-03  6.65e-01  
  7  +3.5341e-01  +7.1630e-01  3.63e-01  1.10e-03  7.61e-02  4.48e-05  3.34e-03  6.02e-01  
  8  +3.3758e-01  +6.2277e-01  2.85e-01  8.39e-04  5.79e-02  4.28e-05  2.66e-03  2.70e-01  
  9  +3.0888e-01  +4.5531e-01  1.46e-01  4.09e-04  2.82e-02  3.19e-05  1.43e-03  5.94e-01  
 10  +2.9021e-01  +3.5838e-01  6.82e-02  1.81e-04  1.25e-02  1.76e-05  6.86e-04  6.18e-01  
 11  +2.7718e-01  +2.9478e-01  1.76e-02  4.47e-05  3.11e-03  4.70e-06  1.87e-04  7.64e-01  
 12  +2.7351e-01  +2.7816e-01  4.64e-03  1.15e-05  8.01e-04  1.43e-06  5.09e-05  8.28e-01  
 13  +2.7275e-01  +2.7502e-01  2.27e-03  5.53e-06  3.86e-04  7.48e-07  2.49e-05  6.88e-01  
 14  +2.7201e-01  +2.7205e-01  3.59e-05  8.72e-08  6.08e-06  1.12e-08  3.99e-07  9.87e-01  
 15  +2.7200e-01  +2.7200e-01  3.59e-07  8.72e-10  6.08e-08  1.12e-10  3.99e-09  9.90e-01  
 16  +2.7200e-01  +2.7200e-01  3.59e-09  8.72e-12  6.08e-10  1.12e-12  4.00e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 33.8225ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:19 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:19 PM: Optimal value: 2.720e-01
(CVXPY) Sep 20 07:57:19 PM: Compilation took 9.506e-03 seconds
(CVXPY) Sep 20 07:57:19 PM: Solver (including time spent in interface) took 3.563e-02 seconds
Iteration: 30, Objective: 0.2720
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:20 PM: Your problem has 815 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:20 PM: Finished problem compilation (took 9.516e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 815
  constraints   = 1315
  nnz(P)        = 0
  nnz(A)        = 10691
  cones (total) = 1
    : Nonnegative = 1,  numel = 1315

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9926e-01  +5.0188e+02  5.01e+02  9.61e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.4623e-01  +1.1027e+02  1.10e+02  4.40e-01  1.99e+01  3.85e-03  5.75e-01  5.83e-01  
  2  +5.0812e-01  +1.4017e+01  1.35e+01  1.27e-01  7.74e+00  2.03e-02  2.41e-01  9.90e-01  
  3  +4.9648e-01  +2.6549e+00  2.16e+00  1.98e-02  1.43e+00  4.87e-03  4.64e-02  8.29e-01  
  4  +4.6888e-01  +2.2155e+00  1.75e+00  6.70e-03  4.97e-01  8.53e-03  1.58e-02  6.89e-01  
  5  +4.3953e-01  +1.9022e+00  1.46e+00  4.44e-03  3.26e-01  7.35e-03  1.08e-02  3.93e-01  
  6  +4.0291e-01  +1.1782e+00  7.75e-01  2.66e-03  1.88e-01  5.79e-05  7.28e-03  6.61e-01  
  7  +3.4815e-01  +6.8539e-01  3.37e-01  1.02e-03  7.01e-02  4.40e-05  3.14e-03  6.47e-01  
  8  +3.2779e-01  +5.6649e-01  2.39e-01  7.00e-04  4.79e-02  3.94e-05  2.29e-03  3.54e-01  
  9  +3.0607e-01  +4.4444e-01  1.38e-01  3.87e-04  2.65e-02  2.78e-05  1.37e-03  4.83e-01  
 10  +2.8573e-01  +3.3735e-01  5.16e-02  1.37e-04  9.39e-03  1.26e-05  5.37e-04  6.96e-01  
 11  +2.7629e-01  +2.9106e-01  1.48e-02  3.79e-05  2.61e-03  3.83e-06  1.62e-04  7.43e-01  
 12  +2.7438e-01  +2.8212e-01  7.73e-03  1.96e-05  1.35e-03  2.27e-06  8.61e-05  6.24e-01  
 13  +2.7309e-01  +2.7655e-01  3.46e-03  8.61e-06  5.94e-04  1.06e-06  3.88e-05  6.04e-01  
 14  +2.7210e-01  +2.7238e-01  2.77e-04  6.85e-07  4.73e-05  9.73e-08  3.16e-06  9.90e-01  
 15  +2.7200e-01  +2.7200e-01  2.82e-06  6.94e-09  4.79e-07  9.83e-10  3.21e-08  9.90e-01  
 16  +2.7200e-01  +2.7200e-01  2.82e-08  6.95e-11  4.79e-09  9.83e-12  3.21e-10  9.90e-01  
 17  +2.7200e-01  +2.7200e-01  2.83e-10  6.97e-13  4.81e-11  9.87e-14  3.22e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 40.9075ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:20 PM: Optimal value: 2.720e-01
(CVXPY) Sep 20 07:57:20 PM: Compilation took 9.516e-03 seconds
(CVXPY) Sep 20 07:57:20 PM: Solver (including time spent in interface) took 4.252e-02 seconds
Iteration: 31, Objective: 0.2720
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:20 PM: Your problem has 825 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:20 PM: Finished problem compilation (took 9.515e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 825
  constraints   = 1325
  nnz(P)        = 0
  nnz(A)        = 10801
  cones (total) = 1
    : Nonnegative = 1,  numel = 1325

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9926e-01  +5.0188e+02  5.01e+02  9.61e-01  3.35e+01  1.00e+00  1.01e+00   ------   
  1  +5.4535e-01  +1.1027e+02  1.10e+02  4.40e-01  1.98e+01  3.86e-03  5.74e-01  5.84e-01  
  2  +5.0763e-01  +1.4063e+01  1.36e+01  1.27e-01  7.64e+00  2.04e-02  2.40e-01  9.90e-01  
  3  +4.9581e-01  +2.8036e+00  2.31e+00  2.08e-02  1.48e+00  5.17e-03  4.85e-02  8.22e-01  
  4  +4.6817e-01  +2.2695e+00  1.80e+00  7.10e-03  5.24e-01  8.41e-03  1.68e-02  6.76e-01  
  5  +4.3772e-01  +1.9415e+00  1.50e+00  4.58e-03  3.35e-01  7.37e-03  1.11e-02  4.12e-01  
  6  +4.0037e-01  +1.1818e+00  7.81e-01  2.64e-03  1.86e-01  5.96e-05  7.20e-03  6.85e-01  
  7  +3.4901e-01  +7.0660e-01  3.58e-01  1.09e-03  7.48e-02  5.29e-05  3.33e-03  6.42e-01  
  8  +3.2750e-01  +5.7395e-01  2.46e-01  7.27e-04  4.97e-02  4.40e-05  2.37e-03  3.69e-01  
  9  +3.0587e-01  +4.4929e-01  1.43e-01  4.04e-04  2.76e-02  3.10e-05  1.41e-03  4.91e-01  
 10  +2.8778e-01  +3.5261e-01  6.48e-02  1.74e-04  1.19e-02  1.56e-05  6.64e-04  5.97e-01  
 11  +2.7596e-01  +2.9310e-01  1.71e-02  4.43e-05  3.04e-03  4.42e-06  1.85e-04  7.66e-01  
 12  +2.7389e-01  +2.8310e-01  9.21e-03  2.36e-05  1.62e-03  2.68e-06  1.01e-04  6.02e-01  
 13  +2.7149e-01  +2.7243e-01  9.44e-04  2.39e-06  1.64e-04  2.74e-07  1.07e-05  9.15e-01  
 14  +2.7121e-01  +2.7124e-01  3.32e-05  8.42e-08  5.76e-06  9.77e-09  3.81e-07  9.68e-01  
 15  +2.7120e-01  +2.7120e-01  3.34e-07  8.46e-10  5.78e-08  9.81e-11  3.82e-09  9.90e-01  
 16  +2.7120e-01  +2.7120e-01  3.34e-09  8.46e-12  5.78e-10  9.81e-13  3.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 39.3075ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:20 PM: Optimal value: 2.712e-01
(CVXPY) Sep 20 07:57:20 PM: Compilation took 9.515e-03 seconds
(CVXPY) Sep 20 07:57:20 PM: Solver (including time spent in interface) took 4.115e-02 seconds
Iteration: 32, Objective: 0.2712
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:20 PM: Your problem has 828 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:20 PM: Finished problem compilation (took 1.004e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 828
  constraints   = 1328
  nnz(P)        = 0
  nnz(A)        = 10818
  cones (total) = 1
    : Nonnegative = 1,  numel = 1328

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0187e+02  5.01e+02  9.61e-01  3.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.4519e-01  +1.1028e+02  1.10e+02  4.41e-01  1.98e+01  3.86e-03  5.74e-01  5.84e-01  
  2  +5.0749e-01  +1.4071e+01  1.36e+01  1.27e-01  7.63e+00  2.04e-02  2.40e-01  9.90e-01  
  3  +4.9562e-01  +2.8035e+00  2.31e+00  2.07e-02  1.48e+00  5.20e-03  4.83e-02  8.23e-01  
  4  +4.6797e-01  +2.2622e+00  1.79e+00  7.12e-03  5.25e-01  8.32e-03  1.68e-02  6.74e-01  
  5  +4.3751e-01  +1.9409e+00  1.50e+00  4.59e-03  3.35e-01  7.37e-03  1.12e-02  4.11e-01  
  6  +4.0061e-01  +1.1823e+00  7.82e-01  2.65e-03  1.87e-01  5.96e-05  7.24e-03  6.82e-01  
  7  +3.5036e-01  +7.1856e-01  3.68e-01  1.13e-03  7.73e-02  5.23e-05  3.43e-03  6.25e-01  
  8  +3.2850e-01  +5.8146e-01  2.53e-01  7.49e-04  5.12e-02  4.36e-05  2.43e-03  3.69e-01  
  9  +3.0605e-01  +4.5056e-01  1.45e-01  4.08e-04  2.79e-02  3.05e-05  1.43e-03  5.01e-01  
 10  +2.8810e-01  +3.5436e-01  6.63e-02  1.78e-04  1.22e-02  1.57e-05  6.79e-04  5.93e-01  
 11  +2.7606e-01  +2.9355e-01  1.75e-02  4.53e-05  3.11e-03  4.46e-06  1.89e-04  7.67e-01  
 12  +2.7390e-01  +2.8315e-01  9.24e-03  2.37e-05  1.62e-03  2.67e-06  1.02e-04  6.10e-01  
 13  +2.7147e-01  +2.7234e-01  8.74e-04  2.22e-06  1.52e-04  2.51e-07  9.96e-06  9.23e-01  
 14  +2.7121e-01  +2.7124e-01  2.92e-05  7.40e-08  5.06e-06  8.52e-09  3.35e-07  9.70e-01  
 15  +2.7120e-01  +2.7120e-01  2.93e-07  7.43e-10  5.07e-08  8.54e-11  3.36e-09  9.90e-01  
 16  +2.7120e-01  +2.7120e-01  2.93e-09  7.43e-12  5.07e-10  8.55e-13  3.36e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 39.82ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:20 PM: Optimal value: 2.712e-01
(CVXPY) Sep 20 07:57:20 PM: Compilation took 1.004e-02 seconds
(CVXPY) Sep 20 07:57:20 PM: Solver (including time spent in interface) took 4.158e-02 seconds
Iteration: 33, Objective: 0.2712
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:20 PM: Your problem has 830 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:20 PM: Finished problem compilation (took 9.457e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 830
  constraints   = 1330
  nnz(P)        = 0
  nnz(A)        = 10825
  cones (total) = 1
    : Nonnegative = 1,  numel = 1330

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0187e+02  5.01e+02  9.61e-01  3.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.4504e-01  +1.1029e+02  1.10e+02  4.41e-01  1.98e+01  3.86e-03  5.75e-01  5.84e-01  
  2  +5.0738e-01  +1.4075e+01  1.36e+01  1.27e-01  7.62e+00  2.04e-02  2.40e-01  9.90e-01  
  3  +4.9547e-01  +2.8269e+00  2.33e+00  2.08e-02  1.48e+00  5.25e-03  4.86e-02  8.22e-01  
  4  +4.6769e-01  +2.2674e+00  1.80e+00  7.17e-03  5.27e-01  8.31e-03  1.70e-02  6.73e-01  
  5  +4.3705e-01  +1.9453e+00  1.51e+00  4.62e-03  3.37e-01  7.35e-03  1.13e-02  4.13e-01  
  6  +4.0100e-01  +1.1894e+00  7.88e-01  2.69e-03  1.89e-01  5.92e-05  7.35e-03  6.79e-01  
  7  +3.5193e-01  +7.3465e-01  3.83e-01  1.18e-03  8.07e-02  5.36e-05  3.58e-03  6.13e-01  
  8  +3.2945e-01  +5.8938e-01  2.60e-01  7.73e-04  5.27e-02  4.38e-05  2.51e-03  3.72e-01  
  9  +3.0597e-01  +4.5031e-01  1.44e-01  4.09e-04  2.79e-02  3.01e-05  1.43e-03  5.19e-01  
 10  +2.8770e-01  +3.5211e-01  6.44e-02  1.74e-04  1.19e-02  1.55e-05  6.62e-04  6.14e-01  
 11  +2.7548e-01  +2.9062e-01  1.51e-02  3.92e-05  2.68e-03  3.97e-06  1.64e-04  8.02e-01  
 12  +2.7395e-01  +2.8317e-01  9.22e-03  2.36e-05  1.62e-03  2.76e-06  1.02e-04  5.77e-01  
 13  +2.7144e-01  +2.7221e-01  7.71e-04  1.96e-06  1.34e-04  2.26e-07  8.80e-06  9.33e-01  
 14  +2.7121e-01  +2.7123e-01  2.21e-05  5.62e-08  3.83e-06  6.54e-09  2.54e-07  9.73e-01  
 15  +2.7120e-01  +2.7120e-01  2.22e-07  5.63e-10  3.84e-08  6.56e-11  2.55e-09  9.90e-01  
 16  +2.7120e-01  +2.7120e-01  2.22e-09  5.63e-12  3.84e-10  6.56e-13  2.55e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 39.4234ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:20 PM: Optimal value: 2.712e-01
(CVXPY) Sep 20 07:57:20 PM: Compilation took 9.457e-03 seconds
(CVXPY) Sep 20 07:57:20 PM: Solver (including time spent in interface) took 4.132e-02 seconds
Iteration: 34, Objective: 0.2712
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:20 PM: Your problem has 840 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:20 PM: Finished problem compilation (took 9.032e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 840
  constraints   = 1340
  nnz(P)        = 0
  nnz(A)        = 10883
  cones (total) = 1
    : Nonnegative = 1,  numel = 1340

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0187e+02  5.01e+02  9.61e-01  3.33e+01  1.00e+00  1.01e+00   ------   
  1  +5.4513e-01  +1.1027e+02  1.10e+02  4.42e-01  1.97e+01  3.86e-03  5.75e-01  5.84e-01  
  2  +5.0728e-01  +1.4061e+01  1.36e+01  1.27e-01  7.58e+00  2.04e-02  2.40e-01  9.90e-01  
  3  +4.9543e-01  +2.9126e+00  2.42e+00  2.15e-02  1.53e+00  5.38e-03  5.03e-02  8.14e-01  
  4  +4.6764e-01  +2.2951e+00  1.83e+00  7.34e-03  5.38e-01  8.28e-03  1.74e-02  6.73e-01  
  5  +4.3597e-01  +1.9659e+00  1.53e+00  4.66e-03  3.39e-01  7.41e-03  1.14e-02  4.23e-01  
  6  +4.0111e-01  +1.1912e+00  7.90e-01  2.72e-03  1.90e-01  5.90e-05  7.44e-03  6.71e-01  
  7  +3.5115e-01  +7.2739e-01  3.76e-01  1.16e-03  7.91e-02  4.88e-05  3.53e-03  6.10e-01  
  8  +3.2932e-01  +5.8911e-01  2.60e-01  7.74e-04  5.26e-02  4.17e-05  2.51e-03  3.65e-01  
  9  +3.0544e-01  +4.4784e-01  1.42e-01  4.04e-04  2.74e-02  2.88e-05  1.42e-03  5.25e-01  
 10  +2.8797e-01  +3.5368e-01  6.57e-02  1.78e-04  1.21e-02  1.52e-05  6.80e-04  5.96e-01  
 11  +2.7548e-01  +2.9056e-01  1.51e-02  3.92e-05  2.67e-03  3.85e-06  1.65e-04  8.07e-01  
 12  +2.7397e-01  +2.8323e-01  9.25e-03  2.38e-05  1.62e-03  2.74e-06  1.03e-04  5.89e-01  
 13  +2.7146e-01  +2.7230e-01  8.42e-04  2.15e-06  1.46e-04  2.45e-07  9.69e-06  9.25e-01  
 14  +2.7121e-01  +2.7123e-01  2.17e-05  5.53e-08  3.76e-06  6.30e-09  2.52e-07  9.75e-01  
 15  +2.7120e-01  +2.7120e-01  2.17e-07  5.54e-10  3.77e-08  6.31e-11  2.52e-09  9.90e-01  
 16  +2.7120e-01  +2.7120e-01  2.17e-09  5.54e-12  3.77e-10  6.31e-13  2.52e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 39.0021ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:21 PM: Optimal value: 2.712e-01
(CVXPY) Sep 20 07:57:21 PM: Compilation took 9.032e-03 seconds
(CVXPY) Sep 20 07:57:21 PM: Solver (including time spent in interface) took 4.074e-02 seconds
Iteration: 35, Objective: 0.2712
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:21 PM: Your problem has 843 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:21 PM: Finished problem compilation (took 9.139e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 843
  constraints   = 1343
  nnz(P)        = 0
  nnz(A)        = 10897
  cones (total) = 1
    : Nonnegative = 1,  numel = 1343

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9924e-01  +5.0187e+02  5.01e+02  9.61e-01  3.33e+01  1.00e+00  1.01e+00   ------   
  1  +5.4435e-01  +1.1032e+02  1.10e+02  4.42e-01  1.96e+01  3.86e-03  5.75e-01  5.83e-01  
  2  +5.0667e-01  +1.4130e+01  1.36e+01  1.27e-01  7.56e+00  2.05e-02  2.40e-01  9.90e-01  
  3  +4.9460e-01  +2.9294e+00  2.43e+00  2.12e-02  1.51e+00  5.52e-03  4.97e-02  8.18e-01  
  4  +4.6561e-01  +2.2891e+00  1.82e+00  7.27e-03  5.32e-01  8.34e-03  1.73e-02  6.71e-01  
  5  +4.3271e-01  +1.9615e+00  1.53e+00  4.60e-03  3.34e-01  7.46e-03  1.13e-02  4.28e-01  
  6  +3.9753e-01  +1.2068e+00  8.09e-01  2.79e-03  1.95e-01  5.81e-05  7.70e-03  6.87e-01  
  7  +3.3920e-01  +6.2020e-01  2.81e-01  8.51e-04  5.78e-02  2.93e-05  2.67e-03  6.98e-01  
  8  +3.1484e-01  +5.0435e-01  1.90e-01  5.44e-04  3.69e-02  3.87e-05  1.83e-03  5.19e-01  
  9  +2.9274e-01  +3.8275e-01  9.00e-02  2.46e-04  1.67e-02  2.10e-05  9.14e-04  5.74e-01  
 10  +2.7659e-01  +2.9965e-01  2.31e-02  6.05e-05  4.11e-03  6.15e-06  2.50e-04  7.95e-01  
 11  +2.7224e-01  +2.7909e-01  6.85e-03  1.77e-05  1.20e-03  2.11e-06  7.75e-05  8.22e-01  
 12  +2.7041e-01  +2.7108e-01  6.74e-04  1.73e-06  1.17e-04  2.01e-07  7.89e-06  9.12e-01  
 13  +2.7020e-01  +2.7022e-01  1.38e-05  3.54e-08  2.40e-06  4.10e-09  1.62e-07  9.80e-01  
 14  +2.7020e-01  +2.7020e-01  1.38e-07  3.54e-10  2.40e-08  4.10e-11  1.62e-09  9.90e-01  
 15  +2.7020e-01  +2.7020e-01  1.38e-09  3.55e-12  2.40e-10  4.10e-13  1.63e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 39.6305ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:21 PM: Optimal value: 2.702e-01
(CVXPY) Sep 20 07:57:21 PM: Compilation took 9.139e-03 seconds
(CVXPY) Sep 20 07:57:21 PM: Solver (including time spent in interface) took 4.116e-02 seconds
FULL MODEL:
  Accruacy: 0.662
  Our objective: 0.32400000000000007

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x8 = 1)                       <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.018)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.026)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.018)
 OR (x1 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.024)
 OR (x1 = 1 AND x2 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.02)
 OR (x2 = 1 AND x4 = 0 AND x5 = 1 AND x8 = 0)                                                        <-- (term's our objective: 0.042)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 10.877070665359497
Best over terms:
  Our final objective: 0.04199999999999996
    Its accruacy: 0.521
    Its hamming distance: 9
  Shortest hamming distance: 3
    Its our objective: 0.01200000000000001
  Highest accruacy: 0.521
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

