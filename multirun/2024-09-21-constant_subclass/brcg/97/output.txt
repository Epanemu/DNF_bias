Command:
python test_script.py -s constant_subclass -d 3 -n 500 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.176
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 3.

Computed total variation: 0.192
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:14 PM: Your problem has 257 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:14 PM: Finished problem compilation (took 5.489e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 257
  constraints   = 507
  nnz(P)        = 0
  nnz(A)        = 1507
  cones (total) = 1
    : Nonnegative = 1,  numel = 507

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9918e-01  +2.5081e+02  2.50e+02  9.30e-01  1.70e+01  1.00e+00  1.01e+00   ------   
  1  +6.1899e-01  +4.6794e+01  4.62e+01  2.90e-01  8.71e+00  4.25e-03  4.39e-01  6.94e-01  
  2  +5.5210e-01  +8.0149e+00  7.46e+00  1.10e-01  3.86e+00  6.91e-03  2.10e-01  6.97e-01  
  3  +5.0028e-01  +1.2445e+00  7.44e-01  2.21e-02  7.49e-01  2.28e-03  1.88e-01  4.41e-01  
  4  +4.9893e-01  +6.9198e-01  1.93e-01  5.59e-03  1.94e-01  1.03e-03  3.93e-02  8.27e-01  
  5  +4.7273e-01  +7.3765e-01  2.65e-01  1.38e-03  4.92e-02  1.06e-02  4.43e-03  9.28e-01  
  6  +4.5667e-01  +5.4596e-01  8.93e-02  4.84e-04  1.71e-02  9.45e-05  1.74e-03  7.54e-01  
  7  +4.3709e-01  +4.5051e-01  1.34e-02  5.98e-05  2.11e-03  1.06e-05  2.48e-04  8.76e-01  
  8  +4.3297e-01  +4.3559e-01  2.62e-03  1.09e-05  3.84e-04  2.30e-06  4.86e-05  9.90e-01  
  9  +4.3211e-01  +4.3214e-01  2.77e-05  1.15e-07  4.04e-06  2.41e-08  5.17e-07  9.89e-01  
 10  +4.3210e-01  +4.3210e-01  2.77e-07  1.15e-09  4.04e-08  2.41e-10  5.17e-09  9.90e-01  
 11  +4.3210e-01  +4.3210e-01  2.77e-09  1.15e-11  4.04e-10  2.41e-12  5.17e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3815ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:14 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:14 PM: Optimal value: 4.321e-01
(CVXPY) Sep 20 07:27:14 PM: Compilation took 5.489e-03 seconds
(CVXPY) Sep 20 07:27:14 PM: Solver (including time spent in interface) took 2.006e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4321
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:14 PM: Your problem has 260 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:14 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 260
  constraints   = 510
  nnz(P)        = 0
  nnz(A)        = 1757
  cones (total) = 1
    : Nonnegative = 1,  numel = 510

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9882e-01  +2.5096e+02  2.50e+02  9.30e-01  1.80e+01  1.00e+00  1.01e+00   ------   
  1  +6.1671e-01  +4.7109e+01  4.65e+01  2.94e-01  9.26e+00  4.23e-03  4.47e-01  6.90e-01  
  2  +5.5066e-01  +7.8773e+00  7.33e+00  1.08e-01  4.02e+00  7.22e-03  2.08e-01  7.14e-01  
  3  +4.9933e-01  +1.1639e+00  6.65e-01  1.99e-02  7.13e-01  2.34e-03  1.79e-01  5.56e-01  
  4  +4.9820e-01  +6.9821e-01  2.00e-01  5.74e-03  2.10e-01  1.30e-03  3.84e-02  8.11e-01  
  5  +4.9697e-01  +6.9937e-01  2.02e-01  5.32e-03  1.96e-01  1.75e-03  2.77e-02  2.90e-01  
  6  +4.8315e-01  +8.0869e-01  3.26e-01  2.74e-03  1.03e-01  6.52e-03  8.54e-03  9.90e-01  
  7  +4.6470e-01  +7.0131e-01  2.37e-01  1.09e-03  4.11e-02  7.26e-03  3.36e-03  7.14e-01  
  8  +4.4314e-01  +5.7929e-01  1.36e-01  5.17e-04  1.94e-02  3.50e-03  1.67e-03  5.87e-01  
  9  +4.1245e-01  +4.3303e-01  2.06e-02  7.30e-05  2.72e-03  3.45e-05  2.62e-04  8.92e-01  
 10  +4.0427e-01  +4.0465e-01  3.80e-04  1.33e-06  4.96e-05  3.31e-07  5.04e-06  9.83e-01  
 11  +4.0410e-01  +4.0411e-01  3.79e-06  1.33e-08  4.95e-07  3.30e-09  5.05e-08  9.90e-01  
 12  +4.0410e-01  +4.0410e-01  3.79e-08  1.33e-10  4.95e-09  3.30e-11  5.05e-10  9.90e-01  
 13  +4.0410e-01  +4.0410e-01  3.79e-10  1.33e-12  4.95e-11  3.30e-13  5.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6923ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:14 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:14 PM: Optimal value: 4.041e-01
(CVXPY) Sep 20 07:27:14 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:27:14 PM: Solver (including time spent in interface) took 2.001e-03 seconds
FULL MODEL:
  Accruacy: 0.596
  Our objective: 0.192

IF 
    (x0 = 0 AND x2 = 0) <-- (term's our objective: 0.192)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.18391752243042
Best over terms:
  Our final objective: 0.192
    Its accruacy: 0.596
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.192
  Highest accruacy: 0.596
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

