Command:
python test_script.py -s constant_subclass -d 6 -n 50000 --seed 73 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.02092
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 6.

Computed total variation: 0.0394
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:36:52 PM: Your problem has 25013 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:36:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:36:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:36:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:36:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:36:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:36:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:36:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:36:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:36:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:36:52 PM: Finished problem compilation (took 1.316e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25013
  constraints   = 50013
  nnz(P)        = 0
  nnz(A)        = 225013
  cones (total) = 1
    : Nonnegative = 1,  numel = 50013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.23e+02  1.00e+00  1.00e+00   ------   
  1  +5.9317e-01  +5.1431e+03  5.14e+03  3.90e-01  1.35e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4210e-01  +6.8134e+02  6.81e+02  1.56e-01  6.85e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1087e-01  +1.7229e+02  1.72e+02  1.40e-01  6.15e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0082e-01  +1.0787e+01  1.03e+01  2.98e-02  1.28e+01  3.44e-06  1.93e-01  4.61e-01  
  5  +5.0000e-01  +9.8463e-01  4.85e-01  1.46e-03  6.50e-01  2.51e-05  1.79e-01  4.93e-01  
  6  +5.0000e-01  +5.5052e-01  5.05e-02  1.51e-04  6.73e-02  2.50e-06  1.93e-02  8.93e-01  
  7  +5.0000e-01  +5.3189e-01  3.19e-02  9.51e-05  4.25e-02  2.88e-06  6.10e-03  7.58e-01  
  8  +4.9997e-01  +5.3776e-01  3.78e-02  1.04e-04  4.63e-02  1.84e-05  9.32e-04  8.88e-01  
  9  +4.9878e-01  +5.3512e-01  3.63e-02  6.65e-06  2.97e-03  7.20e-04  2.16e-05  9.77e-01  
 10  +4.9587e-01  +5.2521e-01  2.93e-02  1.70e-06  7.59e-04  1.87e-03  5.46e-06  7.63e-01  
 11  +4.9424e-01  +5.0600e-01  1.18e-02  6.24e-07  2.79e-04  1.52e-04  2.17e-06  7.90e-01  
 12  +4.9153e-01  +4.9431e-01  2.78e-03  1.18e-07  5.27e-05  2.69e-05  4.57e-07  8.25e-01  
 13  +4.9063e-01  +4.9077e-01  1.42e-04  5.69e-09  2.55e-06  9.05e-07  2.31e-08  9.62e-01  
 14  +4.9058e-01  +4.9058e-01  1.44e-06  5.76e-11  2.58e-08  9.12e-09  2.35e-10  9.90e-01  
 15  +4.9058e-01  +4.9058e-01  1.44e-08  5.76e-13  2.58e-10  9.12e-11  2.35e-12  9.90e-01  
 16  +4.9058e-01  +4.9058e-01  1.45e-10  5.76e-15  2.60e-12  1.26e-12  3.19e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 398.8557ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:36:53 PM: Optimal value: 4.906e-01
(CVXPY) Sep 20 07:36:53 PM: Compilation took 1.316e-01 seconds
(CVXPY) Sep 20 07:36:53 PM: Solver (including time spent in interface) took 4.373e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4906
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:36:53 PM: Your problem has 25023 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:36:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:36:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:36:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:36:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:36:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:36:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:36:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:36:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:36:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:36:53 PM: Finished problem compilation (took 1.192e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25023
  constraints   = 50023
  nnz(P)        = 0
  nnz(A)        = 239982
  cones (total) = 1
    : Nonnegative = 1,  numel = 50023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.9316e-01  +5.1431e+03  5.14e+03  3.90e-01  1.36e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4209e-01  +6.8121e+02  6.81e+02  1.56e-01  6.89e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7223e+02  1.72e+02  1.40e-01  6.18e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0741e+01  1.02e+01  2.97e-02  1.29e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +4.9999e-01  +9.7640e-01  4.76e-01  1.44e-03  6.42e-01  2.59e-05  1.77e-01  5.37e-01  
  6  +5.0000e-01  +6.1280e-01  1.13e-01  3.37e-04  1.51e-01  4.24e-06  3.85e-02  9.35e-01  
  7  +5.0000e-01  +5.5989e-01  5.99e-02  1.79e-04  8.02e-02  2.34e-06  1.66e-02  6.89e-01  
  8  +5.0000e-01  +5.6168e-01  6.17e-02  1.84e-04  8.26e-02  2.23e-06  1.63e-02  1.05e-01  
  9  +5.0000e-01  +5.7270e-01  7.27e-02  2.17e-04  9.72e-02  1.79e-06  1.23e-02  6.86e-01  
 10  +5.0000e-01  +5.3874e-01  3.87e-02  1.14e-04  5.11e-02  3.40e-06  2.14e-03  8.43e-01  
 11  +4.9963e-01  +5.3896e-01  3.93e-02  9.69e-06  4.36e-03  2.23e-04  3.05e-05  9.87e-01  
 12  +4.9808e-01  +5.3358e-01  3.55e-02  2.00e-06  8.98e-04  9.21e-04  6.16e-06  8.09e-01  
 13  +4.9700e-01  +5.2423e-01  2.72e-02  1.63e-06  7.35e-04  4.76e-04  5.05e-06  3.15e-01  
 14  +4.9640e-01  +5.1701e-01  2.06e-02  1.16e-06  5.23e-04  5.19e-06  3.57e-06  8.60e-01  
 15  +4.9608e-01  +5.1568e-01  1.96e-02  1.01e-06  4.54e-04  4.67e-06  3.08e-06  2.23e-01  
 16  +4.9608e-01  +5.1567e-01  1.96e-02  1.01e-06  4.52e-04  4.44e-06  3.06e-06  4.85e-02  
 17  +4.9580e-01  +5.1456e-01  1.88e-02  9.04e-07  4.07e-04  3.76e-06  2.74e-06  2.25e-01  
 18  +4.9551e-01  +5.1339e-01  1.79e-02  9.04e-07  4.07e-04  3.26e-06  2.73e-06  3.88e-02  
 19  +4.9545e-01  +5.1290e-01  1.74e-02  7.78e-07  3.50e-04  7.57e-08  2.31e-06  9.42e-01  
 20  +4.9322e-01  +5.0387e-01  1.07e-02  3.94e-07  1.77e-04  5.98e-08  1.16e-06  5.50e-01  
 21  +4.9227e-01  +5.0038e-01  8.11e-03  2.64e-07  1.19e-04  5.13e-08  7.78e-07  3.48e-01  
 22  +4.9178e-01  +4.9875e-01  6.97e-03  2.58e-07  1.16e-04  3.88e-08  7.77e-07  2.98e-02  
 23  +4.9013e-01  +4.9271e-01  2.58e-03  8.22e-08  3.70e-05  1.76e-08  2.48e-07  6.94e-01  
 24  +4.9012e-01  +4.9268e-01  2.56e-03  8.14e-08  3.66e-05  1.79e-08  2.45e-07  2.67e-02  
 25  +4.8914e-01  +4.8931e-01  1.72e-04  5.23e-09  2.35e-06  2.03e-09  1.59e-08  9.73e-01  
 26  +4.8906e-01  +4.8906e-01  1.82e-06  5.53e-11  2.49e-08  2.13e-11  1.69e-10  9.89e-01  
 27  +4.8906e-01  +4.8906e-01  1.82e-08  5.53e-13  2.49e-10  2.13e-13  1.69e-12  9.90e-01  
 28  +4.8906e-01  +4.8906e-01  1.84e-10  5.51e-15  2.51e-12  3.12e-15  2.43e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 687.4901ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:54 PM: Problem status: optimal
(CVXPY) Sep 20 07:36:54 PM: Optimal value: 4.891e-01
(CVXPY) Sep 20 07:36:54 PM: Compilation took 1.192e-01 seconds
(CVXPY) Sep 20 07:36:54 PM: Solver (including time spent in interface) took 7.230e-01 seconds
Iteration: 2, Objective: 0.4891
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:36:54 PM: Your problem has 25033 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:36:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:36:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:36:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:36:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:36:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:36:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:36:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:36:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:36:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:36:54 PM: Finished problem compilation (took 1.408e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25033
  constraints   = 50033
  nnz(P)        = 0
  nnz(A)        = 264960
  cones (total) = 1
    : Nonnegative = 1,  numel = 50033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.28e+02  1.00e+00  1.00e+00   ------   
  1  +5.9315e-01  +5.1434e+03  5.14e+03  3.90e-01  1.38e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4207e-01  +6.8105e+02  6.81e+02  1.56e-01  7.00e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7219e+02  1.72e+02  1.40e-01  6.28e+01  2.96e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0744e+01  1.02e+01  2.97e-02  1.31e+01  3.45e-06  1.92e-01  4.64e-01  
  5  +5.0000e-01  +1.0609e+00  5.61e-01  1.69e-03  7.69e-01  2.58e-05  1.79e-01  4.60e-01  
  6  +5.0000e-01  +7.8121e-01  2.81e-01  8.42e-04  3.84e-01  1.17e-05  9.16e-02  5.75e-01  
  7  +5.0000e-01  +5.9403e-01  9.40e-02  2.81e-04  1.28e-01  3.02e-06  2.93e-02  8.43e-01  
  8  +5.0000e-01  +5.6851e-01  6.85e-02  2.04e-04  9.32e-02  2.51e-06  1.64e-02  5.12e-01  
  9  +5.0000e-01  +5.7241e-01  7.24e-02  2.16e-04  9.85e-02  2.25e-06  1.56e-02  2.36e-01  
 10  +5.0000e-01  +5.7449e-01  7.45e-02  2.22e-04  1.01e-01  1.93e-06  1.23e-02  4.63e-01  
 11  +5.0000e-01  +5.4675e-01  4.68e-02  1.37e-04  6.24e-02  3.54e-06  2.35e-03  9.12e-01  
 12  +4.9983e-01  +5.4507e-01  4.52e-02  2.23e-05  1.02e-02  1.03e-04  7.19e-05  9.71e-01  
 13  +4.9862e-01  +5.4070e-01  4.21e-02  2.93e-06  1.34e-03  7.37e-04  8.95e-06  8.77e-01  
 14  +4.9829e-01  +5.3864e-01  4.04e-02  2.45e-06  1.12e-03  7.18e-04  7.40e-06  2.54e-01  
 15  +4.9795e-01  +5.3476e-01  3.68e-02  2.16e-06  9.86e-04  5.18e-04  6.45e-06  3.02e-01  
 16  +4.9777e-01  +5.3369e-01  3.59e-02  1.99e-06  9.08e-04  4.92e-04  5.93e-06  1.38e-01  
 17  +4.9772e-01  +5.3301e-01  3.53e-02  1.84e-06  8.43e-04  4.25e-04  5.51e-06  2.04e-01  
 18  +4.9766e-01  +5.3144e-01  3.38e-02  1.77e-06  8.09e-04  2.86e-04  5.28e-06  2.75e-01  
 19  +4.9687e-01  +5.2747e-01  3.06e-02  1.52e-06  6.95e-04  1.93e-04  4.54e-06  3.43e-01  
 20  +4.9367e-01  +5.1426e-01  2.06e-02  8.46e-07  3.87e-04  1.04e-04  2.55e-06  5.77e-01  
 21  +4.9011e-01  +5.0012e-01  1.00e-02  3.66e-07  1.67e-04  4.22e-05  1.11e-06  6.22e-01  
 22  +4.8979e-01  +4.9908e-01  9.29e-03  3.31e-07  1.52e-04  9.69e-06  1.03e-06  6.57e-01  
 23  +4.8870e-01  +4.9436e-01  5.66e-03  1.93e-07  8.80e-05  3.11e-07  5.91e-07  9.90e-01  
 24  +4.8707e-01  +4.8922e-01  2.16e-03  6.95e-08  3.18e-05  9.75e-08  2.16e-07  7.24e-01  
 25  +4.8630e-01  +4.8665e-01  3.49e-04  1.11e-08  5.09e-06  6.83e-09  3.50e-08  9.79e-01  
 26  +4.8616e-01  +4.8621e-01  4.46e-05  1.41e-09  6.45e-07  7.24e-10  4.48e-09  9.90e-01  
 27  +4.8614e-01  +4.8614e-01  4.56e-07  1.44e-11  6.58e-09  7.40e-12  4.59e-11  9.90e-01  
 28  +4.8614e-01  +4.8614e-01  4.56e-09  1.44e-13  6.58e-11  7.40e-14  4.59e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 788.1639ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:55 PM: Problem status: optimal
(CVXPY) Sep 20 07:36:55 PM: Optimal value: 4.861e-01
(CVXPY) Sep 20 07:36:55 PM: Compilation took 1.408e-01 seconds
(CVXPY) Sep 20 07:36:55 PM: Solver (including time spent in interface) took 8.263e-01 seconds
Iteration: 3, Objective: 0.4861
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:36:55 PM: Your problem has 25043 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:36:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:36:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:36:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:36:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:36:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:36:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:36:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:36:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:36:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:36:55 PM: Finished problem compilation (took 1.447e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25043
  constraints   = 50043
  nnz(P)        = 0
  nnz(A)        = 274742
  cones (total) = 1
    : Nonnegative = 1,  numel = 50043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.28e+02  1.00e+00  1.00e+00   ------   
  1  +5.9315e-01  +5.1434e+03  5.14e+03  3.90e-01  1.39e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4207e-01  +6.8099e+02  6.80e+02  1.56e-01  7.01e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7217e+02  1.72e+02  1.40e-01  6.29e+01  2.96e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0742e+01  1.02e+01  2.97e-02  1.31e+01  3.45e-06  1.92e-01  4.65e-01  
  5  +5.0000e-01  +1.0496e+00  5.50e-01  1.66e-03  7.55e-01  2.59e-05  1.79e-01  4.72e-01  
  6  +5.0000e-01  +6.6806e-01  1.68e-01  5.02e-04  2.30e-01  6.73e-06  5.60e-02  7.72e-01  
  7  +5.0000e-01  +6.2079e-01  1.21e-01  3.61e-04  1.65e-01  4.13e-06  3.39e-02  6.13e-01  
  8  +5.0000e-01  +6.1272e-01  1.13e-01  3.37e-04  1.54e-01  3.87e-06  2.83e-02  2.29e-01  
  9  +5.0000e-01  +6.1890e-01  1.19e-01  3.55e-04  1.62e-01  3.26e-06  2.72e-02  2.71e-01  
 10  +5.0001e-01  +6.1299e-01  1.13e-01  3.37e-04  1.54e-01  1.75e-06  1.81e-02  7.71e-01  
 11  +5.0000e-01  +5.7454e-01  7.45e-02  2.21e-04  1.01e-01  2.46e-06  5.53e-03  7.11e-01  
 12  +4.9995e-01  +5.5525e-01  5.53e-02  6.74e-05  3.09e-02  3.22e-05  2.53e-04  9.81e-01  
 13  +4.9912e-01  +5.5242e-01  5.33e-02  4.84e-06  2.22e-03  5.05e-04  1.52e-05  9.40e-01  
 14  +4.9822e-01  +5.4259e-01  4.44e-02  3.43e-06  1.57e-03  3.58e-04  1.07e-05  4.98e-01  
 15  +4.9818e-01  +5.4125e-01  4.31e-02  3.22e-06  1.48e-03  2.63e-04  9.91e-06  2.92e-01  
 16  +4.9792e-01  +5.3979e-01  4.19e-02  2.84e-06  1.30e-03  2.53e-04  8.68e-06  1.96e-01  
 17  +4.9783e-01  +5.3918e-01  4.13e-02  2.83e-06  1.30e-03  2.34e-04  8.66e-06  4.66e-02  
 18  +4.9765e-01  +5.3808e-01  4.04e-02  2.61e-06  1.19e-03  2.07e-04  7.93e-06  1.98e-01  
 19  +4.9739e-01  +5.3524e-01  3.78e-02  2.40e-06  1.10e-03  6.29e-05  7.26e-06  6.01e-01  
 20  +4.9637e-01  +5.3095e-01  3.46e-02  1.76e-06  8.08e-04  5.41e-05  5.34e-06  4.13e-01  
 21  +4.9621e-01  +5.3039e-01  3.42e-02  1.76e-06  8.08e-04  5.26e-05  5.34e-06  4.29e-03  
 22  +4.9401e-01  +5.2210e-01  2.81e-02  1.25e-06  5.71e-04  3.43e-05  3.79e-06  4.60e-01  
 23  +4.9248e-01  +5.1616e-01  2.37e-02  9.94e-07  4.55e-04  2.68e-05  3.05e-06  2.47e-01  
 24  +4.9248e-01  +5.1583e-01  2.34e-02  9.79e-07  4.49e-04  2.22e-05  3.00e-06  1.48e-01  
 25  +4.8849e-01  +5.0071e-01  1.22e-02  4.57e-07  2.09e-04  9.98e-06  1.42e-06  5.72e-01  
 26  +4.8771e-01  +4.9772e-01  1.00e-02  3.61e-07  1.65e-04  6.69e-06  1.13e-06  3.49e-01  
 27  +4.8745e-01  +4.9645e-01  9.00e-03  3.14e-07  1.44e-04  3.15e-06  9.84e-07  5.35e-01  
 28  +4.8735e-01  +4.9596e-01  8.61e-03  2.97e-07  1.36e-04  2.30e-06  9.29e-07  2.89e-01  
 29  +4.8733e-01  +4.9586e-01  8.54e-03  2.94e-07  1.35e-04  2.14e-06  9.21e-07  7.04e-02  
 30  +4.8536e-01  +4.8903e-01  3.67e-03  1.23e-07  5.65e-05  5.85e-07  3.92e-07  7.26e-01  
 31  +4.8496e-01  +4.8754e-01  2.57e-03  8.54e-08  3.91e-05  4.67e-08  2.73e-07  9.90e-01  
 32  +4.8424e-01  +4.8516e-01  9.26e-04  3.06e-08  1.40e-05  1.47e-08  9.88e-08  9.16e-01  
 33  +4.8385e-01  +4.8392e-01  7.10e-05  2.32e-09  1.06e-06  1.12e-09  7.60e-09  9.26e-01  
 34  +4.8382e-01  +4.8382e-01  1.22e-06  3.97e-11  1.82e-08  1.89e-11  1.31e-10  9.88e-01  
 35  +4.8382e-01  +4.8382e-01  1.22e-08  3.97e-13  1.82e-10  1.89e-13  1.31e-12  9.90e-01  
 36  +4.8382e-01  +4.8382e-01  1.24e-10  4.08e-15  1.86e-12  3.81e-15  2.53e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0004541s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:56 PM: Problem status: optimal
(CVXPY) Sep 20 07:36:56 PM: Optimal value: 4.838e-01
(CVXPY) Sep 20 07:36:56 PM: Compilation took 1.447e-01 seconds
(CVXPY) Sep 20 07:36:56 PM: Solver (including time spent in interface) took 1.038e+00 seconds
Iteration: 4, Objective: 0.4838
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:36:56 PM: Your problem has 25053 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:36:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:36:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:36:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:36:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:36:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:36:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:36:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:36:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:36:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:36:56 PM: Finished problem compilation (took 1.759e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25053
  constraints   = 50053
  nnz(P)        = 0
  nnz(A)        = 287975
  cones (total) = 1
    : Nonnegative = 1,  numel = 50053

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.29e+02  1.00e+00  1.00e+00   ------   
  1  +5.9315e-01  +5.1434e+03  5.14e+03  3.90e-01  1.39e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4207e-01  +6.8097e+02  6.80e+02  1.56e-01  7.04e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7216e+02  1.72e+02  1.40e-01  6.31e+01  2.96e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0741e+01  1.02e+01  2.97e-02  1.32e+01  3.45e-06  1.92e-01  4.65e-01  
  5  +5.0000e-01  +1.0495e+00  5.49e-01  1.66e-03  7.58e-01  2.59e-05  1.79e-01  4.73e-01  
  6  +5.0000e-01  +6.8825e-01  1.88e-01  5.63e-04  2.58e-01  8.10e-06  6.32e-02  7.00e-01  
  7  +5.0000e-01  +6.3976e-01  1.40e-01  4.18e-04  1.92e-01  5.33e-06  4.11e-02  5.29e-01  
  8  +5.0000e-01  +6.1513e-01  1.15e-01  3.44e-04  1.58e-01  4.55e-06  2.90e-02  3.63e-01  
  9  +5.0000e-01  +6.1626e-01  1.16e-01  3.47e-04  1.59e-01  4.39e-06  2.89e-02  5.15e-02  
 10  +5.0001e-01  +6.2052e-01  1.21e-01  3.59e-04  1.65e-01  1.57e-06  1.78e-02  9.90e-01  
 11  +5.0000e-01  +5.7085e-01  7.09e-02  2.09e-04  9.58e-02  2.35e-06  4.36e-03  7.74e-01  
 12  +4.9995e-01  +5.5745e-01  5.75e-02  6.20e-05  2.85e-02  3.08e-05  2.23e-04  9.90e-01  
 13  +4.9918e-01  +5.5497e-01  5.58e-02  4.47e-06  2.06e-03  4.72e-04  1.39e-05  9.38e-01  
 14  +4.9889e-01  +5.5236e-01  5.35e-02  3.98e-06  1.83e-03  4.53e-04  1.23e-05  1.69e-01  
 15  +4.9863e-01  +5.4851e-01  4.99e-02  3.54e-06  1.63e-03  3.34e-04  1.09e-05  3.17e-01  
 16  +4.9825e-01  +5.4286e-01  4.46e-02  3.18e-06  1.46e-03  1.22e-04  9.72e-06  5.57e-01  
 17  +4.9820e-01  +5.4218e-01  4.40e-02  3.02e-06  1.39e-03  8.96e-05  9.23e-06  2.82e-01  
 18  +4.9766e-01  +5.3987e-01  4.22e-02  2.55e-06  1.17e-03  8.94e-05  7.81e-06  2.04e-01  
 19  +4.9714e-01  +5.3745e-01  4.03e-02  2.47e-06  1.14e-03  5.32e-05  7.63e-06  3.13e-01  
 20  +4.9674e-01  +5.3552e-01  3.88e-02  2.31e-06  1.07e-03  4.60e-05  7.14e-06  1.53e-01  
 21  +4.9608e-01  +5.3235e-01  3.63e-02  2.08e-06  9.55e-04  2.71e-05  6.39e-06  3.87e-01  
 22  +4.9478e-01  +5.2684e-01  3.21e-02  1.65e-06  7.61e-04  2.23e-06  5.13e-06  8.24e-01  
 23  +4.9332e-01  +5.2108e-01  2.78e-02  1.34e-06  6.14e-04  1.79e-06  4.17e-06  2.54e-01  
 24  +4.9324e-01  +5.2059e-01  2.73e-02  1.31e-06  6.01e-04  1.41e-06  4.07e-06  2.12e-01  
 25  +4.8934e-01  +5.0545e-01  1.61e-02  6.68e-07  3.08e-04  7.29e-07  2.11e-06  5.49e-01  
 26  +4.8848e-01  +5.0223e-01  1.38e-02  5.50e-07  2.53e-04  5.86e-07  1.75e-06  2.38e-01  
 27  +4.8843e-01  +5.0202e-01  1.36e-02  5.44e-07  2.50e-04  5.18e-07  1.73e-06  1.31e-01  
 28  +4.8725e-01  +4.9762e-01  1.04e-02  3.93e-07  1.81e-04  3.40e-07  1.26e-06  4.24e-01  
 29  +4.8604e-01  +4.9327e-01  7.23e-03  2.61e-07  1.20e-04  2.04e-07  8.39e-07  4.90e-01  
 30  +4.8580e-01  +4.9236e-01  6.56e-03  2.31e-07  1.06e-04  1.62e-07  7.42e-07  3.42e-01  
 31  +4.8579e-01  +4.9232e-01  6.53e-03  2.31e-07  1.06e-04  1.60e-07  7.42e-07  1.08e-02  
 32  +4.8555e-01  +4.9146e-01  5.92e-03  2.08e-07  9.55e-05  1.39e-07  6.68e-07  1.79e-01  
 33  +4.8537e-01  +4.9076e-01  5.39e-03  1.88e-07  8.64e-05  1.01e-07  6.05e-07  5.32e-01  
 34  +4.8417e-01  +4.8663e-01  2.46e-03  8.42e-08  3.87e-05  4.40e-08  2.74e-07  6.18e-01  
 35  +4.8353e-01  +4.8440e-01  8.71e-04  2.94e-08  1.35e-05  1.27e-08  9.71e-08  9.90e-01  
 36  +4.8317e-01  +4.8323e-01  6.10e-05  2.04e-09  9.38e-07  8.80e-10  6.83e-09  9.37e-01  
 37  +4.8314e-01  +4.8314e-01  1.15e-06  3.83e-11  1.76e-08  1.65e-11  1.29e-10  9.88e-01  
 38  +4.8314e-01  +4.8314e-01  1.15e-08  3.83e-13  1.76e-10  1.65e-13  1.29e-12  9.90e-01  
 39  +4.8314e-01  +4.8314e-01  1.17e-10  3.85e-15  1.80e-12  3.30e-15  2.47e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2008468s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:58 PM: Problem status: optimal
(CVXPY) Sep 20 07:36:58 PM: Optimal value: 4.831e-01
(CVXPY) Sep 20 07:36:58 PM: Compilation took 1.759e-01 seconds
(CVXPY) Sep 20 07:36:58 PM: Solver (including time spent in interface) took 1.249e+00 seconds
Iteration: 5, Objective: 0.4831
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:36:58 PM: Your problem has 25058 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:36:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:36:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:36:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:36:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:36:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:36:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:36:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:36:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:36:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:36:58 PM: Finished problem compilation (took 1.687e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25058
  constraints   = 50058
  nnz(P)        = 0
  nnz(A)        = 292378
  cones (total) = 1
    : Nonnegative = 1,  numel = 50058

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.29e+02  1.00e+00  1.00e+00   ------   
  1  +5.9314e-01  +5.1436e+03  5.14e+03  3.90e-01  1.39e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4206e-01  +6.8085e+02  6.80e+02  1.56e-01  7.04e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1085e-01  +1.7214e+02  1.72e+02  1.40e-01  6.32e+01  2.96e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0745e+01  1.02e+01  2.97e-02  1.32e+01  3.45e-06  1.92e-01  4.65e-01  
  5  +5.0002e-01  +1.3305e+00  8.30e-01  2.50e-03  1.15e+00  2.52e-05  1.83e-01  3.12e-01  
  6  +5.0001e-01  +6.8458e-01  1.85e-01  5.51e-04  2.53e-01  4.69e-06  5.71e-02  7.10e-01  
  7  +5.0001e-01  +6.5080e-01  1.51e-01  4.50e-04  2.07e-01  3.42e-06  4.18e-02  4.62e-01  
  8  +5.0001e-01  +6.5278e-01  1.53e-01  4.56e-04  2.09e-01  3.30e-06  4.15e-02  6.82e-02  
  9  +5.0000e-01  +5.9305e-01  9.30e-02  2.78e-04  1.27e-01  2.39e-06  2.03e-02  5.74e-01  
 10  +5.0000e-01  +5.8328e-01  8.33e-02  2.48e-04  1.14e-01  2.85e-06  1.16e-02  4.82e-01  
 11  +5.0000e-01  +5.8122e-01  8.12e-02  2.40e-04  1.10e-01  3.87e-06  5.81e-03  6.43e-01  
 12  +5.0000e-01  +5.7657e-01  7.66e-02  2.27e-04  1.04e-01  2.41e-06  5.36e-03  3.62e-01  
 13  +4.9995e-01  +5.6692e-01  6.70e-02  8.02e-05  3.69e-02  3.19e-05  3.00e-04  9.56e-01  
 14  +4.9902e-01  +5.6376e-01  6.47e-02  5.19e-06  2.39e-03  5.56e-04  1.63e-05  9.46e-01  
 15  +4.9866e-01  +5.5987e-01  6.12e-02  4.58e-06  2.11e-03  5.25e-04  1.44e-05  1.70e-01  
 16  +4.9796e-01  +5.5025e-01  5.23e-02  3.69e-06  1.70e-03  3.25e-04  1.15e-05  4.19e-01  
 17  +4.9785e-01  +5.4773e-01  4.99e-02  3.62e-06  1.67e-03  2.43e-04  1.13e-05  1.77e-01  
 18  +4.9699e-01  +5.4077e-01  4.38e-02  2.74e-06  1.26e-03  1.41e-04  8.51e-06  5.36e-01  
 19  +4.9687e-01  +5.3994e-01  4.31e-02  2.57e-06  1.18e-03  1.12e-04  7.96e-06  2.43e-01  
 20  +4.9686e-01  +5.3987e-01  4.30e-02  2.57e-06  1.18e-03  1.11e-04  7.96e-06  3.85e-03  
 21  +4.9665e-01  +5.3883e-01  4.22e-02  2.55e-06  1.17e-03  9.48e-05  7.91e-06  9.98e-02  
 22  +4.9466e-01  +5.3020e-01  3.55e-02  1.79e-06  8.25e-04  7.80e-05  5.62e-06  3.77e-01  
 23  +4.9214e-01  +5.1932e-01  2.72e-02  1.26e-06  5.80e-04  4.84e-05  4.00e-06  3.95e-01  
 24  +4.9127e-01  +5.1567e-01  2.44e-02  1.10e-06  5.04e-04  3.99e-05  3.49e-06  1.85e-01  
 25  +4.9122e-01  +5.1445e-01  2.32e-02  1.02e-06  4.68e-04  1.61e-05  3.23e-06  5.41e-01  
 26  +4.8766e-01  +5.0057e-01  1.29e-02  5.12e-07  2.36e-04  6.57e-06  1.66e-06  5.94e-01  
 27  +4.8762e-01  +5.0042e-01  1.28e-02  5.11e-07  2.35e-04  6.29e-06  1.66e-06  2.54e-02  
 28  +4.8663e-01  +4.9671e-01  1.01e-02  3.79e-07  1.74e-04  3.32e-06  1.24e-06  5.08e-01  
 29  +4.8522e-01  +4.9156e-01  6.34e-03  2.28e-07  1.05e-04  1.13e-06  7.51e-07  6.74e-01  
 30  +4.8512e-01  +4.9120e-01  6.07e-03  2.15e-07  9.90e-05  9.81e-07  7.07e-07  1.65e-01  
 31  +4.8511e-01  +4.9116e-01  6.05e-03  2.15e-07  9.88e-05  9.56e-07  7.06e-07  1.89e-02  
 32  +4.8478e-01  +4.9000e-01  5.22e-03  1.83e-07  8.41e-05  6.58e-07  6.02e-07  3.34e-01  
 33  +4.8474e-01  +4.8981e-01  5.07e-03  1.78e-07  8.20e-05  5.03e-07  5.88e-07  2.45e-01  
 34  +4.8415e-01  +4.8776e-01  3.62e-03  1.26e-07  5.80e-05  3.07e-07  4.19e-07  4.02e-01  
 35  +4.8417e-01  +4.8779e-01  3.62e-03  1.24e-07  5.71e-05  2.54e-07  4.11e-07  2.50e-01  
 36  +4.8415e-01  +4.8772e-01  3.57e-03  1.23e-07  5.64e-05  2.32e-07  4.06e-07  9.65e-02  
 37  +4.8338e-01  +4.8510e-01  1.72e-03  5.84e-08  2.69e-05  5.43e-08  1.95e-07  8.34e-01  
 38  +4.8277e-01  +4.8305e-01  2.84e-04  9.59e-09  4.42e-06  4.27e-09  3.25e-08  9.90e-01  
 39  +4.8265e-01  +4.8267e-01  2.34e-05  7.88e-10  3.63e-07  3.49e-10  2.68e-09  9.21e-01  
 40  +4.8264e-01  +4.8264e-01  3.19e-07  1.08e-11  4.95e-09  4.72e-12  3.65e-11  9.88e-01  
 41  +4.8264e-01  +4.8264e-01  3.19e-09  1.08e-13  4.95e-11  4.96e-14  3.83e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.147365s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:59 PM: Problem status: optimal
(CVXPY) Sep 20 07:36:59 PM: Optimal value: 4.826e-01
(CVXPY) Sep 20 07:36:59 PM: Compilation took 1.687e-01 seconds
(CVXPY) Sep 20 07:36:59 PM: Solver (including time spent in interface) took 1.188e+00 seconds
Iteration: 6, Objective: 0.4826
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:36:59 PM: Your problem has 25061 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:36:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:36:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:36:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:36:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:36:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:36:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:36:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:36:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:36:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:36:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:37:00 PM: Finished problem compilation (took 1.557e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:37:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25061
  constraints   = 50061
  nnz(P)        = 0
  nnz(A)        = 295114
  cones (total) = 1
    : Nonnegative = 1,  numel = 50061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.29e+02  1.00e+00  1.00e+00   ------   
  1  +5.9314e-01  +5.1437e+03  5.14e+03  3.90e-01  1.40e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4205e-01  +6.8079e+02  6.80e+02  1.56e-01  7.04e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1085e-01  +1.7213e+02  1.72e+02  1.40e-01  6.32e+01  2.96e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0747e+01  1.02e+01  2.97e-02  1.32e+01  3.45e-06  1.92e-01  4.65e-01  
  5  +5.0003e-01  +1.3418e+00  8.42e-01  2.54e-03  1.16e+00  2.52e-05  1.83e-01  3.07e-01  
  6  +5.0001e-01  +7.1649e-01  2.16e-01  6.47e-04  2.97e-01  5.59e-06  6.54e-02  6.71e-01  
  7  +5.0001e-01  +6.4535e-01  1.45e-01  4.34e-04  1.99e-01  3.42e-06  4.06e-02  5.54e-01  
  8  +5.0001e-01  +6.5014e-01  1.50e-01  4.48e-04  2.06e-01  3.02e-06  3.82e-02  2.59e-01  
  9  +5.0000e-01  +5.9071e-01  9.07e-02  2.71e-04  1.24e-01  2.23e-06  1.75e-02  6.17e-01  
 10  +5.0000e-01  +5.8574e-01  8.57e-02  2.55e-04  1.17e-01  2.78e-06  9.36e-03  5.84e-01  
 11  +5.0000e-01  +5.7620e-01  7.62e-02  2.17e-04  9.99e-02  4.49e-06  2.58e-03  9.90e-01  
 12  +4.9971e-01  +5.7074e-01  7.10e-02  1.81e-05  8.33e-03  1.72e-04  5.82e-05  9.79e-01  
 13  +4.9855e-01  +5.6416e-01  6.56e-02  4.04e-06  1.86e-03  6.86e-04  1.28e-05  7.92e-01  
 14  +4.9816e-01  +5.5791e-01  5.98e-02  3.79e-06  1.75e-03  4.92e-04  1.18e-05  2.07e-01  
 15  +4.9763e-01  +5.5236e-01  5.47e-02  3.31e-06  1.53e-03  3.81e-04  1.03e-05  2.64e-01  
 16  +4.9714e-01  +5.4735e-01  5.02e-02  2.95e-06  1.36e-03  2.67e-04  9.18e-06  2.88e-01  
 17  +4.9711e-01  +5.4625e-01  4.91e-02  2.91e-06  1.34e-03  2.21e-04  9.09e-06  1.25e-01  
 18  +4.9666e-01  +5.4346e-01  4.68e-02  2.60e-06  1.20e-03  1.94e-04  8.12e-06  1.95e-01  
 19  +4.9666e-01  +5.4315e-01  4.65e-02  2.56e-06  1.18e-03  1.83e-04  8.00e-06  6.34e-02  
 20  +4.9664e-01  +5.4168e-01  4.50e-02  2.52e-06  1.16e-03  1.25e-04  7.85e-06  2.44e-01  
 21  +4.9605e-01  +5.3839e-01  4.23e-02  2.36e-06  1.09e-03  9.34e-05  7.38e-06  2.02e-01  
 22  +4.9324e-01  +5.2595e-01  3.27e-02  1.54e-06  7.12e-04  6.98e-05  4.91e-06  4.00e-01  
 23  +4.9185e-01  +5.1926e-01  2.74e-02  1.25e-06  5.77e-04  3.99e-05  4.02e-06  3.82e-01  
 24  +4.9106e-01  +5.1563e-01  2.46e-02  1.09e-06  5.03e-04  2.87e-05  3.52e-06  2.70e-01  
 25  +4.9080e-01  +5.1413e-01  2.33e-02  1.02e-06  4.68e-04  1.97e-05  3.27e-06  2.96e-01  
 26  +4.9050e-01  +5.1243e-01  2.19e-02  9.38e-07  4.32e-04  9.75e-06  3.02e-06  4.61e-01  
 27  +4.8975e-01  +5.0949e-01  1.97e-02  8.26e-07  3.81e-04  8.40e-06  2.67e-06  1.48e-01  
 28  +4.8934e-01  +5.0765e-01  1.83e-02  7.41e-07  3.42e-04  3.66e-06  2.40e-06  5.47e-01  
 29  +4.8817e-01  +5.0302e-01  1.48e-02  5.75e-07  2.65e-04  1.11e-06  1.87e-06  6.97e-01  
 30  +4.8740e-01  +5.0015e-01  1.28e-02  4.84e-07  2.23e-04  9.25e-07  1.58e-06  1.85e-01  
 31  +4.8723e-01  +4.9959e-01  1.24e-02  4.74e-07  2.18e-04  7.27e-07  1.56e-06  1.99e-01  
 32  +4.8518e-01  +4.9186e-01  6.68e-03  2.48e-07  1.14e-04  3.36e-07  8.26e-07  5.64e-01  
 33  +4.8496e-01  +4.9107e-01  6.11e-03  2.23e-07  1.03e-04  2.94e-07  7.42e-07  1.65e-01  
 34  +4.8494e-01  +4.9102e-01  6.08e-03  2.23e-07  1.03e-04  2.89e-07  7.42e-07  9.90e-03  
 35  +4.8450e-01  +4.8945e-01  4.95e-03  1.77e-07  8.17e-05  1.92e-07  5.93e-07  4.08e-01  
 36  +4.8438e-01  +4.8901e-01  4.63e-03  1.65e-07  7.60e-05  1.66e-07  5.51e-07  1.83e-01  
 37  +4.8406e-01  +4.8787e-01  3.81e-03  1.35e-07  6.20e-05  1.24e-07  4.51e-07  3.06e-01  
 38  +4.8400e-01  +4.8755e-01  3.56e-03  1.25e-07  5.75e-05  7.37e-08  4.19e-07  6.50e-01  
 39  +4.8378e-01  +4.8682e-01  3.03e-03  1.06e-07  4.88e-05  6.05e-08  3.57e-07  2.41e-01  
 40  +4.8372e-01  +4.8662e-01  2.89e-03  1.02e-07  4.70e-05  5.02e-08  3.47e-07  3.61e-01  
 41  +4.8358e-01  +4.8611e-01  2.53e-03  8.91e-08  4.10e-05  4.15e-08  3.03e-07  3.63e-01  
 42  +4.8291e-01  +4.8382e-01  9.08e-04  3.18e-08  1.46e-05  1.44e-08  1.10e-07  6.88e-01  
 43  +4.8286e-01  +4.8366e-01  7.97e-04  2.76e-08  1.27e-05  1.25e-08  9.46e-08  2.60e-01  
 44  +4.8253e-01  +4.8256e-01  2.43e-05  8.37e-10  3.86e-07  3.32e-10  2.91e-09  9.85e-01  
 45  +4.8252e-01  +4.8252e-01  2.43e-07  8.39e-12  3.86e-09  3.32e-12  2.92e-11  9.90e-01  
 46  +4.8252e-01  +4.8252e-01  2.43e-09  8.39e-14  3.86e-11  3.32e-14  2.92e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4157592s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:37:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:37:01 PM: Optimal value: 4.825e-01
(CVXPY) Sep 20 07:37:01 PM: Compilation took 1.557e-01 seconds
(CVXPY) Sep 20 07:37:01 PM: Solver (including time spent in interface) took 1.455e+00 seconds
Iteration: 7, Objective: 0.4825
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:37:01 PM: Your problem has 25064 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:37:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:37:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:37:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:37:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:37:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:37:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:37:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:37:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:37:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:37:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:37:01 PM: Finished problem compilation (took 1.779e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:37:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25064
  constraints   = 50064
  nnz(P)        = 0
  nnz(A)        = 297132
  cones (total) = 1
    : Nonnegative = 1,  numel = 50064

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.29e+02  1.00e+00  1.00e+00   ------   
  1  +5.9314e-01  +5.1437e+03  5.14e+03  3.90e-01  1.40e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4205e-01  +6.8077e+02  6.80e+02  1.56e-01  7.04e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1085e-01  +1.7212e+02  1.72e+02  1.40e-01  6.32e+01  2.96e-05  2.40e-01  1.12e-01  
  4  +5.0081e-01  +1.0747e+01  1.02e+01  2.97e-02  1.32e+01  3.45e-06  1.92e-01  4.65e-01  
  5  +5.0003e-01  +1.3934e+00  8.93e-01  2.69e-03  1.23e+00  2.51e-05  1.84e-01  2.89e-01  
  6  +5.0001e-01  +6.7577e-01  1.76e-01  5.25e-04  2.41e-01  4.11e-06  5.42e-02  7.29e-01  
  7  +5.0001e-01  +6.3659e-01  1.37e-01  4.08e-04  1.87e-01  3.21e-06  3.86e-02  3.74e-01  
  8  +5.0001e-01  +6.3694e-01  1.37e-01  4.09e-04  1.88e-01  3.18e-06  3.86e-02  1.28e-02  
  9  +5.0000e-01  +5.9911e-01  9.91e-02  2.96e-04  1.36e-01  2.58e-06  2.13e-02  5.52e-01  
 10  +5.0000e-01  +5.8584e-01  8.58e-02  2.55e-04  1.17e-01  3.39e-06  9.27e-03  6.73e-01  
 11  +4.9999e-01  +5.8156e-01  8.16e-02  2.32e-04  1.07e-01  7.89e-06  2.73e-03  8.14e-01  
 12  +5.0000e-01  +5.7191e-01  7.19e-02  2.01e-04  9.24e-02  4.94e-06  2.05e-03  5.78e-01  
 13  +4.9956e-01  +5.6964e-01  7.01e-02  1.11e-05  5.13e-03  2.58e-04  3.62e-05  9.85e-01  
 14  +4.9857e-01  +5.6142e-01  6.28e-02  4.24e-06  1.95e-03  5.43e-04  1.36e-05  6.66e-01  
 15  +4.9847e-01  +5.5945e-01  6.10e-02  4.07e-06  1.88e-03  4.62e-04  1.30e-05  1.54e-01  
 16  +4.9791e-01  +5.5304e-01  5.51e-02  3.70e-06  1.70e-03  3.19e-04  1.17e-05  2.62e-01  
 17  +4.9777e-01  +5.5097e-01  5.32e-02  3.66e-06  1.69e-03  2.63e-04  1.16e-05  1.10e-01  
 18  +4.9546e-01  +5.3663e-01  4.12e-02  2.17e-06  9.99e-04  2.02e-04  6.84e-06  5.33e-01  
 19  +4.9539e-01  +5.3630e-01  4.09e-02  2.17e-06  9.98e-04  1.98e-04  6.84e-06  5.82e-03  
 20  +4.9544e-01  +5.3640e-01  4.10e-02  2.15e-06  9.93e-04  1.89e-04  6.79e-06  5.07e-02  
 21  +4.9512e-01  +5.3486e-01  3.97e-02  2.13e-06  9.81e-04  1.68e-04  6.73e-06  5.57e-02  
 22  +4.9425e-01  +5.3100e-01  3.67e-02  1.87e-06  8.61e-04  1.27e-04  5.92e-06  2.65e-01  
 23  +4.9359e-01  +5.2756e-01  3.40e-02  1.68e-06  7.76e-04  7.67e-05  5.35e-06  3.51e-01  
 24  +4.9228e-01  +5.2203e-01  2.97e-02  1.39e-06  6.41e-04  6.14e-05  4.44e-06  2.36e-01  
 25  +4.9217e-01  +5.2132e-01  2.91e-02  1.35e-06  6.21e-04  5.12e-05  4.31e-06  1.54e-01  
 26  +4.9146e-01  +5.1699e-01  2.55e-02  1.14e-06  5.27e-04  5.27e-07  3.67e-06  8.45e-01  
 27  +4.9003e-01  +5.1139e-01  2.14e-02  9.17e-07  4.23e-04  4.10e-07  2.97e-06  2.77e-01  
 28  +4.8951e-01  +5.0919e-01  1.97e-02  8.20e-07  3.78e-04  2.85e-07  2.67e-06  5.17e-01  
 29  +4.8647e-01  +4.9741e-01  1.09e-02  4.28e-07  1.97e-04  1.45e-07  1.42e-06  5.68e-01  
 30  +4.8617e-01  +4.9622e-01  1.01e-02  3.80e-07  1.75e-04  1.32e-07  1.25e-06  3.41e-01  
 31  +4.8606e-01  +4.9586e-01  9.80e-03  3.75e-07  1.73e-04  1.25e-07  1.25e-06  5.51e-02  
 32  +4.8588e-01  +4.9505e-01  9.16e-03  3.39e-07  1.56e-04  1.19e-07  1.12e-06  4.95e-01  
 33  +4.8530e-01  +4.9288e-01  7.58e-03  2.75e-07  1.27e-04  9.89e-08  9.11e-07  3.47e-01  
 34  +4.8526e-01  +4.9277e-01  7.51e-03  2.74e-07  1.26e-04  9.72e-08  9.09e-07  3.67e-02  
 35  +4.8467e-01  +4.9064e-01  5.98e-03  2.14e-07  9.87e-05  7.78e-08  7.14e-07  2.86e-01  
 36  +4.8447e-01  +4.8993e-01  5.45e-03  1.93e-07  8.90e-05  7.18e-08  6.44e-07  2.96e-01  
 37  +4.8447e-01  +4.8990e-01  5.44e-03  1.93e-07  8.87e-05  7.15e-08  6.42e-07  1.98e-02  
 38  +4.8447e-01  +4.8989e-01  5.43e-03  1.92e-07  8.87e-05  7.14e-08  6.42e-07  3.30e-02  
 39  +4.8397e-01  +4.8815e-01  4.18e-03  1.47e-07  6.77e-05  5.52e-08  4.92e-07  3.79e-01  
 40  +4.8397e-01  +4.8814e-01  4.17e-03  1.46e-07  6.74e-05  5.52e-08  4.90e-07  5.86e-02  
 41  +4.8314e-01  +4.8527e-01  2.13e-03  7.33e-08  3.38e-05  2.83e-08  2.48e-07  5.85e-01  
 42  +4.8314e-01  +4.8526e-01  2.12e-03  7.31e-08  3.37e-05  2.83e-08  2.47e-07  1.19e-02  
 43  +4.8313e-01  +4.8523e-01  2.10e-03  7.21e-08  3.32e-05  2.81e-08  2.44e-07  1.49e-01  
 44  +4.8305e-01  +4.8494e-01  1.89e-03  6.48e-08  2.99e-05  2.54e-08  2.19e-07  2.06e-01  
 45  +4.8279e-01  +4.8403e-01  1.24e-03  4.26e-08  1.96e-05  1.69e-08  1.45e-07  5.69e-01  
 46  +4.8274e-01  +4.8385e-01  1.11e-03  3.80e-08  1.75e-05  1.51e-08  1.29e-07  3.09e-01  
 47  +4.8252e-01  +4.8311e-01  5.92e-04  2.02e-08  9.32e-06  8.09e-09  6.91e-08  6.37e-01  
 48  +4.8246e-01  +4.8290e-01  4.49e-04  1.53e-08  7.06e-06  6.13e-09  5.25e-08  2.47e-01  
 49  +4.8245e-01  +4.8289e-01  4.36e-04  1.49e-08  6.86e-06  5.96e-09  5.09e-08  1.44e-01  
 50  +4.8229e-01  +4.8237e-01  7.72e-05  2.63e-09  1.21e-06  1.05e-09  9.04e-09  8.28e-01  
 51  +4.8227e-01  +4.8228e-01  1.30e-05  4.45e-10  2.05e-07  1.78e-10  1.53e-09  9.90e-01  
 52  +4.8226e-01  +4.8226e-01  1.48e-07  5.06e-12  2.33e-09  2.03e-12  1.74e-11  9.89e-01  
 53  +4.8226e-01  +4.8226e-01  1.48e-09  5.06e-14  2.33e-11  2.09e-14  1.79e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5643969s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:37:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:37:03 PM: Optimal value: 4.823e-01
(CVXPY) Sep 20 07:37:03 PM: Compilation took 1.779e-01 seconds
(CVXPY) Sep 20 07:37:03 PM: Solver (including time spent in interface) took 1.610e+00 seconds
FULL MODEL:
  Accruacy: 0.51578
  Our objective: 0.031560000000000005

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.02092)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.00192)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.00224)
 OR (x3 = 0 AND x4 = 1 AND x5 = 0)                                  <-- (term's our objective: 0.00648)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 21.098268270492554
Best over terms:
  Our final objective: 0.02091999999999998
    Its accruacy: 0.51046
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.02091999999999998
  Highest accruacy: 0.51046
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

