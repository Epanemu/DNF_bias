Command:
python test_script.py -s constant_subclass -d 7 -n 5000 --seed 56 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.008
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 7.

Computed total variation: 0.1308
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:01 PM: Your problem has 2515 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:01 PM: Finished problem compilation (took 1.551e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2515
  constraints   = 5015
  nnz(P)        = 0
  nnz(A)        = 25015
  cones (total) = 1
    : Nonnegative = 1,  numel = 5015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5008e+03  2.50e+03  9.79e-01  7.39e+01  1.00e+00  1.00e+00   ------   
  1  +5.8812e-01  +5.2570e+02  5.25e+02  4.01e-01  4.61e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3803e-01  +6.5563e+01  6.50e+01  1.52e-01  2.23e+01  1.31e-02  2.54e-01  8.66e-01  
  3  +5.0955e-01  +1.6667e+01  1.62e+01  1.05e-01  1.50e+01  3.39e-05  2.45e-01  1.74e-01  
  4  +5.0036e-01  +1.0441e+00  5.44e-01  5.25e-03  7.75e-01  6.31e-06  1.13e-01  9.90e-01  
  5  +5.0003e-01  +5.7042e-01  7.04e-02  6.65e-04  9.89e-02  2.24e-06  2.58e-02  8.56e-01  
  6  +5.0002e-01  +5.4863e-01  4.86e-02  4.59e-04  6.83e-02  1.47e-06  1.59e-02  5.10e-01  
  7  +5.0000e-01  +5.2091e-01  2.09e-02  1.97e-04  2.93e-02  1.12e-06  4.21e-03  7.81e-01  
  8  +4.9979e-01  +5.4138e-01  4.16e-02  1.14e-04  1.70e-02  1.93e-05  4.16e-04  9.57e-01  
  9  +4.9829e-01  +5.2899e-01  3.07e-02  1.52e-05  2.27e-03  1.03e-04  5.11e-05  8.78e-01  
 10  +4.9760e-01  +5.1907e-01  2.15e-02  1.08e-05  1.62e-03  4.31e-05  3.75e-05  4.50e-01  
 11  +4.9745e-01  +5.1267e-01  1.52e-02  8.11e-06  1.22e-03  3.94e-07  2.91e-05  7.69e-01  
 12  +4.9551e-01  +5.0381e-01  8.30e-03  3.84e-06  5.76e-04  2.63e-07  1.45e-05  5.70e-01  
 13  +4.9516e-01  +5.0170e-01  6.54e-03  2.86e-06  4.29e-04  5.74e-07  1.09e-05  9.90e-01  
 14  +4.9369e-01  +4.9594e-01  2.25e-03  9.23e-07  1.38e-04  1.88e-07  3.68e-06  7.05e-01  
 15  +4.9325e-01  +4.9423e-01  9.79e-04  3.92e-07  5.88e-05  9.61e-08  1.58e-06  9.90e-01  
 16  +4.9291e-01  +4.9295e-01  3.30e-05  1.32e-08  1.97e-06  3.13e-09  5.40e-08  9.70e-01  
 17  +4.9290e-01  +4.9290e-01  3.31e-07  1.32e-10  1.98e-08  3.13e-11  5.41e-10  9.90e-01  
 18  +4.9290e-01  +4.9290e-01  3.31e-09  1.32e-12  1.98e-10  3.17e-13  5.46e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.7384ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:01 PM: Optimal value: 4.929e-01
(CVXPY) Sep 20 07:40:01 PM: Compilation took 1.551e-02 seconds
(CVXPY) Sep 20 07:40:01 PM: Solver (including time spent in interface) took 5.355e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4929
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:01 PM: Your problem has 2525 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:01 PM: Finished problem compilation (took 1.415e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2525
  constraints   = 5025
  nnz(P)        = 0
  nnz(A)        = 28212
  cones (total) = 1
    : Nonnegative = 1,  numel = 5025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5009e+03  2.50e+03  9.79e-01  7.54e+01  1.00e+00  1.00e+00   ------   
  1  +5.8799e-01  +5.2583e+02  5.25e+02  4.01e-01  4.69e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3784e-01  +6.5373e+01  6.48e+01  1.52e-01  2.26e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0949e-01  +1.6592e+01  1.61e+01  1.05e-01  1.52e+01  3.39e-05  2.44e-01  1.77e-01  
  4  +5.0052e-01  +1.3287e+00  8.28e-01  8.01e-03  1.20e+00  6.92e-06  1.37e-01  7.97e-01  
  5  +5.0011e-01  +7.3018e-01  2.30e-01  2.19e-03  3.31e-01  3.72e-06  6.37e-02  6.15e-01  
  6  +5.0005e-01  +6.3196e-01  1.32e-01  1.25e-03  1.89e-01  2.92e-06  2.57e-02  7.25e-01  
  7  +4.9984e-01  +6.4160e-01  1.42e-01  9.28e-04  1.41e-01  1.32e-05  4.43e-03  9.03e-01  
  8  +4.9683e-01  +6.0999e-01  1.13e-01  9.37e-05  1.43e-02  1.34e-04  3.15e-04  9.30e-01  
  9  +4.9339e-01  +5.6967e-01  7.63e-02  6.42e-05  9.81e-03  5.73e-05  2.26e-04  3.92e-01  
 10  +4.9027e-01  +5.3971e-01  4.94e-02  3.79e-05  5.78e-03  3.00e-05  1.38e-04  4.70e-01  
 11  +4.8969e-01  +5.3162e-01  4.19e-02  2.93e-05  4.48e-03  1.66e-05  1.07e-04  5.26e-01  
 12  +4.8971e-01  +5.2842e-01  3.87e-02  2.58e-05  3.94e-03  5.51e-06  9.22e-05  7.41e-01  
 13  +4.8578e-01  +5.0111e-01  1.53e-02  8.33e-06  1.27e-03  2.24e-06  2.98e-05  8.00e-01  
 14  +4.8584e-01  +5.0311e-01  1.73e-02  6.97e-06  1.06e-03  2.40e-06  2.29e-05  6.77e-01  
 15  +4.8527e-01  +5.0107e-01  1.58e-02  6.83e-06  1.04e-03  1.90e-06  2.24e-05  1.75e-01  
 16  +4.8431e-01  +4.9766e-01  1.33e-02  5.21e-06  7.96e-04  1.66e-06  1.71e-05  2.98e-01  
 17  +4.8243e-01  +4.9027e-01  7.84e-03  2.83e-06  4.32e-04  8.00e-07  9.36e-06  9.13e-01  
 18  +4.7973e-01  +4.8060e-01  8.70e-04  2.89e-07  4.42e-05  7.60e-08  9.70e-07  9.80e-01  
 19  +4.7940e-01  +4.7941e-01  1.02e-05  3.34e-09  5.10e-07  8.62e-10  1.12e-08  9.89e-01  
 20  +4.7940e-01  +4.7940e-01  1.02e-07  3.34e-11  5.10e-09  8.62e-12  1.12e-10  9.90e-01  
 21  +4.7940e-01  +4.7940e-01  1.02e-09  3.34e-13  5.10e-11  8.92e-14  1.16e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 58.8988ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:01 PM: Optimal value: 4.794e-01
(CVXPY) Sep 20 07:40:01 PM: Compilation took 1.415e-02 seconds
(CVXPY) Sep 20 07:40:01 PM: Solver (including time spent in interface) took 6.412e-02 seconds
Iteration: 2, Objective: 0.4794
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:01 PM: Your problem has 2535 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:02 PM: Finished problem compilation (took 1.459e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2535
  constraints   = 5035
  nnz(P)        = 0
  nnz(A)        = 31441
  cones (total) = 1
    : Nonnegative = 1,  numel = 5035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5010e+03  2.50e+03  9.79e-01  7.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.8783e-01  +5.2594e+02  5.25e+02  4.02e-01  4.79e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3767e-01  +6.5192e+01  6.47e+01  1.52e-01  2.30e+01  1.32e-02  2.53e-01  8.70e-01  
  3  +5.0943e-01  +1.6533e+01  1.60e+01  1.04e-01  1.55e+01  3.40e-05  2.44e-01  1.80e-01  
  4  +5.0051e-01  +1.3125e+00  8.12e-01  7.86e-03  1.20e+00  6.98e-06  1.34e-01  8.11e-01  
  5  +5.0020e-01  +8.6618e-01  3.66e-01  3.50e-03  5.39e-01  4.69e-06  8.18e-02  4.37e-01  
  6  +5.0013e-01  +7.6963e-01  2.69e-01  2.56e-03  3.96e-01  4.25e-06  4.89e-02  4.97e-01  
  7  +5.0000e-01  +6.7615e-01  1.76e-01  1.58e-03  2.43e-01  6.72e-06  1.32e-02  7.71e-01  
  8  +4.9762e-01  +6.6112e-01  1.64e-01  1.83e-04  2.87e-02  1.14e-04  6.04e-04  9.78e-01  
  9  +4.9393e-01  +6.1368e-01  1.20e-01  1.04e-04  1.62e-02  8.28e-05  3.47e-04  5.47e-01  
 10  +4.9346e-01  +6.0970e-01  1.16e-01  9.24e-05  1.44e-02  6.98e-05  3.06e-04  2.72e-01  
 11  +4.9232e-01  +5.9274e-01  1.00e-01  7.83e-05  1.22e-02  1.36e-05  2.63e-04  6.94e-01  
 12  +4.8879e-01  +5.6827e-01  7.95e-02  5.33e-05  8.32e-03  3.23e-06  1.80e-04  9.90e-01  
 13  +4.9117e-01  +5.8057e-01  8.94e-02  5.44e-05  8.49e-03  4.24e-06  1.77e-04  1.06e-01  
 14  +4.8987e-01  +5.7678e-01  8.69e-02  5.27e-05  8.23e-03  4.38e-06  1.74e-04  1.81e-01  
 15  +4.8435e-01  +5.4862e-01  6.43e-02  3.09e-05  4.82e-03  3.82e-06  1.05e-04  4.61e-01  
 16  +4.8424e-01  +5.4810e-01  6.39e-02  3.08e-05  4.81e-03  3.82e-06  1.04e-04  3.18e-02  
 17  +4.7894e-01  +5.2499e-01  4.60e-02  1.98e-05  3.10e-03  3.34e-06  6.88e-05  6.62e-01  
 18  +4.7804e-01  +5.2045e-01  4.24e-02  1.79e-05  2.80e-03  3.35e-06  6.23e-05  3.47e-01  
 19  +4.7087e-01  +4.9091e-01  2.00e-02  7.72e-06  1.20e-03  1.67e-06  2.79e-05  7.75e-01  
 20  +4.6664e-01  +4.7331e-01  6.67e-03  2.51e-06  3.92e-04  7.59e-07  9.45e-06  9.90e-01  
 21  +4.6417e-01  +4.6436e-01  1.90e-04  7.11e-08  1.11e-05  1.98e-08  2.73e-07  9.80e-01  
 22  +4.6410e-01  +4.6410e-01  1.90e-06  7.12e-10  1.11e-07  1.99e-10  2.74e-09  9.90e-01  
 23  +4.6410e-01  +4.6410e-01  1.90e-08  7.12e-12  1.11e-09  2.00e-12  2.75e-11  9.90e-01  
 24  +4.6410e-01  +4.6410e-01  1.90e-10  7.13e-14  1.11e-11  2.00e-14  2.76e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 70.8145ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:02 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:02 PM: Optimal value: 4.641e-01
(CVXPY) Sep 20 07:40:02 PM: Compilation took 1.459e-02 seconds
(CVXPY) Sep 20 07:40:02 PM: Solver (including time spent in interface) took 7.581e-02 seconds
Iteration: 3, Objective: 0.4641
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:02 PM: Your problem has 2545 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:02 PM: Finished problem compilation (took 1.703e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2545
  constraints   = 5045
  nnz(P)        = 0
  nnz(A)        = 33439
  cones (total) = 1
    : Nonnegative = 1,  numel = 5045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5010e+03  2.50e+03  9.79e-01  7.76e+01  1.00e+00  1.00e+00   ------   
  1  +5.8774e-01  +5.2602e+02  5.25e+02  4.02e-01  4.82e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3757e-01  +6.5088e+01  6.46e+01  1.52e-01  2.30e+01  1.32e-02  2.53e-01  8.71e-01  
  3  +5.0940e-01  +1.6496e+01  1.60e+01  1.04e-01  1.55e+01  3.40e-05  2.43e-01  1.82e-01  
  4  +5.0043e-01  +1.1821e+00  6.82e-01  6.61e-03  1.02e+00  6.80e-06  1.22e-01  8.97e-01  
  5  +5.0018e-01  +8.3213e-01  3.32e-01  3.18e-03  4.94e-01  4.89e-06  7.10e-02  4.60e-01  
  6  +5.0014e-01  +7.8992e-01  2.90e-01  2.76e-03  4.28e-01  5.35e-06  4.26e-02  5.26e-01  
  7  +4.9995e-01  +7.0478e-01  2.05e-01  1.61e-03  2.51e-01  1.23e-05  8.90e-03  8.26e-01  
  8  +4.9699e-01  +6.8061e-01  1.84e-01  1.65e-04  2.60e-02  1.66e-04  5.31e-04  9.46e-01  
  9  +4.9176e-01  +6.2810e-01  1.36e-01  9.70e-05  1.53e-02  1.26e-04  3.18e-04  4.89e-01  
 10  +4.9271e-01  +6.3525e-01  1.43e-01  9.88e-05  1.55e-02  1.32e-04  3.18e-04  4.06e-02  
 11  +4.9008e-01  +6.1722e-01  1.27e-01  7.72e-05  1.21e-02  1.08e-04  2.51e-04  3.19e-01  
 12  +4.8935e-01  +6.1004e-01  1.21e-01  7.39e-05  1.16e-02  7.42e-05  2.42e-04  2.45e-01  
 13  +4.8489e-01  +5.8709e-01  1.02e-01  5.32e-05  8.36e-03  6.31e-05  1.77e-04  3.24e-01  
 14  +4.8429e-01  +5.8316e-01  9.89e-02  5.19e-05  8.15e-03  5.65e-05  1.74e-04  7.42e-02  
 15  +4.8254e-01  +5.7119e-01  8.87e-02  4.70e-05  7.38e-03  3.16e-05  1.60e-04  3.67e-01  
 16  +4.7052e-01  +5.1352e-01  4.30e-02  1.94e-05  3.04e-03  1.27e-05  7.03e-05  6.12e-01  
 17  +4.6772e-01  +4.9994e-01  3.22e-02  1.40e-05  2.19e-03  7.65e-06  5.16e-05  4.75e-01  
 18  +4.6723e-01  +4.9689e-01  2.97e-02  1.28e-05  2.00e-03  5.44e-06  4.74e-05  4.32e-01  
 19  +4.6488e-01  +4.8684e-01  2.20e-02  9.25e-06  1.45e-03  3.73e-06  3.51e-05  3.83e-01  
 20  +4.6462e-01  +4.8534e-01  2.07e-02  8.59e-06  1.35e-03  2.98e-06  3.25e-05  4.60e-01  
 21  +4.5865e-01  +4.6102e-01  2.37e-03  9.53e-07  1.49e-04  2.79e-07  3.85e-06  9.27e-01  
 22  +4.5785e-01  +4.5797e-01  1.27e-04  5.07e-08  7.95e-06  1.48e-08  2.07e-07  9.47e-01  
 23  +4.5780e-01  +4.5780e-01  1.28e-06  5.10e-10  8.00e-08  1.48e-10  2.09e-09  9.90e-01  
 24  +4.5780e-01  +4.5780e-01  1.28e-08  5.10e-12  8.00e-10  1.48e-12  2.09e-11  9.90e-01  
 25  +4.5780e-01  +4.5780e-01  1.28e-10  5.11e-14  8.00e-12  1.49e-14  2.10e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 75.8408ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:02 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:02 PM: Optimal value: 4.578e-01
(CVXPY) Sep 20 07:40:02 PM: Compilation took 1.703e-02 seconds
(CVXPY) Sep 20 07:40:02 PM: Solver (including time spent in interface) took 8.065e-02 seconds
Iteration: 4, Objective: 0.4578
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:02 PM: Your problem has 2555 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:02 PM: Finished problem compilation (took 1.704e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2555
  constraints   = 5055
  nnz(P)        = 0
  nnz(A)        = 34823
  cones (total) = 1
    : Nonnegative = 1,  numel = 5055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5010e+03  2.50e+03  9.79e-01  7.78e+01  1.00e+00  1.00e+00   ------   
  1  +5.8758e-01  +5.2628e+02  5.26e+02  4.03e-01  4.83e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3739e-01  +6.4924e+01  6.44e+01  1.52e-01  2.30e+01  1.33e-02  2.53e-01  8.73e-01  
  3  +5.0935e-01  +1.6455e+01  1.59e+01  1.04e-01  1.55e+01  3.42e-05  2.43e-01  1.85e-01  
  4  +5.0050e-01  +1.2979e+00  7.97e-01  7.74e-03  1.20e+00  7.03e-06  1.31e-01  8.27e-01  
  5  +5.0020e-01  +8.7249e-01  3.72e-01  3.57e-03  5.55e-01  5.07e-06  7.63e-02  4.58e-01  
  6  +5.0013e-01  +8.1033e-01  3.10e-01  2.93e-03  4.57e-01  6.16e-06  3.77e-02  6.38e-01  
  7  +4.9955e-01  +7.6628e-01  2.67e-01  1.12e-03  1.75e-01  3.25e-05  4.15e-03  9.65e-01  
  8  +4.9542e-01  +7.2108e-01  2.26e-01  1.77e-04  2.80e-02  1.82e-04  5.75e-04  8.62e-01  
  9  +4.9279e-01  +6.9028e-01  1.97e-01  1.43e-04  2.25e-02  1.43e-04  4.65e-04  2.91e-01  
 10  +4.8932e-01  +6.5236e-01  1.63e-01  1.09e-04  1.72e-02  9.07e-05  3.60e-04  3.88e-01  
 11  +4.8923e-01  +6.4912e-01  1.60e-01  1.01e-04  1.59e-02  7.72e-05  3.29e-04  2.35e-01  
 12  +4.8850e-01  +6.4407e-01  1.56e-01  9.98e-05  1.57e-02  7.11e-05  3.28e-04  2.63e-02  
 13  +4.8257e-01  +6.0679e-01  1.24e-01  6.94e-05  1.09e-02  5.44e-05  2.35e-04  3.44e-01  
 14  +4.7027e-01  +5.3306e-01  6.28e-02  3.13e-05  4.92e-03  1.49e-05  1.14e-04  6.63e-01  
 15  +4.6513e-01  +5.0536e-01  4.02e-02  1.86e-05  2.93e-03  4.98e-06  7.14e-05  7.94e-01  
 16  +4.6216e-01  +4.9178e-01  2.96e-02  1.32e-05  2.07e-03  3.61e-06  5.16e-05  3.41e-01  
 17  +4.6136e-01  +4.8718e-01  2.58e-02  1.16e-05  1.82e-03  2.54e-06  4.69e-05  6.41e-01  
 18  +4.6108e-01  +4.8585e-01  2.48e-02  1.10e-05  1.74e-03  2.44e-06  4.45e-05  2.36e-01  
 19  +4.5772e-01  +4.7098e-01  1.33e-02  5.81e-06  9.12e-04  1.31e-06  2.40e-05  5.73e-01  
 20  +4.5588e-01  +4.6386e-01  7.98e-03  3.38e-06  5.31e-04  7.79e-07  1.41e-05  5.62e-01  
 21  +4.5353e-01  +4.5392e-01  3.89e-04  1.63e-07  2.57e-05  3.51e-08  7.06e-07  9.90e-01  
 22  +4.5340e-01  +4.5341e-01  3.94e-06  1.65e-09  2.60e-07  3.55e-10  7.16e-09  9.90e-01  
 23  +4.5340e-01  +4.5340e-01  3.94e-08  1.65e-11  2.60e-09  3.55e-12  7.16e-11  9.90e-01  
 24  +4.5340e-01  +4.5340e-01  3.94e-10  1.65e-13  2.60e-11  3.56e-14  7.17e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 81.6313ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:02 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:02 PM: Optimal value: 4.534e-01
(CVXPY) Sep 20 07:40:02 PM: Compilation took 1.704e-02 seconds
(CVXPY) Sep 20 07:40:02 PM: Solver (including time spent in interface) took 8.566e-02 seconds
Iteration: 5, Objective: 0.4534
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:02 PM: Your problem has 2565 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:02 PM: Finished problem compilation (took 1.904e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2565
  constraints   = 5065
  nnz(P)        = 0
  nnz(A)        = 35728
  cones (total) = 1
    : Nonnegative = 1,  numel = 5065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5010e+03  2.50e+03  9.79e-01  7.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.8755e-01  +5.2622e+02  5.26e+02  4.03e-01  4.83e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3734e-01  +6.4871e+01  6.43e+01  1.52e-01  2.30e+01  1.33e-02  2.53e-01  8.73e-01  
  3  +5.0934e-01  +1.6438e+01  1.59e+01  1.04e-01  1.55e+01  3.42e-05  2.43e-01  1.86e-01  
  4  +5.0048e-01  +1.2683e+00  7.68e-01  7.46e-03  1.15e+00  6.99e-06  1.28e-01  8.46e-01  
  5  +5.0017e-01  +8.3100e-01  3.31e-01  3.17e-03  4.94e-01  4.97e-06  6.80e-02  5.15e-01  
  6  +5.0012e-01  +8.4438e-01  3.44e-01  3.19e-03  4.97e-01  7.94e-06  3.03e-02  7.66e-01  
  7  +4.9881e-01  +6.9972e-01  2.01e-01  4.35e-04  6.86e-02  6.76e-05  1.46e-03  9.84e-01  
  8  +4.9504e-01  +6.6943e-01  1.74e-01  1.44e-04  2.28e-02  1.65e-04  4.68e-04  6.89e-01  
  9  +4.9228e-01  +6.4941e-01  1.57e-01  1.14e-04  1.80e-02  1.31e-04  3.69e-04  3.69e-01  
 10  +4.8893e-01  +6.2908e-01  1.40e-01  8.77e-05  1.38e-02  1.16e-04  2.85e-04  3.01e-01  
 11  +4.8825e-01  +6.2531e-01  1.37e-01  8.72e-05  1.38e-02  1.09e-04  2.85e-04  1.79e-02  
 12  +4.8660e-01  +6.1660e-01  1.30e-01  7.94e-05  1.25e-02  9.76e-05  2.61e-04  1.38e-01  
 13  +4.8485e-01  +6.0736e-01  1.23e-01  7.33e-05  1.16e-02  6.38e-05  2.44e-04  3.08e-01  
 14  +4.7589e-01  +5.6089e-01  8.50e-02  4.42e-05  6.97e-03  4.01e-05  1.53e-04  4.30e-01  
 15  +4.6485e-01  +5.0517e-01  4.03e-02  1.90e-05  2.99e-03  7.41e-06  7.05e-05  7.85e-01  
 16  +4.6432e-01  +5.0260e-01  3.83e-02  1.75e-05  2.75e-03  6.48e-06  6.50e-05  2.54e-01  
 17  +4.6334e-01  +4.9785e-01  3.45e-02  1.57e-05  2.47e-03  4.60e-06  5.89e-05  4.93e-01  
 18  +4.5720e-01  +4.7104e-01  1.38e-02  5.95e-06  9.36e-04  1.77e-06  2.38e-05  6.31e-01  
 19  +4.5692e-01  +4.6962e-01  1.27e-02  5.41e-06  8.50e-04  1.47e-06  2.16e-05  4.60e-01  
 20  +4.5353e-01  +4.5578e-01  2.24e-03  9.30e-07  1.46e-04  2.49e-07  3.90e-06  8.34e-01  
 21  +4.5283e-01  +4.5293e-01  9.81e-05  4.05e-08  6.37e-06  9.41e-09  1.72e-07  9.90e-01  
 22  +4.5280e-01  +4.5280e-01  9.83e-07  4.06e-10  6.38e-08  9.42e-11  1.72e-09  9.90e-01  
 23  +4.5280e-01  +4.5280e-01  9.83e-09  4.06e-12  6.38e-10  9.42e-13  1.72e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 81.6657ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:02 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:02 PM: Optimal value: 4.528e-01
(CVXPY) Sep 20 07:40:02 PM: Compilation took 1.904e-02 seconds
(CVXPY) Sep 20 07:40:02 PM: Solver (including time spent in interface) took 8.713e-02 seconds
Iteration: 6, Objective: 0.4528
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:02 PM: Your problem has 2575 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:02 PM: Finished problem compilation (took 1.651e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2575
  constraints   = 5075
  nnz(P)        = 0
  nnz(A)        = 36543
  cones (total) = 1
    : Nonnegative = 1,  numel = 5075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5010e+03  2.50e+03  9.79e-01  7.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.8750e-01  +5.2618e+02  5.26e+02  4.03e-01  4.83e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3728e-01  +6.4804e+01  6.43e+01  1.52e-01  2.29e+01  1.33e-02  2.53e-01  8.74e-01  
  3  +5.0932e-01  +1.6414e+01  1.59e+01  1.04e-01  1.54e+01  3.42e-05  2.42e-01  1.87e-01  
  4  +5.0037e-01  +1.0716e+00  5.71e-01  5.56e-03  8.63e-01  6.67e-06  1.08e-01  9.85e-01  
  5  +5.0020e-01  +8.5405e-01  3.54e-01  3.41e-03  5.31e-01  5.97e-06  6.46e-02  4.68e-01  
  6  +5.0010e-01  +8.2809e-01  3.28e-01  2.87e-03  4.48e-01  1.18e-05  1.93e-02  8.93e-01  
  7  +4.9804e-01  +7.6832e-01  2.70e-01  3.20e-04  5.07e-02  1.47e-04  1.03e-03  9.57e-01  
  8  +4.9518e-01  +7.2836e-01  2.33e-01  1.99e-04  3.14e-02  1.65e-04  6.38e-04  4.24e-01  
  9  +4.8841e-01  +6.5264e-01  1.64e-01  1.04e-04  1.63e-02  1.19e-04  3.36e-04  5.97e-01  
 10  +4.8785e-01  +6.4765e-01  1.60e-01  9.69e-05  1.53e-02  1.00e-04  3.14e-04  1.95e-01  
 11  +4.8693e-01  +6.3690e-01  1.50e-01  9.34e-05  1.47e-02  7.36e-05  3.05e-04  1.79e-01  
 12  +4.8206e-01  +6.0802e-01  1.26e-01  7.12e-05  1.12e-02  5.67e-05  2.36e-04  3.06e-01  
 13  +4.6992e-01  +5.3808e-01  6.82e-02  3.38e-05  5.33e-03  2.39e-05  1.18e-04  5.75e-01  
 14  +4.6614e-01  +5.1822e-01  5.21e-02  2.46e-05  3.88e-03  1.75e-05  8.70e-05  3.14e-01  
 15  +4.6545e-01  +5.1431e-01  4.89e-02  2.27e-05  3.57e-03  1.41e-05  8.03e-05  2.44e-01  
 16  +4.6370e-01  +5.0573e-01  4.20e-02  1.90e-05  2.99e-03  1.15e-05  6.79e-05  2.22e-01  
 17  +4.6298e-01  +5.0139e-01  3.84e-02  1.69e-05  2.66e-03  8.50e-06  6.08e-05  3.75e-01  
 18  +4.5573e-01  +4.6805e-01  1.23e-02  5.14e-06  8.09e-04  1.59e-06  1.95e-05  8.83e-01  
 19  +4.5270e-01  +4.5543e-01  2.73e-03  1.11e-06  1.74e-04  3.34e-07  4.43e-06  7.94e-01  
 20  +4.5182e-01  +4.5188e-01  6.11e-05  2.45e-08  3.85e-06  6.57e-09  1.01e-07  9.80e-01  
 21  +4.5180e-01  +4.5180e-01  6.11e-07  2.45e-10  3.85e-08  6.57e-11  1.01e-09  9.90e-01  
 22  +4.5180e-01  +4.5180e-01  6.11e-09  2.45e-12  3.85e-10  6.57e-13  1.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 75.3164ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:03 PM: Optimal value: 4.518e-01
(CVXPY) Sep 20 07:40:03 PM: Compilation took 1.651e-02 seconds
(CVXPY) Sep 20 07:40:03 PM: Solver (including time spent in interface) took 8.166e-02 seconds
Iteration: 7, Objective: 0.4518
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:03 PM: Your problem has 2585 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:03 PM: Finished problem compilation (took 1.902e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2585
  constraints   = 5085
  nnz(P)        = 0
  nnz(A)        = 37218
  cones (total) = 1
    : Nonnegative = 1,  numel = 5085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.79e-01  7.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.8739e-01  +5.2624e+02  5.26e+02  4.03e-01  4.82e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3723e-01  +6.4751e+01  6.42e+01  1.52e-01  2.28e+01  1.33e-02  2.52e-01  8.75e-01  
  3  +5.0931e-01  +1.6398e+01  1.59e+01  1.04e-01  1.54e+01  3.42e-05  2.42e-01  1.88e-01  
  4  +5.0037e-01  +1.0789e+00  5.79e-01  5.64e-03  8.74e-01  6.71e-06  1.08e-01  9.80e-01  
  5  +5.0022e-01  +8.8441e-01  3.84e-01  3.71e-03  5.77e-01  6.20e-06  6.85e-02  4.39e-01  
  6  +5.0013e-01  +8.3951e-01  3.39e-01  3.06e-03  4.78e-01  1.04e-05  2.33e-02  8.54e-01  
  7  +4.9815e-01  +7.7419e-01  2.76e-01  3.43e-04  5.42e-02  1.41e-04  1.10e-03  9.69e-01  
  8  +4.9421e-01  +7.1192e-01  2.18e-01  1.63e-04  2.57e-02  1.66e-04  5.19e-04  6.30e-01  
  9  +4.9231e-01  +6.9320e-01  2.01e-01  1.41e-04  2.23e-02  1.45e-04  4.48e-04  2.05e-01  
 10  +4.8820e-01  +6.5620e-01  1.68e-01  1.01e-04  1.60e-02  9.91e-05  3.22e-04  4.62e-01  
 11  +4.8699e-01  +6.4732e-01  1.60e-01  9.97e-05  1.57e-02  8.63e-05  3.21e-04  4.05e-02  
 12  +4.8172e-01  +6.1648e-01  1.35e-01  7.42e-05  1.17e-02  6.84e-05  2.42e-04  3.23e-01  
 13  +4.7272e-01  +5.6612e-01  9.34e-02  4.63e-05  7.30e-03  3.81e-05  1.57e-04  4.55e-01  
 14  +4.6652e-01  +5.2858e-01  6.21e-02  2.86e-05  4.51e-03  3.26e-06  1.00e-04  9.59e-01  
 15  +4.6132e-01  +5.0531e-01  4.40e-02  1.93e-05  3.03e-03  2.97e-06  6.92e-05  5.52e-01  
 16  +4.5764e-01  +4.8943e-01  3.18e-02  1.34e-05  2.10e-03  2.32e-06  4.90e-05  4.02e-01  
 17  +4.5681e-01  +4.8505e-01  2.82e-02  1.18e-05  1.86e-03  2.47e-06  4.34e-05  5.35e-01  
 18  +4.5513e-01  +4.7813e-01  2.30e-02  9.44e-06  1.48e-03  2.10e-06  3.52e-05  3.55e-01  
 19  +4.5370e-01  +4.7175e-01  1.81e-02  7.29e-06  1.15e-03  1.91e-06  2.73e-05  9.90e-01  
 20  +4.4905e-01  +4.5374e-01  4.69e-03  1.85e-06  2.90e-04  4.91e-07  7.25e-06  7.70e-01  
 21  +4.4746e-01  +4.4761e-01  1.57e-04  6.13e-08  9.63e-06  1.57e-08  2.45e-07  9.68e-01  
 22  +4.4740e-01  +4.4740e-01  1.57e-06  6.14e-10  9.65e-08  1.58e-10  2.46e-09  9.90e-01  
 23  +4.4740e-01  +4.4740e-01  1.57e-08  6.14e-12  9.65e-10  1.58e-12  2.46e-11  9.90e-01  
 24  +4.4740e-01  +4.4740e-01  1.57e-10  6.14e-14  9.65e-12  1.58e-14  2.47e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 79.7375ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:03 PM: Optimal value: 4.474e-01
(CVXPY) Sep 20 07:40:03 PM: Compilation took 1.902e-02 seconds
(CVXPY) Sep 20 07:40:03 PM: Solver (including time spent in interface) took 8.612e-02 seconds
Iteration: 8, Objective: 0.4474
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:03 PM: Your problem has 2595 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:03 PM: Finished problem compilation (took 1.803e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2595
  constraints   = 5095
  nnz(P)        = 0
  nnz(A)        = 37901
  cones (total) = 1
    : Nonnegative = 1,  numel = 5095

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.79e-01  7.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.8724e-01  +5.2632e+02  5.26e+02  4.04e-01  4.82e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3718e-01  +6.4728e+01  6.42e+01  1.51e-01  2.27e+01  1.33e-02  2.52e-01  8.76e-01  
  3  +5.0929e-01  +1.6388e+01  1.59e+01  1.04e-01  1.54e+01  3.43e-05  2.42e-01  1.89e-01  
  4  +5.0038e-01  +1.0891e+00  5.89e-01  5.74e-03  8.90e-01  6.75e-06  1.09e-01  9.74e-01  
  5  +5.0018e-01  +8.3077e-01  3.31e-01  3.18e-03  4.96e-01  6.36e-06  5.53e-02  5.92e-01  
  6  +5.0004e-01  +8.4178e-01  3.42e-01  2.81e-03  4.39e-01  1.63e-05  1.58e-02  8.21e-01  
  7  +4.9713e-01  +7.9335e-01  2.96e-01  3.02e-04  4.78e-02  1.99e-04  9.51e-04  9.46e-01  
  8  +4.9162e-01  +7.1749e-01  2.26e-01  1.55e-04  2.45e-02  2.02e-04  4.90e-04  5.53e-01  
  9  +4.8943e-01  +6.9846e-01  2.09e-01  1.27e-04  2.01e-02  1.70e-04  4.02e-04  3.06e-01  
 10  +4.8660e-01  +6.6176e-01  1.75e-01  1.09e-04  1.73e-02  7.11e-05  3.52e-04  4.41e-01  
 11  +4.7617e-01  +5.9765e-01  1.21e-01  6.43e-05  1.01e-02  4.46e-05  2.16e-04  4.59e-01  
 12  +4.6868e-01  +5.5618e-01  8.75e-02  4.30e-05  6.78e-03  2.54e-05  1.51e-04  4.40e-01  
 13  +4.6281e-01  +5.2155e-01  5.87e-02  2.71e-05  4.26e-03  5.85e-06  9.72e-05  8.88e-01  
 14  +4.5748e-01  +4.9759e-01  4.01e-02  1.75e-05  2.75e-03  4.00e-06  6.41e-05  4.41e-01  
 15  +4.5627e-01  +4.9255e-01  3.63e-02  1.54e-05  2.42e-03  3.60e-06  5.67e-05  3.44e-01  
 16  +4.5416e-01  +4.8203e-01  2.79e-02  1.16e-05  1.82e-03  2.83e-06  4.33e-05  9.90e-01  
 17  +4.4928e-01  +4.6251e-01  1.32e-02  5.32e-06  8.36e-04  1.36e-06  2.06e-05  5.86e-01  
 18  +4.4518e-01  +4.4625e-01  1.07e-03  4.25e-07  6.68e-05  1.04e-07  1.71e-06  9.61e-01  
 19  +4.4480e-01  +4.4482e-01  1.19e-05  4.72e-09  7.42e-07  1.14e-09  1.91e-08  9.89e-01  
 20  +4.4480e-01  +4.4480e-01  1.19e-07  4.72e-11  7.42e-09  1.14e-11  1.92e-10  9.90e-01  
 21  +4.4480e-01  +4.4480e-01  1.19e-09  4.72e-13  7.42e-11  1.14e-13  1.92e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 72.9499ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:03 PM: Optimal value: 4.448e-01
(CVXPY) Sep 20 07:40:03 PM: Compilation took 1.803e-02 seconds
(CVXPY) Sep 20 07:40:03 PM: Solver (including time spent in interface) took 7.866e-02 seconds
Iteration: 9, Objective: 0.4448
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:03 PM: Your problem has 2605 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:03 PM: Finished problem compilation (took 2.003e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2605
  constraints   = 5105
  nnz(P)        = 0
  nnz(A)        = 38688
  cones (total) = 1
    : Nonnegative = 1,  numel = 5105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5014e+03  2.50e+03  9.80e-01  7.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.8705e-01  +5.2662e+02  5.26e+02  4.05e-01  4.82e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3708e-01  +6.4668e+01  6.41e+01  1.52e-01  2.26e+01  1.34e-02  2.52e-01  8.77e-01  
  3  +5.0927e-01  +1.6369e+01  1.59e+01  1.04e-01  1.53e+01  3.45e-05  2.42e-01  1.92e-01  
  4  +5.0041e-01  +1.1415e+00  6.41e-01  6.26e-03  9.70e-01  6.87e-06  1.13e-01  9.37e-01  
  5  +5.0020e-01  +8.7137e-01  3.71e-01  3.59e-03  5.58e-01  6.25e-06  6.31e-02  5.05e-01  
  6  +5.0009e-01  +8.5908e-01  3.59e-01  3.15e-03  4.91e-01  1.30e-05  2.06e-02  7.96e-01  
  7  +4.9736e-01  +7.9776e-01  3.00e-01  3.35e-04  5.30e-02  1.73e-04  1.05e-03  9.60e-01  
  8  +4.9365e-01  +7.5536e-01  2.62e-01  1.98e-04  3.14e-02  2.10e-04  6.20e-04  4.43e-01  
  9  +4.8890e-01  +7.1133e-01  2.22e-01  1.41e-04  2.23e-02  1.83e-04  4.48e-04  3.44e-01  
 10  +4.8418e-01  +6.6738e-01  1.83e-01  1.10e-04  1.74e-02  1.09e-04  3.57e-04  3.78e-01  
 11  +4.7265e-01  +5.8822e-01  1.16e-01  6.16e-05  9.71e-03  4.62e-05  2.10e-04  5.58e-01  
 12  +4.6515e-01  +5.4645e-01  8.13e-02  4.02e-05  6.32e-03  2.76e-05  1.42e-04  4.23e-01  
 13  +4.6051e-01  +5.2211e-01  6.16e-02  2.86e-05  4.50e-03  1.71e-05  1.02e-04  4.51e-01  
 14  +4.5864e-01  +5.1188e-01  5.32e-02  2.37e-05  3.73e-03  1.15e-05  8.51e-05  4.54e-01  
 15  +4.5625e-01  +5.0101e-01  4.48e-02  1.94e-05  3.05e-03  9.25e-06  7.04e-05  2.39e-01  
 16  +4.5431e-01  +4.8915e-01  3.48e-02  1.47e-05  2.32e-03  3.53e-06  5.39e-05  9.90e-01  
 17  +4.4931e-01  +4.6887e-01  1.96e-02  7.96e-06  1.25e-03  2.01e-06  2.99e-05  5.08e-01  
 18  +4.4586e-01  +4.5507e-01  9.21e-03  3.62e-06  5.68e-04  9.64e-07  1.39e-05  5.61e-01  
 19  +4.4508e-01  +4.5159e-01  6.50e-03  2.55e-06  4.02e-04  6.90e-07  9.90e-06  7.53e-01  
 20  +4.4281e-01  +4.4313e-01  3.13e-04  1.21e-07  1.91e-05  2.97e-08  4.81e-07  9.80e-01  
 21  +4.4270e-01  +4.4270e-01  3.26e-06  1.26e-09  1.99e-07  3.09e-10  5.01e-09  9.90e-01  
 22  +4.4270e-01  +4.4270e-01  3.26e-08  1.26e-11  1.99e-09  3.09e-12  5.01e-11  9.90e-01  
 23  +4.4270e-01  +4.4270e-01  3.26e-10  1.26e-13  1.99e-11  3.12e-14  5.06e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 78.1132ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:03 PM: Optimal value: 4.427e-01
(CVXPY) Sep 20 07:40:03 PM: Compilation took 2.003e-02 seconds
(CVXPY) Sep 20 07:40:03 PM: Solver (including time spent in interface) took 8.365e-02 seconds
Iteration: 10, Objective: 0.4427
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:03 PM: Your problem has 2611 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:03 PM: Finished problem compilation (took 2.064e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2611
  constraints   = 5111
  nnz(P)        = 0
  nnz(A)        = 39029
  cones (total) = 1
    : Nonnegative = 1,  numel = 5111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5014e+03  2.50e+03  9.80e-01  7.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.8697e-01  +5.2683e+02  5.26e+02  4.05e-01  4.82e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3697e-01  +6.4562e+01  6.40e+01  1.52e-01  2.26e+01  1.34e-02  2.52e-01  8.78e-01  
  3  +5.0925e-01  +1.6356e+01  1.58e+01  1.04e-01  1.53e+01  3.46e-05  2.42e-01  1.93e-01  
  4  +5.0044e-01  +1.1867e+00  6.86e-01  6.71e-03  1.04e+00  6.94e-06  1.17e-01  9.07e-01  
  5  +5.0023e-01  +9.1199e-01  4.12e-01  3.98e-03  6.19e-01  6.32e-06  6.98e-02  4.68e-01  
  6  +5.0009e-01  +8.5840e-01  3.58e-01  3.18e-03  4.95e-01  1.19e-05  2.17e-02  8.32e-01  
  7  +4.9805e-01  +8.1598e-01  3.18e-01  4.72e-04  7.47e-02  1.26e-04  1.49e-03  9.39e-01  
  8  +4.9415e-01  +7.3320e-01  2.39e-01  1.83e-04  2.90e-02  1.62e-04  5.71e-04  7.75e-01  
  9  +4.8994e-01  +6.9576e-01  2.06e-01  1.35e-04  2.14e-02  1.25e-04  4.28e-04  3.94e-01  
 10  +4.8508e-01  +6.6166e-01  1.77e-01  1.07e-04  1.70e-02  9.26e-05  3.46e-04  2.99e-01  
 11  +4.7714e-01  +6.1021e-01  1.33e-01  7.48e-05  1.18e-02  4.53e-05  2.50e-04  4.86e-01  
 12  +4.6943e-01  +5.6772e-01  9.83e-02  5.10e-05  8.03e-03  2.46e-05  1.77e-04  4.71e-01  
 13  +4.6423e-01  +5.4161e-01  7.74e-02  3.82e-05  6.01e-03  1.80e-05  1.35e-04  2.90e-01  
 14  +4.5667e-01  +5.0380e-01  4.71e-02  2.14e-05  3.36e-03  7.33e-06  7.79e-05  7.05e-01  
 15  +4.5504e-01  +4.9653e-01  4.15e-02  1.81e-05  2.85e-03  6.12e-06  6.64e-05  2.97e-01  
 16  +4.5357e-01  +4.8876e-01  3.52e-02  1.50e-05  2.36e-03  3.63e-06  5.59e-05  8.69e-01  
 17  +4.4817e-01  +4.6604e-01  1.79e-02  7.34e-06  1.15e-03  1.88e-06  2.81e-05  6.82e-01  
 18  +4.4585e-01  +4.5719e-01  1.13e-02  4.53e-06  7.12e-04  1.17e-06  1.76e-05  6.89e-01  
 19  +4.4255e-01  +4.4415e-01  1.60e-03  6.30e-07  9.89e-05  1.61e-07  2.52e-06  8.84e-01  
 20  +4.4201e-01  +4.4203e-01  2.35e-05  9.22e-09  1.45e-06  2.32e-09  3.71e-08  9.86e-01  
 21  +4.4200e-01  +4.4200e-01  2.35e-07  9.22e-11  1.45e-08  2.32e-11  3.71e-10  9.90e-01  
 22  +4.4200e-01  +4.4200e-01  2.35e-09  9.22e-13  1.45e-10  2.33e-13  3.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 76.9881ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:03 PM: Optimal value: 4.420e-01
(CVXPY) Sep 20 07:40:03 PM: Compilation took 2.064e-02 seconds
(CVXPY) Sep 20 07:40:03 PM: Solver (including time spent in interface) took 8.213e-02 seconds
Iteration: 11, Objective: 0.4420
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:04 PM: Your problem has 2616 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:04 PM: Finished problem compilation (took 1.904e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2616
  constraints   = 5116
  nnz(P)        = 0
  nnz(A)        = 39462
  cones (total) = 1
    : Nonnegative = 1,  numel = 5116

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5014e+03  2.50e+03  9.80e-01  7.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.8695e-01  +5.2686e+02  5.26e+02  4.05e-01  4.82e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3695e-01  +6.4545e+01  6.40e+01  1.52e-01  2.26e+01  1.34e-02  2.52e-01  8.78e-01  
  3  +5.0925e-01  +1.6351e+01  1.58e+01  1.04e-01  1.53e+01  3.46e-05  2.42e-01  1.94e-01  
  4  +5.0044e-01  +1.1897e+00  6.89e-01  6.74e-03  1.04e+00  6.95e-06  1.17e-01  9.05e-01  
  5  +5.0023e-01  +9.2431e-01  4.24e-01  4.10e-03  6.38e-01  6.52e-06  7.05e-02  4.79e-01  
  6  +5.0013e-01  +8.8478e-01  3.85e-01  3.51e-03  5.47e-01  1.08e-05  2.71e-02  7.59e-01  
  7  +4.9867e-01  +8.1324e-01  3.15e-01  6.19e-04  9.79e-02  9.12e-05  1.99e-03  9.50e-01  
  8  +4.9491e-01  +7.3823e-01  2.43e-01  1.98e-04  3.13e-02  1.69e-04  6.16e-04  8.07e-01  
  9  +4.9238e-01  +7.1297e-01  2.21e-01  1.53e-04  2.43e-02  1.31e-04  4.80e-04  4.17e-01  
 10  +4.8617e-01  +6.6801e-01  1.82e-01  1.10e-04  1.74e-02  1.00e-04  3.54e-04  3.55e-01  
 11  +4.7842e-01  +6.1448e-01  1.36e-01  7.92e-05  1.25e-02  3.14e-05  2.64e-04  5.95e-01  
 12  +4.7070e-01  +5.7315e-01  1.02e-01  5.44e-05  8.57e-03  2.03e-05  1.88e-04  3.97e-01  
 13  +4.6456e-01  +5.4228e-01  7.77e-02  3.86e-05  6.08e-03  1.35e-05  1.37e-04  3.91e-01  
 14  +4.5768e-01  +5.0843e-01  5.08e-02  2.33e-05  3.67e-03  6.82e-06  8.47e-05  6.31e-01  
 15  +4.5514e-01  +4.9701e-01  4.19e-02  1.84e-05  2.89e-03  5.38e-06  6.73e-05  3.63e-01  
 16  +4.5386e-01  +4.9074e-01  3.69e-02  1.61e-05  2.53e-03  4.03e-06  6.01e-05  5.38e-01  
 17  +4.5135e-01  +4.7965e-01  2.83e-02  1.21e-05  1.90e-03  3.05e-06  4.57e-05  4.04e-01  
 18  +4.5016e-01  +4.7451e-01  2.43e-02  1.00e-05  1.58e-03  2.60e-06  3.77e-05  6.45e-01  
 19  +4.4568e-01  +4.5668e-01  1.10e-02  4.40e-06  6.91e-04  1.16e-06  1.71e-05  5.72e-01  
 20  +4.4353e-01  +4.4791e-01  4.38e-03  1.73e-06  2.72e-04  4.59e-07  6.86e-06  7.68e-01  
 21  +4.4205e-01  +4.4217e-01  1.23e-04  4.85e-08  7.62e-06  1.23e-08  1.95e-07  9.85e-01  
 22  +4.4200e-01  +4.4200e-01  1.24e-06  4.87e-10  7.65e-08  1.23e-10  1.96e-09  9.90e-01  
 23  +4.4200e-01  +4.4200e-01  1.24e-08  4.87e-12  7.65e-10  1.23e-12  1.96e-11  9.90e-01  
 24  +4.4200e-01  +4.4200e-01  1.24e-10  4.86e-14  7.65e-12  1.24e-14  1.97e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 87.1206ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:04 PM: Optimal value: 4.420e-01
(CVXPY) Sep 20 07:40:04 PM: Compilation took 1.904e-02 seconds
(CVXPY) Sep 20 07:40:04 PM: Solver (including time spent in interface) took 9.316e-02 seconds
Iteration: 12, Objective: 0.4420
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:04 PM: Your problem has 2624 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:04 PM: Finished problem compilation (took 2.103e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2624
  constraints   = 5124
  nnz(P)        = 0
  nnz(A)        = 39932
  cones (total) = 1
    : Nonnegative = 1,  numel = 5124

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5014e+03  2.50e+03  9.80e-01  7.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.8695e-01  +5.2680e+02  5.26e+02  4.05e-01  4.81e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3696e-01  +6.4561e+01  6.40e+01  1.52e-01  2.25e+01  1.34e-02  2.52e-01  8.78e-01  
  3  +5.0925e-01  +1.6348e+01  1.58e+01  1.04e-01  1.53e+01  3.46e-05  2.41e-01  1.94e-01  
  4  +5.0045e-01  +1.2056e+00  7.05e-01  6.90e-03  1.07e+00  6.98e-06  1.19e-01  8.95e-01  
  5  +5.0023e-01  +9.2393e-01  4.24e-01  4.10e-03  6.38e-01  6.43e-06  7.11e-02  4.80e-01  
  6  +5.0013e-01  +8.8944e-01  3.89e-01  3.56e-03  5.54e-01  1.06e-05  2.75e-02  7.64e-01  
  7  +4.9873e-01  +8.1255e-01  3.14e-01  6.48e-04  1.02e-01  8.54e-05  2.09e-03  9.49e-01  
  8  +4.9507e-01  +7.3864e-01  2.44e-01  2.03e-04  3.21e-02  1.64e-04  6.32e-04  8.11e-01  
  9  +4.9281e-01  +7.1741e-01  2.25e-01  1.59e-04  2.51e-02  1.38e-04  4.96e-04  3.79e-01  
 10  +4.8608e-01  +6.6575e-01  1.80e-01  1.09e-04  1.72e-02  9.56e-05  3.50e-04  4.30e-01  
 11  +4.7928e-01  +6.1966e-01  1.40e-01  8.19e-05  1.29e-02  3.73e-05  2.72e-04  5.36e-01  
 12  +4.7152e-01  +5.7805e-01  1.07e-01  5.66e-05  8.91e-03  2.49e-05  1.94e-04  3.73e-01  
 13  +4.6481e-01  +5.4432e-01  7.95e-02  3.96e-05  6.24e-03  1.65e-05  1.40e-04  3.65e-01  
 14  +4.5805e-01  +5.1078e-01  5.27e-02  2.45e-05  3.86e-03  8.52e-06  8.88e-05  5.76e-01  
 15  +4.5517e-01  +4.9760e-01  4.24e-02  1.89e-05  2.97e-03  6.54e-06  6.89e-05  3.36e-01  
 16  +4.5276e-01  +4.8685e-01  3.41e-02  1.47e-05  2.31e-03  4.30e-06  5.43e-05  5.63e-01  
 17  +4.4852e-01  +4.6813e-01  1.96e-02  8.06e-06  1.27e-03  2.27e-06  3.06e-05  7.16e-01  
 18  +4.4480e-01  +4.5295e-01  8.16e-03  3.25e-06  5.11e-04  8.84e-07  1.27e-05  8.06e-01  
 19  +4.4309e-01  +4.4617e-01  3.08e-03  1.22e-06  1.92e-04  3.28e-07  4.85e-06  7.56e-01  
 20  +4.4202e-01  +4.4208e-01  5.64e-05  2.22e-08  3.48e-06  5.66e-09  8.94e-08  9.86e-01  
 21  +4.4200e-01  +4.4200e-01  5.64e-07  2.22e-10  3.49e-08  5.66e-11  8.95e-10  9.90e-01  
 22  +4.4200e-01  +4.4200e-01  5.64e-09  2.22e-12  3.49e-10  5.69e-13  8.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 81.8221ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:04 PM: Optimal value: 4.420e-01
(CVXPY) Sep 20 07:40:04 PM: Compilation took 2.103e-02 seconds
(CVXPY) Sep 20 07:40:04 PM: Solver (including time spent in interface) took 8.817e-02 seconds
Iteration: 13, Objective: 0.4420
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:04 PM: Your problem has 2634 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:04 PM: Finished problem compilation (took 2.256e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2634
  constraints   = 5134
  nnz(P)        = 0
  nnz(A)        = 40466
  cones (total) = 1
    : Nonnegative = 1,  numel = 5134

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.80e-01  7.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.8695e-01  +5.2666e+02  5.26e+02  4.05e-01  4.80e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3690e-01  +6.4472e+01  6.39e+01  1.51e-01  2.25e+01  1.34e-02  2.52e-01  8.79e-01  
  3  +5.0923e-01  +1.6325e+01  1.58e+01  1.04e-01  1.52e+01  3.46e-05  2.41e-01  1.94e-01  
  4  +5.0047e-01  +1.2395e+00  7.39e-01  7.24e-03  1.12e+00  7.06e-06  1.21e-01  8.74e-01  
  5  +5.0021e-01  +9.0668e-01  4.06e-01  3.93e-03  6.11e-01  6.27e-06  6.83e-02  5.06e-01  
  6  +5.0009e-01  +8.8153e-01  3.81e-01  3.41e-03  5.32e-01  1.18e-05  2.39e-02  7.74e-01  
  7  +4.9804e-01  +8.2254e-01  3.24e-01  5.25e-04  8.29e-02  1.16e-04  1.66e-03  9.44e-01  
  8  +4.9709e-01  +7.6785e-01  2.71e-01  3.17e-04  5.01e-02  9.46e-05  9.88e-04  6.64e-01  
  9  +4.9253e-01  +7.1632e-01  2.24e-01  1.51e-04  2.38e-02  1.09e-04  4.69e-04  7.14e-01  
 10  +4.8375e-01  +6.5036e-01  1.67e-01  1.03e-04  1.62e-02  4.28e-05  3.34e-04  5.84e-01  
 11  +4.7673e-01  +6.1318e-01  1.36e-01  7.64e-05  1.20e-02  3.20e-05  2.56e-04  3.10e-01  
 12  +4.7287e-01  +5.9379e-01  1.21e-01  6.51e-05  1.03e-02  2.41e-05  2.23e-04  2.75e-01  
 13  +4.6216e-01  +5.4137e-01  7.92e-02  3.87e-05  6.09e-03  1.11e-05  1.40e-04  5.82e-01  
 14  +4.5544e-01  +5.0954e-01  5.41e-02  2.48e-05  3.89e-03  5.70e-06  9.22e-05  7.14e-01  
 15  +4.5070e-01  +4.8851e-01  3.78e-02  1.65e-05  2.60e-03  3.93e-06  6.28e-05  4.45e-01  
 16  +4.4937e-01  +4.8161e-01  3.22e-02  1.40e-05  2.19e-03  3.09e-06  5.43e-05  8.19e-01  
 17  +4.4745e-01  +4.7331e-01  2.59e-02  1.11e-05  1.74e-03  2.52e-06  4.33e-05  4.04e-01  
 18  +4.4585e-01  +4.6704e-01  2.12e-02  8.75e-06  1.37e-03  2.17e-06  3.41e-05  6.79e-01  
 19  +4.4186e-01  +4.5104e-01  9.18e-03  3.75e-06  5.88e-04  9.31e-07  1.51e-05  5.89e-01  
 20  +4.3987e-01  +4.4283e-01  2.97e-03  1.21e-06  1.89e-04  2.97e-07  4.96e-06  9.90e-01  
 21  +4.3883e-01  +4.3891e-01  8.01e-05  3.25e-08  5.11e-06  7.75e-09  1.36e-07  9.80e-01  
 22  +4.3880e-01  +4.3880e-01  8.03e-07  3.26e-10  5.12e-08  7.77e-11  1.36e-09  9.90e-01  
 23  +4.3880e-01  +4.3880e-01  8.03e-09  3.26e-12  5.12e-10  7.79e-13  1.36e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 92.8092ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:04 PM: Optimal value: 4.388e-01
(CVXPY) Sep 20 07:40:04 PM: Compilation took 2.256e-02 seconds
(CVXPY) Sep 20 07:40:04 PM: Solver (including time spent in interface) took 9.872e-02 seconds
Iteration: 14, Objective: 0.4388
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:04 PM: Your problem has 2644 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:04 PM: Finished problem compilation (took 2.354e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2644
  constraints   = 5144
  nnz(P)        = 0
  nnz(A)        = 40905
  cones (total) = 1
    : Nonnegative = 1,  numel = 5144

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.80e-01  7.78e+01  1.00e+00  1.00e+00   ------   
  1  +5.8688e-01  +5.2653e+02  5.26e+02  4.05e-01  4.79e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3687e-01  +6.4430e+01  6.39e+01  1.51e-01  2.24e+01  1.34e-02  2.52e-01  8.79e-01  
  3  +5.0922e-01  +1.6310e+01  1.58e+01  1.04e-01  1.52e+01  3.46e-05  2.41e-01  1.95e-01  
  4  +5.0046e-01  +1.2227e+00  7.22e-01  7.08e-03  1.09e+00  7.04e-06  1.19e-01  8.85e-01  
  5  +5.0021e-01  +9.0055e-01  4.00e-01  3.88e-03  6.02e-01  6.43e-06  6.55e-02  5.23e-01  
  6  +5.0005e-01  +8.9342e-01  3.93e-01  3.28e-03  5.12e-01  1.53e-05  1.86e-02  8.43e-01  
  7  +4.9669e-01  +8.2959e-01  3.33e-01  3.48e-04  5.50e-02  1.86e-04  1.08e-03  9.47e-01  
  8  +4.9575e-01  +7.8126e-01  2.86e-01  2.60e-04  4.11e-02  1.22e-04  8.06e-04  5.11e-01  
  9  +4.8997e-01  +7.2433e-01  2.34e-01  1.50e-04  2.36e-02  1.21e-04  4.72e-04  5.20e-01  
 10  +4.8155e-01  +6.5089e-01  1.69e-01  1.04e-04  1.64e-02  3.36e-05  3.43e-04  6.17e-01  
 11  +4.7485e-01  +6.1362e-01  1.39e-01  7.75e-05  1.22e-02  2.60e-05  2.63e-04  2.88e-01  
 12  +4.7099e-01  +5.9275e-01  1.22e-01  6.51e-05  1.02e-02  1.92e-05  2.25e-04  3.18e-01  
 13  +4.6088e-01  +5.4196e-01  8.11e-02  3.93e-05  6.17e-03  1.04e-05  1.43e-04  5.21e-01  
 14  +4.5641e-01  +5.2104e-01  6.46e-02  3.01e-05  4.72e-03  7.81e-06  1.12e-04  3.26e-01  
 15  +4.4679e-01  +4.7657e-01  2.98e-02  1.30e-05  2.04e-03  2.97e-06  5.12e-05  7.46e-01  
 16  +4.4124e-01  +4.5229e-01  1.11e-02  4.68e-06  7.34e-04  1.08e-06  1.92e-05  7.22e-01  
 17  +4.3906e-01  +4.4295e-01  3.88e-03  1.63e-06  2.56e-04  3.56e-07  6.84e-06  9.90e-01  
 18  +4.3790e-01  +4.3850e-01  6.00e-04  2.49e-07  3.91e-05  5.50e-08  1.06e-06  8.87e-01  
 19  +4.3770e-01  +4.3771e-01  6.25e-06  2.60e-09  4.08e-07  5.72e-10  1.11e-08  9.90e-01  
 20  +4.3770e-01  +4.3770e-01  6.25e-08  2.60e-11  4.08e-09  5.72e-12  1.11e-10  9.90e-01  
 21  +4.3770e-01  +4.3770e-01  6.25e-10  2.60e-13  4.08e-11  5.72e-14  1.11e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 87.3696ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:04 PM: Optimal value: 4.377e-01
(CVXPY) Sep 20 07:40:04 PM: Compilation took 2.354e-02 seconds
(CVXPY) Sep 20 07:40:04 PM: Solver (including time spent in interface) took 9.420e-02 seconds
Iteration: 15, Objective: 0.4377
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:05 PM: Your problem has 2645 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:05 PM: Finished problem compilation (took 2.507e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2645
  constraints   = 5145
  nnz(P)        = 0
  nnz(A)        = 40993
  cones (total) = 1
    : Nonnegative = 1,  numel = 5145

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.80e-01  7.78e+01  1.00e+00  1.00e+00   ------   
  1  +5.8688e-01  +5.2644e+02  5.26e+02  4.05e-01  4.79e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3686e-01  +6.4410e+01  6.39e+01  1.51e-01  2.23e+01  1.34e-02  2.51e-01  8.79e-01  
  3  +5.0922e-01  +1.6305e+01  1.58e+01  1.04e-01  1.52e+01  3.45e-05  2.41e-01  1.95e-01  
  4  +5.0043e-01  +1.1808e+00  6.80e-01  6.67e-03  1.03e+00  6.97e-06  1.15e-01  9.12e-01  
  5  +5.0021e-01  +9.0057e-01  4.00e-01  3.88e-03  6.03e-01  6.66e-06  6.37e-02  5.25e-01  
  6  +5.0004e-01  +8.9026e-01  3.90e-01  3.20e-03  5.00e-01  1.64e-05  1.75e-02  8.45e-01  
  7  +4.9673e-01  +8.3326e-01  3.37e-01  3.44e-04  5.44e-02  1.95e-04  1.07e-03  9.43e-01  
  8  +4.9534e-01  +7.8112e-01  2.86e-01  2.47e-04  3.90e-02  1.35e-04  7.67e-04  5.14e-01  
  9  +4.8986e-01  +7.2839e-01  2.39e-01  1.54e-04  2.43e-02  1.29e-04  4.86e-04  4.57e-01  
 10  +4.7955e-01  +6.4262e-01  1.63e-01  9.55e-05  1.50e-02  4.47e-05  3.17e-04  6.04e-01  
 11  +4.7382e-01  +6.1060e-01  1.37e-01  7.46e-05  1.17e-02  3.39e-05  2.54e-04  2.78e-01  
 12  +4.6968e-01  +5.8791e-01  1.18e-01  6.18e-05  9.73e-03  2.42e-05  2.15e-04  3.17e-01  
 13  +4.6073e-01  +5.4288e-01  8.21e-02  3.96e-05  6.23e-03  1.45e-05  1.44e-04  4.28e-01  
 14  +4.5584e-01  +5.1960e-01  6.38e-02  2.95e-05  4.63e-03  1.03e-05  1.10e-04  3.37e-01  
 15  +4.4713e-01  +4.7856e-01  3.14e-02  1.38e-05  2.16e-03  4.00e-06  5.40e-05  6.90e-01  
 16  +4.4110e-01  +4.5188e-01  1.08e-02  4.57e-06  7.17e-04  1.28e-06  1.87e-05  7.27e-01  
 17  +4.3910e-01  +4.4306e-01  3.95e-03  1.67e-06  2.62e-04  3.50e-07  7.00e-06  9.90e-01  
 18  +4.3828e-01  +4.3998e-01  1.71e-03  7.10e-07  1.11e-04  1.55e-07  2.99e-06  7.21e-01  
 19  +4.3771e-01  +4.3773e-01  2.03e-05  8.45e-09  1.33e-06  1.83e-09  3.59e-08  9.88e-01  
 20  +4.3770e-01  +4.3770e-01  2.03e-07  8.45e-11  1.33e-08  1.83e-11  3.59e-10  9.90e-01  
 21  +4.3770e-01  +4.3770e-01  2.03e-09  8.45e-13  1.33e-10  1.83e-13  3.59e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 95.3923ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:05 PM: Optimal value: 4.377e-01
(CVXPY) Sep 20 07:40:05 PM: Compilation took 2.507e-02 seconds
(CVXPY) Sep 20 07:40:05 PM: Solver (including time spent in interface) took 1.027e-01 seconds
Iteration: 16, Objective: 0.4377
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:40:05 PM: Your problem has 2647 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:40:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:40:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:40:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:40:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:40:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:40:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:40:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:40:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:40:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:40:05 PM: Finished problem compilation (took 2.404e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2647
  constraints   = 5147
  nnz(P)        = 0
  nnz(A)        = 41108
  cones (total) = 1
    : Nonnegative = 1,  numel = 5147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.80e-01  7.78e+01  1.00e+00  1.00e+00   ------   
  1  +5.8689e-01  +5.2639e+02  5.26e+02  4.05e-01  4.79e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3686e-01  +6.4396e+01  6.39e+01  1.51e-01  2.23e+01  1.34e-02  2.51e-01  8.79e-01  
  3  +5.0921e-01  +1.6298e+01  1.58e+01  1.04e-01  1.52e+01  3.45e-05  2.41e-01  1.95e-01  
  4  +5.0041e-01  +1.1415e+00  6.41e-01  6.29e-03  9.72e-01  6.90e-06  1.12e-01  9.40e-01  
  5  +5.0022e-01  +9.0647e-01  4.06e-01  3.94e-03  6.12e-01  7.00e-06  6.24e-02  5.24e-01  
  6  +5.0002e-01  +9.2425e-01  4.24e-01  3.16e-03  4.94e-01  2.07e-05  1.49e-02  8.99e-01  
  7  +4.9666e-01  +8.6546e-01  3.69e-01  3.53e-04  5.58e-02  2.08e-04  1.10e-03  9.29e-01  
  8  +4.9510e-01  +7.7719e-01  2.82e-01  2.35e-04  3.71e-02  9.62e-05  7.32e-04  6.54e-01  
  9  +4.8848e-01  +7.0074e-01  2.12e-01  1.38e-04  2.17e-02  5.73e-05  4.40e-04  6.61e-01  
 10  +4.8000e-01  +6.4530e-01  1.65e-01  9.63e-05  1.52e-02  4.00e-05  3.19e-04  3.52e-01  
 11  +4.7454e-01  +6.1477e-01  1.40e-01  7.66e-05  1.21e-02  3.11e-05  2.60e-04  2.59e-01  
 12  +4.7173e-01  +5.9826e-01  1.27e-01  6.75e-05  1.06e-02  2.11e-05  2.32e-04  3.70e-01  
 13  +4.5873e-01  +5.3218e-01  7.35e-02  3.50e-05  5.50e-03  9.98e-06  1.29e-04  5.56e-01  
 14  +4.5572e-01  +5.1820e-01  6.25e-02  2.89e-05  4.53e-03  8.09e-06  1.07e-04  2.71e-01  
 15  +4.4931e-01  +4.8836e-01  3.91e-02  1.73e-05  2.71e-03  4.54e-06  6.69e-05  5.39e-01  
 16  +4.4523e-01  +4.6980e-01  2.46e-02  1.06e-05  1.67e-03  2.72e-06  4.21e-05  5.27e-01  
 17  +4.4257e-01  +4.5831e-01  1.57e-02  6.68e-06  1.05e-03  1.72e-06  2.70e-05  4.12e-01  
 18  +4.3861e-01  +4.4127e-01  2.66e-03  1.11e-06  1.74e-04  2.52e-07  4.64e-06  9.90e-01  
 19  +4.3771e-01  +4.3776e-01  4.14e-05  1.72e-08  2.70e-06  3.80e-09  7.30e-08  9.86e-01  
 20  +4.3770e-01  +4.3770e-01  4.14e-07  1.72e-10  2.70e-08  3.80e-11  7.30e-10  9.90e-01  
 21  +4.3770e-01  +4.3770e-01  4.14e-09  1.72e-12  2.70e-10  3.81e-13  7.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 90.4906ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:40:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:40:05 PM: Optimal value: 4.377e-01
(CVXPY) Sep 20 07:40:05 PM: Compilation took 2.404e-02 seconds
(CVXPY) Sep 20 07:40:05 PM: Solver (including time spent in interface) took 9.659e-02 seconds
FULL MODEL:
  Accruacy: 0.5292
  Our objective: 0.05839999999999998

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0048)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0044)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0036)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0056)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0048)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 1)                                  <-- (term's our objective: 0.012)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.548385381698608
Best over terms:
  Our final objective: 0.012000000000000038
    Its accruacy: 0.506
    Its hamming distance: 9
  Shortest hamming distance: 0
    Its our objective: 0.007999999999999988
  Highest accruacy: 0.506
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

