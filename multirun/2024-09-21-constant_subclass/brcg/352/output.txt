Command:
python test_script.py -s constant_subclass -d 9 -n 10000 --seed 73 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0018000000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 9.

Computed total variation: 0.17959999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:58 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:58 PM: Finished problem compilation (took 2.436e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 60019
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +5.0012e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +1.0852e+03  1.08e+03  4.32e-01  7.56e+01  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3196e-01  +1.2314e+02  1.23e+02  1.71e-01  3.84e+01  1.63e-02  2.77e-01  9.29e-01  
  3  +5.0884e-01  +3.2066e+01  3.16e+01  1.24e-01  2.77e+01  4.48e-05  2.59e-01  2.72e-01  
  4  +5.0107e-01  +3.2027e+00  2.70e+00  1.83e-02  4.17e+00  5.75e-06  1.71e-01  5.87e-01  
  5  +5.0008e-01  +8.8656e-01  3.86e-01  2.59e-03  6.02e-01  3.70e-05  1.04e-01  9.90e-01  
  6  +5.0001e-01  +5.5397e-01  5.40e-02  3.60e-04  8.40e-02  6.03e-06  1.95e-02  8.28e-01  
  7  +5.0000e-01  +5.3849e-01  3.85e-02  2.56e-04  5.98e-02  5.35e-06  8.53e-03  7.13e-01  
  8  +4.9999e-01  +5.3780e-01  3.78e-02  2.35e-04  5.49e-02  1.32e-05  2.17e-03  8.86e-01  
  9  +4.9905e-01  +5.3172e-01  3.27e-02  1.42e-05  3.33e-03  4.75e-04  4.64e-05  9.80e-01  
 10  +4.9778e-01  +5.2421e-01  2.64e-02  7.37e-06  1.73e-03  5.46e-04  2.42e-05  5.44e-01  
 11  +4.9646e-01  +5.1496e-01  1.85e-02  5.25e-06  1.23e-03  2.08e-04  1.80e-05  4.38e-01  
 12  +4.9581e-01  +5.1022e-01  1.44e-02  3.84e-06  8.99e-04  2.91e-05  1.37e-05  7.38e-01  
 13  +4.9449e-01  +5.0415e-01  9.67e-03  2.31e-06  5.41e-04  3.12e-07  8.58e-06  8.98e-01  
 14  +4.9186e-01  +4.9344e-01  1.57e-03  3.26e-07  7.63e-05  5.51e-08  1.31e-06  9.90e-01  
 15  +4.9132e-01  +4.9137e-01  5.22e-05  1.06e-08  2.47e-06  1.70e-09  4.34e-08  9.67e-01  
 16  +4.9130e-01  +4.9130e-01  5.26e-07  1.06e-10  2.49e-08  1.72e-11  4.38e-10  9.90e-01  
 17  +4.9130e-01  +4.9130e-01  5.27e-09  1.06e-12  2.49e-10  1.82e-13  4.63e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 67.4826ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:58 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:58 PM: Optimal value: 4.913e-01
(CVXPY) Sep 20 08:01:58 PM: Compilation took 2.436e-02 seconds
(CVXPY) Sep 20 08:01:58 PM: Solver (including time spent in interface) took 7.459e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4913
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:58 PM: Your problem has 5029 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:58 PM: Finished problem compilation (took 2.140e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5029
  constraints   = 10029
  nnz(P)        = 0
  nnz(A)        = 65365
  cones (total) = 1
    : Nonnegative = 1,  numel = 10029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.17e+02  1.00e+00  1.00e+00   ------   
  1  +5.8087e-01  +1.0854e+03  1.08e+03  4.32e-01  7.64e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3187e-01  +1.2298e+02  1.22e+02  1.71e-01  3.87e+01  1.63e-02  2.77e-01  9.30e-01  
  3  +5.0882e-01  +3.2004e+01  3.15e+01  1.24e-01  2.79e+01  4.49e-05  2.59e-01  2.75e-01  
  4  +5.0107e-01  +3.1904e+00  2.69e+00  1.83e-02  4.20e+00  5.76e-06  1.70e-01  5.91e-01  
  5  +5.0009e-01  +9.0489e-01  4.05e-01  2.72e-03  6.38e-01  3.74e-05  1.02e-01  9.90e-01  
  6  +5.0002e-01  +6.3251e-01  1.32e-01  8.86e-04  2.09e-01  1.44e-05  3.80e-02  6.68e-01  
  7  +5.0001e-01  +5.9628e-01  9.63e-02  6.42e-04  1.51e-01  1.41e-05  1.74e-02  6.35e-01  
  8  +4.9993e-01  +5.7795e-01  7.80e-02  4.33e-04  1.02e-01  5.18e-05  2.71e-03  8.90e-01  
  9  +4.9785e-01  +5.7002e-01  7.22e-02  3.47e-05  8.22e-03  1.05e-03  1.15e-04  9.59e-01  
 10  +4.9587e-01  +5.4962e-01  5.37e-02  2.16e-05  5.12e-03  7.40e-04  7.24e-05  4.69e-01  
 11  +4.9561e-01  +5.4264e-01  4.70e-02  1.87e-05  4.44e-03  3.16e-04  6.25e-05  4.84e-01  
 12  +4.9334e-01  +5.2536e-01  3.20e-02  1.08e-05  2.56e-03  1.39e-04  3.62e-05  6.24e-01  
 13  +4.9329e-01  +5.2429e-01  3.10e-02  9.73e-06  2.31e-03  6.57e-05  3.23e-05  5.33e-01  
 14  +4.9170e-01  +5.1495e-01  2.33e-02  6.35e-06  1.51e-03  4.08e-05  2.14e-05  4.76e-01  
 15  +4.9062e-01  +5.0913e-01  1.85e-02  4.49e-06  1.06e-03  3.08e-05  1.50e-05  3.75e-01  
 16  +4.9060e-01  +5.0903e-01  1.84e-02  4.49e-06  1.06e-03  3.04e-05  1.50e-05  3.88e-03  
 17  +4.9015e-01  +5.0642e-01  1.63e-02  4.21e-06  9.98e-04  1.85e-05  1.40e-05  2.72e-01  
 18  +4.8760e-01  +4.9302e-01  5.41e-03  1.19e-06  2.81e-04  6.92e-06  3.88e-06  7.45e-01  
 19  +4.8688e-01  +4.9026e-01  3.38e-03  5.82e-07  1.38e-04  5.09e-06  1.84e-06  5.77e-01  
 20  +4.8680e-01  +4.8986e-01  3.06e-03  5.64e-07  1.33e-04  3.09e-06  1.79e-06  2.66e-01  
 21  +4.8578e-01  +4.8632e-01  5.39e-04  9.02e-08  2.14e-05  3.24e-07  2.89e-07  8.84e-01  
 22  +4.8560e-01  +4.8561e-01  6.38e-06  1.05e-09  2.50e-07  3.50e-09  3.39e-09  9.89e-01  
 23  +4.8560e-01  +4.8560e-01  6.38e-08  1.05e-11  2.50e-09  3.50e-11  3.39e-11  9.90e-01  
 24  +4.8560e-01  +4.8560e-01  6.40e-10  1.06e-13  2.50e-11  3.89e-13  3.74e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 104.2897ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:58 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:58 PM: Optimal value: 4.856e-01
(CVXPY) Sep 20 08:01:58 PM: Compilation took 2.140e-02 seconds
(CVXPY) Sep 20 08:01:58 PM: Solver (including time spent in interface) took 1.120e-01 seconds
Iteration: 2, Objective: 0.4856
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:58 PM: Your problem has 5039 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:58 PM: Finished problem compilation (took 2.414e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5039
  constraints   = 10039
  nnz(P)        = 0
  nnz(A)        = 69320
  cones (total) = 1
    : Nonnegative = 1,  numel = 10039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.8081e-01  +1.0855e+03  1.08e+03  4.32e-01  7.69e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3181e-01  +1.2286e+02  1.22e+02  1.71e-01  3.89e+01  1.63e-02  2.77e-01  9.31e-01  
  3  +5.0880e-01  +3.1962e+01  3.15e+01  1.23e-01  2.80e+01  4.50e-05  2.58e-01  2.76e-01  
  4  +5.0106e-01  +3.1832e+00  2.68e+00  1.82e-02  4.22e+00  5.78e-06  1.69e-01  5.94e-01  
  5  +5.0009e-01  +9.1771e-01  4.18e-01  2.80e-03  6.62e-01  3.77e-05  1.00e-01  9.90e-01  
  6  +5.0003e-01  +6.5191e-01  1.52e-01  1.02e-03  2.41e-01  1.70e-05  3.91e-02  6.48e-01  
  7  +4.9999e-01  +5.9132e-01  9.13e-02  6.04e-04  1.43e-01  2.19e-05  1.02e-02  8.24e-01  
  8  +4.9859e-01  +6.1898e-01  1.20e-01  1.07e-04  2.54e-02  7.27e-04  3.44e-04  9.90e-01  
  9  +4.9501e-01  +5.9822e-01  1.03e-01  3.24e-05  7.72e-03  1.85e-03  1.02e-04  7.16e-01  
 10  +4.9393e-01  +5.8889e-01  9.50e-02  2.72e-05  6.49e-03  1.64e-03  8.62e-05  2.21e-01  
 11  +4.9447e-01  +5.7349e-01  7.90e-02  2.33e-05  5.56e-03  4.71e-04  7.40e-05  5.58e-01  
 12  +4.9243e-01  +5.5716e-01  6.47e-02  1.77e-05  4.23e-03  1.53e-04  5.71e-05  6.18e-01  
 13  +4.9209e-01  +5.5533e-01  6.32e-02  1.76e-05  4.19e-03  1.33e-04  5.68e-05  7.64e-02  
 14  +4.8620e-01  +5.2970e-01  4.35e-02  1.00e-05  2.38e-03  7.74e-05  3.34e-05  5.22e-01  
 15  +4.8005e-01  +5.0365e-01  2.36e-02  4.83e-06  1.15e-03  2.50e-06  1.66e-05  8.91e-01  
 16  +4.7413e-01  +4.8134e-01  7.22e-03  1.34e-06  3.20e-04  4.90e-07  4.75e-06  9.03e-01  
 17  +4.7412e-01  +4.8148e-01  7.35e-03  1.34e-06  3.19e-04  5.05e-07  4.72e-06  3.93e-02  
 18  +4.7340e-01  +4.7881e-01  5.42e-03  9.86e-07  2.35e-04  3.32e-07  3.50e-06  9.90e-01  
 19  +4.7153e-01  +4.7263e-01  1.10e-03  1.96e-07  4.66e-05  6.44e-08  7.05e-07  8.45e-01  
 20  +4.7110e-01  +4.7112e-01  1.26e-05  2.24e-09  5.33e-07  7.34e-10  8.09e-09  9.89e-01  
 21  +4.7110e-01  +4.7110e-01  1.26e-07  2.24e-11  5.33e-09  7.34e-12  8.09e-11  9.90e-01  
 22  +4.7110e-01  +4.7110e-01  1.26e-09  2.24e-13  5.33e-11  7.36e-14  8.11e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 100.5765ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:58 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:58 PM: Optimal value: 4.711e-01
(CVXPY) Sep 20 08:01:58 PM: Compilation took 2.414e-02 seconds
(CVXPY) Sep 20 08:01:58 PM: Solver (including time spent in interface) took 1.086e-01 seconds
Iteration: 3, Objective: 0.4711
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:58 PM: Your problem has 5049 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:59 PM: Finished problem compilation (took 2.612e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5049
  constraints   = 10049
  nnz(P)        = 0
  nnz(A)        = 71415
  cones (total) = 1
    : Nonnegative = 1,  numel = 10049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.8076e-01  +1.0855e+03  1.08e+03  4.32e-01  7.69e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3177e-01  +1.2276e+02  1.22e+02  1.70e-01  3.88e+01  1.63e-02  2.77e-01  9.32e-01  
  3  +5.0878e-01  +3.1927e+01  3.14e+01  1.23e-01  2.80e+01  4.50e-05  2.58e-01  2.78e-01  
  4  +5.0106e-01  +3.1728e+00  2.67e+00  1.82e-02  4.21e+00  5.80e-06  1.68e-01  5.97e-01  
  5  +5.0010e-01  +9.3303e-01  4.33e-01  2.91e-03  6.88e-01  3.80e-05  9.84e-02  9.90e-01  
  6  +5.0003e-01  +6.5860e-01  1.59e-01  1.06e-03  2.52e-01  1.86e-05  3.61e-02  6.85e-01  
  7  +5.0000e-01  +6.4842e-01  1.48e-01  9.76e-04  2.32e-01  2.99e-05  1.39e-02  7.44e-01  
  8  +4.9891e-01  +6.0633e-01  1.07e-01  1.29e-04  3.08e-02  5.60e-04  4.28e-04  9.85e-01  
  9  +4.9543e-01  +5.8851e-01  9.31e-02  3.39e-05  8.10e-03  1.73e-03  1.08e-04  7.58e-01  
 10  +4.9474e-01  +5.8350e-01  8.88e-02  3.01e-05  7.18e-03  1.45e-03  9.43e-05  2.58e-01  
 11  +4.9370e-01  +5.7753e-01  8.38e-02  2.40e-05  5.73e-03  1.12e-03  7.49e-05  4.23e-01  
 12  +4.9323e-01  +5.7520e-01  8.20e-02  2.39e-05  5.70e-03  1.05e-03  7.48e-05  2.01e-02  
 13  +4.9142e-01  +5.6510e-01  7.37e-02  1.94e-05  4.63e-03  6.47e-04  6.11e-05  4.34e-01  
 14  +4.9095e-01  +5.6244e-01  7.15e-02  1.91e-05  4.56e-03  5.57e-04  6.04e-05  8.70e-02  
 15  +4.8908e-01  +5.5306e-01  6.40e-02  1.64e-05  3.91e-03  3.63e-04  5.23e-05  3.25e-01  
 16  +4.8770e-01  +5.4396e-01  5.63e-02  1.41e-05  3.36e-03  3.71e-06  4.51e-05  8.23e-01  
 17  +4.8149e-01  +5.1805e-01  3.66e-02  7.98e-06  1.90e-03  2.31e-06  2.63e-05  4.84e-01  
 18  +4.7884e-01  +5.0606e-01  2.72e-02  5.61e-06  1.34e-03  1.46e-06  1.88e-05  7.49e-01  
 19  +4.7399e-01  +4.8695e-01  1.30e-02  2.50e-06  5.97e-04  6.82e-07  8.64e-06  6.31e-01  
 20  +4.7381e-01  +4.8629e-01  1.25e-02  2.34e-06  5.57e-04  6.84e-07  8.04e-06  2.20e-01  
 21  +4.7335e-01  +4.8451e-01  1.12e-02  2.16e-06  5.15e-04  5.82e-07  7.78e-06  3.53e-01  
 22  +4.7308e-01  +4.8333e-01  1.03e-02  1.97e-06  4.70e-04  5.61e-07  7.03e-06  3.55e-01  
 23  +4.7115e-01  +4.7601e-01  4.86e-03  9.16e-07  2.18e-04  2.75e-07  3.30e-06  6.07e-01  
 24  +4.7058e-01  +4.7440e-01  3.82e-03  6.88e-07  1.64e-04  2.25e-07  2.45e-06  4.11e-01  
 25  +4.6913e-01  +4.6922e-01  8.27e-05  1.48e-08  3.52e-06  4.70e-09  5.35e-08  9.90e-01  
 26  +4.6910e-01  +4.6910e-01  8.28e-07  1.48e-10  3.52e-08  4.70e-11  5.36e-10  9.90e-01  
 27  +4.6910e-01  +4.6910e-01  8.28e-09  1.48e-12  3.52e-10  4.78e-13  5.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 119.7393ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:59 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:59 PM: Optimal value: 4.691e-01
(CVXPY) Sep 20 08:01:59 PM: Compilation took 2.612e-02 seconds
(CVXPY) Sep 20 08:01:59 PM: Solver (including time spent in interface) took 1.272e-01 seconds
Iteration: 4, Objective: 0.4691
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:59 PM: Your problem has 5059 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:59 PM: Finished problem compilation (took 2.631e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5059
  constraints   = 10059
  nnz(P)        = 0
  nnz(A)        = 72987
  cones (total) = 1
    : Nonnegative = 1,  numel = 10059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.8072e-01  +1.0855e+03  1.08e+03  4.33e-01  7.69e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3173e-01  +1.2270e+02  1.22e+02  1.70e-01  3.88e+01  1.63e-02  2.77e-01  9.32e-01  
  3  +5.0878e-01  +3.1909e+01  3.14e+01  1.23e-01  2.80e+01  4.50e-05  2.58e-01  2.79e-01  
  4  +5.0106e-01  +3.1709e+00  2.67e+00  1.82e-02  4.21e+00  5.80e-06  1.68e-01  5.98e-01  
  5  +5.0010e-01  +9.4253e-01  4.42e-01  2.97e-03  7.03e-01  3.81e-05  9.82e-02  9.84e-01  
  6  +5.0003e-01  +6.9137e-01  1.91e-01  1.28e-03  3.04e-01  2.14e-05  4.20e-02  6.10e-01  
  7  +5.0000e-01  +6.4384e-01  1.44e-01  9.49e-04  2.25e-01  3.05e-05  1.43e-02  7.31e-01  
  8  +4.9949e-01  +6.4359e-01  1.44e-01  3.33e-04  7.95e-02  2.82e-04  1.18e-03  9.90e-01  
  9  +4.9572e-01  +6.2113e-01  1.25e-01  4.60e-05  1.10e-02  1.86e-03  1.45e-04  8.78e-01  
 10  +4.9405e-01  +5.9942e-01  1.05e-01  3.72e-05  8.90e-03  1.27e-03  1.16e-04  3.19e-01  
 11  +4.9314e-01  +5.9129e-01  9.81e-02  2.86e-05  6.84e-03  1.02e-03  8.87e-05  4.25e-01  
 12  +4.9285e-01  +5.8316e-01  9.03e-02  2.54e-05  6.06e-03  5.58e-04  7.84e-05  4.28e-01  
 13  +4.9108e-01  +5.7111e-01  8.00e-02  2.08e-05  4.97e-03  3.42e-04  6.45e-05  4.09e-01  
 14  +4.8948e-01  +5.6073e-01  7.13e-02  1.86e-05  4.44e-03  1.81e-04  5.82e-05  3.64e-01  
 15  +4.8349e-01  +5.3237e-01  4.89e-02  1.11e-05  2.65e-03  8.37e-05  3.56e-05  5.65e-01  
 16  +4.8194e-01  +5.2319e-01  4.12e-02  8.98e-06  2.14e-03  2.08e-05  2.90e-05  6.93e-01  
 17  +4.7725e-01  +5.0283e-01  2.56e-02  5.18e-06  1.24e-03  2.19e-07  1.71e-05  9.67e-01  
 18  +4.7315e-01  +4.8685e-01  1.37e-02  2.65e-06  6.34e-04  1.93e-07  9.02e-06  5.33e-01  
 19  +4.7284e-01  +4.8558e-01  1.27e-02  2.45e-06  5.86e-04  2.80e-07  8.36e-06  2.31e-01  
 20  +4.7058e-01  +4.7677e-01  6.19e-03  1.15e-06  2.76e-04  3.72e-07  4.04e-06  9.90e-01  
 21  +4.6900e-01  +4.7104e-01  2.04e-03  3.77e-07  9.00e-05  1.21e-07  1.36e-06  7.58e-01  
 22  +4.6860e-01  +4.6963e-01  1.02e-03  1.88e-07  4.50e-05  6.09e-08  6.88e-07  5.42e-01  
 23  +4.6822e-01  +4.6828e-01  5.54e-05  1.01e-08  2.42e-06  3.22e-09  3.76e-08  9.46e-01  
 24  +4.6820e-01  +4.6820e-01  5.58e-07  1.02e-10  2.44e-08  3.24e-11  3.79e-10  9.90e-01  
 25  +4.6820e-01  +4.6820e-01  5.58e-09  1.02e-12  2.44e-10  3.24e-13  3.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 115.0772ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:59 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:59 PM: Optimal value: 4.682e-01
(CVXPY) Sep 20 08:01:59 PM: Compilation took 2.631e-02 seconds
(CVXPY) Sep 20 08:01:59 PM: Solver (including time spent in interface) took 1.225e-01 seconds
Iteration: 5, Objective: 0.4682
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:59 PM: Your problem has 5069 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:59 PM: Finished problem compilation (took 2.720e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5069
  constraints   = 10069
  nnz(P)        = 0
  nnz(A)        = 75607
  cones (total) = 1
    : Nonnegative = 1,  numel = 10069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8069e-01  +1.0855e+03  1.08e+03  4.33e-01  7.71e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3170e-01  +1.2264e+02  1.22e+02  1.70e-01  3.88e+01  1.63e-02  2.77e-01  9.32e-01  
  3  +5.0877e-01  +3.1889e+01  3.14e+01  1.23e-01  2.80e+01  4.51e-05  2.58e-01  2.80e-01  
  4  +5.0106e-01  +3.1664e+00  2.67e+00  1.82e-02  4.21e+00  5.81e-06  1.67e-01  6.00e-01  
  5  +5.0012e-01  +9.9188e-01  4.92e-01  3.31e-03  7.84e-01  3.77e-05  1.01e-01  9.25e-01  
  6  +5.0003e-01  +6.8164e-01  1.82e-01  1.22e-03  2.89e-01  2.05e-05  3.73e-02  6.75e-01  
  7  +4.9998e-01  +6.8046e-01  1.80e-01  1.15e-03  2.73e-01  4.70e-05  1.07e-02  8.36e-01  
  8  +4.9881e-01  +6.4861e-01  1.50e-01  1.71e-04  4.09e-02  6.10e-04  5.59e-04  9.90e-01  
  9  +4.9596e-01  +6.2657e-01  1.31e-01  5.78e-05  1.39e-02  1.44e-03  1.84e-04  6.87e-01  
 10  +4.9395e-01  +6.0660e-01  1.13e-01  4.40e-05  1.05e-02  1.20e-03  1.39e-04  3.18e-01  
 11  +4.9442e-01  +6.0496e-01  1.11e-01  4.09e-05  9.80e-03  7.69e-04  1.27e-04  3.87e-01  
 12  +4.9202e-01  +5.8899e-01  9.70e-02  2.76e-05  6.61e-03  6.07e-04  8.59e-05  5.15e-01  
 13  +4.9113e-01  +5.8347e-01  9.23e-02  2.52e-05  6.05e-03  4.15e-04  7.87e-05  3.15e-01  
 14  +4.8917e-01  +5.7354e-01  8.44e-02  2.15e-05  5.15e-03  3.11e-04  6.75e-05  2.89e-01  
 15  +4.8452e-01  +5.4877e-01  6.42e-02  1.53e-05  3.66e-03  3.94e-05  4.90e-05  7.50e-01  
 16  +4.8061e-01  +5.3183e-01  5.12e-02  1.13e-05  2.71e-03  1.86e-05  3.69e-05  5.16e-01  
 17  +4.7383e-01  +5.0350e-01  2.97e-02  5.92e-06  1.42e-03  2.71e-06  2.00e-05  8.41e-01  
 18  +4.7317e-01  +5.0054e-01  2.74e-02  5.38e-06  1.29e-03  2.20e-06  1.82e-05  3.56e-01  
 19  +4.6820e-01  +4.8189e-01  1.37e-02  2.58e-06  6.18e-04  1.03e-06  9.05e-06  5.47e-01  
 20  +4.6810e-01  +4.8136e-01  1.33e-02  2.48e-06  5.95e-04  9.74e-07  8.70e-06  1.68e-01  
 21  +4.6635e-01  +4.7442e-01  8.08e-03  1.47e-06  3.53e-04  5.03e-07  5.23e-06  9.90e-01  
 22  +4.6494e-01  +4.6950e-01  4.55e-03  8.27e-07  1.98e-04  2.85e-07  2.98e-06  5.90e-01  
 23  +4.6318e-01  +4.6336e-01  1.85e-04  3.34e-08  8.00e-06  1.11e-08  1.23e-07  9.90e-01  
 24  +4.6310e-01  +4.6310e-01  1.85e-06  3.35e-10  8.02e-08  1.11e-10  1.23e-09  9.90e-01  
 25  +4.6310e-01  +4.6310e-01  1.85e-08  3.35e-12  8.02e-10  1.11e-12  1.23e-11  9.90e-01  
 26  +4.6310e-01  +4.6310e-01  1.85e-10  3.34e-14  8.02e-12  1.11e-14  1.23e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 122.3112ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:59 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:59 PM: Optimal value: 4.631e-01
(CVXPY) Sep 20 08:01:59 PM: Compilation took 2.720e-02 seconds
(CVXPY) Sep 20 08:01:59 PM: Solver (including time spent in interface) took 1.300e-01 seconds
Iteration: 6, Objective: 0.4631
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:01:59 PM: Your problem has 5079 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:01:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:01:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:01:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:01:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:01:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:01:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:01:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:01:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:01:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:01:59 PM: Finished problem compilation (took 2.901e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5079
  constraints   = 10079
  nnz(P)        = 0
  nnz(A)        = 76896
  cones (total) = 1
    : Nonnegative = 1,  numel = 10079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8062e-01  +1.0857e+03  1.09e+03  4.33e-01  7.71e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3164e-01  +1.2252e+02  1.22e+02  1.70e-01  3.88e+01  1.63e-02  2.77e-01  9.33e-01  
  3  +5.0875e-01  +3.1857e+01  3.13e+01  1.23e-01  2.80e+01  4.51e-05  2.57e-01  2.81e-01  
  4  +5.0106e-01  +3.1670e+00  2.67e+00  1.82e-02  4.22e+00  5.82e-06  1.67e-01  6.01e-01  
  5  +5.0012e-01  +9.8853e-01  4.88e-01  3.29e-03  7.79e-01  3.81e-05  9.94e-02  9.42e-01  
  6  +5.0004e-01  +7.0520e-01  2.05e-01  1.38e-03  3.27e-01  2.27e-05  4.00e-02  6.42e-01  
  7  +4.9998e-01  +6.7716e-01  1.77e-01  1.15e-03  2.73e-01  4.36e-05  1.23e-02  7.71e-01  
  8  +4.9887e-01  +6.5808e-01  1.59e-01  2.05e-04  4.91e-02  5.85e-04  6.65e-04  9.90e-01  
  9  +4.9500e-01  +6.3220e-01  1.37e-01  5.17e-05  1.24e-02  1.88e-03  1.61e-04  7.68e-01  
 10  +4.9386e-01  +6.2322e-01  1.29e-01  4.24e-05  1.02e-02  1.67e-03  1.31e-04  3.01e-01  
 11  +4.9371e-01  +6.1953e-01  1.26e-01  3.81e-05  9.13e-03  1.42e-03  1.17e-04  2.57e-01  
 12  +4.9337e-01  +6.0719e-01  1.14e-01  3.50e-05  8.41e-03  5.85e-04  1.08e-04  4.69e-01  
 13  +4.9112e-01  +5.9166e-01  1.01e-01  2.97e-05  7.12e-03  2.68e-04  9.21e-05  4.85e-01  
 14  +4.8296e-01  +5.5120e-01  6.82e-02  1.62e-05  3.88e-03  1.61e-04  5.17e-05  5.44e-01  
 15  +4.8113e-01  +5.4097e-01  5.98e-02  1.37e-05  3.29e-03  4.08e-05  4.42e-05  6.64e-01  
 16  +4.7799e-01  +5.2774e-01  4.97e-02  1.09e-05  2.61e-03  2.95e-05  3.56e-05  2.87e-01  
 17  +4.7312e-01  +5.0678e-01  3.37e-02  6.86e-06  1.64e-03  6.24e-06  2.30e-05  7.76e-01  
 18  +4.6756e-01  +4.8456e-01  1.70e-02  3.28e-06  7.85e-04  1.58e-06  1.14e-05  8.15e-01  
 19  +4.6572e-01  +4.7747e-01  1.18e-02  2.23e-06  5.34e-04  1.02e-06  7.87e-06  4.27e-01  
 20  +4.6543e-01  +4.7636e-01  1.09e-02  2.07e-06  4.95e-04  9.12e-07  7.33e-06  1.75e-01  
 21  +4.6537e-01  +4.7594e-01  1.06e-02  1.98e-06  4.75e-04  8.25e-07  7.03e-06  3.00e-01  
 22  +4.6206e-01  +4.6372e-01  1.66e-03  3.06e-07  7.32e-05  9.81e-08  1.13e-06  9.90e-01  
 23  +4.6141e-01  +4.6144e-01  2.55e-05  4.68e-09  1.12e-06  1.45e-09  1.75e-08  9.87e-01  
 24  +4.6140e-01  +4.6140e-01  2.55e-07  4.69e-11  1.12e-08  1.45e-11  1.75e-10  9.90e-01  
 25  +4.6140e-01  +4.6140e-01  2.55e-09  4.69e-13  1.12e-10  1.48e-13  1.77e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 114.2515ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:01:59 PM: Problem status: optimal
(CVXPY) Sep 20 08:01:59 PM: Optimal value: 4.614e-01
(CVXPY) Sep 20 08:01:59 PM: Compilation took 2.901e-02 seconds
(CVXPY) Sep 20 08:01:59 PM: Solver (including time spent in interface) took 1.229e-01 seconds
Iteration: 7, Objective: 0.4614
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:00 PM: Your problem has 5089 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:00 PM: Finished problem compilation (took 2.606e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5089
  constraints   = 10089
  nnz(P)        = 0
  nnz(A)        = 78439
  cones (total) = 1
    : Nonnegative = 1,  numel = 10089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8055e-01  +1.0857e+03  1.09e+03  4.33e-01  7.71e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3159e-01  +1.2242e+02  1.22e+02  1.70e-01  3.87e+01  1.64e-02  2.76e-01  9.34e-01  
  3  +5.0874e-01  +3.1828e+01  3.13e+01  1.23e-01  2.79e+01  4.52e-05  2.57e-01  2.83e-01  
  4  +5.0105e-01  +3.1651e+00  2.66e+00  1.82e-02  4.22e+00  5.83e-06  1.66e-01  6.03e-01  
  5  +5.0011e-01  +9.7313e-01  4.73e-01  3.19e-03  7.56e-01  3.87e-05  9.59e-02  9.78e-01  
  6  +5.0003e-01  +6.8586e-01  1.86e-01  1.25e-03  2.96e-01  2.36e-05  3.32e-02  7.05e-01  
  7  +4.9992e-01  +6.8392e-01  1.84e-01  1.09e-03  2.61e-01  7.50e-05  7.52e-03  8.42e-01  
  8  +4.9660e-01  +6.6377e-01  1.67e-01  8.82e-05  2.12e-02  1.68e-03  2.75e-04  9.65e-01  
  9  +4.9237e-01  +6.3029e-01  1.38e-01  4.46e-05  1.07e-02  2.10e-03  1.39e-04  5.51e-01  
 10  +4.9183e-01  +6.2622e-01  1.34e-01  4.05e-05  9.72e-03  1.97e-03  1.25e-04  1.74e-01  
 11  +4.9143e-01  +6.2079e-01  1.29e-01  4.01e-05  9.64e-03  1.72e-03  1.25e-04  5.04e-02  
 12  +4.8983e-01  +6.0724e-01  1.17e-01  3.37e-05  8.09e-03  1.22e-03  1.05e-04  3.41e-01  
 13  +4.8942e-01  +6.0161e-01  1.12e-01  3.29e-05  7.91e-03  9.26e-04  1.03e-04  1.63e-01  
 14  +4.8154e-01  +5.5990e-01  7.84e-02  1.89e-05  4.53e-03  6.34e-04  6.04e-05  4.65e-01  
 15  +4.7921e-01  +5.4557e-01  6.64e-02  1.55e-05  3.73e-03  3.05e-04  5.01e-05  4.67e-01  
 16  +4.7421e-01  +5.2234e-01  4.81e-02  1.05e-05  2.52e-03  1.84e-04  3.46e-05  4.05e-01  
 17  +4.7364e-01  +5.1825e-01  4.46e-02  9.51e-06  2.28e-03  9.14e-05  3.14e-05  4.89e-01  
 18  +4.7020e-01  +5.0376e-01  3.36e-02  6.88e-06  1.65e-03  6.19e-05  2.31e-05  3.30e-01  
 19  +4.6737e-01  +4.9057e-01  2.32e-02  4.56e-06  1.09e-03  6.37e-07  1.56e-05  9.88e-01  
 20  +4.6432e-01  +4.7882e-01  1.45e-02  2.80e-06  6.71e-04  4.26e-07  9.80e-06  4.15e-01  
 21  +4.6388e-01  +4.7705e-01  1.32e-02  2.52e-06  6.04e-04  4.53e-07  8.86e-06  2.42e-01  
 22  +4.6252e-01  +4.7149e-01  8.97e-03  1.70e-06  4.08e-04  5.36e-07  6.06e-06  9.90e-01  
 23  +4.6205e-01  +4.6975e-01  7.69e-03  1.45e-06  3.48e-04  4.63e-07  5.20e-06  3.36e-01  
 24  +4.5949e-01  +4.6047e-01  9.81e-04  1.83e-07  4.39e-05  5.74e-08  6.81e-07  9.90e-01  
 25  +4.5911e-01  +4.5912e-01  1.47e-05  2.73e-09  6.54e-07  8.44e-10  1.02e-08  9.86e-01  
 26  +4.5910e-01  +4.5910e-01  1.47e-07  2.73e-11  6.54e-09  8.44e-12  1.02e-10  9.90e-01  
 27  +4.5910e-01  +4.5910e-01  1.47e-09  2.73e-13  6.54e-11  8.60e-14  1.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 129.4628ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:00 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:00 PM: Optimal value: 4.591e-01
(CVXPY) Sep 20 08:02:00 PM: Compilation took 2.606e-02 seconds
(CVXPY) Sep 20 08:02:00 PM: Solver (including time spent in interface) took 1.365e-01 seconds
Iteration: 8, Objective: 0.4591
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:00 PM: Your problem has 5099 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:00 PM: Finished problem compilation (took 3.072e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5099
  constraints   = 10099
  nnz(P)        = 0
  nnz(A)        = 80023
  cones (total) = 1
    : Nonnegative = 1,  numel = 10099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8052e-01  +1.0857e+03  1.09e+03  4.33e-01  7.71e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3157e-01  +1.2239e+02  1.22e+02  1.70e-01  3.87e+01  1.64e-02  2.76e-01  9.34e-01  
  3  +5.0874e-01  +3.1818e+01  3.13e+01  1.23e-01  2.79e+01  4.52e-05  2.57e-01  2.83e-01  
  4  +5.0105e-01  +3.1622e+00  2.66e+00  1.82e-02  4.22e+00  5.84e-06  1.66e-01  6.04e-01  
  5  +5.0012e-01  +9.9418e-01  4.94e-01  3.33e-03  7.90e-01  3.86e-05  9.71e-02  9.54e-01  
  6  +5.0003e-01  +7.0328e-01  2.03e-01  1.36e-03  3.25e-01  2.42e-05  3.61e-02  6.67e-01  
  7  +4.9994e-01  +6.8354e-01  1.84e-01  1.12e-03  2.66e-01  6.72e-05  8.24e-03  8.37e-01  
  8  +4.9683e-01  +6.6336e-01  1.67e-01  9.19e-05  2.21e-02  1.57e-03  2.85e-04  9.70e-01  
  9  +4.9315e-01  +6.3544e-01  1.42e-01  4.90e-05  1.18e-02  2.01e-03  1.51e-04  5.17e-01  
 10  +4.9225e-01  +6.2884e-01  1.37e-01  4.22e-05  1.01e-02  1.85e-03  1.30e-04  2.44e-01  
 11  +4.9193e-01  +6.2466e-01  1.33e-01  4.19e-05  1.01e-02  1.65e-03  1.29e-04  4.99e-02  
 12  +4.8991e-01  +6.1120e-01  1.21e-01  3.46e-05  8.31e-03  1.37e-03  1.07e-04  2.81e-01  
 13  +4.8913e-01  +6.0051e-01  1.11e-01  3.27e-05  7.85e-03  7.75e-04  1.02e-04  3.14e-01  
 14  +4.8270e-01  +5.6801e-01  8.53e-02  2.13e-05  5.10e-03  5.93e-04  6.75e-05  3.75e-01  
 15  +4.8008e-01  +5.4928e-01  6.92e-02  1.67e-05  4.00e-03  2.92e-05  5.34e-05  8.12e-01  
 16  +4.7476e-01  +5.2633e-01  5.16e-02  1.15e-05  2.76e-03  1.97e-05  3.77e-05  3.56e-01  
 17  +4.7269e-01  +5.1657e-01  4.39e-02  9.29e-06  2.23e-03  6.42e-06  3.06e-05  7.12e-01  
 18  +4.6693e-01  +4.9317e-01  2.62e-02  5.27e-06  1.27e-03  3.45e-06  1.78e-05  4.83e-01  
 19  +4.6466e-01  +4.8279e-01  1.81e-02  3.52e-06  8.45e-04  1.07e-06  1.20e-05  9.90e-01  
 20  +4.6037e-01  +4.6642e-01  6.06e-03  1.16e-06  2.78e-04  3.50e-07  4.08e-06  7.02e-01  
 21  +4.6035e-01  +4.6635e-01  6.00e-03  1.14e-06  2.74e-04  3.51e-07  4.00e-06  9.15e-02  
 22  +4.6000e-01  +4.6496e-01  4.96e-03  9.43e-07  2.26e-04  2.95e-07  3.35e-06  7.06e-01  
 23  +4.5974e-01  +4.6401e-01  4.27e-03  8.10e-07  1.94e-04  2.55e-07  2.89e-06  2.72e-01  
 24  +4.5936e-01  +4.6262e-01  3.26e-03  6.12e-07  1.47e-04  1.96e-07  2.19e-06  9.90e-01  
 25  +4.5848e-01  +4.5946e-01  9.78e-04  1.83e-07  4.39e-05  5.83e-08  6.68e-07  7.47e-01  
 26  +4.5815e-01  +4.5829e-01  1.35e-04  2.51e-08  6.03e-06  7.97e-09  9.29e-08  9.90e-01  
 27  +4.5810e-01  +4.5810e-01  1.56e-06  2.89e-10  6.94e-08  9.16e-11  1.07e-09  9.89e-01  
 28  +4.5810e-01  +4.5810e-01  1.56e-08  2.90e-12  6.95e-10  9.17e-13  1.07e-11  9.90e-01  
 29  +4.5810e-01  +4.5810e-01  1.73e-10  3.22e-14  7.72e-12  1.05e-14  1.23e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 145.8798ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:00 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:00 PM: Optimal value: 4.581e-01
(CVXPY) Sep 20 08:02:00 PM: Compilation took 3.072e-02 seconds
(CVXPY) Sep 20 08:02:00 PM: Solver (including time spent in interface) took 1.546e-01 seconds
Iteration: 9, Objective: 0.4581
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:00 PM: Your problem has 5109 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:00 PM: Finished problem compilation (took 2.983e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5109
  constraints   = 10109
  nnz(P)        = 0
  nnz(A)        = 80921
  cones (total) = 1
    : Nonnegative = 1,  numel = 10109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8044e-01  +1.0856e+03  1.09e+03  4.33e-01  7.71e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3152e-01  +1.2227e+02  1.22e+02  1.70e-01  3.86e+01  1.64e-02  2.76e-01  9.35e-01  
  3  +5.0873e-01  +3.1786e+01  3.13e+01  1.23e-01  2.78e+01  4.52e-05  2.56e-01  2.84e-01  
  4  +5.0105e-01  +3.1583e+00  2.66e+00  1.81e-02  4.21e+00  5.85e-06  1.65e-01  6.05e-01  
  5  +5.0015e-01  +1.0673e+00  5.67e-01  3.83e-03  9.07e-01  3.81e-05  1.01e-01  8.79e-01  
  6  +5.0004e-01  +7.0829e-01  2.08e-01  1.40e-03  3.32e-01  2.36e-05  3.51e-02  6.99e-01  
  7  +4.9993e-01  +7.1155e-01  2.12e-01  1.23e-03  2.94e-01  7.80e-05  7.78e-03  8.56e-01  
  8  +4.9684e-01  +6.8973e-01  1.93e-01  1.04e-04  2.50e-02  1.56e-03  3.20e-04  9.60e-01  
  9  +4.9420e-01  +6.6389e-01  1.70e-01  6.71e-05  1.61e-02  1.71e-03  2.07e-04  4.07e-01  
 10  +4.9185e-01  +6.4930e-01  1.57e-01  4.88e-05  1.17e-02  1.78e-03  1.50e-04  3.40e-01  
 11  +4.9174e-01  +6.3339e-01  1.42e-01  4.45e-05  1.07e-02  8.58e-04  1.37e-04  4.27e-01  
 12  +4.8944e-01  +6.1195e-01  1.23e-01  3.73e-05  8.97e-03  3.30e-04  1.16e-04  5.31e-01  
 13  +4.8364e-01  +5.8280e-01  9.92e-02  2.61e-05  6.27e-03  2.69e-04  8.24e-05  3.21e-01  
 14  +4.7572e-01  +5.4101e-01  6.53e-02  1.56e-05  3.75e-03  2.88e-06  5.09e-05  8.63e-01  
 15  +4.7142e-01  +5.2214e-01  5.07e-02  1.15e-05  2.77e-03  2.22e-06  3.82e-05  3.31e-01  
 16  +4.6820e-01  +5.0679e-01  3.86e-02  8.09e-06  1.94e-03  1.95e-06  2.69e-05  9.90e-01  
 17  +4.6496e-01  +4.9359e-01  2.86e-02  5.85e-06  1.40e-03  1.46e-06  1.98e-05  3.43e-01  
 18  +4.6189e-01  +4.8074e-01  1.88e-02  3.71e-06  8.91e-04  1.09e-06  1.27e-05  9.90e-01  
 19  +4.5970e-01  +4.7217e-01  1.25e-02  2.43e-06  5.84e-04  7.20e-07  8.41e-06  3.68e-01  
 20  +4.5770e-01  +4.6404e-01  6.35e-03  1.23e-06  2.96e-04  3.77e-07  4.31e-06  9.28e-01  
 21  +4.5740e-01  +4.6286e-01  5.46e-03  1.06e-06  2.54e-04  3.25e-07  3.72e-06  4.54e-01  
 22  +4.5620e-01  +4.5828e-01  2.08e-03  4.03e-07  9.68e-05  1.23e-07  1.43e-06  9.90e-01  
 23  +4.5564e-01  +4.5623e-01  5.90e-04  1.12e-07  2.69e-05  3.50e-08  4.07e-07  9.29e-01  
 24  +4.5543e-01  +4.5550e-01  7.43e-05  1.37e-08  3.29e-06  4.41e-09  5.11e-08  9.39e-01  
 25  +4.5540e-01  +4.5540e-01  9.06e-07  1.67e-10  4.00e-08  5.37e-11  6.24e-10  9.88e-01  
 26  +4.5540e-01  +4.5540e-01  9.06e-09  1.67e-12  4.00e-10  5.37e-13  6.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 129.155ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:00 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:00 PM: Optimal value: 4.554e-01
(CVXPY) Sep 20 08:02:00 PM: Compilation took 2.983e-02 seconds
(CVXPY) Sep 20 08:02:00 PM: Solver (including time spent in interface) took 1.385e-01 seconds
Iteration: 10, Objective: 0.4554
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:00 PM: Your problem has 5119 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:00 PM: Finished problem compilation (took 3.018e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5119
  constraints   = 10119
  nnz(P)        = 0
  nnz(A)        = 82208
  cones (total) = 1
    : Nonnegative = 1,  numel = 10119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8041e-01  +1.0856e+03  1.09e+03  4.33e-01  7.71e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3149e-01  +1.2221e+02  1.22e+02  1.70e-01  3.85e+01  1.64e-02  2.76e-01  9.35e-01  
  3  +5.0872e-01  +3.1765e+01  3.13e+01  1.23e-01  2.78e+01  4.53e-05  2.56e-01  2.85e-01  
  4  +5.0105e-01  +3.1551e+00  2.65e+00  1.81e-02  4.21e+00  5.86e-06  1.65e-01  6.07e-01  
  5  +5.0012e-01  +9.8842e-01  4.88e-01  3.29e-03  7.81e-01  3.96e-05  9.26e-02  9.90e-01  
  6  +5.0003e-01  +7.0416e-01  2.04e-01  1.37e-03  3.26e-01  2.80e-05  3.07e-02  7.21e-01  
  7  +4.9983e-01  +7.4775e-01  2.48e-01  1.18e-03  2.82e-01  1.36e-04  5.46e-03  9.37e-01  
  8  +4.9604e-01  +7.1870e-01  2.23e-01  1.04e-04  2.50e-02  1.91e-03  3.20e-04  9.42e-01  
  9  +4.9438e-01  +6.9600e-01  2.02e-01  8.26e-05  1.99e-02  1.80e-03  2.54e-04  2.53e-01  
 10  +4.9407e-01  +6.7016e-01  1.76e-01  6.23e-05  1.50e-02  1.09e-03  1.89e-04  5.33e-01  
 11  +4.9362e-01  +6.5405e-01  1.60e-01  5.29e-05  1.27e-02  6.96e-04  1.60e-04  4.12e-01  
 12  +4.9229e-01  +6.2795e-01  1.36e-01  4.38e-05  1.05e-02  1.10e-04  1.33e-04  7.31e-01  
 13  +4.8746e-01  +6.0282e-01  1.15e-01  3.21e-05  7.71e-03  8.21e-05  9.86e-05  3.92e-01  
 14  +4.8274e-01  +5.7881e-01  9.61e-02  2.48e-05  5.95e-03  3.62e-05  7.75e-05  5.30e-01  
 15  +4.7422e-01  +5.3988e-01  6.57e-02  1.49e-05  3.59e-03  1.14e-05  4.80e-05  6.86e-01  
 16  +4.6791e-01  +5.1222e-01  4.43e-02  9.37e-06  2.25e-03  5.60e-06  3.07e-05  5.67e-01  
 17  +4.6153e-01  +4.8527e-01  2.37e-02  4.70e-06  1.13e-03  1.97e-06  1.57e-05  7.68e-01  
 18  +4.5748e-01  +4.6904e-01  1.16e-02  2.22e-06  5.34e-04  8.97e-07  7.58e-06  6.22e-01  
 19  +4.5552e-01  +4.6128e-01  5.76e-03  1.08e-06  2.59e-04  3.78e-07  3.72e-06  8.98e-01  
 20  +4.5362e-01  +4.5431e-01  6.88e-04  1.27e-07  3.05e-05  4.36e-08  4.50e-07  8.98e-01  
 21  +4.5335e-01  +4.5337e-01  1.13e-05  2.08e-09  4.99e-07  6.90e-10  7.41e-09  9.90e-01  
 22  +4.5335e-01  +4.5335e-01  1.13e-07  2.08e-11  4.99e-09  6.90e-12  7.41e-11  9.90e-01  
 23  +4.5335e-01  +4.5335e-01  1.13e-09  2.08e-13  5.00e-11  7.10e-14  7.62e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 118.9815ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:01 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:01 PM: Optimal value: 4.534e-01
(CVXPY) Sep 20 08:02:01 PM: Compilation took 3.018e-02 seconds
(CVXPY) Sep 20 08:02:01 PM: Solver (including time spent in interface) took 1.273e-01 seconds
Iteration: 11, Objective: 0.4534
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:01 PM: Your problem has 5129 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:01 PM: Finished problem compilation (took 3.061e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5129
  constraints   = 10129
  nnz(P)        = 0
  nnz(A)        = 83543
  cones (total) = 1
    : Nonnegative = 1,  numel = 10129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8039e-01  +1.0856e+03  1.08e+03  4.34e-01  7.70e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3147e-01  +1.2217e+02  1.22e+02  1.70e-01  3.84e+01  1.64e-02  2.76e-01  9.35e-01  
  3  +5.0871e-01  +3.1754e+01  3.12e+01  1.23e-01  2.78e+01  4.53e-05  2.56e-01  2.86e-01  
  4  +5.0105e-01  +3.1529e+00  2.65e+00  1.81e-02  4.21e+00  5.86e-06  1.64e-01  6.08e-01  
  5  +5.0012e-01  +9.9328e-01  4.93e-01  3.33e-03  7.89e-01  3.97e-05  9.21e-02  9.90e-01  
  6  +5.0004e-01  +7.5341e-01  2.53e-01  1.70e-03  4.05e-01  3.08e-05  3.79e-02  6.33e-01  
  7  +4.9990e-01  +7.5948e-01  2.60e-01  1.40e-03  3.33e-01  1.02e-04  7.44e-03  9.41e-01  
  8  +4.9661e-01  +7.2965e-01  2.33e-01  1.21e-04  2.91e-02  1.66e-03  3.72e-04  9.51e-01  
  9  +4.9323e-01  +6.7757e-01  1.84e-01  7.10e-05  1.71e-02  1.49e-03  2.19e-04  5.16e-01  
 10  +4.9369e-01  +6.6932e-01  1.76e-01  5.93e-05  1.43e-02  1.04e-03  1.80e-04  4.49e-01  
 11  +4.9359e-01  +6.5512e-01  1.62e-01  5.23e-05  1.26e-02  5.78e-04  1.58e-04  4.42e-01  
 12  +4.9238e-01  +6.3873e-01  1.46e-01  4.92e-05  1.18e-02  2.45e-04  1.50e-04  4.30e-01  
 13  +4.8208e-01  +5.8320e-01  1.01e-01  2.40e-05  5.76e-03  1.91e-04  7.47e-05  5.84e-01  
 14  +4.7765e-01  +5.6239e-01  8.47e-02  1.93e-05  4.65e-03  1.26e-04  6.12e-05  3.19e-01  
 15  +4.7140e-01  +5.3377e-01  6.24e-02  1.35e-05  3.25e-03  2.46e-05  4.38e-05  7.24e-01  
 16  +4.6553e-01  +5.0883e-01  4.33e-02  8.91e-06  2.14e-03  1.39e-05  2.95e-05  4.48e-01  
 17  +4.5787e-01  +4.7756e-01  1.97e-02  3.81e-06  9.15e-04  5.19e-06  1.30e-05  6.34e-01  
 18  +4.5775e-01  +4.7699e-01  1.92e-02  3.71e-06  8.90e-04  4.83e-06  1.27e-05  9.14e-02  
 19  +4.5346e-01  +4.5987e-01  6.41e-03  1.18e-06  2.83e-04  4.48e-07  4.12e-06  9.90e-01  
 20  +4.5115e-01  +4.5154e-01  3.87e-04  7.10e-08  1.70e-05  2.60e-08  2.52e-07  9.49e-01  
 21  +4.5100e-01  +4.5101e-01  4.20e-06  7.70e-10  1.85e-07  2.81e-10  2.73e-09  9.89e-01  
 22  +4.5100e-01  +4.5100e-01  4.22e-08  7.72e-12  1.85e-09  2.82e-12  2.74e-11  9.90e-01  
 23  +4.5100e-01  +4.5100e-01  4.25e-10  7.78e-14  1.87e-11  2.85e-14  2.77e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 123.3066ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:01 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:01 PM: Optimal value: 4.510e-01
(CVXPY) Sep 20 08:02:01 PM: Compilation took 3.061e-02 seconds
(CVXPY) Sep 20 08:02:01 PM: Solver (including time spent in interface) took 1.315e-01 seconds
Iteration: 12, Objective: 0.4510
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:01 PM: Your problem has 5139 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:01 PM: Finished problem compilation (took 3.304e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5139
  constraints   = 10139
  nnz(P)        = 0
  nnz(A)        = 84329
  cones (total) = 1
    : Nonnegative = 1,  numel = 10139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8033e-01  +1.0856e+03  1.09e+03  4.34e-01  7.70e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3143e-01  +1.2209e+02  1.22e+02  1.70e-01  3.84e+01  1.64e-02  2.75e-01  9.36e-01  
  3  +5.0870e-01  +3.1733e+01  3.12e+01  1.23e-01  2.77e+01  4.53e-05  2.56e-01  2.87e-01  
  4  +5.0105e-01  +3.1539e+00  2.65e+00  1.81e-02  4.21e+00  5.87e-06  1.64e-01  6.08e-01  
  5  +5.0012e-01  +1.0011e+00  5.01e-01  3.38e-03  8.02e-01  4.00e-05  9.15e-02  9.90e-01  
  6  +5.0004e-01  +7.5561e-01  2.56e-01  1.72e-03  4.08e-01  3.18e-05  3.63e-02  6.53e-01  
  7  +4.9983e-01  +7.5786e-01  2.58e-01  1.23e-03  2.93e-01  1.38e-04  5.63e-03  9.53e-01  
  8  +4.9613e-01  +7.3059e-01  2.34e-01  1.14e-04  2.74e-02  1.86e-03  3.49e-04  9.39e-01  
  9  +4.9424e-01  +6.9369e-01  1.99e-01  8.47e-05  2.04e-02  1.45e-03  2.60e-04  3.83e-01  
 10  +4.9281e-01  +6.7256e-01  1.80e-01  6.08e-05  1.46e-02  1.16e-03  1.85e-04  4.89e-01  
 11  +4.9254e-01  +6.5360e-01  1.61e-01  5.19e-05  1.25e-02  5.33e-04  1.57e-04  5.24e-01  
 12  +4.9138e-01  +6.4428e-01  1.53e-01  5.10e-05  1.23e-02  4.15e-04  1.56e-04  1.18e-01  
 13  +4.8970e-01  +6.3390e-01  1.44e-01  4.56e-05  1.10e-02  3.64e-04  1.40e-04  1.78e-01  
 14  +4.8696e-01  +6.1177e-01  1.25e-01  3.67e-05  8.83e-03  4.71e-05  1.14e-04  7.66e-01  
 15  +4.8026e-01  +5.8104e-01  1.01e-01  2.54e-05  6.09e-03  3.93e-05  8.02e-05  3.20e-01  
 16  +4.7809e-01  +5.7103e-01  9.29e-02  2.28e-05  5.47e-03  2.95e-05  7.27e-05  2.44e-01  
 17  +4.6724e-01  +5.2335e-01  5.61e-02  1.21e-05  2.90e-03  9.49e-06  4.00e-05  6.87e-01  
 18  +4.6107e-01  +4.9833e-01  3.73e-02  7.53e-06  1.81e-03  5.70e-06  2.56e-05  4.32e-01  
 19  +4.5888e-01  +4.8964e-01  3.08e-02  6.08e-06  1.46e-03  4.46e-06  2.08e-05  2.51e-01  
 20  +4.5716e-01  +4.8227e-01  2.51e-02  4.83e-06  1.16e-03  2.86e-06  1.67e-05  4.91e-01  
 21  +4.5137e-01  +4.6004e-01  8.67e-03  1.61e-06  3.85e-04  5.12e-07  5.73e-06  9.90e-01  
 22  +4.4835e-01  +4.4922e-01  8.76e-04  1.60e-07  3.85e-05  5.03e-08  5.87e-07  9.12e-01  
 23  +4.4801e-01  +4.4802e-01  1.47e-05  2.68e-09  6.43e-07  8.46e-10  9.88e-09  9.90e-01  
 24  +4.4800e-01  +4.4800e-01  1.48e-07  2.71e-11  6.50e-09  8.55e-12  9.98e-11  9.90e-01  
 25  +4.4800e-01  +4.4800e-01  1.49e-09  2.73e-13  6.56e-11  8.69e-14  1.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 135.7037ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:01 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:01 PM: Optimal value: 4.480e-01
(CVXPY) Sep 20 08:02:01 PM: Compilation took 3.304e-02 seconds
(CVXPY) Sep 20 08:02:01 PM: Solver (including time spent in interface) took 1.444e-01 seconds
Iteration: 13, Objective: 0.4480
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:01 PM: Your problem has 5149 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:01 PM: Finished problem compilation (took 3.505e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5149
  constraints   = 10149
  nnz(P)        = 0
  nnz(A)        = 85350
  cones (total) = 1
    : Nonnegative = 1,  numel = 10149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8025e-01  +1.0857e+03  1.09e+03  4.34e-01  7.70e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3139e-01  +1.2204e+02  1.22e+02  1.70e-01  3.83e+01  1.64e-02  2.75e-01  9.37e-01  
  3  +5.0870e-01  +3.1722e+01  3.12e+01  1.23e-01  2.77e+01  4.54e-05  2.55e-01  2.88e-01  
  4  +5.0105e-01  +3.1549e+00  2.65e+00  1.81e-02  4.21e+00  5.88e-06  1.64e-01  6.09e-01  
  5  +5.0012e-01  +1.0079e+00  5.08e-01  3.43e-03  8.13e-01  4.03e-05  9.09e-02  9.90e-01  
  6  +5.0004e-01  +7.4777e-01  2.48e-01  1.66e-03  3.95e-01  3.22e-05  3.37e-02  6.78e-01  
  7  +4.9976e-01  +7.8184e-01  2.82e-01  1.16e-03  2.77e-01  1.75e-04  4.72e-03  9.83e-01  
  8  +4.9582e-01  +7.5063e-01  2.55e-01  1.15e-04  2.76e-02  1.98e-03  3.49e-04  9.26e-01  
  9  +4.9223e-01  +6.8543e-01  1.93e-01  7.17e-05  1.72e-02  1.36e-03  2.20e-04  5.07e-01  
 10  +4.9253e-01  +6.6981e-01  1.77e-01  5.82e-05  1.40e-02  8.27e-04  1.76e-04  5.10e-01  
 11  +4.9128e-01  +6.5795e-01  1.67e-01  5.08e-05  1.22e-02  6.84e-04  1.54e-04  2.52e-01  
 12  +4.9030e-01  +6.4586e-01  1.56e-01  4.97e-05  1.20e-02  4.70e-04  1.51e-04  1.82e-01  
 13  +4.7969e-01  +5.8697e-01  1.07e-01  2.56e-05  6.14e-03  3.34e-04  8.00e-05  5.57e-01  
 14  +4.7694e-01  +5.7361e-01  9.67e-02  2.23e-05  5.36e-03  2.55e-04  7.06e-05  2.30e-01  
 15  +4.7169e-01  +5.4799e-01  7.63e-02  1.68e-05  4.03e-03  1.15e-04  5.44e-05  4.98e-01  
 16  +4.6826e-01  +5.3001e-01  6.18e-02  1.30e-05  3.13e-03  9.09e-06  4.28e-05  8.55e-01  
 17  +4.5648e-01  +4.8313e-01  2.67e-02  5.18e-06  1.24e-03  3.34e-06  1.80e-05  6.25e-01  
 18  +4.5512e-01  +4.7757e-01  2.24e-02  4.30e-06  1.03e-03  2.40e-06  1.50e-05  3.86e-01  
 19  +4.5074e-01  +4.6070e-01  9.95e-03  1.85e-06  4.43e-04  7.48e-07  6.61e-06  8.66e-01  
 20  +4.4711e-01  +4.4762e-01  5.14e-04  9.41e-08  2.26e-05  3.20e-08  3.48e-07  9.79e-01  
 21  +4.4690e-01  +4.4691e-01  5.33e-06  9.74e-10  2.34e-07  3.31e-10  3.61e-09  9.90e-01  
 22  +4.4690e-01  +4.4690e-01  5.33e-08  9.74e-12  2.34e-09  3.31e-12  3.61e-11  9.90e-01  
 23  +4.4690e-01  +4.4690e-01  5.33e-10  9.74e-14  2.34e-11  3.34e-14  3.64e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 125.1792ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:01 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:01 PM: Optimal value: 4.469e-01
(CVXPY) Sep 20 08:02:01 PM: Compilation took 3.505e-02 seconds
(CVXPY) Sep 20 08:02:01 PM: Solver (including time spent in interface) took 1.350e-01 seconds
Iteration: 14, Objective: 0.4469
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:02 PM: Your problem has 5159 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:02 PM: Finished problem compilation (took 3.201e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5159
  constraints   = 10159
  nnz(P)        = 0
  nnz(A)        = 85941
  cones (total) = 1
    : Nonnegative = 1,  numel = 10159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8020e-01  +1.0856e+03  1.09e+03  4.34e-01  7.69e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3136e-01  +1.2196e+02  1.21e+02  1.70e-01  3.82e+01  1.64e-02  2.75e-01  9.37e-01  
  3  +5.0869e-01  +3.1701e+01  3.12e+01  1.22e-01  2.76e+01  4.54e-05  2.55e-01  2.89e-01  
  4  +5.0105e-01  +3.1534e+00  2.65e+00  1.81e-02  4.21e+00  5.89e-06  1.63e-01  6.10e-01  
  5  +5.0013e-01  +1.0147e+00  5.15e-01  3.48e-03  8.24e-01  4.04e-05  9.05e-02  9.88e-01  
  6  +5.0004e-01  +7.6668e-01  2.67e-01  1.79e-03  4.25e-01  3.28e-05  3.51e-02  6.89e-01  
  7  +4.9980e-01  +7.5140e-01  2.52e-01  1.14e-03  2.73e-01  1.49e-04  5.00e-03  9.38e-01  
  8  +4.9586e-01  +7.2642e-01  2.31e-01  1.06e-04  2.55e-02  1.98e-03  3.22e-04  9.36e-01  
  9  +4.9385e-01  +6.9473e-01  2.01e-01  7.98e-05  1.92e-02  1.63e-03  2.42e-04  3.69e-01  
 10  +4.9222e-01  +6.7225e-01  1.80e-01  6.15e-05  1.48e-02  1.24e-03  1.86e-04  4.19e-01  
 11  +4.9046e-01  +6.5931e-01  1.69e-01  5.05e-05  1.21e-02  1.12e-03  1.53e-04  2.77e-01  
 12  +4.8948e-01  +6.4884e-01  1.59e-01  4.98e-05  1.20e-02  8.76e-04  1.52e-04  1.00e-01  
 13  +4.8583e-01  +6.2657e-01  1.41e-01  4.00e-05  9.61e-03  7.19e-04  1.23e-04  2.68e-01  
 14  +4.7887e-01  +5.8403e-01  1.05e-01  2.63e-05  6.31e-03  2.49e-04  8.25e-05  6.38e-01  
 15  +4.6954e-01  +5.3879e-01  6.92e-02  1.53e-05  3.68e-03  4.82e-05  4.97e-05  7.50e-01  
 16  +4.6875e-01  +5.3476e-01  6.60e-02  1.45e-05  3.48e-03  3.45e-05  4.72e-05  2.73e-01  
 17  +4.5959e-01  +4.9640e-01  3.68e-02  7.41e-06  1.78e-03  1.47e-05  2.49e-05  5.90e-01  
 18  +4.5777e-01  +4.8910e-01  3.13e-02  6.18e-06  1.48e-03  1.18e-05  2.09e-05  2.10e-01  
 19  +4.5645e-01  +4.8317e-01  2.67e-02  5.14e-06  1.23e-03  6.74e-06  1.75e-05  4.97e-01  
 20  +4.5198e-01  +4.6585e-01  1.39e-02  2.58e-06  6.18e-04  2.13e-06  8.96e-06  7.48e-01  
 21  +4.5057e-01  +4.6065e-01  1.01e-02  1.85e-06  4.43e-04  1.43e-06  6.47e-06  3.73e-01  
 22  +4.4819e-01  +4.5180e-01  3.61e-03  6.51e-07  1.56e-04  2.39e-07  2.32e-06  9.90e-01  
 23  +4.4676e-01  +4.4689e-01  1.36e-04  2.43e-08  5.84e-06  8.43e-09  8.82e-08  9.90e-01  
 24  +4.4670e-01  +4.4670e-01  1.37e-06  2.45e-10  5.87e-08  8.48e-11  8.88e-10  9.90e-01  
 25  +4.4670e-01  +4.4670e-01  1.37e-08  2.45e-12  5.87e-10  8.48e-13  8.88e-12  9.90e-01  
 26  +4.4670e-01  +4.4670e-01  1.37e-10  2.45e-14  5.87e-12  8.62e-15  9.02e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 144.1109ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:02 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:02 PM: Optimal value: 4.467e-01
(CVXPY) Sep 20 08:02:02 PM: Compilation took 3.201e-02 seconds
(CVXPY) Sep 20 08:02:02 PM: Solver (including time spent in interface) took 1.530e-01 seconds
Iteration: 15, Objective: 0.4467
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:02 PM: Your problem has 5169 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:02 PM: Finished problem compilation (took 3.339e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5169
  constraints   = 10169
  nnz(P)        = 0
  nnz(A)        = 86894
  cones (total) = 1
    : Nonnegative = 1,  numel = 10169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8014e-01  +1.0856e+03  1.09e+03  4.34e-01  7.69e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3133e-01  +1.2191e+02  1.21e+02  1.70e-01  3.81e+01  1.64e-02  2.75e-01  9.37e-01  
  3  +5.0868e-01  +3.1687e+01  3.12e+01  1.22e-01  2.76e+01  4.55e-05  2.55e-01  2.90e-01  
  4  +5.0105e-01  +3.1532e+00  2.65e+00  1.82e-02  4.21e+00  5.90e-06  1.63e-01  6.11e-01  
  5  +5.0013e-01  +1.0216e+00  5.22e-01  3.53e-03  8.35e-01  4.07e-05  8.97e-02  9.90e-01  
  6  +5.0004e-01  +7.6915e-01  2.69e-01  1.81e-03  4.29e-01  3.43e-05  3.32e-02  7.14e-01  
  7  +4.9970e-01  +7.6509e-01  2.65e-01  1.01e-03  2.42e-01  2.01e-04  3.95e-03  9.54e-01  
  8  +4.9530e-01  +7.3757e-01  2.42e-01  1.02e-04  2.46e-02  2.20e-03  3.10e-04  9.22e-01  
  9  +4.9336e-01  +7.0819e-01  2.15e-01  8.23e-05  1.98e-02  1.81e-03  2.50e-04  2.89e-01  
 10  +4.9146e-01  +6.7409e-01  1.83e-01  6.24e-05  1.50e-02  1.06e-03  1.89e-04  4.95e-01  
 11  +4.8975e-01  +6.6004e-01  1.70e-01  5.08e-05  1.22e-02  8.88e-04  1.54e-04  3.31e-01  
 12  +4.8886e-01  +6.5187e-01  1.63e-01  5.02e-05  1.21e-02  7.43e-04  1.53e-04  7.37e-02  
 13  +4.8647e-01  +6.3309e-01  1.47e-01  4.37e-05  1.05e-02  4.52e-04  1.34e-04  3.53e-01  
 14  +4.7968e-01  +5.9779e-01  1.18e-01  3.03e-05  7.27e-03  3.57e-04  9.48e-05  3.45e-01  
 15  +4.7608e-01  +5.7923e-01  1.03e-01  2.50e-05  6.01e-03  2.47e-04  7.93e-05  3.10e-01  
 16  +4.6686e-01  +5.3221e-01  6.54e-02  1.43e-05  3.44e-03  2.65e-06  4.68e-05  8.88e-01  
 17  +4.5920e-01  +5.0043e-01  4.12e-02  8.46e-06  2.03e-03  1.70e-06  2.84e-05  4.66e-01  
 18  +4.5649e-01  +4.8909e-01  3.26e-02  6.49e-06  1.56e-03  1.43e-06  2.20e-05  3.55e-01  
 19  +4.5503e-01  +4.8230e-01  2.73e-02  5.29e-06  1.27e-03  1.40e-06  1.79e-05  5.79e-01  
 20  +4.5017e-01  +4.6305e-01  1.29e-02  2.42e-06  5.79e-04  7.83e-07  8.36e-06  9.90e-01  
 21  +4.4692e-01  +4.5107e-01  4.14e-03  7.71e-07  1.85e-04  2.51e-07  2.72e-06  7.13e-01  
 22  +4.4554e-01  +4.4603e-01  4.85e-04  8.98e-08  2.15e-05  2.95e-08  3.20e-07  9.90e-01  
 23  +4.4535e-01  +4.4536e-01  5.53e-06  1.02e-09  2.45e-07  3.36e-10  3.66e-09  9.89e-01  
 24  +4.4535e-01  +4.4535e-01  5.53e-08  1.02e-11  2.45e-09  3.36e-12  3.67e-11  9.90e-01  
 25  +4.4535e-01  +4.4535e-01  5.53e-10  1.02e-13  2.45e-11  3.38e-14  3.69e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 141.6022ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:02 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:02 PM: Optimal value: 4.454e-01
(CVXPY) Sep 20 08:02:02 PM: Compilation took 3.339e-02 seconds
(CVXPY) Sep 20 08:02:02 PM: Solver (including time spent in interface) took 1.500e-01 seconds
Iteration: 16, Objective: 0.4454
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:02 PM: Your problem has 5179 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:02 PM: Finished problem compilation (took 3.141e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5179
  constraints   = 10179
  nnz(P)        = 0
  nnz(A)        = 87996
  cones (total) = 1
    : Nonnegative = 1,  numel = 10179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8010e-01  +1.0857e+03  1.09e+03  4.34e-01  7.68e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3129e-01  +1.2184e+02  1.21e+02  1.70e-01  3.81e+01  1.64e-02  2.75e-01  9.38e-01  
  3  +5.0868e-01  +3.1665e+01  3.12e+01  1.22e-01  2.75e+01  4.55e-05  2.55e-01  2.91e-01  
  4  +5.0105e-01  +3.1532e+00  2.65e+00  1.82e-02  4.21e+00  5.90e-06  1.63e-01  6.12e-01  
  5  +5.0013e-01  +1.0289e+00  5.29e-01  3.58e-03  8.47e-01  4.11e-05  8.92e-02  9.90e-01  
  6  +5.0004e-01  +7.8517e-01  2.85e-01  1.91e-03  4.54e-01  3.63e-05  3.39e-02  6.94e-01  
  7  +4.9967e-01  +7.7023e-01  2.71e-01  9.84e-04  2.36e-01  2.17e-04  3.76e-03  9.63e-01  
  8  +4.9506e-01  +7.4202e-01  2.47e-01  1.01e-04  2.43e-02  2.29e-03  3.06e-04  9.19e-01  
  9  +4.9216e-01  +7.0815e-01  2.16e-01  7.61e-05  1.83e-02  2.02e-03  2.31e-04  3.18e-01  
 10  +4.8959e-01  +6.8151e-01  1.92e-01  5.71e-05  1.37e-02  1.57e-03  1.74e-04  4.14e-01  
 11  +4.8903e-01  +6.7457e-01  1.86e-01  5.68e-05  1.36e-02  1.40e-03  1.73e-04  4.03e-02  
 12  +4.8697e-01  +6.5637e-01  1.69e-01  4.87e-05  1.17e-02  1.03e-03  1.50e-04  2.95e-01  
 13  +4.8243e-01  +6.1516e-01  1.33e-01  3.68e-05  8.84e-03  1.80e-04  1.15e-04  6.88e-01  
 14  +4.7506e-01  +5.7841e-01  1.03e-01  2.56e-05  6.14e-03  1.25e-04  8.16e-05  3.62e-01  
 15  +4.6902e-01  +5.4684e-01  7.78e-02  1.78e-05  4.27e-03  8.65e-06  5.78e-05  8.45e-01  
 16  +4.5961e-01  +5.0659e-01  4.70e-02  9.94e-06  2.38e-03  4.84e-06  3.34e-05  4.60e-01  
 17  +4.5597e-01  +4.9052e-01  3.46e-02  6.97e-06  1.67e-03  2.74e-06  2.36e-05  6.37e-01  
 18  +4.5424e-01  +4.8291e-01  2.87e-02  5.63e-06  1.35e-03  1.92e-06  1.91e-05  6.72e-01  
 19  +4.5075e-01  +4.6922e-01  1.85e-02  3.56e-06  8.52e-04  1.19e-06  1.23e-05  6.15e-01  
 20  +4.4548e-01  +4.4911e-01  3.62e-03  6.87e-07  1.64e-04  2.24e-07  2.43e-06  8.80e-01  
 21  +4.4418e-01  +4.4428e-01  9.18e-05  1.74e-08  4.15e-06  5.53e-09  6.20e-08  9.83e-01  
 22  +4.4415e-01  +4.4415e-01  9.19e-07  1.74e-10  4.16e-08  5.53e-11  6.21e-10  9.90e-01  
 23  +4.4415e-01  +4.4415e-01  9.19e-09  1.74e-12  4.16e-10  5.53e-13  6.21e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 134.2852ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:02 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:02 PM: Optimal value: 4.442e-01
(CVXPY) Sep 20 08:02:02 PM: Compilation took 3.141e-02 seconds
(CVXPY) Sep 20 08:02:02 PM: Solver (including time spent in interface) took 1.424e-01 seconds
Iteration: 17, Objective: 0.4442
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:02 PM: Your problem has 5189 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:03 PM: Finished problem compilation (took 3.379e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5189
  constraints   = 10189
  nnz(P)        = 0
  nnz(A)        = 89305
  cones (total) = 1
    : Nonnegative = 1,  numel = 10189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8008e-01  +1.0857e+03  1.09e+03  4.35e-01  7.68e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3126e-01  +1.2178e+02  1.21e+02  1.70e-01  3.80e+01  1.64e-02  2.75e-01  9.38e-01  
  3  +5.0867e-01  +3.1645e+01  3.11e+01  1.22e-01  2.75e+01  4.55e-05  2.54e-01  2.92e-01  
  4  +5.0105e-01  +3.1520e+00  2.65e+00  1.82e-02  4.21e+00  5.91e-06  1.62e-01  6.12e-01  
  5  +5.0013e-01  +1.0351e+00  5.35e-01  3.62e-03  8.58e-01  4.13e-05  8.87e-02  9.90e-01  
  6  +5.0005e-01  +8.0161e-01  3.02e-01  2.02e-03  4.81e-01  3.77e-05  3.50e-02  6.75e-01  
  7  +4.9963e-01  +7.7507e-01  2.75e-01  9.27e-04  2.22e-01  2.38e-04  3.42e-03  9.85e-01  
  8  +4.9493e-01  +7.4618e-01  2.51e-01  9.97e-05  2.40e-02  2.33e-03  3.01e-04  9.12e-01  
  9  +4.9293e-01  +7.2310e-01  2.30e-01  8.14e-05  1.96e-02  2.12e-03  2.45e-04  2.56e-01  
 10  +4.9112e-01  +6.9522e-01  2.04e-01  6.37e-05  1.53e-02  1.46e-03  1.92e-04  4.32e-01  
 11  +4.9006e-01  +6.8458e-01  1.95e-01  5.76e-05  1.39e-02  1.24e-03  1.74e-04  2.00e-01  
 12  +4.8844e-01  +6.6346e-01  1.75e-01  5.51e-05  1.33e-02  7.48e-04  1.68e-04  2.29e-01  
 13  +4.8235e-01  +6.2610e-01  1.44e-01  3.99e-05  9.59e-03  5.57e-04  1.24e-04  3.48e-01  
 14  +4.7628e-01  +5.8727e-01  1.11e-01  2.83e-05  6.80e-03  1.46e-04  8.99e-05  6.63e-01  
 15  +4.7409e-01  +5.7558e-01  1.01e-01  2.51e-05  6.02e-03  8.29e-05  8.01e-05  4.00e-01  
 16  +4.6210e-01  +5.2025e-01  5.82e-02  1.27e-05  3.04e-03  2.95e-05  4.22e-05  6.39e-01  
 17  +4.5570e-01  +4.9235e-01  3.66e-02  7.53e-06  1.80e-03  1.15e-05  2.56e-05  6.29e-01  
 18  +4.5392e-01  +4.8505e-01  3.11e-02  6.30e-06  1.51e-03  9.50e-06  2.16e-05  1.89e-01  
 19  +4.5223e-01  +4.7755e-01  2.53e-02  5.02e-06  1.20e-03  5.60e-06  1.73e-05  4.74e-01  
 20  +4.4723e-01  +4.5729e-01  1.01e-02  1.94e-06  4.64e-04  6.19e-07  6.86e-06  9.90e-01  
 21  +4.4582e-01  +4.5203e-01  6.21e-03  1.19e-06  2.84e-04  3.81e-07  4.26e-06  4.01e-01  
 22  +4.4512e-01  +4.4925e-01  4.12e-03  7.83e-07  1.87e-04  2.44e-07  2.84e-06  9.90e-01  
 23  +4.4411e-01  +4.4566e-01  1.55e-03  2.91e-07  6.98e-05  9.11e-08  1.08e-06  6.27e-01  
 24  +4.4354e-01  +4.4365e-01  1.07e-04  2.00e-08  4.78e-06  6.06e-09  7.53e-08  9.90e-01  
 25  +4.4350e-01  +4.4350e-01  1.10e-06  2.04e-10  4.89e-08  6.17e-11  7.73e-10  9.90e-01  
 26  +4.4350e-01  +4.4350e-01  1.10e-08  2.04e-12  4.89e-10  6.17e-13  7.73e-12  9.90e-01  
 27  +4.4350e-01  +4.4350e-01  1.10e-10  2.04e-14  4.90e-12  6.86e-15  8.55e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 157.393ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:03 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:03 PM: Optimal value: 4.435e-01
(CVXPY) Sep 20 08:02:03 PM: Compilation took 3.379e-02 seconds
(CVXPY) Sep 20 08:02:03 PM: Solver (including time spent in interface) took 1.670e-01 seconds
Iteration: 18, Objective: 0.4435
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:03 PM: Your problem has 5199 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:03 PM: Finished problem compilation (took 3.762e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5199
  constraints   = 10199
  nnz(P)        = 0
  nnz(A)        = 90120
  cones (total) = 1
    : Nonnegative = 1,  numel = 10199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8004e-01  +1.0857e+03  1.09e+03  4.35e-01  7.68e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3123e-01  +1.2170e+02  1.21e+02  1.70e-01  3.79e+01  1.64e-02  2.74e-01  9.39e-01  
  3  +5.0866e-01  +3.1617e+01  3.11e+01  1.22e-01  2.75e+01  4.55e-05  2.54e-01  2.93e-01  
  4  +5.0105e-01  +3.1492e+00  2.65e+00  1.81e-02  4.20e+00  5.92e-06  1.62e-01  6.14e-01  
  5  +5.0014e-01  +1.0452e+00  5.45e-01  3.69e-03  8.74e-01  4.16e-05  8.79e-02  9.90e-01  
  6  +5.0005e-01  +8.1877e-01  3.19e-01  2.14e-03  5.08e-01  4.02e-05  3.48e-02  6.67e-01  
  7  +4.9970e-01  +7.9233e-01  2.93e-01  1.13e-03  2.69e-01  2.07e-04  4.38e-03  9.40e-01  
  8  +4.9469e-01  +7.6488e-01  2.70e-01  1.05e-04  2.53e-02  2.50e-03  3.16e-04  9.28e-01  
  9  +4.9281e-01  +7.2317e-01  2.30e-01  8.01e-05  1.93e-02  1.60e-03  2.41e-04  4.66e-01  
 10  +4.9119e-01  +7.0440e-01  2.13e-01  6.92e-05  1.67e-02  1.28e-03  2.09e-04  2.70e-01  
 11  +4.8861e-01  +6.6559e-01  1.77e-01  5.91e-05  1.42e-02  3.12e-04  1.80e-04  5.86e-01  
 12  +4.8203e-01  +6.2936e-01  1.47e-01  4.20e-05  1.01e-02  2.64e-04  1.31e-04  3.15e-01  
 13  +4.7604e-01  +5.9644e-01  1.20e-01  3.20e-05  7.69e-03  1.38e-04  1.02e-04  4.47e-01  
 14  +4.7048e-01  +5.6913e-01  9.86e-02  2.46e-05  5.89e-03  9.48e-05  7.98e-05  3.24e-01  
 15  +4.6660e-01  +5.4758e-01  8.10e-02  1.89e-05  4.53e-03  1.00e-06  6.18e-05  9.24e-01  
 16  +4.5661e-01  +5.0372e-01  4.71e-02  1.02e-05  2.43e-03  9.23e-07  3.46e-05  5.49e-01  
 17  +4.5185e-01  +4.8367e-01  3.18e-02  6.59e-06  1.58e-03  7.80e-07  2.29e-05  4.33e-01  
 18  +4.5005e-01  +4.7586e-01  2.58e-02  5.21e-06  1.25e-03  9.38e-07  1.82e-05  5.02e-01  
 19  +4.4789e-01  +4.6703e-01  1.91e-02  3.78e-06  9.04e-04  8.50e-07  1.33e-05  5.49e-01  
 20  +4.4456e-01  +4.5375e-01  9.20e-03  1.76e-06  4.20e-04  5.16e-07  6.34e-06  9.18e-01  
 21  +4.4440e-01  +4.5305e-01  8.65e-03  1.67e-06  4.00e-04  4.79e-07  6.11e-06  3.34e-01  
 22  +4.4416e-01  +4.5211e-01  7.95e-03  1.53e-06  3.66e-04  4.46e-07  5.60e-06  2.85e-01  
 23  +4.4293e-01  +4.4761e-01  4.67e-03  8.90e-07  2.13e-04  2.66e-07  3.28e-06  5.10e-01  
 24  +4.4203e-01  +4.4444e-01  2.41e-03  4.51e-07  1.08e-04  1.36e-07  1.68e-06  6.71e-01  
 25  +4.4113e-01  +4.4119e-01  6.38e-05  1.18e-08  2.83e-06  3.59e-09  4.47e-08  9.83e-01  
 26  +4.4110e-01  +4.4110e-01  6.39e-07  1.19e-10  2.83e-08  3.59e-11  4.48e-10  9.90e-01  
 27  +4.4110e-01  +4.4110e-01  6.39e-09  1.19e-12  2.83e-10  3.59e-13  4.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 162.854ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:03 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:03 PM: Optimal value: 4.411e-01
(CVXPY) Sep 20 08:02:03 PM: Compilation took 3.762e-02 seconds
(CVXPY) Sep 20 08:02:03 PM: Solver (including time spent in interface) took 1.731e-01 seconds
Iteration: 19, Objective: 0.4411
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:03 PM: Your problem has 5209 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:03 PM: Finished problem compilation (took 3.997e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5209
  constraints   = 10209
  nnz(P)        = 0
  nnz(A)        = 90817
  cones (total) = 1
    : Nonnegative = 1,  numel = 10209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7997e-01  +1.0858e+03  1.09e+03  4.35e-01  7.67e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3120e-01  +1.2167e+02  1.21e+02  1.69e-01  3.79e+01  1.64e-02  2.74e-01  9.39e-01  
  3  +5.0865e-01  +3.1612e+01  3.11e+01  1.22e-01  2.74e+01  4.56e-05  2.54e-01  2.94e-01  
  4  +5.0105e-01  +3.1514e+00  2.65e+00  1.82e-02  4.21e+00  5.92e-06  1.62e-01  6.14e-01  
  5  +5.0014e-01  +1.0518e+00  5.52e-01  3.74e-03  8.85e-01  4.20e-05  8.76e-02  9.90e-01  
  6  +5.0005e-01  +8.2637e-01  3.26e-01  2.19e-03  5.19e-01  4.17e-05  3.44e-02  6.69e-01  
  7  +4.9968e-01  +8.1110e-01  3.11e-01  1.14e-03  2.74e-01  2.21e-04  4.35e-03  9.49e-01  
  8  +4.9463e-01  +7.8159e-01  2.87e-01  1.11e-04  2.66e-02  2.51e-03  3.32e-04  9.24e-01  
  9  +4.9212e-01  +7.5204e-01  2.60e-01  8.76e-05  2.11e-02  2.32e-03  2.64e-04  2.66e-01  
 10  +4.8974e-01  +7.2120e-01  2.31e-01  7.00e-05  1.68e-02  1.78e-03  2.12e-04  3.44e-01  
 11  +4.8808e-01  +6.9478e-01  2.07e-01  6.42e-05  1.54e-02  1.11e-03  1.96e-04  2.61e-01  
 12  +4.7950e-01  +6.3173e-01  1.52e-01  4.15e-05  9.96e-03  5.75e-04  1.31e-04  5.08e-01  
 13  +4.7411e-01  +5.9362e-01  1.20e-01  3.14e-05  7.53e-03  1.28e-04  1.01e-04  6.56e-01  
 14  +4.6848e-01  +5.6602e-01  9.75e-02  2.41e-05  5.77e-03  9.45e-05  7.92e-05  2.74e-01  
 15  +4.6416e-01  +5.4148e-01  7.73e-02  1.78e-05  4.27e-03  1.00e-06  5.93e-05  9.34e-01  
 16  +4.5710e-01  +5.1043e-01  5.33e-02  1.17e-05  2.80e-03  8.47e-07  4.01e-05  3.80e-01  
 17  +4.5118e-01  +4.8434e-01  3.32e-02  6.94e-06  1.66e-03  9.27e-07  2.43e-05  5.92e-01  
 18  +4.4795e-01  +4.6996e-01  2.20e-02  4.44e-06  1.06e-03  1.06e-06  1.57e-05  8.35e-01  
 19  +4.4341e-01  +4.5177e-01  8.37e-03  1.64e-06  3.91e-04  4.24e-07  5.97e-06  7.05e-01  
 20  +4.4335e-01  +4.5157e-01  8.23e-03  1.60e-06  3.82e-04  4.21e-07  5.82e-06  6.21e-02  
 21  +4.4264e-01  +4.4869e-01  6.05e-03  1.17e-06  2.79e-04  3.41e-07  4.30e-06  9.90e-01  
 22  +4.4117e-01  +4.4343e-01  2.27e-03  4.28e-07  1.02e-04  1.27e-07  1.60e-06  6.84e-01  
 23  +4.4039e-01  +4.4063e-01  2.39e-04  4.46e-08  1.07e-05  1.34e-08  1.69e-07  8.97e-01  
 24  +4.4030e-01  +4.4030e-01  2.76e-06  5.15e-10  1.23e-07  1.55e-10  1.95e-09  9.90e-01  
 25  +4.4030e-01  +4.4030e-01  2.76e-08  5.16e-12  1.23e-09  1.55e-12  1.96e-11  9.90e-01  
 26  +4.4030e-01  +4.4030e-01  2.76e-10  5.16e-14  1.23e-11  1.58e-14  2.00e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 160.6258ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:03 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:03 PM: Optimal value: 4.403e-01
(CVXPY) Sep 20 08:02:03 PM: Compilation took 3.997e-02 seconds
(CVXPY) Sep 20 08:02:03 PM: Solver (including time spent in interface) took 1.710e-01 seconds
Iteration: 20, Objective: 0.4403
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:04 PM: Your problem has 5219 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:04 PM: Finished problem compilation (took 4.463e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5219
  constraints   = 10219
  nnz(P)        = 0
  nnz(A)        = 91483
  cones (total) = 1
    : Nonnegative = 1,  numel = 10219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7993e-01  +1.0859e+03  1.09e+03  4.35e-01  7.67e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3117e-01  +1.2161e+02  1.21e+02  1.69e-01  3.78e+01  1.64e-02  2.74e-01  9.40e-01  
  3  +5.0865e-01  +3.1600e+01  3.11e+01  1.22e-01  2.74e+01  4.56e-05  2.54e-01  2.94e-01  
  4  +5.0105e-01  +3.1535e+00  2.65e+00  1.82e-02  4.21e+00  5.93e-06  1.61e-01  6.14e-01  
  5  +5.0014e-01  +1.0567e+00  5.57e-01  3.77e-03  8.93e-01  4.22e-05  8.74e-02  9.90e-01  
  6  +5.0005e-01  +8.3953e-01  3.39e-01  2.28e-03  5.40e-01  4.25e-05  3.58e-02  6.43e-01  
  7  +4.9963e-01  +8.1192e-01  3.12e-01  1.06e-03  2.54e-01  2.43e-04  3.92e-03  9.74e-01  
  8  +4.9456e-01  +7.8162e-01  2.87e-01  1.09e-04  2.63e-02  2.51e-03  3.28e-04  9.17e-01  
  9  +4.9239e-01  +7.5001e-01  2.58e-01  8.72e-05  2.10e-02  2.11e-03  2.62e-04  3.12e-01  
 10  +4.9000e-01  +7.1004e-01  2.20e-01  6.84e-05  1.65e-02  1.21e-03  2.07e-04  4.62e-01  
 11  +4.8911e-01  +6.9736e-01  2.08e-01  6.63e-05  1.60e-02  9.45e-04  2.02e-04  1.40e-01  
 12  +4.8126e-01  +6.4310e-01  1.62e-01  4.47e-05  1.07e-02  5.73e-04  1.40e-04  4.59e-01  
 13  +4.7056e-01  +5.7504e-01  1.04e-01  2.69e-05  6.45e-03  1.57e-05  8.81e-05  8.14e-01  
 14  +4.6761e-01  +5.6136e-01  9.37e-02  2.33e-05  5.58e-03  1.31e-05  7.70e-05  1.99e-01  
 15  +4.6347e-01  +5.4004e-01  7.66e-02  1.77e-05  4.24e-03  2.53e-06  5.91e-05  9.90e-01  
 16  +4.5522e-01  +5.0400e-01  4.88e-02  1.06e-05  2.54e-03  1.78e-06  3.66e-05  5.28e-01  
 17  +4.5185e-01  +4.8945e-01  3.76e-02  7.88e-06  1.88e-03  1.60e-06  2.76e-05  5.15e-01  
 18  +4.4644e-01  +4.6679e-01  2.03e-02  4.05e-06  9.69e-04  1.10e-06  1.46e-05  9.47e-01  
 19  +4.4170e-01  +4.4818e-01  6.48e-03  1.25e-06  2.98e-04  3.63e-07  4.66e-06  8.75e-01  
 20  +4.4167e-01  +4.4799e-01  6.33e-03  1.23e-06  2.94e-04  3.46e-07  4.66e-06  1.12e-02  
 21  +4.4167e-01  +4.4800e-01  6.33e-03  1.23e-06  2.94e-04  3.48e-07  4.64e-06  3.05e-02  
 22  +4.4162e-01  +4.4789e-01  6.27e-03  1.20e-06  2.87e-04  3.52e-07  4.49e-06  9.88e-02  
 23  +4.4038e-01  +4.4312e-01  2.74e-03  5.24e-07  1.25e-04  1.54e-07  1.98e-06  9.90e-01  
 24  +4.3934e-01  +4.3945e-01  1.11e-04  2.09e-08  5.00e-06  5.96e-09  8.01e-08  9.77e-01  
 25  +4.3930e-01  +4.3930e-01  1.12e-06  2.13e-10  5.08e-08  6.06e-11  8.15e-10  9.90e-01  
 26  +4.3930e-01  +4.3930e-01  1.12e-08  2.13e-12  5.08e-10  6.06e-13  8.15e-12  9.90e-01  
 27  +4.3930e-01  +4.3930e-01  1.13e-10  2.12e-14  5.09e-12  6.21e-15  8.34e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 173.5106ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:04 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:04 PM: Optimal value: 4.393e-01
(CVXPY) Sep 20 08:02:04 PM: Compilation took 4.463e-02 seconds
(CVXPY) Sep 20 08:02:04 PM: Solver (including time spent in interface) took 1.842e-01 seconds
Iteration: 21, Objective: 0.4393
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:04 PM: Your problem has 5229 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:04 PM: Finished problem compilation (took 3.778e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5229
  constraints   = 10229
  nnz(P)        = 0
  nnz(A)        = 91920
  cones (total) = 1
    : Nonnegative = 1,  numel = 10229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7988e-01  +1.0858e+03  1.09e+03  4.35e-01  7.66e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3114e-01  +1.2155e+02  1.21e+02  1.69e-01  3.77e+01  1.64e-02  2.74e-01  9.40e-01  
  3  +5.0864e-01  +3.1580e+01  3.11e+01  1.22e-01  2.73e+01  4.56e-05  2.53e-01  2.95e-01  
  4  +5.0105e-01  +3.1530e+00  2.65e+00  1.82e-02  4.21e+00  5.93e-06  1.61e-01  6.15e-01  
  5  +5.0014e-01  +1.0640e+00  5.64e-01  3.82e-03  9.04e-01  4.25e-05  8.69e-02  9.90e-01  
  6  +5.0005e-01  +8.4921e-01  3.49e-01  2.34e-03  5.55e-01  4.42e-05  3.49e-02  6.58e-01  
  7  +4.9946e-01  +8.1097e-01  3.12e-01  8.42e-04  2.02e-01  3.28e-04  2.90e-03  9.90e-01  
  8  +4.9366e-01  +7.7769e-01  2.84e-01  9.65e-05  2.32e-02  2.84e-03  2.89e-04  9.01e-01  
  9  +4.8976e-01  +7.3909e-01  2.49e-01  7.19e-05  1.73e-02  2.46e-03  2.17e-04  3.43e-01  
 10  +4.8835e-01  +7.1732e-01  2.29e-01  6.77e-05  1.63e-02  1.80e-03  2.06e-04  1.74e-01  
 11  +4.8297e-01  +6.7062e-01  1.88e-01  5.35e-05  1.28e-02  1.05e-03  1.66e-04  3.59e-01  
 12  +4.6812e-01  +5.8030e-01  1.12e-01  2.75e-05  6.58e-03  4.91e-04  9.03e-05  5.36e-01  
 13  +4.6662e-01  +5.7075e-01  1.04e-01  2.49e-05  5.96e-03  3.41e-04  8.22e-05  3.01e-01  
 14  +4.6273e-01  +5.4512e-01  8.24e-02  1.91e-05  4.58e-03  3.47e-06  6.41e-05  9.09e-01  
 15  +4.5131e-01  +4.9256e-01  4.13e-02  8.91e-06  2.13e-03  1.83e-06  3.13e-05  7.69e-01  
 16  +4.4922e-01  +4.8357e-01  3.43e-02  7.26e-06  1.74e-03  1.60e-06  2.57e-05  3.72e-01  
 17  +4.4343e-01  +4.5918e-01  1.57e-02  3.17e-06  7.57e-04  8.22e-07  1.16e-05  8.56e-01  
 18  +4.4056e-01  +4.4784e-01  7.28e-03  1.41e-06  3.38e-04  4.00e-07  5.31e-06  8.11e-01  
 19  +4.4050e-01  +4.4753e-01  7.02e-03  1.38e-06  3.30e-04  3.75e-07  5.26e-06  1.13e-01  
 20  +4.4046e-01  +4.4733e-01  6.87e-03  1.35e-06  3.23e-04  3.69e-07  5.13e-06  1.16e-01  
 21  +4.3984e-01  +4.4503e-01  5.19e-03  1.00e-06  2.40e-04  2.86e-07  3.79e-06  4.44e-01  
 22  +4.3841e-01  +4.3972e-01  1.31e-03  2.51e-07  6.00e-05  7.21e-08  9.64e-07  9.90e-01  
 23  +4.3792e-01  +4.3796e-01  4.41e-05  8.41e-09  2.01e-06  2.40e-09  3.25e-08  9.69e-01  
 24  +4.3790e-01  +4.3790e-01  4.42e-07  8.42e-11  2.01e-08  2.41e-11  3.25e-10  9.90e-01  
 25  +4.3790e-01  +4.3790e-01  4.42e-09  8.43e-13  2.01e-10  2.45e-13  3.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 153.7413ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:04 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:04 PM: Optimal value: 4.379e-01
(CVXPY) Sep 20 08:02:04 PM: Compilation took 3.778e-02 seconds
(CVXPY) Sep 20 08:02:04 PM: Solver (including time spent in interface) took 1.639e-01 seconds
Iteration: 22, Objective: 0.4379
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:04 PM: Your problem has 5239 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:04 PM: Finished problem compilation (took 4.638e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:04 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5239
  constraints   = 10239
  nnz(P)        = 0
  nnz(A)        = 92402
  cones (total) = 1
    : Nonnegative = 1,  numel = 10239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7982e-01  +1.0859e+03  1.09e+03  4.35e-01  7.65e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3110e-01  +1.2147e+02  1.21e+02  1.69e-01  3.77e+01  1.65e-02  2.74e-01  9.41e-01  
  3  +5.0863e-01  +3.1565e+01  3.11e+01  1.22e-01  2.73e+01  4.57e-05  2.53e-01  2.96e-01  
  4  +5.0105e-01  +3.1556e+00  2.65e+00  1.82e-02  4.21e+00  5.94e-06  1.61e-01  6.15e-01  
  5  +5.0014e-01  +1.0713e+00  5.71e-01  3.88e-03  9.16e-01  4.29e-05  8.66e-02  9.90e-01  
  6  +5.0003e-01  +7.9925e-01  2.99e-01  2.00e-03  4.73e-01  4.67e-05  2.65e-02  7.51e-01  
  7  +4.9836e-01  +8.4423e-01  3.46e-01  4.15e-04  9.97e-02  8.73e-04  1.30e-03  9.90e-01  
  8  +4.9276e-01  +8.0038e-01  3.08e-01  1.08e-04  2.60e-02  2.84e-03  3.26e-04  7.57e-01  
  9  +4.8953e-01  +7.6209e-01  2.73e-01  8.23e-05  1.98e-02  2.45e-03  2.50e-04  3.27e-01  
 10  +4.8895e-01  +7.3303e-01  2.44e-01  7.58e-05  1.82e-02  1.43e-03  2.31e-04  3.05e-01  
 11  +4.8558e-01  +6.9907e-01  2.13e-01  6.41e-05  1.54e-02  9.75e-04  1.98e-04  2.88e-01  
 12  +4.7165e-01  +6.0243e-01  1.31e-01  3.33e-05  7.99e-03  3.48e-04  1.08e-04  6.33e-01  
 13  +4.6492e-01  +5.6502e-01  1.00e-01  2.41e-05  5.76e-03  1.42e-04  8.03e-05  5.48e-01  
 14  +4.6243e-01  +5.5102e-01  8.86e-02  2.09e-05  5.01e-03  7.07e-05  7.08e-05  4.61e-01  
 15  +4.5518e-01  +5.1681e-01  6.16e-02  1.40e-05  3.34e-03  4.06e-05  4.89e-05  4.10e-01  
 16  +4.5513e-01  +5.1682e-01  6.17e-02  1.37e-05  3.28e-03  3.44e-05  4.78e-05  1.99e-01  
 17  +4.4862e-01  +4.8789e-01  3.93e-02  8.36e-06  2.00e-03  1.61e-05  3.01e-05  5.40e-01  
 18  +4.4625e-01  +4.7617e-01  2.99e-02  6.12e-06  1.46e-03  2.16e-06  2.23e-05  9.87e-01  
 19  +4.3884e-01  +4.4646e-01  7.62e-03  1.52e-06  3.62e-04  4.71e-07  5.83e-06  8.96e-01  
 20  +4.3881e-01  +4.4639e-01  7.58e-03  1.49e-06  3.57e-04  4.71e-07  5.73e-06  3.92e-02  
 21  +4.3867e-01  +4.4563e-01  6.96e-03  1.39e-06  3.32e-04  3.96e-07  5.41e-06  4.49e-01  
 22  +4.3856e-01  +4.4517e-01  6.61e-03  1.32e-06  3.15e-04  3.73e-07  5.12e-06  1.95e-01  
 23  +4.3778e-01  +4.4227e-01  4.49e-03  8.84e-07  2.11e-04  2.55e-07  3.43e-06  4.99e-01  
 24  +4.3636e-01  +4.3705e-01  6.86e-04  1.34e-07  3.20e-05  3.39e-08  5.29e-07  9.87e-01  
 25  +4.3611e-01  +4.3613e-01  2.53e-05  4.91e-09  1.17e-06  1.27e-09  1.94e-08  9.67e-01  
 26  +4.3610e-01  +4.3610e-01  2.53e-07  4.92e-11  1.17e-08  1.27e-11  1.94e-10  9.90e-01  
 27  +4.3610e-01  +4.3610e-01  2.53e-09  4.92e-13  1.17e-10  1.29e-13  1.98e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 177.6492ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:04 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:04 PM: Optimal value: 4.361e-01
(CVXPY) Sep 20 08:02:04 PM: Compilation took 4.638e-02 seconds
(CVXPY) Sep 20 08:02:04 PM: Solver (including time spent in interface) took 1.877e-01 seconds
Iteration: 23, Objective: 0.4361
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:05 PM: Your problem has 5249 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:05 PM: Finished problem compilation (took 7.764e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5249
  constraints   = 10249
  nnz(P)        = 0
  nnz(A)        = 92897
  cones (total) = 1
    : Nonnegative = 1,  numel = 10249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7979e-01  +1.0859e+03  1.09e+03  4.35e-01  7.65e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3107e-01  +1.2141e+02  1.21e+02  1.69e-01  3.76e+01  1.65e-02  2.74e-01  9.41e-01  
  3  +5.0863e-01  +3.1551e+01  3.10e+01  1.22e-01  2.72e+01  4.57e-05  2.53e-01  2.97e-01  
  4  +5.0105e-01  +3.1545e+00  2.65e+00  1.82e-02  4.21e+00  5.94e-06  1.61e-01  6.15e-01  
  5  +5.0014e-01  +1.0761e+00  5.76e-01  3.91e-03  9.23e-01  4.31e-05  8.62e-02  9.90e-01  
  6  +5.0004e-01  +8.2860e-01  3.29e-01  2.19e-03  5.20e-01  4.73e-05  2.89e-02  7.37e-01  
  7  +4.9893e-01  +8.2445e-01  3.26e-01  5.51e-04  1.32e-01  5.90e-04  1.77e-03  9.76e-01  
  8  +4.9351e-01  +7.8818e-01  2.95e-01  1.09e-04  2.62e-02  2.71e-03  3.27e-04  8.19e-01  
  9  +4.9017e-01  +7.5572e-01  2.66e-01  8.19e-05  1.97e-02  2.53e-03  2.48e-04  3.18e-01  
 10  +4.8938e-01  +7.3523e-01  2.46e-01  7.56e-05  1.82e-02  1.78e-03  2.29e-04  2.46e-01  
 11  +4.8802e-01  +7.0509e-01  2.17e-01  7.09e-05  1.70e-02  8.79e-04  2.17e-04  3.34e-01  
 12  +4.7976e-01  +6.5378e-01  1.74e-01  4.80e-05  1.15e-02  6.95e-04  1.51e-04  3.59e-01  
 13  +4.6717e-01  +5.7816e-01  1.11e-01  2.77e-05  6.64e-03  2.32e-04  9.19e-05  5.93e-01  
 14  +4.6455e-01  +5.6465e-01  1.00e-01  2.42e-05  5.80e-03  1.74e-04  8.11e-05  2.53e-01  
 15  +4.6067e-01  +5.4130e-01  8.06e-02  1.87e-05  4.46e-03  1.80e-06  6.33e-05  9.24e-01  
 16  +4.4981e-01  +4.9243e-01  4.26e-02  9.27e-06  2.21e-03  1.23e-06  3.30e-05  6.19e-01  
 17  +4.4254e-01  +4.6166e-01  1.91e-02  3.97e-06  9.48e-04  6.02e-07  1.48e-05  6.16e-01  
 18  +4.3850e-01  +4.4531e-01  6.81e-03  1.36e-06  3.25e-04  2.52e-07  5.25e-06  7.36e-01  
 19  +4.3850e-01  +4.4534e-01  6.84e-03  1.36e-06  3.24e-04  2.57e-07  5.22e-06  2.63e-02  
 20  +4.3795e-01  +4.4282e-01  4.87e-03  9.64e-07  2.30e-04  2.56e-07  3.73e-06  9.90e-01  
 21  +4.3653e-01  +4.3767e-01  1.14e-03  2.23e-07  5.32e-05  5.92e-08  8.77e-07  8.25e-01  
 22  +4.3611e-01  +4.3612e-01  1.62e-05  3.15e-09  7.52e-07  8.35e-10  1.25e-08  9.86e-01  
 23  +4.3610e-01  +4.3610e-01  1.62e-07  3.15e-11  7.53e-09  8.36e-12  1.25e-10  9.90e-01  
 24  +4.3610e-01  +4.3610e-01  1.62e-09  3.15e-13  7.53e-11  8.46e-14  1.26e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 278.9911ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:05 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:05 PM: Optimal value: 4.361e-01
(CVXPY) Sep 20 08:02:05 PM: Compilation took 7.764e-02 seconds
(CVXPY) Sep 20 08:02:05 PM: Solver (including time spent in interface) took 2.987e-01 seconds
Iteration: 24, Objective: 0.4361
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:05 PM: Your problem has 5258 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:05 PM: Finished problem compilation (took 8.281e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5258
  constraints   = 10258
  nnz(P)        = 0
  nnz(A)        = 93450
  cones (total) = 1
    : Nonnegative = 1,  numel = 10258

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7973e-01  +1.0860e+03  1.09e+03  4.36e-01  7.64e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3104e-01  +1.2137e+02  1.21e+02  1.69e-01  3.75e+01  1.65e-02  2.74e-01  9.41e-01  
  3  +5.0862e-01  +3.1541e+01  3.10e+01  1.22e-01  2.72e+01  4.58e-05  2.53e-01  2.98e-01  
  4  +5.0105e-01  +3.1578e+00  2.66e+00  1.83e-02  4.21e+00  5.94e-06  1.60e-01  6.16e-01  
  5  +5.0015e-01  +1.0841e+00  5.84e-01  3.97e-03  9.36e-01  4.36e-05  8.60e-02  9.90e-01  
  6  +5.0004e-01  +8.3153e-01  3.31e-01  2.21e-03  5.23e-01  4.87e-05  2.81e-02  7.45e-01  
  7  +4.9849e-01  +8.3384e-01  3.35e-01  4.24e-04  1.02e-01  8.09e-04  1.33e-03  9.88e-01  
  8  +4.9319e-01  +7.9358e-01  3.00e-01  1.10e-04  2.66e-02  2.67e-03  3.33e-04  7.58e-01  
  9  +4.9021e-01  +7.6409e-01  2.74e-01  8.72e-05  2.10e-02  2.49e-03  2.64e-04  2.67e-01  
 10  +4.8915e-01  +7.3746e-01  2.48e-01  7.75e-05  1.86e-02  1.61e-03  2.36e-04  3.18e-01  
 11  +4.8822e-01  +7.1770e-01  2.29e-01  7.59e-05  1.82e-02  1.11e-03  2.32e-04  1.62e-01  
 12  +4.8245e-01  +6.7910e-01  1.97e-01  5.77e-05  1.38e-02  9.24e-04  1.80e-04  2.80e-01  
 13  +4.7131e-01  +6.1057e-01  1.39e-01  3.59e-05  8.58e-03  5.43e-04  1.17e-04  4.39e-01  
 14  +4.6201e-01  +5.5808e-01  9.61e-02  2.30e-05  5.51e-03  2.39e-04  7.78e-05  5.19e-01  
 15  +4.6049e-01  +5.5023e-01  8.97e-02  2.11e-05  5.05e-03  2.02e-04  7.18e-05  1.58e-01  
 16  +4.5211e-01  +5.0853e-01  5.64e-02  1.25e-05  2.99e-03  7.91e-05  4.41e-05  5.90e-01  
 17  +4.4583e-01  +4.7943e-01  3.36e-02  7.14e-06  1.71e-03  3.18e-05  2.60e-05  6.01e-01  
 18  +4.3982e-01  +4.5275e-01  1.29e-02  2.61e-06  6.24e-04  1.35e-06  9.90e-06  9.90e-01  
 19  +4.3778e-01  +4.4490e-01  7.11e-03  1.40e-06  3.35e-04  6.72e-07  5.39e-06  5.88e-01  
 20  +4.3773e-01  +4.4461e-01  6.88e-03  1.38e-06  3.28e-04  6.16e-07  5.36e-06  6.14e-02  
 21  +4.3760e-01  +4.4409e-01  6.49e-03  1.30e-06  3.10e-04  5.66e-07  5.06e-06  1.20e-01  
 22  +4.3751e-01  +4.4380e-01  6.29e-03  1.24e-06  2.95e-04  5.07e-07  4.77e-06  2.90e-01  
 23  +4.3587e-01  +4.3762e-01  1.75e-03  3.42e-07  8.16e-05  9.51e-08  1.34e-06  9.90e-01  
 24  +4.3522e-01  +4.3528e-01  6.11e-05  1.19e-08  2.83e-06  3.26e-09  4.69e-08  9.70e-01  
 25  +4.3520e-01  +4.3520e-01  6.15e-07  1.19e-10  2.85e-08  3.28e-11  4.72e-10  9.90e-01  
 26  +4.3520e-01  +4.3520e-01  6.15e-09  1.19e-12  2.85e-10  3.34e-13  4.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 319.7159ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:06 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:06 PM: Optimal value: 4.352e-01
(CVXPY) Sep 20 08:02:06 PM: Compilation took 8.281e-02 seconds
(CVXPY) Sep 20 08:02:06 PM: Solver (including time spent in interface) took 3.351e-01 seconds
Iteration: 25, Objective: 0.4352
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:06 PM: Your problem has 5268 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:06 PM: Finished problem compilation (took 8.937e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5268
  constraints   = 10268
  nnz(P)        = 0
  nnz(A)        = 93950
  cones (total) = 1
    : Nonnegative = 1,  numel = 10268

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7968e-01  +1.0861e+03  1.09e+03  4.36e-01  7.64e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3100e-01  +1.2128e+02  1.21e+02  1.69e-01  3.75e+01  1.65e-02  2.74e-01  9.42e-01  
  3  +5.0862e-01  +3.1525e+01  3.10e+01  1.22e-01  2.72e+01  4.58e-05  2.53e-01  2.99e-01  
  4  +5.0105e-01  +3.1597e+00  2.66e+00  1.83e-02  4.22e+00  5.95e-06  1.60e-01  6.16e-01  
  5  +5.0015e-01  +1.0924e+00  5.92e-01  4.03e-03  9.50e-01  4.40e-05  8.56e-02  9.90e-01  
  6  +5.0004e-01  +8.5297e-01  3.53e-01  2.35e-03  5.56e-01  5.05e-05  2.90e-02  7.39e-01  
  7  +4.9863e-01  +8.3549e-01  3.37e-01  4.64e-04  1.11e-01  7.38e-04  1.46e-03  9.83e-01  
  8  +4.9336e-01  +7.9695e-01  3.04e-01  1.13e-04  2.73e-02  2.64e-03  3.41e-04  7.73e-01  
  9  +4.9016e-01  +7.6382e-01  2.74e-01  8.78e-05  2.11e-02  2.41e-03  2.66e-04  2.96e-01  
 10  +4.8740e-01  +7.3655e-01  2.49e-01  7.40e-05  1.78e-02  1.98e-03  2.26e-04  2.47e-01  
 11  +4.8656e-01  +7.2214e-01  2.36e-01  7.32e-05  1.76e-02  1.61e-03  2.25e-04  7.75e-02  
 12  +4.8028e-01  +6.7834e-01  1.98e-01  5.55e-05  1.33e-02  1.26e-03  1.74e-04  2.85e-01  
 13  +4.6904e-01  +6.0044e-01  1.31e-01  3.38e-05  8.09e-03  4.07e-04  1.11e-04  5.92e-01  
 14  +4.6199e-01  +5.6123e-01  9.92e-02  2.41e-05  5.77e-03  2.10e-04  8.17e-05  4.55e-01  
 15  +4.5685e-01  +5.3487e-01  7.80e-02  1.82e-05  4.36e-03  1.31e-04  6.31e-05  3.67e-01  
 16  +4.4845e-01  +4.9358e-01  4.51e-02  9.93e-06  2.37e-03  4.46e-05  3.57e-05  6.52e-01  
 17  +4.4471e-01  +4.7595e-01  3.12e-02  6.55e-06  1.56e-03  1.48e-05  2.39e-05  7.14e-01  
 18  +4.4177e-01  +4.6368e-01  2.19e-02  4.49e-06  1.07e-03  8.90e-06  1.67e-05  4.18e-01  
 19  +4.4072e-01  +4.5919e-01  1.85e-02  3.75e-06  8.94e-04  6.45e-06  1.40e-05  3.02e-01  
 20  +4.3961e-01  +4.5441e-01  1.48e-02  2.98e-06  7.11e-04  3.87e-06  1.12e-05  4.45e-01  
 21  +4.3570e-01  +4.3888e-01  3.18e-03  6.25e-07  1.49e-04  2.11e-07  2.43e-06  9.90e-01  
 22  +4.3465e-01  +4.3506e-01  4.06e-04  7.87e-08  1.88e-05  2.56e-08  3.10e-07  8.98e-01  
 23  +4.3450e-01  +4.3451e-01  7.25e-06  1.40e-09  3.35e-07  4.35e-10  5.54e-09  9.87e-01  
 24  +4.3450e-01  +4.3450e-01  7.25e-08  1.40e-11  3.35e-09  4.35e-12  5.54e-11  9.90e-01  
 25  +4.3450e-01  +4.3450e-01  7.25e-10  1.40e-13  3.35e-11  4.43e-14  5.64e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 385.2214ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:07 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:07 PM: Optimal value: 4.345e-01
(CVXPY) Sep 20 08:02:07 PM: Compilation took 8.937e-02 seconds
(CVXPY) Sep 20 08:02:07 PM: Solver (including time spent in interface) took 4.024e-01 seconds
Iteration: 26, Objective: 0.4345
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:07 PM: Your problem has 5275 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:07 PM: Finished problem compilation (took 9.261e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5275
  constraints   = 10275
  nnz(P)        = 0
  nnz(A)        = 94224
  cones (total) = 1
    : Nonnegative = 1,  numel = 10275

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7966e-01  +1.0861e+03  1.09e+03  4.36e-01  7.63e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3098e-01  +1.2125e+02  1.21e+02  1.69e-01  3.74e+01  1.65e-02  2.74e-01  9.42e-01  
  3  +5.0862e-01  +3.1517e+01  3.10e+01  1.22e-01  2.71e+01  4.58e-05  2.53e-01  2.99e-01  
  4  +5.0105e-01  +3.1603e+00  2.66e+00  1.83e-02  4.22e+00  5.95e-06  1.60e-01  6.16e-01  
  5  +5.0015e-01  +1.0938e+00  5.94e-01  4.04e-03  9.52e-01  4.40e-05  8.55e-02  9.90e-01  
  6  +5.0003e-01  +8.3797e-01  3.38e-01  2.25e-03  5.32e-01  5.09e-05  2.68e-02  7.68e-01  
  7  +4.9835e-01  +8.4122e-01  3.43e-01  4.05e-04  9.72e-02  8.75e-04  1.26e-03  9.80e-01  
  8  +4.9301e-01  +7.9988e-01  3.07e-01  1.12e-04  2.69e-02  2.69e-03  3.37e-04  7.43e-01  
  9  +4.8951e-01  +7.6132e-01  2.72e-01  8.56e-05  2.06e-02  2.34e-03  2.59e-04  3.18e-01  
 10  +4.8705e-01  +7.3938e-01  2.52e-01  7.41e-05  1.78e-02  2.04e-03  2.26e-04  1.96e-01  
 11  +4.8619e-01  +7.1931e-01  2.33e-01  7.26e-05  1.74e-02  1.44e-03  2.23e-04  1.51e-01  
 12  +4.8036e-01  +6.7942e-01  1.99e-01  5.63e-05  1.35e-02  1.16e-03  1.77e-04  2.60e-01  
 13  +4.6894e-01  +6.0256e-01  1.34e-01  3.42e-05  8.19e-03  4.74e-04  1.13e-04  5.39e-01  
 14  +4.6099e-01  +5.5779e-01  9.68e-02  2.33e-05  5.57e-03  2.33e-04  7.91e-05  4.76e-01  
 15  +4.5556e-01  +5.2964e-01  7.41e-02  1.71e-05  4.08e-03  1.35e-04  5.94e-05  4.11e-01  
 16  +4.4826e-01  +4.9379e-01  4.55e-02  9.95e-06  2.37e-03  5.31e-05  3.57e-05  6.09e-01  
 17  +4.4325e-01  +4.7084e-01  2.76e-02  5.70e-06  1.36e-03  1.66e-05  2.10e-05  7.24e-01  
 18  +4.3968e-01  +4.5604e-01  1.64e-02  3.28e-06  7.81e-04  6.12e-06  1.23e-05  6.60e-01  
 19  +4.3960e-01  +4.5567e-01  1.61e-02  3.22e-06  7.67e-04  5.73e-06  1.21e-05  7.25e-02  
 20  +4.3710e-01  +4.4523e-01  8.13e-03  1.61e-06  3.84e-04  4.70e-07  6.20e-06  9.90e-01  
 21  +4.3496e-01  +4.3724e-01  2.28e-03  4.45e-07  1.06e-04  1.30e-07  1.75e-06  8.12e-01  
 22  +4.3412e-01  +4.3419e-01  6.33e-05  1.23e-08  2.93e-06  3.46e-09  4.86e-08  9.79e-01  
 23  +4.3410e-01  +4.3410e-01  6.36e-07  1.23e-10  2.94e-08  3.48e-11  4.88e-10  9.90e-01  
 24  +4.3410e-01  +4.3410e-01  6.36e-09  1.23e-12  2.94e-10  3.48e-13  4.88e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 385.3563ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:07 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:07 PM: Optimal value: 4.341e-01
(CVXPY) Sep 20 08:02:07 PM: Compilation took 9.261e-02 seconds
(CVXPY) Sep 20 08:02:07 PM: Solver (including time spent in interface) took 4.056e-01 seconds
Iteration: 27, Objective: 0.4341
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:08 PM: Your problem has 5285 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:08 PM: Finished problem compilation (took 9.296e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5285
  constraints   = 10285
  nnz(P)        = 0
  nnz(A)        = 94802
  cones (total) = 1
    : Nonnegative = 1,  numel = 10285

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7963e-01  +1.0861e+03  1.09e+03  4.36e-01  7.63e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3096e-01  +1.2120e+02  1.21e+02  1.69e-01  3.74e+01  1.65e-02  2.73e-01  9.42e-01  
  3  +5.0861e-01  +3.1501e+01  3.10e+01  1.22e-01  2.71e+01  4.59e-05  2.52e-01  3.00e-01  
  4  +5.0105e-01  +3.1602e+00  2.66e+00  1.83e-02  4.22e+00  5.95e-06  1.60e-01  6.16e-01  
  5  +5.0015e-01  +1.1002e+00  6.00e-01  4.08e-03  9.62e-01  4.43e-05  8.51e-02  9.90e-01  
  6  +5.0004e-01  +8.5385e-01  3.54e-01  2.35e-03  5.56e-01  5.20e-05  2.75e-02  7.62e-01  
  7  +4.9846e-01  +8.4945e-01  3.51e-01  4.32e-04  1.04e-01  8.23e-04  1.34e-03  9.86e-01  
  8  +4.9279e-01  +8.0609e-01  3.13e-01  1.09e-04  2.61e-02  2.79e-03  3.26e-04  7.67e-01  
  9  +4.8965e-01  +7.7141e-01  2.82e-01  8.64e-05  2.08e-02  2.41e-03  2.61e-04  2.87e-01  
 10  +4.8797e-01  +7.5229e-01  2.64e-01  7.83e-05  1.88e-02  2.03e-03  2.38e-04  1.71e-01  
 11  +4.8526e-01  +7.0068e-01  2.15e-01  6.93e-05  1.66e-02  5.94e-04  2.14e-04  4.68e-01  
 12  +4.7200e-01  +6.0660e-01  1.35e-01  3.62e-05  8.65e-03  6.11e-05  1.17e-04  8.34e-01  
 13  +4.6409e-01  +5.6800e-01  1.04e-01  2.60e-05  6.21e-03  3.49e-05  8.71e-05  4.24e-01  
 14  +4.5618e-01  +5.3098e-01  7.48e-02  1.74e-05  4.16e-03  1.27e-05  6.04e-05  6.44e-01  
 15  +4.5129e-01  +5.0846e-01  5.72e-02  1.28e-05  3.06e-03  7.23e-06  4.54e-05  4.96e-01  
 16  +4.4726e-01  +4.9071e-01  4.35e-02  9.49e-06  2.26e-03  5.02e-06  3.43e-05  3.49e-01  
 17  +4.4033e-01  +4.6068e-01  2.03e-02  4.21e-06  1.00e-03  1.84e-06  1.58e-05  7.23e-01  
 18  +4.4028e-01  +4.6037e-01  2.01e-02  4.16e-06  9.92e-04  1.77e-06  1.56e-05  7.69e-02  
 19  +4.3926e-01  +4.5617e-01  1.69e-02  3.47e-06  8.28e-04  1.43e-06  1.31e-05  2.42e-01  
 20  +4.3891e-01  +4.5462e-01  1.57e-02  3.22e-06  7.67e-04  1.26e-06  1.22e-05  2.00e-01  
 21  +4.3545e-01  +4.4057e-01  5.12e-03  1.03e-06  2.45e-04  2.66e-07  4.03e-06  9.90e-01  
 22  +4.3381e-01  +4.3440e-01  5.88e-04  1.17e-07  2.78e-05  3.02e-08  4.69e-07  8.95e-01  
 23  +4.3360e-01  +4.3361e-01  6.22e-06  1.23e-09  2.94e-07  3.18e-10  4.97e-09  9.90e-01  
 24  +4.3360e-01  +4.3360e-01  6.22e-08  1.23e-11  2.94e-09  3.18e-12  4.97e-11  9.90e-01  
 25  +4.3360e-01  +4.3360e-01  8.30e-10  1.64e-13  3.92e-11  4.29e-14  6.70e-13  9.87e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 362.5618ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:08 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:08 PM: Optimal value: 4.336e-01
(CVXPY) Sep 20 08:02:08 PM: Compilation took 9.296e-02 seconds
(CVXPY) Sep 20 08:02:08 PM: Solver (including time spent in interface) took 3.819e-01 seconds
Iteration: 28, Objective: 0.4336
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:09 PM: Your problem has 5286 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:09 PM: Finished problem compilation (took 9.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5286
  constraints   = 10286
  nnz(P)        = 0
  nnz(A)        = 94982
  cones (total) = 1
    : Nonnegative = 1,  numel = 10286

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7964e-01  +1.0861e+03  1.09e+03  4.36e-01  7.63e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3095e-01  +1.2119e+02  1.21e+02  1.69e-01  3.73e+01  1.65e-02  2.73e-01  9.42e-01  
  3  +5.0861e-01  +3.1497e+01  3.10e+01  1.22e-01  2.71e+01  4.59e-05  2.52e-01  3.00e-01  
  4  +5.0105e-01  +3.1593e+00  2.66e+00  1.83e-02  4.22e+00  5.96e-06  1.60e-01  6.17e-01  
  5  +5.0015e-01  +1.1018e+00  6.02e-01  4.09e-03  9.65e-01  4.43e-05  8.50e-02  9.90e-01  
  6  +5.0004e-01  +8.6211e-01  3.62e-01  2.41e-03  5.69e-01  5.21e-05  2.83e-02  7.51e-01  
  7  +4.9878e-01  +8.4537e-01  3.47e-01  5.21e-04  1.25e-01  6.66e-04  1.64e-03  9.74e-01  
  8  +4.9312e-01  +8.0577e-01  3.13e-01  1.10e-04  2.66e-02  2.79e-03  3.31e-04  8.04e-01  
  9  +4.8996e-01  +7.7138e-01  2.81e-01  8.72e-05  2.10e-02  2.45e-03  2.63e-04  2.90e-01  
 10  +4.8811e-01  +7.5189e-01  2.64e-01  7.84e-05  1.88e-02  2.09e-03  2.38e-04  1.72e-01  
 11  +4.8549e-01  +6.9894e-01  2.13e-01  7.02e-05  1.68e-02  5.05e-04  2.17e-04  4.94e-01  
 12  +4.7481e-01  +6.2276e-01  1.48e-01  4.12e-05  9.86e-03  4.83e-05  1.32e-04  8.37e-01  
 13  +4.6373e-01  +5.6670e-01  1.03e-01  2.59e-05  6.18e-03  2.47e-05  8.67e-05  4.90e-01  
 14  +4.5645e-01  +5.3259e-01  7.61e-02  1.79e-05  4.27e-03  1.12e-05  6.19e-05  5.74e-01  
 15  +4.5245e-01  +5.1404e-01  6.16e-02  1.40e-05  3.35e-03  7.44e-06  4.94e-05  3.95e-01  
 16  +4.4752e-01  +4.9194e-01  4.44e-02  9.75e-06  2.33e-03  4.58e-06  3.51e-05  4.59e-01  
 17  +4.4135e-01  +4.6489e-01  2.35e-02  4.90e-06  1.17e-03  1.84e-06  1.83e-05  7.39e-01  
 18  +4.4006e-01  +4.5929e-01  1.92e-02  3.97e-06  9.46e-04  1.34e-06  1.49e-05  4.47e-01  
 19  +4.3997e-01  +4.5888e-01  1.89e-02  3.90e-06  9.29e-04  1.30e-06  1.46e-05  7.19e-02  
 20  +4.3741e-01  +4.4834e-01  1.09e-02  2.22e-06  5.29e-04  6.36e-07  8.53e-06  7.95e-01  
 21  +4.3454e-01  +4.3718e-01  2.64e-03  5.26e-07  1.25e-04  1.51e-07  2.09e-06  7.98e-01  
 22  +4.3362e-01  +4.3367e-01  4.81e-05  9.53e-09  2.27e-06  2.61e-09  3.84e-08  9.85e-01  
 23  +4.3360e-01  +4.3360e-01  4.83e-07  9.56e-11  2.28e-08  2.62e-11  3.85e-10  9.90e-01  
 24  +4.3360e-01  +4.3360e-01  4.83e-09  9.56e-13  2.28e-10  2.62e-13  3.85e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 347.8646ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:09 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:09 PM: Optimal value: 4.336e-01
(CVXPY) Sep 20 08:02:09 PM: Compilation took 9.562e-02 seconds
(CVXPY) Sep 20 08:02:09 PM: Solver (including time spent in interface) took 3.664e-01 seconds
Iteration: 29, Objective: 0.4336
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:09 PM: Your problem has 5296 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:09 PM: Finished problem compilation (took 8.954e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5296
  constraints   = 10296
  nnz(P)        = 0
  nnz(A)        = 95505
  cones (total) = 1
    : Nonnegative = 1,  numel = 10296

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.7962e-01  +1.0861e+03  1.09e+03  4.36e-01  7.62e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3093e-01  +1.2115e+02  1.21e+02  1.69e-01  3.73e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0860e-01  +3.1484e+01  3.10e+01  1.22e-01  2.70e+01  4.59e-05  2.52e-01  3.00e-01  
  4  +5.0105e-01  +3.1593e+00  2.66e+00  1.83e-02  4.22e+00  5.96e-06  1.60e-01  6.17e-01  
  5  +5.0015e-01  +1.1063e+00  6.06e-01  4.13e-03  9.72e-01  4.45e-05  8.47e-02  9.90e-01  
  6  +5.0003e-01  +8.5044e-01  3.50e-01  2.33e-03  5.51e-01  5.25e-05  2.71e-02  7.48e-01  
  7  +4.9835e-01  +8.4726e-01  3.49e-01  4.12e-04  9.89e-02  8.77e-04  1.28e-03  9.80e-01  
  8  +4.9272e-01  +8.0485e-01  3.12e-01  1.10e-04  2.64e-02  2.80e-03  3.30e-04  7.53e-01  
  9  +4.8909e-01  +7.6591e-01  2.77e-01  8.51e-05  2.04e-02  2.40e-03  2.58e-04  3.07e-01  
 10  +4.8747e-01  +7.4708e-01  2.60e-01  7.74e-05  1.86e-02  1.99e-03  2.36e-04  1.79e-01  
 11  +4.8436e-01  +6.9871e-01  2.14e-01  6.73e-05  1.61e-02  7.21e-04  2.08e-04  4.40e-01  
 12  +4.7449e-01  +6.2123e-01  1.47e-01  4.18e-05  9.99e-03  7.67e-06  1.34e-04  8.45e-01  
 13  +4.6364e-01  +5.6691e-01  1.03e-01  2.62e-05  6.25e-03  4.80e-06  8.79e-05  5.20e-01  
 14  +4.5723e-01  +5.3690e-01  7.97e-02  1.89e-05  4.52e-03  3.52e-06  6.52e-05  5.44e-01  
 15  +4.5084e-01  +5.0746e-01  5.66e-02  1.29e-05  3.07e-03  2.49e-06  4.55e-05  4.63e-01  
 16  +4.4860e-01  +4.9697e-01  4.84e-02  1.07e-05  2.54e-03  2.24e-06  3.80e-05  4.59e-01  
 17  +4.4031e-01  +4.6078e-01  2.05e-02  4.27e-06  1.02e-03  9.99e-07  1.59e-05  8.23e-01  
 18  +4.3990e-01  +4.5899e-01  1.91e-02  3.97e-06  9.46e-04  9.38e-07  1.49e-05  1.73e-01  
 19  +4.3933e-01  +4.5656e-01  1.72e-02  3.56e-06  8.49e-04  8.59e-07  1.34e-05  2.87e-01  
 20  +4.3595e-01  +4.4300e-01  7.05e-03  1.43e-06  3.40e-04  3.57e-07  5.54e-06  7.95e-01  
 21  +4.3378e-01  +4.3454e-01  7.67e-04  1.53e-07  3.64e-05  3.84e-08  6.13e-07  9.20e-01  
 22  +4.3351e-01  +4.3352e-01  1.71e-05  3.39e-09  8.07e-07  8.50e-10  1.37e-08  9.78e-01  
 23  +4.3350e-01  +4.3350e-01  1.71e-07  3.40e-11  8.11e-09  8.53e-12  1.37e-10  9.90e-01  
 24  +4.3350e-01  +4.3350e-01  2.40e-09  4.77e-13  1.14e-10  1.22e-13  1.96e-12  9.86e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 327.5617ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:10 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:10 PM: Optimal value: 4.335e-01
(CVXPY) Sep 20 08:02:10 PM: Compilation took 8.954e-02 seconds
(CVXPY) Sep 20 08:02:10 PM: Solver (including time spent in interface) took 3.452e-01 seconds
Iteration: 30, Objective: 0.4335
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:10 PM: Your problem has 5306 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:10 PM: Finished problem compilation (took 9.640e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5306
  constraints   = 10306
  nnz(P)        = 0
  nnz(A)        = 96000
  cones (total) = 1
    : Nonnegative = 1,  numel = 10306

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.7955e-01  +1.0862e+03  1.09e+03  4.36e-01  7.62e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3088e-01  +1.2105e+02  1.21e+02  1.69e-01  3.72e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0859e-01  +3.1454e+01  3.09e+01  1.22e-01  2.70e+01  4.60e-05  2.52e-01  3.02e-01  
  4  +5.0105e-01  +3.1591e+00  2.66e+00  1.83e-02  4.21e+00  5.97e-06  1.59e-01  6.18e-01  
  5  +5.0016e-01  +1.1246e+00  6.24e-01  4.25e-03  1.00e+00  4.53e-05  8.38e-02  9.90e-01  
  6  +5.0003e-01  +8.7133e-01  3.71e-01  2.45e-03  5.79e-01  5.73e-05  2.55e-02  7.80e-01  
  7  +4.9787e-01  +8.5696e-01  3.59e-01  3.37e-04  8.09e-02  1.11e-03  1.03e-03  9.78e-01  
  8  +4.9198e-01  +8.0510e-01  3.13e-01  1.05e-04  2.53e-02  2.81e-03  3.16e-04  7.15e-01  
  9  +4.8980e-01  +7.7649e-01  2.87e-01  8.81e-05  2.12e-02  2.21e-03  2.65e-04  3.06e-01  
 10  +4.8725e-01  +7.3963e-01  2.52e-01  8.05e-05  1.93e-02  1.35e-03  2.45e-04  2.52e-01  
 11  +4.7898e-01  +6.7832e-01  1.99e-01  5.65e-05  1.35e-02  8.95e-04  1.77e-04  3.84e-01  
 12  +4.7589e-01  +6.4864e-01  1.73e-01  4.95e-05  1.18e-02  2.90e-04  1.58e-04  5.27e-01  
 13  +4.6348e-01  +5.8003e-01  1.17e-01  2.95e-05  7.04e-03  1.61e-04  9.86e-05  4.59e-01  
 14  +4.5790e-01  +5.5140e-01  9.35e-02  2.25e-05  5.38e-03  9.89e-05  7.71e-05  3.78e-01  
 15  +4.5112e-01  +5.1775e-01  6.66e-02  1.53e-05  3.65e-03  4.97e-05  5.39e-05  4.90e-01  
 16  +4.4732e-01  +4.9824e-01  5.09e-02  1.12e-05  2.66e-03  1.66e-05  3.99e-05  7.07e-01  
 17  +4.3950e-01  +4.6306e-01  2.36e-02  4.89e-06  1.17e-03  1.49e-06  1.83e-05  9.90e-01  
 18  +4.3774e-01  +4.5593e-01  1.82e-02  3.74e-06  8.91e-04  1.11e-06  1.42e-05  3.81e-01  
 19  +4.3711e-01  +4.5324e-01  1.61e-02  3.30e-06  7.88e-04  9.57e-07  1.26e-05  3.08e-01  
 20  +4.3406e-01  +4.4111e-01  7.04e-03  1.42e-06  3.39e-04  3.94e-07  5.58e-06  7.53e-01  
 21  +4.3236e-01  +4.3451e-01  2.15e-03  4.31e-07  1.03e-04  1.19e-07  1.72e-06  7.16e-01  
 22  +4.3169e-01  +4.3194e-01  2.50e-04  4.98e-08  1.19e-05  1.29e-08  2.01e-07  9.68e-01  
 23  +4.3160e-01  +4.3160e-01  2.74e-06  5.47e-10  1.30e-07  1.42e-10  2.21e-09  9.89e-01  
 24  +4.3160e-01  +4.3160e-01  2.75e-08  5.48e-12  1.31e-09  1.42e-12  2.21e-11  9.90e-01  
 25  +4.3160e-01  +4.3160e-01  3.33e-10  6.64e-14  1.58e-11  1.74e-14  2.70e-13  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 368.5053ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:10 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:10 PM: Optimal value: 4.316e-01
(CVXPY) Sep 20 08:02:10 PM: Compilation took 9.640e-02 seconds
(CVXPY) Sep 20 08:02:10 PM: Solver (including time spent in interface) took 3.878e-01 seconds
Iteration: 31, Objective: 0.4316
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:11 PM: Your problem has 5316 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:11 PM: Finished problem compilation (took 1.078e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5316
  constraints   = 10316
  nnz(P)        = 0
  nnz(A)        = 96324
  cones (total) = 1
    : Nonnegative = 1,  numel = 10316

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.7954e-01  +1.0862e+03  1.09e+03  4.36e-01  7.61e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3086e-01  +1.2100e+02  1.20e+02  1.69e-01  3.71e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0859e-01  +3.1441e+01  3.09e+01  1.22e-01  2.69e+01  4.60e-05  2.52e-01  3.03e-01  
  4  +5.0105e-01  +3.1584e+00  2.66e+00  1.83e-02  4.21e+00  5.97e-06  1.59e-01  6.19e-01  
  5  +5.0016e-01  +1.1283e+00  6.28e-01  4.28e-03  1.01e+00  4.55e-05  8.36e-02  9.90e-01  
  6  +5.0003e-01  +8.7585e-01  3.76e-01  2.48e-03  5.85e-01  5.85e-05  2.53e-02  7.77e-01  
  7  +4.9777e-01  +8.6306e-01  3.65e-01  3.30e-04  7.92e-02  1.16e-03  1.01e-03  9.79e-01  
  8  +4.9173e-01  +8.0875e-01  3.17e-01  1.05e-04  2.52e-02  2.85e-03  3.14e-04  7.11e-01  
  9  +4.8972e-01  +7.8052e-01  2.91e-01  8.91e-05  2.14e-02  2.21e-03  2.68e-04  2.95e-01  
 10  +4.8745e-01  +7.4777e-01  2.60e-01  8.23e-05  1.97e-02  1.46e-03  2.50e-04  2.21e-01  
 11  +4.7798e-01  +6.7465e-01  1.97e-01  5.51e-05  1.32e-02  8.52e-04  1.73e-04  4.41e-01  
 12  +4.7473e-01  +6.4448e-01  1.70e-01  4.81e-05  1.15e-02  2.56e-04  1.54e-04  5.47e-01  
 13  +4.6252e-01  +5.7733e-01  1.15e-01  2.89e-05  6.90e-03  1.40e-04  9.72e-05  4.61e-01  
 14  +4.5276e-01  +5.2769e-01  7.49e-02  1.75e-05  4.16e-03  4.97e-05  6.10e-05  6.22e-01  
 15  +4.4945e-01  +5.1144e-01  6.20e-02  1.40e-05  3.35e-03  3.09e-05  4.98e-05  3.92e-01  
 16  +4.4485e-01  +4.9028e-01  4.54e-02  9.91e-06  2.36e-03  1.75e-05  3.59e-05  4.61e-01  
 17  +4.3907e-01  +4.6393e-01  2.49e-02  5.12e-06  1.22e-03  2.70e-06  1.92e-05  9.23e-01  
 18  +4.3882e-01  +4.6280e-01  2.40e-02  4.94e-06  1.18e-03  2.43e-06  1.85e-05  1.55e-01  
 19  +4.3385e-01  +4.4281e-01  8.96e-03  1.81e-06  4.31e-04  7.47e-07  7.06e-06  7.47e-01  
 20  +4.3108e-01  +4.3186e-01  7.79e-04  1.55e-07  3.70e-05  4.80e-08  6.24e-07  9.70e-01  
 21  +4.3080e-01  +4.3081e-01  1.05e-05  2.10e-09  5.00e-07  6.17e-10  8.46e-09  9.90e-01  
 22  +4.3080e-01  +4.3080e-01  1.06e-07  2.11e-11  5.03e-09  6.21e-12  8.51e-11  9.90e-01  
 23  +4.3080e-01  +4.3080e-01  1.21e-09  2.42e-13  5.75e-11  7.15e-14  9.79e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 364.4623ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:11 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:11 PM: Optimal value: 4.308e-01
(CVXPY) Sep 20 08:02:11 PM: Compilation took 1.078e-01 seconds
(CVXPY) Sep 20 08:02:11 PM: Solver (including time spent in interface) took 3.842e-01 seconds
Iteration: 32, Objective: 0.4308
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:02:12 PM: Your problem has 5318 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:02:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:02:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:02:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:02:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:02:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:02:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:02:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:02:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:02:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:02:12 PM: Finished problem compilation (took 1.019e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5318
  constraints   = 10318
  nnz(P)        = 0
  nnz(A)        = 96424
  cones (total) = 1
    : Nonnegative = 1,  numel = 10318

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.7954e-01  +1.0861e+03  1.09e+03  4.36e-01  7.61e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3086e-01  +1.2100e+02  1.20e+02  1.69e-01  3.71e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0859e-01  +3.1440e+01  3.09e+01  1.22e-01  2.69e+01  4.60e-05  2.52e-01  3.03e-01  
  4  +5.0105e-01  +3.1582e+00  2.66e+00  1.83e-02  4.21e+00  5.97e-06  1.59e-01  6.19e-01  
  5  +5.0016e-01  +1.1279e+00  6.28e-01  4.28e-03  1.01e+00  4.55e-05  8.36e-02  9.90e-01  
  6  +5.0003e-01  +8.7748e-01  3.77e-01  2.49e-03  5.89e-01  5.82e-05  2.58e-02  7.66e-01  
  7  +4.9779e-01  +8.6269e-01  3.65e-01  3.33e-04  8.00e-02  1.15e-03  1.02e-03  9.81e-01  
  8  +4.9174e-01  +8.0869e-01  3.17e-01  1.05e-04  2.52e-02  2.86e-03  3.15e-04  7.13e-01  
  9  +4.8976e-01  +7.8049e-01  2.91e-01  8.92e-05  2.14e-02  2.21e-03  2.69e-04  2.97e-01  
 10  +4.8751e-01  +7.4807e-01  2.61e-01  8.25e-05  1.98e-02  1.47e-03  2.51e-04  2.20e-01  
 11  +4.7797e-01  +6.7431e-01  1.96e-01  5.50e-05  1.32e-02  8.51e-04  1.73e-04  4.45e-01  
 12  +4.7453e-01  +6.4297e-01  1.68e-01  4.76e-05  1.14e-02  2.42e-04  1.53e-04  5.61e-01  
 13  +4.6231e-01  +5.7597e-01  1.14e-01  2.86e-05  6.82e-03  1.29e-04  9.61e-05  4.70e-01  
 14  +4.5266e-01  +5.2695e-01  7.43e-02  1.73e-05  4.12e-03  4.35e-05  6.04e-05  6.41e-01  
 15  +4.4958e-01  +5.1186e-01  6.23e-02  1.41e-05  3.36e-03  2.75e-05  5.00e-05  3.84e-01  
 16  +4.4484e-01  +4.9018e-01  4.53e-02  9.89e-06  2.36e-03  1.57e-05  3.58e-05  4.55e-01  
 17  +4.3959e-01  +4.6632e-01  2.67e-02  5.54e-06  1.32e-03  3.75e-06  2.06e-05  8.39e-01  
 18  +4.3657e-01  +4.5342e-01  1.69e-02  3.45e-06  8.23e-04  1.27e-06  1.32e-05  8.31e-01  
 19  +4.3361e-01  +4.4152e-01  7.91e-03  1.59e-06  3.79e-04  4.73e-07  6.22e-06  8.76e-01  
 20  +4.3097e-01  +4.3142e-01  4.52e-04  9.00e-08  2.14e-05  2.41e-08  3.62e-07  9.80e-01  
 21  +4.3080e-01  +4.3081e-01  4.62e-06  9.19e-10  2.19e-07  2.45e-10  3.70e-09  9.90e-01  
 22  +4.3080e-01  +4.3080e-01  4.64e-08  9.24e-12  2.20e-09  2.47e-12  3.72e-11  9.90e-01  
 23  +4.3080e-01  +4.3080e-01  5.42e-10  1.08e-13  2.57e-11  2.90e-14  4.37e-13  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 353.1757ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:02:12 PM: Problem status: optimal
(CVXPY) Sep 20 08:02:12 PM: Optimal value: 4.308e-01
(CVXPY) Sep 20 08:02:12 PM: Compilation took 1.019e-01 seconds
(CVXPY) Sep 20 08:02:12 PM: Solver (including time spent in interface) took 3.718e-01 seconds
FULL MODEL:
  Accruacy: 0.5256
  Our objective: 0.05120000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0018)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.0018)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x8 = 0)            <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 1)                       <-- (term's our objective: 0.005)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x5 = 1)                                                        <-- (term's our objective: 0.0128)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.003)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.0032)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 27.976917505264282
Best over terms:
  Our final objective: 0.012799999999999978
    Its accruacy: 0.5064
    Its hamming distance: 11
  Shortest hamming distance: 2
    Its our objective: 0.0010000000000000466
  Highest accruacy: 0.5064
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

