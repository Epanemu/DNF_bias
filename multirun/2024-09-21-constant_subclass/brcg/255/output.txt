Command:
python test_script.py -s constant_subclass -d 7 -n 500 --seed 43 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.02
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 7.

Computed total variation: 0.368
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:48 PM: Your problem has 265 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:48 PM: Finished problem compilation (took 8.023e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 265
  constraints   = 515
  nnz(P)        = 0
  nnz(A)        = 2515
  cones (total) = 1
    : Nonnegative = 1,  numel = 515

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9967e-01  +2.5091e+02  2.50e+02  9.36e-01  2.26e+01  1.00e+00  1.01e+00   ------   
  1  +5.8736e-01  +5.2956e+01  5.24e+01  3.81e-01  1.38e+01  3.86e-03  5.48e-01  6.11e-01  
  2  +5.3483e-01  +6.6821e+00  6.15e+00  1.21e-01  5.49e+00  1.35e-02  2.42e-01  9.02e-01  
  3  +5.0156e-01  +1.3385e+00  8.37e-01  2.53e-02  1.13e+00  2.34e-05  1.90e-01  7.27e-01  
  4  +4.9990e-01  +6.5902e-01  1.59e-01  4.84e-03  2.22e-01  7.99e-06  3.93e-02  8.25e-01  
  5  +4.8771e-01  +6.8516e-01  1.97e-01  1.42e-03  6.68e-02  7.53e-05  4.48e-03  9.35e-01  
  6  +4.7567e-01  +5.6227e-01  8.66e-02  5.51e-04  2.58e-02  3.24e-05  1.85e-03  6.42e-01  
  7  +4.6626e-01  +5.0197e-01  3.57e-02  1.80e-04  8.41e-03  2.19e-05  6.42e-04  8.27e-01  
  8  +4.5955e-01  +4.6570e-01  6.15e-03  2.94e-05  1.37e-03  3.79e-06  1.10e-04  8.65e-01  
  9  +4.5819e-01  +4.5851e-01  3.19e-04  1.52e-06  7.08e-05  2.70e-07  5.74e-06  9.90e-01  
 10  +4.5810e-01  +4.5810e-01  3.19e-06  1.52e-08  7.09e-07  2.70e-09  5.75e-08  9.90e-01  
 11  +4.5810e-01  +4.5810e-01  3.19e-08  1.52e-10  7.09e-09  2.70e-11  5.75e-10  9.90e-01  
 12  +4.5810e-01  +4.5810e-01  3.19e-10  1.52e-12  7.09e-11  2.70e-13  5.75e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.054ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:48 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:48 PM: Optimal value: 4.581e-01
(CVXPY) Sep 20 07:38:48 PM: Compilation took 8.023e-03 seconds
(CVXPY) Sep 20 07:38:48 PM: Solver (including time spent in interface) took 4.025e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4581
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:48 PM: Your problem has 275 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:48 PM: Finished problem compilation (took 4.513e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 275
  constraints   = 525
  nnz(P)        = 0
  nnz(A)        = 2886
  cones (total) = 1
    : Nonnegative = 1,  numel = 525

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9933e-01  +2.5114e+02  2.51e+02  9.37e-01  2.31e+01  1.00e+00  1.01e+00   ------   
  1  +5.8491e-01  +5.3098e+01  5.25e+01  3.84e-01  1.40e+01  3.86e-03  5.51e-01  6.10e-01  
  2  +5.3213e-01  +6.4003e+00  5.87e+00  1.16e-01  5.33e+00  1.40e-02  2.34e-01  9.31e-01  
  3  +5.0130e-01  +1.3769e+00  8.76e-01  2.70e-02  1.22e+00  4.54e-04  1.71e-01  8.15e-01  
  4  +4.9833e-01  +8.4633e-01  3.48e-01  9.90e-03  4.62e-01  3.38e-04  4.77e-02  7.72e-01  
  5  +4.7799e-01  +8.4979e-01  3.72e-01  2.85e-03  1.36e-01  1.40e-03  9.46e-03  9.04e-01  
  6  +4.6386e-01  +6.7910e-01  2.15e-01  1.40e-03  6.68e-02  6.98e-04  5.18e-03  5.31e-01  
  7  +4.5491e-01  +5.5960e-01  1.05e-01  6.49e-04  3.08e-02  6.71e-05  2.57e-03  9.90e-01  
  8  +4.4925e-01  +5.1995e-01  7.07e-02  3.75e-04  1.78e-02  5.36e-05  1.47e-03  5.57e-01  
  9  +4.4668e-01  +5.0617e-01  5.95e-02  3.22e-04  1.53e-02  4.10e-05  1.32e-03  4.17e-01  
 10  +4.3885e-01  +4.6703e-01  2.82e-02  1.33e-04  6.35e-03  1.97e-05  5.79e-04  6.04e-01  
 11  +4.3328e-01  +4.3711e-01  3.82e-03  1.76e-05  8.41e-04  2.44e-06  8.37e-05  8.88e-01  
 12  +4.3232e-01  +4.3241e-01  8.50e-05  3.88e-07  1.86e-05  5.81e-08  1.89e-06  9.90e-01  
 13  +4.3230e-01  +4.3230e-01  8.49e-07  3.88e-09  1.86e-07  5.81e-10  1.89e-08  9.90e-01  
 14  +4.3230e-01  +4.3230e-01  8.49e-09  3.88e-11  1.86e-09  5.81e-12  1.90e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.7369ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:48 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:48 PM: Optimal value: 4.323e-01
(CVXPY) Sep 20 07:38:48 PM: Compilation took 4.513e-03 seconds
(CVXPY) Sep 20 07:38:48 PM: Solver (including time spent in interface) took 4.001e-03 seconds
Iteration: 2, Objective: 0.4323
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:48 PM: Your problem has 285 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:48 PM: Finished problem compilation (took 5.156e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 285
  constraints   = 535
  nnz(P)        = 0
  nnz(A)        = 3233
  cones (total) = 1
    : Nonnegative = 1,  numel = 535

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9909e-01  +2.5158e+02  2.51e+02  9.37e-01  2.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.8361e-01  +5.3208e+01  5.26e+01  3.88e-01  1.41e+01  3.85e-03  5.54e-01  6.09e-01  
  2  +5.3101e-01  +6.2974e+00  5.77e+00  1.14e-01  5.22e+00  1.42e-02  2.30e-01  9.45e-01  
  3  +5.0099e-01  +1.3698e+00  8.69e-01  2.70e-02  1.24e+00  6.27e-04  1.58e-01  8.81e-01  
  4  +4.9658e-01  +9.2826e-01  4.32e-01  1.08e-02  5.10e-01  6.76e-04  4.22e-02  7.87e-01  
  5  +4.7051e-01  +7.6937e-01  2.99e-01  2.04e-03  1.00e-01  2.19e-03  6.42e-03  8.97e-01  
  6  +4.5591e-01  +6.4230e-01  1.86e-01  1.10e-03  5.37e-02  1.29e-03  3.58e-03  5.31e-01  
  7  +4.4944e-01  +6.0889e-01  1.59e-01  7.97e-04  3.86e-02  1.17e-03  2.59e-03  3.30e-01  
  8  +4.4367e-01  +5.7163e-01  1.28e-01  6.50e-04  3.13e-02  5.80e-04  2.20e-03  4.04e-01  
  9  +4.2558e-01  +4.8147e-01  5.59e-02  2.30e-04  1.11e-02  2.46e-04  8.58e-04  6.46e-01  
 10  +4.1775e-01  +4.3955e-01  2.18e-02  8.85e-05  4.24e-03  2.14e-05  3.53e-04  9.90e-01  
 11  +4.1096e-01  +4.1258e-01  1.62e-03  6.38e-06  3.05e-04  1.41e-06  2.70e-05  9.28e-01  
 12  +4.1041e-01  +4.1042e-01  1.69e-05  6.62e-08  3.17e-06  1.45e-08  2.82e-07  9.90e-01  
 13  +4.1040e-01  +4.1040e-01  1.69e-07  6.62e-10  3.17e-08  1.45e-10  2.82e-09  9.90e-01  
 14  +4.1040e-01  +4.1040e-01  1.69e-09  6.62e-12  3.17e-10  1.45e-12  2.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6986ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:48 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:48 PM: Optimal value: 4.104e-01
(CVXPY) Sep 20 07:38:48 PM: Compilation took 5.156e-03 seconds
(CVXPY) Sep 20 07:38:48 PM: Solver (including time spent in interface) took 4.999e-03 seconds
Iteration: 3, Objective: 0.4104
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:48 PM: Your problem has 295 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:48 PM: Finished problem compilation (took 5.504e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 295
  constraints   = 545
  nnz(P)        = 0
  nnz(A)        = 3549
  cones (total) = 1
    : Nonnegative = 1,  numel = 545

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9884e-01  +2.5180e+02  2.51e+02  9.38e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +5.8076e-01  +5.3344e+01  5.28e+01  3.91e-01  1.41e+01  3.85e-03  5.56e-01  6.08e-01  
  2  +5.2822e-01  +6.0035e+00  5.48e+00  1.08e-01  4.99e+00  1.46e-02  2.20e-01  9.77e-01  
  3  +5.0166e-01  +1.6059e+00  1.10e+00  3.42e-02  1.59e+00  1.93e-03  1.43e-01  8.38e-01  
  4  +4.9049e-01  +1.0901e+00  6.00e-01  9.12e-03  4.48e-01  3.27e-03  2.75e-02  8.86e-01  
  5  +4.7281e-01  +8.7983e-01  4.07e-01  3.62e-03  1.79e-01  3.49e-03  1.10e-02  6.36e-01  
  6  +4.6318e-01  +7.9358e-01  3.30e-01  2.49e-03  1.23e-01  2.70e-03  7.75e-03  3.84e-01  
  7  +4.4940e-01  +6.8234e-01  2.33e-01  1.41e-03  6.92e-02  1.78e-03  4.57e-03  5.18e-01  
  8  +4.3936e-01  +6.2795e-01  1.89e-01  9.08e-04  4.46e-02  1.46e-03  3.01e-03  4.39e-01  
  9  +4.2621e-01  +5.4729e-01  1.21e-01  5.91e-04  2.89e-02  3.80e-04  2.08e-03  6.22e-01  
 10  +4.0458e-01  +4.3988e-01  3.53e-02  1.51e-04  7.37e-03  8.25e-05  5.95e-04  7.52e-01  
 11  +3.9520e-01  +3.9731e-01  2.11e-03  8.76e-06  4.27e-04  3.15e-06  3.79e-05  9.47e-01  
 12  +3.9451e-01  +3.9453e-01  2.17e-05  8.96e-08  4.37e-06  3.17e-08  3.93e-07  9.90e-01  
 13  +3.9450e-01  +3.9450e-01  2.17e-07  8.96e-10  4.37e-08  3.17e-10  3.93e-09  9.90e-01  
 14  +3.9450e-01  +3.9450e-01  2.17e-09  8.96e-12  4.37e-10  3.17e-12  3.93e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9745ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:48 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:48 PM: Optimal value: 3.945e-01
(CVXPY) Sep 20 07:38:48 PM: Compilation took 5.504e-03 seconds
(CVXPY) Sep 20 07:38:48 PM: Solver (including time spent in interface) took 5.008e-03 seconds
Iteration: 4, Objective: 0.3945
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:48 PM: Your problem has 305 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:48 PM: Finished problem compilation (took 5.110e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 305
  constraints   = 555
  nnz(P)        = 0
  nnz(A)        = 3680
  cones (total) = 1
    : Nonnegative = 1,  numel = 555

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9874e-01  +2.5162e+02  2.51e+02  9.39e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +5.7861e-01  +5.3406e+01  5.28e+01  3.94e-01  1.40e+01  3.85e-03  5.57e-01  6.07e-01  
  2  +5.2671e-01  +5.9161e+00  5.39e+00  1.06e-01  4.83e+00  1.49e-02  2.15e-01  9.90e-01  
  3  +5.0099e-01  +1.4234e+00  9.22e-01  2.87e-02  1.34e+00  1.41e-03  1.09e-01  9.71e-01  
  4  +4.8295e-01  +1.4111e+00  9.28e-01  9.01e-03  4.44e-01  4.27e-03  2.53e-02  8.64e-01  
  5  +4.6444e-01  +1.0785e+00  6.14e-01  4.54e-03  2.23e-01  3.02e-03  1.35e-02  5.09e-01  
  6  +4.4524e-01  +8.5098e-01  4.06e-01  2.45e-03  1.19e-01  1.95e-03  7.73e-03  4.96e-01  
  7  +4.3000e-01  +7.0397e-01  2.74e-01  1.51e-03  7.34e-02  1.08e-03  4.99e-03  4.84e-01  
  8  +4.0954e-01  +5.4705e-01  1.38e-01  6.76e-04  3.27e-02  4.49e-04  2.40e-03  6.30e-01  
  9  +3.9853e-01  +4.7216e-01  7.36e-02  3.55e-04  1.72e-02  5.83e-05  1.36e-03  9.90e-01  
 10  +3.8249e-01  +3.9532e-01  1.28e-02  5.84e-05  2.83e-03  8.53e-06  2.50e-04  8.55e-01  
 11  +3.7889e-01  +3.7946e-01  5.68e-04  2.53e-06  1.23e-04  3.89e-07  1.16e-05  9.83e-01  
 12  +3.7870e-01  +3.7871e-01  5.70e-06  2.54e-08  1.24e-06  3.90e-09  1.17e-07  9.90e-01  
 13  +3.7870e-01  +3.7870e-01  5.70e-08  2.54e-10  1.24e-08  3.90e-11  1.17e-09  9.90e-01  
 14  +3.7870e-01  +3.7870e-01  5.70e-10  2.54e-12  1.24e-10  3.90e-13  1.18e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.1979ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:49 PM: Optimal value: 3.787e-01
(CVXPY) Sep 20 07:38:49 PM: Compilation took 5.110e-03 seconds
(CVXPY) Sep 20 07:38:49 PM: Solver (including time spent in interface) took 5.001e-03 seconds
Iteration: 5, Objective: 0.3787
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:49 PM: Your problem has 315 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:49 PM: Finished problem compilation (took 5.236e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 315
  constraints   = 565
  nnz(P)        = 0
  nnz(A)        = 3829
  cones (total) = 1
    : Nonnegative = 1,  numel = 565

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9851e-01  +2.5180e+02  2.51e+02  9.39e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +5.7486e-01  +5.3496e+01  5.29e+01  3.96e-01  1.39e+01  3.85e-03  5.58e-01  6.06e-01  
  2  +5.2457e-01  +6.0275e+00  5.50e+00  1.05e-01  4.78e+00  1.53e-02  2.14e-01  9.90e-01  
  3  +5.0284e-01  +1.4368e+00  9.34e-01  2.57e-02  1.25e+00  2.28e-03  7.40e-02  8.72e-01  
  4  +4.9306e-01  +1.4827e+00  9.90e-01  1.12e-02  5.63e-01  4.96e-03  2.91e-02  6.72e-01  
  5  +4.7613e-01  +1.2342e+00  7.58e-01  6.18e-03  3.08e-01  4.31e-03  1.67e-02  4.87e-01  
  6  +4.5206e-01  +9.1119e-01  4.59e-01  3.07e-03  1.50e-01  1.81e-03  9.10e-03  6.18e-01  
  7  +4.4035e-01  +8.3535e-01  3.95e-01  2.22e-03  1.08e-01  1.53e-03  6.71e-03  3.58e-01  
  8  +4.1381e-01  +6.2009e-01  2.06e-01  1.14e-03  5.49e-02  1.96e-04  3.77e-03  8.15e-01  
  9  +3.9880e-01  +5.2858e-01  1.30e-01  6.67e-04  3.21e-02  1.21e-04  2.32e-03  4.09e-01  
 10  +3.8149e-01  +4.2932e-01  4.78e-02  2.31e-04  1.11e-02  4.21e-05  8.65e-04  8.22e-01  
 11  +3.7255e-01  +3.8553e-01  1.30e-02  6.06e-05  2.91e-03  1.14e-05  2.39e-04  7.73e-01  
 12  +3.6945e-01  +3.7126e-01  1.81e-03  8.32e-06  3.99e-04  1.56e-06  3.39e-05  8.86e-01  
 13  +3.6903e-01  +3.6944e-01  4.07e-04  1.83e-06  8.75e-05  3.53e-07  7.66e-06  8.32e-01  
 14  +3.6891e-01  +3.6892e-01  1.79e-05  7.96e-08  3.79e-06  1.56e-08  3.36e-07  9.87e-01  
 15  +3.6890e-01  +3.6890e-01  1.79e-07  7.97e-10  3.80e-08  1.56e-10  3.36e-09  9.90e-01  
 16  +3.6890e-01  +3.6890e-01  1.79e-09  7.99e-12  3.81e-10  1.57e-12  3.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.8432ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:49 PM: Optimal value: 3.689e-01
(CVXPY) Sep 20 07:38:49 PM: Compilation took 5.236e-03 seconds
(CVXPY) Sep 20 07:38:49 PM: Solver (including time spent in interface) took 6.001e-03 seconds
Iteration: 6, Objective: 0.3689
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:49 PM: Your problem has 325 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:49 PM: Finished problem compilation (took 4.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 325
  constraints   = 575
  nnz(P)        = 0
  nnz(A)        = 3941
  cones (total) = 1
    : Nonnegative = 1,  numel = 575

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9843e-01  +2.5184e+02  2.51e+02  9.40e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.7305e-01  +5.3559e+01  5.30e+01  3.99e-01  1.37e+01  3.86e-03  5.58e-01  6.06e-01  
  2  +5.2333e-01  +6.0802e+00  5.56e+00  1.05e-01  4.72e+00  1.54e-02  2.14e-01  9.90e-01  
  3  +5.0290e-01  +1.3711e+00  8.68e-01  2.22e-02  1.08e+00  2.46e-03  6.14e-02  8.56e-01  
  4  +4.9017e-01  +1.3949e+00  9.05e-01  8.35e-03  4.19e-01  6.04e-03  2.13e-02  7.15e-01  
  5  +4.7433e-01  +1.1755e+00  7.01e-01  5.80e-03  2.87e-01  3.64e-03  1.58e-02  3.87e-01  
  6  +4.4725e-01  +8.8479e-01  4.38e-01  2.70e-03  1.31e-01  2.10e-03  7.95e-03  5.99e-01  
  7  +4.3505e-01  +8.1194e-01  3.77e-01  2.13e-03  1.03e-01  1.56e-03  6.43e-03  3.17e-01  
  8  +4.0622e-01  +6.1824e-01  2.12e-01  1.13e-03  5.41e-02  4.73e-04  3.77e-03  6.24e-01  
  9  +3.8179e-01  +4.7297e-01  9.12e-02  4.57e-04  2.17e-02  1.71e-04  1.69e-03  5.99e-01  
 10  +3.7051e-01  +4.1639e-01  4.59e-02  2.18e-04  1.03e-02  7.69e-05  8.57e-04  6.03e-01  
 11  +3.6138e-01  +3.7568e-01  1.43e-02  6.32e-05  2.99e-03  2.24e-05  2.71e-04  7.29e-01  
 12  +3.5733e-01  +3.5806e-01  7.35e-04  3.17e-06  1.50e-04  1.02e-06  1.41e-05  9.57e-01  
 13  +3.5710e-01  +3.5711e-01  7.38e-06  3.18e-08  1.51e-06  1.02e-08  1.42e-07  9.90e-01  
 14  +3.5710e-01  +3.5710e-01  7.38e-08  3.18e-10  1.51e-08  1.02e-10  1.42e-09  9.90e-01  
 15  +3.5710e-01  +3.5710e-01  7.38e-10  3.18e-12  1.51e-10  1.02e-12  1.42e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.8946ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:49 PM: Optimal value: 3.571e-01
(CVXPY) Sep 20 07:38:49 PM: Compilation took 4.508e-03 seconds
(CVXPY) Sep 20 07:38:49 PM: Solver (including time spent in interface) took 5.997e-03 seconds
Iteration: 7, Objective: 0.3571
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:49 PM: Your problem has 335 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:49 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 335
  constraints   = 585
  nnz(P)        = 0
  nnz(A)        = 4073
  cones (total) = 1
    : Nonnegative = 1,  numel = 585

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9832e-01  +2.5193e+02  2.51e+02  9.40e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +5.7027e-01  +5.3647e+01  5.31e+01  4.01e-01  1.36e+01  3.86e-03  5.59e-01  6.05e-01  
  2  +5.2107e-01  +6.1748e+00  5.65e+00  1.05e-01  4.65e+00  1.57e-02  2.13e-01  9.90e-01  
  3  +5.0312e-01  +1.6566e+00  1.15e+00  2.50e-02  1.22e+00  4.00e-03  6.48e-02  7.43e-01  
  4  +4.8839e-01  +1.6900e+00  1.20e+00  1.10e-02  5.46e-01  7.66e-03  2.77e-02  6.69e-01  
  5  +4.6946e-01  +1.3629e+00  8.93e-01  6.90e-03  3.40e-01  5.08e-03  1.85e-02  4.14e-01  
  6  +4.4052e-01  +9.5849e-01  5.18e-01  3.45e-03  1.67e-01  1.97e-03  1.02e-02  5.89e-01  
  7  +4.2385e-01  +8.3673e-01  4.13e-01  2.43e-03  1.17e-01  1.51e-03  7.49e-03  3.21e-01  
  8  +4.0146e-01  +6.7291e-01  2.71e-01  1.52e-03  7.23e-02  5.84e-04  5.08e-03  6.26e-01  
  9  +3.8716e-01  +5.8326e-01  1.96e-01  1.04e-03  4.92e-02  3.96e-04  3.68e-03  3.23e-01  
 10  +3.6532e-01  +4.5346e-01  8.81e-02  4.40e-04  2.07e-02  1.44e-04  1.72e-03  6.32e-01  
 11  +3.5243e-01  +3.8519e-01  3.28e-02  1.57e-04  7.40e-03  4.54e-05  6.62e-04  7.24e-01  
 12  +3.4537e-01  +3.5221e-01  6.85e-03  3.16e-05  1.49e-03  8.55e-06  1.42e-04  8.34e-01  
 13  +3.4343e-01  +3.4355e-01  1.19e-04  5.42e-07  2.56e-05  1.42e-07  2.48e-06  9.84e-01  
 14  +3.4340e-01  +3.4340e-01  1.19e-06  5.42e-09  2.56e-07  1.42e-09  2.48e-08  9.90e-01  
 15  +3.4340e-01  +3.4340e-01  1.19e-08  5.42e-11  2.56e-09  1.42e-11  2.49e-10  9.90e-01  
 16  +3.4340e-01  +3.4340e-01  1.19e-10  5.42e-13  2.56e-11  1.42e-13  2.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.8508ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:49 PM: Optimal value: 3.434e-01
(CVXPY) Sep 20 07:38:49 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:38:49 PM: Solver (including time spent in interface) took 6.497e-03 seconds
Iteration: 8, Objective: 0.3434
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:49 PM: Your problem has 345 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:49 PM: Finished problem compilation (took 4.511e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 345
  constraints   = 595
  nnz(P)        = 0
  nnz(A)        = 4156
  cones (total) = 1
    : Nonnegative = 1,  numel = 595

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9827e-01  +2.5198e+02  2.51e+02  9.41e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +5.6769e-01  +5.3719e+01  5.32e+01  4.01e-01  1.34e+01  3.87e-03  5.58e-01  6.05e-01  
  2  +5.1973e-01  +6.2251e+00  5.71e+00  1.04e-01  4.57e+00  1.59e-02  2.12e-01  9.90e-01  
  3  +5.0239e-01  +1.7269e+00  1.22e+00  2.47e-02  1.20e+00  4.51e-03  6.31e-02  7.31e-01  
  4  +4.8625e-01  +1.7133e+00  1.23e+00  1.12e-02  5.55e-01  7.91e-03  2.81e-02  6.41e-01  
  5  +4.6621e-01  +1.4094e+00  9.43e-01  7.00e-03  3.43e-01  5.81e-03  1.85e-02  4.17e-01  
  6  +4.3899e-01  +1.0568e+00  6.18e-01  3.86e-03  1.86e-01  3.13e-03  1.11e-02  5.08e-01  
  7  +4.0935e-01  +7.9651e-01  3.87e-01  2.42e-03  1.14e-01  8.41e-04  7.77e-03  5.58e-01  
  8  +3.7055e-01  +5.2497e-01  1.54e-01  8.38e-04  3.92e-02  2.63e-04  3.11e-03  6.69e-01  
  9  +3.5282e-01  +4.3342e-01  8.06e-02  4.26e-04  1.98e-02  9.72e-05  1.78e-03  6.12e-01  
 10  +3.3744e-01  +3.5339e-01  1.59e-02  8.04e-05  3.74e-03  1.68e-05  3.78e-04  8.12e-01  
 11  +3.3382e-01  +3.3464e-01  8.23e-04  4.11e-06  1.91e-04  7.33e-07  2.02e-05  9.64e-01  
 12  +3.3360e-01  +3.3361e-01  9.18e-06  4.59e-08  2.13e-06  7.99e-09  2.27e-07  9.89e-01  
 13  +3.3360e-01  +3.3360e-01  9.18e-08  4.59e-10  2.13e-08  7.99e-11  2.27e-09  9.90e-01  
 14  +3.3360e-01  +3.3360e-01  9.18e-10  4.59e-12  2.13e-10  7.99e-13  2.27e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.074ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:49 PM: Optimal value: 3.336e-01
(CVXPY) Sep 20 07:38:49 PM: Compilation took 4.511e-03 seconds
(CVXPY) Sep 20 07:38:49 PM: Solver (including time spent in interface) took 5.000e-03 seconds
Iteration: 9, Objective: 0.3336
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:49 PM: Your problem has 355 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:49 PM: Finished problem compilation (took 5.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 355
  constraints   = 605
  nnz(P)        = 0
  nnz(A)        = 4234
  cones (total) = 1
    : Nonnegative = 1,  numel = 605

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9822e-01  +2.5212e+02  2.52e+02  9.41e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +5.6554e-01  +5.3759e+01  5.32e+01  4.02e-01  1.33e+01  3.88e-03  5.58e-01  6.05e-01  
  2  +5.1794e-01  +6.3035e+00  5.79e+00  1.03e-01  4.50e+00  1.61e-02  2.10e-01  9.90e-01  
  3  +4.9997e-01  +1.7648e+00  1.26e+00  2.26e-02  1.10e+00  5.23e-03  5.73e-02  7.58e-01  
  4  +4.7916e-01  +1.6631e+00  1.18e+00  9.87e-03  4.87e-01  8.73e-03  2.49e-02  6.30e-01  
  5  +4.5600e-01  +1.3123e+00  8.56e-01  6.13e-03  2.98e-01  5.02e-03  1.66e-02  4.60e-01  
  6  +4.2545e-01  +9.9386e-01  5.68e-01  3.47e-03  1.66e-01  2.41e-03  1.02e-02  5.47e-01  
  7  +3.8684e-01  +6.6529e-01  2.78e-01  1.61e-03  7.52e-02  7.62e-04  5.45e-03  5.80e-01  
  8  +3.5971e-01  +4.9628e-01  1.37e-01  7.50e-04  3.47e-02  3.12e-04  2.88e-03  5.38e-01  
  9  +3.3901e-01  +3.7779e-01  3.88e-02  2.07e-04  9.53e-03  6.78e-05  9.16e-04  7.46e-01  
 10  +3.3060e-01  +3.3403e-01  3.43e-03  1.78e-05  8.21e-04  4.43e-06  8.68e-05  9.32e-01  
 11  +3.2972e-01  +3.2980e-01  7.75e-05  4.00e-07  1.85e-05  7.53e-08  2.00e-06  9.86e-01  
 12  +3.2970e-01  +3.2970e-01  7.76e-07  4.01e-09  1.85e-07  7.53e-10  2.00e-08  9.90e-01  
 13  +3.2970e-01  +3.2970e-01  7.76e-09  4.01e-11  1.85e-09  7.54e-12  2.00e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.1788ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:49 PM: Optimal value: 3.297e-01
(CVXPY) Sep 20 07:38:49 PM: Compilation took 5.001e-03 seconds
(CVXPY) Sep 20 07:38:49 PM: Solver (including time spent in interface) took 6.512e-03 seconds
Iteration: 10, Objective: 0.3297
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:49 PM: Your problem has 365 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:49 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 365
  constraints   = 615
  nnz(P)        = 0
  nnz(A)        = 4337
  cones (total) = 1
    : Nonnegative = 1,  numel = 615

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9820e-01  +2.5211e+02  2.52e+02  9.42e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.6399e-01  +5.3838e+01  5.33e+01  4.04e-01  1.31e+01  3.88e-03  5.58e-01  6.04e-01  
  2  +5.1645e-01  +6.3508e+00  5.83e+00  1.03e-01  4.44e+00  1.62e-02  2.10e-01  9.90e-01  
  3  +4.9710e-01  +1.6897e+00  1.19e+00  1.97e-02  9.53e-01  5.55e-03  5.00e-02  8.00e-01  
  4  +4.7581e-01  +1.5485e+00  1.07e+00  9.32e-03  4.56e-01  8.10e-03  2.40e-02  5.79e-01  
  5  +4.5126e-01  +1.2415e+00  7.90e-01  5.61e-03  2.70e-01  5.11e-03  1.54e-02  4.77e-01  
  6  +4.2308e-01  +9.6943e-01  5.46e-01  3.36e-03  1.59e-01  3.12e-03  9.88e-03  4.31e-01  
  7  +3.9035e-01  +7.1089e-01  3.21e-01  1.89e-03  8.78e-02  1.27e-03  6.27e-03  4.98e-01  
  8  +3.5906e-01  +5.0267e-01  1.44e-01  8.00e-04  3.68e-02  4.49e-04  3.07e-03  5.70e-01  
  9  +3.3897e-01  +3.8669e-01  4.77e-02  2.58e-04  1.18e-02  1.08e-04  1.14e-03  7.26e-01  
 10  +3.2918e-01  +3.3458e-01  5.40e-03  2.83e-05  1.29e-03  6.56e-06  1.41e-04  9.41e-01  
 11  +3.2775e-01  +3.2791e-01  1.65e-04  8.52e-07  3.89e-05  1.48e-07  4.45e-06  9.80e-01  
 12  +3.2770e-01  +3.2770e-01  1.67e-06  8.64e-09  3.94e-07  1.50e-09  4.52e-08  9.90e-01  
 13  +3.2770e-01  +3.2770e-01  1.68e-08  8.67e-11  3.96e-09  1.50e-11  4.54e-10  9.90e-01  
 14  +3.2770e-01  +3.2770e-01  1.68e-10  8.68e-13  3.96e-11  1.51e-13  4.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.0776ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:49 PM: Optimal value: 3.277e-01
(CVXPY) Sep 20 07:38:49 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:38:49 PM: Solver (including time spent in interface) took 7.511e-03 seconds
Iteration: 11, Objective: 0.3277
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:49 PM: Your problem has 375 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:49 PM: Finished problem compilation (took 5.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 375
  constraints   = 625
  nnz(P)        = 0
  nnz(A)        = 4402
  cones (total) = 1
    : Nonnegative = 1,  numel = 625

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9812e-01  +2.5214e+02  2.52e+02  9.42e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.6134e-01  +5.3974e+01  5.34e+01  4.07e-01  1.30e+01  3.88e-03  5.60e-01  6.03e-01  
  2  +5.1427e-01  +6.4307e+00  5.92e+00  1.03e-01  4.40e+00  1.65e-02  2.11e-01  9.90e-01  
  3  +4.9465e-01  +1.8516e+00  1.36e+00  2.07e-02  9.95e-01  6.37e-03  5.24e-02  7.87e-01  
  4  +4.7136e-01  +1.6053e+00  1.13e+00  1.00e-02  4.85e-01  7.84e-03  2.61e-02  5.48e-01  
  5  +4.4631e-01  +1.2847e+00  8.38e-01  5.88e-03  2.80e-01  5.53e-03  1.62e-02  4.65e-01  
  6  +4.1398e-01  +9.5187e-01  5.38e-01  3.28e-03  1.54e-01  2.88e-03  9.91e-03  4.83e-01  
  7  +3.7636e-01  +6.3691e-01  2.61e-01  1.53e-03  7.00e-02  9.93e-04  5.35e-03  5.52e-01  
  8  +3.4775e-01  +4.4853e-01  1.01e-01  5.73e-04  2.60e-02  2.85e-04  2.35e-03  6.44e-01  
  9  +3.3455e-01  +3.7090e-01  3.63e-02  2.01e-04  9.06e-03  8.45e-05  9.15e-04  6.96e-01  
 10  +3.2881e-01  +3.4073e-01  1.19e-02  6.27e-05  2.83e-03  1.40e-05  3.15e-04  9.07e-01  
 11  +3.2584e-01  +3.2635e-01  5.06e-04  2.61e-06  1.18e-04  4.33e-07  1.38e-05  9.75e-01  
 12  +3.2570e-01  +3.2571e-01  5.60e-06  2.89e-08  1.30e-06  4.68e-09  1.54e-07  9.89e-01  
 13  +3.2570e-01  +3.2570e-01  5.60e-08  2.89e-10  1.30e-08  4.68e-11  1.54e-09  9.90e-01  
 14  +3.2570e-01  +3.2570e-01  5.60e-10  2.89e-12  1.30e-10  4.69e-13  1.54e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.7398ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:49 PM: Optimal value: 3.257e-01
(CVXPY) Sep 20 07:38:49 PM: Compilation took 5.004e-03 seconds
(CVXPY) Sep 20 07:38:49 PM: Solver (including time spent in interface) took 7.514e-03 seconds
Iteration: 12, Objective: 0.3257
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:49 PM: Your problem has 385 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:49 PM: Finished problem compilation (took 5.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 385
  constraints   = 635
  nnz(P)        = 0
  nnz(A)        = 4475
  cones (total) = 1
    : Nonnegative = 1,  numel = 635

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9811e-01  +2.5214e+02  2.52e+02  9.43e-01  2.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.5990e-01  +5.4016e+01  5.35e+01  4.08e-01  1.29e+01  3.89e-03  5.59e-01  6.03e-01  
  2  +5.1287e-01  +6.4559e+00  5.94e+00  1.02e-01  4.33e+00  1.66e-02  2.10e-01  9.90e-01  
  3  +4.9345e-01  +1.9590e+00  1.47e+00  2.16e-02  1.03e+00  6.76e-03  5.44e-02  7.74e-01  
  4  +4.6926e-01  +1.6572e+00  1.19e+00  1.05e-02  5.02e-01  7.82e-03  2.74e-02  5.37e-01  
  5  +4.4222e-01  +1.2954e+00  8.53e-01  5.90e-03  2.79e-01  5.17e-03  1.64e-02  5.05e-01  
  6  +4.1000e-01  +9.5522e-01  5.45e-01  3.37e-03  1.56e-01  2.46e-03  1.03e-02  4.94e-01  
  7  +3.7096e-01  +6.1068e-01  2.40e-01  1.41e-03  6.41e-02  7.57e-04  5.07e-03  5.92e-01  
  8  +3.4525e-01  +4.4224e-01  9.70e-02  5.52e-04  2.48e-02  2.37e-04  2.29e-03  6.47e-01  
  9  +3.3434e-01  +3.7587e-01  4.15e-02  2.32e-04  1.04e-02  8.28e-05  1.04e-03  6.62e-01  
 10  +3.2920e-01  +3.4572e-01  1.65e-02  9.09e-05  4.07e-03  2.12e-05  4.29e-04  8.27e-01  
 11  +3.2642e-01  +3.3106e-01  4.64e-03  2.54e-05  1.14e-03  5.46e-06  1.24e-04  7.57e-01  
 12  +3.2578e-01  +3.2779e-01  2.01e-03  1.09e-05  4.89e-04  2.07e-06  5.38e-05  6.82e-01  
 13  +3.2528e-01  +3.2535e-01  6.83e-05  3.71e-07  1.66e-05  6.26e-08  1.84e-06  9.74e-01  
 14  +3.2527e-01  +3.2527e-01  6.98e-07  3.79e-09  1.70e-07  6.40e-10  1.88e-08  9.90e-01  
 15  +3.2527e-01  +3.2527e-01  6.98e-09  3.79e-11  1.70e-09  6.40e-12  1.89e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.7704ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:49 PM: Optimal value: 3.253e-01
(CVXPY) Sep 20 07:38:49 PM: Compilation took 5.999e-03 seconds
(CVXPY) Sep 20 07:38:49 PM: Solver (including time spent in interface) took 8.514e-03 seconds
Iteration: 13, Objective: 0.3253
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:50 PM: Your problem has 395 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:50 PM: Finished problem compilation (took 6.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 395
  constraints   = 645
  nnz(P)        = 0
  nnz(A)        = 4548
  cones (total) = 1
    : Nonnegative = 1,  numel = 645

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9805e-01  +2.5220e+02  2.52e+02  9.43e-01  2.22e+01  1.00e+00  1.02e+00   ------   
  1  +5.5726e-01  +5.4129e+01  5.36e+01  4.09e-01  1.28e+01  3.89e-03  5.60e-01  6.02e-01  
  2  +5.1002e-01  +6.5339e+00  6.02e+00  1.02e-01  4.27e+00  1.69e-02  2.10e-01  9.90e-01  
  3  +4.8873e-01  +2.1022e+00  1.61e+00  2.16e-02  1.02e+00  7.68e-03  5.44e-02  7.75e-01  
  4  +4.5987e-01  +1.6170e+00  1.16e+00  9.91e-03  4.70e-01  7.23e-03  2.64e-02  5.50e-01  
  5  +4.2778e-01  +1.1314e+00  7.04e-01  4.79e-03  2.23e-01  3.85e-03  1.39e-02  5.71e-01  
  6  +3.8307e-01  +7.2699e-01  3.44e-01  2.14e-03  9.68e-02  4.46e-04  7.25e-03  7.50e-01  
  7  +3.5438e-01  +5.0887e-01  1.54e-01  9.24e-04  4.13e-02  1.72e-04  3.62e-03  6.03e-01  
  8  +3.4248e-01  +4.3732e-01  9.48e-02  5.44e-04  2.42e-02  1.02e-04  2.30e-03  4.46e-01  
  9  +3.2854e-01  +3.5584e-01  2.73e-02  1.50e-04  6.64e-03  2.55e-05  7.14e-04  7.67e-01  
 10  +3.2292e-01  +3.2642e-01  3.50e-03  1.85e-05  8.23e-04  2.57e-06  9.64e-05  9.40e-01  
 11  +3.2208e-01  +3.2240e-01  3.16e-04  1.66e-06  7.38e-05  2.19e-07  8.87e-06  9.25e-01  
 12  +3.2200e-01  +3.2200e-01  3.45e-06  1.82e-08  8.06e-07  2.37e-09  9.72e-08  9.89e-01  
 13  +3.2200e-01  +3.2200e-01  3.45e-08  1.82e-10  8.06e-09  2.37e-11  9.72e-10  9.90e-01  
 14  +3.2200e-01  +3.2200e-01  3.46e-10  1.82e-12  8.07e-11  2.38e-13  9.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.7612ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:50 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:50 PM: Optimal value: 3.220e-01
(CVXPY) Sep 20 07:38:50 PM: Compilation took 6.005e-03 seconds
(CVXPY) Sep 20 07:38:50 PM: Solver (including time spent in interface) took 8.011e-03 seconds
Iteration: 14, Objective: 0.3220
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:50 PM: Your problem has 405 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:50 PM: Finished problem compilation (took 5.883e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 405
  constraints   = 655
  nnz(P)        = 0
  nnz(A)        = 4618
  cones (total) = 1
    : Nonnegative = 1,  numel = 655

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9803e-01  +2.5220e+02  2.52e+02  9.44e-01  2.21e+01  1.00e+00  1.02e+00   ------   
  1  +5.5640e-01  +5.4270e+01  5.37e+01  4.13e-01  1.27e+01  3.88e-03  5.65e-01  5.99e-01  
  2  +5.0960e-01  +6.5854e+00  6.08e+00  1.03e-01  4.28e+00  1.71e-02  2.14e-01  9.90e-01  
  3  +4.8811e-01  +2.1213e+00  1.63e+00  2.20e-02  1.03e+00  7.73e-03  5.56e-02  7.81e-01  
  4  +4.5864e-01  +1.6373e+00  1.18e+00  1.01e-02  4.74e-01  7.36e-03  2.71e-02  5.47e-01  
  5  +4.2689e-01  +1.1595e+00  7.33e-01  5.00e-03  2.31e-01  4.19e-03  1.45e-02  5.45e-01  
  6  +3.9180e-01  +8.1025e-01  4.18e-01  2.84e-03  1.27e-01  8.41e-04  9.49e-03  6.06e-01  
  7  +3.5317e-01  +4.9692e-01  1.44e-01  8.79e-04  3.89e-02  2.13e-04  3.48e-03  7.00e-01  
  8  +3.4412e-01  +4.4466e-01  1.01e-01  5.96e-04  2.63e-02  1.41e-04  2.50e-03  3.73e-01  
  9  +3.3111e-01  +3.6895e-01  3.78e-02  2.14e-04  9.43e-03  4.41e-05  1.00e-03  7.29e-01  
 10  +3.2551e-01  +3.3997e-01  1.45e-02  7.86e-05  3.45e-03  1.57e-05  3.96e-04  6.60e-01  
 11  +3.2230e-01  +3.2346e-01  1.16e-03  6.19e-06  2.72e-04  1.08e-06  3.31e-05  9.32e-01  
 12  +3.2201e-01  +3.2203e-01  2.49e-05  1.32e-07  5.82e-06  2.13e-08  7.15e-07  9.81e-01  
 13  +3.2200e-01  +3.2200e-01  2.49e-07  1.32e-09  5.82e-08  2.13e-10  7.15e-09  9.90e-01  
 14  +3.2200e-01  +3.2200e-01  2.49e-09  1.32e-11  5.82e-10  2.13e-12  7.15e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.6026ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:50 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:50 PM: Optimal value: 3.220e-01
(CVXPY) Sep 20 07:38:50 PM: Compilation took 5.883e-03 seconds
(CVXPY) Sep 20 07:38:50 PM: Solver (including time spent in interface) took 9.512e-03 seconds
Iteration: 15, Objective: 0.3220
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:50 PM: Your problem has 408 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:50 PM: Finished problem compilation (took 6.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 408
  constraints   = 658
  nnz(P)        = 0
  nnz(A)        = 4639
  cones (total) = 1
    : Nonnegative = 1,  numel = 658

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9802e-01  +2.5220e+02  2.52e+02  9.44e-01  2.20e+01  1.00e+00  1.02e+00   ------   
  1  +5.5664e-01  +5.4257e+01  5.37e+01  4.13e-01  1.27e+01  3.88e-03  5.64e-01  6.00e-01  
  2  +5.0965e-01  +6.5628e+00  6.05e+00  1.03e-01  4.25e+00  1.70e-02  2.14e-01  9.90e-01  
  3  +4.8796e-01  +2.1248e+00  1.64e+00  2.20e-02  1.03e+00  7.75e-03  5.59e-02  7.80e-01  
  4  +4.6037e-01  +1.6746e+00  1.21e+00  1.07e-02  5.01e-01  7.38e-03  2.87e-02  5.20e-01  
  5  +4.2894e-01  +1.2172e+00  7.88e-01  5.39e-03  2.48e-01  4.40e-03  1.55e-02  5.60e-01  
  6  +3.9175e-01  +8.2602e-01  4.34e-01  2.85e-03  1.28e-01  1.05e-03  9.42e-03  6.13e-01  
  7  +3.5043e-01  +4.7714e-01  1.27e-01  7.71e-04  3.40e-02  1.86e-04  3.09e-03  7.53e-01  
  8  +3.4093e-01  +4.2884e-01  8.79e-02  5.16e-04  2.27e-02  1.08e-04  2.20e-03  5.26e-01  
  9  +3.2828e-01  +3.5569e-01  2.74e-02  1.56e-04  6.83e-03  2.99e-05  7.39e-04  7.27e-01  
 10  +3.2371e-01  +3.3055e-01  6.84e-03  3.83e-05  1.68e-03  6.13e-06  1.92e-04  8.44e-01  
 11  +3.2245e-01  +3.2424e-01  1.79e-03  9.92e-06  4.35e-04  1.49e-06  5.12e-05  7.81e-01  
 12  +3.2219e-01  +3.2288e-01  6.95e-04  3.84e-06  1.68e-04  4.95e-07  2.00e-05  7.89e-01  
 13  +3.2201e-01  +3.2204e-01  3.50e-05  1.93e-07  8.48e-06  2.48e-08  1.02e-06  9.50e-01  
 14  +3.2200e-01  +3.2200e-01  3.53e-07  1.95e-09  8.53e-08  2.49e-10  1.02e-08  9.90e-01  
 15  +3.2200e-01  +3.2200e-01  3.53e-09  1.95e-11  8.55e-10  2.50e-12  1.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.0626ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:50 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:50 PM: Optimal value: 3.220e-01
(CVXPY) Sep 20 07:38:50 PM: Compilation took 6.000e-03 seconds
(CVXPY) Sep 20 07:38:50 PM: Solver (including time spent in interface) took 1.101e-02 seconds
FULL MODEL:
  Accruacy: 0.586
  Our objective: 0.17200000000000004

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.02)
 OR (x3 = 1 AND x4 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.072)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.517653465270996
Best over terms:
  Our final objective: 0.07200000000000002
    Its accruacy: 0.536
    Its hamming distance: 8
  Shortest hamming distance: 3
    Its our objective: 0.008000000000000007
  Highest accruacy: 0.536
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

