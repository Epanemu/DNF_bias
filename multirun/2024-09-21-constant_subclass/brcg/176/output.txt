Command:
python test_script.py -s constant_subclass -d 5 -n 500 --seed 56 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.048
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 5.

Computed total variation: 0.16799999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:58 PM: Your problem has 261 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:58 PM: Finished problem compilation (took 7.513e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 261
  constraints   = 511
  nnz(P)        = 0
  nnz(A)        = 2011
  cones (total) = 1
    : Nonnegative = 1,  numel = 511

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9955e-01  +2.5062e+02  2.50e+02  9.33e-01  2.00e+01  1.00e+00  1.01e+00   ------   
  1  +5.9888e-01  +5.0495e+01  4.99e+01  3.44e-01  1.14e+01  3.99e-03  5.05e-01  6.45e-01  
  2  +5.4332e-01  +7.3195e+00  6.78e+00  1.16e-01  4.72e+00  1.01e-02  2.26e-01  8.06e-01  
  3  +5.0143e-01  +1.2633e+00  7.62e-01  2.27e-02  8.99e-01  3.70e-04  1.98e-01  5.14e-01  
  4  +5.0046e-01  +6.5484e-01  1.54e-01  4.68e-03  1.90e-01  6.44e-05  5.22e-02  7.70e-01  
  5  +4.9984e-01  +5.8985e-01  9.00e-02  2.47e-03  1.01e-01  7.17e-05  1.43e-02  8.87e-01  
  6  +4.9261e-01  +5.8094e-01  8.83e-02  4.34e-04  1.81e-02  5.61e-04  1.51e-03  9.15e-01  
  7  +4.8312e-01  +5.2237e-01  3.93e-02  1.87e-04  7.79e-03  7.33e-05  7.30e-04  6.75e-01  
  8  +4.7523e-01  +4.8456e-01  9.33e-03  3.89e-05  1.62e-03  4.01e-06  1.66e-04  9.81e-01  
  9  +4.7276e-01  +4.7465e-01  1.90e-03  7.75e-06  3.22e-04  1.69e-06  3.41e-05  9.90e-01  
 10  +4.7211e-01  +4.7213e-01  2.13e-05  8.70e-08  3.61e-06  1.85e-08  3.87e-07  9.89e-01  
 11  +4.7210e-01  +4.7210e-01  2.13e-07  8.70e-10  3.61e-08  1.85e-10  3.87e-09  9.90e-01  
 12  +4.7210e-01  +4.7210e-01  2.13e-09  8.70e-12  3.61e-10  1.85e-12  3.87e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0942ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:58 PM: Optimal value: 4.721e-01
(CVXPY) Sep 20 07:30:58 PM: Compilation took 7.513e-03 seconds
(CVXPY) Sep 20 07:30:58 PM: Solver (including time spent in interface) took 2.999e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4721
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:58 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:58 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 2367
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9934e-01  +2.5131e+02  2.51e+02  9.34e-01  2.04e+01  1.00e+00  1.01e+00   ------   
  1  +5.9655e-01  +5.0664e+01  5.01e+01  3.47e-01  1.16e+01  3.98e-03  5.09e-01  6.45e-01  
  2  +5.4107e-01  +7.0843e+00  6.54e+00  1.12e-01  4.59e+00  1.04e-02  2.18e-01  8.30e-01  
  3  +5.0179e-01  +1.3911e+00  8.89e-01  2.68e-02  1.08e+00  8.32e-04  1.88e-01  5.30e-01  
  4  +5.0001e-01  +7.6470e-01  2.65e-01  7.96e-03  3.30e-01  3.30e-04  5.61e-02  7.68e-01  
  5  +4.9413e-01  +8.1001e-01  3.16e-01  4.33e-03  1.83e-01  1.18e-03  1.46e-02  8.19e-01  
  6  +4.8171e-01  +6.9924e-01  2.18e-01  1.53e-03  6.52e-02  1.64e-03  5.03e-03  6.65e-01  
  7  +4.8515e-01  +7.2675e-01  2.42e-01  1.56e-03  6.66e-02  1.84e-03  4.96e-03  1.02e-01  
  8  +4.7928e-01  +6.6331e-01  1.84e-01  1.05e-03  4.49e-02  7.77e-04  3.37e-03  6.13e-01  
  9  +4.6918e-01  +6.0460e-01  1.35e-01  6.28e-04  2.69e-02  6.05e-04  2.05e-03  4.30e-01  
 10  +4.5823e-01  +5.4094e-01  8.27e-02  3.53e-04  1.51e-02  4.92e-05  1.19e-03  9.09e-01  
 11  +4.4090e-01  +4.6517e-01  2.43e-02  9.40e-05  4.04e-03  2.33e-05  3.40e-04  9.90e-01  
 12  +4.3278e-01  +4.3393e-01  1.15e-03  4.35e-06  1.88e-04  7.55e-07  1.67e-05  9.65e-01  
 13  +4.3231e-01  +4.3232e-01  1.23e-05  4.66e-08  2.02e-06  7.96e-09  1.82e-07  9.90e-01  
 14  +4.3230e-01  +4.3230e-01  1.23e-07  4.65e-10  2.02e-08  7.96e-11  1.82e-09  9.90e-01  
 15  +4.3230e-01  +4.3230e-01  1.23e-09  4.65e-12  2.02e-10  7.96e-13  1.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7696ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:58 PM: Optimal value: 4.323e-01
(CVXPY) Sep 20 07:30:58 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:30:58 PM: Solver (including time spent in interface) took 4.000e-03 seconds
Iteration: 2, Objective: 0.4323
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:58 PM: Your problem has 281 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:58 PM: Finished problem compilation (took 5.204e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 281
  constraints   = 531
  nnz(P)        = 0
  nnz(A)        = 2649
  cones (total) = 1
    : Nonnegative = 1,  numel = 531

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +2.5107e+02  2.51e+02  9.35e-01  2.07e+01  1.00e+00  1.01e+00   ------   
  1  +5.9427e-01  +5.0875e+01  5.03e+01  3.53e-01  1.17e+01  3.97e-03  5.13e-01  6.41e-01  
  2  +5.3973e-01  +6.9574e+00  6.42e+00  1.11e-01  4.55e+00  1.08e-02  2.17e-01  8.45e-01  
  3  +5.0115e-01  +1.3202e+00  8.19e-01  2.50e-02  1.02e+00  7.18e-04  1.80e-01  6.18e-01  
  4  +4.9960e-01  +8.3957e-01  3.40e-01  1.02e-02  4.23e-01  4.10e-04  6.52e-02  6.78e-01  
  5  +4.8307e-01  +1.0897e+00  6.07e-01  4.08e-03  1.75e-01  2.50e-03  1.29e-02  9.87e-01  
  6  +4.6912e-01  +7.7557e-01  3.06e-01  1.68e-03  7.19e-02  1.24e-03  5.54e-03  6.21e-01  
  7  +4.6636e-01  +6.7166e-01  2.05e-01  9.70e-04  4.16e-02  2.92e-04  3.19e-03  8.49e-01  
  8  +4.4482e-01  +5.2439e-01  7.96e-02  3.52e-04  1.50e-02  7.08e-05  1.27e-03  7.91e-01  
  9  +4.3985e-01  +5.0297e-01  6.31e-02  2.66e-04  1.13e-02  5.82e-05  9.78e-04  3.60e-01  
 10  +4.2495e-01  +4.3761e-01  1.27e-02  5.01e-05  2.13e-03  1.12e-05  2.03e-04  9.50e-01  
 11  +4.2073e-01  +4.2135e-01  6.15e-04  2.41e-06  1.02e-04  5.60e-07  1.02e-05  9.84e-01  
 12  +4.2050e-01  +4.2051e-01  6.19e-06  2.42e-08  1.03e-06  5.62e-09  1.03e-07  9.90e-01  
 13  +4.2050e-01  +4.2050e-01  6.19e-08  2.42e-10  1.03e-08  5.62e-11  1.03e-09  9.90e-01  
 14  +4.2050e-01  +4.2050e-01  6.19e-10  2.42e-12  1.03e-10  5.62e-13  1.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.561ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:58 PM: Optimal value: 4.205e-01
(CVXPY) Sep 20 07:30:58 PM: Compilation took 5.204e-03 seconds
(CVXPY) Sep 20 07:30:58 PM: Solver (including time spent in interface) took 4.004e-03 seconds
Iteration: 3, Objective: 0.4205
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:58 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:58 PM: Finished problem compilation (took 5.504e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 2789
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +2.5107e+02  2.51e+02  9.35e-01  2.07e+01  1.00e+00  1.01e+00   ------   
  1  +5.9344e-01  +5.1034e+01  5.04e+01  3.56e-01  1.17e+01  3.97e-03  5.15e-01  6.39e-01  
  2  +5.3905e-01  +6.8921e+00  6.35e+00  1.10e-01  4.50e+00  1.09e-02  2.17e-01  8.51e-01  
  3  +5.0098e-01  +1.3057e+00  8.05e-01  2.47e-02  1.00e+00  6.83e-04  1.77e-01  6.48e-01  
  4  +4.9941e-01  +8.4997e-01  3.51e-01  1.04e-02  4.34e-01  4.20e-04  6.40e-02  6.91e-01  
  5  +4.7918e-01  +9.9863e-01  5.19e-01  3.23e-03  1.39e-01  2.70e-03  1.03e-02  9.75e-01  
  6  +4.6477e-01  +7.8182e-01  3.17e-01  1.57e-03  6.74e-02  1.67e-03  5.18e-03  5.50e-01  
  7  +4.4652e-01  +5.8425e-01  1.38e-01  6.16e-04  2.63e-02  4.67e-04  2.17e-03  6.98e-01  
  8  +4.3511e-01  +5.1025e-01  7.51e-02  3.13e-04  1.33e-02  2.20e-04  1.16e-03  5.88e-01  
  9  +4.3059e-01  +4.8685e-01  5.63e-02  2.28e-04  9.72e-03  1.58e-04  8.64e-04  3.00e-01  
 10  +4.1975e-01  +4.2899e-01  9.24e-03  3.68e-05  1.56e-03  9.88e-06  1.50e-04  9.71e-01  
 11  +4.1697e-01  +4.1820e-01  1.23e-03  4.87e-06  2.07e-04  1.22e-06  2.06e-05  9.89e-01  
 12  +4.1652e-01  +4.1656e-01  4.05e-05  1.60e-07  6.80e-06  3.74e-08  6.87e-07  9.69e-01  
 13  +4.1650e-01  +4.1650e-01  4.05e-07  1.60e-09  6.81e-08  3.73e-10  6.89e-09  9.90e-01  
 14  +4.1650e-01  +4.1650e-01  4.05e-09  1.60e-11  6.81e-10  3.73e-12  6.89e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.1477ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:58 PM: Optimal value: 4.165e-01
(CVXPY) Sep 20 07:30:58 PM: Compilation took 5.504e-03 seconds
(CVXPY) Sep 20 07:30:58 PM: Solver (including time spent in interface) took 4.009e-03 seconds
Iteration: 4, Objective: 0.4165
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:58 PM: Your problem has 290 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:58 PM: Finished problem compilation (took 4.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 290
  constraints   = 540
  nnz(P)        = 0
  nnz(A)        = 2809
  cones (total) = 1
    : Nonnegative = 1,  numel = 540

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9918e-01  +2.5108e+02  2.51e+02  9.36e-01  2.07e+01  1.00e+00  1.01e+00   ------   
  1  +5.9344e-01  +5.1018e+01  5.04e+01  3.56e-01  1.17e+01  3.97e-03  5.15e-01  6.39e-01  
  2  +5.3903e-01  +6.8878e+00  6.35e+00  1.10e-01  4.49e+00  1.09e-02  2.17e-01  8.51e-01  
  3  +5.0100e-01  +1.3081e+00  8.07e-01  2.48e-02  1.01e+00  6.86e-04  1.77e-01  6.45e-01  
  4  +4.9943e-01  +8.4981e-01  3.50e-01  1.04e-02  4.34e-01  4.19e-04  6.43e-02  6.88e-01  
  5  +4.7908e-01  +9.8574e-01  5.07e-01  3.15e-03  1.35e-01  2.71e-03  1.00e-02  9.73e-01  
  6  +4.6405e-01  +7.6964e-01  3.06e-01  1.50e-03  6.42e-02  1.68e-03  4.95e-03  5.55e-01  
  7  +4.4645e-01  +5.8166e-01  1.35e-01  6.00e-04  2.56e-02  4.52e-04  2.12e-03  7.13e-01  
  8  +4.3600e-01  +5.1575e-01  7.98e-02  3.32e-04  1.41e-02  2.38e-04  1.22e-03  5.29e-01  
  9  +4.3114e-01  +4.8995e-01  5.88e-02  2.38e-04  1.01e-02  1.68e-04  8.99e-04  3.13e-01  
 10  +4.1997e-01  +4.2953e-01  9.57e-03  3.82e-05  1.62e-03  8.26e-06  1.55e-04  9.90e-01  
 11  +4.1701e-01  +4.1837e-01  1.36e-03  5.39e-06  2.29e-04  1.33e-06  2.28e-05  9.79e-01  
 12  +4.1652e-01  +4.1657e-01  5.01e-05  1.98e-07  8.42e-06  4.55e-08  8.51e-07  9.65e-01  
 13  +4.1650e-01  +4.1650e-01  5.02e-07  1.99e-09  8.44e-08  4.55e-10  8.55e-09  9.90e-01  
 14  +4.1650e-01  +4.1650e-01  5.02e-09  1.99e-11  8.44e-10  4.55e-12  8.55e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.2505ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:58 PM: Optimal value: 4.165e-01
(CVXPY) Sep 20 07:30:58 PM: Compilation took 4.510e-03 seconds
(CVXPY) Sep 20 07:30:58 PM: Solver (including time spent in interface) took 4.004e-03 seconds
Iteration: 5, Objective: 0.4165
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:58 PM: Your problem has 293 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:58 PM: Finished problem compilation (took 4.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 293
  constraints   = 543
  nnz(P)        = 0
  nnz(A)        = 2889
  cones (total) = 1
    : Nonnegative = 1,  numel = 543

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9918e-01  +2.5107e+02  2.51e+02  9.36e-01  2.07e+01  1.00e+00  1.01e+00   ------   
  1  +5.9329e-01  +5.1038e+01  5.04e+01  3.57e-01  1.17e+01  3.97e-03  5.15e-01  6.39e-01  
  2  +5.3882e-01  +6.8632e+00  6.32e+00  1.10e-01  4.47e+00  1.09e-02  2.17e-01  8.53e-01  
  3  +5.0106e-01  +1.3184e+00  8.17e-01  2.52e-02  1.02e+00  7.08e-04  1.77e-01  6.43e-01  
  4  +4.9945e-01  +8.7573e-01  3.76e-01  1.12e-02  4.66e-01  4.55e-04  6.69e-02  6.84e-01  
  5  +4.8029e-01  +1.1450e+00  6.65e-01  4.14e-03  1.78e-01  2.78e-03  1.34e-02  9.79e-01  
  6  +4.6345e-01  +8.2214e-01  3.59e-01  1.82e-03  7.80e-02  1.56e-03  6.12e-03  5.63e-01  
  7  +4.4968e-01  +6.5387e-01  2.04e-01  9.55e-04  4.09e-02  7.78e-04  3.37e-03  5.11e-01  
  8  +4.3694e-01  +5.3025e-01  9.33e-02  4.09e-04  1.75e-02  3.22e-04  1.51e-03  6.38e-01  
  9  +4.3380e-01  +5.0256e-01  6.88e-02  2.93e-04  1.25e-02  1.45e-04  1.09e-03  5.90e-01  
 10  +4.2210e-01  +4.4327e-01  2.12e-02  8.44e-05  3.59e-03  3.96e-05  3.35e-04  7.50e-01  
 11  +4.1811e-01  +4.2360e-01  5.49e-03  2.18e-05  9.29e-04  9.39e-06  8.95e-05  7.78e-01  
 12  +4.1716e-01  +4.1914e-01  1.99e-03  7.90e-06  3.36e-04  2.80e-06  3.30e-05  7.84e-01  
 13  +4.1654e-01  +4.1665e-01  1.09e-04  4.32e-07  1.84e-05  1.34e-07  1.84e-06  9.49e-01  
 14  +4.1650e-01  +4.1650e-01  1.17e-06  4.63e-09  1.97e-07  1.35e-09  2.00e-08  9.90e-01  
 15  +4.1650e-01  +4.1650e-01  1.17e-08  4.63e-11  1.97e-09  1.35e-11  2.00e-10  9.90e-01  
 16  +4.1650e-01  +4.1650e-01  1.17e-10  4.63e-13  1.97e-11  1.36e-13  2.00e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.4482ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:58 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:58 PM: Optimal value: 4.165e-01
(CVXPY) Sep 20 07:30:58 PM: Compilation took 4.508e-03 seconds
(CVXPY) Sep 20 07:30:58 PM: Solver (including time spent in interface) took 4.001e-03 seconds
FULL MODEL:
  Accruacy: 0.57
  Our objective: 0.13999999999999996

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0)            <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1) <-- (term's our objective: 0.008)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1)                       <-- (term's our objective: 0.048)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.5662217140197754
Best over terms:
  Our final objective: 0.05999999999999997
    Its accruacy: 0.53
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.05999999999999997
  Highest accruacy: 0.53
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

