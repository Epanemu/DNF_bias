Command:
python test_script.py -s constant_subclass -d 9 -n 500 --seed 34 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 9.

Computed total variation: 0.6759999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:48 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:48 PM: Finished problem compilation (took 7.512e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 3019
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9978e-01  +2.5085e+02  2.50e+02  9.38e-01  2.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.8028e-01  +5.4651e+01  5.41e+01  4.07e-01  1.58e+01  3.78e-03  5.77e-01  5.86e-01  
  2  +5.2885e-01  +6.3306e+00  5.80e+00  1.29e-01  6.34e+00  1.68e-02  2.65e-01  9.69e-01  
  3  +5.0336e-01  +1.5473e+00  1.04e+00  3.28e-02  1.60e+00  4.01e-05  2.00e-01  7.38e-01  
  4  +5.0050e-01  +6.7078e-01  1.70e-01  5.47e-03  2.76e-01  9.22e-06  4.79e-02  7.85e-01  
  5  +4.9843e-01  +6.6469e-01  1.66e-01  3.15e-03  1.62e-01  3.00e-05  1.14e-02  8.28e-01  
  6  +4.9007e-01  +5.9885e-01  1.09e-01  7.62e-04  3.95e-02  6.72e-05  2.48e-03  7.84e-01  
  7  +4.8174e-01  +5.4452e-01  6.28e-02  3.78e-04  1.95e-02  3.83e-05  1.29e-03  6.24e-01  
  8  +4.7256e-01  +5.0032e-01  2.78e-02  1.28e-04  6.60e-03  1.96e-05  5.00e-04  8.05e-01  
  9  +4.6608e-01  +4.7243e-01  6.35e-03  2.61e-05  1.35e-03  4.40e-06  1.11e-04  8.29e-01  
 10  +4.6424e-01  +4.6464e-01  4.00e-04  1.61e-06  8.30e-05  3.50e-07  7.04e-06  9.90e-01  
 11  +4.6410e-01  +4.6411e-01  4.02e-06  1.62e-08  8.33e-07  3.51e-09  7.08e-08  9.90e-01  
 12  +4.6410e-01  +4.6410e-01  4.02e-08  1.62e-10  8.33e-09  3.52e-11  7.09e-10  9.90e-01  
 13  +4.6410e-01  +4.6410e-01  4.02e-10  1.62e-12  8.33e-11  3.52e-13  7.10e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6704ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:48 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:48 PM: Optimal value: 4.641e-01
(CVXPY) Sep 20 07:56:48 PM: Compilation took 7.512e-03 seconds
(CVXPY) Sep 20 07:56:48 PM: Solver (including time spent in interface) took 5.004e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4641
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:49 PM: Your problem has 279 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:49 PM: Finished problem compilation (took 5.516e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 279
  constraints   = 529
  nnz(P)        = 0
  nnz(A)        = 3314
  cones (total) = 1
    : Nonnegative = 1,  numel = 529

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +2.5141e+02  2.51e+02  9.39e-01  2.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.7685e-01  +5.4767e+01  5.42e+01  4.10e-01  1.58e+01  3.78e-03  5.80e-01  5.86e-01  
  2  +5.2592e-01  +6.2623e+00  5.74e+00  1.25e-01  6.16e+00  1.73e-02  2.57e-01  9.90e-01  
  3  +5.0342e-01  +1.3278e+00  8.24e-01  2.89e-02  1.45e+00  1.97e-04  1.17e-01  9.77e-01  
  4  +4.9595e-01  +9.3737e-01  4.41e-01  7.40e-03  3.87e-01  3.83e-04  2.21e-02  8.88e-01  
  5  +4.7915e-01  +7.9187e-01  3.13e-01  2.43e-03  1.28e-01  5.96e-04  7.23e-03  6.88e-01  
  6  +4.6449e-01  +6.8354e-01  2.19e-01  1.39e-03  7.26e-02  4.08e-04  4.35e-03  4.76e-01  
  7  +4.5115e-01  +6.2695e-01  1.76e-01  8.27e-04  4.30e-02  3.48e-04  2.70e-03  4.99e-01  
  8  +4.2705e-01  +5.0285e-01  7.58e-02  3.25e-04  1.67e-02  3.16e-05  1.21e-03  9.90e-01  
  9  +4.0892e-01  +4.2284e-01  1.39e-02  5.55e-05  2.85e-03  9.24e-06  2.28e-04  9.24e-01  
 10  +4.0491e-01  +4.0655e-01  1.64e-03  6.50e-06  3.33e-04  1.58e-06  2.78e-05  9.90e-01  
 11  +4.0431e-01  +4.0432e-01  1.66e-05  6.58e-08  3.37e-06  1.59e-08  2.83e-07  9.90e-01  
 12  +4.0430e-01  +4.0430e-01  1.66e-07  6.58e-10  3.37e-08  1.59e-10  2.83e-09  9.90e-01  
 13  +4.0430e-01  +4.0430e-01  1.66e-09  6.58e-12  3.37e-10  1.59e-12  2.83e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.7002ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:49 PM: Optimal value: 4.043e-01
(CVXPY) Sep 20 07:56:49 PM: Compilation took 5.516e-03 seconds
(CVXPY) Sep 20 07:56:49 PM: Solver (including time spent in interface) took 4.536e-03 seconds
Iteration: 2, Objective: 0.4043
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:49 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:49 PM: Finished problem compilation (took 4.997e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 3584
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9930e-01  +2.5123e+02  2.51e+02  9.39e-01  2.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.7497e-01  +5.4766e+01  5.42e+01  4.13e-01  1.57e+01  3.79e-03  5.79e-01  5.86e-01  
  2  +5.2434e-01  +6.3446e+00  5.82e+00  1.26e-01  6.12e+00  1.76e-02  2.56e-01  9.90e-01  
  3  +5.0524e-01  +1.4344e+00  9.29e-01  3.15e-02  1.61e+00  1.28e-03  9.90e-02  8.65e-01  
  4  +5.0307e-01  +1.4369e+00  9.34e-01  1.92e-02  1.01e+00  2.06e-03  5.22e-02  5.43e-01  
  5  +4.9009e-01  +1.2505e+00  7.60e-01  6.09e-03  3.25e-01  3.72e-03  1.63e-02  7.42e-01  
  6  +4.7214e-01  +9.5442e-01  4.82e-01  3.26e-03  1.72e-01  1.81e-03  9.32e-03  5.46e-01  
  7  +4.5370e-01  +7.8030e-01  3.27e-01  1.86e-03  9.71e-02  7.75e-04  5.64e-03  6.39e-01  
  8  +4.3067e-01  +6.3016e-01  1.99e-01  9.33e-04  4.85e-02  3.90e-04  3.06e-03  6.10e-01  
  9  +4.2087e-01  +5.6026e-01  1.39e-01  6.63e-04  3.46e-02  1.30e-04  2.22e-03  8.54e-01  
 10  +4.1059e-01  +5.1245e-01  1.02e-01  4.46e-04  2.34e-02  9.82e-05  1.52e-03  3.48e-01  
 11  +3.9858e-01  +4.5702e-01  5.84e-02  2.39e-04  1.27e-02  6.02e-05  8.41e-04  8.33e-01  
 12  +3.9515e-01  +4.4247e-01  4.73e-02  1.91e-04  1.02e-02  4.94e-05  6.81e-04  3.83e-01  
 13  +3.8765e-01  +4.1323e-01  2.56e-02  1.00e-04  5.36e-03  2.64e-05  3.67e-04  4.78e-01  
 14  +3.8749e-01  +4.1235e-01  2.49e-02  9.76e-05  5.21e-03  2.58e-05  3.58e-04  1.05e-01  
 15  +3.7990e-01  +3.8329e-01  3.39e-03  1.29e-05  6.93e-04  3.40e-06  4.90e-05  8.69e-01  
 16  +3.7871e-01  +3.7875e-01  3.81e-05  1.45e-07  7.77e-06  3.80e-08  5.53e-07  9.89e-01  
 17  +3.7870e-01  +3.7870e-01  3.81e-07  1.45e-09  7.77e-08  3.80e-10  5.53e-09  9.90e-01  
 18  +3.7870e-01  +3.7870e-01  3.81e-09  1.45e-11  7.77e-10  3.80e-12  5.53e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.3869ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:49 PM: Optimal value: 3.787e-01
(CVXPY) Sep 20 07:56:49 PM: Compilation took 4.997e-03 seconds
(CVXPY) Sep 20 07:56:49 PM: Solver (including time spent in interface) took 6.524e-03 seconds
Iteration: 3, Objective: 0.3787
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:49 PM: Your problem has 299 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:49 PM: Finished problem compilation (took 5.997e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 299
  constraints   = 549
  nnz(P)        = 0
  nnz(A)        = 3793
  cones (total) = 1
    : Nonnegative = 1,  numel = 549

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +2.5146e+02  2.51e+02  9.40e-01  2.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.7332e-01  +5.4807e+01  5.42e+01  4.15e-01  1.56e+01  3.79e-03  5.79e-01  5.86e-01  
  2  +5.2312e-01  +6.4102e+00  5.89e+00  1.25e-01  6.06e+00  1.78e-02  2.55e-01  9.90e-01  
  3  +5.0579e-01  +1.4462e+00  9.40e-01  2.99e-02  1.55e+00  1.70e-03  8.73e-02  8.28e-01  
  4  +5.0549e-01  +1.4816e+00  9.76e-01  2.40e-02  1.26e+00  2.20e-03  6.48e-02  2.95e-01  
  5  +5.0264e-01  +1.4635e+00  9.61e-01  2.09e-02  1.09e+00  1.62e-03  6.19e-02  2.74e-01  
  6  +4.8892e-01  +1.2601e+00  7.71e-01  5.41e-03  2.92e-01  4.18e-03  1.41e-02  7.90e-01  
  7  +4.7354e-01  +1.0534e+00  5.80e-01  3.63e-03  1.94e-01  2.72e-03  9.88e-03  3.81e-01  
  8  +4.5458e-01  +8.6164e-01  4.07e-01  2.26e-03  1.19e-01  1.44e-03  6.46e-03  4.94e-01  
  9  +4.2653e-01  +6.5602e-01  2.29e-01  1.05e-03  5.46e-02  6.71e-04  3.23e-03  6.23e-01  
 10  +4.0640e-01  +5.5036e-01  1.44e-01  6.01e-04  3.12e-02  2.41e-04  1.95e-03  6.95e-01  
 11  +3.8046e-01  +4.1596e-01  3.55e-02  1.47e-04  7.56e-03  4.53e-05  5.26e-04  8.02e-01  
 12  +3.7184e-01  +3.7616e-01  4.31e-03  1.77e-05  9.11e-04  5.22e-06  6.61e-05  8.79e-01  
 13  +3.7089e-01  +3.7173e-01  8.44e-04  3.47e-06  1.78e-04  9.25e-07  1.32e-05  9.26e-01  
 14  +3.7064e-01  +3.7078e-01  1.33e-04  5.42e-07  2.77e-05  1.44e-07  2.08e-06  8.75e-01  
 15  +3.7060e-01  +3.7060e-01  1.43e-06  5.85e-09  2.99e-07  1.55e-09  2.24e-08  9.89e-01  
 16  +3.7060e-01  +3.7060e-01  1.43e-08  5.85e-11  2.99e-09  1.55e-11  2.24e-10  9.90e-01  
 17  +3.7060e-01  +3.7060e-01  1.43e-10  5.85e-13  3.00e-11  1.56e-13  2.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.6012ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:49 PM: Optimal value: 3.706e-01
(CVXPY) Sep 20 07:56:49 PM: Compilation took 5.997e-03 seconds
(CVXPY) Sep 20 07:56:49 PM: Solver (including time spent in interface) took 5.998e-03 seconds
Iteration: 4, Objective: 0.3706
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:49 PM: Your problem has 309 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:49 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 309
  constraints   = 559
  nnz(P)        = 0
  nnz(A)        = 3934
  cones (total) = 1
    : Nonnegative = 1,  numel = 559

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +2.5146e+02  2.51e+02  9.40e-01  2.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.7010e-01  +5.4768e+01  5.42e+01  4.15e-01  1.54e+01  3.80e-03  5.78e-01  5.87e-01  
  2  +5.2088e-01  +6.5418e+00  6.02e+00  1.24e-01  5.94e+00  1.81e-02  2.51e-01  9.90e-01  
  3  +5.0577e-01  +1.6165e+00  1.11e+00  3.02e-02  1.57e+00  3.06e-03  8.04e-02  7.48e-01  
  4  +5.0555e-01  +1.6932e+00  1.19e+00  2.66e-02  1.40e+00  3.62e-03  6.81e-02  2.21e-01  
  5  +5.0160e-01  +1.9157e+00  1.41e+00  2.26e-02  1.18e+00  3.36e-03  5.87e-02  5.12e-01  
  6  +4.8104e-01  +1.5894e+00  1.11e+00  6.66e-03  3.58e-01  6.66e-03  1.68e-02  7.31e-01  
  7  +4.5170e-01  +1.1195e+00  6.68e-01  3.78e-03  1.99e-01  2.59e-03  1.04e-02  5.11e-01  
  8  +4.3271e-01  +9.1891e-01  4.86e-01  2.62e-03  1.37e-01  1.44e-03  7.53e-03  4.13e-01  
  9  +3.9952e-01  +6.4296e-01  2.43e-01  1.13e-03  5.82e-02  5.48e-04  3.51e-03  6.89e-01  
 10  +3.8520e-01  +5.4681e-01  1.62e-01  8.16e-04  4.17e-02  1.43e-04  2.76e-03  8.28e-01  
 11  +3.6229e-01  +4.3151e-01  6.92e-02  3.13e-04  1.59e-02  6.26e-05  1.12e-03  7.12e-01  
 12  +3.4667e-01  +3.5271e-01  6.04e-03  2.66e-05  1.35e-03  4.85e-06  1.03e-04  9.60e-01  
 13  +3.4515e-01  +3.4620e-01  1.05e-03  4.60e-06  2.33e-04  9.22e-07  1.82e-05  9.14e-01  
 14  +3.4487e-01  +3.4507e-01  2.00e-04  8.69e-07  4.39e-05  1.83e-07  3.50e-06  9.23e-01  
 15  +3.4480e-01  +3.4480e-01  2.14e-06  9.29e-09  4.69e-07  1.95e-09  3.75e-08  9.89e-01  
 16  +3.4480e-01  +3.4480e-01  2.14e-08  9.30e-11  4.69e-09  1.95e-11  3.75e-10  9.90e-01  
 17  +3.4480e-01  +3.4480e-01  2.15e-10  9.31e-13  4.70e-11  1.96e-13  3.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.9154ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:49 PM: Optimal value: 3.448e-01
(CVXPY) Sep 20 07:56:49 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:56:49 PM: Solver (including time spent in interface) took 7.534e-03 seconds
Iteration: 5, Objective: 0.3448
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:49 PM: Your problem has 319 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:49 PM: Finished problem compilation (took 4.923e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 319
  constraints   = 569
  nnz(P)        = 0
  nnz(A)        = 4072
  cones (total) = 1
    : Nonnegative = 1,  numel = 569

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9904e-01  +2.5150e+02  2.51e+02  9.41e-01  2.48e+01  1.00e+00  1.01e+00   ------   
  1  +5.6765e-01  +5.4796e+01  5.42e+01  4.18e-01  1.52e+01  3.80e-03  5.78e-01  5.87e-01  
  2  +5.1892e-01  +6.6563e+00  6.14e+00  1.24e-01  5.86e+00  1.85e-02  2.49e-01  9.90e-01  
  3  +5.0437e-01  +1.5193e+00  1.01e+00  2.50e-02  1.31e+00  3.32e-03  6.53e-02  7.71e-01  
  4  +4.9337e-01  +1.9945e+00  1.50e+00  1.30e-02  6.97e-01  7.26e-03  3.15e-02  8.12e-01  
  5  +4.6390e-01  +1.4744e+00  1.01e+00  5.23e-03  2.80e-01  7.07e-03  1.32e-02  6.30e-01  
  6  +4.1772e-01  +8.5441e-01  4.37e-01  2.23e-03  1.16e-01  7.35e-04  6.33e-03  7.18e-01  
  7  +3.8358e-01  +6.5095e-01  2.67e-01  1.31e-03  6.72e-02  2.37e-04  4.12e-03  8.03e-01  
  8  +3.4362e-01  +4.1294e-01  6.93e-02  3.24e-04  1.64e-02  4.76e-05  1.17e-03  7.93e-01  
  9  +3.3294e-01  +3.5904e-01  2.61e-02  1.21e-04  6.10e-03  1.85e-05  4.61e-04  6.43e-01  
 10  +3.2947e-01  +3.4398e-01  1.45e-02  6.48e-05  3.28e-03  1.17e-05  2.57e-04  6.53e-01  
 11  +3.2568e-01  +3.2775e-01  2.08e-03  9.04e-06  4.58e-04  1.69e-06  3.77e-05  8.86e-01  
 12  +3.2503e-01  +3.2510e-01  7.69e-05  3.33e-07  1.69e-05  5.82e-08  1.42e-06  9.65e-01  
 13  +3.2500e-01  +3.2500e-01  7.71e-07  3.33e-09  1.69e-07  5.82e-10  1.43e-08  9.90e-01  
 14  +3.2500e-01  +3.2500e-01  7.71e-09  3.33e-11  1.69e-09  5.82e-12  1.43e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.6851ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:49 PM: Optimal value: 3.250e-01
(CVXPY) Sep 20 07:56:49 PM: Compilation took 4.923e-03 seconds
(CVXPY) Sep 20 07:56:49 PM: Solver (including time spent in interface) took 7.140e-03 seconds
Iteration: 6, Objective: 0.3250
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:49 PM: Your problem has 329 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:49 PM: Finished problem compilation (took 5.172e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 329
  constraints   = 579
  nnz(P)        = 0
  nnz(A)        = 4214
  cones (total) = 1
    : Nonnegative = 1,  numel = 579

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9888e-01  +2.5168e+02  2.51e+02  9.41e-01  2.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.6487e-01  +5.4868e+01  5.43e+01  4.20e-01  1.51e+01  3.80e-03  5.79e-01  5.87e-01  
  2  +5.1677e-01  +6.7824e+00  6.27e+00  1.24e-01  5.80e+00  1.88e-02  2.48e-01  9.90e-01  
  3  +5.0330e-01  +1.7500e+00  1.25e+00  2.78e-02  1.46e+00  4.49e-03  7.00e-02  7.41e-01  
  4  +4.8060e-01  +1.8019e+00  1.32e+00  9.27e-03  5.01e-01  1.11e-02  2.24e-02  7.74e-01  
  5  +4.4533e-01  +1.2126e+00  7.67e-01  4.20e-03  2.23e-01  4.69e-03  1.08e-02  6.66e-01  
  6  +4.1262e-01  +9.2165e-01  5.09e-01  2.62e-03  1.37e-01  2.08e-03  7.25e-03  4.72e-01  
  7  +3.6439e-01  +5.7087e-01  2.06e-01  1.02e-03  5.19e-02  4.92e-04  3.21e-03  6.42e-01  
  8  +3.3412e-01  +4.0551e-01  7.14e-02  3.39e-04  1.71e-02  1.34e-04  1.18e-03  7.36e-01  
  9  +3.2308e-01  +3.5362e-01  3.05e-02  1.38e-04  6.99e-03  5.27e-05  5.08e-04  6.68e-01  
 10  +3.1717e-01  +3.2949e-01  1.23e-02  5.25e-05  2.68e-03  1.83e-05  2.02e-04  7.56e-01  
 11  +3.1363e-01  +3.1505e-01  1.42e-03  5.96e-06  3.04e-04  1.75e-06  2.41e-05  9.21e-01  
 12  +3.1312e-01  +3.1318e-01  5.57e-05  2.31e-07  1.17e-05  5.64e-08  9.65e-07  9.75e-01  
 13  +3.1310e-01  +3.1310e-01  5.60e-07  2.31e-09  1.18e-07  5.66e-10  9.71e-09  9.90e-01  
 14  +3.1310e-01  +3.1310e-01  5.60e-09  2.31e-11  1.18e-09  5.66e-12  9.71e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.9458ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:49 PM: Optimal value: 3.131e-01
(CVXPY) Sep 20 07:56:49 PM: Compilation took 5.172e-03 seconds
(CVXPY) Sep 20 07:56:49 PM: Solver (including time spent in interface) took 6.997e-03 seconds
Iteration: 7, Objective: 0.3131
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:49 PM: Your problem has 339 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:49 PM: Finished problem compilation (took 5.892e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 339
  constraints   = 589
  nnz(P)        = 0
  nnz(A)        = 4351
  cones (total) = 1
    : Nonnegative = 1,  numel = 589

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9881e-01  +2.5164e+02  2.51e+02  9.42e-01  2.46e+01  1.00e+00  1.01e+00   ------   
  1  +5.6267e-01  +5.4924e+01  5.44e+01  4.22e-01  1.49e+01  3.81e-03  5.79e-01  5.86e-01  
  2  +5.1540e-01  +6.8459e+00  6.33e+00  1.23e-01  5.70e+00  1.90e-02  2.47e-01  9.90e-01  
  3  +5.0137e-01  +1.5194e+00  1.02e+00  2.15e-02  1.13e+00  4.16e-03  5.46e-02  8.00e-01  
  4  +4.8182e-01  +1.6126e+00  1.13e+00  8.84e-03  4.75e-01  9.51e-03  2.14e-02  7.11e-01  
  5  +4.5308e-01  +1.3537e+00  9.01e-01  4.90e-03  2.61e-01  9.23e-03  1.23e-02  4.79e-01  
  6  +4.1154e-01  +9.6647e-01  5.55e-01  2.80e-03  1.46e-01  3.75e-03  7.60e-03  4.90e-01  
  7  +3.5367e-01  +5.5484e-01  2.01e-01  9.98e-04  5.04e-02  5.57e-04  3.18e-03  6.82e-01  
  8  +3.3002e-01  +4.4590e-01  1.16e-01  5.50e-04  2.76e-02  2.69e-04  1.90e-03  5.39e-01  
  9  +3.1549e-01  +3.7708e-01  6.16e-02  2.85e-04  1.43e-02  1.30e-04  1.05e-03  5.27e-01  
 10  +3.0216e-01  +3.1657e-01  1.44e-02  6.49e-05  3.27e-03  2.55e-05  2.59e-04  8.18e-01  
 11  +2.9840e-01  +3.0153e-01  3.13e-03  1.37e-05  6.96e-04  4.04e-06  5.81e-05  8.95e-01  
 12  +2.9733e-01  +2.9742e-01  8.51e-05  3.71e-07  1.88e-05  9.82e-08  1.61e-06  9.77e-01  
 13  +2.9730e-01  +2.9730e-01  8.80e-07  3.83e-09  1.95e-07  1.01e-09  1.66e-08  9.90e-01  
 14  +2.9730e-01  +2.9730e-01  8.80e-09  3.83e-11  1.95e-09  1.01e-11  1.66e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.748ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:49 PM: Optimal value: 2.973e-01
(CVXPY) Sep 20 07:56:49 PM: Compilation took 5.892e-03 seconds
(CVXPY) Sep 20 07:56:49 PM: Solver (including time spent in interface) took 7.512e-03 seconds
Iteration: 8, Objective: 0.2973
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:49 PM: Your problem has 349 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:49 PM: Finished problem compilation (took 5.093e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 349
  constraints   = 599
  nnz(P)        = 0
  nnz(A)        = 4463
  cones (total) = 1
    : Nonnegative = 1,  numel = 599

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9871e-01  +2.5178e+02  2.51e+02  9.42e-01  2.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.6007e-01  +5.5027e+01  5.45e+01  4.24e-01  1.48e+01  3.81e-03  5.80e-01  5.86e-01  
  2  +5.1360e-01  +6.9364e+00  6.42e+00  1.23e-01  5.64e+00  1.93e-02  2.47e-01  9.90e-01  
  3  +4.9973e-01  +1.5734e+00  1.07e+00  2.12e-02  1.11e+00  4.68e-03  5.34e-02  8.04e-01  
  4  +4.7468e-01  +1.5842e+00  1.11e+00  8.08e-03  4.33e-01  1.05e-02  1.96e-02  7.10e-01  
  5  +4.4608e-01  +1.3752e+00  9.29e-01  5.00e-03  2.66e-01  1.03e-02  1.25e-02  4.03e-01  
  6  +3.8991e-01  +8.2658e-01  4.37e-01  2.36e-03  1.21e-01  9.08e-05  6.73e-03  7.33e-01  
  7  +3.4232e-01  +5.3243e-01  1.90e-01  9.73e-04  4.88e-02  5.38e-05  3.14e-03  5.95e-01  
  8  +3.1996e-01  +4.2527e-01  1.05e-01  5.12e-04  2.56e-02  4.12e-05  1.78e-03  5.21e-01  
  9  +3.0470e-01  +3.5574e-01  5.10e-02  2.39e-04  1.20e-02  2.87e-05  8.90e-04  6.50e-01  
 10  +2.9356e-01  +3.0607e-01  1.25e-02  5.74e-05  2.87e-03  7.44e-06  2.30e-04  7.81e-01  
 11  +2.9000e-01  +2.9140e-01  1.40e-03  6.27e-06  3.15e-04  9.73e-07  2.68e-05  9.38e-01  
 12  +2.8951e-01  +2.8955e-01  3.79e-05  1.69e-07  8.48e-06  2.49e-08  7.39e-07  9.75e-01  
 13  +2.8950e-01  +2.8950e-01  3.81e-07  1.69e-09  8.51e-08  2.50e-10  7.42e-09  9.90e-01  
 14  +2.8950e-01  +2.8950e-01  3.81e-09  1.69e-11  8.52e-10  2.50e-12  7.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.1595ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:49 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:49 PM: Optimal value: 2.895e-01
(CVXPY) Sep 20 07:56:49 PM: Compilation took 5.093e-03 seconds
(CVXPY) Sep 20 07:56:49 PM: Solver (including time spent in interface) took 8.040e-03 seconds
Iteration: 9, Objective: 0.2895
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:50 PM: Your problem has 359 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:50 PM: Finished problem compilation (took 5.606e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 359
  constraints   = 609
  nnz(P)        = 0
  nnz(A)        = 4543
  cones (total) = 1
    : Nonnegative = 1,  numel = 609

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9864e-01  +2.5183e+02  2.51e+02  9.43e-01  2.42e+01  1.00e+00  1.02e+00   ------   
  1  +5.5646e-01  +5.5089e+01  5.45e+01  4.24e-01  1.46e+01  3.82e-03  5.78e-01  5.86e-01  
  2  +5.1100e-01  +7.0445e+00  6.53e+00  1.22e-01  5.54e+00  1.96e-02  2.45e-01  9.90e-01  
  3  +4.9676e-01  +1.8268e+00  1.33e+00  2.37e-02  1.23e+00  6.03e-03  5.84e-02  7.81e-01  
  4  +4.6440e-01  +1.6218e+00  1.16e+00  8.30e-03  4.40e-01  1.14e-02  2.03e-02  6.92e-01  
  5  +4.3463e-01  +1.4212e+00  9.87e-01  5.32e-03  2.80e-01  1.10e-02  1.34e-02  3.84e-01  
  6  +3.7638e-01  +8.2107e-01  4.45e-01  2.39e-03  1.21e-01  9.77e-05  6.85e-03  7.55e-01  
  7  +3.3855e-01  +5.8183e-01  2.43e-01  1.26e-03  6.27e-02  6.27e-05  4.00e-03  4.58e-01  
  8  +3.1046e-01  +4.2942e-01  1.19e-01  5.99e-04  2.95e-02  3.78e-05  2.09e-03  5.30e-01  
  9  +2.9051e-01  +3.2736e-01  3.69e-02  1.82e-04  8.91e-03  1.67e-05  7.00e-04  7.47e-01  
 10  +2.8394e-01  +2.9759e-01  1.36e-02  6.55e-05  3.22e-03  6.99e-06  2.71e-04  6.74e-01  
 11  +2.8002e-01  +2.8097e-01  9.46e-04  4.39e-06  2.17e-04  7.07e-07  1.95e-05  9.89e-01  
 12  +2.7971e-01  +2.7973e-01  1.99e-05  9.23e-08  4.56e-06  1.43e-08  4.15e-07  9.80e-01  
 13  +2.7970e-01  +2.7970e-01  2.00e-07  9.26e-10  4.58e-08  1.43e-10  4.16e-09  9.90e-01  
 14  +2.7970e-01  +2.7970e-01  2.00e-09  9.27e-12  4.58e-10  1.44e-12  4.17e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.9404ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:50 PM: Optimal value: 2.797e-01
(CVXPY) Sep 20 07:56:50 PM: Compilation took 5.606e-03 seconds
(CVXPY) Sep 20 07:56:50 PM: Solver (including time spent in interface) took 9.015e-03 seconds
Iteration: 10, Objective: 0.2797
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:50 PM: Your problem has 369 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:50 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 369
  constraints   = 619
  nnz(P)        = 0
  nnz(A)        = 4630
  cones (total) = 1
    : Nonnegative = 1,  numel = 619

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9850e-01  +2.5190e+02  2.51e+02  9.43e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.5155e-01  +5.5190e+01  5.46e+01  4.25e-01  1.44e+01  3.83e-03  5.78e-01  5.85e-01  
  2  +5.0684e-01  +7.2006e+00  6.69e+00  1.20e-01  5.44e+00  2.01e-02  2.42e-01  9.90e-01  
  3  +4.9023e-01  +1.9363e+00  1.45e+00  2.24e-02  1.16e+00  7.28e-03  5.47e-02  7.95e-01  
  4  +4.5078e-01  +1.6207e+00  1.17e+00  8.60e-03  4.50e-01  1.05e-02  2.11e-02  6.76e-01  
  5  +4.2088e-01  +1.4411e+00  1.02e+00  5.72e-03  2.96e-01  9.63e-03  1.46e-02  3.97e-01  
  6  +3.6107e-01  +8.1075e-01  4.50e-01  2.44e-03  1.22e-01  8.79e-05  7.11e-03  7.95e-01  
  7  +3.2946e-01  +6.1279e-01  2.83e-01  1.50e-03  7.37e-02  7.05e-05  4.77e-03  3.81e-01  
  8  +2.9798e-01  +4.3462e-01  1.37e-01  7.02e-04  3.43e-02  4.70e-05  2.52e-03  5.53e-01  
  9  +2.7407e-01  +3.1048e-01  3.64e-02  1.82e-04  8.85e-03  1.78e-05  7.55e-04  7.95e-01  
 10  +2.6665e-01  +2.7565e-01  9.00e-03  4.37e-05  2.13e-03  6.90e-06  1.99e-04  9.73e-01  
 11  +2.6402e-01  +2.6440e-01  3.84e-04  1.86e-06  9.07e-05  2.69e-07  8.77e-06  9.56e-01  
 12  +2.6390e-01  +2.6391e-01  5.78e-06  2.79e-08  1.37e-06  4.00e-09  1.33e-07  9.87e-01  
 13  +2.6390e-01  +2.6390e-01  5.78e-08  2.79e-10  1.37e-08  4.00e-11  1.33e-09  9.90e-01  
 14  +2.6390e-01  +2.6390e-01  5.78e-10  2.80e-12  1.37e-10  4.00e-13  1.33e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.4621ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:50 PM: Optimal value: 2.639e-01
(CVXPY) Sep 20 07:56:50 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:56:50 PM: Solver (including time spent in interface) took 1.003e-02 seconds
Iteration: 11, Objective: 0.2639
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:50 PM: Your problem has 379 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:50 PM: Finished problem compilation (took 5.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 379
  constraints   = 629
  nnz(P)        = 0
  nnz(A)        = 4694
  cones (total) = 1
    : Nonnegative = 1,  numel = 629

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9827e-01  +2.5212e+02  2.52e+02  9.44e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +5.4599e-01  +5.5344e+01  5.48e+01  4.26e-01  1.43e+01  3.84e-03  5.78e-01  5.85e-01  
  2  +5.0271e-01  +7.4055e+00  6.90e+00  1.19e-01  5.36e+00  2.07e-02  2.40e-01  9.90e-01  
  3  +4.8322e-01  +1.9199e+00  1.44e+00  2.00e-02  1.04e+00  8.05e-03  4.84e-02  8.17e-01  
  4  +4.4015e-01  +1.6395e+00  1.20e+00  8.77e-03  4.56e-01  1.03e-02  2.16e-02  6.40e-01  
  5  +3.9853e-01  +1.3119e+00  9.13e-01  5.11e-03  2.62e-01  7.35e-03  1.32e-02  5.07e-01  
  6  +3.3021e-01  +6.4079e-01  3.11e-01  1.76e-03  8.61e-02  1.64e-04  5.39e-03  7.92e-01  
  7  +2.9397e-01  +4.5276e-01  1.59e-01  8.51e-04  4.12e-02  9.23e-05  2.97e-03  5.61e-01  
  8  +2.6936e-01  +3.2549e-01  5.61e-02  2.90e-04  1.40e-02  4.02e-05  1.16e-03  8.09e-01  
  9  +2.5806e-01  +2.7125e-01  1.32e-02  6.57e-05  3.19e-03  9.76e-06  2.92e-04  8.58e-01  
 10  +2.5446e-01  +2.5534e-01  8.74e-04  4.30e-06  2.09e-04  5.85e-07  2.02e-05  9.37e-01  
 11  +2.5421e-01  +2.5422e-01  1.68e-05  8.27e-08  4.02e-06  1.07e-08  3.95e-07  9.82e-01  
 12  +2.5420e-01  +2.5420e-01  1.68e-07  8.29e-10  4.02e-08  1.07e-10  3.96e-09  9.90e-01  
 13  +2.5420e-01  +2.5420e-01  1.69e-09  8.29e-12  4.03e-10  1.07e-12  3.96e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.9764ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:50 PM: Optimal value: 2.542e-01
(CVXPY) Sep 20 07:56:50 PM: Compilation took 5.008e-03 seconds
(CVXPY) Sep 20 07:56:50 PM: Solver (including time spent in interface) took 9.514e-03 seconds
Iteration: 12, Objective: 0.2542
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:50 PM: Your problem has 389 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:50 PM: Finished problem compilation (took 7.340e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 389
  constraints   = 639
  nnz(P)        = 0
  nnz(A)        = 4781
  cones (total) = 1
    : Nonnegative = 1,  numel = 639

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9816e-01  +2.5216e+02  2.52e+02  9.44e-01  2.38e+01  1.00e+00  1.02e+00   ------   
  1  +5.4237e-01  +5.5412e+01  5.49e+01  4.27e-01  1.41e+01  3.85e-03  5.78e-01  5.84e-01  
  2  +4.9895e-01  +7.5351e+00  7.04e+00  1.17e-01  5.28e+00  2.11e-02  2.38e-01  9.90e-01  
  3  +4.7649e-01  +2.1136e+00  1.64e+00  2.10e-02  1.08e+00  9.18e-03  5.05e-02  8.07e-01  
  4  +4.1618e-01  +1.6445e+00  1.23e+00  7.83e-03  4.03e-01  1.10e-02  1.95e-02  6.99e-01  
  5  +3.8462e-01  +1.2856e+00  9.01e-01  5.51e-03  2.78e-01  5.02e-03  1.46e-02  4.65e-01  
  6  +3.2137e-01  +6.3484e-01  3.13e-01  1.84e-03  8.94e-02  1.68e-04  5.73e-03  8.22e-01  
  7  +2.9121e-01  +4.7469e-01  1.83e-01  1.03e-03  4.93e-02  1.06e-04  3.54e-03  4.85e-01  
  8  +2.6843e-01  +3.4989e-01  8.15e-02  4.42e-04  2.11e-02  4.68e-05  1.69e-03  5.60e-01  
  9  +2.5505e-01  +2.8095e-01  2.59e-02  1.37e-04  6.55e-03  1.57e-05  5.73e-04  7.25e-01  
 10  +2.4993e-01  +2.5537e-01  5.44e-03  2.86e-05  1.36e-03  3.58e-06  1.26e-04  8.83e-01  
 11  +2.4848e-01  +2.4875e-01  2.71e-04  1.42e-06  6.77e-05  1.68e-07  6.47e-06  9.79e-01  
 12  +2.4840e-01  +2.4840e-01  3.33e-06  1.75e-08  8.32e-07  2.05e-09  7.99e-08  9.88e-01  
 13  +2.4840e-01  +2.4840e-01  3.33e-08  1.75e-10  8.32e-09  2.05e-11  7.99e-10  9.90e-01  
 14  +2.4840e-01  +2.4840e-01  3.33e-10  1.75e-12  8.32e-11  2.05e-13  7.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.9346ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:50 PM: Optimal value: 2.484e-01
(CVXPY) Sep 20 07:56:50 PM: Compilation took 7.340e-03 seconds
(CVXPY) Sep 20 07:56:50 PM: Solver (including time spent in interface) took 1.052e-02 seconds
Iteration: 13, Objective: 0.2484
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:50 PM: Your problem has 399 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:50 PM: Finished problem compilation (took 5.422e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 399
  constraints   = 649
  nnz(P)        = 0
  nnz(A)        = 4823
  cones (total) = 1
    : Nonnegative = 1,  numel = 649

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9811e-01  +2.5219e+02  2.52e+02  9.45e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +5.3972e-01  +5.5502e+01  5.50e+01  4.28e-01  1.40e+01  3.86e-03  5.78e-01  5.84e-01  
  2  +4.9703e-01  +7.6267e+00  7.13e+00  1.17e-01  5.20e+00  2.13e-02  2.37e-01  9.90e-01  
  3  +4.7266e-01  +2.1748e+00  1.70e+00  2.08e-02  1.07e+00  9.68e-03  5.01e-02  8.09e-01  
  4  +4.1993e-01  +1.7682e+00  1.35e+00  9.17e-03  4.69e-01  1.10e-02  2.28e-02  6.25e-01  
  5  +3.8106e-01  +1.3346e+00  9.54e-01  5.80e-03  2.91e-01  4.91e-03  1.53e-02  5.42e-01  
  6  +3.1339e-01  +6.1505e-01  3.02e-01  1.74e-03  8.41e-02  2.93e-04  5.39e-03  8.09e-01  
  7  +2.8268e-01  +4.6579e-01  1.83e-01  1.01e-03  4.83e-02  1.71e-04  3.47e-03  4.84e-01  
  8  +2.6103e-01  +3.5062e-01  8.96e-02  4.82e-04  2.29e-02  8.03e-05  1.82e-03  5.04e-01  
  9  +2.4559e-01  +2.7212e-01  2.65e-02  1.39e-04  6.59e-03  2.27e-05  5.77e-04  7.41e-01  
 10  +2.4044e-01  +2.4684e-01  6.39e-03  3.33e-05  1.57e-03  5.06e-06  1.46e-04  8.56e-01  
 11  +2.3872e-01  +2.3911e-01  3.88e-04  2.02e-06  9.54e-05  2.63e-07  9.22e-06  9.59e-01  
 12  +2.3860e-01  +2.3861e-01  4.74e-06  2.47e-08  1.16e-06  3.14e-09  1.13e-07  9.88e-01  
 13  +2.3860e-01  +2.3860e-01  4.74e-08  2.47e-10  1.16e-08  3.14e-11  1.13e-09  9.90e-01  
 14  +2.3860e-01  +2.3860e-01  4.74e-10  2.47e-12  1.16e-10  3.14e-13  1.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.8422ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:50 PM: Optimal value: 2.386e-01
(CVXPY) Sep 20 07:56:50 PM: Compilation took 5.422e-03 seconds
(CVXPY) Sep 20 07:56:50 PM: Solver (including time spent in interface) took 1.152e-02 seconds
Iteration: 14, Objective: 0.2386
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:50 PM: Your problem has 409 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:50 PM: Finished problem compilation (took 7.124e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 409
  constraints   = 659
  nnz(P)        = 0
  nnz(A)        = 4872
  cones (total) = 1
    : Nonnegative = 1,  numel = 659

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9792e-01  +2.5236e+02  2.52e+02  9.45e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +5.3327e-01  +5.5603e+01  5.51e+01  4.27e-01  1.38e+01  3.87e-03  5.77e-01  5.84e-01  
  2  +4.9086e-01  +7.8444e+00  7.35e+00  1.15e-01  5.09e+00  2.19e-02  2.33e-01  9.90e-01  
  3  +4.6075e-01  +2.2932e+00  1.83e+00  2.02e-02  1.03e+00  1.08e-02  4.81e-02  8.12e-01  
  4  +4.1664e-01  +1.9531e+00  1.54e+00  1.12e-02  5.69e-01  1.07e-02  2.75e-02  5.25e-01  
  5  +3.7222e-01  +1.3868e+00  1.01e+00  6.19e-03  3.10e-01  6.32e-03  1.61e-02  4.94e-01  
  6  +3.0174e-01  +6.0142e-01  3.00e-01  1.77e-03  8.47e-02  3.03e-04  5.42e-03  8.31e-01  
  7  +2.6956e-01  +4.4501e-01  1.75e-01  9.84e-04  4.67e-02  1.69e-04  3.38e-03  5.08e-01  
  8  +2.4631e-01  +3.2035e-01  7.40e-02  4.03e-04  1.90e-02  6.74e-05  1.55e-03  5.83e-01  
  9  +2.3267e-01  +2.4872e-01  1.60e-02  8.62e-05  4.04e-03  1.34e-05  3.66e-04  7.90e-01  
 10  +2.2923e-01  +2.3109e-01  1.85e-03  9.98e-06  4.64e-04  1.35e-06  4.49e-05  8.88e-01  
 11  +2.2890e-01  +2.2951e-01  6.06e-04  3.27e-06  1.52e-04  4.36e-07  1.51e-05  6.95e-01  
 12  +2.2875e-01  +2.2882e-01  6.76e-05  3.63e-07  1.69e-05  4.64e-08  1.70e-06  9.48e-01  
 13  +2.2873e-01  +2.2873e-01  7.51e-07  4.04e-09  1.87e-07  5.15e-10  1.89e-08  9.89e-01  
 14  +2.2873e-01  +2.2873e-01  7.52e-09  4.04e-11  1.88e-09  5.16e-12  1.90e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.796ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:50 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:50 PM: Optimal value: 2.287e-01
(CVXPY) Sep 20 07:56:50 PM: Compilation took 7.124e-03 seconds
(CVXPY) Sep 20 07:56:50 PM: Solver (including time spent in interface) took 1.052e-02 seconds
Iteration: 15, Objective: 0.2287
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:51 PM: Your problem has 419 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:51 PM: Finished problem compilation (took 6.177e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 419
  constraints   = 669
  nnz(P)        = 0
  nnz(A)        = 4947
  cones (total) = 1
    : Nonnegative = 1,  numel = 669

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9789e-01  +2.5229e+02  2.52e+02  9.46e-01  2.33e+01  1.00e+00  1.02e+00   ------   
  1  +5.3165e-01  +5.5635e+01  5.51e+01  4.28e-01  1.37e+01  3.88e-03  5.76e-01  5.84e-01  
  2  +4.8922e-01  +7.8655e+00  7.38e+00  1.14e-01  5.01e+00  2.20e-02  2.32e-01  9.90e-01  
  3  +4.5843e-01  +2.3892e+00  1.93e+00  2.12e-02  1.07e+00  1.09e-02  5.07e-02  7.99e-01  
  4  +4.1188e-01  +2.0382e+00  1.63e+00  1.18e-02  5.92e-01  1.08e-02  2.90e-02  5.23e-01  
  5  +3.7043e-01  +1.4717e+00  1.10e+00  6.82e-03  3.38e-01  6.17e-03  1.78e-02  4.95e-01  
  6  +3.0168e-01  +6.2016e-01  3.18e-01  1.90e-03  9.04e-02  9.84e-05  5.84e-03  8.71e-01  
  7  +2.7230e-01  +4.7610e-01  2.04e-01  1.16e-03  5.48e-02  8.30e-05  3.93e-03  4.46e-01  
  8  +2.4495e-01  +3.3167e-01  8.67e-02  4.72e-04  2.22e-02  3.88e-05  1.81e-03  5.97e-01  
  9  +2.3312e-01  +2.7469e-01  4.16e-02  2.19e-04  1.04e-02  2.01e-05  9.02e-04  5.59e-01  
 10  +2.2336e-01  +2.2762e-01  4.26e-03  2.21e-05  1.04e-03  2.67e-06  9.86e-05  9.66e-01  
 11  +2.2212e-01  +2.2232e-01  2.05e-04  1.07e-06  5.02e-05  1.11e-07  4.95e-06  9.51e-01  
 12  +2.2205e-01  +2.2205e-01  2.26e-06  1.17e-08  5.54e-07  1.22e-09  5.48e-08  9.89e-01  
 13  +2.2205e-01  +2.2205e-01  2.26e-08  1.18e-10  5.54e-09  1.22e-11  5.48e-10  9.90e-01  
 14  +2.2205e-01  +2.2205e-01  2.26e-10  1.18e-12  5.54e-11  1.22e-13  5.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.9289ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:51 PM: Optimal value: 2.221e-01
(CVXPY) Sep 20 07:56:51 PM: Compilation took 6.177e-03 seconds
(CVXPY) Sep 20 07:56:51 PM: Solver (including time spent in interface) took 1.053e-02 seconds
Iteration: 16, Objective: 0.2221
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:51 PM: Your problem has 429 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:51 PM: Finished problem compilation (took 5.521e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 429
  constraints   = 679
  nnz(P)        = 0
  nnz(A)        = 5001
  cones (total) = 1
    : Nonnegative = 1,  numel = 679

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9767e-01  +2.5217e+02  2.52e+02  9.46e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +5.2612e-01  +5.5943e+01  5.54e+01  4.31e-01  1.36e+01  3.88e-03  5.80e-01  5.80e-01  
  2  +4.8489e-01  +8.0200e+00  7.54e+00  1.15e-01  5.04e+00  2.26e-02  2.35e-01  9.90e-01  
  3  +4.5398e-01  +2.5968e+00  2.14e+00  2.38e-02  1.19e+00  1.13e-02  5.66e-02  7.75e-01  
  4  +3.9333e-01  +2.1014e+00  1.71e+00  1.15e-02  5.70e-01  1.14e-02  2.84e-02  5.96e-01  
  5  +3.3795e-01  +1.0289e+00  6.91e-01  4.47e-03  2.15e-01  1.07e-04  1.23e-02  8.51e-01  
  6  +2.8731e-01  +5.9817e-01  3.11e-01  1.89e-03  8.85e-02  8.02e-05  6.01e-03  5.90e-01  
  7  +2.5866e-01  +4.3427e-01  1.76e-01  1.02e-03  4.73e-02  6.83e-05  3.60e-03  5.37e-01  
  8  +2.3659e-01  +3.0761e-01  7.10e-02  3.96e-04  1.84e-02  3.02e-05  1.56e-03  6.15e-01  
  9  +2.2632e-01  +2.5498e-01  2.87e-02  1.55e-04  7.25e-03  1.37e-05  6.57e-04  6.57e-01  
 10  +2.2036e-01  +2.2486e-01  4.50e-03  2.42e-05  1.13e-03  2.13e-06  1.09e-04  8.54e-01  
 11  +2.1951e-01  +2.2073e-01  1.22e-03  6.55e-06  3.05e-04  6.79e-07  3.06e-05  8.46e-01  
 12  +2.1918e-01  +2.1928e-01  9.65e-05  5.20e-07  2.42e-05  5.32e-08  2.46e-06  9.22e-01  
 13  +2.1915e-01  +2.1915e-01  9.83e-07  5.29e-09  2.47e-07  5.41e-10  2.51e-08  9.90e-01  
 14  +2.1915e-01  +2.1915e-01  9.84e-09  5.30e-11  2.47e-09  5.41e-12  2.51e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.1427ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:51 PM: Optimal value: 2.192e-01
(CVXPY) Sep 20 07:56:51 PM: Compilation took 5.521e-03 seconds
(CVXPY) Sep 20 07:56:51 PM: Solver (including time spent in interface) took 1.152e-02 seconds
Iteration: 17, Objective: 0.2192
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:51 PM: Your problem has 439 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:51 PM: Finished problem compilation (took 6.076e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 439
  constraints   = 689
  nnz(P)        = 0
  nnz(A)        = 5056
  cones (total) = 1
    : Nonnegative = 1,  numel = 689

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9764e-01  +2.5224e+02  2.52e+02  9.46e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +5.2396e-01  +5.6055e+01  5.55e+01  4.32e-01  1.35e+01  3.89e-03  5.80e-01  5.79e-01  
  2  +4.8239e-01  +8.0345e+00  7.55e+00  1.15e-01  4.98e+00  2.27e-02  2.36e-01  9.90e-01  
  3  +4.5125e-01  +2.6182e+00  2.17e+00  2.43e-02  1.20e+00  1.10e-02  5.82e-02  7.69e-01  
  4  +3.8803e-01  +2.1363e+00  1.75e+00  1.17e-02  5.77e-01  1.13e-02  2.92e-02  6.02e-01  
  5  +3.4261e-01  +1.1183e+00  7.76e-01  5.22e-03  2.49e-01  1.02e-04  1.44e-02  8.21e-01  
  6  +2.7662e-01  +5.1152e-01  2.35e-01  1.42e-03  6.58e-02  6.07e-05  4.66e-03  7.44e-01  
  7  +2.5067e-01  +3.9471e-01  1.44e-01  8.30e-04  3.82e-02  5.92e-05  3.01e-03  5.32e-01  
  8  +2.3178e-01  +2.9716e-01  6.54e-02  3.64e-04  1.67e-02  2.81e-05  1.45e-03  5.56e-01  
  9  +2.2140e-01  +2.4501e-01  2.36e-02  1.29e-04  5.93e-03  1.07e-05  5.55e-04  6.62e-01  
 10  +2.1620e-01  +2.1939e-01  3.18e-03  1.72e-05  7.91e-04  1.84e-06  8.01e-05  9.55e-01  
 11  +2.1533e-01  +2.1571e-01  3.83e-04  2.05e-06  9.43e-05  2.31e-07  1.03e-05  9.90e-01  
 12  +2.1520e-01  +2.1521e-01  4.46e-06  2.38e-08  1.09e-06  2.57e-09  1.21e-07  9.89e-01  
 13  +2.1520e-01  +2.1520e-01  4.46e-08  2.38e-10  1.09e-08  2.57e-11  1.21e-09  9.90e-01  
 14  +2.1520e-01  +2.1520e-01  4.46e-10  2.38e-12  1.09e-10  2.58e-13  1.21e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.202ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:51 PM: Optimal value: 2.152e-01
(CVXPY) Sep 20 07:56:51 PM: Compilation took 6.076e-03 seconds
(CVXPY) Sep 20 07:56:51 PM: Solver (including time spent in interface) took 1.152e-02 seconds
Iteration: 18, Objective: 0.2152
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:51 PM: Your problem has 446 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:51 PM: Finished problem compilation (took 6.489e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 446
  constraints   = 696
  nnz(P)        = 0
  nnz(A)        = 5110
  cones (total) = 1
    : Nonnegative = 1,  numel = 696

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9765e-01  +2.5224e+02  2.52e+02  9.47e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +5.2228e-01  +5.6018e+01  5.55e+01  4.32e-01  1.34e+01  3.90e-03  5.78e-01  5.80e-01  
  2  +4.8056e-01  +8.0700e+00  7.59e+00  1.13e-01  4.88e+00  2.28e-02  2.33e-01  9.90e-01  
  3  +4.4703e-01  +2.6489e+00  2.20e+00  2.39e-02  1.17e+00  1.12e-02  5.73e-02  7.71e-01  
  4  +3.8411e-01  +2.1582e+00  1.77e+00  1.19e-02  5.84e-01  1.12e-02  2.97e-02  5.88e-01  
  5  +3.4183e-01  +1.1653e+00  8.23e-01  5.65e-03  2.69e-01  9.98e-05  1.55e-02  8.24e-01  
  6  +2.7566e-01  +5.2215e-01  2.46e-01  1.52e-03  7.03e-02  5.46e-05  4.86e-03  7.39e-01  
  7  +2.5945e-01  +4.5619e-01  1.97e-01  1.18e-03  5.45e-02  6.21e-05  3.96e-03  3.11e-01  
  8  +2.3040e-01  +3.1510e-01  8.47e-02  4.75e-04  2.20e-02  3.14e-05  1.82e-03  6.04e-01  
  9  +2.1645e-01  +2.4935e-01  3.29e-02  1.78e-04  8.27e-03  1.41e-05  7.53e-04  6.59e-01  
 10  +2.0848e-01  +2.1187e-01  3.39e-03  1.81e-05  8.39e-04  1.43e-06  8.31e-05  9.09e-01  
 11  +2.0756e-01  +2.0777e-01  2.04e-04  1.09e-06  5.06e-05  7.65e-08  5.27e-06  9.40e-01  
 12  +2.0750e-01  +2.0750e-01  2.30e-06  1.23e-08  5.69e-07  9.25e-10  5.98e-08  9.90e-01  
 13  +2.0750e-01  +2.0750e-01  2.31e-08  1.23e-10  5.71e-09  9.27e-12  5.99e-10  9.90e-01  
 14  +2.0750e-01  +2.0750e-01  2.31e-10  1.24e-12  5.71e-11  9.28e-14  6.00e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.7933ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:51 PM: Optimal value: 2.075e-01
(CVXPY) Sep 20 07:56:51 PM: Compilation took 6.489e-03 seconds
(CVXPY) Sep 20 07:56:51 PM: Solver (including time spent in interface) took 1.160e-02 seconds
Iteration: 19, Objective: 0.2075
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:51 PM: Your problem has 456 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:51 PM: Finished problem compilation (took 5.512e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 456
  constraints   = 706
  nnz(P)        = 0
  nnz(A)        = 5175
  cones (total) = 1
    : Nonnegative = 1,  numel = 706

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9760e-01  +2.5233e+02  2.52e+02  9.47e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.1893e-01  +5.6108e+01  5.56e+01  4.32e-01  1.33e+01  3.91e-03  5.77e-01  5.80e-01  
  2  +4.7621e-01  +8.1713e+00  7.70e+00  1.12e-01  4.78e+00  2.31e-02  2.31e-01  9.90e-01  
  3  +4.3922e-01  +2.7876e+00  2.35e+00  2.46e-02  1.19e+00  1.17e-02  5.90e-02  7.63e-01  
  4  +3.7849e-01  +2.3027e+00  1.92e+00  1.31e-02  6.35e-01  1.12e-02  3.26e-02  5.61e-01  
  5  +3.3821e-01  +1.1629e+00  8.25e-01  5.81e-03  2.75e-01  9.88e-05  1.60e-02  8.20e-01  
  6  +2.7136e-01  +5.2116e-01  2.50e-01  1.57e-03  7.20e-02  6.09e-05  5.03e-03  7.48e-01  
  7  +2.5510e-01  +4.5265e-01  1.98e-01  1.19e-03  5.48e-02  6.45e-05  4.03e-03  3.13e-01  
  8  +2.3080e-01  +3.3089e-01  1.00e-01  5.74e-04  2.63e-02  3.65e-05  2.16e-03  5.20e-01  
  9  +2.1231e-01  +2.3837e-01  2.61e-02  1.44e-04  6.56e-03  1.02e-05  6.09e-04  7.57e-01  
 10  +2.0730e-01  +2.1375e-01  6.45e-03  3.53e-05  1.61e-03  3.41e-06  1.59e-04  8.62e-01  
 11  +2.0616e-01  +2.0866e-01  2.50e-03  1.36e-05  6.17e-04  1.42e-06  6.41e-05  7.36e-01  
 12  +2.0545e-01  +2.0559e-01  1.44e-04  7.81e-07  3.54e-05  7.39e-08  3.82e-06  9.45e-01  
 13  +2.0540e-01  +2.0540e-01  1.53e-06  8.30e-09  3.76e-07  7.83e-10  4.08e-08  9.90e-01  
 14  +2.0540e-01  +2.0540e-01  1.53e-08  8.32e-11  3.77e-09  7.85e-12  4.09e-10  9.90e-01  
 15  +2.0540e-01  +2.0540e-01  1.54e-10  8.33e-13  3.77e-11  7.87e-14  4.10e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.8736ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:51 PM: Optimal value: 2.054e-01
(CVXPY) Sep 20 07:56:51 PM: Compilation took 5.512e-03 seconds
(CVXPY) Sep 20 07:56:51 PM: Solver (including time spent in interface) took 1.253e-02 seconds
Iteration: 20, Objective: 0.2054
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:51 PM: Your problem has 466 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:51 PM: Finished problem compilation (took 6.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 466
  constraints   = 716
  nnz(P)        = 0
  nnz(A)        = 5219
  cones (total) = 1
    : Nonnegative = 1,  numel = 716

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9743e-01  +2.5232e+02  2.52e+02  9.47e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.1417e-01  +5.6388e+01  5.59e+01  4.34e-01  1.32e+01  3.92e-03  5.79e-01  5.77e-01  
  2  +4.7200e-01  +8.3004e+00  7.83e+00  1.13e-01  4.80e+00  2.36e-02  2.33e-01  9.90e-01  
  3  +4.3441e-01  +2.8752e+00  2.44e+00  2.58e-02  1.24e+00  1.18e-02  6.16e-02  7.53e-01  
  4  +3.7857e-01  +2.3695e+00  1.99e+00  1.42e-02  6.85e-01  1.12e-02  3.53e-02  5.21e-01  
  5  +3.2276e-01  +1.0195e+00  6.97e-01  4.64e-03  2.19e-01  1.65e-04  1.28e-02  8.64e-01  
  6  +2.7406e-01  +6.1599e-01  3.42e-01  2.17e-03  9.95e-02  1.14e-04  6.79e-03  5.59e-01  
  7  +2.4717e-01  +4.5385e-01  2.07e-01  1.25e-03  5.71e-02  8.75e-05  4.31e-03  4.83e-01  
  8  +2.2014e-01  +2.9193e-01  7.18e-02  4.13e-04  1.88e-02  3.36e-05  1.62e-03  6.91e-01  
  9  +2.0863e-01  +2.2931e-01  2.07e-02  1.16e-04  5.28e-03  1.08e-05  4.99e-04  7.75e-01  
 10  +2.0502e-01  +2.1055e-01  5.53e-03  3.10e-05  1.40e-03  3.08e-06  1.40e-04  8.09e-01  
 11  +2.0406e-01  +2.0599e-01  1.93e-03  1.08e-05  4.86e-04  1.12e-06  5.05e-05  7.64e-01  
 12  +2.0355e-01  +2.0370e-01  1.52e-04  8.45e-07  3.81e-05  8.41e-08  4.08e-06  9.24e-01  
 13  +2.0350e-01  +2.0350e-01  1.86e-06  1.03e-08  4.63e-07  1.04e-09  5.00e-08  9.90e-01  
 14  +2.0350e-01  +2.0350e-01  1.86e-08  1.03e-10  4.64e-09  1.04e-11  5.01e-10  9.90e-01  
 15  +2.0350e-01  +2.0350e-01  1.86e-10  1.03e-12  4.65e-11  1.04e-13  5.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.7022ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:51 PM: Optimal value: 2.035e-01
(CVXPY) Sep 20 07:56:51 PM: Compilation took 6.001e-03 seconds
(CVXPY) Sep 20 07:56:51 PM: Solver (including time spent in interface) took 1.256e-02 seconds
Iteration: 21, Objective: 0.2035
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:51 PM: Your problem has 476 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:51 PM: Finished problem compilation (took 5.255e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 476
  constraints   = 726
  nnz(P)        = 0
  nnz(A)        = 5253
  cones (total) = 1
    : Nonnegative = 1,  numel = 726

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9742e-01  +2.5232e+02  2.52e+02  9.48e-01  2.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.1304e-01  +5.6459e+01  5.59e+01  4.34e-01  1.31e+01  3.93e-03  5.79e-01  5.77e-01  
  2  +4.7112e-01  +8.2927e+00  7.82e+00  1.13e-01  4.76e+00  2.36e-02  2.33e-01  9.90e-01  
  3  +4.3305e-01  +2.7596e+00  2.33e+00  2.46e-02  1.18e+00  1.14e-02  5.91e-02  7.64e-01  
  4  +3.7787e-01  +2.3488e+00  1.97e+00  1.40e-02  6.73e-01  1.12e-02  3.50e-02  5.03e-01  
  5  +3.2221e-01  +1.0218e+00  7.00e-01  4.67e-03  2.18e-01  1.10e-04  1.29e-02  8.65e-01  
  6  +2.7475e-01  +6.2509e-01  3.50e-01  2.22e-03  1.01e-01  9.19e-05  6.92e-03  5.46e-01  
  7  +2.4867e-01  +4.6895e-01  2.20e-01  1.34e-03  6.07e-02  7.96e-05  4.54e-03  4.59e-01  
  8  +2.2140e-01  +3.0274e-01  8.13e-02  4.74e-04  2.14e-02  3.20e-05  1.81e-03  6.47e-01  
  9  +2.1025e-01  +2.3906e-01  2.88e-02  1.66e-04  7.45e-03  1.38e-05  6.84e-04  7.25e-01  
 10  +2.0475e-01  +2.0956e-01  4.81e-03  2.77e-05  1.24e-03  2.19e-06  1.22e-04  8.40e-01  
 11  +2.0415e-01  +2.0641e-01  2.26e-03  1.30e-05  5.78e-04  1.31e-06  5.96e-05  8.26e-01  
 12  +2.0353e-01  +2.0364e-01  1.11e-04  6.36e-07  2.83e-05  5.95e-08  3.00e-06  9.50e-01  
 13  +2.0350e-01  +2.0350e-01  1.14e-06  6.53e-09  2.91e-07  6.09e-10  3.09e-08  9.90e-01  
 14  +2.0350e-01  +2.0350e-01  1.14e-08  6.54e-11  2.91e-09  6.10e-12  3.09e-10  9.90e-01  
 15  +2.0350e-01  +2.0350e-01  1.14e-10  6.54e-13  2.91e-11  6.10e-14  3.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.587ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:52 PM: Optimal value: 2.035e-01
(CVXPY) Sep 20 07:56:52 PM: Compilation took 5.255e-03 seconds
(CVXPY) Sep 20 07:56:52 PM: Solver (including time spent in interface) took 1.253e-02 seconds
Iteration: 22, Objective: 0.2035
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:52 PM: Your problem has 486 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:52 PM: Finished problem compilation (took 5.580e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 486
  constraints   = 736
  nnz(P)        = 0
  nnz(A)        = 5324
  cones (total) = 1
    : Nonnegative = 1,  numel = 736

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9733e-01  +2.5234e+02  2.52e+02  9.48e-01  2.23e+01  1.00e+00  1.02e+00   ------   
  1  +5.0765e-01  +5.6654e+01  5.61e+01  4.35e-01  1.30e+01  3.94e-03  5.78e-01  5.76e-01  
  2  +4.6522e-01  +8.4085e+00  7.94e+00  1.12e-01  4.71e+00  2.41e-02  2.32e-01  9.90e-01  
  3  +4.2585e-01  +2.7631e+00  2.34e+00  2.47e-02  1.18e+00  1.10e-02  5.94e-02  7.61e-01  
  4  +3.7028e-01  +2.3696e+00  2.00e+00  1.43e-02  6.82e-01  1.06e-02  3.56e-02  5.18e-01  
  5  +3.2136e-01  +1.0467e+00  7.25e-01  5.02e-03  2.34e-01  9.96e-05  1.38e-02  8.49e-01  
  6  +2.6994e-01  +5.9565e-01  3.26e-01  2.11e-03  9.61e-02  7.98e-05  6.56e-03  6.00e-01  
  7  +2.4803e-01  +4.7075e-01  2.23e-01  1.38e-03  6.29e-02  7.43e-05  4.59e-03  4.07e-01  
  8  +2.2297e-01  +3.2194e-01  9.90e-02  5.85e-04  2.66e-02  3.71e-05  2.15e-03  5.83e-01  
  9  +2.0956e-01  +2.4624e-01  3.67e-02  2.12e-04  9.65e-03  1.57e-05  8.38e-04  6.69e-01  
 10  +2.0650e-01  +2.2982e-01  2.33e-02  1.34e-04  6.10e-03  1.10e-05  5.45e-04  4.58e-01  
 11  +2.0175e-01  +2.0563e-01  3.89e-03  2.23e-05  1.01e-03  1.92e-06  9.60e-05  8.74e-01  
 12  +2.0110e-01  +2.0258e-01  1.47e-03  8.40e-06  3.79e-04  9.19e-07  3.76e-05  9.05e-01  
 13  +2.0067e-01  +2.0073e-01  6.19e-05  3.53e-07  1.59e-05  3.69e-08  1.61e-06  9.58e-01  
 14  +2.0065e-01  +2.0065e-01  6.22e-07  3.55e-09  1.60e-07  3.71e-10  1.62e-08  9.90e-01  
 15  +2.0065e-01  +2.0065e-01  6.22e-09  3.56e-11  1.60e-09  3.71e-12  1.62e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.4818ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:52 PM: Optimal value: 2.007e-01
(CVXPY) Sep 20 07:56:52 PM: Compilation took 5.580e-03 seconds
(CVXPY) Sep 20 07:56:52 PM: Solver (including time spent in interface) took 1.246e-02 seconds
Iteration: 23, Objective: 0.2007
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:52 PM: Your problem has 496 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:52 PM: Finished problem compilation (took 4.987e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 496
  constraints   = 746
  nnz(P)        = 0
  nnz(A)        = 5377
  cones (total) = 1
    : Nonnegative = 1,  numel = 746

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9731e-01  +2.5234e+02  2.52e+02  9.48e-01  2.22e+01  1.00e+00  1.02e+00   ------   
  1  +5.0588e-01  +5.6746e+01  5.62e+01  4.36e-01  1.29e+01  3.95e-03  5.78e-01  5.75e-01  
  2  +4.6343e-01  +8.4244e+00  7.96e+00  1.12e-01  4.66e+00  2.42e-02  2.33e-01  9.90e-01  
  3  +4.2419e-01  +2.7699e+00  2.35e+00  2.50e-02  1.18e+00  1.07e-02  6.04e-02  7.58e-01  
  4  +3.7117e-01  +2.4819e+00  2.11e+00  1.54e-02  7.30e-01  1.05e-02  3.84e-02  5.04e-01  
  5  +3.1707e-01  +1.1232e+00  8.06e-01  5.34e-03  2.48e-01  1.32e-03  1.46e-02  7.97e-01  
  6  +2.6286e-01  +5.5989e-01  2.97e-01  1.91e-03  8.63e-02  4.01e-04  5.98e-03  6.82e-01  
  7  +2.3761e-01  +4.2619e-01  1.89e-01  1.14e-03  5.19e-02  2.36e-04  3.88e-03  4.97e-01  
  8  +2.1835e-01  +3.1538e-01  9.70e-02  5.66e-04  2.58e-02  1.16e-04  2.08e-03  5.10e-01  
  9  +2.0293e-01  +2.3095e-01  2.80e-02  1.59e-04  7.20e-03  2.82e-05  6.41e-04  7.85e-01  
 10  +1.9719e-01  +2.0236e-01  5.17e-03  2.91e-05  1.31e-03  4.53e-06  1.27e-04  8.24e-01  
 11  +1.9639e-01  +1.9858e-01  2.18e-03  1.22e-05  5.46e-04  1.65e-06  5.63e-05  7.92e-01  
 12  +1.9580e-01  +1.9612e-01  3.15e-04  1.74e-06  7.77e-05  2.25e-07  8.40e-06  8.72e-01  
 13  +1.9570e-01  +1.9571e-01  4.97e-06  2.73e-08  1.22e-06  3.32e-09  1.34e-07  9.90e-01  
 14  +1.9570e-01  +1.9570e-01  4.98e-08  2.74e-10  1.22e-08  3.32e-11  1.34e-09  9.90e-01  
 15  +1.9570e-01  +1.9570e-01  4.98e-10  2.74e-12  1.22e-10  3.33e-13  1.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.6134ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:52 PM: Optimal value: 1.957e-01
(CVXPY) Sep 20 07:56:52 PM: Compilation took 4.987e-03 seconds
(CVXPY) Sep 20 07:56:52 PM: Solver (including time spent in interface) took 1.202e-02 seconds
Iteration: 24, Objective: 0.1957
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:52 PM: Your problem has 506 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:52 PM: Finished problem compilation (took 6.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 506
  constraints   = 756
  nnz(P)        = 0
  nnz(A)        = 5410
  cones (total) = 1
    : Nonnegative = 1,  numel = 756

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9728e-01  +2.5235e+02  2.52e+02  9.49e-01  2.20e+01  1.00e+00  1.02e+00   ------   
  1  +5.0370e-01  +5.6859e+01  5.64e+01  4.37e-01  1.28e+01  3.96e-03  5.78e-01  5.74e-01  
  2  +4.6149e-01  +8.4463e+00  7.98e+00  1.12e-01  4.63e+00  2.43e-02  2.33e-01  9.90e-01  
  3  +4.2183e-01  +2.7328e+00  2.31e+00  2.47e-02  1.16e+00  1.05e-02  5.99e-02  7.63e-01  
  4  +3.6794e-01  +2.5037e+00  2.14e+00  1.56e-02  7.31e-01  1.05e-02  3.87e-02  5.05e-01  
  5  +3.1358e-01  +1.1199e+00  8.06e-01  5.34e-03  2.47e-01  1.22e-03  1.46e-02  8.05e-01  
  6  +2.7095e-01  +6.7539e-01  4.04e-01  2.65e-03  1.20e-01  5.48e-04  8.02e-03  5.22e-01  
  7  +2.3779e-01  +4.4568e-01  2.08e-01  1.29e-03  5.82e-02  2.67e-04  4.32e-03  5.38e-01  
  8  +2.1694e-01  +3.1960e-01  1.03e-01  6.09e-04  2.76e-02  1.25e-04  2.22e-03  5.49e-01  
  9  +2.0289e-01  +2.3989e-01  3.70e-02  2.13e-04  9.64e-03  3.87e-05  8.47e-04  7.33e-01  
 10  +1.9547e-01  +2.0142e-01  5.96e-03  3.40e-05  1.53e-03  5.26e-06  1.46e-04  8.48e-01  
 11  +1.9460e-01  +1.9717e-01  2.57e-03  1.46e-05  6.49e-04  1.94e-06  6.69e-05  7.85e-01  
 12  +1.9394e-01  +1.9438e-01  4.40e-04  2.47e-06  1.10e-04  3.14e-07  1.19e-05  8.46e-01  
 13  +1.9380e-01  +1.9382e-01  1.38e-05  7.67e-08  3.41e-06  8.71e-09  3.75e-07  9.90e-01  
 14  +1.9380e-01  +1.9380e-01  1.38e-07  7.67e-10  3.41e-08  8.72e-11  3.76e-09  9.90e-01  
 15  +1.9380e-01  +1.9380e-01  1.38e-09  7.67e-12  3.41e-10  8.74e-13  3.77e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.2756ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:52 PM: Optimal value: 1.938e-01
(CVXPY) Sep 20 07:56:52 PM: Compilation took 6.003e-03 seconds
(CVXPY) Sep 20 07:56:52 PM: Solver (including time spent in interface) took 1.290e-02 seconds
Iteration: 25, Objective: 0.1938
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:52 PM: Your problem has 513 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:52 PM: Finished problem compilation (took 5.778e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 513
  constraints   = 763
  nnz(P)        = 0
  nnz(A)        = 5455
  cones (total) = 1
    : Nonnegative = 1,  numel = 763

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9727e-01  +2.5234e+02  2.52e+02  9.49e-01  2.19e+01  1.00e+00  1.02e+00   ------   
  1  +5.0234e-01  +5.6852e+01  5.63e+01  4.36e-01  1.27e+01  3.96e-03  5.77e-01  5.75e-01  
  2  +4.5935e-01  +8.4524e+00  7.99e+00  1.12e-01  4.58e+00  2.43e-02  2.32e-01  9.90e-01  
  3  +4.1916e-01  +2.7838e+00  2.36e+00  2.52e-02  1.18e+00  1.05e-02  6.13e-02  7.56e-01  
  4  +3.6543e-01  +2.5289e+00  2.16e+00  1.59e-02  7.41e-01  1.04e-02  3.96e-02  5.02e-01  
  5  +3.2132e-01  +1.4483e+00  1.13e+00  7.54e-03  3.48e-01  3.54e-03  2.02e-02  6.19e-01  
  6  +2.6810e-01  +6.1807e-01  3.50e-01  2.32e-03  1.04e-01  7.79e-04  7.05e-03  7.08e-01  
  7  +2.3731e-01  +4.4572e-01  2.08e-01  1.30e-03  5.80e-02  4.08e-04  4.33e-03  5.18e-01  
  8  +2.1786e-01  +3.2750e-01  1.10e-01  6.60e-04  2.95e-02  2.01e-04  2.39e-03  4.99e-01  
  9  +2.0590e-01  +2.5850e-01  5.26e-02  3.10e-04  1.38e-02  8.84e-05  1.20e-03  5.57e-01  
 10  +1.9676e-01  +2.0823e-01  1.15e-02  6.67e-05  2.95e-03  1.63e-05  2.79e-04  7.99e-01  
 11  +1.9459e-01  +1.9719e-01  2.60e-03  1.51e-05  6.64e-04  2.75e-06  6.83e-05  8.39e-01  
 12  +1.9395e-01  +1.9442e-01  4.75e-04  2.70e-06  1.18e-04  4.42e-07  1.31e-05  8.42e-01  
 13  +1.9381e-01  +1.9384e-01  3.20e-05  1.81e-07  7.92e-06  2.18e-08  8.94e-07  9.82e-01  
 14  +1.9380e-01  +1.9380e-01  3.22e-07  1.82e-09  7.96e-08  2.19e-10  9.00e-09  9.90e-01  
 15  +1.9380e-01  +1.9380e-01  3.23e-09  1.82e-11  7.98e-10  2.20e-12  9.02e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.3669ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:52 PM: Optimal value: 1.938e-01
(CVXPY) Sep 20 07:56:52 PM: Compilation took 5.778e-03 seconds
(CVXPY) Sep 20 07:56:52 PM: Solver (including time spent in interface) took 1.393e-02 seconds
Iteration: 26, Objective: 0.1938
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:52 PM: Your problem has 516 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:52 PM: Finished problem compilation (took 5.513e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 516
  constraints   = 766
  nnz(P)        = 0
  nnz(A)        = 5472
  cones (total) = 1
    : Nonnegative = 1,  numel = 766

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9722e-01  +2.5237e+02  2.52e+02  9.49e-01  2.19e+01  1.00e+00  1.02e+00   ------   
  1  +5.0074e-01  +5.6943e+01  5.64e+01  4.37e-01  1.27e+01  3.97e-03  5.78e-01  5.74e-01  
  2  +4.5796e-01  +8.4770e+00  8.02e+00  1.12e-01  4.58e+00  2.44e-02  2.33e-01  9.90e-01  
  3  +4.1825e-01  +2.8039e+00  2.39e+00  2.57e-02  1.19e+00  1.05e-02  6.23e-02  7.51e-01  
  4  +3.6317e-01  +2.5273e+00  2.16e+00  1.59e-02  7.41e-01  1.04e-02  3.97e-02  5.04e-01  
  5  +3.1684e-01  +1.3440e+00  1.03e+00  6.92e-03  3.19e-01  2.72e-03  1.87e-02  6.82e-01  
  6  +2.6771e-01  +6.4905e-01  3.81e-01  2.54e-03  1.14e-01  7.90e-04  7.70e-03  6.48e-01  
  7  +2.3516e-01  +4.4084e-01  2.06e-01  1.29e-03  5.76e-02  3.83e-04  4.31e-03  5.46e-01  
  8  +2.1712e-01  +3.2897e-01  1.12e-01  6.78e-04  3.03e-02  1.96e-04  2.43e-03  4.90e-01  
  9  +2.0475e-01  +2.5683e-01  5.21e-02  3.07e-04  1.37e-02  8.44e-05  1.17e-03  5.80e-01  
 10  +1.9618e-01  +2.1082e-01  1.46e-02  8.32e-05  3.71e-03  2.08e-05  3.40e-04  7.75e-01  
 11  +1.9306e-01  +1.9564e-01  2.57e-03  1.46e-05  6.46e-04  1.96e-06  6.34e-05  9.48e-01  
 12  +1.9232e-01  +1.9267e-01  3.50e-04  1.96e-06  8.67e-05  2.37e-07  9.01e-06  9.28e-01  
 13  +1.9220e-01  +1.9221e-01  8.61e-06  4.81e-08  2.13e-06  5.66e-09  2.24e-07  9.82e-01  
 14  +1.9220e-01  +1.9220e-01  8.62e-08  4.81e-10  2.13e-08  5.66e-11  2.24e-09  9.90e-01  
 15  +1.9220e-01  +1.9220e-01  8.62e-10  4.81e-12  2.13e-10  5.67e-13  2.24e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.4381ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:52 PM: Optimal value: 1.922e-01
(CVXPY) Sep 20 07:56:52 PM: Compilation took 5.513e-03 seconds
(CVXPY) Sep 20 07:56:52 PM: Solver (including time spent in interface) took 1.353e-02 seconds
Iteration: 27, Objective: 0.1922
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:52 PM: Your problem has 518 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:52 PM: Finished problem compilation (took 5.503e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 518
  constraints   = 768
  nnz(P)        = 0
  nnz(A)        = 5479
  cones (total) = 1
    : Nonnegative = 1,  numel = 768

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9720e-01  +2.5236e+02  2.52e+02  9.49e-01  2.19e+01  1.00e+00  1.02e+00   ------   
  1  +5.0011e-01  +5.7001e+01  5.65e+01  4.37e-01  1.26e+01  3.97e-03  5.78e-01  5.73e-01  
  2  +4.5749e-01  +8.4865e+00  8.03e+00  1.12e-01  4.59e+00  2.45e-02  2.34e-01  9.90e-01  
  3  +4.1813e-01  +2.8038e+00  2.39e+00  2.58e-02  1.20e+00  1.05e-02  6.27e-02  7.51e-01  
  4  +3.6264e-01  +2.5351e+00  2.17e+00  1.60e-02  7.43e-01  1.04e-02  3.99e-02  5.07e-01  
  5  +3.1685e-01  +1.3573e+00  1.04e+00  7.02e-03  3.23e-01  2.73e-03  1.90e-02  6.81e-01  
  6  +2.6756e-01  +6.4727e-01  3.80e-01  2.53e-03  1.13e-01  7.75e-04  7.69e-03  6.53e-01  
  7  +2.3466e-01  +4.3885e-01  2.04e-01  1.28e-03  5.72e-02  3.73e-04  4.29e-03  5.52e-01  
  8  +2.1669e-01  +3.2726e-01  1.11e-01  6.71e-04  3.00e-02  1.92e-04  2.41e-03  4.83e-01  
  9  +2.0465e-01  +2.5695e-01  5.23e-02  3.09e-04  1.37e-02  8.45e-05  1.18e-03  5.70e-01  
 10  +1.9769e-01  +2.1954e-01  2.19e-02  1.26e-04  5.58e-03  3.36e-05  5.05e-04  6.08e-01  
 11  +1.9323e-01  +1.9663e-01  3.40e-03  1.94e-05  8.58e-04  3.07e-06  8.32e-05  9.16e-01  
 12  +1.9239e-01  +1.9299e-01  5.99e-04  3.40e-06  1.50e-04  4.71e-07  1.54e-05  8.74e-01  
 13  +1.9221e-01  +1.9223e-01  2.10e-05  1.18e-07  5.20e-06  1.42e-08  5.49e-07  9.85e-01  
 14  +1.9220e-01  +1.9220e-01  2.10e-07  1.19e-09  5.21e-08  1.43e-10  5.51e-09  9.90e-01  
 15  +1.9220e-01  +1.9220e-01  2.11e-09  1.19e-11  5.22e-10  1.43e-12  5.52e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.1057ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:52 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:52 PM: Optimal value: 1.922e-01
(CVXPY) Sep 20 07:56:52 PM: Compilation took 5.503e-03 seconds
(CVXPY) Sep 20 07:56:52 PM: Solver (including time spent in interface) took 1.352e-02 seconds
Iteration: 28, Objective: 0.1922
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:53 PM: Your problem has 523 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:53 PM: Finished problem compilation (took 5.012e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 523
  constraints   = 773
  nnz(P)        = 0
  nnz(A)        = 5506
  cones (total) = 1
    : Nonnegative = 1,  numel = 773

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9717e-01  +2.5247e+02  2.52e+02  9.49e-01  2.18e+01  1.00e+00  1.02e+00   ------   
  1  +4.9677e-01  +5.7101e+01  5.66e+01  4.37e-01  1.26e+01  3.98e-03  5.78e-01  5.73e-01  
  2  +4.5326e-01  +8.5510e+00  8.10e+00  1.11e-01  4.55e+00  2.47e-02  2.32e-01  9.90e-01  
  3  +4.1094e-01  +2.6698e+00  2.26e+00  2.38e-02  1.10e+00  1.01e-02  5.82e-02  7.72e-01  
  4  +3.5611e-01  +2.3576e+00  2.00e+00  1.48e-02  6.87e-01  9.76e-03  3.73e-02  4.82e-01  
  5  +3.0126e-01  +1.0368e+00  7.35e-01  5.02e-03  2.28e-01  8.60e-04  1.39e-02  8.19e-01  
  6  +2.6160e-01  +6.5321e-01  3.92e-01  2.63e-03  1.17e-01  4.27e-04  7.98e-03  5.03e-01  
  7  +2.2486e-01  +3.9360e-01  1.69e-01  1.06e-03  4.71e-02  1.74e-04  3.64e-03  6.33e-01  
  8  +2.1097e-01  +3.1062e-01  9.96e-02  6.08e-04  2.71e-02  1.01e-04  2.21e-03  4.49e-01  
  9  +2.0035e-01  +2.4935e-01  4.90e-02  2.92e-04  1.29e-02  4.81e-05  1.13e-03  5.34e-01  
 10  +1.9423e-01  +2.1544e-01  2.12e-02  1.21e-04  5.37e-03  1.85e-05  4.91e-04  8.04e-01  
 11  +1.8945e-01  +1.9285e-01  3.40e-03  1.92e-05  8.48e-04  2.15e-06  8.36e-05  9.90e-01  
 12  +1.8841e-01  +1.8873e-01  3.20e-04  1.81e-06  7.93e-05  1.80e-07  8.33e-06  9.11e-01  
 13  +1.8830e-01  +1.8831e-01  8.55e-06  4.81e-08  2.11e-06  5.13e-09  2.25e-07  9.90e-01  
 14  +1.8830e-01  +1.8830e-01  8.55e-08  4.81e-10  2.11e-08  5.13e-11  2.25e-09  9.90e-01  
 15  +1.8830e-01  +1.8830e-01  8.55e-10  4.81e-12  2.11e-10  5.14e-13  2.25e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.5652ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:53 PM: Optimal value: 1.883e-01
(CVXPY) Sep 20 07:56:53 PM: Compilation took 5.012e-03 seconds
(CVXPY) Sep 20 07:56:53 PM: Solver (including time spent in interface) took 1.250e-02 seconds
Iteration: 29, Objective: 0.1883
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:53 PM: Your problem has 533 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:53 PM: Finished problem compilation (took 4.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 533
  constraints   = 783
  nnz(P)        = 0
  nnz(A)        = 5550
  cones (total) = 1
    : Nonnegative = 1,  numel = 783

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9716e-01  +2.5247e+02  2.52e+02  9.50e-01  2.17e+01  1.00e+00  1.02e+00   ------   
  1  +4.9582e-01  +5.7125e+01  5.66e+01  4.37e-01  1.25e+01  3.98e-03  5.77e-01  5.73e-01  
  2  +4.5173e-01  +8.5730e+00  8.12e+00  1.10e-01  4.49e+00  2.48e-02  2.32e-01  9.90e-01  
  3  +4.0851e-01  +2.6608e+00  2.25e+00  2.37e-02  1.09e+00  1.00e-02  5.80e-02  7.73e-01  
  4  +3.5492e-01  +2.3886e+00  2.03e+00  1.52e-02  6.99e-01  9.77e-03  3.83e-02  4.62e-01  
  5  +3.0255e-01  +1.1151e+00  8.13e-01  5.58e-03  2.53e-01  1.42e-03  1.54e-02  7.71e-01  
  6  +2.6326e-01  +6.8113e-01  4.18e-01  2.83e-03  1.26e-01  6.56e-04  8.59e-03  5.09e-01  
  7  +2.2412e-01  +3.9213e-01  1.68e-01  1.07e-03  4.70e-02  2.35e-04  3.65e-03  6.72e-01  
  8  +2.1143e-01  +3.1597e-01  1.05e-01  6.45e-04  2.86e-02  1.40e-04  2.33e-03  4.23e-01  
  9  +2.0063e-01  +2.5223e-01  5.16e-02  3.11e-04  1.37e-02  6.59e-05  1.19e-03  5.42e-01  
 10  +1.9363e-01  +2.1349e-01  1.99e-02  1.15e-04  5.09e-03  2.11e-05  4.62e-04  7.82e-01  
 11  +1.8971e-01  +1.9390e-01  4.19e-03  2.43e-05  1.07e-03  2.70e-06  1.04e-04  9.90e-01  
 12  +1.8865e-01  +1.8970e-01  1.04e-03  6.00e-06  2.63e-04  6.70e-07  2.72e-05  9.37e-01  
 13  +1.8832e-01  +1.8838e-01  5.85e-05  3.36e-07  1.47e-05  3.63e-08  1.56e-06  9.47e-01  
 14  +1.8830e-01  +1.8830e-01  5.97e-07  3.43e-09  1.50e-07  3.70e-10  1.59e-08  9.90e-01  
 15  +1.8830e-01  +1.8830e-01  5.99e-09  3.44e-11  1.50e-09  3.72e-12  1.60e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.8392ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:53 PM: Optimal value: 1.883e-01
(CVXPY) Sep 20 07:56:53 PM: Compilation took 4.006e-03 seconds
(CVXPY) Sep 20 07:56:53 PM: Solver (including time spent in interface) took 1.152e-02 seconds
Iteration: 30, Objective: 0.1883
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:53 PM: Your problem has 538 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:53 PM: Finished problem compilation (took 5.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 538
  constraints   = 788
  nnz(P)        = 0
  nnz(A)        = 5565
  cones (total) = 1
    : Nonnegative = 1,  numel = 788

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9716e-01  +2.5245e+02  2.52e+02  9.50e-01  2.16e+01  1.00e+00  1.02e+00   ------   
  1  +4.9412e-01  +5.7155e+01  5.67e+01  4.37e-01  1.24e+01  3.99e-03  5.77e-01  5.73e-01  
  2  +4.4991e-01  +8.5735e+00  8.12e+00  1.10e-01  4.46e+00  2.48e-02  2.31e-01  9.90e-01  
  3  +4.0717e-01  +2.7115e+00  2.30e+00  2.44e-02  1.11e+00  1.00e-02  5.97e-02  7.66e-01  
  4  +3.5232e-01  +2.4419e+00  2.09e+00  1.56e-02  7.13e-01  9.92e-03  3.93e-02  4.62e-01  
  5  +2.9762e-01  +9.8439e-01  6.87e-01  4.78e-03  2.15e-01  2.60e-04  1.33e-02  8.66e-01  
  6  +2.5818e-01  +6.3487e-01  3.77e-01  2.56e-03  1.13e-01  1.63e-04  7.83e-03  4.94e-01  
  7  +2.2503e-01  +4.0866e-01  1.84e-01  1.18e-03  5.16e-02  8.97e-05  4.00e-03  5.68e-01  
  8  +2.0929e-01  +3.1295e-01  1.04e-01  6.42e-04  2.83e-02  5.30e-05  2.33e-03  4.68e-01  
  9  +1.9850e-01  +2.4922e-01  5.07e-02  3.07e-04  1.35e-02  2.72e-05  1.18e-03  5.54e-01  
 10  +1.9133e-01  +2.0985e-01  1.85e-02  1.08e-04  4.76e-03  1.14e-05  4.36e-04  7.70e-01  
 11  +1.8747e-01  +1.9079e-01  3.32e-03  1.94e-05  8.48e-04  2.00e-06  8.35e-05  9.35e-01  
 12  +1.8661e-01  +1.8723e-01  6.19e-04  3.59e-06  1.57e-04  3.90e-07  1.64e-05  9.72e-01  
 13  +1.8640e-01  +1.8642e-01  1.13e-05  6.58e-08  2.86e-06  6.86e-09  3.04e-07  9.82e-01  
 14  +1.8640e-01  +1.8640e-01  1.13e-07  6.58e-10  2.86e-08  6.86e-11  3.04e-09  9.90e-01  
 15  +1.8640e-01  +1.8640e-01  1.13e-09  6.58e-12  2.86e-10  6.87e-13  3.04e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.0112ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:53 PM: Optimal value: 1.864e-01
(CVXPY) Sep 20 07:56:53 PM: Compilation took 5.509e-03 seconds
(CVXPY) Sep 20 07:56:53 PM: Solver (including time spent in interface) took 1.306e-02 seconds
Iteration: 31, Objective: 0.1864
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:53 PM: Your problem has 539 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:53 PM: Finished problem compilation (took 5.507e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 539
  constraints   = 789
  nnz(P)        = 0
  nnz(A)        = 5573
  cones (total) = 1
    : Nonnegative = 1,  numel = 789

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9716e-01  +2.5245e+02  2.52e+02  9.50e-01  2.16e+01  1.00e+00  1.02e+00   ------   
  1  +4.9394e-01  +5.7156e+01  5.67e+01  4.37e-01  1.24e+01  3.99e-03  5.76e-01  5.73e-01  
  2  +4.4962e-01  +8.5700e+00  8.12e+00  1.10e-01  4.45e+00  2.48e-02  2.31e-01  9.90e-01  
  3  +4.0719e-01  +2.7464e+00  2.34e+00  2.48e-02  1.13e+00  1.01e-02  6.08e-02  7.62e-01  
  4  +3.5192e-01  +2.4658e+00  2.11e+00  1.58e-02  7.21e-01  1.00e-02  3.98e-02  4.63e-01  
  5  +2.9791e-01  +9.8836e-01  6.90e-01  4.82e-03  2.16e-01  2.33e-04  1.34e-02  8.68e-01  
  6  +2.5895e-01  +6.4104e-01  3.82e-01  2.60e-03  1.15e-01  1.52e-04  7.94e-03  4.89e-01  
  7  +2.2530e-01  +4.1032e-01  1.85e-01  1.19e-03  5.21e-02  8.50e-05  4.03e-03  5.72e-01  
  8  +2.0946e-01  +3.1412e-01  1.05e-01  6.48e-04  2.86e-02  5.08e-05  2.35e-03  4.68e-01  
  9  +1.9865e-01  +2.5059e-01  5.19e-02  3.13e-04  1.38e-02  2.70e-05  1.20e-03  5.56e-01  
 10  +1.9372e-01  +2.2343e-01  2.97e-02  1.75e-04  7.75e-03  1.70e-05  6.93e-04  5.80e-01  
 11  +1.8818e-01  +1.9515e-01  6.97e-03  4.08e-05  1.80e-03  3.73e-06  1.71e-04  7.66e-01  
 12  +1.8675e-01  +1.8813e-01  1.39e-03  8.11e-06  3.56e-04  7.60e-07  3.62e-05  8.63e-01  
 13  +1.8642e-01  +1.8680e-01  3.77e-04  2.14e-06  9.43e-05  2.21e-07  1.01e-05  8.50e-01  
 14  +1.8630e-01  +1.8631e-01  9.62e-06  5.43e-08  2.39e-06  5.69e-09  2.59e-07  9.86e-01  
 15  +1.8630e-01  +1.8630e-01  9.63e-08  5.44e-10  2.39e-08  5.70e-11  2.60e-09  9.90e-01  
 16  +1.8630e-01  +1.8630e-01  9.64e-10  5.44e-12  2.39e-10  5.72e-13  2.60e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.9262ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:53 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:53 PM: Optimal value: 1.863e-01
(CVXPY) Sep 20 07:56:53 PM: Compilation took 5.507e-03 seconds
(CVXPY) Sep 20 07:56:53 PM: Solver (including time spent in interface) took 1.369e-02 seconds
FULL MODEL:
  Accruacy: 0.764
  Our objective: 0.528

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.028)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x8 = 1)                       <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 0)                                             <-- (term's our objective: 0.036)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.02)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x7 = 1)                                             <-- (term's our objective: 0.048)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.02)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x8 = 1)                                             <-- (term's our objective: 0.04)
 OR (x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.024)
 OR (x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.02)
 OR (x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.028)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 7.840956687927246
Best over terms:
  Our final objective: 0.04800000000000004
    Its accruacy: 0.524
    Its hamming distance: 8
  Shortest hamming distance: 4
    Its our objective: 0.02000000000000002
  Highest accruacy: 0.524
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

