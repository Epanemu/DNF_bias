Command:
python test_script.py -s constant_subclass -d 9 -n 1000 --seed 34 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 9.

Computed total variation: 0.542
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:39 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:39 PM: Finished problem compilation (took 9.515e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 6019
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9998e-01  +5.0064e+02  5.00e+02  9.56e-01  3.59e+01  1.00e+00  1.00e+00   ------   
  1  +5.8067e-01  +1.0886e+02  1.08e+02  4.15e-01  2.30e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3059e-01  +1.2498e+01  1.20e+01  1.44e-01  1.01e+01  1.65e-02  2.72e-01  9.47e-01  
  3  +5.0629e-01  +3.1668e+00  2.66e+00  5.56e-02  3.81e+00  4.19e-05  2.38e-01  4.42e-01  
  4  +5.0039e-01  +6.4067e-01  1.40e-01  3.14e-03  2.27e-01  8.72e-06  4.57e-02  9.83e-01  
  5  +5.0010e-01  +5.6785e-01  6.78e-02  1.47e-03  1.06e-01  8.51e-06  1.21e-02  8.23e-01  
  6  +4.9851e-01  +5.6418e-01  6.57e-02  3.20e-04  2.35e-02  7.71e-05  1.04e-03  9.35e-01  
  7  +4.9408e-01  +5.3876e-01  4.47e-02  1.22e-04  9.01e-03  9.20e-05  3.96e-04  6.73e-01  
  8  +4.8817e-01  +5.0922e-01  2.10e-02  5.38e-05  3.96e-03  2.31e-05  1.85e-04  6.80e-01  
  9  +4.8326e-01  +4.8624e-01  2.98e-03  6.68e-06  4.91e-04  2.24e-06  2.50e-05  8.93e-01  
 10  +4.8216e-01  +4.8232e-01  1.65e-04  3.26e-07  2.40e-05  1.07e-07  1.36e-06  9.66e-01  
 11  +4.8210e-01  +4.8210e-01  1.66e-06  3.27e-09  2.40e-07  1.08e-09  1.37e-08  9.90e-01  
 12  +4.8210e-01  +4.8210e-01  1.66e-08  3.27e-11  2.40e-09  1.08e-11  1.37e-10  9.90e-01  
 13  +4.8210e-01  +4.8210e-01  1.66e-10  3.27e-13  2.40e-11  1.09e-13  1.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.4616ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:39 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:39 PM: Optimal value: 4.821e-01
(CVXPY) Sep 20 07:57:39 PM: Compilation took 9.515e-03 seconds
(CVXPY) Sep 20 07:57:39 PM: Solver (including time spent in interface) took 1.017e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4821
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:39 PM: Your problem has 529 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:39 PM: Finished problem compilation (took 5.993e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 529
  constraints   = 1029
  nnz(P)        = 0
  nnz(A)        = 6719
  cones (total) = 1
    : Nonnegative = 1,  numel = 1029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9985e-01  +5.0100e+02  5.00e+02  9.56e-01  3.64e+01  1.00e+00  1.01e+00   ------   
  1  +5.7946e-01  +1.0900e+02  1.08e+02  4.18e-01  2.32e+01  3.78e-03  5.77e-01  5.86e-01  
  2  +5.2924e-01  +1.2235e+01  1.17e+01  1.41e-01  1.00e+01  1.68e-02  2.68e-01  9.63e-01  
  3  +5.0579e-01  +3.0565e+00  2.55e+00  5.37e-02  3.74e+00  4.33e-05  2.26e-01  5.11e-01  
  4  +5.0106e-01  +9.7840e-01  4.77e-01  1.08e-02  7.79e-01  1.40e-05  9.68e-02  6.62e-01  
  5  +4.9999e-01  +7.2229e-01  2.22e-01  4.67e-03  3.43e-01  1.50e-05  2.65e-02  7.84e-01  
  6  +4.9359e-01  +6.7940e-01  1.86e-01  9.11e-04  6.88e-02  9.79e-05  2.77e-03  9.07e-01  
  7  +4.8618e-01  +6.1899e-01  1.33e-01  5.20e-04  3.90e-02  6.77e-05  1.66e-03  5.08e-01  
  8  +4.8299e-01  +5.9792e-01  1.15e-01  4.09e-04  3.05e-02  4.94e-05  1.35e-03  4.33e-01  
  9  +4.7748e-01  +5.6442e-01  8.69e-02  2.54e-04  1.90e-02  3.82e-05  8.76e-04  4.67e-01  
 10  +4.7561e-01  +5.5283e-01  7.72e-02  2.19e-04  1.63e-02  3.23e-05  7.52e-04  2.99e-01  
 11  +4.7248e-01  +5.3384e-01  6.14e-02  1.62e-04  1.21e-02  2.41e-05  5.56e-04  6.09e-01  
 12  +4.6470e-01  +4.8962e-01  2.49e-02  5.92e-05  4.41e-03  1.03e-05  2.04e-04  9.90e-01  
 13  +4.6003e-01  +4.6661e-01  6.59e-03  1.35e-05  1.01e-03  4.07e-06  4.39e-05  8.35e-01  
 14  +4.5763e-01  +4.6073e-01  3.11e-03  5.03e-06  3.82e-04  2.01e-06  1.65e-05  7.48e-01  
 15  +4.5655e-01  +4.5707e-01  5.20e-04  8.37e-07  6.35e-05  3.81e-07  2.75e-06  9.90e-01  
 16  +4.5630e-01  +4.5631e-01  5.61e-06  8.99e-09  6.83e-07  4.04e-09  2.97e-08  9.89e-01  
 17  +4.5630e-01  +4.5630e-01  5.61e-08  8.99e-11  6.83e-09  4.04e-11  2.97e-10  9.90e-01  
 18  +4.5630e-01  +4.5630e-01  5.61e-10  8.99e-13  6.83e-11  4.05e-13  2.98e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.8332ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:39 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:39 PM: Optimal value: 4.563e-01
(CVXPY) Sep 20 07:57:39 PM: Compilation took 5.993e-03 seconds
(CVXPY) Sep 20 07:57:39 PM: Solver (including time spent in interface) took 1.190e-02 seconds
Iteration: 2, Objective: 0.4563
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:39 PM: Your problem has 539 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:39 PM: Finished problem compilation (took 6.511e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 539
  constraints   = 1039
  nnz(P)        = 0
  nnz(A)        = 7380
  cones (total) = 1
    : Nonnegative = 1,  numel = 1039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9981e-01  +5.0108e+02  5.01e+02  9.56e-01  3.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.7872e-01  +1.0904e+02  1.08e+02  4.19e-01  2.34e+01  3.78e-03  5.77e-01  5.86e-01  
  2  +5.2849e-01  +1.2086e+01  1.16e+01  1.40e-01  9.93e+00  1.69e-02  2.64e-01  9.73e-01  
  3  +5.0553e-01  +2.9966e+00  2.49e+00  5.27e-02  3.71e+00  4.42e-05  2.18e-01  5.54e-01  
  4  +5.0109e-01  +1.0293e+00  5.28e-01  1.19e-02  8.75e-01  1.54e-05  9.35e-02  6.45e-01  
  5  +4.9957e-01  +8.3733e-01  3.38e-01  5.97e-03  4.48e-01  2.74e-05  2.38e-02  8.29e-01  
  6  +4.9093e-01  +7.6990e-01  2.79e-01  1.23e-03  9.47e-02  1.22e-04  3.65e-03  8.61e-01  
  7  +4.8467e-01  +7.3213e-01  2.47e-01  8.19e-04  6.27e-02  1.21e-04  2.43e-03  5.08e-01  
  8  +4.7286e-01  +6.5308e-01  1.80e-01  4.70e-04  3.59e-02  8.78e-05  1.43e-03  6.42e-01  
  9  +4.6512e-01  +6.1625e-01  1.51e-01  3.53e-04  2.69e-02  7.35e-05  1.09e-03  3.99e-01  
 10  +4.3952e-01  +4.8700e-01  4.75e-02  1.00e-04  7.60e-03  1.55e-05  3.38e-04  9.90e-01  
 11  +4.2595e-01  +4.3257e-01  6.62e-03  1.32e-05  1.00e-03  2.13e-06  4.72e-05  8.93e-01  
 12  +4.2366e-01  +4.2432e-01  6.53e-04  1.25e-06  9.45e-05  3.12e-07  4.76e-06  9.70e-01  
 13  +4.2340e-01  +4.2341e-01  7.63e-06  1.45e-08  1.09e-06  3.64e-09  5.59e-08  9.89e-01  
 14  +4.2340e-01  +4.2340e-01  7.64e-08  1.45e-10  1.09e-08  3.65e-11  5.59e-10  9.90e-01  
 15  +4.2340e-01  +4.2340e-01  8.23e-10  1.56e-12  1.18e-10  3.95e-13  6.06e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.2191ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:39 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:39 PM: Optimal value: 4.234e-01
(CVXPY) Sep 20 07:57:39 PM: Compilation took 6.511e-03 seconds
(CVXPY) Sep 20 07:57:39 PM: Solver (including time spent in interface) took 1.319e-02 seconds
Iteration: 3, Objective: 0.4234
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:40 PM: Your problem has 549 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:40 PM: Finished problem compilation (took 7.512e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 549
  constraints   = 1049
  nnz(P)        = 0
  nnz(A)        = 7731
  cones (total) = 1
    : Nonnegative = 1,  numel = 1049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9972e-01  +5.0153e+02  5.01e+02  9.56e-01  3.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.7738e-01  +1.0918e+02  1.09e+02  4.21e-01  2.34e+01  3.78e-03  5.78e-01  5.85e-01  
  2  +5.2747e-01  +1.1893e+01  1.14e+01  1.37e-01  9.70e+00  1.71e-02  2.60e-01  9.87e-01  
  3  +5.0520e-01  +2.9215e+00  2.42e+00  5.12e-02  3.63e+00  4.59e-05  2.06e-01  6.13e-01  
  4  +5.0105e-01  +1.1038e+00  6.03e-01  1.35e-02  9.94e-01  1.84e-05  8.70e-02  6.31e-01  
  5  +4.9523e-01  +1.2058e+00  7.11e-01  4.91e-03  3.78e-01  1.05e-04  1.40e-02  9.67e-01  
  6  +4.8012e-01  +9.2131e-01  4.41e-01  1.54e-03  1.19e-01  1.34e-04  4.46e-03  6.95e-01  
  7  +4.6767e-01  +8.0761e-01  3.40e-01  9.08e-04  6.96e-02  1.27e-04  2.67e-03  5.15e-01  
  8  +4.6059e-01  +7.4166e-01  2.81e-01  6.96e-04  5.32e-02  1.09e-04  2.09e-03  3.38e-01  
  9  +4.5191e-01  +6.2192e-01  1.70e-01  4.53e-04  3.45e-02  6.74e-05  1.43e-03  9.90e-01  
 10  +4.2971e-01  +5.0467e-01  7.50e-02  1.71e-04  1.30e-02  2.93e-05  5.75e-04  6.22e-01  
 11  +4.1753e-01  +4.4470e-01  2.72e-02  5.84e-05  4.43e-03  1.26e-05  2.05e-04  8.61e-01  
 12  +4.1187e-01  +4.1949e-01  7.61e-03  1.61e-05  1.22e-03  3.58e-06  5.82e-05  7.48e-01  
 13  +4.0981e-01  +4.1051e-01  6.96e-04  1.46e-06  1.11e-04  3.20e-07  5.39e-06  9.14e-01  
 14  +4.0961e-01  +4.0964e-01  2.70e-05  5.67e-08  4.30e-06  1.26e-08  2.10e-07  9.68e-01  
 15  +4.0960e-01  +4.0960e-01  2.72e-07  5.71e-10  4.34e-08  1.27e-10  2.12e-09  9.90e-01  
 16  +4.0960e-01  +4.0960e-01  2.73e-09  5.73e-12  4.35e-10  1.28e-12  2.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.7013ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:40 PM: Optimal value: 4.096e-01
(CVXPY) Sep 20 07:57:40 PM: Compilation took 7.512e-03 seconds
(CVXPY) Sep 20 07:57:40 PM: Solver (including time spent in interface) took 1.407e-02 seconds
Iteration: 4, Objective: 0.4096
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:40 PM: Your problem has 559 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:40 PM: Finished problem compilation (took 7.179e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 559
  constraints   = 1059
  nnz(P)        = 0
  nnz(A)        = 8017
  cones (total) = 1
    : Nonnegative = 1,  numel = 1059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9970e-01  +5.0143e+02  5.01e+02  9.56e-01  3.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.7650e-01  +1.0917e+02  1.09e+02  4.22e-01  2.32e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2696e-01  +1.1884e+01  1.14e+01  1.37e-01  9.57e+00  1.72e-02  2.58e-01  9.90e-01  
  3  +5.0542e-01  +2.9118e+00  2.41e+00  5.18e-02  3.67e+00  4.88e-05  1.93e-01  6.54e-01  
  4  +5.0093e-01  +1.1020e+00  6.01e-01  1.37e-02  1.00e+00  2.14e-05  7.78e-02  6.50e-01  
  5  +4.9310e-01  +1.1918e+00  6.99e-01  4.08e-03  3.15e-01  1.32e-04  1.13e-02  9.39e-01  
  6  +4.7122e-01  +8.9236e-01  4.21e-01  1.17e-03  9.06e-02  1.79e-04  3.31e-03  7.31e-01  
  7  +4.5193e-01  +7.4702e-01  2.95e-01  7.13e-04  5.46e-02  1.26e-04  2.12e-03  4.47e-01  
  8  +4.3011e-01  +5.9043e-01  1.60e-01  3.79e-04  2.88e-02  6.30e-05  1.23e-03  5.15e-01  
  9  +4.1532e-01  +5.0167e-01  8.64e-02  1.97e-04  1.50e-02  3.38e-05  6.79e-04  5.10e-01  
 10  +4.0272e-01  +4.3090e-01  2.82e-02  6.23e-05  4.73e-03  1.20e-05  2.31e-04  7.92e-01  
 11  +3.9732e-01  +4.0543e-01  8.11e-03  1.74e-05  1.33e-03  3.56e-06  6.89e-05  8.02e-01  
 12  +3.9521e-01  +3.9646e-01  1.25e-03  2.62e-06  2.00e-04  5.43e-07  1.09e-05  8.80e-01  
 13  +3.9480e-01  +3.9482e-01  1.38e-05  2.89e-08  2.20e-06  5.81e-09  1.22e-07  9.90e-01  
 14  +3.9480e-01  +3.9480e-01  1.38e-07  2.89e-10  2.20e-08  5.81e-11  1.22e-09  9.90e-01  
 15  +3.9480e-01  +3.9480e-01  1.38e-09  2.89e-12  2.20e-10  5.82e-13  1.22e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.5459ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:40 PM: Optimal value: 3.948e-01
(CVXPY) Sep 20 07:57:40 PM: Compilation took 7.179e-03 seconds
(CVXPY) Sep 20 07:57:40 PM: Solver (including time spent in interface) took 1.462e-02 seconds
Iteration: 5, Objective: 0.3948
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:40 PM: Your problem has 569 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:40 PM: Finished problem compilation (took 7.408e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 569
  constraints   = 1069
  nnz(P)        = 0
  nnz(A)        = 8294
  cones (total) = 1
    : Nonnegative = 1,  numel = 1069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9967e-01  +5.0141e+02  5.01e+02  9.57e-01  3.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.7535e-01  +1.0915e+02  1.09e+02  4.23e-01  2.31e+01  3.79e-03  5.77e-01  5.86e-01  
  2  +5.2628e-01  +1.1970e+01  1.14e+01  1.36e-01  9.48e+00  1.74e-02  2.57e-01  9.90e-01  
  3  +5.0564e-01  +2.7033e+00  2.20e+00  4.87e-02  3.49e+00  5.24e-05  1.63e-01  7.60e-01  
  4  +5.0073e-01  +1.1279e+00  6.27e-01  1.42e-02  1.05e+00  3.15e-05  6.30e-02  6.65e-01  
  5  +4.9211e-01  +1.1740e+00  6.82e-01  3.96e-03  3.07e-01  1.59e-04  1.08e-02  8.88e-01  
  6  +4.6858e-01  +8.9773e-01  4.29e-01  1.23e-03  9.51e-02  2.09e-04  3.42e-03  7.17e-01  
  7  +4.4863e-01  +7.5550e-01  3.07e-01  7.79e-04  5.96e-02  1.39e-04  2.29e-03  4.74e-01  
  8  +4.1598e-01  +5.4540e-01  1.29e-01  3.11e-04  2.36e-02  4.70e-05  1.04e-03  7.26e-01  
  9  +3.9921e-01  +4.5607e-01  5.69e-02  1.32e-04  9.98e-03  2.43e-05  4.79e-04  8.09e-01  
 10  +3.8755e-01  +3.9975e-01  1.22e-02  2.77e-05  2.11e-03  4.86e-06  1.10e-04  8.14e-01  
 11  +3.8425e-01  +3.8526e-01  1.00e-03  2.23e-06  1.70e-04  3.76e-07  9.71e-06  9.87e-01  
 12  +3.8390e-01  +3.8391e-01  1.07e-05  2.36e-08  1.80e-06  3.82e-09  1.05e-07  9.90e-01  
 13  +3.8390e-01  +3.8390e-01  1.07e-07  2.36e-10  1.80e-08  3.82e-11  1.05e-09  9.90e-01  
 14  +3.8390e-01  +3.8390e-01  1.07e-09  2.36e-12  1.80e-10  3.83e-13  1.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.116ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:40 PM: Optimal value: 3.839e-01
(CVXPY) Sep 20 07:57:40 PM: Compilation took 7.408e-03 seconds
(CVXPY) Sep 20 07:57:40 PM: Solver (including time spent in interface) took 1.450e-02 seconds
Iteration: 6, Objective: 0.3839
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:40 PM: Your problem has 579 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:40 PM: Finished problem compilation (took 6.667e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 579
  constraints   = 1079
  nnz(P)        = 0
  nnz(A)        = 8487
  cones (total) = 1
    : Nonnegative = 1,  numel = 1079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0144e+02  5.01e+02  9.57e-01  3.66e+01  1.00e+00  1.01e+00   ------   
  1  +5.7388e-01  +1.0921e+02  1.09e+02  4.24e-01  2.30e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2529e-01  +1.2093e+01  1.16e+01  1.36e-01  9.41e+00  1.75e-02  2.56e-01  9.90e-01  
  3  +5.0596e-01  +2.3796e+00  1.87e+00  4.16e-02  3.05e+00  5.77e-05  1.26e-01  8.59e-01  
  4  +5.0019e-01  +1.1132e+00  6.13e-01  1.12e-02  8.49e-01  6.66e-05  3.56e-02  7.68e-01  
  5  +4.8769e-01  +1.0438e+00  5.56e-01  2.35e-03  1.84e-01  2.92e-04  6.12e-03  8.49e-01  
  6  +4.7010e-01  +9.0890e-01  4.39e-01  1.35e-03  1.05e-01  2.68e-04  3.66e-03  4.95e-01  
  7  +4.4759e-01  +7.5737e-01  3.10e-01  8.32e-04  6.39e-02  1.71e-04  2.39e-03  4.72e-01  
  8  +4.1430e-01  +5.5577e-01  1.41e-01  3.54e-04  2.69e-02  5.45e-05  1.14e-03  7.45e-01  
  9  +4.0033e-01  +4.8402e-01  8.37e-02  2.02e-04  1.54e-02  3.48e-05  6.78e-04  6.43e-01  
 10  +3.8452e-01  +4.0478e-01  2.03e-02  4.68e-05  3.57e-03  8.38e-06  1.68e-04  8.05e-01  
 11  +3.8215e-01  +3.9445e-01  1.23e-02  2.72e-05  2.07e-03  5.44e-06  1.00e-04  5.65e-01  
 12  +3.7907e-01  +3.8181e-01  2.74e-03  5.75e-06  4.36e-04  1.28e-06  2.29e-05  9.41e-01  
 13  +3.7814e-01  +3.7827e-01  1.21e-04  2.49e-07  1.89e-05  5.37e-08  1.03e-06  9.65e-01  
 14  +3.7810e-01  +3.7810e-01  1.21e-06  2.49e-09  1.89e-07  5.38e-10  1.03e-08  9.90e-01  
 15  +3.7810e-01  +3.7810e-01  1.21e-08  2.49e-11  1.89e-09  5.38e-12  1.03e-10  9.90e-01  
 16  +3.7810e-01  +3.7810e-01  1.21e-10  2.49e-13  1.89e-11  5.42e-14  1.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.3239ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:40 PM: Optimal value: 3.781e-01
(CVXPY) Sep 20 07:57:40 PM: Compilation took 6.667e-03 seconds
(CVXPY) Sep 20 07:57:40 PM: Solver (including time spent in interface) took 1.505e-02 seconds
Iteration: 7, Objective: 0.3781
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:40 PM: Your problem has 589 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:40 PM: Finished problem compilation (took 8.386e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 589
  constraints   = 1089
  nnz(P)        = 0
  nnz(A)        = 8717
  cones (total) = 1
    : Nonnegative = 1,  numel = 1089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0159e+02  5.01e+02  9.57e-01  3.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.7281e-01  +1.0924e+02  1.09e+02  4.25e-01  2.28e+01  3.79e-03  5.77e-01  5.86e-01  
  2  +5.2472e-01  +1.2183e+01  1.17e+01  1.36e-01  9.31e+00  1.77e-02  2.55e-01  9.90e-01  
  3  +5.0610e-01  +2.2018e+00  1.70e+00  3.68e-02  2.73e+00  6.14e-05  1.07e-01  8.95e-01  
  4  +5.0179e-01  +1.5551e+00  1.05e+00  1.24e-02  9.53e-01  1.44e-04  3.25e-02  7.70e-01  
  5  +4.9123e-01  +1.3890e+00  8.98e-01  3.56e-03  2.79e-01  3.45e-04  8.96e-03  7.60e-01  
  6  +4.6861e-01  +1.0302e+00  5.62e-01  1.71e-03  1.33e-01  2.30e-04  4.58e-03  6.30e-01  
  7  +4.4980e-01  +8.6090e-01  4.11e-01  1.16e-03  8.89e-02  1.57e-04  3.25e-03  4.49e-01  
  8  +4.1424e-01  +6.0135e-01  1.87e-01  4.86e-04  3.68e-02  6.21e-05  1.52e-03  7.56e-01  
  9  +3.9205e-01  +4.7410e-01  8.21e-02  2.02e-04  1.52e-02  2.79e-05  6.72e-04  6.27e-01  
 10  +3.8321e-01  +4.3017e-01  4.70e-02  1.10e-04  8.30e-03  1.73e-05  3.75e-04  5.15e-01  
 11  +3.7586e-01  +3.9586e-01  2.00e-02  4.44e-05  3.37e-03  7.94e-06  1.57e-04  6.53e-01  
 12  +3.7171e-01  +3.7641e-01  4.70e-03  1.03e-05  7.77e-04  2.14e-06  3.69e-05  8.76e-01  
 13  +3.7054e-01  +3.7132e-01  7.74e-04  1.69e-06  1.28e-04  3.56e-07  6.13e-06  8.66e-01  
 14  +3.7031e-01  +3.7036e-01  4.18e-05  9.12e-08  6.91e-06  1.96e-08  3.33e-07  9.55e-01  
 15  +3.7030e-01  +3.7030e-01  4.20e-07  9.16e-10  6.94e-08  1.97e-10  3.34e-09  9.90e-01  
 16  +3.7030e-01  +3.7030e-01  4.21e-09  9.18e-12  6.95e-10  1.97e-12  3.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.9607ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:40 PM: Optimal value: 3.703e-01
(CVXPY) Sep 20 07:57:40 PM: Compilation took 8.386e-03 seconds
(CVXPY) Sep 20 07:57:40 PM: Solver (including time spent in interface) took 1.605e-02 seconds
Iteration: 8, Objective: 0.3703
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:40 PM: Your problem has 599 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:40 PM: Finished problem compilation (took 8.027e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 599
  constraints   = 1099
  nnz(P)        = 0
  nnz(A)        = 8861
  cones (total) = 1
    : Nonnegative = 1,  numel = 1099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9958e-01  +5.0157e+02  5.01e+02  9.57e-01  3.64e+01  1.00e+00  1.01e+00   ------   
  1  +5.7176e-01  +1.0925e+02  1.09e+02  4.26e-01  2.26e+01  3.80e-03  5.77e-01  5.86e-01  
  2  +5.2419e-01  +1.2253e+01  1.17e+01  1.36e-01  9.21e+00  1.77e-02  2.54e-01  9.90e-01  
  3  +5.0634e-01  +2.1440e+00  1.64e+00  3.44e-02  2.56e+00  2.02e-04  9.61e-02  8.94e-01  
  4  +5.0642e-01  +2.2180e+00  1.71e+00  2.47e-02  1.88e+00  3.53e-04  6.21e-02  4.02e-01  
  5  +5.0276e-01  +2.0080e+00  1.51e+00  1.94e-02  1.46e+00  2.43e-04  5.33e-02  4.56e-01  
  6  +4.9155e-01  +1.5120e+00  1.02e+00  3.59e-03  2.80e-01  7.01e-04  8.87e-03  8.41e-01  
  7  +4.7315e-01  +1.2002e+00  7.27e-01  2.24e-03  1.73e-01  4.46e-04  5.81e-03  4.62e-01  
  8  +4.6132e-01  +1.0849e+00  6.24e-01  1.71e-03  1.31e-01  3.78e-04  4.56e-03  3.09e-01  
  9  +4.3020e-01  +7.3270e-01  3.02e-01  8.85e-04  6.67e-02  4.76e-05  2.65e-03  9.90e-01  
 10  +3.9466e-01  +5.2918e-01  1.35e-01  3.33e-04  2.49e-02  2.50e-05  1.09e-03  6.42e-01  
 11  +3.7898e-01  +4.5257e-01  7.36e-02  1.73e-04  1.30e-02  1.63e-05  5.95e-04  5.19e-01  
 12  +3.6790e-01  +4.0101e-01  3.31e-02  7.40e-05  5.55e-03  1.01e-05  2.65e-04  6.78e-01  
 13  +3.6189e-01  +3.7453e-01  1.26e-02  2.77e-05  2.08e-03  4.11e-06  1.02e-04  6.61e-01  
 14  +3.5913e-01  +3.6241e-01  3.29e-03  7.11e-06  5.34e-04  1.61e-06  2.66e-05  9.78e-01  
 15  +3.5803e-01  +3.5813e-01  9.55e-05  2.06e-07  1.55e-05  4.50e-08  7.81e-07  9.72e-01  
 16  +3.5800e-01  +3.5800e-01  9.56e-07  2.06e-09  1.55e-07  4.50e-10  7.82e-09  9.90e-01  
 17  +3.5800e-01  +3.5800e-01  9.56e-09  2.06e-11  1.55e-09  4.50e-12  7.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.1085ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:40 PM: Optimal value: 3.580e-01
(CVXPY) Sep 20 07:57:40 PM: Compilation took 8.027e-03 seconds
(CVXPY) Sep 20 07:57:40 PM: Solver (including time spent in interface) took 1.876e-02 seconds
Iteration: 9, Objective: 0.3580
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:41 PM: Your problem has 609 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:41 PM: Finished problem compilation (took 7.191e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 609
  constraints   = 1109
  nnz(P)        = 0
  nnz(A)        = 9063
  cones (total) = 1
    : Nonnegative = 1,  numel = 1109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9957e-01  +5.0166e+02  5.01e+02  9.57e-01  3.63e+01  1.00e+00  1.01e+00   ------   
  1  +5.7089e-01  +1.0923e+02  1.09e+02  4.26e-01  2.25e+01  3.80e-03  5.76e-01  5.86e-01  
  2  +5.2379e-01  +1.2319e+01  1.18e+01  1.36e-01  9.09e+00  1.78e-02  2.53e-01  9.90e-01  
  3  +5.0768e-01  +2.8243e+00  2.32e+00  4.48e-02  3.29e+00  1.56e-03  1.15e-01  7.44e-01  
  4  +5.0410e-01  +2.2370e+00  1.73e+00  2.30e-02  1.74e+00  2.64e-03  5.84e-02  5.90e-01  
  5  +5.0148e-01  +2.1413e+00  1.64e+00  1.71e-02  1.29e+00  1.28e-03  4.46e-02  6.86e-01  
  6  +4.8662e-01  +1.6583e+00  1.17e+00  3.51e-03  2.74e-01  3.39e-03  8.65e-03  8.10e-01  
  7  +4.6607e-01  +1.3012e+00  8.35e-01  2.24e-03  1.73e-01  1.85e-03  5.80e-03  4.68e-01  
  8  +4.4325e-01  +9.0796e-01  4.65e-01  1.46e-03  1.11e-01  1.45e-05  4.14e-03  6.72e-01  
  9  +4.0018e-01  +6.0553e-01  2.05e-01  5.19e-04  3.89e-02  5.18e-05  1.62e-03  8.15e-01  
 10  +3.7546e-01  +4.7117e-01  9.57e-02  2.32e-04  1.74e-02  2.69e-05  7.80e-04  6.02e-01  
 11  +3.6243e-01  +4.0727e-01  4.48e-02  1.04e-04  7.86e-03  1.56e-05  3.67e-04  6.61e-01  
 12  +3.5783e-01  +3.8604e-01  2.82e-02  6.45e-05  4.86e-03  1.03e-05  2.33e-04  4.32e-01  
 13  +3.5364e-01  +3.6627e-01  1.26e-02  2.83e-05  2.14e-03  5.51e-06  1.05e-04  7.83e-01  
 14  +3.5029e-01  +3.5199e-01  1.70e-03  3.77e-06  2.85e-04  7.45e-07  1.44e-05  8.97e-01  
 15  +3.4975e-01  +3.4979e-01  4.00e-05  8.90e-08  6.71e-06  1.68e-08  3.42e-07  9.80e-01  
 16  +3.4973e-01  +3.4973e-01  4.01e-07  8.92e-10  6.73e-08  1.68e-10  3.43e-09  9.90e-01  
 17  +3.4973e-01  +3.4973e-01  4.02e-09  8.92e-12  6.73e-10  1.69e-12  3.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.1656ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:41 PM: Optimal value: 3.497e-01
(CVXPY) Sep 20 07:57:41 PM: Compilation took 7.191e-03 seconds
(CVXPY) Sep 20 07:57:41 PM: Solver (including time spent in interface) took 1.882e-02 seconds
Iteration: 10, Objective: 0.3497
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:41 PM: Your problem has 619 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:41 PM: Finished problem compilation (took 8.177e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 619
  constraints   = 1119
  nnz(P)        = 0
  nnz(A)        = 9226
  cones (total) = 1
    : Nonnegative = 1,  numel = 1119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0170e+02  5.01e+02  9.58e-01  3.62e+01  1.00e+00  1.01e+00   ------   
  1  +5.6962e-01  +1.0932e+02  1.09e+02  4.27e-01  2.24e+01  3.80e-03  5.76e-01  5.86e-01  
  2  +5.2296e-01  +1.2418e+01  1.19e+01  1.35e-01  9.03e+00  1.80e-02  2.52e-01  9.90e-01  
  3  +5.0885e-01  +3.4485e+00  2.94e+00  5.19e-02  3.78e+00  2.88e-03  1.25e-01  6.40e-01  
  4  +5.0001e-01  +1.7479e+00  1.25e+00  1.52e-02  1.16e+00  4.42e-03  4.00e-02  9.15e-01  
  5  +4.9521e-01  +1.9980e+00  1.50e+00  8.45e-03  6.52e-01  4.58e-03  2.09e-02  9.22e-01  
  6  +4.7759e-01  +1.5777e+00  1.10e+00  3.33e-03  2.58e-01  5.82e-03  8.31e-03  6.35e-01  
  7  +4.5856e-01  +1.3019e+00  8.43e-01  2.22e-03  1.70e-01  3.77e-03  5.75e-03  4.31e-01  
  8  +4.3725e-01  +9.2288e-01  4.86e-01  1.48e-03  1.12e-01  3.01e-05  4.16e-03  6.64e-01  
  9  +3.9234e-01  +5.9039e-01  1.98e-01  4.96e-04  3.70e-02  4.37e-05  1.55e-03  7.78e-01  
 10  +3.7110e-01  +4.7996e-01  1.09e-01  2.60e-04  1.94e-02  2.91e-05  8.65e-04  5.38e-01  
 11  +3.5598e-01  +4.0622e-01  5.02e-02  1.16e-04  8.66e-03  1.49e-05  4.09e-04  5.93e-01  
 12  +3.4861e-01  +3.7139e-01  2.28e-02  5.17e-05  3.87e-03  6.98e-06  1.90e-04  5.63e-01  
 13  +3.4548e-01  +3.5542e-01  9.94e-03  2.21e-05  1.65e-03  4.89e-06  8.34e-05  9.90e-01  
 14  +3.4268e-01  +3.4422e-01  1.54e-03  3.39e-06  2.54e-04  7.47e-07  1.31e-05  8.57e-01  
 15  +3.4216e-01  +3.4220e-01  3.37e-05  7.41e-08  5.55e-06  1.57e-08  2.90e-07  9.87e-01  
 16  +3.4215e-01  +3.4215e-01  3.37e-07  7.41e-10  5.55e-08  1.57e-10  2.90e-09  9.90e-01  
 17  +3.4215e-01  +3.4215e-01  3.37e-09  7.41e-12  5.55e-10  1.57e-12  2.90e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.0545ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:41 PM: Optimal value: 3.422e-01
(CVXPY) Sep 20 07:57:41 PM: Compilation took 8.177e-03 seconds
(CVXPY) Sep 20 07:57:41 PM: Solver (including time spent in interface) took 1.807e-02 seconds
Iteration: 11, Objective: 0.3422
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:41 PM: Your problem has 629 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:41 PM: Finished problem compilation (took 7.010e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 629
  constraints   = 1129
  nnz(P)        = 0
  nnz(A)        = 9414
  cones (total) = 1
    : Nonnegative = 1,  numel = 1129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0185e+02  5.01e+02  9.58e-01  3.60e+01  1.00e+00  1.01e+00   ------   
  1  +5.6792e-01  +1.0939e+02  1.09e+02  4.28e-01  2.22e+01  3.81e-03  5.76e-01  5.86e-01  
  2  +5.2223e-01  +1.2524e+01  1.20e+01  1.35e-01  8.92e+00  1.81e-02  2.51e-01  9.90e-01  
  3  +5.0909e-01  +3.6508e+00  3.14e+00  5.23e-02  3.80e+00  3.43e-03  1.23e-01  6.14e-01  
  4  +5.0255e-01  +2.3627e+00  1.86e+00  2.30e-02  1.74e+00  4.40e-03  5.76e-02  6.92e-01  
  5  +4.9825e-01  +2.4701e+00  1.97e+00  1.33e-02  1.02e+00  3.52e-03  3.24e-02  8.58e-01  
  6  +4.8116e-01  +1.9425e+00  1.46e+00  4.55e-03  3.54e-01  5.47e-03  1.11e-02  6.61e-01  
  7  +4.6242e-01  +1.5638e+00  1.10e+00  3.04e-03  2.34e-01  3.51e-03  7.69e-03  4.27e-01  
  8  +4.4889e-01  +1.3362e+00  8.87e-01  2.36e-03  1.81e-01  2.34e-03  6.17e-03  3.01e-01  
  9  +4.1623e-01  +8.3458e-01  4.18e-01  1.16e-03  8.73e-02  2.03e-05  3.35e-03  8.26e-01  
 10  +3.7728e-01  +5.6038e-01  1.83e-01  4.67e-04  3.48e-02  1.76e-05  1.49e-03  6.08e-01  
 11  +3.5152e-01  +4.2408e-01  7.26e-02  1.75e-04  1.30e-02  1.50e-05  6.14e-04  7.07e-01  
 12  +3.4036e-01  +3.7090e-01  3.05e-02  7.09e-05  5.28e-03  7.96e-06  2.65e-04  6.55e-01  
 13  +3.3501e-01  +3.4652e-01  1.15e-02  2.61e-05  1.95e-03  3.67e-06  1.02e-04  7.23e-01  
 14  +3.3218e-01  +3.3388e-01  1.70e-03  3.83e-06  2.85e-04  6.41e-07  1.53e-05  9.16e-01  
 15  +3.3169e-01  +3.3189e-01  1.98e-04  4.46e-07  3.31e-05  7.47e-08  1.80e-06  8.89e-01  
 16  +3.3163e-01  +3.3163e-01  2.28e-06  5.13e-09  3.81e-07  8.60e-10  2.07e-08  9.89e-01  
 17  +3.3163e-01  +3.3163e-01  2.28e-08  5.13e-11  3.81e-09  8.60e-12  2.07e-10  9.90e-01  
 18  +3.3163e-01  +3.3163e-01  2.28e-10  5.13e-13  3.81e-11  8.60e-14  2.07e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.3009ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:41 PM: Optimal value: 3.316e-01
(CVXPY) Sep 20 07:57:41 PM: Compilation took 7.010e-03 seconds
(CVXPY) Sep 20 07:57:41 PM: Solver (including time spent in interface) took 1.956e-02 seconds
Iteration: 12, Objective: 0.3316
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:41 PM: Your problem has 639 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:41 PM: Finished problem compilation (took 7.080e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 639
  constraints   = 1139
  nnz(P)        = 0
  nnz(A)        = 9539
  cones (total) = 1
    : Nonnegative = 1,  numel = 1139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9946e-01  +5.0177e+02  5.01e+02  9.58e-01  3.59e+01  1.00e+00  1.01e+00   ------   
  1  +5.6593e-01  +1.0944e+02  1.09e+02  4.28e-01  2.21e+01  3.81e-03  5.75e-01  5.86e-01  
  2  +5.2104e-01  +1.2677e+01  1.22e+01  1.34e-01  8.84e+00  1.83e-02  2.50e-01  9.90e-01  
  3  +5.0882e-01  +3.6695e+00  3.16e+00  4.91e-02  3.59e+00  3.76e-03  1.14e-01  6.16e-01  
  4  +5.0570e-01  +3.0543e+00  2.55e+00  3.18e-02  2.38e+00  4.27e-03  7.54e-02  3.73e-01  
  5  +5.0151e-01  +2.8417e+00  2.34e+00  2.41e-02  1.81e+00  2.56e-03  5.97e-02  5.63e-01  
  6  +4.8309e-01  +1.9430e+00  1.46e+00  4.86e-03  3.80e-01  5.54e-03  1.16e-02  8.09e-01  
  7  +4.6021e-01  +1.5077e+00  1.05e+00  3.04e-03  2.35e-01  3.26e-03  7.61e-03  4.58e-01  
  8  +4.3977e-01  +1.2146e+00  7.75e-01  2.16e-03  1.65e-01  1.68e-03  5.69e-03  4.11e-01  
  9  +3.9234e-01  +7.0422e-01  3.12e-01  8.36e-04  6.24e-02  1.82e-04  2.50e-03  7.64e-01  
 10  +3.6595e-01  +5.4431e-01  1.78e-01  4.58e-04  3.40e-02  9.76e-05  1.48e-03  4.81e-01  
 11  +3.3957e-01  +4.0059e-01  6.10e-02  1.47e-04  1.09e-02  3.15e-05  5.28e-04  7.23e-01  
 12  +3.2744e-01  +3.4416e-01  1.67e-02  3.85e-05  2.87e-03  8.29e-06  1.49e-04  8.28e-01  
 13  +3.2422e-01  +3.3017e-01  5.95e-03  1.35e-05  1.01e-03  2.92e-06  5.36e-05  6.77e-01  
 14  +3.2333e-01  +3.2622e-01  2.89e-03  6.53e-06  4.88e-04  1.38e-06  2.63e-05  6.83e-01  
 15  +3.2242e-01  +3.2252e-01  1.06e-04  2.38e-07  1.78e-05  4.77e-08  9.70e-07  9.70e-01  
 16  +3.2238e-01  +3.2238e-01  1.23e-06  2.77e-09  2.07e-07  5.55e-10  1.13e-08  9.88e-01  
 17  +3.2238e-01  +3.2238e-01  1.23e-08  2.77e-11  2.07e-09  5.55e-12  1.13e-10  9.90e-01  
 18  +3.2238e-01  +3.2238e-01  1.23e-10  2.77e-13  2.07e-11  5.56e-14  1.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.6746ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:41 PM: Optimal value: 3.224e-01
(CVXPY) Sep 20 07:57:41 PM: Compilation took 7.080e-03 seconds
(CVXPY) Sep 20 07:57:41 PM: Solver (including time spent in interface) took 2.126e-02 seconds
Iteration: 13, Objective: 0.3224
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:41 PM: Your problem has 649 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:41 PM: Finished problem compilation (took 7.511e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 649
  constraints   = 1149
  nnz(P)        = 0
  nnz(A)        = 9667
  cones (total) = 1
    : Nonnegative = 1,  numel = 1149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0192e+02  5.01e+02  9.58e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.6369e-01  +1.0951e+02  1.09e+02  4.29e-01  2.19e+01  3.82e-03  5.75e-01  5.86e-01  
  2  +5.1980e-01  +1.2845e+01  1.23e+01  1.34e-01  8.75e+00  1.86e-02  2.48e-01  9.90e-01  
  3  +5.0799e-01  +3.4607e+00  2.95e+00  4.32e-02  3.17e+00  3.75e-03  9.97e-02  6.46e-01  
  4  +5.0670e-01  +3.2743e+00  2.77e+00  3.39e-02  2.53e+00  4.21e-03  7.81e-02  2.25e-01  
  5  +5.0217e-01  +2.9921e+00  2.49e+00  2.81e-02  2.08e+00  2.48e-03  6.94e-02  4.03e-01  
  6  +4.8088e-01  +1.8781e+00  1.40e+00  4.42e-03  3.48e-01  6.15e-03  1.04e-02  8.57e-01  
  7  +4.5991e-01  +1.5738e+00  1.11e+00  3.12e-03  2.43e-01  4.41e-03  7.61e-03  3.47e-01  
  8  +4.2649e-01  +1.0589e+00  6.32e-01  1.99e-03  1.51e-01  3.54e-05  5.40e-03  6.88e-01  
  9  +3.7629e-01  +6.3917e-01  2.63e-01  7.14e-04  5.30e-02  2.83e-05  2.16e-03  6.58e-01  
 10  +3.5444e-01  +5.2145e-01  1.67e-01  4.30e-04  3.18e-02  2.98e-05  1.39e-03  4.78e-01  
 11  +3.2893e-01  +3.8292e-01  5.40e-02  1.32e-04  9.79e-03  1.59e-05  4.72e-04  7.91e-01  
 12  +3.2129e-01  +3.4725e-01  2.60e-02  6.17e-05  4.59e-03  9.54e-06  2.30e-04  7.10e-01  
 13  +3.1708e-01  +3.2807e-01  1.10e-02  2.58e-05  1.92e-03  4.23e-06  9.87e-05  6.46e-01  
 14  +3.1458e-01  +3.1714e-01  2.55e-03  5.93e-06  4.41e-04  9.92e-07  2.33e-05  7.91e-01  
 15  +3.1389e-01  +3.1415e-01  2.62e-04  6.05e-07  4.50e-05  1.14e-07  2.40e-06  9.90e-01  
 16  +3.1380e-01  +3.1380e-01  2.84e-06  6.57e-09  4.88e-07  1.24e-09  2.61e-08  9.89e-01  
 17  +3.1380e-01  +3.1380e-01  2.84e-08  6.57e-11  4.88e-09  1.24e-11  2.61e-10  9.90e-01  
 18  +3.1380e-01  +3.1380e-01  2.85e-10  6.58e-13  4.90e-11  1.24e-13  2.62e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.8613ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:41 PM: Optimal value: 3.138e-01
(CVXPY) Sep 20 07:57:41 PM: Compilation took 7.511e-03 seconds
(CVXPY) Sep 20 07:57:41 PM: Solver (including time spent in interface) took 2.373e-02 seconds
Iteration: 14, Objective: 0.3138
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:41 PM: Your problem has 659 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:41 PM: Finished problem compilation (took 8.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 659
  constraints   = 1159
  nnz(P)        = 0
  nnz(A)        = 9785
  cones (total) = 1
    : Nonnegative = 1,  numel = 1159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9944e-01  +5.0191e+02  5.01e+02  9.58e-01  3.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.6290e-01  +1.0946e+02  1.09e+02  4.29e-01  2.18e+01  3.82e-03  5.74e-01  5.87e-01  
  2  +5.1911e-01  +1.2879e+01  1.24e+01  1.33e-01  8.65e+00  1.86e-02  2.47e-01  9.90e-01  
  3  +5.0732e-01  +3.2620e+00  2.75e+00  3.91e-02  2.87e+00  3.62e-03  9.06e-02  6.71e-01  
  4  +5.0647e-01  +3.1894e+00  2.68e+00  3.22e-02  2.40e+00  4.07e-03  7.41e-02  1.90e-01  
  5  +5.0217e-01  +3.0773e+00  2.58e+00  2.73e-02  2.03e+00  2.69e-03  6.62e-02  4.09e-01  
  6  +4.8215e-01  +2.1218e+00  1.64e+00  5.37e-03  4.21e-01  6.13e-03  1.26e-02  8.18e-01  
  7  +4.6077e-01  +1.7270e+00  1.27e+00  3.65e-03  2.83e-01  4.17e-03  8.86e-03  3.87e-01  
  8  +4.2181e-01  +1.0455e+00  6.24e-01  1.88e-03  1.42e-01  3.61e-05  5.05e-03  7.39e-01  
  9  +3.7538e-01  +6.7622e-01  3.01e-01  8.22e-04  6.09e-02  4.20e-05  2.47e-03  6.11e-01  
 10  +3.5235e-01  +5.4214e-01  1.90e-01  4.96e-04  3.66e-02  3.41e-05  1.59e-03  4.33e-01  
 11  +3.2814e-01  +4.0819e-01  8.01e-02  2.00e-04  1.47e-02  1.66e-05  7.04e-04  6.08e-01  
 12  +3.1905e-01  +3.6653e-01  4.75e-02  1.12e-04  8.30e-03  1.47e-05  4.15e-04  6.32e-01  
 13  +3.0786e-01  +3.1578e-01  7.92e-03  1.80e-05  1.34e-03  2.72e-06  7.17e-05  8.76e-01  
 14  +3.0555e-01  +3.0598e-01  4.33e-04  9.75e-07  7.24e-05  1.52e-07  4.01e-06  9.61e-01  
 15  +3.0540e-01  +3.0541e-01  6.44e-06  1.45e-08  1.07e-06  2.24e-09  5.99e-08  9.86e-01  
 16  +3.0540e-01  +3.0540e-01  6.44e-08  1.45e-10  1.07e-08  2.24e-11  5.99e-10  9.90e-01  
 17  +3.0540e-01  +3.0540e-01  6.46e-10  1.45e-12  1.08e-10  2.25e-13  6.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.6168ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:41 PM: Optimal value: 3.054e-01
(CVXPY) Sep 20 07:57:41 PM: Compilation took 8.000e-03 seconds
(CVXPY) Sep 20 07:57:41 PM: Solver (including time spent in interface) took 2.219e-02 seconds
Iteration: 15, Objective: 0.3054
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:42 PM: Your problem has 669 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:42 PM: Finished problem compilation (took 6.504e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 669
  constraints   = 1169
  nnz(P)        = 0
  nnz(A)        = 9913
  cones (total) = 1
    : Nonnegative = 1,  numel = 1169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0187e+02  5.01e+02  9.59e-01  3.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.6121e-01  +1.0950e+02  1.09e+02  4.29e-01  2.16e+01  3.83e-03  5.74e-01  5.86e-01  
  2  +5.1812e-01  +1.3000e+01  1.25e+01  1.32e-01  8.54e+00  1.88e-02  2.45e-01  9.90e-01  
  3  +5.0615e-01  +2.8950e+00  2.39e+00  3.24e-02  2.39e+00  3.32e-03  7.57e-02  7.24e-01  
  4  +5.0579e-01  +3.0015e+00  2.50e+00  2.85e-02  2.13e+00  3.74e-03  6.57e-02  1.93e-01  
  5  +5.0032e-01  +3.3916e+00  2.89e+00  2.13e-02  1.60e+00  3.62e-03  4.91e-02  6.26e-01  
  6  +4.8023e-01  +2.4886e+00  2.01e+00  6.45e-03  5.02e-01  5.63e-03  1.50e-02  6.97e-01  
  7  +4.5247e-01  +1.8105e+00  1.36e+00  3.90e-03  3.00e-01  3.11e-03  9.56e-03  4.88e-01  
  8  +4.3671e-01  +1.5242e+00  1.09e+00  3.10e-03  2.36e-01  1.96e-03  7.87e-03  3.03e-01  
  9  +3.8958e-01  +8.1546e-01  4.26e-01  1.22e-03  9.04e-02  1.72e-05  3.53e-03  8.81e-01  
 10  +3.5531e-01  +5.8417e-01  2.29e-01  6.16e-04  4.52e-02  2.54e-05  1.95e-03  5.37e-01  
 11  +3.2845e-01  +4.2796e-01  9.95e-02  2.56e-04  1.87e-02  1.90e-05  8.84e-04  6.51e-01  
 12  +3.1612e-01  +3.6524e-01  4.91e-02  1.20e-04  8.82e-03  1.31e-05  4.42e-04  6.33e-01  
 13  +3.0796e-01  +3.2562e-01  1.77e-02  4.09e-05  3.01e-03  8.15e-06  1.59e-04  9.90e-01  
 14  +3.0295e-01  +3.0570e-01  2.75e-03  6.10e-06  4.52e-04  1.24e-06  2.53e-05  8.72e-01  
 15  +3.0203e-01  +3.0211e-01  7.89e-05  1.74e-07  1.29e-05  3.26e-08  7.37e-07  9.76e-01  
 16  +3.0200e-01  +3.0200e-01  7.91e-07  1.74e-09  1.29e-07  3.26e-10  7.39e-09  9.90e-01  
 17  +3.0200e-01  +3.0200e-01  7.91e-09  1.74e-11  1.29e-09  3.26e-12  7.40e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.3794ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:42 PM: Optimal value: 3.020e-01
(CVXPY) Sep 20 07:57:42 PM: Compilation took 6.504e-03 seconds
(CVXPY) Sep 20 07:57:42 PM: Solver (including time spent in interface) took 2.404e-02 seconds
Iteration: 16, Objective: 0.3020
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:42 PM: Your problem has 679 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:42 PM: Finished problem compilation (took 7.107e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 679
  constraints   = 1179
  nnz(P)        = 0
  nnz(A)        = 10050
  cones (total) = 1
    : Nonnegative = 1,  numel = 1179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0190e+02  5.01e+02  9.59e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.6032e-01  +1.0955e+02  1.09e+02  4.30e-01  2.15e+01  3.83e-03  5.73e-01  5.86e-01  
  2  +5.1760e-01  +1.3059e+01  1.25e+01  1.32e-01  8.45e+00  1.88e-02  2.45e-01  9.90e-01  
  3  +5.0545e-01  +2.6700e+00  2.16e+00  2.87e-02  2.12e+00  3.12e-03  6.73e-02  7.56e-01  
  4  +5.0505e-01  +2.8299e+00  2.32e+00  2.54e-02  1.89e+00  3.54e-03  5.85e-02  2.26e-01  
  5  +4.9767e-01  +3.3780e+00  2.88e+00  1.65e-02  1.26e+00  4.27e-03  3.77e-02  7.12e-01  
  6  +4.7552e-01  +2.4208e+00  1.95e+00  6.00e-03  4.65e-01  5.09e-03  1.40e-02  6.34e-01  
  7  +4.5038e-01  +1.9218e+00  1.47e+00  3.97e-03  3.05e-01  3.64e-03  9.66e-03  4.03e-01  
  8  +4.2752e-01  +1.4397e+00  1.01e+00  2.83e-03  2.14e-01  1.65e-03  7.27e-03  4.02e-01  
  9  +3.7342e-01  +6.9275e-01  3.19e-01  8.78e-04  6.46e-02  1.64e-04  2.61e-03  7.93e-01  
 10  +3.5116e-01  +5.6983e-01  2.19e-01  5.79e-04  4.24e-02  1.11e-04  1.83e-03  4.11e-01  
 11  +3.2300e-01  +4.0815e-01  8.52e-02  2.18e-04  1.59e-02  4.13e-05  7.60e-04  6.47e-01  
 12  +3.1115e-01  +3.4758e-01  3.64e-02  9.05e-05  6.60e-03  1.75e-05  3.36e-04  6.12e-01  
 13  +3.0446e-01  +3.1584e-01  1.14e-02  2.70e-05  1.97e-03  5.41e-06  1.06e-04  8.11e-01  
 14  +3.0165e-01  +3.0351e-01  1.85e-03  4.32e-06  3.15e-04  8.28e-07  1.77e-05  9.02e-01  
 15  +3.0113e-01  +3.0134e-01  2.12e-04  4.91e-07  3.58e-05  8.98e-08  2.05e-06  9.90e-01  
 16  +3.0105e-01  +3.0105e-01  2.24e-06  5.19e-09  3.78e-07  9.46e-10  2.17e-08  9.89e-01  
 17  +3.0105e-01  +3.0105e-01  2.24e-08  5.19e-11  3.78e-09  9.47e-12  2.17e-10  9.90e-01  
 18  +3.0105e-01  +3.0105e-01  2.24e-10  5.19e-13  3.78e-11  9.48e-14  2.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.8239ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:42 PM: Optimal value: 3.011e-01
(CVXPY) Sep 20 07:57:42 PM: Compilation took 7.107e-03 seconds
(CVXPY) Sep 20 07:57:42 PM: Solver (including time spent in interface) took 2.659e-02 seconds
Iteration: 17, Objective: 0.3011
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:42 PM: Your problem has 689 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:42 PM: Finished problem compilation (took 8.507e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 689
  constraints   = 1189
  nnz(P)        = 0
  nnz(A)        = 10134
  cones (total) = 1
    : Nonnegative = 1,  numel = 1189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9940e-01  +5.0191e+02  5.01e+02  9.59e-01  3.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.5963e-01  +1.0957e+02  1.09e+02  4.30e-01  2.14e+01  3.83e-03  5.73e-01  5.87e-01  
  2  +5.1699e-01  +1.3109e+01  1.26e+01  1.32e-01  8.38e+00  1.89e-02  2.44e-01  9.90e-01  
  3  +5.0485e-01  +2.5646e+00  2.06e+00  2.66e-02  1.96e+00  3.10e-03  6.24e-02  7.74e-01  
  4  +4.9997e-01  +3.0735e+00  2.57e+00  1.65e-02  1.25e+00  4.72e-03  3.74e-02  6.54e-01  
  5  +4.7955e-01  +2.4558e+00  1.98e+00  6.55e-03  5.07e-01  5.82e-03  1.52e-02  6.60e-01  
  6  +4.5112e-01  +1.8213e+00  1.37e+00  3.98e-03  3.04e-01  3.31e-03  9.76e-03  4.88e-01  
  7  +4.1148e-01  +1.0455e+00  6.34e-01  1.92e-03  1.42e-01  2.86e-05  5.23e-03  7.65e-01  
  8  +3.6586e-01  +6.7544e-01  3.10e-01  8.55e-04  6.24e-02  3.30e-05  2.59e-03  5.78e-01  
  9  +3.4000e-01  +5.2094e-01  1.81e-01  4.79e-04  3.48e-02  2.61e-05  1.57e-03  4.61e-01  
 10  +3.1642e-01  +3.9002e-01  7.36e-02  1.87e-04  1.35e-02  1.43e-05  6.68e-04  6.45e-01  
 11  +3.0703e-01  +3.4467e-01  3.76e-02  9.15e-05  6.66e-03  9.38e-06  3.45e-04  5.88e-01  
 12  +2.9906e-01  +3.0818e-01  9.12e-03  2.13e-05  1.55e-03  2.66e-06  8.54e-05  8.11e-01  
 13  +2.9684e-01  +2.9852e-01  1.67e-03  3.86e-06  2.81e-04  5.45e-07  1.60e-05  8.65e-01  
 14  +2.9635e-01  +2.9649e-01  1.42e-04  3.25e-07  2.37e-05  5.69e-08  1.37e-06  9.81e-01  
 15  +2.9630e-01  +2.9630e-01  1.44e-06  3.30e-09  2.41e-07  5.77e-10  1.39e-08  9.90e-01  
 16  +2.9630e-01  +2.9630e-01  1.44e-08  3.30e-11  2.41e-09  5.78e-12  1.39e-10  9.90e-01  
 17  +2.9630e-01  +2.9630e-01  1.45e-10  3.31e-13  2.41e-11  5.80e-14  1.40e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.3465ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:42 PM: Optimal value: 2.963e-01
(CVXPY) Sep 20 07:57:42 PM: Compilation took 8.507e-03 seconds
(CVXPY) Sep 20 07:57:42 PM: Solver (including time spent in interface) took 2.617e-02 seconds
Iteration: 18, Objective: 0.2963
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:42 PM: Your problem has 699 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:42 PM: Finished problem compilation (took 7.012e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 699
  constraints   = 1199
  nnz(P)        = 0
  nnz(A)        = 10208
  cones (total) = 1
    : Nonnegative = 1,  numel = 1199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +5.0186e+02  5.01e+02  9.59e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.5757e-01  +1.0960e+02  1.09e+02  4.31e-01  2.12e+01  3.84e-03  5.73e-01  5.86e-01  
  2  +5.1590e-01  +1.3249e+01  1.27e+01  1.31e-01  8.30e+00  1.91e-02  2.43e-01  9.90e-01  
  3  +5.0388e-01  +2.5943e+00  2.09e+00  2.54e-02  1.87e+00  3.44e-03  5.93e-02  7.81e-01  
  4  +4.9021e-01  +2.8736e+00  2.38e+00  1.03e-02  7.94e-01  6.95e-03  2.35e-02  7.77e-01  
  5  +4.5939e-01  +1.8961e+00  1.44e+00  4.30e-03  3.30e-01  4.59e-03  1.02e-02  6.52e-01  
  6  +4.3736e-01  +1.6093e+00  1.17e+00  3.21e-03  2.45e-01  3.33e-03  7.90e-03  3.09e-01  
  7  +3.9035e-01  +9.4081e-01  5.50e-01  1.62e-03  1.19e-01  3.89e-04  4.55e-03  6.88e-01  
  8  +3.4669e-01  +6.0257e-01  2.56e-01  7.06e-04  5.11e-02  1.49e-04  2.23e-03  6.00e-01  
  9  +3.2231e-01  +4.5821e-01  1.36e-01  3.63e-04  2.62e-02  7.43e-05  1.25e-03  5.29e-01  
 10  +3.0578e-01  +3.6677e-01  6.10e-02  1.58e-04  1.14e-02  3.22e-05  5.84e-04  5.92e-01  
 11  +2.9741e-01  +3.2511e-01  2.77e-02  6.75e-05  4.88e-03  1.35e-05  2.67e-04  8.26e-01  
 12  +2.9090e-01  +2.9548e-01  4.58e-03  1.09e-05  7.84e-04  2.11e-06  4.60e-05  8.46e-01  
 13  +2.8990e-01  +2.9103e-01  1.13e-03  2.65e-06  1.91e-04  4.58e-07  1.16e-05  9.90e-01  
 14  +2.8951e-01  +2.8955e-01  3.32e-05  7.74e-08  5.59e-06  1.31e-08  3.43e-07  9.71e-01  
 15  +2.8950e-01  +2.8950e-01  3.32e-07  7.74e-10  5.59e-08  1.31e-10  3.44e-09  9.90e-01  
 16  +2.8950e-01  +2.8950e-01  3.33e-09  7.75e-12  5.60e-10  1.32e-12  3.44e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.8408ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:42 PM: Optimal value: 2.895e-01
(CVXPY) Sep 20 07:57:42 PM: Compilation took 7.012e-03 seconds
(CVXPY) Sep 20 07:57:42 PM: Solver (including time spent in interface) took 2.719e-02 seconds
Iteration: 19, Objective: 0.2895
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:42 PM: Your problem has 709 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:42 PM: Finished problem compilation (took 8.410e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 709
  constraints   = 1209
  nnz(P)        = 0
  nnz(A)        = 10281
  cones (total) = 1
    : Nonnegative = 1,  numel = 1209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +5.0188e+02  5.01e+02  9.59e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.5676e-01  +1.0960e+02  1.09e+02  4.31e-01  2.11e+01  3.84e-03  5.72e-01  5.87e-01  
  2  +5.1532e-01  +1.3290e+01  1.28e+01  1.30e-01  8.22e+00  1.92e-02  2.42e-01  9.90e-01  
  3  +5.0337e-01  +2.7350e+00  2.23e+00  2.62e-02  1.92e+00  3.82e-03  6.07e-02  7.71e-01  
  4  +4.8410e-01  +2.7056e+00  2.22e+00  8.22e-03  6.36e-01  8.64e-03  1.88e-02  7.97e-01  
  5  +4.4720e-01  +1.6551e+00  1.21e+00  3.68e-03  2.80e-01  2.79e-03  9.00e-03  6.89e-01  
  6  +4.1115e-01  +1.0456e+00  6.34e-01  2.16e-03  1.59e-01  2.23e-05  5.94e-03  6.77e-01  
  7  +3.6707e-01  +7.3132e-01  3.64e-01  1.07e-03  7.80e-02  3.00e-05  3.21e-03  5.25e-01  
  8  +3.3424e-01  +5.3181e-01  1.98e-01  5.48e-04  3.96e-02  2.51e-05  1.79e-03  5.15e-01  
  9  +3.0749e-01  +3.8493e-01  7.74e-02  2.05e-04  1.49e-02  1.38e-05  7.40e-04  6.60e-01  
 10  +2.9944e-01  +3.4571e-01  4.63e-02  1.17e-04  8.54e-03  1.32e-05  4.41e-04  6.47e-01  
 11  +2.9074e-01  +3.0479e-01  1.40e-02  3.46e-05  2.52e-03  4.13e-06  1.38e-04  7.17e-01  
 12  +2.8767e-01  +2.9059e-01  2.91e-03  7.12e-06  5.19e-04  8.69e-07  2.95e-05  8.07e-01  
 13  +2.8706e-01  +2.8785e-01  7.86e-04  1.90e-06  1.38e-04  2.62e-07  8.03e-06  8.24e-01  
 14  +2.8686e-01  +2.8703e-01  1.71e-04  4.06e-07  2.96e-05  6.39e-08  1.75e-06  9.18e-01  
 15  +2.8680e-01  +2.8680e-01  3.55e-06  8.42e-09  6.15e-07  1.33e-09  3.65e-08  9.80e-01  
 16  +2.8680e-01  +2.8680e-01  3.57e-08  8.46e-11  6.18e-09  1.34e-11  3.67e-10  9.90e-01  
 17  +2.8680e-01  +2.8680e-01  3.68e-10  8.72e-13  6.37e-11  1.38e-13  3.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.0903ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:42 PM: Optimal value: 2.868e-01
(CVXPY) Sep 20 07:57:42 PM: Compilation took 8.410e-03 seconds
(CVXPY) Sep 20 07:57:42 PM: Solver (including time spent in interface) took 2.705e-02 seconds
Iteration: 20, Objective: 0.2868
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:42 PM: Your problem has 719 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:42 PM: Finished problem compilation (took 9.185e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 719
  constraints   = 1219
  nnz(P)        = 0
  nnz(A)        = 10379
  cones (total) = 1
    : Nonnegative = 1,  numel = 1219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0216e+02  5.02e+02  9.59e-01  3.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.5546e-01  +1.0969e+02  1.09e+02  4.32e-01  2.09e+01  3.84e-03  5.72e-01  5.87e-01  
  2  +5.1455e-01  +1.3368e+01  1.29e+01  1.30e-01  8.15e+00  1.93e-02  2.41e-01  9.90e-01  
  3  +5.0267e-01  +2.8028e+00  2.30e+00  2.61e-02  1.91e+00  4.09e-03  6.02e-02  7.72e-01  
  4  +4.8122e-01  +2.5688e+00  2.09e+00  7.63e-03  5.90e-01  9.08e-03  1.75e-02  7.81e-01  
  5  +4.4374e-01  +1.6796e+00  1.24e+00  3.75e-03  2.85e-01  3.41e-03  9.19e-03  6.45e-01  
  6  +4.0880e-01  +1.0828e+00  6.74e-01  2.31e-03  1.70e-01  2.70e-05  6.35e-03  6.82e-01  
  7  +3.5674e-01  +6.9301e-01  3.36e-01  9.72e-04  7.03e-02  4.18e-05  2.95e-03  6.38e-01  
  8  +3.2395e-01  +5.0013e-01  1.76e-01  4.81e-04  3.46e-02  3.04e-05  1.60e-03  5.44e-01  
  9  +3.0001e-01  +3.7317e-01  7.32e-02  1.90e-04  1.38e-02  1.54e-05  6.95e-04  6.32e-01  
 10  +2.9239e-01  +3.3649e-01  4.41e-02  1.10e-04  8.01e-03  1.37e-05  4.19e-04  6.55e-01  
 11  +2.8279e-01  +2.9212e-01  9.33e-03  2.27e-05  1.65e-03  2.90e-06  9.24e-05  8.01e-01  
 12  +2.8047e-01  +2.8191e-01  1.43e-03  3.45e-06  2.51e-04  4.73e-07  1.46e-05  8.92e-01  
 13  +2.8005e-01  +2.8021e-01  1.53e-04  3.64e-07  2.66e-05  5.39e-08  1.57e-06  9.32e-01  
 14  +2.8000e-01  +2.8000e-01  1.67e-06  3.97e-09  2.90e-07  5.87e-10  1.72e-08  9.89e-01  
 15  +2.8000e-01  +2.8000e-01  1.67e-08  3.98e-11  2.90e-09  5.88e-12  1.73e-10  9.90e-01  
 16  +2.8000e-01  +2.8000e-01  1.69e-10  4.03e-13  2.94e-11  5.97e-14  1.75e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.1424ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:42 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:42 PM: Optimal value: 2.800e-01
(CVXPY) Sep 20 07:57:42 PM: Compilation took 9.185e-03 seconds
(CVXPY) Sep 20 07:57:42 PM: Solver (including time spent in interface) took 2.691e-02 seconds
Iteration: 21, Objective: 0.2800
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:43 PM: Your problem has 729 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:43 PM: Finished problem compilation (took 7.087e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 729
  constraints   = 1229
  nnz(P)        = 0
  nnz(A)        = 10463
  cones (total) = 1
    : Nonnegative = 1,  numel = 1229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +5.0216e+02  5.02e+02  9.60e-01  3.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.5453e-01  +1.0968e+02  1.09e+02  4.32e-01  2.08e+01  3.85e-03  5.71e-01  5.87e-01  
  2  +5.1399e-01  +1.3400e+01  1.29e+01  1.29e-01  8.07e+00  1.93e-02  2.40e-01  9.90e-01  
  3  +5.0201e-01  +2.8020e+00  2.30e+00  2.54e-02  1.85e+00  4.24e-03  5.86e-02  7.76e-01  
  4  +4.8030e-01  +2.5304e+00  2.05e+00  7.68e-03  5.91e-01  9.06e-03  1.76e-02  7.58e-01  
  5  +4.4134e-01  +1.6698e+00  1.23e+00  3.68e-03  2.79e-01  3.87e-03  9.01e-03  6.45e-01  
  6  +4.1186e-01  +1.1762e+00  7.64e-01  2.59e-03  1.90e-01  5.75e-04  6.98e-03  5.47e-01  
  7  +3.5015e-01  +6.5128e-01  3.01e-01  8.47e-04  6.10e-02  1.82e-04  2.57e-03  7.08e-01  
  8  +3.2450e-01  +5.1514e-01  1.91e-01  5.19e-04  3.72e-02  1.09e-04  1.71e-03  4.52e-01  
  9  +2.9943e-01  +3.7904e-01  7.96e-02  2.09e-04  1.50e-02  4.30e-05  7.65e-04  6.54e-01  
 10  +2.9074e-01  +3.3528e-01  4.45e-02  1.13e-04  8.15e-03  2.29e-05  4.32e-04  6.64e-01  
 11  +2.8478e-01  +3.0697e-01  2.22e-02  5.44e-05  3.94e-03  1.09e-05  2.17e-04  6.96e-01  
 12  +2.7927e-01  +2.8259e-01  3.32e-03  8.00e-06  5.79e-04  1.48e-06  3.35e-05  9.01e-01  
 13  +2.7835e-01  +2.7878e-01  4.30e-04  1.03e-06  7.42e-05  1.72e-07  4.41e-06  9.90e-01  
 14  +2.7820e-01  +2.7821e-01  4.78e-06  1.14e-08  8.26e-07  1.91e-09  4.92e-08  9.89e-01  
 15  +2.7820e-01  +2.7820e-01  4.79e-08  1.14e-10  8.26e-09  1.91e-11  4.92e-10  9.90e-01  
 16  +2.7820e-01  +2.7820e-01  4.80e-10  1.15e-12  8.28e-11  1.91e-13  4.93e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.113ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:43 PM: Optimal value: 2.782e-01
(CVXPY) Sep 20 07:57:43 PM: Compilation took 7.087e-03 seconds
(CVXPY) Sep 20 07:57:43 PM: Solver (including time spent in interface) took 2.809e-02 seconds
Iteration: 22, Objective: 0.2782
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:43 PM: Your problem has 739 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:43 PM: Finished problem compilation (took 7.220e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:43 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 739
  constraints   = 1239
  nnz(P)        = 0
  nnz(A)        = 10552
  cones (total) = 1
    : Nonnegative = 1,  numel = 1239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0218e+02  5.02e+02  9.60e-01  3.46e+01  1.00e+00  1.01e+00   ------   
  1  +5.5373e-01  +1.0971e+02  1.09e+02  4.32e-01  2.07e+01  3.85e-03  5.71e-01  5.87e-01  
  2  +5.1347e-01  +1.3447e+01  1.29e+01  1.29e-01  7.99e+00  1.94e-02  2.40e-01  9.90e-01  
  3  +5.0137e-01  +2.8628e+00  2.36e+00  2.53e-02  1.84e+00  4.48e-03  5.85e-02  7.78e-01  
  4  +4.7930e-01  +2.5035e+00  2.02e+00  7.80e-03  5.97e-01  9.04e-03  1.80e-02  7.37e-01  
  5  +4.4059e-01  +1.7023e+00  1.26e+00  3.79e-03  2.86e-01  4.53e-03  9.28e-03  6.22e-01  
  6  +4.0650e-01  +1.1107e+00  7.04e-01  2.43e-03  1.77e-01  3.53e-05  6.67e-03  6.56e-01  
  7  +3.4861e-01  +6.5759e-01  3.09e-01  8.87e-04  6.35e-02  3.65e-05  2.72e-03  6.70e-01  
  8  +3.1825e-01  +4.8666e-01  1.68e-01  4.63e-04  3.30e-02  2.82e-05  1.57e-03  5.14e-01  
  9  +2.9712e-01  +3.7487e-01  7.78e-02  2.05e-04  1.46e-02  1.75e-05  7.60e-04  6.20e-01  
 10  +2.8686e-01  +3.2318e-01  3.63e-02  9.23e-05  6.61e-03  1.21e-05  3.61e-04  7.67e-01  
 11  +2.8240e-01  +3.0265e-01  2.03e-02  5.01e-05  3.60e-03  7.16e-06  2.03e-04  5.65e-01  
 12  +2.7741e-01  +2.8058e-01  3.17e-03  7.68e-06  5.51e-04  1.15e-06  3.26e-05  8.99e-01  
 13  +2.7654e-01  +2.7695e-01  4.06e-04  9.75e-07  6.98e-05  1.58e-07  4.23e-06  9.90e-01  
 14  +2.7640e-01  +2.7641e-01  4.41e-06  1.06e-08  7.60e-07  1.71e-09  4.61e-08  9.89e-01  
 15  +2.7640e-01  +2.7640e-01  4.42e-08  1.06e-10  7.60e-09  1.71e-11  4.61e-10  9.90e-01  
 16  +2.7640e-01  +2.7640e-01  4.42e-10  1.06e-12  7.60e-11  1.71e-13  4.62e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.6866ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:43 PM: Optimal value: 2.764e-01
(CVXPY) Sep 20 07:57:43 PM: Compilation took 7.220e-03 seconds
(CVXPY) Sep 20 07:57:43 PM: Solver (including time spent in interface) took 2.970e-02 seconds
Iteration: 23, Objective: 0.2764
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:43 PM: Your problem has 749 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:43 PM: Finished problem compilation (took 7.658e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 749
  constraints   = 1249
  nnz(P)        = 0
  nnz(A)        = 10629
  cones (total) = 1
    : Nonnegative = 1,  numel = 1249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9935e-01  +5.0213e+02  5.02e+02  9.60e-01  3.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.5299e-01  +1.0972e+02  1.09e+02  4.33e-01  2.06e+01  3.85e-03  5.71e-01  5.87e-01  
  2  +5.1310e-01  +1.3473e+01  1.30e+01  1.29e-01  7.91e+00  1.94e-02  2.39e-01  9.90e-01  
  3  +5.0087e-01  +2.8680e+00  2.37e+00  2.50e-02  1.81e+00  4.58e-03  5.76e-02  7.83e-01  
  4  +4.7860e-01  +2.4914e+00  2.01e+00  7.90e-03  6.02e-01  8.94e-03  1.83e-02  7.23e-01  
  5  +4.3989e-01  +1.7251e+00  1.29e+00  3.89e-03  2.93e-01  4.85e-03  9.55e-03  6.06e-01  
  6  +4.0651e-01  +1.1264e+00  7.20e-01  2.50e-03  1.82e-01  3.80e-05  6.86e-03  6.53e-01  
  7  +3.4900e-01  +6.7242e-01  3.23e-01  9.35e-04  6.67e-02  3.69e-05  2.86e-03  6.55e-01  
  8  +3.1461e-01  +4.7594e-01  1.61e-01  4.45e-04  3.15e-02  2.68e-05  1.52e-03  5.57e-01  
  9  +2.9392e-01  +3.6983e-01  7.59e-02  2.00e-04  1.42e-02  1.72e-05  7.47e-04  6.21e-01  
 10  +2.8429e-01  +3.2149e-01  3.72e-02  9.49e-05  6.79e-03  1.16e-05  3.73e-04  7.10e-01  
 11  +2.8001e-01  +3.0163e-01  2.16e-02  5.38e-05  3.86e-03  7.22e-06  2.18e-04  5.26e-01  
 12  +2.7497e-01  +2.7932e-01  4.35e-03  1.06e-05  7.60e-04  1.53e-06  4.47e-05  8.62e-01  
 13  +2.7373e-01  +2.7412e-01  3.93e-04  9.51e-07  6.83e-05  1.38e-07  4.11e-06  9.25e-01  
 14  +2.7360e-01  +2.7361e-01  4.49e-06  1.09e-08  7.80e-07  1.56e-09  4.71e-08  9.89e-01  
 15  +2.7360e-01  +2.7360e-01  4.50e-08  1.09e-10  7.81e-09  1.56e-11  4.72e-10  9.90e-01  
 16  +2.7360e-01  +2.7360e-01  4.50e-10  1.09e-12  7.81e-11  1.56e-13  4.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.7364ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:43 PM: Optimal value: 2.736e-01
(CVXPY) Sep 20 07:57:43 PM: Compilation took 7.658e-03 seconds
(CVXPY) Sep 20 07:57:43 PM: Solver (including time spent in interface) took 3.032e-02 seconds
Iteration: 24, Objective: 0.2736
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:43 PM: Your problem has 759 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:43 PM: Finished problem compilation (took 8.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 759
  constraints   = 1259
  nnz(P)        = 0
  nnz(A)        = 10677
  cones (total) = 1
    : Nonnegative = 1,  numel = 1259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9934e-01  +5.0217e+02  5.02e+02  9.60e-01  3.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.5148e-01  +1.0978e+02  1.09e+02  4.33e-01  2.05e+01  3.86e-03  5.71e-01  5.87e-01  
  2  +5.1217e-01  +1.3573e+01  1.31e+01  1.28e-01  7.84e+00  1.95e-02  2.38e-01  9.90e-01  
  3  +4.9975e-01  +2.8826e+00  2.38e+00  2.41e-02  1.74e+00  4.82e-03  5.56e-02  7.91e-01  
  4  +4.7485e-01  +2.4496e+00  1.97e+00  7.46e-03  5.67e-01  9.37e-03  1.73e-02  7.22e-01  
  5  +4.4384e-01  +1.8991e+00  1.46e+00  4.49e-03  3.37e-01  6.29e-03  1.09e-02  4.72e-01  
  6  +3.9876e-01  +1.1014e+00  7.03e-01  2.24e-03  1.63e-01  5.47e-05  6.05e-03  7.36e-01  
  7  +3.4417e-01  +6.5487e-01  3.11e-01  9.02e-04  6.41e-02  4.16e-05  2.77e-03  6.22e-01  
  8  +3.1127e-01  +4.6861e-01  1.57e-01  4.36e-04  3.08e-02  3.11e-05  1.50e-03  5.75e-01  
  9  +2.9090e-01  +3.6193e-01  7.10e-02  1.89e-04  1.34e-02  1.83e-05  7.05e-04  6.46e-01  
 10  +2.8252e-01  +3.1881e-01  3.63e-02  9.40e-05  6.72e-03  1.13e-05  3.66e-04  6.40e-01  
 11  +2.7702e-01  +2.9241e-01  1.54e-02  3.90e-05  2.80e-03  5.37e-06  1.58e-04  7.48e-01  
 12  +2.7339e-01  +2.7588e-01  2.50e-03  6.31e-06  4.52e-04  8.97e-07  2.65e-05  9.01e-01  
 13  +2.7271e-01  +2.7306e-01  3.46e-04  8.74e-07  6.25e-05  1.25e-07  3.72e-06  8.95e-01  
 14  +2.7260e-01  +2.7261e-01  3.82e-06  9.65e-09  6.91e-07  1.38e-09  4.12e-08  9.89e-01  
 15  +2.7260e-01  +2.7260e-01  3.82e-08  9.66e-11  6.92e-09  1.38e-11  4.12e-10  9.90e-01  
 16  +2.7260e-01  +2.7260e-01  3.83e-10  9.67e-13  6.92e-11  1.38e-13  4.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 29.7903ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:43 PM: Optimal value: 2.726e-01
(CVXPY) Sep 20 07:57:43 PM: Compilation took 8.509e-03 seconds
(CVXPY) Sep 20 07:57:43 PM: Solver (including time spent in interface) took 3.178e-02 seconds
Iteration: 25, Objective: 0.2726
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:43 PM: Your problem has 768 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:43 PM: Finished problem compilation (took 8.093e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 768
  constraints   = 1268
  nnz(P)        = 0
  nnz(A)        = 10750
  cones (total) = 1
    : Nonnegative = 1,  numel = 1268

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9935e-01  +5.0215e+02  5.02e+02  9.60e-01  3.43e+01  1.00e+00  1.01e+00   ------   
  1  +5.5103e-01  +1.0984e+02  1.09e+02  4.33e-01  2.03e+01  3.86e-03  5.70e-01  5.87e-01  
  2  +5.1193e-01  +1.3593e+01  1.31e+01  1.28e-01  7.78e+00  1.96e-02  2.38e-01  9.90e-01  
  3  +4.9945e-01  +2.9430e+00  2.44e+00  2.44e-02  1.75e+00  4.96e-03  5.61e-02  7.89e-01  
  4  +4.7355e-01  +2.4590e+00  1.99e+00  7.40e-03  5.61e-01  9.56e-03  1.72e-02  7.22e-01  
  5  +4.4201e-01  +1.9182e+00  1.48e+00  4.47e-03  3.35e-01  6.64e-03  1.08e-02  4.64e-01  
  6  +3.9653e-01  +1.0864e+00  6.90e-01  2.20e-03  1.60e-01  5.64e-05  5.98e-03  7.21e-01  
  7  +3.3967e-01  +6.3807e-01  2.98e-01  8.62e-04  6.11e-02  4.44e-05  2.66e-03  6.47e-01  
  8  +3.0650e-01  +4.4965e-01  1.43e-01  3.99e-04  2.81e-02  2.76e-05  1.38e-03  5.67e-01  
  9  +2.8841e-01  +3.5691e-01  6.85e-02  1.83e-04  1.30e-02  1.70e-05  6.88e-04  6.18e-01  
 10  +2.8008e-01  +3.1450e-01  3.44e-02  8.97e-05  6.40e-03  1.01e-05  3.52e-04  6.23e-01  
 11  +2.7460e-01  +2.8823e-01  1.36e-02  3.48e-05  2.49e-03  4.62e-06  1.42e-04  7.71e-01  
 12  +2.7142e-01  +2.7384e-01  2.42e-03  6.17e-06  4.41e-04  8.33e-07  2.60e-05  8.64e-01  
 13  +2.7083e-01  +2.7136e-01  5.36e-04  1.36e-06  9.70e-05  1.95e-07  5.83e-06  9.06e-01  
 14  +2.7065e-01  +2.7066e-01  1.05e-05  2.66e-08  1.91e-06  3.80e-09  1.15e-07  9.80e-01  
 15  +2.7065e-01  +2.7065e-01  1.06e-07  2.67e-10  1.91e-08  3.81e-11  1.15e-09  9.90e-01  
 16  +2.7065e-01  +2.7065e-01  1.06e-09  2.67e-12  1.91e-10  3.82e-13  1.15e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 30.8442ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:43 PM: Optimal value: 2.707e-01
(CVXPY) Sep 20 07:57:43 PM: Compilation took 8.093e-03 seconds
(CVXPY) Sep 20 07:57:43 PM: Solver (including time spent in interface) took 3.302e-02 seconds
Iteration: 26, Objective: 0.2707
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:44 PM: Your problem has 778 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:44 PM: Finished problem compilation (took 8.528e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 778
  constraints   = 1278
  nnz(P)        = 0
  nnz(A)        = 10806
  cones (total) = 1
    : Nonnegative = 1,  numel = 1278

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9935e-01  +5.0215e+02  5.02e+02  9.60e-01  3.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.5028e-01  +1.0992e+02  1.09e+02  4.34e-01  2.02e+01  3.87e-03  5.70e-01  5.87e-01  
  2  +5.1154e-01  +1.3639e+01  1.31e+01  1.28e-01  7.72e+00  1.96e-02  2.37e-01  9.90e-01  
  3  +4.9894e-01  +2.9992e+00  2.50e+00  2.45e-02  1.75e+00  5.14e-03  5.64e-02  7.89e-01  
  4  +4.7317e-01  +2.4781e+00  2.00e+00  7.67e-03  5.78e-01  9.44e-03  1.78e-02  7.08e-01  
  5  +4.4110e-01  +1.9153e+00  1.47e+00  4.50e-03  3.36e-01  6.77e-03  1.09e-02  4.66e-01  
  6  +3.9343e-01  +1.0830e+00  6.90e-01  2.17e-03  1.57e-01  5.90e-05  5.90e-03  7.41e-01  
  7  +3.3663e-01  +6.3675e-01  3.00e-01  8.67e-04  6.10e-02  5.25e-05  2.71e-03  6.64e-01  
  8  +3.0315e-01  +4.4048e-01  1.37e-01  3.83e-04  2.67e-02  2.95e-05  1.35e-03  5.90e-01  
  9  +2.8681e-01  +3.5615e-01  6.93e-02  1.86e-04  1.30e-02  1.80e-05  7.08e-04  5.87e-01  
 10  +2.7690e-01  +3.0608e-01  2.92e-02  7.53e-05  5.31e-03  8.82e-06  3.05e-04  6.83e-01  
 11  +2.7190e-01  +2.8239e-01  1.05e-02  2.65e-05  1.87e-03  3.55e-06  1.12e-04  7.93e-01  
 12  +2.6975e-01  +2.7281e-01  3.06e-03  7.67e-06  5.41e-04  1.06e-06  3.34e-05  7.82e-01  
 13  +2.6891e-01  +2.6926e-01  3.52e-04  8.79e-07  6.19e-05  1.21e-07  3.90e-06  9.01e-01  
 14  +2.6880e-01  +2.6881e-01  4.57e-06  1.14e-08  8.03e-07  1.58e-09  5.08e-08  9.89e-01  
 15  +2.6880e-01  +2.6880e-01  4.59e-08  1.14e-10  8.06e-09  1.59e-11  5.10e-10  9.90e-01  
 16  +2.6880e-01  +2.6880e-01  4.61e-10  1.15e-12  8.10e-11  1.60e-13  5.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.9431ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:44 PM: Optimal value: 2.688e-01
(CVXPY) Sep 20 07:57:44 PM: Compilation took 8.528e-03 seconds
(CVXPY) Sep 20 07:57:44 PM: Solver (including time spent in interface) took 3.332e-02 seconds
Iteration: 27, Objective: 0.2688
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:44 PM: Your problem has 786 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:44 PM: Finished problem compilation (took 8.151e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 786
  constraints   = 1286
  nnz(P)        = 0
  nnz(A)        = 10882
  cones (total) = 1
    : Nonnegative = 1,  numel = 1286

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9932e-01  +5.0218e+02  5.02e+02  9.61e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.4859e-01  +1.1001e+02  1.09e+02  4.34e-01  2.02e+01  3.87e-03  5.70e-01  5.86e-01  
  2  +5.1043e-01  +1.3764e+01  1.33e+01  1.28e-01  7.67e+00  1.98e-02  2.37e-01  9.90e-01  
  3  +4.9738e-01  +3.0766e+00  2.58e+00  2.41e-02  1.72e+00  5.53e-03  5.53e-02  7.94e-01  
  4  +4.6772e-01  +2.4433e+00  1.98e+00  7.25e-03  5.46e-01  9.89e-03  1.69e-02  7.15e-01  
  5  +4.3256e-01  +1.9038e+00  1.47e+00  4.26e-03  3.18e-01  7.45e-03  1.03e-02  4.58e-01  
  6  +3.8578e-01  +1.0874e+00  7.02e-01  2.27e-03  1.63e-01  5.88e-05  6.28e-03  7.31e-01  
  7  +3.2729e-01  +5.8669e-01  2.59e-01  7.58e-04  5.29e-02  4.64e-05  2.42e-03  7.31e-01  
  8  +3.0405e-01  +4.5731e-01  1.53e-01  4.33e-04  3.01e-02  3.19e-05  1.52e-03  4.50e-01  
  9  +2.8554e-01  +3.5970e-01  7.42e-02  2.01e-04  1.40e-02  1.92e-05  7.67e-04  6.14e-01  
 10  +2.8002e-01  +3.3222e-01  5.22e-02  1.38e-04  9.69e-03  1.53e-05  5.43e-04  4.48e-01  
 11  +2.7131e-01  +2.9024e-01  1.89e-02  4.85e-05  3.41e-03  5.85e-06  2.05e-04  6.99e-01  
 12  +2.6715e-01  +2.7110e-01  3.96e-03  9.88e-06  6.95e-04  1.32e-06  4.44e-05  8.85e-01  
 13  +2.6596e-01  +2.6613e-01  1.76e-04  4.36e-07  3.07e-05  5.49e-08  2.02e-06  9.57e-01  
 14  +2.6590e-01  +2.6590e-01  1.79e-06  4.42e-09  3.11e-07  5.54e-10  2.05e-08  9.90e-01  
 15  +2.6590e-01  +2.6590e-01  1.79e-08  4.42e-11  3.11e-09  5.55e-12  2.06e-10  9.90e-01  
 16  +2.6590e-01  +2.6590e-01  1.79e-10  4.42e-13  3.11e-11  5.55e-14  2.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 30.1654ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:44 PM: Optimal value: 2.659e-01
(CVXPY) Sep 20 07:57:44 PM: Compilation took 8.151e-03 seconds
(CVXPY) Sep 20 07:57:44 PM: Solver (including time spent in interface) took 3.176e-02 seconds
Iteration: 28, Objective: 0.2659
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:44 PM: Your problem has 796 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:44 PM: Finished problem compilation (took 7.472e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 796
  constraints   = 1296
  nnz(P)        = 0
  nnz(A)        = 10933
  cones (total) = 1
    : Nonnegative = 1,  numel = 1296

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9930e-01  +5.0217e+02  5.02e+02  9.61e-01  3.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.4739e-01  +1.1003e+02  1.09e+02  4.35e-01  2.01e+01  3.87e-03  5.70e-01  5.86e-01  
  2  +5.0956e-01  +1.3840e+01  1.33e+01  1.27e-01  7.63e+00  1.99e-02  2.36e-01  9.90e-01  
  3  +4.9601e-01  +2.9321e+00  2.44e+00  2.20e-02  1.58e+00  5.53e-03  5.07e-02  8.14e-01  
  4  +4.6604e-01  +2.3749e+00  1.91e+00  7.10e-03  5.33e-01  9.60e-03  1.66e-02  6.95e-01  
  5  +4.3273e-01  +1.9071e+00  1.47e+00  4.34e-03  3.23e-01  7.67e-03  1.05e-02  4.26e-01  
  6  +3.8303e-01  +1.0536e+00  6.71e-01  2.17e-03  1.55e-01  6.14e-05  6.01e-03  7.30e-01  
  7  +3.2937e-01  +6.1313e-01  2.84e-01  8.46e-04  5.90e-02  4.69e-05  2.69e-03  6.64e-01  
  8  +3.0205e-01  +4.5089e-01  1.49e-01  4.25e-04  2.94e-02  2.93e-05  1.50e-03  5.16e-01  
  9  +2.8369e-01  +3.5227e-01  6.86e-02  1.87e-04  1.30e-02  1.85e-05  7.15e-04  6.80e-01  
 10  +2.7782e-01  +3.2267e-01  4.49e-02  1.20e-04  8.37e-03  1.33e-05  4.73e-04  4.64e-01  
 11  +2.6950e-01  +2.8173e-01  1.22e-02  3.17e-05  2.22e-03  3.87e-06  1.34e-04  8.04e-01  
 12  +2.6684e-01  +2.6981e-01  2.97e-03  7.50e-06  5.25e-04  1.00e-06  3.37e-05  8.67e-01  
 13  +2.6597e-01  +2.6619e-01  2.17e-04  5.43e-07  3.80e-05  7.14e-08  2.50e-06  9.33e-01  
 14  +2.6590e-01  +2.6590e-01  2.22e-06  5.56e-09  3.90e-07  7.30e-10  2.57e-08  9.90e-01  
 15  +2.6590e-01  +2.6590e-01  2.23e-08  5.57e-11  3.90e-09  7.32e-12  2.58e-10  9.90e-01  
 16  +2.6590e-01  +2.6590e-01  2.24e-10  5.60e-13  3.92e-11  7.37e-14  2.60e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 30.1877ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:44 PM: Optimal value: 2.659e-01
(CVXPY) Sep 20 07:57:44 PM: Compilation took 7.472e-03 seconds
(CVXPY) Sep 20 07:57:44 PM: Solver (including time spent in interface) took 3.244e-02 seconds
Iteration: 29, Objective: 0.2659
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:44 PM: Your problem has 806 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:44 PM: Finished problem compilation (took 8.079e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 806
  constraints   = 1306
  nnz(P)        = 0
  nnz(A)        = 10994
  cones (total) = 1
    : Nonnegative = 1,  numel = 1306

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0217e+02  5.02e+02  9.61e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.4572e-01  +1.1014e+02  1.10e+02  4.35e-01  1.99e+01  3.88e-03  5.70e-01  5.86e-01  
  2  +5.0822e-01  +1.3956e+01  1.34e+01  1.27e-01  7.56e+00  2.01e-02  2.36e-01  9.90e-01  
  3  +4.9404e-01  +2.9365e+00  2.44e+00  2.10e-02  1.50e+00  5.85e-03  4.85e-02  8.22e-01  
  4  +4.6131e-01  +2.3227e+00  1.86e+00  6.80e-03  5.08e-01  9.71e-03  1.60e-02  6.91e-01  
  5  +4.2808e-01  +1.8502e+00  1.42e+00  4.20e-03  3.11e-01  7.63e-03  1.02e-02  4.08e-01  
  6  +3.7036e-01  +9.1348e-01  5.43e-01  1.73e-03  1.22e-01  6.14e-05  4.89e-03  7.50e-01  
  7  +3.3312e-01  +6.6402e-01  3.31e-01  1.00e-03  6.97e-02  5.66e-05  3.13e-03  4.83e-01  
  8  +2.9951e-01  +4.4849e-01  1.49e-01  4.28e-04  2.95e-02  3.03e-05  1.51e-03  5.94e-01  
  9  +2.8351e-01  +3.6215e-01  7.86e-02  2.18e-04  1.51e-02  2.32e-05  8.19e-04  6.91e-01  
 10  +2.7543e-01  +3.2181e-01  4.64e-02  1.24e-04  8.69e-03  1.45e-05  4.89e-04  4.95e-01  
 11  +2.6699e-01  +2.8013e-01  1.31e-02  3.42e-05  2.39e-03  4.37e-06  1.44e-04  8.10e-01  
 12  +2.6448e-01  +2.6883e-01  4.36e-03  1.11e-05  7.79e-04  1.51e-06  4.90e-05  7.98e-01  
 13  +2.6324e-01  +2.6365e-01  4.19e-04  1.05e-06  7.40e-05  1.41e-07  4.81e-06  9.13e-01  
 14  +2.6310e-01  +2.6311e-01  5.19e-06  1.30e-08  9.14e-07  1.73e-09  5.97e-08  9.88e-01  
 15  +2.6310e-01  +2.6310e-01  5.20e-08  1.31e-10  9.16e-09  1.74e-11  5.99e-10  9.90e-01  
 16  +2.6310e-01  +2.6310e-01  5.21e-10  1.31e-12  9.18e-11  1.74e-13  6.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 36.529ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:44 PM: Optimal value: 2.631e-01
(CVXPY) Sep 20 07:57:44 PM: Compilation took 8.079e-03 seconds
(CVXPY) Sep 20 07:57:44 PM: Solver (including time spent in interface) took 3.809e-02 seconds
Iteration: 30, Objective: 0.2631
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:44 PM: Your problem has 816 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:44 PM: Finished problem compilation (took 8.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 816
  constraints   = 1316
  nnz(P)        = 0
  nnz(A)        = 11031
  cones (total) = 1
    : Nonnegative = 1,  numel = 1316

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9929e-01  +5.0223e+02  5.02e+02  9.61e-01  3.37e+01  1.00e+00  1.01e+00   ------   
  1  +5.4486e-01  +1.1017e+02  1.10e+02  4.35e-01  1.98e+01  3.88e-03  5.69e-01  5.86e-01  
  2  +5.0780e-01  +1.3962e+01  1.35e+01  1.26e-01  7.49e+00  2.01e-02  2.35e-01  9.90e-01  
  3  +4.9313e-01  +2.9033e+00  2.41e+00  2.03e-02  1.45e+00  5.93e-03  4.69e-02  8.29e-01  
  4  +4.5915e-01  +2.2661e+00  1.81e+00  6.57e-03  4.89e-01  9.57e-03  1.55e-02  6.91e-01  
  5  +4.2578e-01  +1.8223e+00  1.40e+00  4.11e-03  3.03e-01  7.66e-03  1.00e-02  3.98e-01  
  6  +3.6852e-01  +9.1920e-01  5.51e-01  1.76e-03  1.24e-01  6.09e-05  5.01e-03  7.52e-01  
  7  +3.2886e-01  +6.4048e-01  3.12e-01  9.45e-04  6.54e-02  5.34e-05  2.99e-03  5.26e-01  
  8  +2.9896e-01  +4.5175e-01  1.53e-01  4.39e-04  3.02e-02  3.16e-05  1.55e-03  5.64e-01  
  9  +2.8320e-01  +3.6497e-01  8.18e-02  2.26e-04  1.56e-02  2.34e-05  8.47e-04  6.59e-01  
 10  +2.7452e-01  +3.2092e-01  4.64e-02  1.24e-04  8.64e-03  1.43e-05  4.85e-04  5.29e-01  
 11  +2.6620e-01  +2.8008e-01  1.39e-02  3.61e-05  2.52e-03  4.42e-06  1.50e-04  7.53e-01  
 12  +2.6348e-01  +2.6764e-01  4.16e-03  1.06e-05  7.45e-04  1.37e-06  4.59e-05  7.58e-01  
 13  +2.6271e-01  +2.6416e-01  1.45e-03  3.64e-06  2.56e-04  5.33e-07  1.62e-05  9.90e-01  
 14  +2.6222e-01  +2.6226e-01  4.63e-05  1.16e-07  8.14e-06  1.67e-08  5.21e-07  9.68e-01  
 15  +2.6220e-01  +2.6220e-01  4.64e-07  1.16e-09  8.16e-08  1.67e-10  5.22e-09  9.90e-01  
 16  +2.6220e-01  +2.6220e-01  4.65e-09  1.16e-11  8.17e-10  1.68e-12  5.24e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 36.0988ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:44 PM: Optimal value: 2.622e-01
(CVXPY) Sep 20 07:57:44 PM: Compilation took 8.509e-03 seconds
(CVXPY) Sep 20 07:57:44 PM: Solver (including time spent in interface) took 3.756e-02 seconds
Iteration: 31, Objective: 0.2622
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:44 PM: Your problem has 821 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:44 PM: Finished problem compilation (took 9.532e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 821
  constraints   = 1321
  nnz(P)        = 0
  nnz(A)        = 11059
  cones (total) = 1
    : Nonnegative = 1,  numel = 1321

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9929e-01  +5.0224e+02  5.02e+02  9.61e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.4462e-01  +1.1014e+02  1.10e+02  4.34e-01  1.98e+01  3.89e-03  5.69e-01  5.87e-01  
  2  +5.0775e-01  +1.3933e+01  1.34e+01  1.26e-01  7.42e+00  2.01e-02  2.34e-01  9.90e-01  
  3  +4.9266e-01  +2.8601e+00  2.37e+00  1.98e-02  1.41e+00  5.93e-03  4.58e-02  8.35e-01  
  4  +4.5826e-01  +2.2244e+00  1.77e+00  6.46e-03  4.79e-01  9.38e-03  1.53e-02  6.89e-01  
  5  +4.2549e-01  +1.8190e+00  1.39e+00  4.10e-03  3.02e-01  7.77e-03  1.00e-02  3.88e-01  
  6  +3.6812e-01  +9.1484e-01  5.47e-01  1.76e-03  1.23e-01  6.14e-05  5.01e-03  7.44e-01  
  7  +3.2975e-01  +6.4901e-01  3.19e-01  9.73e-04  6.71e-02  5.38e-05  3.08e-03  5.05e-01  
  8  +2.9935e-01  +4.5747e-01  1.58e-01  4.56e-04  3.12e-02  3.21e-05  1.61e-03  5.59e-01  
  9  +2.8325e-01  +3.6925e-01  8.60e-02  2.39e-04  1.64e-02  2.42e-05  9.07e-04  6.53e-01  
 10  +2.6959e-01  +2.9780e-01  2.82e-02  7.54e-05  5.18e-03  8.49e-06  3.11e-04  7.33e-01  
 11  +2.6458e-01  +2.7293e-01  8.36e-03  2.21e-05  1.52e-03  2.62e-06  9.54e-05  7.70e-01  
 12  +2.6336e-01  +2.6727e-01  3.91e-03  1.02e-05  6.99e-04  1.31e-06  4.52e-05  7.36e-01  
 13  +2.6224e-01  +2.6253e-01  2.86e-04  7.35e-07  5.05e-05  9.55e-08  3.36e-06  9.64e-01  
 14  +2.6215e-01  +2.6215e-01  3.41e-06  8.74e-09  6.01e-07  1.13e-09  4.01e-08  9.88e-01  
 15  +2.6215e-01  +2.6215e-01  3.41e-08  8.75e-11  6.01e-09  1.13e-11  4.02e-10  9.90e-01  
 16  +2.6215e-01  +2.6215e-01  3.42e-10  8.77e-13  6.03e-11  1.14e-13  4.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 38.2019ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:44 PM: Optimal value: 2.622e-01
(CVXPY) Sep 20 07:57:44 PM: Compilation took 9.532e-03 seconds
(CVXPY) Sep 20 07:57:44 PM: Solver (including time spent in interface) took 3.987e-02 seconds
Iteration: 32, Objective: 0.2622
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:45 PM: Your problem has 822 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:45 PM: Finished problem compilation (took 9.585e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 822
  constraints   = 1322
  nnz(P)        = 0
  nnz(A)        = 11068
  cones (total) = 1
    : Nonnegative = 1,  numel = 1322

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9929e-01  +5.0224e+02  5.02e+02  9.61e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.4461e-01  +1.1014e+02  1.10e+02  4.34e-01  1.97e+01  3.89e-03  5.69e-01  5.87e-01  
  2  +5.0773e-01  +1.3933e+01  1.34e+01  1.26e-01  7.41e+00  2.01e-02  2.34e-01  9.90e-01  
  3  +4.9253e-01  +2.8231e+00  2.33e+00  1.94e-02  1.39e+00  5.89e-03  4.51e-02  8.38e-01  
  4  +4.5794e-01  +2.2002e+00  1.74e+00  6.36e-03  4.72e-01  9.33e-03  1.51e-02  6.89e-01  
  5  +4.2522e-01  +1.8069e+00  1.38e+00  4.06e-03  2.99e-01  7.75e-03  9.95e-03  3.86e-01  
  6  +3.6756e-01  +9.1129e-01  5.44e-01  1.75e-03  1.23e-01  6.11e-05  5.00e-03  7.44e-01  
  7  +3.2932e-01  +6.4629e-01  3.17e-01  9.66e-04  6.66e-02  5.34e-05  3.06e-03  5.06e-01  
  8  +2.9903e-01  +4.5597e-01  1.57e-01  4.52e-04  3.10e-02  3.20e-05  1.60e-03  5.61e-01  
  9  +2.8151e-01  +3.6005e-01  7.85e-02  2.17e-04  1.49e-02  2.32e-05  8.33e-04  7.15e-01  
 10  +2.6842e-01  +2.9177e-01  2.33e-02  6.22e-05  4.27e-03  7.63e-06  2.59e-04  8.06e-01  
 11  +2.6450e-01  +2.7272e-01  8.22e-03  2.17e-05  1.49e-03  2.73e-06  9.42e-05  7.09e-01  
 12  +2.6324e-01  +2.6693e-01  3.69e-03  9.57e-06  6.57e-04  1.26e-06  4.29e-05  7.33e-01  
 13  +2.6218e-01  +2.6243e-01  2.48e-04  6.34e-07  4.36e-05  8.29e-08  2.94e-06  9.65e-01  
 14  +2.6210e-01  +2.6210e-01  2.81e-06  7.16e-09  4.92e-07  9.33e-10  3.33e-08  9.89e-01  
 15  +2.6210e-01  +2.6210e-01  2.81e-08  7.17e-11  4.92e-09  9.34e-12  3.33e-10  9.90e-01  
 16  +2.6210e-01  +2.6210e-01  2.82e-10  7.19e-13  4.94e-11  9.40e-14  3.35e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 38.8714ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:45 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:45 PM: Optimal value: 2.621e-01
(CVXPY) Sep 20 07:57:45 PM: Compilation took 9.585e-03 seconds
(CVXPY) Sep 20 07:57:45 PM: Solver (including time spent in interface) took 4.057e-02 seconds
FULL MODEL:
  Accruacy: 0.673
  Our objective: 0.3460000000000001

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x6 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.028)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.026)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1)                                             <-- (term's our objective: 0.03)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.018)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.02)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.018)
 OR (x1 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.01)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.01)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.006)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 10.291258811950684
Best over terms:
  Our final objective: 0.030000000000000047
    Its accruacy: 0.515
    Its hamming distance: 12
  Shortest hamming distance: 5
    Its our objective: 0.02800000000000003
  Highest accruacy: 0.515
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

